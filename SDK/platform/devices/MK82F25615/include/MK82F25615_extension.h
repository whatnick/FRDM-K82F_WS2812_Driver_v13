/*
** ###################################################################
**     Compilers:           Keil ARM C/C++ Compiler
**                          Freescale C/C++ for Embedded ARM
**                          GNU C Compiler
**                          GNU C Compiler - CodeSourcery Sourcery G++
**                          IAR ANSI C/C++ Compiler for ARM
**
**     Reference manual:    K82P121M150SF5RM, Rev. 0, May 2015
**     Version:             rev. 1.1, 2015-05-28
**     Build:               b150626
**
**     Abstract:
**         Extension to the CMSIS register access layer header.
**
**     Copyright (c) 2015 Freescale Semiconductor, Inc.
**     All rights reserved.
**
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**
**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**
**     http:                 www.freescale.com
**     mail:                 support@freescale.com
**
**     Revisions:
**     - rev. 1.0 (2015-04-09)
**         Initial version
**     - rev. 1.1 (2015-05-28)
**         Update according to the reference manual Rev. 0.
**
** ###################################################################
*/

/*
 * WARNING! DO NOT EDIT THIS FILE DIRECTLY!
 *
 * This file was generated automatically and any changes may be lost.
 */
#ifndef __MK82F25615_EXTENSION_H__
#define __MK82F25615_EXTENSION_H__

#include "MK82F25615.h"
#include "fsl_bitaccess.h"

#if defined(__IAR_SYSTEMS_ICC__)
  /*
   * Suppress "Error[Pm008]: sections of code should not be 'commented out' (MISRA C 2004 rule 2.4)"
   * as some register descriptions contain code examples
   */
  #pragma diag_suppress=pm008
#endif

/*
 * MK82F25615 ADC
 *
 * Analog-to-Digital Converter
 *
 * Registers defined in this header file:
 * - ADC_SC1 - ADC Status and Control Registers 1
 * - ADC_CFG1 - ADC Configuration Register 1
 * - ADC_CFG2 - ADC Configuration Register 2
 * - ADC_R - ADC Data Result Register
 * - ADC_CV1 - Compare Value Registers
 * - ADC_CV2 - Compare Value Registers
 * - ADC_SC2 - Status and Control Register 2
 * - ADC_SC3 - Status and Control Register 3
 * - ADC_OFS - ADC Offset Correction Register
 * - ADC_PG - ADC Plus-Side Gain Register
 * - ADC_MG - ADC Minus-Side Gain Register
 * - ADC_CLPD - ADC Plus-Side General Calibration Value Register
 * - ADC_CLPS - ADC Plus-Side General Calibration Value Register
 * - ADC_CLP4 - ADC Plus-Side General Calibration Value Register
 * - ADC_CLP3 - ADC Plus-Side General Calibration Value Register
 * - ADC_CLP2 - ADC Plus-Side General Calibration Value Register
 * - ADC_CLP1 - ADC Plus-Side General Calibration Value Register
 * - ADC_CLP0 - ADC Plus-Side General Calibration Value Register
 * - ADC_CLMD - ADC Minus-Side General Calibration Value Register
 * - ADC_CLMS - ADC Minus-Side General Calibration Value Register
 * - ADC_CLM4 - ADC Minus-Side General Calibration Value Register
 * - ADC_CLM3 - ADC Minus-Side General Calibration Value Register
 * - ADC_CLM2 - ADC Minus-Side General Calibration Value Register
 * - ADC_CLM1 - ADC Minus-Side General Calibration Value Register
 * - ADC_CLM0 - ADC Minus-Side General Calibration Value Register
 */

#define ADC_INSTANCE_COUNT (1U) /*!< Number of instances of the ADC module. */
#define ADC0_IDX (0U) /*!< Instance number for ADC0. */

/*******************************************************************************
 * ADC_SC1 - ADC Status and Control Registers 1
 ******************************************************************************/

/*!
 * @brief ADC_SC1 - ADC Status and Control Registers 1 (RW)
 *
 * Reset value: 0x0000001FU
 *
 * SC1A is used for both software and hardware trigger modes of operation. To
 * allow sequential conversions of the ADC to be triggered by internal peripherals,
 * the ADC can have more than one status and control register: one for each
 * conversion. The SC1B-SC1n registers indicate potentially multiple SC1 registers
 * for use only in hardware trigger mode. See the chip configuration information
 * about the number of SC1n registers specific to this device. The SC1n registers
 * have identical fields, and are used in a "ping-pong" approach to control ADC
 * operation. At any one point in time, only one of the SC1n registers is actively
 * controlling ADC conversions. Updating SC1A while SC1n is actively controlling
 * a conversion is allowed, and vice-versa for any of the SC1n registers specific
 * to this MCU. Writing SC1A while SC1A is actively controlling a conversion
 * aborts the current conversion. In Software Trigger mode, when SC2[ADTRG]=0,
 * writes to SC1A subsequently initiate a new conversion, if SC1[ADCH] contains a
 * value other than all 1s (module disabled). Writing any of the SC1n registers while
 * that specific SC1n register is actively controlling a conversion aborts the
 * current conversion. None of the SC1B-SC1n registers are used for software
 * trigger operation and therefore writes to the SC1B-SC1n registers do not initiate a
 * new conversion.
 */
/*!
 * @name Constants and macros for entire ADC_SC1 register
 */
/*@{*/
#define ADC_RD_SC1(base, index)  (ADC_SC1_REG(base, index))
#define ADC_WR_SC1(base, index, value) (ADC_SC1_REG(base, index) = (value))
#define ADC_RMW_SC1(base, index, mask, value) (ADC_WR_SC1(base, index, (ADC_RD_SC1(base, index) & ~(mask)) | (value)))
#define ADC_SET_SC1(base, index, value) (BME_OR32(&ADC_SC1_REG(base, index), (uint32_t)(value)))
#define ADC_CLR_SC1(base, index, value) (BME_AND32(&ADC_SC1_REG(base, index), (uint32_t)(~(value))))
#define ADC_TOG_SC1(base, index, value) (BME_XOR32(&ADC_SC1_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual ADC_SC1 bitfields
 */

/*!
 * @name Register ADC_SC1, field ADCH[4:0] (RW)
 *
 * Selects one of the input channels. The input channel decode depends on the
 * value of DIFF. DAD0-DAD3 are associated with the input pin pairs DADPx and
 * DADMx. Some of the input channel options in the bitfield-setting descriptions might
 * not be available for your device. For the actual ADC channel assignments for
 * your device, see the Chip Configuration details. The successive approximation
 * converter subsystem is turned off when the channel select bits are all set,
 * that is, ADCH = 11111. This feature allows explicit disabling of the ADC and
 * isolation of the input channel from all sources. Terminating continuous
 * conversions this way prevents an additional single conversion from being performed. It
 * is not necessary to set ADCH to all 1s to place the ADC in a low-power state
 * when continuous conversions are not enabled because the module automatically
 * enters a low-power state when a conversion completes.
 *
 * Values:
 * - 0b00000 - When DIFF=0, DADP0 is selected as input; when DIFF=1, DAD0 is
 *     selected as input.
 * - 0b00001 - When DIFF=0, DADP1 is selected as input; when DIFF=1, DAD1 is
 *     selected as input.
 * - 0b00010 - When DIFF=0, DADP2 is selected as input; when DIFF=1, DAD2 is
 *     selected as input.
 * - 0b00011 - When DIFF=0, DADP3 is selected as input; when DIFF=1, DAD3 is
 *     selected as input.
 * - 0b00100 - When DIFF=0, AD4 is selected as input; when DIFF=1, it is
 *     reserved.
 * - 0b00101 - When DIFF=0, AD5 is selected as input; when DIFF=1, it is
 *     reserved.
 * - 0b00110 - When DIFF=0, AD6 is selected as input; when DIFF=1, it is
 *     reserved.
 * - 0b00111 - When DIFF=0, AD7 is selected as input; when DIFF=1, it is
 *     reserved.
 * - 0b01000 - When DIFF=0, AD8 is selected as input; when DIFF=1, it is
 *     reserved.
 * - 0b01001 - When DIFF=0, AD9 is selected as input; when DIFF=1, it is
 *     reserved.
 * - 0b01010 - When DIFF=0, AD10 is selected as input; when DIFF=1, it is
 *     reserved.
 * - 0b01011 - When DIFF=0, AD11 is selected as input; when DIFF=1, it is
 *     reserved.
 * - 0b01100 - When DIFF=0, AD12 is selected as input; when DIFF=1, it is
 *     reserved.
 * - 0b01101 - When DIFF=0, AD13 is selected as input; when DIFF=1, it is
 *     reserved.
 * - 0b01110 - When DIFF=0, AD14 is selected as input; when DIFF=1, it is
 *     reserved.
 * - 0b01111 - When DIFF=0, AD15 is selected as input; when DIFF=1, it is
 *     reserved.
 * - 0b10000 - When DIFF=0, AD16 is selected as input; when DIFF=1, it is
 *     reserved.
 * - 0b10001 - When DIFF=0, AD17 is selected as input; when DIFF=1, it is
 *     reserved.
 * - 0b10010 - When DIFF=0, AD18 is selected as input; when DIFF=1, it is
 *     reserved.
 * - 0b10011 - When DIFF=0, AD19 is selected as input; when DIFF=1, it is
 *     reserved.
 * - 0b10100 - When DIFF=0, AD20 is selected as input; when DIFF=1, it is
 *     reserved.
 * - 0b10101 - When DIFF=0, AD21 is selected as input; when DIFF=1, it is
 *     reserved.
 * - 0b10110 - When DIFF=0, AD22 is selected as input; when DIFF=1, it is
 *     reserved.
 * - 0b10111 - When DIFF=0, AD23 is selected as input; when DIFF=1, it is
 *     reserved.
 * - 0b11000 - Reserved.
 * - 0b11001 - Reserved.
 * - 0b11010 - When DIFF=0, Temp Sensor (single-ended) is selected as input;
 *     when DIFF=1, Temp Sensor (differential) is selected as input.
 * - 0b11011 - When DIFF=0, Bandgap (single-ended) is selected as input; when
 *     DIFF=1, Bandgap (differential) is selected as input.
 * - 0b11100 - Reserved.
 * - 0b11101 - When DIFF=0,VREFSH is selected as input; when DIFF=1, -VREFSH
 *     (differential) is selected as input. Voltage reference selected is determined
 *     by SC2[REFSEL].
 * - 0b11110 - When DIFF=0,VREFSL is selected as input; when DIFF=1, it is
 *     reserved. Voltage reference selected is determined by SC2[REFSEL].
 * - 0b11111 - Module is disabled.
 */
/*@{*/
/*! @brief Read current value of the ADC_SC1_ADCH field. */
#define ADC_RD_SC1_ADCH(base, index) ((ADC_SC1_REG(base, index) & ADC_SC1_ADCH_MASK) >> ADC_SC1_ADCH_SHIFT)
#define ADC_BRD_SC1_ADCH(base, index) (BME_UBFX32(&ADC_SC1_REG(base, index), ADC_SC1_ADCH_SHIFT, ADC_SC1_ADCH_WIDTH))

/*! @brief Set the ADCH field to a new value. */
#define ADC_WR_SC1_ADCH(base, index, value) (ADC_RMW_SC1(base, index, ADC_SC1_ADCH_MASK, ADC_SC1_ADCH(value)))
#define ADC_BWR_SC1_ADCH(base, index, value) (BME_BFI32(&ADC_SC1_REG(base, index), ((uint32_t)(value) << ADC_SC1_ADCH_SHIFT), ADC_SC1_ADCH_SHIFT, ADC_SC1_ADCH_WIDTH))
/*@}*/

/*!
 * @name Register ADC_SC1, field DIFF[5] (RW)
 *
 * Configures the ADC to operate in differential mode. When enabled, this mode
 * automatically selects from the differential channels, and changes the
 * conversion algorithm and the number of cycles to complete a conversion.
 *
 * Values:
 * - 0b0 - Single-ended conversions and input channels are selected.
 * - 0b1 - Differential conversions and input channels are selected.
 */
/*@{*/
/*! @brief Read current value of the ADC_SC1_DIFF field. */
#define ADC_RD_SC1_DIFF(base, index) ((ADC_SC1_REG(base, index) & ADC_SC1_DIFF_MASK) >> ADC_SC1_DIFF_SHIFT)
#define ADC_BRD_SC1_DIFF(base, index) (BME_UBFX32(&ADC_SC1_REG(base, index), ADC_SC1_DIFF_SHIFT, ADC_SC1_DIFF_WIDTH))

/*! @brief Set the DIFF field to a new value. */
#define ADC_WR_SC1_DIFF(base, index, value) (ADC_RMW_SC1(base, index, ADC_SC1_DIFF_MASK, ADC_SC1_DIFF(value)))
#define ADC_BWR_SC1_DIFF(base, index, value) (BME_BFI32(&ADC_SC1_REG(base, index), ((uint32_t)(value) << ADC_SC1_DIFF_SHIFT), ADC_SC1_DIFF_SHIFT, ADC_SC1_DIFF_WIDTH))
/*@}*/

/*!
 * @name Register ADC_SC1, field AIEN[6] (RW)
 *
 * Enables conversion complete interrupts. When COCO becomes set while the
 * respective AIEN is high, an interrupt is asserted.
 *
 * Values:
 * - 0b0 - Conversion complete interrupt is disabled.
 * - 0b1 - Conversion complete interrupt is enabled.
 */
/*@{*/
/*! @brief Read current value of the ADC_SC1_AIEN field. */
#define ADC_RD_SC1_AIEN(base, index) ((ADC_SC1_REG(base, index) & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT)
#define ADC_BRD_SC1_AIEN(base, index) (BME_UBFX32(&ADC_SC1_REG(base, index), ADC_SC1_AIEN_SHIFT, ADC_SC1_AIEN_WIDTH))

/*! @brief Set the AIEN field to a new value. */
#define ADC_WR_SC1_AIEN(base, index, value) (ADC_RMW_SC1(base, index, ADC_SC1_AIEN_MASK, ADC_SC1_AIEN(value)))
#define ADC_BWR_SC1_AIEN(base, index, value) (BME_BFI32(&ADC_SC1_REG(base, index), ((uint32_t)(value) << ADC_SC1_AIEN_SHIFT), ADC_SC1_AIEN_SHIFT, ADC_SC1_AIEN_WIDTH))
/*@}*/

/*!
 * @name Register ADC_SC1, field COCO[7] (RO)
 *
 * This is a read-only field that is set each time a conversion is completed
 * when the compare function is disabled, or SC2[ACFE]=0 and the hardware average
 * function is disabled, or SC3[AVGE]=0. When the compare function is enabled, or
 * SC2[ACFE]=1, COCO is set upon completion of a conversion only if the compare
 * result is true. When the hardware average function is enabled, or SC3[AVGE]=1,
 * COCO is set upon completion of the selected number of conversions (determined
 * by AVGS). COCO in SC1A is also set at the completion of a calibration sequence.
 * COCO is cleared when the respective SC1n register is written or when the
 * respective Rn register is read.
 *
 * Values:
 * - 0b0 - Conversion is not completed.
 * - 0b1 - Conversion is completed.
 */
/*@{*/
/*! @brief Read current value of the ADC_SC1_COCO field. */
#define ADC_RD_SC1_COCO(base, index) ((ADC_SC1_REG(base, index) & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT)
#define ADC_BRD_SC1_COCO(base, index) (BME_UBFX32(&ADC_SC1_REG(base, index), ADC_SC1_COCO_SHIFT, ADC_SC1_COCO_WIDTH))
/*@}*/

/*******************************************************************************
 * ADC_CFG1 - ADC Configuration Register 1
 ******************************************************************************/

/*!
 * @brief ADC_CFG1 - ADC Configuration Register 1 (RW)
 *
 * Reset value: 0x00000000U
 *
 * The configuration Register 1 (CFG1) selects the mode of operation, clock
 * source, clock divide, and configuration for low power or long sample time.
 */
/*!
 * @name Constants and macros for entire ADC_CFG1 register
 */
/*@{*/
#define ADC_RD_CFG1(base)        (ADC_CFG1_REG(base))
#define ADC_WR_CFG1(base, value) (ADC_CFG1_REG(base) = (value))
#define ADC_RMW_CFG1(base, mask, value) (ADC_WR_CFG1(base, (ADC_RD_CFG1(base) & ~(mask)) | (value)))
#define ADC_SET_CFG1(base, value) (BME_OR32(&ADC_CFG1_REG(base), (uint32_t)(value)))
#define ADC_CLR_CFG1(base, value) (BME_AND32(&ADC_CFG1_REG(base), (uint32_t)(~(value))))
#define ADC_TOG_CFG1(base, value) (BME_XOR32(&ADC_CFG1_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual ADC_CFG1 bitfields
 */

/*!
 * @name Register ADC_CFG1, field ADICLK[1:0] (RW)
 *
 * Selects the input clock source to generate the internal clock, ADCK. Note
 * that when the ADACK clock source is selected, it is not required to be active
 * prior to conversion start. When it is selected and it is not active prior to a
 * conversion start, when CFG2[ADACKEN]=0, the asynchronous clock is activated at
 * the start of a conversion and deactivated when conversions are terminated. In
 * this case, there is an associated clock startup delay each time the clock
 * source is re-activated.
 *
 * Values:
 * - 0b00 - Bus clock
 * - 0b01 - Alternate clock 2 (ALTCLK2)
 * - 0b10 - Alternate clock (ALTCLK)
 * - 0b11 - Asynchronous clock (ADACK)
 */
/*@{*/
/*! @brief Read current value of the ADC_CFG1_ADICLK field. */
#define ADC_RD_CFG1_ADICLK(base) ((ADC_CFG1_REG(base) & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
#define ADC_BRD_CFG1_ADICLK(base) (BME_UBFX32(&ADC_CFG1_REG(base), ADC_CFG1_ADICLK_SHIFT, ADC_CFG1_ADICLK_WIDTH))

/*! @brief Set the ADICLK field to a new value. */
#define ADC_WR_CFG1_ADICLK(base, value) (ADC_RMW_CFG1(base, ADC_CFG1_ADICLK_MASK, ADC_CFG1_ADICLK(value)))
#define ADC_BWR_CFG1_ADICLK(base, value) (BME_BFI32(&ADC_CFG1_REG(base), ((uint32_t)(value) << ADC_CFG1_ADICLK_SHIFT), ADC_CFG1_ADICLK_SHIFT, ADC_CFG1_ADICLK_WIDTH))
/*@}*/

/*!
 * @name Register ADC_CFG1, field MODE[3:2] (RW)
 *
 * Selects the ADC resolution mode.
 *
 * Values:
 * - 0b00 - When DIFF=0:It is single-ended 8-bit conversion; when DIFF=1, it is
 *     differential 9-bit conversion with 2's complement output.
 * - 0b01 - When DIFF=0:It is single-ended 12-bit conversion ; when DIFF=1, it
 *     is differential 13-bit conversion with 2's complement output.
 * - 0b10 - When DIFF=0:It is single-ended 10-bit conversion. ; when DIFF=1, it
 *     is differential 11-bit conversion with 2's complement output
 * - 0b11 - When DIFF=0:It is single-ended 16-bit conversion..; when DIFF=1, it
 *     is differential 16-bit conversion with 2's complement output
 */
/*@{*/
/*! @brief Read current value of the ADC_CFG1_MODE field. */
#define ADC_RD_CFG1_MODE(base) ((ADC_CFG1_REG(base) & ADC_CFG1_MODE_MASK) >> ADC_CFG1_MODE_SHIFT)
#define ADC_BRD_CFG1_MODE(base) (BME_UBFX32(&ADC_CFG1_REG(base), ADC_CFG1_MODE_SHIFT, ADC_CFG1_MODE_WIDTH))

/*! @brief Set the MODE field to a new value. */
#define ADC_WR_CFG1_MODE(base, value) (ADC_RMW_CFG1(base, ADC_CFG1_MODE_MASK, ADC_CFG1_MODE(value)))
#define ADC_BWR_CFG1_MODE(base, value) (BME_BFI32(&ADC_CFG1_REG(base), ((uint32_t)(value) << ADC_CFG1_MODE_SHIFT), ADC_CFG1_MODE_SHIFT, ADC_CFG1_MODE_WIDTH))
/*@}*/

/*!
 * @name Register ADC_CFG1, field ADLSMP[4] (RW)
 *
 * Selects between different sample times based on the conversion mode selected.
 * This field adjusts the sample period to allow higher impedance inputs to be
 * accurately sampled or to maximize conversion speed for lower impedance inputs.
 * Longer sample times can also be used to lower overall power consumption if
 * continuous conversions are enabled and high conversion rates are not required.
 * When ADLSMP=1, the long sample time select bits, (ADLSTS[1:0]), can select the
 * extent of the long sample time.
 *
 * Values:
 * - 0b0 - Short sample time.
 * - 0b1 - Long sample time.
 */
/*@{*/
/*! @brief Read current value of the ADC_CFG1_ADLSMP field. */
#define ADC_RD_CFG1_ADLSMP(base) ((ADC_CFG1_REG(base) & ADC_CFG1_ADLSMP_MASK) >> ADC_CFG1_ADLSMP_SHIFT)
#define ADC_BRD_CFG1_ADLSMP(base) (BME_UBFX32(&ADC_CFG1_REG(base), ADC_CFG1_ADLSMP_SHIFT, ADC_CFG1_ADLSMP_WIDTH))

/*! @brief Set the ADLSMP field to a new value. */
#define ADC_WR_CFG1_ADLSMP(base, value) (ADC_RMW_CFG1(base, ADC_CFG1_ADLSMP_MASK, ADC_CFG1_ADLSMP(value)))
#define ADC_BWR_CFG1_ADLSMP(base, value) (BME_BFI32(&ADC_CFG1_REG(base), ((uint32_t)(value) << ADC_CFG1_ADLSMP_SHIFT), ADC_CFG1_ADLSMP_SHIFT, ADC_CFG1_ADLSMP_WIDTH))
/*@}*/

/*!
 * @name Register ADC_CFG1, field ADIV[6:5] (RW)
 *
 * Selects the divide ratio used by the ADC to generate the internal clock ADCK.
 *
 * Values:
 * - 0b00 - The divide ratio is 1 and the clock rate is input clock.
 * - 0b01 - The divide ratio is 2 and the clock rate is (input clock)/2.
 * - 0b10 - The divide ratio is 4 and the clock rate is (input clock)/4.
 * - 0b11 - The divide ratio is 8 and the clock rate is (input clock)/8.
 */
/*@{*/
/*! @brief Read current value of the ADC_CFG1_ADIV field. */
#define ADC_RD_CFG1_ADIV(base) ((ADC_CFG1_REG(base) & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
#define ADC_BRD_CFG1_ADIV(base) (BME_UBFX32(&ADC_CFG1_REG(base), ADC_CFG1_ADIV_SHIFT, ADC_CFG1_ADIV_WIDTH))

/*! @brief Set the ADIV field to a new value. */
#define ADC_WR_CFG1_ADIV(base, value) (ADC_RMW_CFG1(base, ADC_CFG1_ADIV_MASK, ADC_CFG1_ADIV(value)))
#define ADC_BWR_CFG1_ADIV(base, value) (BME_BFI32(&ADC_CFG1_REG(base), ((uint32_t)(value) << ADC_CFG1_ADIV_SHIFT), ADC_CFG1_ADIV_SHIFT, ADC_CFG1_ADIV_WIDTH))
/*@}*/

/*!
 * @name Register ADC_CFG1, field ADLPC[7] (RW)
 *
 * Controls the power configuration of the successive approximation converter.
 * This optimizes power consumption when higher sample rates are not required.
 *
 * Values:
 * - 0b0 - Normal power configuration.
 * - 0b1 - Low-power configuration. The power is reduced at the expense of
 *     maximum clock speed.
 */
/*@{*/
/*! @brief Read current value of the ADC_CFG1_ADLPC field. */
#define ADC_RD_CFG1_ADLPC(base) ((ADC_CFG1_REG(base) & ADC_CFG1_ADLPC_MASK) >> ADC_CFG1_ADLPC_SHIFT)
#define ADC_BRD_CFG1_ADLPC(base) (BME_UBFX32(&ADC_CFG1_REG(base), ADC_CFG1_ADLPC_SHIFT, ADC_CFG1_ADLPC_WIDTH))

/*! @brief Set the ADLPC field to a new value. */
#define ADC_WR_CFG1_ADLPC(base, value) (ADC_RMW_CFG1(base, ADC_CFG1_ADLPC_MASK, ADC_CFG1_ADLPC(value)))
#define ADC_BWR_CFG1_ADLPC(base, value) (BME_BFI32(&ADC_CFG1_REG(base), ((uint32_t)(value) << ADC_CFG1_ADLPC_SHIFT), ADC_CFG1_ADLPC_SHIFT, ADC_CFG1_ADLPC_WIDTH))
/*@}*/

/*******************************************************************************
 * ADC_CFG2 - ADC Configuration Register 2
 ******************************************************************************/

/*!
 * @brief ADC_CFG2 - ADC Configuration Register 2 (RW)
 *
 * Reset value: 0x00000000U
 *
 * Configuration Register 2 (CFG2) selects the special high-speed configuration
 * for very high speed conversions and selects the long sample time duration
 * during long sample mode.
 */
/*!
 * @name Constants and macros for entire ADC_CFG2 register
 */
/*@{*/
#define ADC_RD_CFG2(base)        (ADC_CFG2_REG(base))
#define ADC_WR_CFG2(base, value) (ADC_CFG2_REG(base) = (value))
#define ADC_RMW_CFG2(base, mask, value) (ADC_WR_CFG2(base, (ADC_RD_CFG2(base) & ~(mask)) | (value)))
#define ADC_SET_CFG2(base, value) (BME_OR32(&ADC_CFG2_REG(base), (uint32_t)(value)))
#define ADC_CLR_CFG2(base, value) (BME_AND32(&ADC_CFG2_REG(base), (uint32_t)(~(value))))
#define ADC_TOG_CFG2(base, value) (BME_XOR32(&ADC_CFG2_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual ADC_CFG2 bitfields
 */

/*!
 * @name Register ADC_CFG2, field ADLSTS[1:0] (RW)
 *
 * Selects between the extended sample times when long sample time is selected,
 * that is, when CFG1[ADLSMP]=1. This allows higher impedance inputs to be
 * accurately sampled or to maximize conversion speed for lower impedance inputs.
 * Longer sample times can also be used to lower overall power consumption when
 * continuous conversions are enabled if high conversion rates are not required.
 *
 * Values:
 * - 0b00 - Default longest sample time; 20 extra ADCK cycles; 24 ADCK cycles
 *     total.
 * - 0b01 - 12 extra ADCK cycles; 16 ADCK cycles total sample time.
 * - 0b10 - 6 extra ADCK cycles; 10 ADCK cycles total sample time.
 * - 0b11 - 2 extra ADCK cycles; 6 ADCK cycles total sample time.
 */
/*@{*/
/*! @brief Read current value of the ADC_CFG2_ADLSTS field. */
#define ADC_RD_CFG2_ADLSTS(base) ((ADC_CFG2_REG(base) & ADC_CFG2_ADLSTS_MASK) >> ADC_CFG2_ADLSTS_SHIFT)
#define ADC_BRD_CFG2_ADLSTS(base) (BME_UBFX32(&ADC_CFG2_REG(base), ADC_CFG2_ADLSTS_SHIFT, ADC_CFG2_ADLSTS_WIDTH))

/*! @brief Set the ADLSTS field to a new value. */
#define ADC_WR_CFG2_ADLSTS(base, value) (ADC_RMW_CFG2(base, ADC_CFG2_ADLSTS_MASK, ADC_CFG2_ADLSTS(value)))
#define ADC_BWR_CFG2_ADLSTS(base, value) (BME_BFI32(&ADC_CFG2_REG(base), ((uint32_t)(value) << ADC_CFG2_ADLSTS_SHIFT), ADC_CFG2_ADLSTS_SHIFT, ADC_CFG2_ADLSTS_WIDTH))
/*@}*/

/*!
 * @name Register ADC_CFG2, field ADHSC[2] (RW)
 *
 * Configures the ADC for very high-speed operation. The conversion sequence is
 * altered with 2 ADCK cycles added to the conversion time to allow higher speed
 * conversion clocks.
 *
 * Values:
 * - 0b0 - Normal conversion sequence selected.
 * - 0b1 - High-speed conversion sequence selected with 2 additional ADCK cycles
 *     to total conversion time.
 */
/*@{*/
/*! @brief Read current value of the ADC_CFG2_ADHSC field. */
#define ADC_RD_CFG2_ADHSC(base) ((ADC_CFG2_REG(base) & ADC_CFG2_ADHSC_MASK) >> ADC_CFG2_ADHSC_SHIFT)
#define ADC_BRD_CFG2_ADHSC(base) (BME_UBFX32(&ADC_CFG2_REG(base), ADC_CFG2_ADHSC_SHIFT, ADC_CFG2_ADHSC_WIDTH))

/*! @brief Set the ADHSC field to a new value. */
#define ADC_WR_CFG2_ADHSC(base, value) (ADC_RMW_CFG2(base, ADC_CFG2_ADHSC_MASK, ADC_CFG2_ADHSC(value)))
#define ADC_BWR_CFG2_ADHSC(base, value) (BME_BFI32(&ADC_CFG2_REG(base), ((uint32_t)(value) << ADC_CFG2_ADHSC_SHIFT), ADC_CFG2_ADHSC_SHIFT, ADC_CFG2_ADHSC_WIDTH))
/*@}*/

/*!
 * @name Register ADC_CFG2, field ADACKEN[3] (RW)
 *
 * Enables the asynchronous clock source and the clock source output regardless
 * of the conversion and status of CFG1[ADICLK]. Based on MCU configuration, the
 * asynchronous clock may be used by other modules. See chip configuration
 * information. Setting this field allows the clock to be used even while the ADC is
 * idle or operating from a different clock source. Also, latency of initiating a
 * single or first-continuous conversion with the asynchronous clock selected is
 * reduced because the ADACK clock is already operational.
 *
 * Values:
 * - 0b0 - Asynchronous clock output disabled; Asynchronous clock is enabled
 *     only if selected by ADICLK and a conversion is active.
 * - 0b1 - Asynchronous clock and clock output is enabled regardless of the
 *     state of the ADC.
 */
/*@{*/
/*! @brief Read current value of the ADC_CFG2_ADACKEN field. */
#define ADC_RD_CFG2_ADACKEN(base) ((ADC_CFG2_REG(base) & ADC_CFG2_ADACKEN_MASK) >> ADC_CFG2_ADACKEN_SHIFT)
#define ADC_BRD_CFG2_ADACKEN(base) (BME_UBFX32(&ADC_CFG2_REG(base), ADC_CFG2_ADACKEN_SHIFT, ADC_CFG2_ADACKEN_WIDTH))

/*! @brief Set the ADACKEN field to a new value. */
#define ADC_WR_CFG2_ADACKEN(base, value) (ADC_RMW_CFG2(base, ADC_CFG2_ADACKEN_MASK, ADC_CFG2_ADACKEN(value)))
#define ADC_BWR_CFG2_ADACKEN(base, value) (BME_BFI32(&ADC_CFG2_REG(base), ((uint32_t)(value) << ADC_CFG2_ADACKEN_SHIFT), ADC_CFG2_ADACKEN_SHIFT, ADC_CFG2_ADACKEN_WIDTH))
/*@}*/

/*!
 * @name Register ADC_CFG2, field MUXSEL[4] (RW)
 *
 * Changes the ADC mux setting to select between alternate sets of ADC channels.
 *
 * Values:
 * - 0b0 - ADxxa channels are selected.
 * - 0b1 - ADxxb channels are selected.
 */
/*@{*/
/*! @brief Read current value of the ADC_CFG2_MUXSEL field. */
#define ADC_RD_CFG2_MUXSEL(base) ((ADC_CFG2_REG(base) & ADC_CFG2_MUXSEL_MASK) >> ADC_CFG2_MUXSEL_SHIFT)
#define ADC_BRD_CFG2_MUXSEL(base) (BME_UBFX32(&ADC_CFG2_REG(base), ADC_CFG2_MUXSEL_SHIFT, ADC_CFG2_MUXSEL_WIDTH))

/*! @brief Set the MUXSEL field to a new value. */
#define ADC_WR_CFG2_MUXSEL(base, value) (ADC_RMW_CFG2(base, ADC_CFG2_MUXSEL_MASK, ADC_CFG2_MUXSEL(value)))
#define ADC_BWR_CFG2_MUXSEL(base, value) (BME_BFI32(&ADC_CFG2_REG(base), ((uint32_t)(value) << ADC_CFG2_MUXSEL_SHIFT), ADC_CFG2_MUXSEL_SHIFT, ADC_CFG2_MUXSEL_WIDTH))
/*@}*/

/*******************************************************************************
 * ADC_R - ADC Data Result Register
 ******************************************************************************/

/*!
 * @brief ADC_R - ADC Data Result Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The data result registers (Rn) contain the result of an ADC conversion of the
 * channel selected by the corresponding status and channel control register
 * (SC1A:SC1n). For every status and channel control register, there is a
 * corresponding data result register. Unused bits in R n are cleared in unsigned
 * right-aligned modes and carry the sign bit (MSB) in sign-extended 2's complement modes.
 * For example, when configured for 10-bit single-ended mode, D[15:10] are
 * cleared. When configured for 11-bit differential mode, D[15:10] carry the sign bit,
 * that is, bit 10 extended through bit 15. The following table describes the
 * behavior of the data result registers in the different modes of operation. Data
 * result register description Conversion mode D15 D14 D13 D12 D11 D10 D9 D8 D7
 * D6 D5 D4 D3 D2 D1 D0 Format 16-bit differential S D D D D D D D D D D D D D D D
 * Signed 2's complement 16-bit single-ended D D D D D D D D D D D D D D D D
 * Unsigned right justified 13-bit differential S S S S D D D D D D D D D D D D
 * Sign-extended 2's complement 12-bit single-ended 0 0 0 0 D D D D D D D D D D D D
 * Unsigned right-justified 11-bit differential S S S S S S D D D D D D D D D D
 * Sign-extended 2's complement 10-bit single-ended 0 0 0 0 0 0 D D D D D D D D D D
 * Unsigned right-justified 9-bit differential S S S S S S S S D D D D D D D D
 * Sign-extended 2's complement 8-bit single-ended 0 0 0 0 0 0 0 0 D D D D D D D D
 * Unsigned right-justified S: Sign bit or sign bit extension; D: Data, which is
 * 2's complement data if indicated
 */
/*!
 * @name Constants and macros for entire ADC_R register
 */
/*@{*/
#define ADC_RD_R(base, index)    (ADC_R_REG(base, index))
/*@}*/

/*
 * Constants & macros for individual ADC_R bitfields
 */

/*!
 * @name Register ADC_R, field D[15:0] (RO)
 */
/*@{*/
/*! @brief Read current value of the ADC_R_D field. */
#define ADC_RD_R_D(base, index) ((ADC_R_REG(base, index) & ADC_R_D_MASK) >> ADC_R_D_SHIFT)
#define ADC_BRD_R_D(base, index) (ADC_RD_R_D(base, index))
/*@}*/

/*******************************************************************************
 * ADC_CV1 - Compare Value Registers
 ******************************************************************************/

/*!
 * @brief ADC_CV1 - Compare Value Registers (RW)
 *
 * Reset value: 0x00000000U
 *
 * The Compare Value Registers (CV1 and CV2) contain a compare value used to
 * compare the conversion result when the compare function is enabled, that is,
 * SC2[ACFE]=1. This register is formatted in the same way as the Rn registers in
 * different modes of operation for both bit position definition and value format
 * using unsigned or sign-extended 2's complement. Therefore, the compare function
 * uses only the CVn fields that are related to the ADC mode of operation. The
 * compare value 2 register (CV2) is used only when the compare range function is
 * enabled, that is, SC2[ACREN]=1.
 */
/*!
 * @name Constants and macros for entire ADC_CV1 register
 */
/*@{*/
#define ADC_RD_CV1(base)         (ADC_CV1_REG(base))
#define ADC_WR_CV1(base, value)  (ADC_CV1_REG(base) = (value))
#define ADC_RMW_CV1(base, mask, value) (ADC_WR_CV1(base, (ADC_RD_CV1(base) & ~(mask)) | (value)))
#define ADC_SET_CV1(base, value) (BME_OR32(&ADC_CV1_REG(base), (uint32_t)(value)))
#define ADC_CLR_CV1(base, value) (BME_AND32(&ADC_CV1_REG(base), (uint32_t)(~(value))))
#define ADC_TOG_CV1(base, value) (BME_XOR32(&ADC_CV1_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual ADC_CV1 bitfields
 */

/*!
 * @name Register ADC_CV1, field CV[15:0] (RW)
 */
/*@{*/
/*! @brief Read current value of the ADC_CV1_CV field. */
#define ADC_RD_CV1_CV(base)  ((ADC_CV1_REG(base) & ADC_CV1_CV_MASK) >> ADC_CV1_CV_SHIFT)
#define ADC_BRD_CV1_CV(base) (ADC_RD_CV1_CV(base))

/*! @brief Set the CV field to a new value. */
#define ADC_WR_CV1_CV(base, value) (ADC_RMW_CV1(base, ADC_CV1_CV_MASK, ADC_CV1_CV(value)))
#define ADC_BWR_CV1_CV(base, value) (ADC_WR_CV1_CV(base, value))
/*@}*/

/*******************************************************************************
 * ADC_CV2 - Compare Value Registers
 ******************************************************************************/

/*!
 * @brief ADC_CV2 - Compare Value Registers (RW)
 *
 * Reset value: 0x00000000U
 *
 * The Compare Value Registers (CV1 and CV2) contain a compare value used to
 * compare the conversion result when the compare function is enabled, that is,
 * SC2[ACFE]=1. This register is formatted in the same way as the Rn registers in
 * different modes of operation for both bit position definition and value format
 * using unsigned or sign-extended 2's complement. Therefore, the compare function
 * uses only the CVn fields that are related to the ADC mode of operation. The
 * compare value 2 register (CV2) is used only when the compare range function is
 * enabled, that is, SC2[ACREN]=1.
 */
/*!
 * @name Constants and macros for entire ADC_CV2 register
 */
/*@{*/
#define ADC_RD_CV2(base)         (ADC_CV2_REG(base))
#define ADC_WR_CV2(base, value)  (ADC_CV2_REG(base) = (value))
#define ADC_RMW_CV2(base, mask, value) (ADC_WR_CV2(base, (ADC_RD_CV2(base) & ~(mask)) | (value)))
#define ADC_SET_CV2(base, value) (BME_OR32(&ADC_CV2_REG(base), (uint32_t)(value)))
#define ADC_CLR_CV2(base, value) (BME_AND32(&ADC_CV2_REG(base), (uint32_t)(~(value))))
#define ADC_TOG_CV2(base, value) (BME_XOR32(&ADC_CV2_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual ADC_CV2 bitfields
 */

/*!
 * @name Register ADC_CV2, field CV[15:0] (RW)
 */
/*@{*/
/*! @brief Read current value of the ADC_CV2_CV field. */
#define ADC_RD_CV2_CV(base)  ((ADC_CV2_REG(base) & ADC_CV2_CV_MASK) >> ADC_CV2_CV_SHIFT)
#define ADC_BRD_CV2_CV(base) (ADC_RD_CV2_CV(base))

/*! @brief Set the CV field to a new value. */
#define ADC_WR_CV2_CV(base, value) (ADC_RMW_CV2(base, ADC_CV2_CV_MASK, ADC_CV2_CV(value)))
#define ADC_BWR_CV2_CV(base, value) (ADC_WR_CV2_CV(base, value))
/*@}*/

/*******************************************************************************
 * ADC_SC2 - Status and Control Register 2
 ******************************************************************************/

/*!
 * @brief ADC_SC2 - Status and Control Register 2 (RW)
 *
 * Reset value: 0x00000000U
 *
 * The status and control register 2 (SC2) contains the conversion active,
 * hardware/software trigger select, compare function, and voltage reference select of
 * the ADC module.
 */
/*!
 * @name Constants and macros for entire ADC_SC2 register
 */
/*@{*/
#define ADC_RD_SC2(base)         (ADC_SC2_REG(base))
#define ADC_WR_SC2(base, value)  (ADC_SC2_REG(base) = (value))
#define ADC_RMW_SC2(base, mask, value) (ADC_WR_SC2(base, (ADC_RD_SC2(base) & ~(mask)) | (value)))
#define ADC_SET_SC2(base, value) (BME_OR32(&ADC_SC2_REG(base), (uint32_t)(value)))
#define ADC_CLR_SC2(base, value) (BME_AND32(&ADC_SC2_REG(base), (uint32_t)(~(value))))
#define ADC_TOG_SC2(base, value) (BME_XOR32(&ADC_SC2_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual ADC_SC2 bitfields
 */

/*!
 * @name Register ADC_SC2, field REFSEL[1:0] (RW)
 *
 * Selects the voltage reference source used for conversions.
 *
 * Values:
 * - 0b00 - Default voltage reference pin pair, that is, external pins VREFH and
 *     VREFL
 * - 0b01 - Alternate reference pair, that is, VALTH and VALTL . This pair may
 *     be additional external pins or internal sources depending on the MCU
 *     configuration. See the chip configuration information for details specific to
 *     this MCU
 * - 0b10 - Reserved
 * - 0b11 - Reserved
 */
/*@{*/
/*! @brief Read current value of the ADC_SC2_REFSEL field. */
#define ADC_RD_SC2_REFSEL(base) ((ADC_SC2_REG(base) & ADC_SC2_REFSEL_MASK) >> ADC_SC2_REFSEL_SHIFT)
#define ADC_BRD_SC2_REFSEL(base) (BME_UBFX32(&ADC_SC2_REG(base), ADC_SC2_REFSEL_SHIFT, ADC_SC2_REFSEL_WIDTH))

/*! @brief Set the REFSEL field to a new value. */
#define ADC_WR_SC2_REFSEL(base, value) (ADC_RMW_SC2(base, ADC_SC2_REFSEL_MASK, ADC_SC2_REFSEL(value)))
#define ADC_BWR_SC2_REFSEL(base, value) (BME_BFI32(&ADC_SC2_REG(base), ((uint32_t)(value) << ADC_SC2_REFSEL_SHIFT), ADC_SC2_REFSEL_SHIFT, ADC_SC2_REFSEL_WIDTH))
/*@}*/

/*!
 * @name Register ADC_SC2, field DMAEN[2] (RW)
 *
 * Values:
 * - 0b0 - DMA is disabled.
 * - 0b1 - DMA is enabled and will assert the ADC DMA request during an ADC
 *     conversion complete event noted when any of the SC1n[COCO] flags is asserted.
 */
/*@{*/
/*! @brief Read current value of the ADC_SC2_DMAEN field. */
#define ADC_RD_SC2_DMAEN(base) ((ADC_SC2_REG(base) & ADC_SC2_DMAEN_MASK) >> ADC_SC2_DMAEN_SHIFT)
#define ADC_BRD_SC2_DMAEN(base) (BME_UBFX32(&ADC_SC2_REG(base), ADC_SC2_DMAEN_SHIFT, ADC_SC2_DMAEN_WIDTH))

/*! @brief Set the DMAEN field to a new value. */
#define ADC_WR_SC2_DMAEN(base, value) (ADC_RMW_SC2(base, ADC_SC2_DMAEN_MASK, ADC_SC2_DMAEN(value)))
#define ADC_BWR_SC2_DMAEN(base, value) (BME_BFI32(&ADC_SC2_REG(base), ((uint32_t)(value) << ADC_SC2_DMAEN_SHIFT), ADC_SC2_DMAEN_SHIFT, ADC_SC2_DMAEN_WIDTH))
/*@}*/

/*!
 * @name Register ADC_SC2, field ACREN[3] (RW)
 *
 * Configures the compare function to check if the conversion result of the
 * input being monitored is either between or outside the range formed by CV1 and CV2
 * determined by the value of ACFGT. ACFE must be set for ACFGT to have any
 * effect.
 *
 * Values:
 * - 0b0 - Range function disabled. Only CV1 is compared.
 * - 0b1 - Range function enabled. Both CV1 and CV2 are compared.
 */
/*@{*/
/*! @brief Read current value of the ADC_SC2_ACREN field. */
#define ADC_RD_SC2_ACREN(base) ((ADC_SC2_REG(base) & ADC_SC2_ACREN_MASK) >> ADC_SC2_ACREN_SHIFT)
#define ADC_BRD_SC2_ACREN(base) (BME_UBFX32(&ADC_SC2_REG(base), ADC_SC2_ACREN_SHIFT, ADC_SC2_ACREN_WIDTH))

/*! @brief Set the ACREN field to a new value. */
#define ADC_WR_SC2_ACREN(base, value) (ADC_RMW_SC2(base, ADC_SC2_ACREN_MASK, ADC_SC2_ACREN(value)))
#define ADC_BWR_SC2_ACREN(base, value) (BME_BFI32(&ADC_SC2_REG(base), ((uint32_t)(value) << ADC_SC2_ACREN_SHIFT), ADC_SC2_ACREN_SHIFT, ADC_SC2_ACREN_WIDTH))
/*@}*/

/*!
 * @name Register ADC_SC2, field ACFGT[4] (RW)
 *
 * Configures the compare function to check the conversion result relative to
 * the CV1 and CV2 based upon the value of ACREN. ACFE must be set for ACFGT to
 * have any effect.
 *
 * Values:
 * - 0b0 - Configures less than threshold, outside range not inclusive and
 *     inside range not inclusive; functionality based on the values placed in CV1 and
 *     CV2.
 * - 0b1 - Configures greater than or equal to threshold, outside and inside
 *     ranges inclusive; functionality based on the values placed in CV1 and CV2.
 */
/*@{*/
/*! @brief Read current value of the ADC_SC2_ACFGT field. */
#define ADC_RD_SC2_ACFGT(base) ((ADC_SC2_REG(base) & ADC_SC2_ACFGT_MASK) >> ADC_SC2_ACFGT_SHIFT)
#define ADC_BRD_SC2_ACFGT(base) (BME_UBFX32(&ADC_SC2_REG(base), ADC_SC2_ACFGT_SHIFT, ADC_SC2_ACFGT_WIDTH))

/*! @brief Set the ACFGT field to a new value. */
#define ADC_WR_SC2_ACFGT(base, value) (ADC_RMW_SC2(base, ADC_SC2_ACFGT_MASK, ADC_SC2_ACFGT(value)))
#define ADC_BWR_SC2_ACFGT(base, value) (BME_BFI32(&ADC_SC2_REG(base), ((uint32_t)(value) << ADC_SC2_ACFGT_SHIFT), ADC_SC2_ACFGT_SHIFT, ADC_SC2_ACFGT_WIDTH))
/*@}*/

/*!
 * @name Register ADC_SC2, field ACFE[5] (RW)
 *
 * Enables the compare function.
 *
 * Values:
 * - 0b0 - Compare function disabled.
 * - 0b1 - Compare function enabled.
 */
/*@{*/
/*! @brief Read current value of the ADC_SC2_ACFE field. */
#define ADC_RD_SC2_ACFE(base) ((ADC_SC2_REG(base) & ADC_SC2_ACFE_MASK) >> ADC_SC2_ACFE_SHIFT)
#define ADC_BRD_SC2_ACFE(base) (BME_UBFX32(&ADC_SC2_REG(base), ADC_SC2_ACFE_SHIFT, ADC_SC2_ACFE_WIDTH))

/*! @brief Set the ACFE field to a new value. */
#define ADC_WR_SC2_ACFE(base, value) (ADC_RMW_SC2(base, ADC_SC2_ACFE_MASK, ADC_SC2_ACFE(value)))
#define ADC_BWR_SC2_ACFE(base, value) (BME_BFI32(&ADC_SC2_REG(base), ((uint32_t)(value) << ADC_SC2_ACFE_SHIFT), ADC_SC2_ACFE_SHIFT, ADC_SC2_ACFE_WIDTH))
/*@}*/

/*!
 * @name Register ADC_SC2, field ADTRG[6] (RW)
 *
 * Selects the type of trigger used for initiating a conversion. Two types of
 * trigger are selectable: Software trigger: When software trigger is selected, a
 * conversion is initiated following a write to SC1A. Hardware trigger: When
 * hardware trigger is selected, a conversion is initiated following the assertion of
 * the ADHWT input after a pulse of the ADHWTSn input.
 *
 * Values:
 * - 0b0 - Software trigger selected.
 * - 0b1 - Hardware trigger selected.
 */
/*@{*/
/*! @brief Read current value of the ADC_SC2_ADTRG field. */
#define ADC_RD_SC2_ADTRG(base) ((ADC_SC2_REG(base) & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT)
#define ADC_BRD_SC2_ADTRG(base) (BME_UBFX32(&ADC_SC2_REG(base), ADC_SC2_ADTRG_SHIFT, ADC_SC2_ADTRG_WIDTH))

/*! @brief Set the ADTRG field to a new value. */
#define ADC_WR_SC2_ADTRG(base, value) (ADC_RMW_SC2(base, ADC_SC2_ADTRG_MASK, ADC_SC2_ADTRG(value)))
#define ADC_BWR_SC2_ADTRG(base, value) (BME_BFI32(&ADC_SC2_REG(base), ((uint32_t)(value) << ADC_SC2_ADTRG_SHIFT), ADC_SC2_ADTRG_SHIFT, ADC_SC2_ADTRG_WIDTH))
/*@}*/

/*!
 * @name Register ADC_SC2, field ADACT[7] (RO)
 *
 * Indicates that a conversion or hardware averaging is in progress. ADACT is
 * set when a conversion is initiated and cleared when a conversion is completed or
 * aborted.
 *
 * Values:
 * - 0b0 - Conversion not in progress.
 * - 0b1 - Conversion in progress.
 */
/*@{*/
/*! @brief Read current value of the ADC_SC2_ADACT field. */
#define ADC_RD_SC2_ADACT(base) ((ADC_SC2_REG(base) & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT)
#define ADC_BRD_SC2_ADACT(base) (BME_UBFX32(&ADC_SC2_REG(base), ADC_SC2_ADACT_SHIFT, ADC_SC2_ADACT_WIDTH))
/*@}*/

/*******************************************************************************
 * ADC_SC3 - Status and Control Register 3
 ******************************************************************************/

/*!
 * @brief ADC_SC3 - Status and Control Register 3 (RW)
 *
 * Reset value: 0x00000000U
 *
 * The Status and Control Register 3 (SC3) controls the calibration, continuous
 * convert, and hardware averaging functions of the ADC module.
 */
/*!
 * @name Constants and macros for entire ADC_SC3 register
 */
/*@{*/
#define ADC_RD_SC3(base)         (ADC_SC3_REG(base))
#define ADC_WR_SC3(base, value)  (ADC_SC3_REG(base) = (value))
#define ADC_RMW_SC3(base, mask, value) (ADC_WR_SC3(base, (ADC_RD_SC3(base) & ~(mask)) | (value)))
#define ADC_SET_SC3(base, value) (BME_OR32(&ADC_SC3_REG(base), (uint32_t)(value)))
#define ADC_CLR_SC3(base, value) (BME_AND32(&ADC_SC3_REG(base), (uint32_t)(~(value))))
#define ADC_TOG_SC3(base, value) (BME_XOR32(&ADC_SC3_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual ADC_SC3 bitfields
 */

/*!
 * @name Register ADC_SC3, field AVGS[1:0] (RW)
 *
 * Determines how many ADC conversions will be averaged to create the ADC
 * average result.
 *
 * Values:
 * - 0b00 - 4 samples averaged.
 * - 0b01 - 8 samples averaged.
 * - 0b10 - 16 samples averaged.
 * - 0b11 - 32 samples averaged.
 */
/*@{*/
/*! @brief Read current value of the ADC_SC3_AVGS field. */
#define ADC_RD_SC3_AVGS(base) ((ADC_SC3_REG(base) & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
#define ADC_BRD_SC3_AVGS(base) (BME_UBFX32(&ADC_SC3_REG(base), ADC_SC3_AVGS_SHIFT, ADC_SC3_AVGS_WIDTH))

/*! @brief Set the AVGS field to a new value. */
#define ADC_WR_SC3_AVGS(base, value) (ADC_RMW_SC3(base, (ADC_SC3_AVGS_MASK | ADC_SC3_CALF_MASK), ADC_SC3_AVGS(value)))
#define ADC_BWR_SC3_AVGS(base, value) (BME_BFI32(&ADC_SC3_REG(base), ((uint32_t)(value) << ADC_SC3_AVGS_SHIFT), ADC_SC3_AVGS_SHIFT, ADC_SC3_AVGS_WIDTH))
/*@}*/

/*!
 * @name Register ADC_SC3, field AVGE[2] (RW)
 *
 * Enables the hardware average function of the ADC.
 *
 * Values:
 * - 0b0 - Hardware average function disabled.
 * - 0b1 - Hardware average function enabled.
 */
/*@{*/
/*! @brief Read current value of the ADC_SC3_AVGE field. */
#define ADC_RD_SC3_AVGE(base) ((ADC_SC3_REG(base) & ADC_SC3_AVGE_MASK) >> ADC_SC3_AVGE_SHIFT)
#define ADC_BRD_SC3_AVGE(base) (BME_UBFX32(&ADC_SC3_REG(base), ADC_SC3_AVGE_SHIFT, ADC_SC3_AVGE_WIDTH))

/*! @brief Set the AVGE field to a new value. */
#define ADC_WR_SC3_AVGE(base, value) (ADC_RMW_SC3(base, (ADC_SC3_AVGE_MASK | ADC_SC3_CALF_MASK), ADC_SC3_AVGE(value)))
#define ADC_BWR_SC3_AVGE(base, value) (BME_BFI32(&ADC_SC3_REG(base), ((uint32_t)(value) << ADC_SC3_AVGE_SHIFT), ADC_SC3_AVGE_SHIFT, ADC_SC3_AVGE_WIDTH))
/*@}*/

/*!
 * @name Register ADC_SC3, field ADCO[3] (RW)
 *
 * Enables continuous conversions.
 *
 * Values:
 * - 0b0 - One conversion or one set of conversions if the hardware average
 *     function is enabled, that is, AVGE=1, after initiating a conversion.
 * - 0b1 - Continuous conversions or sets of conversions if the hardware average
 *     function is enabled, that is, AVGE=1, after initiating a conversion.
 */
/*@{*/
/*! @brief Read current value of the ADC_SC3_ADCO field. */
#define ADC_RD_SC3_ADCO(base) ((ADC_SC3_REG(base) & ADC_SC3_ADCO_MASK) >> ADC_SC3_ADCO_SHIFT)
#define ADC_BRD_SC3_ADCO(base) (BME_UBFX32(&ADC_SC3_REG(base), ADC_SC3_ADCO_SHIFT, ADC_SC3_ADCO_WIDTH))

/*! @brief Set the ADCO field to a new value. */
#define ADC_WR_SC3_ADCO(base, value) (ADC_RMW_SC3(base, (ADC_SC3_ADCO_MASK | ADC_SC3_CALF_MASK), ADC_SC3_ADCO(value)))
#define ADC_BWR_SC3_ADCO(base, value) (BME_BFI32(&ADC_SC3_REG(base), ((uint32_t)(value) << ADC_SC3_ADCO_SHIFT), ADC_SC3_ADCO_SHIFT, ADC_SC3_ADCO_WIDTH))
/*@}*/

/*!
 * @name Register ADC_SC3, field CALF[6] (W1C)
 *
 * Displays the result of the calibration sequence. The calibration sequence
 * will fail if SC2[ADTRG] = 1, any ADC register is written, or any stop mode is
 * entered before the calibration sequence completes. Writing 1 to CALF clears it.
 *
 * Values:
 * - 0b0 - Calibration completed normally.
 * - 0b1 - Calibration failed. ADC accuracy specifications are not guaranteed.
 */
/*@{*/
/*! @brief Read current value of the ADC_SC3_CALF field. */
#define ADC_RD_SC3_CALF(base) ((ADC_SC3_REG(base) & ADC_SC3_CALF_MASK) >> ADC_SC3_CALF_SHIFT)
#define ADC_BRD_SC3_CALF(base) (BME_UBFX32(&ADC_SC3_REG(base), ADC_SC3_CALF_SHIFT, ADC_SC3_CALF_WIDTH))

/*! @brief Set the CALF field to a new value. */
#define ADC_WR_SC3_CALF(base, value) (ADC_RMW_SC3(base, ADC_SC3_CALF_MASK, ADC_SC3_CALF(value)))
#define ADC_BWR_SC3_CALF(base, value) (BME_BFI32(&ADC_SC3_REG(base), ((uint32_t)(value) << ADC_SC3_CALF_SHIFT), ADC_SC3_CALF_SHIFT, ADC_SC3_CALF_WIDTH))
/*@}*/

/*!
 * @name Register ADC_SC3, field CAL[7] (RW)
 *
 * Begins the calibration sequence when set. This field stays set while the
 * calibration is in progress and is cleared when the calibration sequence is
 * completed. CALF must be checked to determine the result of the calibration sequence.
 * Once started, the calibration routine cannot be interrupted by writes to the
 * ADC registers or the results will be invalid and CALF will set. Setting CAL
 * will abort any current conversion.
 */
/*@{*/
/*! @brief Read current value of the ADC_SC3_CAL field. */
#define ADC_RD_SC3_CAL(base) ((ADC_SC3_REG(base) & ADC_SC3_CAL_MASK) >> ADC_SC3_CAL_SHIFT)
#define ADC_BRD_SC3_CAL(base) (BME_UBFX32(&ADC_SC3_REG(base), ADC_SC3_CAL_SHIFT, ADC_SC3_CAL_WIDTH))

/*! @brief Set the CAL field to a new value. */
#define ADC_WR_SC3_CAL(base, value) (ADC_RMW_SC3(base, (ADC_SC3_CAL_MASK | ADC_SC3_CALF_MASK), ADC_SC3_CAL(value)))
#define ADC_BWR_SC3_CAL(base, value) (BME_BFI32(&ADC_SC3_REG(base), ((uint32_t)(value) << ADC_SC3_CAL_SHIFT), ADC_SC3_CAL_SHIFT, ADC_SC3_CAL_WIDTH))
/*@}*/

/*******************************************************************************
 * ADC_OFS - ADC Offset Correction Register
 ******************************************************************************/

/*!
 * @brief ADC_OFS - ADC Offset Correction Register (RW)
 *
 * Reset value: 0x00000004U
 *
 * The ADC Offset Correction Register (OFS) contains the user-selected or
 * calibration-generated offset error correction value. This register is a 2's
 * complement, left-justified, 16-bit value . The value in OFS is subtracted from the
 * conversion and the result is transferred into the result registers, Rn. If the
 * result is greater than the maximum or less than the minimum result value, it is
 * forced to the appropriate limit for the current mode of operation. For more
 * information regarding the calibration procedure, please refer to the Calibration
 * functionThe ADC contains a self-calibration function that is required to
 * achieve the specified accuracy. section.
 */
/*!
 * @name Constants and macros for entire ADC_OFS register
 */
/*@{*/
#define ADC_RD_OFS(base)         (ADC_OFS_REG(base))
#define ADC_WR_OFS(base, value)  (ADC_OFS_REG(base) = (value))
#define ADC_RMW_OFS(base, mask, value) (ADC_WR_OFS(base, (ADC_RD_OFS(base) & ~(mask)) | (value)))
#define ADC_SET_OFS(base, value) (BME_OR32(&ADC_OFS_REG(base), (uint32_t)(value)))
#define ADC_CLR_OFS(base, value) (BME_AND32(&ADC_OFS_REG(base), (uint32_t)(~(value))))
#define ADC_TOG_OFS(base, value) (BME_XOR32(&ADC_OFS_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual ADC_OFS bitfields
 */

/*!
 * @name Register ADC_OFS, field OFS[15:0] (RW)
 */
/*@{*/
/*! @brief Read current value of the ADC_OFS_OFS field. */
#define ADC_RD_OFS_OFS(base) ((ADC_OFS_REG(base) & ADC_OFS_OFS_MASK) >> ADC_OFS_OFS_SHIFT)
#define ADC_BRD_OFS_OFS(base) (ADC_RD_OFS_OFS(base))

/*! @brief Set the OFS field to a new value. */
#define ADC_WR_OFS_OFS(base, value) (ADC_RMW_OFS(base, ADC_OFS_OFS_MASK, ADC_OFS_OFS(value)))
#define ADC_BWR_OFS_OFS(base, value) (ADC_WR_OFS_OFS(base, value))
/*@}*/

/*******************************************************************************
 * ADC_PG - ADC Plus-Side Gain Register
 ******************************************************************************/

/*!
 * @brief ADC_PG - ADC Plus-Side Gain Register (RW)
 *
 * Reset value: 0x00008200U
 *
 * The Plus-Side Gain Register (PG) contains the gain error correction for the
 * plus-side input in differential mode or the overall conversion in single-ended
 * mode. PG, a 16-bit real number in binary format, is the gain adjustment
 * factor, with the radix point fixed between PG[15] and PG[14]. This register must be
 * written by the user with the value described in the calibration procedure.
 * Otherwise, the gain error specifications may not be met. For more information
 * regarding the calibration procedure, please refer to the Calibration functionThe
 * ADC contains a self-calibration function that is required to achieve the
 * specified accuracy. section.
 */
/*!
 * @name Constants and macros for entire ADC_PG register
 */
/*@{*/
#define ADC_RD_PG(base)          (ADC_PG_REG(base))
#define ADC_WR_PG(base, value)   (ADC_PG_REG(base) = (value))
#define ADC_RMW_PG(base, mask, value) (ADC_WR_PG(base, (ADC_RD_PG(base) & ~(mask)) | (value)))
#define ADC_SET_PG(base, value)  (BME_OR32(&ADC_PG_REG(base), (uint32_t)(value)))
#define ADC_CLR_PG(base, value)  (BME_AND32(&ADC_PG_REG(base), (uint32_t)(~(value))))
#define ADC_TOG_PG(base, value)  (BME_XOR32(&ADC_PG_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual ADC_PG bitfields
 */

/*!
 * @name Register ADC_PG, field PG[15:0] (RW)
 */
/*@{*/
/*! @brief Read current value of the ADC_PG_PG field. */
#define ADC_RD_PG_PG(base)   ((ADC_PG_REG(base) & ADC_PG_PG_MASK) >> ADC_PG_PG_SHIFT)
#define ADC_BRD_PG_PG(base)  (ADC_RD_PG_PG(base))

/*! @brief Set the PG field to a new value. */
#define ADC_WR_PG_PG(base, value) (ADC_RMW_PG(base, ADC_PG_PG_MASK, ADC_PG_PG(value)))
#define ADC_BWR_PG_PG(base, value) (ADC_WR_PG_PG(base, value))
/*@}*/

/*******************************************************************************
 * ADC_MG - ADC Minus-Side Gain Register
 ******************************************************************************/

/*!
 * @brief ADC_MG - ADC Minus-Side Gain Register (RW)
 *
 * Reset value: 0x00008200U
 *
 * The Minus-Side Gain Register (MG) contains the gain error correction for the
 * minus-side input in differential mode. This register is ignored in
 * single-ended mode. MG, a 16-bit real number in binary format, is the gain adjustment
 * factor, with the radix point fixed between MG[15] and MG[14]. This register must
 * be written by the user with the value described in the calibration procedure.
 * Otherwise, the gain error specifications may not be met. For more information
 * regarding the calibration procedure, please refer to the Calibration
 * functionThe ADC contains a self-calibration function that is required to achieve the
 * specified accuracy. section.
 */
/*!
 * @name Constants and macros for entire ADC_MG register
 */
/*@{*/
#define ADC_RD_MG(base)          (ADC_MG_REG(base))
#define ADC_WR_MG(base, value)   (ADC_MG_REG(base) = (value))
#define ADC_RMW_MG(base, mask, value) (ADC_WR_MG(base, (ADC_RD_MG(base) & ~(mask)) | (value)))
#define ADC_SET_MG(base, value)  (BME_OR32(&ADC_MG_REG(base), (uint32_t)(value)))
#define ADC_CLR_MG(base, value)  (BME_AND32(&ADC_MG_REG(base), (uint32_t)(~(value))))
#define ADC_TOG_MG(base, value)  (BME_XOR32(&ADC_MG_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual ADC_MG bitfields
 */

/*!
 * @name Register ADC_MG, field MG[15:0] (RW)
 */
/*@{*/
/*! @brief Read current value of the ADC_MG_MG field. */
#define ADC_RD_MG_MG(base)   ((ADC_MG_REG(base) & ADC_MG_MG_MASK) >> ADC_MG_MG_SHIFT)
#define ADC_BRD_MG_MG(base)  (ADC_RD_MG_MG(base))

/*! @brief Set the MG field to a new value. */
#define ADC_WR_MG_MG(base, value) (ADC_RMW_MG(base, ADC_MG_MG_MASK, ADC_MG_MG(value)))
#define ADC_BWR_MG_MG(base, value) (ADC_WR_MG_MG(base, value))
/*@}*/

/*******************************************************************************
 * ADC_CLPD - ADC Plus-Side General Calibration Value Register
 ******************************************************************************/

/*!
 * @brief ADC_CLPD - ADC Plus-Side General Calibration Value Register (RW)
 *
 * Reset value: 0x0000000AU
 *
 * The Plus-Side General Calibration Value Registers (CLPx) contain calibration
 * information that is generated by the calibration function. These registers
 * contain seven calibration values of varying widths: CLP0[5:0], CLP1[6:0],
 * CLP2[7:0], CLP3[8:0], CLP4[9:0], CLPS[5:0], and CLPD[5:0]. CLPx are automatically set
 * when the self-calibration sequence is done, that is, CAL is cleared. If these
 * registers are written by the user after calibration, the linearity error
 * specifications may not be met. For more information regarding the calibration
 * procedure, please refer to the Calibration functionThe ADC contains a
 * self-calibration function that is required to achieve the specified accuracy. section.
 */
/*!
 * @name Constants and macros for entire ADC_CLPD register
 */
/*@{*/
#define ADC_RD_CLPD(base)        (ADC_CLPD_REG(base))
#define ADC_WR_CLPD(base, value) (ADC_CLPD_REG(base) = (value))
#define ADC_RMW_CLPD(base, mask, value) (ADC_WR_CLPD(base, (ADC_RD_CLPD(base) & ~(mask)) | (value)))
#define ADC_SET_CLPD(base, value) (BME_OR32(&ADC_CLPD_REG(base), (uint32_t)(value)))
#define ADC_CLR_CLPD(base, value) (BME_AND32(&ADC_CLPD_REG(base), (uint32_t)(~(value))))
#define ADC_TOG_CLPD(base, value) (BME_XOR32(&ADC_CLPD_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual ADC_CLPD bitfields
 */

/*!
 * @name Register ADC_CLPD, field CLPD[5:0] (RW)
 *
 * Calibration Value
 */
/*@{*/
/*! @brief Read current value of the ADC_CLPD_CLPD field. */
#define ADC_RD_CLPD_CLPD(base) ((ADC_CLPD_REG(base) & ADC_CLPD_CLPD_MASK) >> ADC_CLPD_CLPD_SHIFT)
#define ADC_BRD_CLPD_CLPD(base) (BME_UBFX32(&ADC_CLPD_REG(base), ADC_CLPD_CLPD_SHIFT, ADC_CLPD_CLPD_WIDTH))

/*! @brief Set the CLPD field to a new value. */
#define ADC_WR_CLPD_CLPD(base, value) (ADC_RMW_CLPD(base, ADC_CLPD_CLPD_MASK, ADC_CLPD_CLPD(value)))
#define ADC_BWR_CLPD_CLPD(base, value) (BME_BFI32(&ADC_CLPD_REG(base), ((uint32_t)(value) << ADC_CLPD_CLPD_SHIFT), ADC_CLPD_CLPD_SHIFT, ADC_CLPD_CLPD_WIDTH))
/*@}*/

/*******************************************************************************
 * ADC_CLPS - ADC Plus-Side General Calibration Value Register
 ******************************************************************************/

/*!
 * @brief ADC_CLPS - ADC Plus-Side General Calibration Value Register (RW)
 *
 * Reset value: 0x00000020U
 *
 * For more information, see CLPD register description.
 */
/*!
 * @name Constants and macros for entire ADC_CLPS register
 */
/*@{*/
#define ADC_RD_CLPS(base)        (ADC_CLPS_REG(base))
#define ADC_WR_CLPS(base, value) (ADC_CLPS_REG(base) = (value))
#define ADC_RMW_CLPS(base, mask, value) (ADC_WR_CLPS(base, (ADC_RD_CLPS(base) & ~(mask)) | (value)))
#define ADC_SET_CLPS(base, value) (BME_OR32(&ADC_CLPS_REG(base), (uint32_t)(value)))
#define ADC_CLR_CLPS(base, value) (BME_AND32(&ADC_CLPS_REG(base), (uint32_t)(~(value))))
#define ADC_TOG_CLPS(base, value) (BME_XOR32(&ADC_CLPS_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual ADC_CLPS bitfields
 */

/*!
 * @name Register ADC_CLPS, field CLPS[5:0] (RW)
 *
 * Calibration Value
 */
/*@{*/
/*! @brief Read current value of the ADC_CLPS_CLPS field. */
#define ADC_RD_CLPS_CLPS(base) ((ADC_CLPS_REG(base) & ADC_CLPS_CLPS_MASK) >> ADC_CLPS_CLPS_SHIFT)
#define ADC_BRD_CLPS_CLPS(base) (BME_UBFX32(&ADC_CLPS_REG(base), ADC_CLPS_CLPS_SHIFT, ADC_CLPS_CLPS_WIDTH))

/*! @brief Set the CLPS field to a new value. */
#define ADC_WR_CLPS_CLPS(base, value) (ADC_RMW_CLPS(base, ADC_CLPS_CLPS_MASK, ADC_CLPS_CLPS(value)))
#define ADC_BWR_CLPS_CLPS(base, value) (BME_BFI32(&ADC_CLPS_REG(base), ((uint32_t)(value) << ADC_CLPS_CLPS_SHIFT), ADC_CLPS_CLPS_SHIFT, ADC_CLPS_CLPS_WIDTH))
/*@}*/

/*******************************************************************************
 * ADC_CLP4 - ADC Plus-Side General Calibration Value Register
 ******************************************************************************/

/*!
 * @brief ADC_CLP4 - ADC Plus-Side General Calibration Value Register (RW)
 *
 * Reset value: 0x00000200U
 *
 * For more information, see CLPD register description.
 */
/*!
 * @name Constants and macros for entire ADC_CLP4 register
 */
/*@{*/
#define ADC_RD_CLP4(base)        (ADC_CLP4_REG(base))
#define ADC_WR_CLP4(base, value) (ADC_CLP4_REG(base) = (value))
#define ADC_RMW_CLP4(base, mask, value) (ADC_WR_CLP4(base, (ADC_RD_CLP4(base) & ~(mask)) | (value)))
#define ADC_SET_CLP4(base, value) (BME_OR32(&ADC_CLP4_REG(base), (uint32_t)(value)))
#define ADC_CLR_CLP4(base, value) (BME_AND32(&ADC_CLP4_REG(base), (uint32_t)(~(value))))
#define ADC_TOG_CLP4(base, value) (BME_XOR32(&ADC_CLP4_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual ADC_CLP4 bitfields
 */

/*!
 * @name Register ADC_CLP4, field CLP4[9:0] (RW)
 *
 * Calibration Value
 */
/*@{*/
/*! @brief Read current value of the ADC_CLP4_CLP4 field. */
#define ADC_RD_CLP4_CLP4(base) ((ADC_CLP4_REG(base) & ADC_CLP4_CLP4_MASK) >> ADC_CLP4_CLP4_SHIFT)
#define ADC_BRD_CLP4_CLP4(base) (ADC_RD_CLP4_CLP4(base))

/*! @brief Set the CLP4 field to a new value. */
#define ADC_WR_CLP4_CLP4(base, value) (ADC_RMW_CLP4(base, ADC_CLP4_CLP4_MASK, ADC_CLP4_CLP4(value)))
#define ADC_BWR_CLP4_CLP4(base, value) (ADC_WR_CLP4_CLP4(base, value))
/*@}*/

/*******************************************************************************
 * ADC_CLP3 - ADC Plus-Side General Calibration Value Register
 ******************************************************************************/

/*!
 * @brief ADC_CLP3 - ADC Plus-Side General Calibration Value Register (RW)
 *
 * Reset value: 0x00000100U
 *
 * For more information, see CLPD register description.
 */
/*!
 * @name Constants and macros for entire ADC_CLP3 register
 */
/*@{*/
#define ADC_RD_CLP3(base)        (ADC_CLP3_REG(base))
#define ADC_WR_CLP3(base, value) (ADC_CLP3_REG(base) = (value))
#define ADC_RMW_CLP3(base, mask, value) (ADC_WR_CLP3(base, (ADC_RD_CLP3(base) & ~(mask)) | (value)))
#define ADC_SET_CLP3(base, value) (BME_OR32(&ADC_CLP3_REG(base), (uint32_t)(value)))
#define ADC_CLR_CLP3(base, value) (BME_AND32(&ADC_CLP3_REG(base), (uint32_t)(~(value))))
#define ADC_TOG_CLP3(base, value) (BME_XOR32(&ADC_CLP3_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual ADC_CLP3 bitfields
 */

/*!
 * @name Register ADC_CLP3, field CLP3[8:0] (RW)
 *
 * Calibration Value
 */
/*@{*/
/*! @brief Read current value of the ADC_CLP3_CLP3 field. */
#define ADC_RD_CLP3_CLP3(base) ((ADC_CLP3_REG(base) & ADC_CLP3_CLP3_MASK) >> ADC_CLP3_CLP3_SHIFT)
#define ADC_BRD_CLP3_CLP3(base) (ADC_RD_CLP3_CLP3(base))

/*! @brief Set the CLP3 field to a new value. */
#define ADC_WR_CLP3_CLP3(base, value) (ADC_RMW_CLP3(base, ADC_CLP3_CLP3_MASK, ADC_CLP3_CLP3(value)))
#define ADC_BWR_CLP3_CLP3(base, value) (ADC_WR_CLP3_CLP3(base, value))
/*@}*/

/*******************************************************************************
 * ADC_CLP2 - ADC Plus-Side General Calibration Value Register
 ******************************************************************************/

/*!
 * @brief ADC_CLP2 - ADC Plus-Side General Calibration Value Register (RW)
 *
 * Reset value: 0x00000080U
 *
 * For more information, see CLPD register description.
 */
/*!
 * @name Constants and macros for entire ADC_CLP2 register
 */
/*@{*/
#define ADC_RD_CLP2(base)        (ADC_CLP2_REG(base))
#define ADC_WR_CLP2(base, value) (ADC_CLP2_REG(base) = (value))
#define ADC_RMW_CLP2(base, mask, value) (ADC_WR_CLP2(base, (ADC_RD_CLP2(base) & ~(mask)) | (value)))
#define ADC_SET_CLP2(base, value) (BME_OR32(&ADC_CLP2_REG(base), (uint32_t)(value)))
#define ADC_CLR_CLP2(base, value) (BME_AND32(&ADC_CLP2_REG(base), (uint32_t)(~(value))))
#define ADC_TOG_CLP2(base, value) (BME_XOR32(&ADC_CLP2_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual ADC_CLP2 bitfields
 */

/*!
 * @name Register ADC_CLP2, field CLP2[7:0] (RW)
 *
 * Calibration Value
 */
/*@{*/
/*! @brief Read current value of the ADC_CLP2_CLP2 field. */
#define ADC_RD_CLP2_CLP2(base) ((ADC_CLP2_REG(base) & ADC_CLP2_CLP2_MASK) >> ADC_CLP2_CLP2_SHIFT)
#define ADC_BRD_CLP2_CLP2(base) (BME_UBFX32(&ADC_CLP2_REG(base), ADC_CLP2_CLP2_SHIFT, ADC_CLP2_CLP2_WIDTH))

/*! @brief Set the CLP2 field to a new value. */
#define ADC_WR_CLP2_CLP2(base, value) (ADC_RMW_CLP2(base, ADC_CLP2_CLP2_MASK, ADC_CLP2_CLP2(value)))
#define ADC_BWR_CLP2_CLP2(base, value) (BME_BFI32(&ADC_CLP2_REG(base), ((uint32_t)(value) << ADC_CLP2_CLP2_SHIFT), ADC_CLP2_CLP2_SHIFT, ADC_CLP2_CLP2_WIDTH))
/*@}*/

/*******************************************************************************
 * ADC_CLP1 - ADC Plus-Side General Calibration Value Register
 ******************************************************************************/

/*!
 * @brief ADC_CLP1 - ADC Plus-Side General Calibration Value Register (RW)
 *
 * Reset value: 0x00000040U
 *
 * For more information, see CLPD register description.
 */
/*!
 * @name Constants and macros for entire ADC_CLP1 register
 */
/*@{*/
#define ADC_RD_CLP1(base)        (ADC_CLP1_REG(base))
#define ADC_WR_CLP1(base, value) (ADC_CLP1_REG(base) = (value))
#define ADC_RMW_CLP1(base, mask, value) (ADC_WR_CLP1(base, (ADC_RD_CLP1(base) & ~(mask)) | (value)))
#define ADC_SET_CLP1(base, value) (BME_OR32(&ADC_CLP1_REG(base), (uint32_t)(value)))
#define ADC_CLR_CLP1(base, value) (BME_AND32(&ADC_CLP1_REG(base), (uint32_t)(~(value))))
#define ADC_TOG_CLP1(base, value) (BME_XOR32(&ADC_CLP1_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual ADC_CLP1 bitfields
 */

/*!
 * @name Register ADC_CLP1, field CLP1[6:0] (RW)
 *
 * Calibration Value
 */
/*@{*/
/*! @brief Read current value of the ADC_CLP1_CLP1 field. */
#define ADC_RD_CLP1_CLP1(base) ((ADC_CLP1_REG(base) & ADC_CLP1_CLP1_MASK) >> ADC_CLP1_CLP1_SHIFT)
#define ADC_BRD_CLP1_CLP1(base) (BME_UBFX32(&ADC_CLP1_REG(base), ADC_CLP1_CLP1_SHIFT, ADC_CLP1_CLP1_WIDTH))

/*! @brief Set the CLP1 field to a new value. */
#define ADC_WR_CLP1_CLP1(base, value) (ADC_RMW_CLP1(base, ADC_CLP1_CLP1_MASK, ADC_CLP1_CLP1(value)))
#define ADC_BWR_CLP1_CLP1(base, value) (BME_BFI32(&ADC_CLP1_REG(base), ((uint32_t)(value) << ADC_CLP1_CLP1_SHIFT), ADC_CLP1_CLP1_SHIFT, ADC_CLP1_CLP1_WIDTH))
/*@}*/

/*******************************************************************************
 * ADC_CLP0 - ADC Plus-Side General Calibration Value Register
 ******************************************************************************/

/*!
 * @brief ADC_CLP0 - ADC Plus-Side General Calibration Value Register (RW)
 *
 * Reset value: 0x00000020U
 *
 * For more information, see CLPD register description.
 */
/*!
 * @name Constants and macros for entire ADC_CLP0 register
 */
/*@{*/
#define ADC_RD_CLP0(base)        (ADC_CLP0_REG(base))
#define ADC_WR_CLP0(base, value) (ADC_CLP0_REG(base) = (value))
#define ADC_RMW_CLP0(base, mask, value) (ADC_WR_CLP0(base, (ADC_RD_CLP0(base) & ~(mask)) | (value)))
#define ADC_SET_CLP0(base, value) (BME_OR32(&ADC_CLP0_REG(base), (uint32_t)(value)))
#define ADC_CLR_CLP0(base, value) (BME_AND32(&ADC_CLP0_REG(base), (uint32_t)(~(value))))
#define ADC_TOG_CLP0(base, value) (BME_XOR32(&ADC_CLP0_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual ADC_CLP0 bitfields
 */

/*!
 * @name Register ADC_CLP0, field CLP0[5:0] (RW)
 *
 * Calibration Value
 */
/*@{*/
/*! @brief Read current value of the ADC_CLP0_CLP0 field. */
#define ADC_RD_CLP0_CLP0(base) ((ADC_CLP0_REG(base) & ADC_CLP0_CLP0_MASK) >> ADC_CLP0_CLP0_SHIFT)
#define ADC_BRD_CLP0_CLP0(base) (BME_UBFX32(&ADC_CLP0_REG(base), ADC_CLP0_CLP0_SHIFT, ADC_CLP0_CLP0_WIDTH))

/*! @brief Set the CLP0 field to a new value. */
#define ADC_WR_CLP0_CLP0(base, value) (ADC_RMW_CLP0(base, ADC_CLP0_CLP0_MASK, ADC_CLP0_CLP0(value)))
#define ADC_BWR_CLP0_CLP0(base, value) (BME_BFI32(&ADC_CLP0_REG(base), ((uint32_t)(value) << ADC_CLP0_CLP0_SHIFT), ADC_CLP0_CLP0_SHIFT, ADC_CLP0_CLP0_WIDTH))
/*@}*/

/*******************************************************************************
 * ADC_CLMD - ADC Minus-Side General Calibration Value Register
 ******************************************************************************/

/*!
 * @brief ADC_CLMD - ADC Minus-Side General Calibration Value Register (RW)
 *
 * Reset value: 0x0000000AU
 *
 * The Minus-Side General Calibration Value (CLMx) registers contain calibration
 * information that is generated by the calibration function. These registers
 * contain seven calibration values of varying widths: CLM0[5:0], CLM1[6:0],
 * CLM2[7:0], CLM3[8:0], CLM4[9:0], CLMS[5:0], and CLMD[5:0]. CLMx are automatically
 * set when the self-calibration sequence is done, that is, CAL is cleared. If
 * these registers are written by the user after calibration, the linearity error
 * specifications may not be met. For more information regarding the calibration
 * procedure, please refer to the Calibration functionThe ADC contains a
 * self-calibration function that is required to achieve the specified accuracy. section.
 */
/*!
 * @name Constants and macros for entire ADC_CLMD register
 */
/*@{*/
#define ADC_RD_CLMD(base)        (ADC_CLMD_REG(base))
#define ADC_WR_CLMD(base, value) (ADC_CLMD_REG(base) = (value))
#define ADC_RMW_CLMD(base, mask, value) (ADC_WR_CLMD(base, (ADC_RD_CLMD(base) & ~(mask)) | (value)))
#define ADC_SET_CLMD(base, value) (BME_OR32(&ADC_CLMD_REG(base), (uint32_t)(value)))
#define ADC_CLR_CLMD(base, value) (BME_AND32(&ADC_CLMD_REG(base), (uint32_t)(~(value))))
#define ADC_TOG_CLMD(base, value) (BME_XOR32(&ADC_CLMD_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual ADC_CLMD bitfields
 */

/*!
 * @name Register ADC_CLMD, field CLMD[5:0] (RW)
 *
 * Calibration Value
 */
/*@{*/
/*! @brief Read current value of the ADC_CLMD_CLMD field. */
#define ADC_RD_CLMD_CLMD(base) ((ADC_CLMD_REG(base) & ADC_CLMD_CLMD_MASK) >> ADC_CLMD_CLMD_SHIFT)
#define ADC_BRD_CLMD_CLMD(base) (BME_UBFX32(&ADC_CLMD_REG(base), ADC_CLMD_CLMD_SHIFT, ADC_CLMD_CLMD_WIDTH))

/*! @brief Set the CLMD field to a new value. */
#define ADC_WR_CLMD_CLMD(base, value) (ADC_RMW_CLMD(base, ADC_CLMD_CLMD_MASK, ADC_CLMD_CLMD(value)))
#define ADC_BWR_CLMD_CLMD(base, value) (BME_BFI32(&ADC_CLMD_REG(base), ((uint32_t)(value) << ADC_CLMD_CLMD_SHIFT), ADC_CLMD_CLMD_SHIFT, ADC_CLMD_CLMD_WIDTH))
/*@}*/

/*******************************************************************************
 * ADC_CLMS - ADC Minus-Side General Calibration Value Register
 ******************************************************************************/

/*!
 * @brief ADC_CLMS - ADC Minus-Side General Calibration Value Register (RW)
 *
 * Reset value: 0x00000020U
 *
 * For more information, see CLMD register description.
 */
/*!
 * @name Constants and macros for entire ADC_CLMS register
 */
/*@{*/
#define ADC_RD_CLMS(base)        (ADC_CLMS_REG(base))
#define ADC_WR_CLMS(base, value) (ADC_CLMS_REG(base) = (value))
#define ADC_RMW_CLMS(base, mask, value) (ADC_WR_CLMS(base, (ADC_RD_CLMS(base) & ~(mask)) | (value)))
#define ADC_SET_CLMS(base, value) (BME_OR32(&ADC_CLMS_REG(base), (uint32_t)(value)))
#define ADC_CLR_CLMS(base, value) (BME_AND32(&ADC_CLMS_REG(base), (uint32_t)(~(value))))
#define ADC_TOG_CLMS(base, value) (BME_XOR32(&ADC_CLMS_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual ADC_CLMS bitfields
 */

/*!
 * @name Register ADC_CLMS, field CLMS[5:0] (RW)
 *
 * Calibration Value
 */
/*@{*/
/*! @brief Read current value of the ADC_CLMS_CLMS field. */
#define ADC_RD_CLMS_CLMS(base) ((ADC_CLMS_REG(base) & ADC_CLMS_CLMS_MASK) >> ADC_CLMS_CLMS_SHIFT)
#define ADC_BRD_CLMS_CLMS(base) (BME_UBFX32(&ADC_CLMS_REG(base), ADC_CLMS_CLMS_SHIFT, ADC_CLMS_CLMS_WIDTH))

/*! @brief Set the CLMS field to a new value. */
#define ADC_WR_CLMS_CLMS(base, value) (ADC_RMW_CLMS(base, ADC_CLMS_CLMS_MASK, ADC_CLMS_CLMS(value)))
#define ADC_BWR_CLMS_CLMS(base, value) (BME_BFI32(&ADC_CLMS_REG(base), ((uint32_t)(value) << ADC_CLMS_CLMS_SHIFT), ADC_CLMS_CLMS_SHIFT, ADC_CLMS_CLMS_WIDTH))
/*@}*/

/*******************************************************************************
 * ADC_CLM4 - ADC Minus-Side General Calibration Value Register
 ******************************************************************************/

/*!
 * @brief ADC_CLM4 - ADC Minus-Side General Calibration Value Register (RW)
 *
 * Reset value: 0x00000200U
 *
 * For more information, see CLMD register description.
 */
/*!
 * @name Constants and macros for entire ADC_CLM4 register
 */
/*@{*/
#define ADC_RD_CLM4(base)        (ADC_CLM4_REG(base))
#define ADC_WR_CLM4(base, value) (ADC_CLM4_REG(base) = (value))
#define ADC_RMW_CLM4(base, mask, value) (ADC_WR_CLM4(base, (ADC_RD_CLM4(base) & ~(mask)) | (value)))
#define ADC_SET_CLM4(base, value) (BME_OR32(&ADC_CLM4_REG(base), (uint32_t)(value)))
#define ADC_CLR_CLM4(base, value) (BME_AND32(&ADC_CLM4_REG(base), (uint32_t)(~(value))))
#define ADC_TOG_CLM4(base, value) (BME_XOR32(&ADC_CLM4_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual ADC_CLM4 bitfields
 */

/*!
 * @name Register ADC_CLM4, field CLM4[9:0] (RW)
 *
 * Calibration Value
 */
/*@{*/
/*! @brief Read current value of the ADC_CLM4_CLM4 field. */
#define ADC_RD_CLM4_CLM4(base) ((ADC_CLM4_REG(base) & ADC_CLM4_CLM4_MASK) >> ADC_CLM4_CLM4_SHIFT)
#define ADC_BRD_CLM4_CLM4(base) (ADC_RD_CLM4_CLM4(base))

/*! @brief Set the CLM4 field to a new value. */
#define ADC_WR_CLM4_CLM4(base, value) (ADC_RMW_CLM4(base, ADC_CLM4_CLM4_MASK, ADC_CLM4_CLM4(value)))
#define ADC_BWR_CLM4_CLM4(base, value) (ADC_WR_CLM4_CLM4(base, value))
/*@}*/

/*******************************************************************************
 * ADC_CLM3 - ADC Minus-Side General Calibration Value Register
 ******************************************************************************/

/*!
 * @brief ADC_CLM3 - ADC Minus-Side General Calibration Value Register (RW)
 *
 * Reset value: 0x00000100U
 *
 * For more information, see CLMD register description.
 */
/*!
 * @name Constants and macros for entire ADC_CLM3 register
 */
/*@{*/
#define ADC_RD_CLM3(base)        (ADC_CLM3_REG(base))
#define ADC_WR_CLM3(base, value) (ADC_CLM3_REG(base) = (value))
#define ADC_RMW_CLM3(base, mask, value) (ADC_WR_CLM3(base, (ADC_RD_CLM3(base) & ~(mask)) | (value)))
#define ADC_SET_CLM3(base, value) (BME_OR32(&ADC_CLM3_REG(base), (uint32_t)(value)))
#define ADC_CLR_CLM3(base, value) (BME_AND32(&ADC_CLM3_REG(base), (uint32_t)(~(value))))
#define ADC_TOG_CLM3(base, value) (BME_XOR32(&ADC_CLM3_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual ADC_CLM3 bitfields
 */

/*!
 * @name Register ADC_CLM3, field CLM3[8:0] (RW)
 *
 * Calibration Value
 */
/*@{*/
/*! @brief Read current value of the ADC_CLM3_CLM3 field. */
#define ADC_RD_CLM3_CLM3(base) ((ADC_CLM3_REG(base) & ADC_CLM3_CLM3_MASK) >> ADC_CLM3_CLM3_SHIFT)
#define ADC_BRD_CLM3_CLM3(base) (ADC_RD_CLM3_CLM3(base))

/*! @brief Set the CLM3 field to a new value. */
#define ADC_WR_CLM3_CLM3(base, value) (ADC_RMW_CLM3(base, ADC_CLM3_CLM3_MASK, ADC_CLM3_CLM3(value)))
#define ADC_BWR_CLM3_CLM3(base, value) (ADC_WR_CLM3_CLM3(base, value))
/*@}*/

/*******************************************************************************
 * ADC_CLM2 - ADC Minus-Side General Calibration Value Register
 ******************************************************************************/

/*!
 * @brief ADC_CLM2 - ADC Minus-Side General Calibration Value Register (RW)
 *
 * Reset value: 0x00000080U
 *
 * For more information, see CLMD register description.
 */
/*!
 * @name Constants and macros for entire ADC_CLM2 register
 */
/*@{*/
#define ADC_RD_CLM2(base)        (ADC_CLM2_REG(base))
#define ADC_WR_CLM2(base, value) (ADC_CLM2_REG(base) = (value))
#define ADC_RMW_CLM2(base, mask, value) (ADC_WR_CLM2(base, (ADC_RD_CLM2(base) & ~(mask)) | (value)))
#define ADC_SET_CLM2(base, value) (BME_OR32(&ADC_CLM2_REG(base), (uint32_t)(value)))
#define ADC_CLR_CLM2(base, value) (BME_AND32(&ADC_CLM2_REG(base), (uint32_t)(~(value))))
#define ADC_TOG_CLM2(base, value) (BME_XOR32(&ADC_CLM2_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual ADC_CLM2 bitfields
 */

/*!
 * @name Register ADC_CLM2, field CLM2[7:0] (RW)
 *
 * Calibration Value
 */
/*@{*/
/*! @brief Read current value of the ADC_CLM2_CLM2 field. */
#define ADC_RD_CLM2_CLM2(base) ((ADC_CLM2_REG(base) & ADC_CLM2_CLM2_MASK) >> ADC_CLM2_CLM2_SHIFT)
#define ADC_BRD_CLM2_CLM2(base) (BME_UBFX32(&ADC_CLM2_REG(base), ADC_CLM2_CLM2_SHIFT, ADC_CLM2_CLM2_WIDTH))

/*! @brief Set the CLM2 field to a new value. */
#define ADC_WR_CLM2_CLM2(base, value) (ADC_RMW_CLM2(base, ADC_CLM2_CLM2_MASK, ADC_CLM2_CLM2(value)))
#define ADC_BWR_CLM2_CLM2(base, value) (BME_BFI32(&ADC_CLM2_REG(base), ((uint32_t)(value) << ADC_CLM2_CLM2_SHIFT), ADC_CLM2_CLM2_SHIFT, ADC_CLM2_CLM2_WIDTH))
/*@}*/

/*******************************************************************************
 * ADC_CLM1 - ADC Minus-Side General Calibration Value Register
 ******************************************************************************/

/*!
 * @brief ADC_CLM1 - ADC Minus-Side General Calibration Value Register (RW)
 *
 * Reset value: 0x00000040U
 *
 * For more information, see CLMD register description.
 */
/*!
 * @name Constants and macros for entire ADC_CLM1 register
 */
/*@{*/
#define ADC_RD_CLM1(base)        (ADC_CLM1_REG(base))
#define ADC_WR_CLM1(base, value) (ADC_CLM1_REG(base) = (value))
#define ADC_RMW_CLM1(base, mask, value) (ADC_WR_CLM1(base, (ADC_RD_CLM1(base) & ~(mask)) | (value)))
#define ADC_SET_CLM1(base, value) (BME_OR32(&ADC_CLM1_REG(base), (uint32_t)(value)))
#define ADC_CLR_CLM1(base, value) (BME_AND32(&ADC_CLM1_REG(base), (uint32_t)(~(value))))
#define ADC_TOG_CLM1(base, value) (BME_XOR32(&ADC_CLM1_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual ADC_CLM1 bitfields
 */

/*!
 * @name Register ADC_CLM1, field CLM1[6:0] (RW)
 *
 * Calibration Value
 */
/*@{*/
/*! @brief Read current value of the ADC_CLM1_CLM1 field. */
#define ADC_RD_CLM1_CLM1(base) ((ADC_CLM1_REG(base) & ADC_CLM1_CLM1_MASK) >> ADC_CLM1_CLM1_SHIFT)
#define ADC_BRD_CLM1_CLM1(base) (BME_UBFX32(&ADC_CLM1_REG(base), ADC_CLM1_CLM1_SHIFT, ADC_CLM1_CLM1_WIDTH))

/*! @brief Set the CLM1 field to a new value. */
#define ADC_WR_CLM1_CLM1(base, value) (ADC_RMW_CLM1(base, ADC_CLM1_CLM1_MASK, ADC_CLM1_CLM1(value)))
#define ADC_BWR_CLM1_CLM1(base, value) (BME_BFI32(&ADC_CLM1_REG(base), ((uint32_t)(value) << ADC_CLM1_CLM1_SHIFT), ADC_CLM1_CLM1_SHIFT, ADC_CLM1_CLM1_WIDTH))
/*@}*/

/*******************************************************************************
 * ADC_CLM0 - ADC Minus-Side General Calibration Value Register
 ******************************************************************************/

/*!
 * @brief ADC_CLM0 - ADC Minus-Side General Calibration Value Register (RW)
 *
 * Reset value: 0x00000020U
 *
 * For more information, see CLMD register description.
 */
/*!
 * @name Constants and macros for entire ADC_CLM0 register
 */
/*@{*/
#define ADC_RD_CLM0(base)        (ADC_CLM0_REG(base))
#define ADC_WR_CLM0(base, value) (ADC_CLM0_REG(base) = (value))
#define ADC_RMW_CLM0(base, mask, value) (ADC_WR_CLM0(base, (ADC_RD_CLM0(base) & ~(mask)) | (value)))
#define ADC_SET_CLM0(base, value) (BME_OR32(&ADC_CLM0_REG(base), (uint32_t)(value)))
#define ADC_CLR_CLM0(base, value) (BME_AND32(&ADC_CLM0_REG(base), (uint32_t)(~(value))))
#define ADC_TOG_CLM0(base, value) (BME_XOR32(&ADC_CLM0_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual ADC_CLM0 bitfields
 */

/*!
 * @name Register ADC_CLM0, field CLM0[5:0] (RW)
 *
 * Calibration Value
 */
/*@{*/
/*! @brief Read current value of the ADC_CLM0_CLM0 field. */
#define ADC_RD_CLM0_CLM0(base) ((ADC_CLM0_REG(base) & ADC_CLM0_CLM0_MASK) >> ADC_CLM0_CLM0_SHIFT)
#define ADC_BRD_CLM0_CLM0(base) (BME_UBFX32(&ADC_CLM0_REG(base), ADC_CLM0_CLM0_SHIFT, ADC_CLM0_CLM0_WIDTH))

/*! @brief Set the CLM0 field to a new value. */
#define ADC_WR_CLM0_CLM0(base, value) (ADC_RMW_CLM0(base, ADC_CLM0_CLM0_MASK, ADC_CLM0_CLM0(value)))
#define ADC_BWR_CLM0_CLM0(base, value) (BME_BFI32(&ADC_CLM0_REG(base), ((uint32_t)(value) << ADC_CLM0_CLM0_SHIFT), ADC_CLM0_CLM0_SHIFT, ADC_CLM0_CLM0_WIDTH))
/*@}*/

/*
 * MK82F25615 AIPS
 *
 * AIPS-Lite Bridge
 *
 * Registers defined in this header file:
 * - AIPS_MPRA - Master Privilege Register A
 * - AIPS_PACRA - Peripheral Access Control Register
 * - AIPS_PACRB - Peripheral Access Control Register
 * - AIPS_PACRC - Peripheral Access Control Register
 * - AIPS_PACRD - Peripheral Access Control Register
 * - AIPS_PACRE - Peripheral Access Control Register
 * - AIPS_PACRF - Peripheral Access Control Register
 * - AIPS_PACRG - Peripheral Access Control Register
 * - AIPS_PACRH - Peripheral Access Control Register
 * - AIPS_PACRI - Peripheral Access Control Register
 * - AIPS_PACRJ - Peripheral Access Control Register
 * - AIPS_PACRK - Peripheral Access Control Register
 * - AIPS_PACRL - Peripheral Access Control Register
 * - AIPS_PACRM - Peripheral Access Control Register
 * - AIPS_PACRN - Peripheral Access Control Register
 * - AIPS_PACRO - Peripheral Access Control Register
 * - AIPS_PACRP - Peripheral Access Control Register
 */

#define AIPS_INSTANCE_COUNT (2U) /*!< Number of instances of the AIPS module. */
#define AIPS0_IDX (0U) /*!< Instance number for AIPS0. */
#define AIPS1_IDX (1U) /*!< Instance number for AIPS1. */

/*******************************************************************************
 * AIPS_MPRA - Master Privilege Register A
 ******************************************************************************/

/*!
 * @brief AIPS_MPRA - Master Privilege Register A (RW)
 *
 * Reset value: 0x77700000U
 *
 * The MPRA specifies identical 4-bit fields defining the access-privilege level
 * associated with a bus master to various peripherals on the chip. The register
 * provides one field per bus master. At reset, the default value loaded into
 * the MPRA fields is chip-specific. See the chip configuration details for the
 * value of a particular device. A register field that maps to an unimplemented
 * master or peripheral behaves as read-only-zero. Each master is assigned a logical
 * ID from 0 to 15. See the master logical ID assignment table in the
 * chip-specific AIPS information.
 */
/*!
 * @name Constants and macros for entire AIPS_MPRA register
 */
/*@{*/
#define AIPS_RD_MPRA(base)       (AIPS_MPRA_REG(base))
#define AIPS_WR_MPRA(base, value) (AIPS_MPRA_REG(base) = (value))
#define AIPS_RMW_MPRA(base, mask, value) (AIPS_WR_MPRA(base, (AIPS_RD_MPRA(base) & ~(mask)) | (value)))
#define AIPS_SET_MPRA(base, value) (BME_OR32(&AIPS_MPRA_REG(base), (uint32_t)(value)))
#define AIPS_CLR_MPRA(base, value) (BME_AND32(&AIPS_MPRA_REG(base), (uint32_t)(~(value))))
#define AIPS_TOG_MPRA(base, value) (BME_XOR32(&AIPS_MPRA_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual AIPS_MPRA bitfields
 */

/*!
 * @name Register AIPS_MPRA, field MPL4[12] (RW)
 *
 * Specifies how the privilege level of the master is determined.
 *
 * Values:
 * - 0b0 - Accesses from this master are forced to user-mode.
 * - 0b1 - Accesses from this master are not forced to user-mode.
 */
/*@{*/
/*! @brief Read current value of the AIPS_MPRA_MPL4 field. */
#define AIPS_RD_MPRA_MPL4(base) ((AIPS_MPRA_REG(base) & AIPS_MPRA_MPL4_MASK) >> AIPS_MPRA_MPL4_SHIFT)
#define AIPS_BRD_MPRA_MPL4(base) (BME_UBFX32(&AIPS_MPRA_REG(base), AIPS_MPRA_MPL4_SHIFT, AIPS_MPRA_MPL4_WIDTH))

/*! @brief Set the MPL4 field to a new value. */
#define AIPS_WR_MPRA_MPL4(base, value) (AIPS_RMW_MPRA(base, AIPS_MPRA_MPL4_MASK, AIPS_MPRA_MPL4(value)))
#define AIPS_BWR_MPRA_MPL4(base, value) (BME_BFI32(&AIPS_MPRA_REG(base), ((uint32_t)(value) << AIPS_MPRA_MPL4_SHIFT), AIPS_MPRA_MPL4_SHIFT, AIPS_MPRA_MPL4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_MPRA, field MTW4[13] (RW)
 *
 * Determines whether the master is trusted for write accesses.
 *
 * Values:
 * - 0b0 - This master is not trusted for write accesses.
 * - 0b1 - This master is trusted for write accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_MPRA_MTW4 field. */
#define AIPS_RD_MPRA_MTW4(base) ((AIPS_MPRA_REG(base) & AIPS_MPRA_MTW4_MASK) >> AIPS_MPRA_MTW4_SHIFT)
#define AIPS_BRD_MPRA_MTW4(base) (BME_UBFX32(&AIPS_MPRA_REG(base), AIPS_MPRA_MTW4_SHIFT, AIPS_MPRA_MTW4_WIDTH))

/*! @brief Set the MTW4 field to a new value. */
#define AIPS_WR_MPRA_MTW4(base, value) (AIPS_RMW_MPRA(base, AIPS_MPRA_MTW4_MASK, AIPS_MPRA_MTW4(value)))
#define AIPS_BWR_MPRA_MTW4(base, value) (BME_BFI32(&AIPS_MPRA_REG(base), ((uint32_t)(value) << AIPS_MPRA_MTW4_SHIFT), AIPS_MPRA_MTW4_SHIFT, AIPS_MPRA_MTW4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_MPRA, field MTR4[14] (RW)
 *
 * Determines whether the master is trusted for read accesses.
 *
 * Values:
 * - 0b0 - This master is not trusted for read accesses.
 * - 0b1 - This master is trusted for read accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_MPRA_MTR4 field. */
#define AIPS_RD_MPRA_MTR4(base) ((AIPS_MPRA_REG(base) & AIPS_MPRA_MTR4_MASK) >> AIPS_MPRA_MTR4_SHIFT)
#define AIPS_BRD_MPRA_MTR4(base) (BME_UBFX32(&AIPS_MPRA_REG(base), AIPS_MPRA_MTR4_SHIFT, AIPS_MPRA_MTR4_WIDTH))

/*! @brief Set the MTR4 field to a new value. */
#define AIPS_WR_MPRA_MTR4(base, value) (AIPS_RMW_MPRA(base, AIPS_MPRA_MTR4_MASK, AIPS_MPRA_MTR4(value)))
#define AIPS_BWR_MPRA_MTR4(base, value) (BME_BFI32(&AIPS_MPRA_REG(base), ((uint32_t)(value) << AIPS_MPRA_MTR4_SHIFT), AIPS_MPRA_MTR4_SHIFT, AIPS_MPRA_MTR4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_MPRA, field MPL3[16] (RW)
 *
 * Specifies how the privilege level of the master is determined.
 *
 * Values:
 * - 0b0 - Accesses from this master are forced to user-mode.
 * - 0b1 - Accesses from this master are not forced to user-mode.
 */
/*@{*/
/*! @brief Read current value of the AIPS_MPRA_MPL3 field. */
#define AIPS_RD_MPRA_MPL3(base) ((AIPS_MPRA_REG(base) & AIPS_MPRA_MPL3_MASK) >> AIPS_MPRA_MPL3_SHIFT)
#define AIPS_BRD_MPRA_MPL3(base) (BME_UBFX32(&AIPS_MPRA_REG(base), AIPS_MPRA_MPL3_SHIFT, AIPS_MPRA_MPL3_WIDTH))

/*! @brief Set the MPL3 field to a new value. */
#define AIPS_WR_MPRA_MPL3(base, value) (AIPS_RMW_MPRA(base, AIPS_MPRA_MPL3_MASK, AIPS_MPRA_MPL3(value)))
#define AIPS_BWR_MPRA_MPL3(base, value) (BME_BFI32(&AIPS_MPRA_REG(base), ((uint32_t)(value) << AIPS_MPRA_MPL3_SHIFT), AIPS_MPRA_MPL3_SHIFT, AIPS_MPRA_MPL3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_MPRA, field MTW3[17] (RW)
 *
 * Determines whether the master is trusted for write accesses.
 *
 * Values:
 * - 0b0 - This master is not trusted for write accesses.
 * - 0b1 - This master is trusted for write accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_MPRA_MTW3 field. */
#define AIPS_RD_MPRA_MTW3(base) ((AIPS_MPRA_REG(base) & AIPS_MPRA_MTW3_MASK) >> AIPS_MPRA_MTW3_SHIFT)
#define AIPS_BRD_MPRA_MTW3(base) (BME_UBFX32(&AIPS_MPRA_REG(base), AIPS_MPRA_MTW3_SHIFT, AIPS_MPRA_MTW3_WIDTH))

/*! @brief Set the MTW3 field to a new value. */
#define AIPS_WR_MPRA_MTW3(base, value) (AIPS_RMW_MPRA(base, AIPS_MPRA_MTW3_MASK, AIPS_MPRA_MTW3(value)))
#define AIPS_BWR_MPRA_MTW3(base, value) (BME_BFI32(&AIPS_MPRA_REG(base), ((uint32_t)(value) << AIPS_MPRA_MTW3_SHIFT), AIPS_MPRA_MTW3_SHIFT, AIPS_MPRA_MTW3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_MPRA, field MTR3[18] (RW)
 *
 * Determines whether the master is trusted for read accesses.
 *
 * Values:
 * - 0b0 - This master is not trusted for read accesses.
 * - 0b1 - This master is trusted for read accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_MPRA_MTR3 field. */
#define AIPS_RD_MPRA_MTR3(base) ((AIPS_MPRA_REG(base) & AIPS_MPRA_MTR3_MASK) >> AIPS_MPRA_MTR3_SHIFT)
#define AIPS_BRD_MPRA_MTR3(base) (BME_UBFX32(&AIPS_MPRA_REG(base), AIPS_MPRA_MTR3_SHIFT, AIPS_MPRA_MTR3_WIDTH))

/*! @brief Set the MTR3 field to a new value. */
#define AIPS_WR_MPRA_MTR3(base, value) (AIPS_RMW_MPRA(base, AIPS_MPRA_MTR3_MASK, AIPS_MPRA_MTR3(value)))
#define AIPS_BWR_MPRA_MTR3(base, value) (BME_BFI32(&AIPS_MPRA_REG(base), ((uint32_t)(value) << AIPS_MPRA_MTR3_SHIFT), AIPS_MPRA_MTR3_SHIFT, AIPS_MPRA_MTR3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_MPRA, field MPL2[20] (RW)
 *
 * Specifies how the privilege level of the master is determined.
 *
 * Values:
 * - 0b0 - Accesses from this master are forced to user-mode.
 * - 0b1 - Accesses from this master are not forced to user-mode.
 */
/*@{*/
/*! @brief Read current value of the AIPS_MPRA_MPL2 field. */
#define AIPS_RD_MPRA_MPL2(base) ((AIPS_MPRA_REG(base) & AIPS_MPRA_MPL2_MASK) >> AIPS_MPRA_MPL2_SHIFT)
#define AIPS_BRD_MPRA_MPL2(base) (BME_UBFX32(&AIPS_MPRA_REG(base), AIPS_MPRA_MPL2_SHIFT, AIPS_MPRA_MPL2_WIDTH))

/*! @brief Set the MPL2 field to a new value. */
#define AIPS_WR_MPRA_MPL2(base, value) (AIPS_RMW_MPRA(base, AIPS_MPRA_MPL2_MASK, AIPS_MPRA_MPL2(value)))
#define AIPS_BWR_MPRA_MPL2(base, value) (BME_BFI32(&AIPS_MPRA_REG(base), ((uint32_t)(value) << AIPS_MPRA_MPL2_SHIFT), AIPS_MPRA_MPL2_SHIFT, AIPS_MPRA_MPL2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_MPRA, field MTW2[21] (RW)
 *
 * Determines whether the master is trusted for write accesses.
 *
 * Values:
 * - 0b0 - This master is not trusted for write accesses.
 * - 0b1 - This master is trusted for write accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_MPRA_MTW2 field. */
#define AIPS_RD_MPRA_MTW2(base) ((AIPS_MPRA_REG(base) & AIPS_MPRA_MTW2_MASK) >> AIPS_MPRA_MTW2_SHIFT)
#define AIPS_BRD_MPRA_MTW2(base) (BME_UBFX32(&AIPS_MPRA_REG(base), AIPS_MPRA_MTW2_SHIFT, AIPS_MPRA_MTW2_WIDTH))

/*! @brief Set the MTW2 field to a new value. */
#define AIPS_WR_MPRA_MTW2(base, value) (AIPS_RMW_MPRA(base, AIPS_MPRA_MTW2_MASK, AIPS_MPRA_MTW2(value)))
#define AIPS_BWR_MPRA_MTW2(base, value) (BME_BFI32(&AIPS_MPRA_REG(base), ((uint32_t)(value) << AIPS_MPRA_MTW2_SHIFT), AIPS_MPRA_MTW2_SHIFT, AIPS_MPRA_MTW2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_MPRA, field MTR2[22] (RW)
 *
 * Determines whether the master is trusted for read accesses.
 *
 * Values:
 * - 0b0 - This master is not trusted for read accesses.
 * - 0b1 - This master is trusted for read accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_MPRA_MTR2 field. */
#define AIPS_RD_MPRA_MTR2(base) ((AIPS_MPRA_REG(base) & AIPS_MPRA_MTR2_MASK) >> AIPS_MPRA_MTR2_SHIFT)
#define AIPS_BRD_MPRA_MTR2(base) (BME_UBFX32(&AIPS_MPRA_REG(base), AIPS_MPRA_MTR2_SHIFT, AIPS_MPRA_MTR2_WIDTH))

/*! @brief Set the MTR2 field to a new value. */
#define AIPS_WR_MPRA_MTR2(base, value) (AIPS_RMW_MPRA(base, AIPS_MPRA_MTR2_MASK, AIPS_MPRA_MTR2(value)))
#define AIPS_BWR_MPRA_MTR2(base, value) (BME_BFI32(&AIPS_MPRA_REG(base), ((uint32_t)(value) << AIPS_MPRA_MTR2_SHIFT), AIPS_MPRA_MTR2_SHIFT, AIPS_MPRA_MTR2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_MPRA, field MPL1[24] (RW)
 *
 * Specifies how the privilege level of the master is determined.
 *
 * Values:
 * - 0b0 - Accesses from this master are forced to user-mode.
 * - 0b1 - Accesses from this master are not forced to user-mode.
 */
/*@{*/
/*! @brief Read current value of the AIPS_MPRA_MPL1 field. */
#define AIPS_RD_MPRA_MPL1(base) ((AIPS_MPRA_REG(base) & AIPS_MPRA_MPL1_MASK) >> AIPS_MPRA_MPL1_SHIFT)
#define AIPS_BRD_MPRA_MPL1(base) (BME_UBFX32(&AIPS_MPRA_REG(base), AIPS_MPRA_MPL1_SHIFT, AIPS_MPRA_MPL1_WIDTH))

/*! @brief Set the MPL1 field to a new value. */
#define AIPS_WR_MPRA_MPL1(base, value) (AIPS_RMW_MPRA(base, AIPS_MPRA_MPL1_MASK, AIPS_MPRA_MPL1(value)))
#define AIPS_BWR_MPRA_MPL1(base, value) (BME_BFI32(&AIPS_MPRA_REG(base), ((uint32_t)(value) << AIPS_MPRA_MPL1_SHIFT), AIPS_MPRA_MPL1_SHIFT, AIPS_MPRA_MPL1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_MPRA, field MTW1[25] (RW)
 *
 * Determines whether the master is trusted for write accesses.
 *
 * Values:
 * - 0b0 - This master is not trusted for write accesses.
 * - 0b1 - This master is trusted for write accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_MPRA_MTW1 field. */
#define AIPS_RD_MPRA_MTW1(base) ((AIPS_MPRA_REG(base) & AIPS_MPRA_MTW1_MASK) >> AIPS_MPRA_MTW1_SHIFT)
#define AIPS_BRD_MPRA_MTW1(base) (BME_UBFX32(&AIPS_MPRA_REG(base), AIPS_MPRA_MTW1_SHIFT, AIPS_MPRA_MTW1_WIDTH))

/*! @brief Set the MTW1 field to a new value. */
#define AIPS_WR_MPRA_MTW1(base, value) (AIPS_RMW_MPRA(base, AIPS_MPRA_MTW1_MASK, AIPS_MPRA_MTW1(value)))
#define AIPS_BWR_MPRA_MTW1(base, value) (BME_BFI32(&AIPS_MPRA_REG(base), ((uint32_t)(value) << AIPS_MPRA_MTW1_SHIFT), AIPS_MPRA_MTW1_SHIFT, AIPS_MPRA_MTW1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_MPRA, field MTR1[26] (RW)
 *
 * Determines whether the master is trusted for read accesses.
 *
 * Values:
 * - 0b0 - This master is not trusted for read accesses.
 * - 0b1 - This master is trusted for read accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_MPRA_MTR1 field. */
#define AIPS_RD_MPRA_MTR1(base) ((AIPS_MPRA_REG(base) & AIPS_MPRA_MTR1_MASK) >> AIPS_MPRA_MTR1_SHIFT)
#define AIPS_BRD_MPRA_MTR1(base) (BME_UBFX32(&AIPS_MPRA_REG(base), AIPS_MPRA_MTR1_SHIFT, AIPS_MPRA_MTR1_WIDTH))

/*! @brief Set the MTR1 field to a new value. */
#define AIPS_WR_MPRA_MTR1(base, value) (AIPS_RMW_MPRA(base, AIPS_MPRA_MTR1_MASK, AIPS_MPRA_MTR1(value)))
#define AIPS_BWR_MPRA_MTR1(base, value) (BME_BFI32(&AIPS_MPRA_REG(base), ((uint32_t)(value) << AIPS_MPRA_MTR1_SHIFT), AIPS_MPRA_MTR1_SHIFT, AIPS_MPRA_MTR1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_MPRA, field MPL0[28] (RW)
 *
 * Specifies how the privilege level of the master is determined.
 *
 * Values:
 * - 0b0 - Accesses from this master are forced to user-mode.
 * - 0b1 - Accesses from this master are not forced to user-mode.
 */
/*@{*/
/*! @brief Read current value of the AIPS_MPRA_MPL0 field. */
#define AIPS_RD_MPRA_MPL0(base) ((AIPS_MPRA_REG(base) & AIPS_MPRA_MPL0_MASK) >> AIPS_MPRA_MPL0_SHIFT)
#define AIPS_BRD_MPRA_MPL0(base) (BME_UBFX32(&AIPS_MPRA_REG(base), AIPS_MPRA_MPL0_SHIFT, AIPS_MPRA_MPL0_WIDTH))

/*! @brief Set the MPL0 field to a new value. */
#define AIPS_WR_MPRA_MPL0(base, value) (AIPS_RMW_MPRA(base, AIPS_MPRA_MPL0_MASK, AIPS_MPRA_MPL0(value)))
#define AIPS_BWR_MPRA_MPL0(base, value) (BME_BFI32(&AIPS_MPRA_REG(base), ((uint32_t)(value) << AIPS_MPRA_MPL0_SHIFT), AIPS_MPRA_MPL0_SHIFT, AIPS_MPRA_MPL0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_MPRA, field MTW0[29] (RW)
 *
 * Determines whether the master is trusted for write accesses.
 *
 * Values:
 * - 0b0 - This master is not trusted for write accesses.
 * - 0b1 - This master is trusted for write accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_MPRA_MTW0 field. */
#define AIPS_RD_MPRA_MTW0(base) ((AIPS_MPRA_REG(base) & AIPS_MPRA_MTW0_MASK) >> AIPS_MPRA_MTW0_SHIFT)
#define AIPS_BRD_MPRA_MTW0(base) (BME_UBFX32(&AIPS_MPRA_REG(base), AIPS_MPRA_MTW0_SHIFT, AIPS_MPRA_MTW0_WIDTH))

/*! @brief Set the MTW0 field to a new value. */
#define AIPS_WR_MPRA_MTW0(base, value) (AIPS_RMW_MPRA(base, AIPS_MPRA_MTW0_MASK, AIPS_MPRA_MTW0(value)))
#define AIPS_BWR_MPRA_MTW0(base, value) (BME_BFI32(&AIPS_MPRA_REG(base), ((uint32_t)(value) << AIPS_MPRA_MTW0_SHIFT), AIPS_MPRA_MTW0_SHIFT, AIPS_MPRA_MTW0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_MPRA, field MTR0[30] (RW)
 *
 * Determines whether the master is trusted for read accesses.
 *
 * Values:
 * - 0b0 - This master is not trusted for read accesses.
 * - 0b1 - This master is trusted for read accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_MPRA_MTR0 field. */
#define AIPS_RD_MPRA_MTR0(base) ((AIPS_MPRA_REG(base) & AIPS_MPRA_MTR0_MASK) >> AIPS_MPRA_MTR0_SHIFT)
#define AIPS_BRD_MPRA_MTR0(base) (BME_UBFX32(&AIPS_MPRA_REG(base), AIPS_MPRA_MTR0_SHIFT, AIPS_MPRA_MTR0_WIDTH))

/*! @brief Set the MTR0 field to a new value. */
#define AIPS_WR_MPRA_MTR0(base, value) (AIPS_RMW_MPRA(base, AIPS_MPRA_MTR0_MASK, AIPS_MPRA_MTR0(value)))
#define AIPS_BWR_MPRA_MTR0(base, value) (BME_BFI32(&AIPS_MPRA_REG(base), ((uint32_t)(value) << AIPS_MPRA_MTR0_SHIFT), AIPS_MPRA_MTR0_SHIFT, AIPS_MPRA_MTR0_WIDTH))
/*@}*/

/*******************************************************************************
 * AIPS_PACRA - Peripheral Access Control Register
 ******************************************************************************/

/*!
 * @brief AIPS_PACRA - Peripheral Access Control Register (RW)
 *
 * Reset value: 0x40004000U
 *
 * Each PACR register consists of eight 4-bit PACR fields. Each PACR field
 * defines the access levels for a particular peripheral. The mapping between a
 * peripheral and its PACR field is shown in the table below. The peripheral assignment
 * to each PACR is defined by the memory map slot that the peripheral is
 * assigned to. See this chip's memory map for the assignment of a particular
 * peripheral. The following table shows the location of each peripheral slot's PACR field
 * in the PACR registers. Offset Register [31:28] [27:24] [23:20] [19:16] [15:12]
 * [11:8] [7:4] [3:0] 0x20 PACRA PACR0 PACR1 PACR2 PACR3 PACR4 PACR5 PACR6 PACR7
 * 0x24 PACRB PACR8 PACR9 PACR10 PACR11 PACR12 PACR13 PACR14 PACR15 0x28 PACRC
 * PACR16 PACR17 PACR18 PACR19 PACR20 PACR21 PACR22 PACR23 0x2C PACRD PACR24
 * PACR25 PACR26 PACR27 PACR28 PACR29 PACR30 PACR31 0x30 Reserved 0x34 Reserved 0x38
 * Reserved 0x3C Reserved 0x40 PACRE PACR32 PACR33 PACR34 PACR35 PACR36 PACR37
 * PACR38 PACR39 0x44 PACRF PACR40 PACR41 PACR42 PACR43 PACR44 PACR45 PACR46 PACR47
 * 0x48 PACRG PACR48 PACR49 PACR50 PACR51 PACR52 PACR53 PACR54 PACR55 0x4C PACRH
 * PACR56 PACR57 PACR58 PACR59 PACR60 PACR61 PACR62 PACR63 0x50 PACRI PACR64
 * PACR65 PACR66 PACR67 PACR68 PACR69 PACR70 PACR71 0x54 PACRJ PACR72 PACR73 PACR74
 * PACR75 PACR76 PACR77 PACR78 PACR79 0x58 PACRK PACR80 PACR81 PACR82 PACR83
 * PACR84 PACR85 PACR86 PACR87 0x5C PACRL PACR88 PACR89 PACR90 PACR91 PACR92 PACR93
 * PACR94 PACR95 0x60 PACRM PACR96 PACR97 PACR98 PACR99 PACR100 PACR101 PACR102
 * PACR103 0x64 PACRN PACR104 PACR105 PACR106 PACR107 PACR108 PACR109 PACR110
 * PACR111 0x68 PACRO PACR112 PACR113 PACR114 PACR115 PACR116 PACR117 PACR118 PACR119
 * 0x6C PACRP PACR120 PACR121 PACR122 PACR123 PACR124 PACR125 PACR126 PACR127 The
 * register field descriptions for PACR A-D, which control peripheral slots 0-31,
 * are shown below. The following section, PACRPeripheral Access Control
 * Register , shows the register field descriptions for PACR E-P. All PACR registers are
 * identical. They are divided into two sections because they occupy two
 * non-contiguous address spaces.
 */
/*!
 * @name Constants and macros for entire AIPS_PACRA register
 */
/*@{*/
#define AIPS_RD_PACRA(base)      (AIPS_PACRA_REG(base))
#define AIPS_WR_PACRA(base, value) (AIPS_PACRA_REG(base) = (value))
#define AIPS_RMW_PACRA(base, mask, value) (AIPS_WR_PACRA(base, (AIPS_RD_PACRA(base) & ~(mask)) | (value)))
#define AIPS_SET_PACRA(base, value) (BME_OR32(&AIPS_PACRA_REG(base), (uint32_t)(value)))
#define AIPS_CLR_PACRA(base, value) (BME_AND32(&AIPS_PACRA_REG(base), (uint32_t)(~(value))))
#define AIPS_TOG_PACRA(base, value) (BME_XOR32(&AIPS_PACRA_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual AIPS_PACRA bitfields
 */

/*!
 * @name Register AIPS_PACRA, field TP7[0] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRA_TP7 field. */
#define AIPS_RD_PACRA_TP7(base) ((AIPS_PACRA_REG(base) & AIPS_PACRA_TP7_MASK) >> AIPS_PACRA_TP7_SHIFT)
#define AIPS_BRD_PACRA_TP7(base) (BME_UBFX32(&AIPS_PACRA_REG(base), AIPS_PACRA_TP7_SHIFT, AIPS_PACRA_TP7_WIDTH))

/*! @brief Set the TP7 field to a new value. */
#define AIPS_WR_PACRA_TP7(base, value) (AIPS_RMW_PACRA(base, AIPS_PACRA_TP7_MASK, AIPS_PACRA_TP7(value)))
#define AIPS_BWR_PACRA_TP7(base, value) (BME_BFI32(&AIPS_PACRA_REG(base), ((uint32_t)(value) << AIPS_PACRA_TP7_SHIFT), AIPS_PACRA_TP7_SHIFT, AIPS_PACRA_TP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRA, field WP7[1] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRA_WP7 field. */
#define AIPS_RD_PACRA_WP7(base) ((AIPS_PACRA_REG(base) & AIPS_PACRA_WP7_MASK) >> AIPS_PACRA_WP7_SHIFT)
#define AIPS_BRD_PACRA_WP7(base) (BME_UBFX32(&AIPS_PACRA_REG(base), AIPS_PACRA_WP7_SHIFT, AIPS_PACRA_WP7_WIDTH))

/*! @brief Set the WP7 field to a new value. */
#define AIPS_WR_PACRA_WP7(base, value) (AIPS_RMW_PACRA(base, AIPS_PACRA_WP7_MASK, AIPS_PACRA_WP7(value)))
#define AIPS_BWR_PACRA_WP7(base, value) (BME_BFI32(&AIPS_PACRA_REG(base), ((uint32_t)(value) << AIPS_PACRA_WP7_SHIFT), AIPS_PACRA_WP7_SHIFT, AIPS_PACRA_WP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRA, field SP7[2] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRA_SP7 field. */
#define AIPS_RD_PACRA_SP7(base) ((AIPS_PACRA_REG(base) & AIPS_PACRA_SP7_MASK) >> AIPS_PACRA_SP7_SHIFT)
#define AIPS_BRD_PACRA_SP7(base) (BME_UBFX32(&AIPS_PACRA_REG(base), AIPS_PACRA_SP7_SHIFT, AIPS_PACRA_SP7_WIDTH))

/*! @brief Set the SP7 field to a new value. */
#define AIPS_WR_PACRA_SP7(base, value) (AIPS_RMW_PACRA(base, AIPS_PACRA_SP7_MASK, AIPS_PACRA_SP7(value)))
#define AIPS_BWR_PACRA_SP7(base, value) (BME_BFI32(&AIPS_PACRA_REG(base), ((uint32_t)(value) << AIPS_PACRA_SP7_SHIFT), AIPS_PACRA_SP7_SHIFT, AIPS_PACRA_SP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRA, field TP6[4] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRA_TP6 field. */
#define AIPS_RD_PACRA_TP6(base) ((AIPS_PACRA_REG(base) & AIPS_PACRA_TP6_MASK) >> AIPS_PACRA_TP6_SHIFT)
#define AIPS_BRD_PACRA_TP6(base) (BME_UBFX32(&AIPS_PACRA_REG(base), AIPS_PACRA_TP6_SHIFT, AIPS_PACRA_TP6_WIDTH))

/*! @brief Set the TP6 field to a new value. */
#define AIPS_WR_PACRA_TP6(base, value) (AIPS_RMW_PACRA(base, AIPS_PACRA_TP6_MASK, AIPS_PACRA_TP6(value)))
#define AIPS_BWR_PACRA_TP6(base, value) (BME_BFI32(&AIPS_PACRA_REG(base), ((uint32_t)(value) << AIPS_PACRA_TP6_SHIFT), AIPS_PACRA_TP6_SHIFT, AIPS_PACRA_TP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRA, field WP6[5] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRA_WP6 field. */
#define AIPS_RD_PACRA_WP6(base) ((AIPS_PACRA_REG(base) & AIPS_PACRA_WP6_MASK) >> AIPS_PACRA_WP6_SHIFT)
#define AIPS_BRD_PACRA_WP6(base) (BME_UBFX32(&AIPS_PACRA_REG(base), AIPS_PACRA_WP6_SHIFT, AIPS_PACRA_WP6_WIDTH))

/*! @brief Set the WP6 field to a new value. */
#define AIPS_WR_PACRA_WP6(base, value) (AIPS_RMW_PACRA(base, AIPS_PACRA_WP6_MASK, AIPS_PACRA_WP6(value)))
#define AIPS_BWR_PACRA_WP6(base, value) (BME_BFI32(&AIPS_PACRA_REG(base), ((uint32_t)(value) << AIPS_PACRA_WP6_SHIFT), AIPS_PACRA_WP6_SHIFT, AIPS_PACRA_WP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRA, field SP6[6] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRA_SP6 field. */
#define AIPS_RD_PACRA_SP6(base) ((AIPS_PACRA_REG(base) & AIPS_PACRA_SP6_MASK) >> AIPS_PACRA_SP6_SHIFT)
#define AIPS_BRD_PACRA_SP6(base) (BME_UBFX32(&AIPS_PACRA_REG(base), AIPS_PACRA_SP6_SHIFT, AIPS_PACRA_SP6_WIDTH))

/*! @brief Set the SP6 field to a new value. */
#define AIPS_WR_PACRA_SP6(base, value) (AIPS_RMW_PACRA(base, AIPS_PACRA_SP6_MASK, AIPS_PACRA_SP6(value)))
#define AIPS_BWR_PACRA_SP6(base, value) (BME_BFI32(&AIPS_PACRA_REG(base), ((uint32_t)(value) << AIPS_PACRA_SP6_SHIFT), AIPS_PACRA_SP6_SHIFT, AIPS_PACRA_SP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRA, field TP5[8] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRA_TP5 field. */
#define AIPS_RD_PACRA_TP5(base) ((AIPS_PACRA_REG(base) & AIPS_PACRA_TP5_MASK) >> AIPS_PACRA_TP5_SHIFT)
#define AIPS_BRD_PACRA_TP5(base) (BME_UBFX32(&AIPS_PACRA_REG(base), AIPS_PACRA_TP5_SHIFT, AIPS_PACRA_TP5_WIDTH))

/*! @brief Set the TP5 field to a new value. */
#define AIPS_WR_PACRA_TP5(base, value) (AIPS_RMW_PACRA(base, AIPS_PACRA_TP5_MASK, AIPS_PACRA_TP5(value)))
#define AIPS_BWR_PACRA_TP5(base, value) (BME_BFI32(&AIPS_PACRA_REG(base), ((uint32_t)(value) << AIPS_PACRA_TP5_SHIFT), AIPS_PACRA_TP5_SHIFT, AIPS_PACRA_TP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRA, field WP5[9] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRA_WP5 field. */
#define AIPS_RD_PACRA_WP5(base) ((AIPS_PACRA_REG(base) & AIPS_PACRA_WP5_MASK) >> AIPS_PACRA_WP5_SHIFT)
#define AIPS_BRD_PACRA_WP5(base) (BME_UBFX32(&AIPS_PACRA_REG(base), AIPS_PACRA_WP5_SHIFT, AIPS_PACRA_WP5_WIDTH))

/*! @brief Set the WP5 field to a new value. */
#define AIPS_WR_PACRA_WP5(base, value) (AIPS_RMW_PACRA(base, AIPS_PACRA_WP5_MASK, AIPS_PACRA_WP5(value)))
#define AIPS_BWR_PACRA_WP5(base, value) (BME_BFI32(&AIPS_PACRA_REG(base), ((uint32_t)(value) << AIPS_PACRA_WP5_SHIFT), AIPS_PACRA_WP5_SHIFT, AIPS_PACRA_WP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRA, field SP5[10] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRA_SP5 field. */
#define AIPS_RD_PACRA_SP5(base) ((AIPS_PACRA_REG(base) & AIPS_PACRA_SP5_MASK) >> AIPS_PACRA_SP5_SHIFT)
#define AIPS_BRD_PACRA_SP5(base) (BME_UBFX32(&AIPS_PACRA_REG(base), AIPS_PACRA_SP5_SHIFT, AIPS_PACRA_SP5_WIDTH))

/*! @brief Set the SP5 field to a new value. */
#define AIPS_WR_PACRA_SP5(base, value) (AIPS_RMW_PACRA(base, AIPS_PACRA_SP5_MASK, AIPS_PACRA_SP5(value)))
#define AIPS_BWR_PACRA_SP5(base, value) (BME_BFI32(&AIPS_PACRA_REG(base), ((uint32_t)(value) << AIPS_PACRA_SP5_SHIFT), AIPS_PACRA_SP5_SHIFT, AIPS_PACRA_SP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRA, field TP4[12] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRA_TP4 field. */
#define AIPS_RD_PACRA_TP4(base) ((AIPS_PACRA_REG(base) & AIPS_PACRA_TP4_MASK) >> AIPS_PACRA_TP4_SHIFT)
#define AIPS_BRD_PACRA_TP4(base) (BME_UBFX32(&AIPS_PACRA_REG(base), AIPS_PACRA_TP4_SHIFT, AIPS_PACRA_TP4_WIDTH))

/*! @brief Set the TP4 field to a new value. */
#define AIPS_WR_PACRA_TP4(base, value) (AIPS_RMW_PACRA(base, AIPS_PACRA_TP4_MASK, AIPS_PACRA_TP4(value)))
#define AIPS_BWR_PACRA_TP4(base, value) (BME_BFI32(&AIPS_PACRA_REG(base), ((uint32_t)(value) << AIPS_PACRA_TP4_SHIFT), AIPS_PACRA_TP4_SHIFT, AIPS_PACRA_TP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRA, field WP4[13] (RW)
 *
 * Determines whether the peripheral allows write accesss. When this bit is set
 * and a write access is attempted, access terminates with an error response and
 * no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRA_WP4 field. */
#define AIPS_RD_PACRA_WP4(base) ((AIPS_PACRA_REG(base) & AIPS_PACRA_WP4_MASK) >> AIPS_PACRA_WP4_SHIFT)
#define AIPS_BRD_PACRA_WP4(base) (BME_UBFX32(&AIPS_PACRA_REG(base), AIPS_PACRA_WP4_SHIFT, AIPS_PACRA_WP4_WIDTH))

/*! @brief Set the WP4 field to a new value. */
#define AIPS_WR_PACRA_WP4(base, value) (AIPS_RMW_PACRA(base, AIPS_PACRA_WP4_MASK, AIPS_PACRA_WP4(value)))
#define AIPS_BWR_PACRA_WP4(base, value) (BME_BFI32(&AIPS_PACRA_REG(base), ((uint32_t)(value) << AIPS_PACRA_WP4_SHIFT), AIPS_PACRA_WP4_SHIFT, AIPS_PACRA_WP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRA, field SP4[14] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRA_SP4 field. */
#define AIPS_RD_PACRA_SP4(base) ((AIPS_PACRA_REG(base) & AIPS_PACRA_SP4_MASK) >> AIPS_PACRA_SP4_SHIFT)
#define AIPS_BRD_PACRA_SP4(base) (BME_UBFX32(&AIPS_PACRA_REG(base), AIPS_PACRA_SP4_SHIFT, AIPS_PACRA_SP4_WIDTH))

/*! @brief Set the SP4 field to a new value. */
#define AIPS_WR_PACRA_SP4(base, value) (AIPS_RMW_PACRA(base, AIPS_PACRA_SP4_MASK, AIPS_PACRA_SP4(value)))
#define AIPS_BWR_PACRA_SP4(base, value) (BME_BFI32(&AIPS_PACRA_REG(base), ((uint32_t)(value) << AIPS_PACRA_SP4_SHIFT), AIPS_PACRA_SP4_SHIFT, AIPS_PACRA_SP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRA, field TP3[16] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRA_TP3 field. */
#define AIPS_RD_PACRA_TP3(base) ((AIPS_PACRA_REG(base) & AIPS_PACRA_TP3_MASK) >> AIPS_PACRA_TP3_SHIFT)
#define AIPS_BRD_PACRA_TP3(base) (BME_UBFX32(&AIPS_PACRA_REG(base), AIPS_PACRA_TP3_SHIFT, AIPS_PACRA_TP3_WIDTH))

/*! @brief Set the TP3 field to a new value. */
#define AIPS_WR_PACRA_TP3(base, value) (AIPS_RMW_PACRA(base, AIPS_PACRA_TP3_MASK, AIPS_PACRA_TP3(value)))
#define AIPS_BWR_PACRA_TP3(base, value) (BME_BFI32(&AIPS_PACRA_REG(base), ((uint32_t)(value) << AIPS_PACRA_TP3_SHIFT), AIPS_PACRA_TP3_SHIFT, AIPS_PACRA_TP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRA, field WP3[17] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRA_WP3 field. */
#define AIPS_RD_PACRA_WP3(base) ((AIPS_PACRA_REG(base) & AIPS_PACRA_WP3_MASK) >> AIPS_PACRA_WP3_SHIFT)
#define AIPS_BRD_PACRA_WP3(base) (BME_UBFX32(&AIPS_PACRA_REG(base), AIPS_PACRA_WP3_SHIFT, AIPS_PACRA_WP3_WIDTH))

/*! @brief Set the WP3 field to a new value. */
#define AIPS_WR_PACRA_WP3(base, value) (AIPS_RMW_PACRA(base, AIPS_PACRA_WP3_MASK, AIPS_PACRA_WP3(value)))
#define AIPS_BWR_PACRA_WP3(base, value) (BME_BFI32(&AIPS_PACRA_REG(base), ((uint32_t)(value) << AIPS_PACRA_WP3_SHIFT), AIPS_PACRA_WP3_SHIFT, AIPS_PACRA_WP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRA, field SP3[18] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRA_SP3 field. */
#define AIPS_RD_PACRA_SP3(base) ((AIPS_PACRA_REG(base) & AIPS_PACRA_SP3_MASK) >> AIPS_PACRA_SP3_SHIFT)
#define AIPS_BRD_PACRA_SP3(base) (BME_UBFX32(&AIPS_PACRA_REG(base), AIPS_PACRA_SP3_SHIFT, AIPS_PACRA_SP3_WIDTH))

/*! @brief Set the SP3 field to a new value. */
#define AIPS_WR_PACRA_SP3(base, value) (AIPS_RMW_PACRA(base, AIPS_PACRA_SP3_MASK, AIPS_PACRA_SP3(value)))
#define AIPS_BWR_PACRA_SP3(base, value) (BME_BFI32(&AIPS_PACRA_REG(base), ((uint32_t)(value) << AIPS_PACRA_SP3_SHIFT), AIPS_PACRA_SP3_SHIFT, AIPS_PACRA_SP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRA, field TP2[20] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRA_TP2 field. */
#define AIPS_RD_PACRA_TP2(base) ((AIPS_PACRA_REG(base) & AIPS_PACRA_TP2_MASK) >> AIPS_PACRA_TP2_SHIFT)
#define AIPS_BRD_PACRA_TP2(base) (BME_UBFX32(&AIPS_PACRA_REG(base), AIPS_PACRA_TP2_SHIFT, AIPS_PACRA_TP2_WIDTH))

/*! @brief Set the TP2 field to a new value. */
#define AIPS_WR_PACRA_TP2(base, value) (AIPS_RMW_PACRA(base, AIPS_PACRA_TP2_MASK, AIPS_PACRA_TP2(value)))
#define AIPS_BWR_PACRA_TP2(base, value) (BME_BFI32(&AIPS_PACRA_REG(base), ((uint32_t)(value) << AIPS_PACRA_TP2_SHIFT), AIPS_PACRA_TP2_SHIFT, AIPS_PACRA_TP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRA, field WP2[21] (RW)
 *
 * Determines whether the peripheral allows write accesss. When this bit is set
 * and a write access is attempted, access terminates with an error response and
 * no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRA_WP2 field. */
#define AIPS_RD_PACRA_WP2(base) ((AIPS_PACRA_REG(base) & AIPS_PACRA_WP2_MASK) >> AIPS_PACRA_WP2_SHIFT)
#define AIPS_BRD_PACRA_WP2(base) (BME_UBFX32(&AIPS_PACRA_REG(base), AIPS_PACRA_WP2_SHIFT, AIPS_PACRA_WP2_WIDTH))

/*! @brief Set the WP2 field to a new value. */
#define AIPS_WR_PACRA_WP2(base, value) (AIPS_RMW_PACRA(base, AIPS_PACRA_WP2_MASK, AIPS_PACRA_WP2(value)))
#define AIPS_BWR_PACRA_WP2(base, value) (BME_BFI32(&AIPS_PACRA_REG(base), ((uint32_t)(value) << AIPS_PACRA_WP2_SHIFT), AIPS_PACRA_WP2_SHIFT, AIPS_PACRA_WP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRA, field SP2[22] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRA_SP2 field. */
#define AIPS_RD_PACRA_SP2(base) ((AIPS_PACRA_REG(base) & AIPS_PACRA_SP2_MASK) >> AIPS_PACRA_SP2_SHIFT)
#define AIPS_BRD_PACRA_SP2(base) (BME_UBFX32(&AIPS_PACRA_REG(base), AIPS_PACRA_SP2_SHIFT, AIPS_PACRA_SP2_WIDTH))

/*! @brief Set the SP2 field to a new value. */
#define AIPS_WR_PACRA_SP2(base, value) (AIPS_RMW_PACRA(base, AIPS_PACRA_SP2_MASK, AIPS_PACRA_SP2(value)))
#define AIPS_BWR_PACRA_SP2(base, value) (BME_BFI32(&AIPS_PACRA_REG(base), ((uint32_t)(value) << AIPS_PACRA_SP2_SHIFT), AIPS_PACRA_SP2_SHIFT, AIPS_PACRA_SP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRA, field TP1[24] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRA_TP1 field. */
#define AIPS_RD_PACRA_TP1(base) ((AIPS_PACRA_REG(base) & AIPS_PACRA_TP1_MASK) >> AIPS_PACRA_TP1_SHIFT)
#define AIPS_BRD_PACRA_TP1(base) (BME_UBFX32(&AIPS_PACRA_REG(base), AIPS_PACRA_TP1_SHIFT, AIPS_PACRA_TP1_WIDTH))

/*! @brief Set the TP1 field to a new value. */
#define AIPS_WR_PACRA_TP1(base, value) (AIPS_RMW_PACRA(base, AIPS_PACRA_TP1_MASK, AIPS_PACRA_TP1(value)))
#define AIPS_BWR_PACRA_TP1(base, value) (BME_BFI32(&AIPS_PACRA_REG(base), ((uint32_t)(value) << AIPS_PACRA_TP1_SHIFT), AIPS_PACRA_TP1_SHIFT, AIPS_PACRA_TP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRA, field WP1[25] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRA_WP1 field. */
#define AIPS_RD_PACRA_WP1(base) ((AIPS_PACRA_REG(base) & AIPS_PACRA_WP1_MASK) >> AIPS_PACRA_WP1_SHIFT)
#define AIPS_BRD_PACRA_WP1(base) (BME_UBFX32(&AIPS_PACRA_REG(base), AIPS_PACRA_WP1_SHIFT, AIPS_PACRA_WP1_WIDTH))

/*! @brief Set the WP1 field to a new value. */
#define AIPS_WR_PACRA_WP1(base, value) (AIPS_RMW_PACRA(base, AIPS_PACRA_WP1_MASK, AIPS_PACRA_WP1(value)))
#define AIPS_BWR_PACRA_WP1(base, value) (BME_BFI32(&AIPS_PACRA_REG(base), ((uint32_t)(value) << AIPS_PACRA_WP1_SHIFT), AIPS_PACRA_WP1_SHIFT, AIPS_PACRA_WP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRA, field SP1[26] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRA_SP1 field. */
#define AIPS_RD_PACRA_SP1(base) ((AIPS_PACRA_REG(base) & AIPS_PACRA_SP1_MASK) >> AIPS_PACRA_SP1_SHIFT)
#define AIPS_BRD_PACRA_SP1(base) (BME_UBFX32(&AIPS_PACRA_REG(base), AIPS_PACRA_SP1_SHIFT, AIPS_PACRA_SP1_WIDTH))

/*! @brief Set the SP1 field to a new value. */
#define AIPS_WR_PACRA_SP1(base, value) (AIPS_RMW_PACRA(base, AIPS_PACRA_SP1_MASK, AIPS_PACRA_SP1(value)))
#define AIPS_BWR_PACRA_SP1(base, value) (BME_BFI32(&AIPS_PACRA_REG(base), ((uint32_t)(value) << AIPS_PACRA_SP1_SHIFT), AIPS_PACRA_SP1_SHIFT, AIPS_PACRA_SP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRA, field TP0[28] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRA_TP0 field. */
#define AIPS_RD_PACRA_TP0(base) ((AIPS_PACRA_REG(base) & AIPS_PACRA_TP0_MASK) >> AIPS_PACRA_TP0_SHIFT)
#define AIPS_BRD_PACRA_TP0(base) (BME_UBFX32(&AIPS_PACRA_REG(base), AIPS_PACRA_TP0_SHIFT, AIPS_PACRA_TP0_WIDTH))

/*! @brief Set the TP0 field to a new value. */
#define AIPS_WR_PACRA_TP0(base, value) (AIPS_RMW_PACRA(base, AIPS_PACRA_TP0_MASK, AIPS_PACRA_TP0(value)))
#define AIPS_BWR_PACRA_TP0(base, value) (BME_BFI32(&AIPS_PACRA_REG(base), ((uint32_t)(value) << AIPS_PACRA_TP0_SHIFT), AIPS_PACRA_TP0_SHIFT, AIPS_PACRA_TP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRA, field WP0[29] (RW)
 *
 * Determines whether the peripheral allows write accesss. When this bit is set
 * and a write access is attempted, access terminates with an error response and
 * no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRA_WP0 field. */
#define AIPS_RD_PACRA_WP0(base) ((AIPS_PACRA_REG(base) & AIPS_PACRA_WP0_MASK) >> AIPS_PACRA_WP0_SHIFT)
#define AIPS_BRD_PACRA_WP0(base) (BME_UBFX32(&AIPS_PACRA_REG(base), AIPS_PACRA_WP0_SHIFT, AIPS_PACRA_WP0_WIDTH))

/*! @brief Set the WP0 field to a new value. */
#define AIPS_WR_PACRA_WP0(base, value) (AIPS_RMW_PACRA(base, AIPS_PACRA_WP0_MASK, AIPS_PACRA_WP0(value)))
#define AIPS_BWR_PACRA_WP0(base, value) (BME_BFI32(&AIPS_PACRA_REG(base), ((uint32_t)(value) << AIPS_PACRA_WP0_SHIFT), AIPS_PACRA_WP0_SHIFT, AIPS_PACRA_WP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRA, field SP0[30] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRA_SP0 field. */
#define AIPS_RD_PACRA_SP0(base) ((AIPS_PACRA_REG(base) & AIPS_PACRA_SP0_MASK) >> AIPS_PACRA_SP0_SHIFT)
#define AIPS_BRD_PACRA_SP0(base) (BME_UBFX32(&AIPS_PACRA_REG(base), AIPS_PACRA_SP0_SHIFT, AIPS_PACRA_SP0_WIDTH))

/*! @brief Set the SP0 field to a new value. */
#define AIPS_WR_PACRA_SP0(base, value) (AIPS_RMW_PACRA(base, AIPS_PACRA_SP0_MASK, AIPS_PACRA_SP0(value)))
#define AIPS_BWR_PACRA_SP0(base, value) (BME_BFI32(&AIPS_PACRA_REG(base), ((uint32_t)(value) << AIPS_PACRA_SP0_SHIFT), AIPS_PACRA_SP0_SHIFT, AIPS_PACRA_SP0_WIDTH))
/*@}*/

/*******************************************************************************
 * AIPS_PACRB - Peripheral Access Control Register
 ******************************************************************************/

/*!
 * @brief AIPS_PACRB - Peripheral Access Control Register (RW)
 *
 * Reset value: 0x44004404U
 *
 * Each PACR register consists of eight 4-bit PACR fields. Each PACR field
 * defines the access levels for a particular peripheral. The mapping between a
 * peripheral and its PACR field is shown in the table below. The peripheral assignment
 * to each PACR is defined by the memory map slot that the peripheral is
 * assigned to. See this chip's memory map for the assignment of a particular
 * peripheral. The following table shows the location of each peripheral slot's PACR field
 * in the PACR registers. Offset Register [31:28] [27:24] [23:20] [19:16] [15:12]
 * [11:8] [7:4] [3:0] 0x20 PACRA PACR0 PACR1 PACR2 PACR3 PACR4 PACR5 PACR6 PACR7
 * 0x24 PACRB PACR8 PACR9 PACR10 PACR11 PACR12 PACR13 PACR14 PACR15 0x28 PACRC
 * PACR16 PACR17 PACR18 PACR19 PACR20 PACR21 PACR22 PACR23 0x2C PACRD PACR24
 * PACR25 PACR26 PACR27 PACR28 PACR29 PACR30 PACR31 0x30 Reserved 0x34 Reserved 0x38
 * Reserved 0x3C Reserved 0x40 PACRE PACR32 PACR33 PACR34 PACR35 PACR36 PACR37
 * PACR38 PACR39 0x44 PACRF PACR40 PACR41 PACR42 PACR43 PACR44 PACR45 PACR46 PACR47
 * 0x48 PACRG PACR48 PACR49 PACR50 PACR51 PACR52 PACR53 PACR54 PACR55 0x4C PACRH
 * PACR56 PACR57 PACR58 PACR59 PACR60 PACR61 PACR62 PACR63 0x50 PACRI PACR64
 * PACR65 PACR66 PACR67 PACR68 PACR69 PACR70 PACR71 0x54 PACRJ PACR72 PACR73 PACR74
 * PACR75 PACR76 PACR77 PACR78 PACR79 0x58 PACRK PACR80 PACR81 PACR82 PACR83
 * PACR84 PACR85 PACR86 PACR87 0x5C PACRL PACR88 PACR89 PACR90 PACR91 PACR92 PACR93
 * PACR94 PACR95 0x60 PACRM PACR96 PACR97 PACR98 PACR99 PACR100 PACR101 PACR102
 * PACR103 0x64 PACRN PACR104 PACR105 PACR106 PACR107 PACR108 PACR109 PACR110
 * PACR111 0x68 PACRO PACR112 PACR113 PACR114 PACR115 PACR116 PACR117 PACR118 PACR119
 * 0x6C PACRP PACR120 PACR121 PACR122 PACR123 PACR124 PACR125 PACR126 PACR127 The
 * register field descriptions for PACR A-D, which control peripheral slots 0-31,
 * are shown below. The following section, PACRPeripheral Access Control
 * Register , shows the register field descriptions for PACR E-P. All PACR registers are
 * identical. They are divided into two sections because they occupy two
 * non-contiguous address spaces.
 */
/*!
 * @name Constants and macros for entire AIPS_PACRB register
 */
/*@{*/
#define AIPS_RD_PACRB(base)      (AIPS_PACRB_REG(base))
#define AIPS_WR_PACRB(base, value) (AIPS_PACRB_REG(base) = (value))
#define AIPS_RMW_PACRB(base, mask, value) (AIPS_WR_PACRB(base, (AIPS_RD_PACRB(base) & ~(mask)) | (value)))
#define AIPS_SET_PACRB(base, value) (BME_OR32(&AIPS_PACRB_REG(base), (uint32_t)(value)))
#define AIPS_CLR_PACRB(base, value) (BME_AND32(&AIPS_PACRB_REG(base), (uint32_t)(~(value))))
#define AIPS_TOG_PACRB(base, value) (BME_XOR32(&AIPS_PACRB_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual AIPS_PACRB bitfields
 */

/*!
 * @name Register AIPS_PACRB, field TP7[0] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRB_TP7 field. */
#define AIPS_RD_PACRB_TP7(base) ((AIPS_PACRB_REG(base) & AIPS_PACRB_TP7_MASK) >> AIPS_PACRB_TP7_SHIFT)
#define AIPS_BRD_PACRB_TP7(base) (BME_UBFX32(&AIPS_PACRB_REG(base), AIPS_PACRB_TP7_SHIFT, AIPS_PACRB_TP7_WIDTH))

/*! @brief Set the TP7 field to a new value. */
#define AIPS_WR_PACRB_TP7(base, value) (AIPS_RMW_PACRB(base, AIPS_PACRB_TP7_MASK, AIPS_PACRB_TP7(value)))
#define AIPS_BWR_PACRB_TP7(base, value) (BME_BFI32(&AIPS_PACRB_REG(base), ((uint32_t)(value) << AIPS_PACRB_TP7_SHIFT), AIPS_PACRB_TP7_SHIFT, AIPS_PACRB_TP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRB, field WP7[1] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRB_WP7 field. */
#define AIPS_RD_PACRB_WP7(base) ((AIPS_PACRB_REG(base) & AIPS_PACRB_WP7_MASK) >> AIPS_PACRB_WP7_SHIFT)
#define AIPS_BRD_PACRB_WP7(base) (BME_UBFX32(&AIPS_PACRB_REG(base), AIPS_PACRB_WP7_SHIFT, AIPS_PACRB_WP7_WIDTH))

/*! @brief Set the WP7 field to a new value. */
#define AIPS_WR_PACRB_WP7(base, value) (AIPS_RMW_PACRB(base, AIPS_PACRB_WP7_MASK, AIPS_PACRB_WP7(value)))
#define AIPS_BWR_PACRB_WP7(base, value) (BME_BFI32(&AIPS_PACRB_REG(base), ((uint32_t)(value) << AIPS_PACRB_WP7_SHIFT), AIPS_PACRB_WP7_SHIFT, AIPS_PACRB_WP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRB, field SP7[2] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRB_SP7 field. */
#define AIPS_RD_PACRB_SP7(base) ((AIPS_PACRB_REG(base) & AIPS_PACRB_SP7_MASK) >> AIPS_PACRB_SP7_SHIFT)
#define AIPS_BRD_PACRB_SP7(base) (BME_UBFX32(&AIPS_PACRB_REG(base), AIPS_PACRB_SP7_SHIFT, AIPS_PACRB_SP7_WIDTH))

/*! @brief Set the SP7 field to a new value. */
#define AIPS_WR_PACRB_SP7(base, value) (AIPS_RMW_PACRB(base, AIPS_PACRB_SP7_MASK, AIPS_PACRB_SP7(value)))
#define AIPS_BWR_PACRB_SP7(base, value) (BME_BFI32(&AIPS_PACRB_REG(base), ((uint32_t)(value) << AIPS_PACRB_SP7_SHIFT), AIPS_PACRB_SP7_SHIFT, AIPS_PACRB_SP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRB, field TP6[4] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRB_TP6 field. */
#define AIPS_RD_PACRB_TP6(base) ((AIPS_PACRB_REG(base) & AIPS_PACRB_TP6_MASK) >> AIPS_PACRB_TP6_SHIFT)
#define AIPS_BRD_PACRB_TP6(base) (BME_UBFX32(&AIPS_PACRB_REG(base), AIPS_PACRB_TP6_SHIFT, AIPS_PACRB_TP6_WIDTH))

/*! @brief Set the TP6 field to a new value. */
#define AIPS_WR_PACRB_TP6(base, value) (AIPS_RMW_PACRB(base, AIPS_PACRB_TP6_MASK, AIPS_PACRB_TP6(value)))
#define AIPS_BWR_PACRB_TP6(base, value) (BME_BFI32(&AIPS_PACRB_REG(base), ((uint32_t)(value) << AIPS_PACRB_TP6_SHIFT), AIPS_PACRB_TP6_SHIFT, AIPS_PACRB_TP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRB, field WP6[5] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRB_WP6 field. */
#define AIPS_RD_PACRB_WP6(base) ((AIPS_PACRB_REG(base) & AIPS_PACRB_WP6_MASK) >> AIPS_PACRB_WP6_SHIFT)
#define AIPS_BRD_PACRB_WP6(base) (BME_UBFX32(&AIPS_PACRB_REG(base), AIPS_PACRB_WP6_SHIFT, AIPS_PACRB_WP6_WIDTH))

/*! @brief Set the WP6 field to a new value. */
#define AIPS_WR_PACRB_WP6(base, value) (AIPS_RMW_PACRB(base, AIPS_PACRB_WP6_MASK, AIPS_PACRB_WP6(value)))
#define AIPS_BWR_PACRB_WP6(base, value) (BME_BFI32(&AIPS_PACRB_REG(base), ((uint32_t)(value) << AIPS_PACRB_WP6_SHIFT), AIPS_PACRB_WP6_SHIFT, AIPS_PACRB_WP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRB, field SP6[6] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRB_SP6 field. */
#define AIPS_RD_PACRB_SP6(base) ((AIPS_PACRB_REG(base) & AIPS_PACRB_SP6_MASK) >> AIPS_PACRB_SP6_SHIFT)
#define AIPS_BRD_PACRB_SP6(base) (BME_UBFX32(&AIPS_PACRB_REG(base), AIPS_PACRB_SP6_SHIFT, AIPS_PACRB_SP6_WIDTH))

/*! @brief Set the SP6 field to a new value. */
#define AIPS_WR_PACRB_SP6(base, value) (AIPS_RMW_PACRB(base, AIPS_PACRB_SP6_MASK, AIPS_PACRB_SP6(value)))
#define AIPS_BWR_PACRB_SP6(base, value) (BME_BFI32(&AIPS_PACRB_REG(base), ((uint32_t)(value) << AIPS_PACRB_SP6_SHIFT), AIPS_PACRB_SP6_SHIFT, AIPS_PACRB_SP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRB, field TP5[8] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRB_TP5 field. */
#define AIPS_RD_PACRB_TP5(base) ((AIPS_PACRB_REG(base) & AIPS_PACRB_TP5_MASK) >> AIPS_PACRB_TP5_SHIFT)
#define AIPS_BRD_PACRB_TP5(base) (BME_UBFX32(&AIPS_PACRB_REG(base), AIPS_PACRB_TP5_SHIFT, AIPS_PACRB_TP5_WIDTH))

/*! @brief Set the TP5 field to a new value. */
#define AIPS_WR_PACRB_TP5(base, value) (AIPS_RMW_PACRB(base, AIPS_PACRB_TP5_MASK, AIPS_PACRB_TP5(value)))
#define AIPS_BWR_PACRB_TP5(base, value) (BME_BFI32(&AIPS_PACRB_REG(base), ((uint32_t)(value) << AIPS_PACRB_TP5_SHIFT), AIPS_PACRB_TP5_SHIFT, AIPS_PACRB_TP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRB, field WP5[9] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRB_WP5 field. */
#define AIPS_RD_PACRB_WP5(base) ((AIPS_PACRB_REG(base) & AIPS_PACRB_WP5_MASK) >> AIPS_PACRB_WP5_SHIFT)
#define AIPS_BRD_PACRB_WP5(base) (BME_UBFX32(&AIPS_PACRB_REG(base), AIPS_PACRB_WP5_SHIFT, AIPS_PACRB_WP5_WIDTH))

/*! @brief Set the WP5 field to a new value. */
#define AIPS_WR_PACRB_WP5(base, value) (AIPS_RMW_PACRB(base, AIPS_PACRB_WP5_MASK, AIPS_PACRB_WP5(value)))
#define AIPS_BWR_PACRB_WP5(base, value) (BME_BFI32(&AIPS_PACRB_REG(base), ((uint32_t)(value) << AIPS_PACRB_WP5_SHIFT), AIPS_PACRB_WP5_SHIFT, AIPS_PACRB_WP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRB, field SP5[10] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRB_SP5 field. */
#define AIPS_RD_PACRB_SP5(base) ((AIPS_PACRB_REG(base) & AIPS_PACRB_SP5_MASK) >> AIPS_PACRB_SP5_SHIFT)
#define AIPS_BRD_PACRB_SP5(base) (BME_UBFX32(&AIPS_PACRB_REG(base), AIPS_PACRB_SP5_SHIFT, AIPS_PACRB_SP5_WIDTH))

/*! @brief Set the SP5 field to a new value. */
#define AIPS_WR_PACRB_SP5(base, value) (AIPS_RMW_PACRB(base, AIPS_PACRB_SP5_MASK, AIPS_PACRB_SP5(value)))
#define AIPS_BWR_PACRB_SP5(base, value) (BME_BFI32(&AIPS_PACRB_REG(base), ((uint32_t)(value) << AIPS_PACRB_SP5_SHIFT), AIPS_PACRB_SP5_SHIFT, AIPS_PACRB_SP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRB, field TP4[12] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRB_TP4 field. */
#define AIPS_RD_PACRB_TP4(base) ((AIPS_PACRB_REG(base) & AIPS_PACRB_TP4_MASK) >> AIPS_PACRB_TP4_SHIFT)
#define AIPS_BRD_PACRB_TP4(base) (BME_UBFX32(&AIPS_PACRB_REG(base), AIPS_PACRB_TP4_SHIFT, AIPS_PACRB_TP4_WIDTH))

/*! @brief Set the TP4 field to a new value. */
#define AIPS_WR_PACRB_TP4(base, value) (AIPS_RMW_PACRB(base, AIPS_PACRB_TP4_MASK, AIPS_PACRB_TP4(value)))
#define AIPS_BWR_PACRB_TP4(base, value) (BME_BFI32(&AIPS_PACRB_REG(base), ((uint32_t)(value) << AIPS_PACRB_TP4_SHIFT), AIPS_PACRB_TP4_SHIFT, AIPS_PACRB_TP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRB, field WP4[13] (RW)
 *
 * Determines whether the peripheral allows write accesss. When this bit is set
 * and a write access is attempted, access terminates with an error response and
 * no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRB_WP4 field. */
#define AIPS_RD_PACRB_WP4(base) ((AIPS_PACRB_REG(base) & AIPS_PACRB_WP4_MASK) >> AIPS_PACRB_WP4_SHIFT)
#define AIPS_BRD_PACRB_WP4(base) (BME_UBFX32(&AIPS_PACRB_REG(base), AIPS_PACRB_WP4_SHIFT, AIPS_PACRB_WP4_WIDTH))

/*! @brief Set the WP4 field to a new value. */
#define AIPS_WR_PACRB_WP4(base, value) (AIPS_RMW_PACRB(base, AIPS_PACRB_WP4_MASK, AIPS_PACRB_WP4(value)))
#define AIPS_BWR_PACRB_WP4(base, value) (BME_BFI32(&AIPS_PACRB_REG(base), ((uint32_t)(value) << AIPS_PACRB_WP4_SHIFT), AIPS_PACRB_WP4_SHIFT, AIPS_PACRB_WP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRB, field SP4[14] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRB_SP4 field. */
#define AIPS_RD_PACRB_SP4(base) ((AIPS_PACRB_REG(base) & AIPS_PACRB_SP4_MASK) >> AIPS_PACRB_SP4_SHIFT)
#define AIPS_BRD_PACRB_SP4(base) (BME_UBFX32(&AIPS_PACRB_REG(base), AIPS_PACRB_SP4_SHIFT, AIPS_PACRB_SP4_WIDTH))

/*! @brief Set the SP4 field to a new value. */
#define AIPS_WR_PACRB_SP4(base, value) (AIPS_RMW_PACRB(base, AIPS_PACRB_SP4_MASK, AIPS_PACRB_SP4(value)))
#define AIPS_BWR_PACRB_SP4(base, value) (BME_BFI32(&AIPS_PACRB_REG(base), ((uint32_t)(value) << AIPS_PACRB_SP4_SHIFT), AIPS_PACRB_SP4_SHIFT, AIPS_PACRB_SP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRB, field TP3[16] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRB_TP3 field. */
#define AIPS_RD_PACRB_TP3(base) ((AIPS_PACRB_REG(base) & AIPS_PACRB_TP3_MASK) >> AIPS_PACRB_TP3_SHIFT)
#define AIPS_BRD_PACRB_TP3(base) (BME_UBFX32(&AIPS_PACRB_REG(base), AIPS_PACRB_TP3_SHIFT, AIPS_PACRB_TP3_WIDTH))

/*! @brief Set the TP3 field to a new value. */
#define AIPS_WR_PACRB_TP3(base, value) (AIPS_RMW_PACRB(base, AIPS_PACRB_TP3_MASK, AIPS_PACRB_TP3(value)))
#define AIPS_BWR_PACRB_TP3(base, value) (BME_BFI32(&AIPS_PACRB_REG(base), ((uint32_t)(value) << AIPS_PACRB_TP3_SHIFT), AIPS_PACRB_TP3_SHIFT, AIPS_PACRB_TP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRB, field WP3[17] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRB_WP3 field. */
#define AIPS_RD_PACRB_WP3(base) ((AIPS_PACRB_REG(base) & AIPS_PACRB_WP3_MASK) >> AIPS_PACRB_WP3_SHIFT)
#define AIPS_BRD_PACRB_WP3(base) (BME_UBFX32(&AIPS_PACRB_REG(base), AIPS_PACRB_WP3_SHIFT, AIPS_PACRB_WP3_WIDTH))

/*! @brief Set the WP3 field to a new value. */
#define AIPS_WR_PACRB_WP3(base, value) (AIPS_RMW_PACRB(base, AIPS_PACRB_WP3_MASK, AIPS_PACRB_WP3(value)))
#define AIPS_BWR_PACRB_WP3(base, value) (BME_BFI32(&AIPS_PACRB_REG(base), ((uint32_t)(value) << AIPS_PACRB_WP3_SHIFT), AIPS_PACRB_WP3_SHIFT, AIPS_PACRB_WP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRB, field SP3[18] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRB_SP3 field. */
#define AIPS_RD_PACRB_SP3(base) ((AIPS_PACRB_REG(base) & AIPS_PACRB_SP3_MASK) >> AIPS_PACRB_SP3_SHIFT)
#define AIPS_BRD_PACRB_SP3(base) (BME_UBFX32(&AIPS_PACRB_REG(base), AIPS_PACRB_SP3_SHIFT, AIPS_PACRB_SP3_WIDTH))

/*! @brief Set the SP3 field to a new value. */
#define AIPS_WR_PACRB_SP3(base, value) (AIPS_RMW_PACRB(base, AIPS_PACRB_SP3_MASK, AIPS_PACRB_SP3(value)))
#define AIPS_BWR_PACRB_SP3(base, value) (BME_BFI32(&AIPS_PACRB_REG(base), ((uint32_t)(value) << AIPS_PACRB_SP3_SHIFT), AIPS_PACRB_SP3_SHIFT, AIPS_PACRB_SP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRB, field TP2[20] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRB_TP2 field. */
#define AIPS_RD_PACRB_TP2(base) ((AIPS_PACRB_REG(base) & AIPS_PACRB_TP2_MASK) >> AIPS_PACRB_TP2_SHIFT)
#define AIPS_BRD_PACRB_TP2(base) (BME_UBFX32(&AIPS_PACRB_REG(base), AIPS_PACRB_TP2_SHIFT, AIPS_PACRB_TP2_WIDTH))

/*! @brief Set the TP2 field to a new value. */
#define AIPS_WR_PACRB_TP2(base, value) (AIPS_RMW_PACRB(base, AIPS_PACRB_TP2_MASK, AIPS_PACRB_TP2(value)))
#define AIPS_BWR_PACRB_TP2(base, value) (BME_BFI32(&AIPS_PACRB_REG(base), ((uint32_t)(value) << AIPS_PACRB_TP2_SHIFT), AIPS_PACRB_TP2_SHIFT, AIPS_PACRB_TP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRB, field WP2[21] (RW)
 *
 * Determines whether the peripheral allows write accesss. When this bit is set
 * and a write access is attempted, access terminates with an error response and
 * no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRB_WP2 field. */
#define AIPS_RD_PACRB_WP2(base) ((AIPS_PACRB_REG(base) & AIPS_PACRB_WP2_MASK) >> AIPS_PACRB_WP2_SHIFT)
#define AIPS_BRD_PACRB_WP2(base) (BME_UBFX32(&AIPS_PACRB_REG(base), AIPS_PACRB_WP2_SHIFT, AIPS_PACRB_WP2_WIDTH))

/*! @brief Set the WP2 field to a new value. */
#define AIPS_WR_PACRB_WP2(base, value) (AIPS_RMW_PACRB(base, AIPS_PACRB_WP2_MASK, AIPS_PACRB_WP2(value)))
#define AIPS_BWR_PACRB_WP2(base, value) (BME_BFI32(&AIPS_PACRB_REG(base), ((uint32_t)(value) << AIPS_PACRB_WP2_SHIFT), AIPS_PACRB_WP2_SHIFT, AIPS_PACRB_WP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRB, field SP2[22] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRB_SP2 field. */
#define AIPS_RD_PACRB_SP2(base) ((AIPS_PACRB_REG(base) & AIPS_PACRB_SP2_MASK) >> AIPS_PACRB_SP2_SHIFT)
#define AIPS_BRD_PACRB_SP2(base) (BME_UBFX32(&AIPS_PACRB_REG(base), AIPS_PACRB_SP2_SHIFT, AIPS_PACRB_SP2_WIDTH))

/*! @brief Set the SP2 field to a new value. */
#define AIPS_WR_PACRB_SP2(base, value) (AIPS_RMW_PACRB(base, AIPS_PACRB_SP2_MASK, AIPS_PACRB_SP2(value)))
#define AIPS_BWR_PACRB_SP2(base, value) (BME_BFI32(&AIPS_PACRB_REG(base), ((uint32_t)(value) << AIPS_PACRB_SP2_SHIFT), AIPS_PACRB_SP2_SHIFT, AIPS_PACRB_SP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRB, field TP1[24] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRB_TP1 field. */
#define AIPS_RD_PACRB_TP1(base) ((AIPS_PACRB_REG(base) & AIPS_PACRB_TP1_MASK) >> AIPS_PACRB_TP1_SHIFT)
#define AIPS_BRD_PACRB_TP1(base) (BME_UBFX32(&AIPS_PACRB_REG(base), AIPS_PACRB_TP1_SHIFT, AIPS_PACRB_TP1_WIDTH))

/*! @brief Set the TP1 field to a new value. */
#define AIPS_WR_PACRB_TP1(base, value) (AIPS_RMW_PACRB(base, AIPS_PACRB_TP1_MASK, AIPS_PACRB_TP1(value)))
#define AIPS_BWR_PACRB_TP1(base, value) (BME_BFI32(&AIPS_PACRB_REG(base), ((uint32_t)(value) << AIPS_PACRB_TP1_SHIFT), AIPS_PACRB_TP1_SHIFT, AIPS_PACRB_TP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRB, field WP1[25] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRB_WP1 field. */
#define AIPS_RD_PACRB_WP1(base) ((AIPS_PACRB_REG(base) & AIPS_PACRB_WP1_MASK) >> AIPS_PACRB_WP1_SHIFT)
#define AIPS_BRD_PACRB_WP1(base) (BME_UBFX32(&AIPS_PACRB_REG(base), AIPS_PACRB_WP1_SHIFT, AIPS_PACRB_WP1_WIDTH))

/*! @brief Set the WP1 field to a new value. */
#define AIPS_WR_PACRB_WP1(base, value) (AIPS_RMW_PACRB(base, AIPS_PACRB_WP1_MASK, AIPS_PACRB_WP1(value)))
#define AIPS_BWR_PACRB_WP1(base, value) (BME_BFI32(&AIPS_PACRB_REG(base), ((uint32_t)(value) << AIPS_PACRB_WP1_SHIFT), AIPS_PACRB_WP1_SHIFT, AIPS_PACRB_WP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRB, field SP1[26] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRB_SP1 field. */
#define AIPS_RD_PACRB_SP1(base) ((AIPS_PACRB_REG(base) & AIPS_PACRB_SP1_MASK) >> AIPS_PACRB_SP1_SHIFT)
#define AIPS_BRD_PACRB_SP1(base) (BME_UBFX32(&AIPS_PACRB_REG(base), AIPS_PACRB_SP1_SHIFT, AIPS_PACRB_SP1_WIDTH))

/*! @brief Set the SP1 field to a new value. */
#define AIPS_WR_PACRB_SP1(base, value) (AIPS_RMW_PACRB(base, AIPS_PACRB_SP1_MASK, AIPS_PACRB_SP1(value)))
#define AIPS_BWR_PACRB_SP1(base, value) (BME_BFI32(&AIPS_PACRB_REG(base), ((uint32_t)(value) << AIPS_PACRB_SP1_SHIFT), AIPS_PACRB_SP1_SHIFT, AIPS_PACRB_SP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRB, field TP0[28] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRB_TP0 field. */
#define AIPS_RD_PACRB_TP0(base) ((AIPS_PACRB_REG(base) & AIPS_PACRB_TP0_MASK) >> AIPS_PACRB_TP0_SHIFT)
#define AIPS_BRD_PACRB_TP0(base) (BME_UBFX32(&AIPS_PACRB_REG(base), AIPS_PACRB_TP0_SHIFT, AIPS_PACRB_TP0_WIDTH))

/*! @brief Set the TP0 field to a new value. */
#define AIPS_WR_PACRB_TP0(base, value) (AIPS_RMW_PACRB(base, AIPS_PACRB_TP0_MASK, AIPS_PACRB_TP0(value)))
#define AIPS_BWR_PACRB_TP0(base, value) (BME_BFI32(&AIPS_PACRB_REG(base), ((uint32_t)(value) << AIPS_PACRB_TP0_SHIFT), AIPS_PACRB_TP0_SHIFT, AIPS_PACRB_TP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRB, field WP0[29] (RW)
 *
 * Determines whether the peripheral allows write accesss. When this bit is set
 * and a write access is attempted, access terminates with an error response and
 * no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRB_WP0 field. */
#define AIPS_RD_PACRB_WP0(base) ((AIPS_PACRB_REG(base) & AIPS_PACRB_WP0_MASK) >> AIPS_PACRB_WP0_SHIFT)
#define AIPS_BRD_PACRB_WP0(base) (BME_UBFX32(&AIPS_PACRB_REG(base), AIPS_PACRB_WP0_SHIFT, AIPS_PACRB_WP0_WIDTH))

/*! @brief Set the WP0 field to a new value. */
#define AIPS_WR_PACRB_WP0(base, value) (AIPS_RMW_PACRB(base, AIPS_PACRB_WP0_MASK, AIPS_PACRB_WP0(value)))
#define AIPS_BWR_PACRB_WP0(base, value) (BME_BFI32(&AIPS_PACRB_REG(base), ((uint32_t)(value) << AIPS_PACRB_WP0_SHIFT), AIPS_PACRB_WP0_SHIFT, AIPS_PACRB_WP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRB, field SP0[30] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRB_SP0 field. */
#define AIPS_RD_PACRB_SP0(base) ((AIPS_PACRB_REG(base) & AIPS_PACRB_SP0_MASK) >> AIPS_PACRB_SP0_SHIFT)
#define AIPS_BRD_PACRB_SP0(base) (BME_UBFX32(&AIPS_PACRB_REG(base), AIPS_PACRB_SP0_SHIFT, AIPS_PACRB_SP0_WIDTH))

/*! @brief Set the SP0 field to a new value. */
#define AIPS_WR_PACRB_SP0(base, value) (AIPS_RMW_PACRB(base, AIPS_PACRB_SP0_MASK, AIPS_PACRB_SP0(value)))
#define AIPS_BWR_PACRB_SP0(base, value) (BME_BFI32(&AIPS_PACRB_REG(base), ((uint32_t)(value) << AIPS_PACRB_SP0_SHIFT), AIPS_PACRB_SP0_SHIFT, AIPS_PACRB_SP0_WIDTH))
/*@}*/

/*******************************************************************************
 * AIPS_PACRC - Peripheral Access Control Register
 ******************************************************************************/

/*!
 * @brief AIPS_PACRC - Peripheral Access Control Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * Each PACR register consists of eight 4-bit PACR fields. Each PACR field
 * defines the access levels for a particular peripheral. The mapping between a
 * peripheral and its PACR field is shown in the table below. The peripheral assignment
 * to each PACR is defined by the memory map slot that the peripheral is
 * assigned to. See this chip's memory map for the assignment of a particular
 * peripheral. The following table shows the location of each peripheral slot's PACR field
 * in the PACR registers. Offset Register [31:28] [27:24] [23:20] [19:16] [15:12]
 * [11:8] [7:4] [3:0] 0x20 PACRA PACR0 PACR1 PACR2 PACR3 PACR4 PACR5 PACR6 PACR7
 * 0x24 PACRB PACR8 PACR9 PACR10 PACR11 PACR12 PACR13 PACR14 PACR15 0x28 PACRC
 * PACR16 PACR17 PACR18 PACR19 PACR20 PACR21 PACR22 PACR23 0x2C PACRD PACR24
 * PACR25 PACR26 PACR27 PACR28 PACR29 PACR30 PACR31 0x30 Reserved 0x34 Reserved 0x38
 * Reserved 0x3C Reserved 0x40 PACRE PACR32 PACR33 PACR34 PACR35 PACR36 PACR37
 * PACR38 PACR39 0x44 PACRF PACR40 PACR41 PACR42 PACR43 PACR44 PACR45 PACR46 PACR47
 * 0x48 PACRG PACR48 PACR49 PACR50 PACR51 PACR52 PACR53 PACR54 PACR55 0x4C PACRH
 * PACR56 PACR57 PACR58 PACR59 PACR60 PACR61 PACR62 PACR63 0x50 PACRI PACR64
 * PACR65 PACR66 PACR67 PACR68 PACR69 PACR70 PACR71 0x54 PACRJ PACR72 PACR73 PACR74
 * PACR75 PACR76 PACR77 PACR78 PACR79 0x58 PACRK PACR80 PACR81 PACR82 PACR83
 * PACR84 PACR85 PACR86 PACR87 0x5C PACRL PACR88 PACR89 PACR90 PACR91 PACR92 PACR93
 * PACR94 PACR95 0x60 PACRM PACR96 PACR97 PACR98 PACR99 PACR100 PACR101 PACR102
 * PACR103 0x64 PACRN PACR104 PACR105 PACR106 PACR107 PACR108 PACR109 PACR110
 * PACR111 0x68 PACRO PACR112 PACR113 PACR114 PACR115 PACR116 PACR117 PACR118 PACR119
 * 0x6C PACRP PACR120 PACR121 PACR122 PACR123 PACR124 PACR125 PACR126 PACR127 The
 * register field descriptions for PACR A-D, which control peripheral slots 0-31,
 * are shown below. The following section, PACRPeripheral Access Control
 * Register , shows the register field descriptions for PACR E-P. All PACR registers are
 * identical. They are divided into two sections because they occupy two
 * non-contiguous address spaces.
 */
/*!
 * @name Constants and macros for entire AIPS_PACRC register
 */
/*@{*/
#define AIPS_RD_PACRC(base)      (AIPS_PACRC_REG(base))
#define AIPS_WR_PACRC(base, value) (AIPS_PACRC_REG(base) = (value))
#define AIPS_RMW_PACRC(base, mask, value) (AIPS_WR_PACRC(base, (AIPS_RD_PACRC(base) & ~(mask)) | (value)))
#define AIPS_SET_PACRC(base, value) (BME_OR32(&AIPS_PACRC_REG(base), (uint32_t)(value)))
#define AIPS_CLR_PACRC(base, value) (BME_AND32(&AIPS_PACRC_REG(base), (uint32_t)(~(value))))
#define AIPS_TOG_PACRC(base, value) (BME_XOR32(&AIPS_PACRC_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual AIPS_PACRC bitfields
 */

/*!
 * @name Register AIPS_PACRC, field TP7[0] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRC_TP7 field. */
#define AIPS_RD_PACRC_TP7(base) ((AIPS_PACRC_REG(base) & AIPS_PACRC_TP7_MASK) >> AIPS_PACRC_TP7_SHIFT)
#define AIPS_BRD_PACRC_TP7(base) (BME_UBFX32(&AIPS_PACRC_REG(base), AIPS_PACRC_TP7_SHIFT, AIPS_PACRC_TP7_WIDTH))

/*! @brief Set the TP7 field to a new value. */
#define AIPS_WR_PACRC_TP7(base, value) (AIPS_RMW_PACRC(base, AIPS_PACRC_TP7_MASK, AIPS_PACRC_TP7(value)))
#define AIPS_BWR_PACRC_TP7(base, value) (BME_BFI32(&AIPS_PACRC_REG(base), ((uint32_t)(value) << AIPS_PACRC_TP7_SHIFT), AIPS_PACRC_TP7_SHIFT, AIPS_PACRC_TP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRC, field WP7[1] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRC_WP7 field. */
#define AIPS_RD_PACRC_WP7(base) ((AIPS_PACRC_REG(base) & AIPS_PACRC_WP7_MASK) >> AIPS_PACRC_WP7_SHIFT)
#define AIPS_BRD_PACRC_WP7(base) (BME_UBFX32(&AIPS_PACRC_REG(base), AIPS_PACRC_WP7_SHIFT, AIPS_PACRC_WP7_WIDTH))

/*! @brief Set the WP7 field to a new value. */
#define AIPS_WR_PACRC_WP7(base, value) (AIPS_RMW_PACRC(base, AIPS_PACRC_WP7_MASK, AIPS_PACRC_WP7(value)))
#define AIPS_BWR_PACRC_WP7(base, value) (BME_BFI32(&AIPS_PACRC_REG(base), ((uint32_t)(value) << AIPS_PACRC_WP7_SHIFT), AIPS_PACRC_WP7_SHIFT, AIPS_PACRC_WP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRC, field SP7[2] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRC_SP7 field. */
#define AIPS_RD_PACRC_SP7(base) ((AIPS_PACRC_REG(base) & AIPS_PACRC_SP7_MASK) >> AIPS_PACRC_SP7_SHIFT)
#define AIPS_BRD_PACRC_SP7(base) (BME_UBFX32(&AIPS_PACRC_REG(base), AIPS_PACRC_SP7_SHIFT, AIPS_PACRC_SP7_WIDTH))

/*! @brief Set the SP7 field to a new value. */
#define AIPS_WR_PACRC_SP7(base, value) (AIPS_RMW_PACRC(base, AIPS_PACRC_SP7_MASK, AIPS_PACRC_SP7(value)))
#define AIPS_BWR_PACRC_SP7(base, value) (BME_BFI32(&AIPS_PACRC_REG(base), ((uint32_t)(value) << AIPS_PACRC_SP7_SHIFT), AIPS_PACRC_SP7_SHIFT, AIPS_PACRC_SP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRC, field TP6[4] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRC_TP6 field. */
#define AIPS_RD_PACRC_TP6(base) ((AIPS_PACRC_REG(base) & AIPS_PACRC_TP6_MASK) >> AIPS_PACRC_TP6_SHIFT)
#define AIPS_BRD_PACRC_TP6(base) (BME_UBFX32(&AIPS_PACRC_REG(base), AIPS_PACRC_TP6_SHIFT, AIPS_PACRC_TP6_WIDTH))

/*! @brief Set the TP6 field to a new value. */
#define AIPS_WR_PACRC_TP6(base, value) (AIPS_RMW_PACRC(base, AIPS_PACRC_TP6_MASK, AIPS_PACRC_TP6(value)))
#define AIPS_BWR_PACRC_TP6(base, value) (BME_BFI32(&AIPS_PACRC_REG(base), ((uint32_t)(value) << AIPS_PACRC_TP6_SHIFT), AIPS_PACRC_TP6_SHIFT, AIPS_PACRC_TP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRC, field WP6[5] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRC_WP6 field. */
#define AIPS_RD_PACRC_WP6(base) ((AIPS_PACRC_REG(base) & AIPS_PACRC_WP6_MASK) >> AIPS_PACRC_WP6_SHIFT)
#define AIPS_BRD_PACRC_WP6(base) (BME_UBFX32(&AIPS_PACRC_REG(base), AIPS_PACRC_WP6_SHIFT, AIPS_PACRC_WP6_WIDTH))

/*! @brief Set the WP6 field to a new value. */
#define AIPS_WR_PACRC_WP6(base, value) (AIPS_RMW_PACRC(base, AIPS_PACRC_WP6_MASK, AIPS_PACRC_WP6(value)))
#define AIPS_BWR_PACRC_WP6(base, value) (BME_BFI32(&AIPS_PACRC_REG(base), ((uint32_t)(value) << AIPS_PACRC_WP6_SHIFT), AIPS_PACRC_WP6_SHIFT, AIPS_PACRC_WP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRC, field SP6[6] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRC_SP6 field. */
#define AIPS_RD_PACRC_SP6(base) ((AIPS_PACRC_REG(base) & AIPS_PACRC_SP6_MASK) >> AIPS_PACRC_SP6_SHIFT)
#define AIPS_BRD_PACRC_SP6(base) (BME_UBFX32(&AIPS_PACRC_REG(base), AIPS_PACRC_SP6_SHIFT, AIPS_PACRC_SP6_WIDTH))

/*! @brief Set the SP6 field to a new value. */
#define AIPS_WR_PACRC_SP6(base, value) (AIPS_RMW_PACRC(base, AIPS_PACRC_SP6_MASK, AIPS_PACRC_SP6(value)))
#define AIPS_BWR_PACRC_SP6(base, value) (BME_BFI32(&AIPS_PACRC_REG(base), ((uint32_t)(value) << AIPS_PACRC_SP6_SHIFT), AIPS_PACRC_SP6_SHIFT, AIPS_PACRC_SP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRC, field TP5[8] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRC_TP5 field. */
#define AIPS_RD_PACRC_TP5(base) ((AIPS_PACRC_REG(base) & AIPS_PACRC_TP5_MASK) >> AIPS_PACRC_TP5_SHIFT)
#define AIPS_BRD_PACRC_TP5(base) (BME_UBFX32(&AIPS_PACRC_REG(base), AIPS_PACRC_TP5_SHIFT, AIPS_PACRC_TP5_WIDTH))

/*! @brief Set the TP5 field to a new value. */
#define AIPS_WR_PACRC_TP5(base, value) (AIPS_RMW_PACRC(base, AIPS_PACRC_TP5_MASK, AIPS_PACRC_TP5(value)))
#define AIPS_BWR_PACRC_TP5(base, value) (BME_BFI32(&AIPS_PACRC_REG(base), ((uint32_t)(value) << AIPS_PACRC_TP5_SHIFT), AIPS_PACRC_TP5_SHIFT, AIPS_PACRC_TP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRC, field WP5[9] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRC_WP5 field. */
#define AIPS_RD_PACRC_WP5(base) ((AIPS_PACRC_REG(base) & AIPS_PACRC_WP5_MASK) >> AIPS_PACRC_WP5_SHIFT)
#define AIPS_BRD_PACRC_WP5(base) (BME_UBFX32(&AIPS_PACRC_REG(base), AIPS_PACRC_WP5_SHIFT, AIPS_PACRC_WP5_WIDTH))

/*! @brief Set the WP5 field to a new value. */
#define AIPS_WR_PACRC_WP5(base, value) (AIPS_RMW_PACRC(base, AIPS_PACRC_WP5_MASK, AIPS_PACRC_WP5(value)))
#define AIPS_BWR_PACRC_WP5(base, value) (BME_BFI32(&AIPS_PACRC_REG(base), ((uint32_t)(value) << AIPS_PACRC_WP5_SHIFT), AIPS_PACRC_WP5_SHIFT, AIPS_PACRC_WP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRC, field SP5[10] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRC_SP5 field. */
#define AIPS_RD_PACRC_SP5(base) ((AIPS_PACRC_REG(base) & AIPS_PACRC_SP5_MASK) >> AIPS_PACRC_SP5_SHIFT)
#define AIPS_BRD_PACRC_SP5(base) (BME_UBFX32(&AIPS_PACRC_REG(base), AIPS_PACRC_SP5_SHIFT, AIPS_PACRC_SP5_WIDTH))

/*! @brief Set the SP5 field to a new value. */
#define AIPS_WR_PACRC_SP5(base, value) (AIPS_RMW_PACRC(base, AIPS_PACRC_SP5_MASK, AIPS_PACRC_SP5(value)))
#define AIPS_BWR_PACRC_SP5(base, value) (BME_BFI32(&AIPS_PACRC_REG(base), ((uint32_t)(value) << AIPS_PACRC_SP5_SHIFT), AIPS_PACRC_SP5_SHIFT, AIPS_PACRC_SP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRC, field TP4[12] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRC_TP4 field. */
#define AIPS_RD_PACRC_TP4(base) ((AIPS_PACRC_REG(base) & AIPS_PACRC_TP4_MASK) >> AIPS_PACRC_TP4_SHIFT)
#define AIPS_BRD_PACRC_TP4(base) (BME_UBFX32(&AIPS_PACRC_REG(base), AIPS_PACRC_TP4_SHIFT, AIPS_PACRC_TP4_WIDTH))

/*! @brief Set the TP4 field to a new value. */
#define AIPS_WR_PACRC_TP4(base, value) (AIPS_RMW_PACRC(base, AIPS_PACRC_TP4_MASK, AIPS_PACRC_TP4(value)))
#define AIPS_BWR_PACRC_TP4(base, value) (BME_BFI32(&AIPS_PACRC_REG(base), ((uint32_t)(value) << AIPS_PACRC_TP4_SHIFT), AIPS_PACRC_TP4_SHIFT, AIPS_PACRC_TP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRC, field WP4[13] (RW)
 *
 * Determines whether the peripheral allows write accesss. When this bit is set
 * and a write access is attempted, access terminates with an error response and
 * no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRC_WP4 field. */
#define AIPS_RD_PACRC_WP4(base) ((AIPS_PACRC_REG(base) & AIPS_PACRC_WP4_MASK) >> AIPS_PACRC_WP4_SHIFT)
#define AIPS_BRD_PACRC_WP4(base) (BME_UBFX32(&AIPS_PACRC_REG(base), AIPS_PACRC_WP4_SHIFT, AIPS_PACRC_WP4_WIDTH))

/*! @brief Set the WP4 field to a new value. */
#define AIPS_WR_PACRC_WP4(base, value) (AIPS_RMW_PACRC(base, AIPS_PACRC_WP4_MASK, AIPS_PACRC_WP4(value)))
#define AIPS_BWR_PACRC_WP4(base, value) (BME_BFI32(&AIPS_PACRC_REG(base), ((uint32_t)(value) << AIPS_PACRC_WP4_SHIFT), AIPS_PACRC_WP4_SHIFT, AIPS_PACRC_WP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRC, field SP4[14] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRC_SP4 field. */
#define AIPS_RD_PACRC_SP4(base) ((AIPS_PACRC_REG(base) & AIPS_PACRC_SP4_MASK) >> AIPS_PACRC_SP4_SHIFT)
#define AIPS_BRD_PACRC_SP4(base) (BME_UBFX32(&AIPS_PACRC_REG(base), AIPS_PACRC_SP4_SHIFT, AIPS_PACRC_SP4_WIDTH))

/*! @brief Set the SP4 field to a new value. */
#define AIPS_WR_PACRC_SP4(base, value) (AIPS_RMW_PACRC(base, AIPS_PACRC_SP4_MASK, AIPS_PACRC_SP4(value)))
#define AIPS_BWR_PACRC_SP4(base, value) (BME_BFI32(&AIPS_PACRC_REG(base), ((uint32_t)(value) << AIPS_PACRC_SP4_SHIFT), AIPS_PACRC_SP4_SHIFT, AIPS_PACRC_SP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRC, field TP3[16] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRC_TP3 field. */
#define AIPS_RD_PACRC_TP3(base) ((AIPS_PACRC_REG(base) & AIPS_PACRC_TP3_MASK) >> AIPS_PACRC_TP3_SHIFT)
#define AIPS_BRD_PACRC_TP3(base) (BME_UBFX32(&AIPS_PACRC_REG(base), AIPS_PACRC_TP3_SHIFT, AIPS_PACRC_TP3_WIDTH))

/*! @brief Set the TP3 field to a new value. */
#define AIPS_WR_PACRC_TP3(base, value) (AIPS_RMW_PACRC(base, AIPS_PACRC_TP3_MASK, AIPS_PACRC_TP3(value)))
#define AIPS_BWR_PACRC_TP3(base, value) (BME_BFI32(&AIPS_PACRC_REG(base), ((uint32_t)(value) << AIPS_PACRC_TP3_SHIFT), AIPS_PACRC_TP3_SHIFT, AIPS_PACRC_TP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRC, field WP3[17] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRC_WP3 field. */
#define AIPS_RD_PACRC_WP3(base) ((AIPS_PACRC_REG(base) & AIPS_PACRC_WP3_MASK) >> AIPS_PACRC_WP3_SHIFT)
#define AIPS_BRD_PACRC_WP3(base) (BME_UBFX32(&AIPS_PACRC_REG(base), AIPS_PACRC_WP3_SHIFT, AIPS_PACRC_WP3_WIDTH))

/*! @brief Set the WP3 field to a new value. */
#define AIPS_WR_PACRC_WP3(base, value) (AIPS_RMW_PACRC(base, AIPS_PACRC_WP3_MASK, AIPS_PACRC_WP3(value)))
#define AIPS_BWR_PACRC_WP3(base, value) (BME_BFI32(&AIPS_PACRC_REG(base), ((uint32_t)(value) << AIPS_PACRC_WP3_SHIFT), AIPS_PACRC_WP3_SHIFT, AIPS_PACRC_WP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRC, field SP3[18] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRC_SP3 field. */
#define AIPS_RD_PACRC_SP3(base) ((AIPS_PACRC_REG(base) & AIPS_PACRC_SP3_MASK) >> AIPS_PACRC_SP3_SHIFT)
#define AIPS_BRD_PACRC_SP3(base) (BME_UBFX32(&AIPS_PACRC_REG(base), AIPS_PACRC_SP3_SHIFT, AIPS_PACRC_SP3_WIDTH))

/*! @brief Set the SP3 field to a new value. */
#define AIPS_WR_PACRC_SP3(base, value) (AIPS_RMW_PACRC(base, AIPS_PACRC_SP3_MASK, AIPS_PACRC_SP3(value)))
#define AIPS_BWR_PACRC_SP3(base, value) (BME_BFI32(&AIPS_PACRC_REG(base), ((uint32_t)(value) << AIPS_PACRC_SP3_SHIFT), AIPS_PACRC_SP3_SHIFT, AIPS_PACRC_SP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRC, field TP2[20] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRC_TP2 field. */
#define AIPS_RD_PACRC_TP2(base) ((AIPS_PACRC_REG(base) & AIPS_PACRC_TP2_MASK) >> AIPS_PACRC_TP2_SHIFT)
#define AIPS_BRD_PACRC_TP2(base) (BME_UBFX32(&AIPS_PACRC_REG(base), AIPS_PACRC_TP2_SHIFT, AIPS_PACRC_TP2_WIDTH))

/*! @brief Set the TP2 field to a new value. */
#define AIPS_WR_PACRC_TP2(base, value) (AIPS_RMW_PACRC(base, AIPS_PACRC_TP2_MASK, AIPS_PACRC_TP2(value)))
#define AIPS_BWR_PACRC_TP2(base, value) (BME_BFI32(&AIPS_PACRC_REG(base), ((uint32_t)(value) << AIPS_PACRC_TP2_SHIFT), AIPS_PACRC_TP2_SHIFT, AIPS_PACRC_TP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRC, field WP2[21] (RW)
 *
 * Determines whether the peripheral allows write accesss. When this bit is set
 * and a write access is attempted, access terminates with an error response and
 * no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRC_WP2 field. */
#define AIPS_RD_PACRC_WP2(base) ((AIPS_PACRC_REG(base) & AIPS_PACRC_WP2_MASK) >> AIPS_PACRC_WP2_SHIFT)
#define AIPS_BRD_PACRC_WP2(base) (BME_UBFX32(&AIPS_PACRC_REG(base), AIPS_PACRC_WP2_SHIFT, AIPS_PACRC_WP2_WIDTH))

/*! @brief Set the WP2 field to a new value. */
#define AIPS_WR_PACRC_WP2(base, value) (AIPS_RMW_PACRC(base, AIPS_PACRC_WP2_MASK, AIPS_PACRC_WP2(value)))
#define AIPS_BWR_PACRC_WP2(base, value) (BME_BFI32(&AIPS_PACRC_REG(base), ((uint32_t)(value) << AIPS_PACRC_WP2_SHIFT), AIPS_PACRC_WP2_SHIFT, AIPS_PACRC_WP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRC, field SP2[22] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRC_SP2 field. */
#define AIPS_RD_PACRC_SP2(base) ((AIPS_PACRC_REG(base) & AIPS_PACRC_SP2_MASK) >> AIPS_PACRC_SP2_SHIFT)
#define AIPS_BRD_PACRC_SP2(base) (BME_UBFX32(&AIPS_PACRC_REG(base), AIPS_PACRC_SP2_SHIFT, AIPS_PACRC_SP2_WIDTH))

/*! @brief Set the SP2 field to a new value. */
#define AIPS_WR_PACRC_SP2(base, value) (AIPS_RMW_PACRC(base, AIPS_PACRC_SP2_MASK, AIPS_PACRC_SP2(value)))
#define AIPS_BWR_PACRC_SP2(base, value) (BME_BFI32(&AIPS_PACRC_REG(base), ((uint32_t)(value) << AIPS_PACRC_SP2_SHIFT), AIPS_PACRC_SP2_SHIFT, AIPS_PACRC_SP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRC, field TP1[24] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRC_TP1 field. */
#define AIPS_RD_PACRC_TP1(base) ((AIPS_PACRC_REG(base) & AIPS_PACRC_TP1_MASK) >> AIPS_PACRC_TP1_SHIFT)
#define AIPS_BRD_PACRC_TP1(base) (BME_UBFX32(&AIPS_PACRC_REG(base), AIPS_PACRC_TP1_SHIFT, AIPS_PACRC_TP1_WIDTH))

/*! @brief Set the TP1 field to a new value. */
#define AIPS_WR_PACRC_TP1(base, value) (AIPS_RMW_PACRC(base, AIPS_PACRC_TP1_MASK, AIPS_PACRC_TP1(value)))
#define AIPS_BWR_PACRC_TP1(base, value) (BME_BFI32(&AIPS_PACRC_REG(base), ((uint32_t)(value) << AIPS_PACRC_TP1_SHIFT), AIPS_PACRC_TP1_SHIFT, AIPS_PACRC_TP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRC, field WP1[25] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRC_WP1 field. */
#define AIPS_RD_PACRC_WP1(base) ((AIPS_PACRC_REG(base) & AIPS_PACRC_WP1_MASK) >> AIPS_PACRC_WP1_SHIFT)
#define AIPS_BRD_PACRC_WP1(base) (BME_UBFX32(&AIPS_PACRC_REG(base), AIPS_PACRC_WP1_SHIFT, AIPS_PACRC_WP1_WIDTH))

/*! @brief Set the WP1 field to a new value. */
#define AIPS_WR_PACRC_WP1(base, value) (AIPS_RMW_PACRC(base, AIPS_PACRC_WP1_MASK, AIPS_PACRC_WP1(value)))
#define AIPS_BWR_PACRC_WP1(base, value) (BME_BFI32(&AIPS_PACRC_REG(base), ((uint32_t)(value) << AIPS_PACRC_WP1_SHIFT), AIPS_PACRC_WP1_SHIFT, AIPS_PACRC_WP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRC, field SP1[26] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRC_SP1 field. */
#define AIPS_RD_PACRC_SP1(base) ((AIPS_PACRC_REG(base) & AIPS_PACRC_SP1_MASK) >> AIPS_PACRC_SP1_SHIFT)
#define AIPS_BRD_PACRC_SP1(base) (BME_UBFX32(&AIPS_PACRC_REG(base), AIPS_PACRC_SP1_SHIFT, AIPS_PACRC_SP1_WIDTH))

/*! @brief Set the SP1 field to a new value. */
#define AIPS_WR_PACRC_SP1(base, value) (AIPS_RMW_PACRC(base, AIPS_PACRC_SP1_MASK, AIPS_PACRC_SP1(value)))
#define AIPS_BWR_PACRC_SP1(base, value) (BME_BFI32(&AIPS_PACRC_REG(base), ((uint32_t)(value) << AIPS_PACRC_SP1_SHIFT), AIPS_PACRC_SP1_SHIFT, AIPS_PACRC_SP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRC, field TP0[28] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRC_TP0 field. */
#define AIPS_RD_PACRC_TP0(base) ((AIPS_PACRC_REG(base) & AIPS_PACRC_TP0_MASK) >> AIPS_PACRC_TP0_SHIFT)
#define AIPS_BRD_PACRC_TP0(base) (BME_UBFX32(&AIPS_PACRC_REG(base), AIPS_PACRC_TP0_SHIFT, AIPS_PACRC_TP0_WIDTH))

/*! @brief Set the TP0 field to a new value. */
#define AIPS_WR_PACRC_TP0(base, value) (AIPS_RMW_PACRC(base, AIPS_PACRC_TP0_MASK, AIPS_PACRC_TP0(value)))
#define AIPS_BWR_PACRC_TP0(base, value) (BME_BFI32(&AIPS_PACRC_REG(base), ((uint32_t)(value) << AIPS_PACRC_TP0_SHIFT), AIPS_PACRC_TP0_SHIFT, AIPS_PACRC_TP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRC, field WP0[29] (RW)
 *
 * Determines whether the peripheral allows write accesss. When this bit is set
 * and a write access is attempted, access terminates with an error response and
 * no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRC_WP0 field. */
#define AIPS_RD_PACRC_WP0(base) ((AIPS_PACRC_REG(base) & AIPS_PACRC_WP0_MASK) >> AIPS_PACRC_WP0_SHIFT)
#define AIPS_BRD_PACRC_WP0(base) (BME_UBFX32(&AIPS_PACRC_REG(base), AIPS_PACRC_WP0_SHIFT, AIPS_PACRC_WP0_WIDTH))

/*! @brief Set the WP0 field to a new value. */
#define AIPS_WR_PACRC_WP0(base, value) (AIPS_RMW_PACRC(base, AIPS_PACRC_WP0_MASK, AIPS_PACRC_WP0(value)))
#define AIPS_BWR_PACRC_WP0(base, value) (BME_BFI32(&AIPS_PACRC_REG(base), ((uint32_t)(value) << AIPS_PACRC_WP0_SHIFT), AIPS_PACRC_WP0_SHIFT, AIPS_PACRC_WP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRC, field SP0[30] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRC_SP0 field. */
#define AIPS_RD_PACRC_SP0(base) ((AIPS_PACRC_REG(base) & AIPS_PACRC_SP0_MASK) >> AIPS_PACRC_SP0_SHIFT)
#define AIPS_BRD_PACRC_SP0(base) (BME_UBFX32(&AIPS_PACRC_REG(base), AIPS_PACRC_SP0_SHIFT, AIPS_PACRC_SP0_WIDTH))

/*! @brief Set the SP0 field to a new value. */
#define AIPS_WR_PACRC_SP0(base, value) (AIPS_RMW_PACRC(base, AIPS_PACRC_SP0_MASK, AIPS_PACRC_SP0(value)))
#define AIPS_BWR_PACRC_SP0(base, value) (BME_BFI32(&AIPS_PACRC_REG(base), ((uint32_t)(value) << AIPS_PACRC_SP0_SHIFT), AIPS_PACRC_SP0_SHIFT, AIPS_PACRC_SP0_WIDTH))
/*@}*/

/*******************************************************************************
 * AIPS_PACRD - Peripheral Access Control Register
 ******************************************************************************/

/*!
 * @brief AIPS_PACRD - Peripheral Access Control Register (RW)
 *
 * Reset value: 0x00000004U
 *
 * Each PACR register consists of eight 4-bit PACR fields. Each PACR field
 * defines the access levels for a particular peripheral. The mapping between a
 * peripheral and its PACR field is shown in the table below. The peripheral assignment
 * to each PACR is defined by the memory map slot that the peripheral is
 * assigned to. See this chip's memory map for the assignment of a particular
 * peripheral. The following table shows the location of each peripheral slot's PACR field
 * in the PACR registers. Offset Register [31:28] [27:24] [23:20] [19:16] [15:12]
 * [11:8] [7:4] [3:0] 0x20 PACRA PACR0 PACR1 PACR2 PACR3 PACR4 PACR5 PACR6 PACR7
 * 0x24 PACRB PACR8 PACR9 PACR10 PACR11 PACR12 PACR13 PACR14 PACR15 0x28 PACRC
 * PACR16 PACR17 PACR18 PACR19 PACR20 PACR21 PACR22 PACR23 0x2C PACRD PACR24
 * PACR25 PACR26 PACR27 PACR28 PACR29 PACR30 PACR31 0x30 Reserved 0x34 Reserved 0x38
 * Reserved 0x3C Reserved 0x40 PACRE PACR32 PACR33 PACR34 PACR35 PACR36 PACR37
 * PACR38 PACR39 0x44 PACRF PACR40 PACR41 PACR42 PACR43 PACR44 PACR45 PACR46 PACR47
 * 0x48 PACRG PACR48 PACR49 PACR50 PACR51 PACR52 PACR53 PACR54 PACR55 0x4C PACRH
 * PACR56 PACR57 PACR58 PACR59 PACR60 PACR61 PACR62 PACR63 0x50 PACRI PACR64
 * PACR65 PACR66 PACR67 PACR68 PACR69 PACR70 PACR71 0x54 PACRJ PACR72 PACR73 PACR74
 * PACR75 PACR76 PACR77 PACR78 PACR79 0x58 PACRK PACR80 PACR81 PACR82 PACR83
 * PACR84 PACR85 PACR86 PACR87 0x5C PACRL PACR88 PACR89 PACR90 PACR91 PACR92 PACR93
 * PACR94 PACR95 0x60 PACRM PACR96 PACR97 PACR98 PACR99 PACR100 PACR101 PACR102
 * PACR103 0x64 PACRN PACR104 PACR105 PACR106 PACR107 PACR108 PACR109 PACR110
 * PACR111 0x68 PACRO PACR112 PACR113 PACR114 PACR115 PACR116 PACR117 PACR118 PACR119
 * 0x6C PACRP PACR120 PACR121 PACR122 PACR123 PACR124 PACR125 PACR126 PACR127 The
 * register field descriptions for PACR A-D, which control peripheral slots 0-31,
 * are shown below. The following section, PACRPeripheral Access Control
 * Register , shows the register field descriptions for PACR E-P. All PACR registers are
 * identical. They are divided into two sections because they occupy two
 * non-contiguous address spaces.
 */
/*!
 * @name Constants and macros for entire AIPS_PACRD register
 */
/*@{*/
#define AIPS_RD_PACRD(base)      (AIPS_PACRD_REG(base))
#define AIPS_WR_PACRD(base, value) (AIPS_PACRD_REG(base) = (value))
#define AIPS_RMW_PACRD(base, mask, value) (AIPS_WR_PACRD(base, (AIPS_RD_PACRD(base) & ~(mask)) | (value)))
#define AIPS_SET_PACRD(base, value) (BME_OR32(&AIPS_PACRD_REG(base), (uint32_t)(value)))
#define AIPS_CLR_PACRD(base, value) (BME_AND32(&AIPS_PACRD_REG(base), (uint32_t)(~(value))))
#define AIPS_TOG_PACRD(base, value) (BME_XOR32(&AIPS_PACRD_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual AIPS_PACRD bitfields
 */

/*!
 * @name Register AIPS_PACRD, field TP7[0] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRD_TP7 field. */
#define AIPS_RD_PACRD_TP7(base) ((AIPS_PACRD_REG(base) & AIPS_PACRD_TP7_MASK) >> AIPS_PACRD_TP7_SHIFT)
#define AIPS_BRD_PACRD_TP7(base) (BME_UBFX32(&AIPS_PACRD_REG(base), AIPS_PACRD_TP7_SHIFT, AIPS_PACRD_TP7_WIDTH))

/*! @brief Set the TP7 field to a new value. */
#define AIPS_WR_PACRD_TP7(base, value) (AIPS_RMW_PACRD(base, AIPS_PACRD_TP7_MASK, AIPS_PACRD_TP7(value)))
#define AIPS_BWR_PACRD_TP7(base, value) (BME_BFI32(&AIPS_PACRD_REG(base), ((uint32_t)(value) << AIPS_PACRD_TP7_SHIFT), AIPS_PACRD_TP7_SHIFT, AIPS_PACRD_TP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRD, field WP7[1] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRD_WP7 field. */
#define AIPS_RD_PACRD_WP7(base) ((AIPS_PACRD_REG(base) & AIPS_PACRD_WP7_MASK) >> AIPS_PACRD_WP7_SHIFT)
#define AIPS_BRD_PACRD_WP7(base) (BME_UBFX32(&AIPS_PACRD_REG(base), AIPS_PACRD_WP7_SHIFT, AIPS_PACRD_WP7_WIDTH))

/*! @brief Set the WP7 field to a new value. */
#define AIPS_WR_PACRD_WP7(base, value) (AIPS_RMW_PACRD(base, AIPS_PACRD_WP7_MASK, AIPS_PACRD_WP7(value)))
#define AIPS_BWR_PACRD_WP7(base, value) (BME_BFI32(&AIPS_PACRD_REG(base), ((uint32_t)(value) << AIPS_PACRD_WP7_SHIFT), AIPS_PACRD_WP7_SHIFT, AIPS_PACRD_WP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRD, field SP7[2] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRD_SP7 field. */
#define AIPS_RD_PACRD_SP7(base) ((AIPS_PACRD_REG(base) & AIPS_PACRD_SP7_MASK) >> AIPS_PACRD_SP7_SHIFT)
#define AIPS_BRD_PACRD_SP7(base) (BME_UBFX32(&AIPS_PACRD_REG(base), AIPS_PACRD_SP7_SHIFT, AIPS_PACRD_SP7_WIDTH))

/*! @brief Set the SP7 field to a new value. */
#define AIPS_WR_PACRD_SP7(base, value) (AIPS_RMW_PACRD(base, AIPS_PACRD_SP7_MASK, AIPS_PACRD_SP7(value)))
#define AIPS_BWR_PACRD_SP7(base, value) (BME_BFI32(&AIPS_PACRD_REG(base), ((uint32_t)(value) << AIPS_PACRD_SP7_SHIFT), AIPS_PACRD_SP7_SHIFT, AIPS_PACRD_SP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRD, field TP6[4] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRD_TP6 field. */
#define AIPS_RD_PACRD_TP6(base) ((AIPS_PACRD_REG(base) & AIPS_PACRD_TP6_MASK) >> AIPS_PACRD_TP6_SHIFT)
#define AIPS_BRD_PACRD_TP6(base) (BME_UBFX32(&AIPS_PACRD_REG(base), AIPS_PACRD_TP6_SHIFT, AIPS_PACRD_TP6_WIDTH))

/*! @brief Set the TP6 field to a new value. */
#define AIPS_WR_PACRD_TP6(base, value) (AIPS_RMW_PACRD(base, AIPS_PACRD_TP6_MASK, AIPS_PACRD_TP6(value)))
#define AIPS_BWR_PACRD_TP6(base, value) (BME_BFI32(&AIPS_PACRD_REG(base), ((uint32_t)(value) << AIPS_PACRD_TP6_SHIFT), AIPS_PACRD_TP6_SHIFT, AIPS_PACRD_TP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRD, field WP6[5] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRD_WP6 field. */
#define AIPS_RD_PACRD_WP6(base) ((AIPS_PACRD_REG(base) & AIPS_PACRD_WP6_MASK) >> AIPS_PACRD_WP6_SHIFT)
#define AIPS_BRD_PACRD_WP6(base) (BME_UBFX32(&AIPS_PACRD_REG(base), AIPS_PACRD_WP6_SHIFT, AIPS_PACRD_WP6_WIDTH))

/*! @brief Set the WP6 field to a new value. */
#define AIPS_WR_PACRD_WP6(base, value) (AIPS_RMW_PACRD(base, AIPS_PACRD_WP6_MASK, AIPS_PACRD_WP6(value)))
#define AIPS_BWR_PACRD_WP6(base, value) (BME_BFI32(&AIPS_PACRD_REG(base), ((uint32_t)(value) << AIPS_PACRD_WP6_SHIFT), AIPS_PACRD_WP6_SHIFT, AIPS_PACRD_WP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRD, field SP6[6] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRD_SP6 field. */
#define AIPS_RD_PACRD_SP6(base) ((AIPS_PACRD_REG(base) & AIPS_PACRD_SP6_MASK) >> AIPS_PACRD_SP6_SHIFT)
#define AIPS_BRD_PACRD_SP6(base) (BME_UBFX32(&AIPS_PACRD_REG(base), AIPS_PACRD_SP6_SHIFT, AIPS_PACRD_SP6_WIDTH))

/*! @brief Set the SP6 field to a new value. */
#define AIPS_WR_PACRD_SP6(base, value) (AIPS_RMW_PACRD(base, AIPS_PACRD_SP6_MASK, AIPS_PACRD_SP6(value)))
#define AIPS_BWR_PACRD_SP6(base, value) (BME_BFI32(&AIPS_PACRD_REG(base), ((uint32_t)(value) << AIPS_PACRD_SP6_SHIFT), AIPS_PACRD_SP6_SHIFT, AIPS_PACRD_SP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRD, field TP5[8] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRD_TP5 field. */
#define AIPS_RD_PACRD_TP5(base) ((AIPS_PACRD_REG(base) & AIPS_PACRD_TP5_MASK) >> AIPS_PACRD_TP5_SHIFT)
#define AIPS_BRD_PACRD_TP5(base) (BME_UBFX32(&AIPS_PACRD_REG(base), AIPS_PACRD_TP5_SHIFT, AIPS_PACRD_TP5_WIDTH))

/*! @brief Set the TP5 field to a new value. */
#define AIPS_WR_PACRD_TP5(base, value) (AIPS_RMW_PACRD(base, AIPS_PACRD_TP5_MASK, AIPS_PACRD_TP5(value)))
#define AIPS_BWR_PACRD_TP5(base, value) (BME_BFI32(&AIPS_PACRD_REG(base), ((uint32_t)(value) << AIPS_PACRD_TP5_SHIFT), AIPS_PACRD_TP5_SHIFT, AIPS_PACRD_TP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRD, field WP5[9] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRD_WP5 field. */
#define AIPS_RD_PACRD_WP5(base) ((AIPS_PACRD_REG(base) & AIPS_PACRD_WP5_MASK) >> AIPS_PACRD_WP5_SHIFT)
#define AIPS_BRD_PACRD_WP5(base) (BME_UBFX32(&AIPS_PACRD_REG(base), AIPS_PACRD_WP5_SHIFT, AIPS_PACRD_WP5_WIDTH))

/*! @brief Set the WP5 field to a new value. */
#define AIPS_WR_PACRD_WP5(base, value) (AIPS_RMW_PACRD(base, AIPS_PACRD_WP5_MASK, AIPS_PACRD_WP5(value)))
#define AIPS_BWR_PACRD_WP5(base, value) (BME_BFI32(&AIPS_PACRD_REG(base), ((uint32_t)(value) << AIPS_PACRD_WP5_SHIFT), AIPS_PACRD_WP5_SHIFT, AIPS_PACRD_WP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRD, field SP5[10] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRD_SP5 field. */
#define AIPS_RD_PACRD_SP5(base) ((AIPS_PACRD_REG(base) & AIPS_PACRD_SP5_MASK) >> AIPS_PACRD_SP5_SHIFT)
#define AIPS_BRD_PACRD_SP5(base) (BME_UBFX32(&AIPS_PACRD_REG(base), AIPS_PACRD_SP5_SHIFT, AIPS_PACRD_SP5_WIDTH))

/*! @brief Set the SP5 field to a new value. */
#define AIPS_WR_PACRD_SP5(base, value) (AIPS_RMW_PACRD(base, AIPS_PACRD_SP5_MASK, AIPS_PACRD_SP5(value)))
#define AIPS_BWR_PACRD_SP5(base, value) (BME_BFI32(&AIPS_PACRD_REG(base), ((uint32_t)(value) << AIPS_PACRD_SP5_SHIFT), AIPS_PACRD_SP5_SHIFT, AIPS_PACRD_SP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRD, field TP4[12] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRD_TP4 field. */
#define AIPS_RD_PACRD_TP4(base) ((AIPS_PACRD_REG(base) & AIPS_PACRD_TP4_MASK) >> AIPS_PACRD_TP4_SHIFT)
#define AIPS_BRD_PACRD_TP4(base) (BME_UBFX32(&AIPS_PACRD_REG(base), AIPS_PACRD_TP4_SHIFT, AIPS_PACRD_TP4_WIDTH))

/*! @brief Set the TP4 field to a new value. */
#define AIPS_WR_PACRD_TP4(base, value) (AIPS_RMW_PACRD(base, AIPS_PACRD_TP4_MASK, AIPS_PACRD_TP4(value)))
#define AIPS_BWR_PACRD_TP4(base, value) (BME_BFI32(&AIPS_PACRD_REG(base), ((uint32_t)(value) << AIPS_PACRD_TP4_SHIFT), AIPS_PACRD_TP4_SHIFT, AIPS_PACRD_TP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRD, field WP4[13] (RW)
 *
 * Determines whether the peripheral allows write accesss. When this bit is set
 * and a write access is attempted, access terminates with an error response and
 * no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRD_WP4 field. */
#define AIPS_RD_PACRD_WP4(base) ((AIPS_PACRD_REG(base) & AIPS_PACRD_WP4_MASK) >> AIPS_PACRD_WP4_SHIFT)
#define AIPS_BRD_PACRD_WP4(base) (BME_UBFX32(&AIPS_PACRD_REG(base), AIPS_PACRD_WP4_SHIFT, AIPS_PACRD_WP4_WIDTH))

/*! @brief Set the WP4 field to a new value. */
#define AIPS_WR_PACRD_WP4(base, value) (AIPS_RMW_PACRD(base, AIPS_PACRD_WP4_MASK, AIPS_PACRD_WP4(value)))
#define AIPS_BWR_PACRD_WP4(base, value) (BME_BFI32(&AIPS_PACRD_REG(base), ((uint32_t)(value) << AIPS_PACRD_WP4_SHIFT), AIPS_PACRD_WP4_SHIFT, AIPS_PACRD_WP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRD, field SP4[14] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRD_SP4 field. */
#define AIPS_RD_PACRD_SP4(base) ((AIPS_PACRD_REG(base) & AIPS_PACRD_SP4_MASK) >> AIPS_PACRD_SP4_SHIFT)
#define AIPS_BRD_PACRD_SP4(base) (BME_UBFX32(&AIPS_PACRD_REG(base), AIPS_PACRD_SP4_SHIFT, AIPS_PACRD_SP4_WIDTH))

/*! @brief Set the SP4 field to a new value. */
#define AIPS_WR_PACRD_SP4(base, value) (AIPS_RMW_PACRD(base, AIPS_PACRD_SP4_MASK, AIPS_PACRD_SP4(value)))
#define AIPS_BWR_PACRD_SP4(base, value) (BME_BFI32(&AIPS_PACRD_REG(base), ((uint32_t)(value) << AIPS_PACRD_SP4_SHIFT), AIPS_PACRD_SP4_SHIFT, AIPS_PACRD_SP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRD, field TP3[16] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRD_TP3 field. */
#define AIPS_RD_PACRD_TP3(base) ((AIPS_PACRD_REG(base) & AIPS_PACRD_TP3_MASK) >> AIPS_PACRD_TP3_SHIFT)
#define AIPS_BRD_PACRD_TP3(base) (BME_UBFX32(&AIPS_PACRD_REG(base), AIPS_PACRD_TP3_SHIFT, AIPS_PACRD_TP3_WIDTH))

/*! @brief Set the TP3 field to a new value. */
#define AIPS_WR_PACRD_TP3(base, value) (AIPS_RMW_PACRD(base, AIPS_PACRD_TP3_MASK, AIPS_PACRD_TP3(value)))
#define AIPS_BWR_PACRD_TP3(base, value) (BME_BFI32(&AIPS_PACRD_REG(base), ((uint32_t)(value) << AIPS_PACRD_TP3_SHIFT), AIPS_PACRD_TP3_SHIFT, AIPS_PACRD_TP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRD, field WP3[17] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRD_WP3 field. */
#define AIPS_RD_PACRD_WP3(base) ((AIPS_PACRD_REG(base) & AIPS_PACRD_WP3_MASK) >> AIPS_PACRD_WP3_SHIFT)
#define AIPS_BRD_PACRD_WP3(base) (BME_UBFX32(&AIPS_PACRD_REG(base), AIPS_PACRD_WP3_SHIFT, AIPS_PACRD_WP3_WIDTH))

/*! @brief Set the WP3 field to a new value. */
#define AIPS_WR_PACRD_WP3(base, value) (AIPS_RMW_PACRD(base, AIPS_PACRD_WP3_MASK, AIPS_PACRD_WP3(value)))
#define AIPS_BWR_PACRD_WP3(base, value) (BME_BFI32(&AIPS_PACRD_REG(base), ((uint32_t)(value) << AIPS_PACRD_WP3_SHIFT), AIPS_PACRD_WP3_SHIFT, AIPS_PACRD_WP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRD, field SP3[18] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRD_SP3 field. */
#define AIPS_RD_PACRD_SP3(base) ((AIPS_PACRD_REG(base) & AIPS_PACRD_SP3_MASK) >> AIPS_PACRD_SP3_SHIFT)
#define AIPS_BRD_PACRD_SP3(base) (BME_UBFX32(&AIPS_PACRD_REG(base), AIPS_PACRD_SP3_SHIFT, AIPS_PACRD_SP3_WIDTH))

/*! @brief Set the SP3 field to a new value. */
#define AIPS_WR_PACRD_SP3(base, value) (AIPS_RMW_PACRD(base, AIPS_PACRD_SP3_MASK, AIPS_PACRD_SP3(value)))
#define AIPS_BWR_PACRD_SP3(base, value) (BME_BFI32(&AIPS_PACRD_REG(base), ((uint32_t)(value) << AIPS_PACRD_SP3_SHIFT), AIPS_PACRD_SP3_SHIFT, AIPS_PACRD_SP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRD, field TP2[20] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRD_TP2 field. */
#define AIPS_RD_PACRD_TP2(base) ((AIPS_PACRD_REG(base) & AIPS_PACRD_TP2_MASK) >> AIPS_PACRD_TP2_SHIFT)
#define AIPS_BRD_PACRD_TP2(base) (BME_UBFX32(&AIPS_PACRD_REG(base), AIPS_PACRD_TP2_SHIFT, AIPS_PACRD_TP2_WIDTH))

/*! @brief Set the TP2 field to a new value. */
#define AIPS_WR_PACRD_TP2(base, value) (AIPS_RMW_PACRD(base, AIPS_PACRD_TP2_MASK, AIPS_PACRD_TP2(value)))
#define AIPS_BWR_PACRD_TP2(base, value) (BME_BFI32(&AIPS_PACRD_REG(base), ((uint32_t)(value) << AIPS_PACRD_TP2_SHIFT), AIPS_PACRD_TP2_SHIFT, AIPS_PACRD_TP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRD, field WP2[21] (RW)
 *
 * Determines whether the peripheral allows write accesss. When this bit is set
 * and a write access is attempted, access terminates with an error response and
 * no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRD_WP2 field. */
#define AIPS_RD_PACRD_WP2(base) ((AIPS_PACRD_REG(base) & AIPS_PACRD_WP2_MASK) >> AIPS_PACRD_WP2_SHIFT)
#define AIPS_BRD_PACRD_WP2(base) (BME_UBFX32(&AIPS_PACRD_REG(base), AIPS_PACRD_WP2_SHIFT, AIPS_PACRD_WP2_WIDTH))

/*! @brief Set the WP2 field to a new value. */
#define AIPS_WR_PACRD_WP2(base, value) (AIPS_RMW_PACRD(base, AIPS_PACRD_WP2_MASK, AIPS_PACRD_WP2(value)))
#define AIPS_BWR_PACRD_WP2(base, value) (BME_BFI32(&AIPS_PACRD_REG(base), ((uint32_t)(value) << AIPS_PACRD_WP2_SHIFT), AIPS_PACRD_WP2_SHIFT, AIPS_PACRD_WP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRD, field SP2[22] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRD_SP2 field. */
#define AIPS_RD_PACRD_SP2(base) ((AIPS_PACRD_REG(base) & AIPS_PACRD_SP2_MASK) >> AIPS_PACRD_SP2_SHIFT)
#define AIPS_BRD_PACRD_SP2(base) (BME_UBFX32(&AIPS_PACRD_REG(base), AIPS_PACRD_SP2_SHIFT, AIPS_PACRD_SP2_WIDTH))

/*! @brief Set the SP2 field to a new value. */
#define AIPS_WR_PACRD_SP2(base, value) (AIPS_RMW_PACRD(base, AIPS_PACRD_SP2_MASK, AIPS_PACRD_SP2(value)))
#define AIPS_BWR_PACRD_SP2(base, value) (BME_BFI32(&AIPS_PACRD_REG(base), ((uint32_t)(value) << AIPS_PACRD_SP2_SHIFT), AIPS_PACRD_SP2_SHIFT, AIPS_PACRD_SP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRD, field TP1[24] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRD_TP1 field. */
#define AIPS_RD_PACRD_TP1(base) ((AIPS_PACRD_REG(base) & AIPS_PACRD_TP1_MASK) >> AIPS_PACRD_TP1_SHIFT)
#define AIPS_BRD_PACRD_TP1(base) (BME_UBFX32(&AIPS_PACRD_REG(base), AIPS_PACRD_TP1_SHIFT, AIPS_PACRD_TP1_WIDTH))

/*! @brief Set the TP1 field to a new value. */
#define AIPS_WR_PACRD_TP1(base, value) (AIPS_RMW_PACRD(base, AIPS_PACRD_TP1_MASK, AIPS_PACRD_TP1(value)))
#define AIPS_BWR_PACRD_TP1(base, value) (BME_BFI32(&AIPS_PACRD_REG(base), ((uint32_t)(value) << AIPS_PACRD_TP1_SHIFT), AIPS_PACRD_TP1_SHIFT, AIPS_PACRD_TP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRD, field WP1[25] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRD_WP1 field. */
#define AIPS_RD_PACRD_WP1(base) ((AIPS_PACRD_REG(base) & AIPS_PACRD_WP1_MASK) >> AIPS_PACRD_WP1_SHIFT)
#define AIPS_BRD_PACRD_WP1(base) (BME_UBFX32(&AIPS_PACRD_REG(base), AIPS_PACRD_WP1_SHIFT, AIPS_PACRD_WP1_WIDTH))

/*! @brief Set the WP1 field to a new value. */
#define AIPS_WR_PACRD_WP1(base, value) (AIPS_RMW_PACRD(base, AIPS_PACRD_WP1_MASK, AIPS_PACRD_WP1(value)))
#define AIPS_BWR_PACRD_WP1(base, value) (BME_BFI32(&AIPS_PACRD_REG(base), ((uint32_t)(value) << AIPS_PACRD_WP1_SHIFT), AIPS_PACRD_WP1_SHIFT, AIPS_PACRD_WP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRD, field SP1[26] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRD_SP1 field. */
#define AIPS_RD_PACRD_SP1(base) ((AIPS_PACRD_REG(base) & AIPS_PACRD_SP1_MASK) >> AIPS_PACRD_SP1_SHIFT)
#define AIPS_BRD_PACRD_SP1(base) (BME_UBFX32(&AIPS_PACRD_REG(base), AIPS_PACRD_SP1_SHIFT, AIPS_PACRD_SP1_WIDTH))

/*! @brief Set the SP1 field to a new value. */
#define AIPS_WR_PACRD_SP1(base, value) (AIPS_RMW_PACRD(base, AIPS_PACRD_SP1_MASK, AIPS_PACRD_SP1(value)))
#define AIPS_BWR_PACRD_SP1(base, value) (BME_BFI32(&AIPS_PACRD_REG(base), ((uint32_t)(value) << AIPS_PACRD_SP1_SHIFT), AIPS_PACRD_SP1_SHIFT, AIPS_PACRD_SP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRD, field TP0[28] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRD_TP0 field. */
#define AIPS_RD_PACRD_TP0(base) ((AIPS_PACRD_REG(base) & AIPS_PACRD_TP0_MASK) >> AIPS_PACRD_TP0_SHIFT)
#define AIPS_BRD_PACRD_TP0(base) (BME_UBFX32(&AIPS_PACRD_REG(base), AIPS_PACRD_TP0_SHIFT, AIPS_PACRD_TP0_WIDTH))

/*! @brief Set the TP0 field to a new value. */
#define AIPS_WR_PACRD_TP0(base, value) (AIPS_RMW_PACRD(base, AIPS_PACRD_TP0_MASK, AIPS_PACRD_TP0(value)))
#define AIPS_BWR_PACRD_TP0(base, value) (BME_BFI32(&AIPS_PACRD_REG(base), ((uint32_t)(value) << AIPS_PACRD_TP0_SHIFT), AIPS_PACRD_TP0_SHIFT, AIPS_PACRD_TP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRD, field WP0[29] (RW)
 *
 * Determines whether the peripheral allows write accesss. When this bit is set
 * and a write access is attempted, access terminates with an error response and
 * no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRD_WP0 field. */
#define AIPS_RD_PACRD_WP0(base) ((AIPS_PACRD_REG(base) & AIPS_PACRD_WP0_MASK) >> AIPS_PACRD_WP0_SHIFT)
#define AIPS_BRD_PACRD_WP0(base) (BME_UBFX32(&AIPS_PACRD_REG(base), AIPS_PACRD_WP0_SHIFT, AIPS_PACRD_WP0_WIDTH))

/*! @brief Set the WP0 field to a new value. */
#define AIPS_WR_PACRD_WP0(base, value) (AIPS_RMW_PACRD(base, AIPS_PACRD_WP0_MASK, AIPS_PACRD_WP0(value)))
#define AIPS_BWR_PACRD_WP0(base, value) (BME_BFI32(&AIPS_PACRD_REG(base), ((uint32_t)(value) << AIPS_PACRD_WP0_SHIFT), AIPS_PACRD_WP0_SHIFT, AIPS_PACRD_WP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRD, field SP0[30] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRD_SP0 field. */
#define AIPS_RD_PACRD_SP0(base) ((AIPS_PACRD_REG(base) & AIPS_PACRD_SP0_MASK) >> AIPS_PACRD_SP0_SHIFT)
#define AIPS_BRD_PACRD_SP0(base) (BME_UBFX32(&AIPS_PACRD_REG(base), AIPS_PACRD_SP0_SHIFT, AIPS_PACRD_SP0_WIDTH))

/*! @brief Set the SP0 field to a new value. */
#define AIPS_WR_PACRD_SP0(base, value) (AIPS_RMW_PACRD(base, AIPS_PACRD_SP0_MASK, AIPS_PACRD_SP0(value)))
#define AIPS_BWR_PACRD_SP0(base, value) (BME_BFI32(&AIPS_PACRD_REG(base), ((uint32_t)(value) << AIPS_PACRD_SP0_SHIFT), AIPS_PACRD_SP0_SHIFT, AIPS_PACRD_SP0_WIDTH))
/*@}*/

/*******************************************************************************
 * AIPS_PACRE - Peripheral Access Control Register
 ******************************************************************************/

/*!
 * @brief AIPS_PACRE - Peripheral Access Control Register (RW)
 *
 * Reset value: 0x44000000U
 *
 * This section describes PACR registers E-P, which control peripheral slots
 * 32-127. See PACRPeripheral Access Control Register for the description of these
 * registers.
 */
/*!
 * @name Constants and macros for entire AIPS_PACRE register
 */
/*@{*/
#define AIPS_RD_PACRE(base)      (AIPS_PACRE_REG(base))
#define AIPS_WR_PACRE(base, value) (AIPS_PACRE_REG(base) = (value))
#define AIPS_RMW_PACRE(base, mask, value) (AIPS_WR_PACRE(base, (AIPS_RD_PACRE(base) & ~(mask)) | (value)))
#define AIPS_SET_PACRE(base, value) (BME_OR32(&AIPS_PACRE_REG(base), (uint32_t)(value)))
#define AIPS_CLR_PACRE(base, value) (BME_AND32(&AIPS_PACRE_REG(base), (uint32_t)(~(value))))
#define AIPS_TOG_PACRE(base, value) (BME_XOR32(&AIPS_PACRE_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual AIPS_PACRE bitfields
 */

/*!
 * @name Register AIPS_PACRE, field TP7[0] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRE_TP7 field. */
#define AIPS_RD_PACRE_TP7(base) ((AIPS_PACRE_REG(base) & AIPS_PACRE_TP7_MASK) >> AIPS_PACRE_TP7_SHIFT)
#define AIPS_BRD_PACRE_TP7(base) (BME_UBFX32(&AIPS_PACRE_REG(base), AIPS_PACRE_TP7_SHIFT, AIPS_PACRE_TP7_WIDTH))

/*! @brief Set the TP7 field to a new value. */
#define AIPS_WR_PACRE_TP7(base, value) (AIPS_RMW_PACRE(base, AIPS_PACRE_TP7_MASK, AIPS_PACRE_TP7(value)))
#define AIPS_BWR_PACRE_TP7(base, value) (BME_BFI32(&AIPS_PACRE_REG(base), ((uint32_t)(value) << AIPS_PACRE_TP7_SHIFT), AIPS_PACRE_TP7_SHIFT, AIPS_PACRE_TP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRE, field WP7[1] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRE_WP7 field. */
#define AIPS_RD_PACRE_WP7(base) ((AIPS_PACRE_REG(base) & AIPS_PACRE_WP7_MASK) >> AIPS_PACRE_WP7_SHIFT)
#define AIPS_BRD_PACRE_WP7(base) (BME_UBFX32(&AIPS_PACRE_REG(base), AIPS_PACRE_WP7_SHIFT, AIPS_PACRE_WP7_WIDTH))

/*! @brief Set the WP7 field to a new value. */
#define AIPS_WR_PACRE_WP7(base, value) (AIPS_RMW_PACRE(base, AIPS_PACRE_WP7_MASK, AIPS_PACRE_WP7(value)))
#define AIPS_BWR_PACRE_WP7(base, value) (BME_BFI32(&AIPS_PACRE_REG(base), ((uint32_t)(value) << AIPS_PACRE_WP7_SHIFT), AIPS_PACRE_WP7_SHIFT, AIPS_PACRE_WP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRE, field SP7[2] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRE_SP7 field. */
#define AIPS_RD_PACRE_SP7(base) ((AIPS_PACRE_REG(base) & AIPS_PACRE_SP7_MASK) >> AIPS_PACRE_SP7_SHIFT)
#define AIPS_BRD_PACRE_SP7(base) (BME_UBFX32(&AIPS_PACRE_REG(base), AIPS_PACRE_SP7_SHIFT, AIPS_PACRE_SP7_WIDTH))

/*! @brief Set the SP7 field to a new value. */
#define AIPS_WR_PACRE_SP7(base, value) (AIPS_RMW_PACRE(base, AIPS_PACRE_SP7_MASK, AIPS_PACRE_SP7(value)))
#define AIPS_BWR_PACRE_SP7(base, value) (BME_BFI32(&AIPS_PACRE_REG(base), ((uint32_t)(value) << AIPS_PACRE_SP7_SHIFT), AIPS_PACRE_SP7_SHIFT, AIPS_PACRE_SP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRE, field TP6[4] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRE_TP6 field. */
#define AIPS_RD_PACRE_TP6(base) ((AIPS_PACRE_REG(base) & AIPS_PACRE_TP6_MASK) >> AIPS_PACRE_TP6_SHIFT)
#define AIPS_BRD_PACRE_TP6(base) (BME_UBFX32(&AIPS_PACRE_REG(base), AIPS_PACRE_TP6_SHIFT, AIPS_PACRE_TP6_WIDTH))

/*! @brief Set the TP6 field to a new value. */
#define AIPS_WR_PACRE_TP6(base, value) (AIPS_RMW_PACRE(base, AIPS_PACRE_TP6_MASK, AIPS_PACRE_TP6(value)))
#define AIPS_BWR_PACRE_TP6(base, value) (BME_BFI32(&AIPS_PACRE_REG(base), ((uint32_t)(value) << AIPS_PACRE_TP6_SHIFT), AIPS_PACRE_TP6_SHIFT, AIPS_PACRE_TP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRE, field WP6[5] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRE_WP6 field. */
#define AIPS_RD_PACRE_WP6(base) ((AIPS_PACRE_REG(base) & AIPS_PACRE_WP6_MASK) >> AIPS_PACRE_WP6_SHIFT)
#define AIPS_BRD_PACRE_WP6(base) (BME_UBFX32(&AIPS_PACRE_REG(base), AIPS_PACRE_WP6_SHIFT, AIPS_PACRE_WP6_WIDTH))

/*! @brief Set the WP6 field to a new value. */
#define AIPS_WR_PACRE_WP6(base, value) (AIPS_RMW_PACRE(base, AIPS_PACRE_WP6_MASK, AIPS_PACRE_WP6(value)))
#define AIPS_BWR_PACRE_WP6(base, value) (BME_BFI32(&AIPS_PACRE_REG(base), ((uint32_t)(value) << AIPS_PACRE_WP6_SHIFT), AIPS_PACRE_WP6_SHIFT, AIPS_PACRE_WP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRE, field SP6[6] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRE_SP6 field. */
#define AIPS_RD_PACRE_SP6(base) ((AIPS_PACRE_REG(base) & AIPS_PACRE_SP6_MASK) >> AIPS_PACRE_SP6_SHIFT)
#define AIPS_BRD_PACRE_SP6(base) (BME_UBFX32(&AIPS_PACRE_REG(base), AIPS_PACRE_SP6_SHIFT, AIPS_PACRE_SP6_WIDTH))

/*! @brief Set the SP6 field to a new value. */
#define AIPS_WR_PACRE_SP6(base, value) (AIPS_RMW_PACRE(base, AIPS_PACRE_SP6_MASK, AIPS_PACRE_SP6(value)))
#define AIPS_BWR_PACRE_SP6(base, value) (BME_BFI32(&AIPS_PACRE_REG(base), ((uint32_t)(value) << AIPS_PACRE_SP6_SHIFT), AIPS_PACRE_SP6_SHIFT, AIPS_PACRE_SP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRE, field TP5[8] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRE_TP5 field. */
#define AIPS_RD_PACRE_TP5(base) ((AIPS_PACRE_REG(base) & AIPS_PACRE_TP5_MASK) >> AIPS_PACRE_TP5_SHIFT)
#define AIPS_BRD_PACRE_TP5(base) (BME_UBFX32(&AIPS_PACRE_REG(base), AIPS_PACRE_TP5_SHIFT, AIPS_PACRE_TP5_WIDTH))

/*! @brief Set the TP5 field to a new value. */
#define AIPS_WR_PACRE_TP5(base, value) (AIPS_RMW_PACRE(base, AIPS_PACRE_TP5_MASK, AIPS_PACRE_TP5(value)))
#define AIPS_BWR_PACRE_TP5(base, value) (BME_BFI32(&AIPS_PACRE_REG(base), ((uint32_t)(value) << AIPS_PACRE_TP5_SHIFT), AIPS_PACRE_TP5_SHIFT, AIPS_PACRE_TP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRE, field WP5[9] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRE_WP5 field. */
#define AIPS_RD_PACRE_WP5(base) ((AIPS_PACRE_REG(base) & AIPS_PACRE_WP5_MASK) >> AIPS_PACRE_WP5_SHIFT)
#define AIPS_BRD_PACRE_WP5(base) (BME_UBFX32(&AIPS_PACRE_REG(base), AIPS_PACRE_WP5_SHIFT, AIPS_PACRE_WP5_WIDTH))

/*! @brief Set the WP5 field to a new value. */
#define AIPS_WR_PACRE_WP5(base, value) (AIPS_RMW_PACRE(base, AIPS_PACRE_WP5_MASK, AIPS_PACRE_WP5(value)))
#define AIPS_BWR_PACRE_WP5(base, value) (BME_BFI32(&AIPS_PACRE_REG(base), ((uint32_t)(value) << AIPS_PACRE_WP5_SHIFT), AIPS_PACRE_WP5_SHIFT, AIPS_PACRE_WP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRE, field SP5[10] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRE_SP5 field. */
#define AIPS_RD_PACRE_SP5(base) ((AIPS_PACRE_REG(base) & AIPS_PACRE_SP5_MASK) >> AIPS_PACRE_SP5_SHIFT)
#define AIPS_BRD_PACRE_SP5(base) (BME_UBFX32(&AIPS_PACRE_REG(base), AIPS_PACRE_SP5_SHIFT, AIPS_PACRE_SP5_WIDTH))

/*! @brief Set the SP5 field to a new value. */
#define AIPS_WR_PACRE_SP5(base, value) (AIPS_RMW_PACRE(base, AIPS_PACRE_SP5_MASK, AIPS_PACRE_SP5(value)))
#define AIPS_BWR_PACRE_SP5(base, value) (BME_BFI32(&AIPS_PACRE_REG(base), ((uint32_t)(value) << AIPS_PACRE_SP5_SHIFT), AIPS_PACRE_SP5_SHIFT, AIPS_PACRE_SP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRE, field TP4[12] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRE_TP4 field. */
#define AIPS_RD_PACRE_TP4(base) ((AIPS_PACRE_REG(base) & AIPS_PACRE_TP4_MASK) >> AIPS_PACRE_TP4_SHIFT)
#define AIPS_BRD_PACRE_TP4(base) (BME_UBFX32(&AIPS_PACRE_REG(base), AIPS_PACRE_TP4_SHIFT, AIPS_PACRE_TP4_WIDTH))

/*! @brief Set the TP4 field to a new value. */
#define AIPS_WR_PACRE_TP4(base, value) (AIPS_RMW_PACRE(base, AIPS_PACRE_TP4_MASK, AIPS_PACRE_TP4(value)))
#define AIPS_BWR_PACRE_TP4(base, value) (BME_BFI32(&AIPS_PACRE_REG(base), ((uint32_t)(value) << AIPS_PACRE_TP4_SHIFT), AIPS_PACRE_TP4_SHIFT, AIPS_PACRE_TP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRE, field WP4[13] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRE_WP4 field. */
#define AIPS_RD_PACRE_WP4(base) ((AIPS_PACRE_REG(base) & AIPS_PACRE_WP4_MASK) >> AIPS_PACRE_WP4_SHIFT)
#define AIPS_BRD_PACRE_WP4(base) (BME_UBFX32(&AIPS_PACRE_REG(base), AIPS_PACRE_WP4_SHIFT, AIPS_PACRE_WP4_WIDTH))

/*! @brief Set the WP4 field to a new value. */
#define AIPS_WR_PACRE_WP4(base, value) (AIPS_RMW_PACRE(base, AIPS_PACRE_WP4_MASK, AIPS_PACRE_WP4(value)))
#define AIPS_BWR_PACRE_WP4(base, value) (BME_BFI32(&AIPS_PACRE_REG(base), ((uint32_t)(value) << AIPS_PACRE_WP4_SHIFT), AIPS_PACRE_WP4_SHIFT, AIPS_PACRE_WP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRE, field SP4[14] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRE_SP4 field. */
#define AIPS_RD_PACRE_SP4(base) ((AIPS_PACRE_REG(base) & AIPS_PACRE_SP4_MASK) >> AIPS_PACRE_SP4_SHIFT)
#define AIPS_BRD_PACRE_SP4(base) (BME_UBFX32(&AIPS_PACRE_REG(base), AIPS_PACRE_SP4_SHIFT, AIPS_PACRE_SP4_WIDTH))

/*! @brief Set the SP4 field to a new value. */
#define AIPS_WR_PACRE_SP4(base, value) (AIPS_RMW_PACRE(base, AIPS_PACRE_SP4_MASK, AIPS_PACRE_SP4(value)))
#define AIPS_BWR_PACRE_SP4(base, value) (BME_BFI32(&AIPS_PACRE_REG(base), ((uint32_t)(value) << AIPS_PACRE_SP4_SHIFT), AIPS_PACRE_SP4_SHIFT, AIPS_PACRE_SP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRE, field TP3[16] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRE_TP3 field. */
#define AIPS_RD_PACRE_TP3(base) ((AIPS_PACRE_REG(base) & AIPS_PACRE_TP3_MASK) >> AIPS_PACRE_TP3_SHIFT)
#define AIPS_BRD_PACRE_TP3(base) (BME_UBFX32(&AIPS_PACRE_REG(base), AIPS_PACRE_TP3_SHIFT, AIPS_PACRE_TP3_WIDTH))

/*! @brief Set the TP3 field to a new value. */
#define AIPS_WR_PACRE_TP3(base, value) (AIPS_RMW_PACRE(base, AIPS_PACRE_TP3_MASK, AIPS_PACRE_TP3(value)))
#define AIPS_BWR_PACRE_TP3(base, value) (BME_BFI32(&AIPS_PACRE_REG(base), ((uint32_t)(value) << AIPS_PACRE_TP3_SHIFT), AIPS_PACRE_TP3_SHIFT, AIPS_PACRE_TP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRE, field WP3[17] (RW)
 *
 * Determines whether the peripheral allows write accesss. When this bit is set
 * and a write access is attempted, access terminates with an error response and
 * no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRE_WP3 field. */
#define AIPS_RD_PACRE_WP3(base) ((AIPS_PACRE_REG(base) & AIPS_PACRE_WP3_MASK) >> AIPS_PACRE_WP3_SHIFT)
#define AIPS_BRD_PACRE_WP3(base) (BME_UBFX32(&AIPS_PACRE_REG(base), AIPS_PACRE_WP3_SHIFT, AIPS_PACRE_WP3_WIDTH))

/*! @brief Set the WP3 field to a new value. */
#define AIPS_WR_PACRE_WP3(base, value) (AIPS_RMW_PACRE(base, AIPS_PACRE_WP3_MASK, AIPS_PACRE_WP3(value)))
#define AIPS_BWR_PACRE_WP3(base, value) (BME_BFI32(&AIPS_PACRE_REG(base), ((uint32_t)(value) << AIPS_PACRE_WP3_SHIFT), AIPS_PACRE_WP3_SHIFT, AIPS_PACRE_WP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRE, field SP3[18] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRE_SP3 field. */
#define AIPS_RD_PACRE_SP3(base) ((AIPS_PACRE_REG(base) & AIPS_PACRE_SP3_MASK) >> AIPS_PACRE_SP3_SHIFT)
#define AIPS_BRD_PACRE_SP3(base) (BME_UBFX32(&AIPS_PACRE_REG(base), AIPS_PACRE_SP3_SHIFT, AIPS_PACRE_SP3_WIDTH))

/*! @brief Set the SP3 field to a new value. */
#define AIPS_WR_PACRE_SP3(base, value) (AIPS_RMW_PACRE(base, AIPS_PACRE_SP3_MASK, AIPS_PACRE_SP3(value)))
#define AIPS_BWR_PACRE_SP3(base, value) (BME_BFI32(&AIPS_PACRE_REG(base), ((uint32_t)(value) << AIPS_PACRE_SP3_SHIFT), AIPS_PACRE_SP3_SHIFT, AIPS_PACRE_SP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRE, field TP2[20] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRE_TP2 field. */
#define AIPS_RD_PACRE_TP2(base) ((AIPS_PACRE_REG(base) & AIPS_PACRE_TP2_MASK) >> AIPS_PACRE_TP2_SHIFT)
#define AIPS_BRD_PACRE_TP2(base) (BME_UBFX32(&AIPS_PACRE_REG(base), AIPS_PACRE_TP2_SHIFT, AIPS_PACRE_TP2_WIDTH))

/*! @brief Set the TP2 field to a new value. */
#define AIPS_WR_PACRE_TP2(base, value) (AIPS_RMW_PACRE(base, AIPS_PACRE_TP2_MASK, AIPS_PACRE_TP2(value)))
#define AIPS_BWR_PACRE_TP2(base, value) (BME_BFI32(&AIPS_PACRE_REG(base), ((uint32_t)(value) << AIPS_PACRE_TP2_SHIFT), AIPS_PACRE_TP2_SHIFT, AIPS_PACRE_TP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRE, field WP2[21] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRE_WP2 field. */
#define AIPS_RD_PACRE_WP2(base) ((AIPS_PACRE_REG(base) & AIPS_PACRE_WP2_MASK) >> AIPS_PACRE_WP2_SHIFT)
#define AIPS_BRD_PACRE_WP2(base) (BME_UBFX32(&AIPS_PACRE_REG(base), AIPS_PACRE_WP2_SHIFT, AIPS_PACRE_WP2_WIDTH))

/*! @brief Set the WP2 field to a new value. */
#define AIPS_WR_PACRE_WP2(base, value) (AIPS_RMW_PACRE(base, AIPS_PACRE_WP2_MASK, AIPS_PACRE_WP2(value)))
#define AIPS_BWR_PACRE_WP2(base, value) (BME_BFI32(&AIPS_PACRE_REG(base), ((uint32_t)(value) << AIPS_PACRE_WP2_SHIFT), AIPS_PACRE_WP2_SHIFT, AIPS_PACRE_WP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRE, field SP2[22] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRE_SP2 field. */
#define AIPS_RD_PACRE_SP2(base) ((AIPS_PACRE_REG(base) & AIPS_PACRE_SP2_MASK) >> AIPS_PACRE_SP2_SHIFT)
#define AIPS_BRD_PACRE_SP2(base) (BME_UBFX32(&AIPS_PACRE_REG(base), AIPS_PACRE_SP2_SHIFT, AIPS_PACRE_SP2_WIDTH))

/*! @brief Set the SP2 field to a new value. */
#define AIPS_WR_PACRE_SP2(base, value) (AIPS_RMW_PACRE(base, AIPS_PACRE_SP2_MASK, AIPS_PACRE_SP2(value)))
#define AIPS_BWR_PACRE_SP2(base, value) (BME_BFI32(&AIPS_PACRE_REG(base), ((uint32_t)(value) << AIPS_PACRE_SP2_SHIFT), AIPS_PACRE_SP2_SHIFT, AIPS_PACRE_SP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRE, field TP1[24] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRE_TP1 field. */
#define AIPS_RD_PACRE_TP1(base) ((AIPS_PACRE_REG(base) & AIPS_PACRE_TP1_MASK) >> AIPS_PACRE_TP1_SHIFT)
#define AIPS_BRD_PACRE_TP1(base) (BME_UBFX32(&AIPS_PACRE_REG(base), AIPS_PACRE_TP1_SHIFT, AIPS_PACRE_TP1_WIDTH))

/*! @brief Set the TP1 field to a new value. */
#define AIPS_WR_PACRE_TP1(base, value) (AIPS_RMW_PACRE(base, AIPS_PACRE_TP1_MASK, AIPS_PACRE_TP1(value)))
#define AIPS_BWR_PACRE_TP1(base, value) (BME_BFI32(&AIPS_PACRE_REG(base), ((uint32_t)(value) << AIPS_PACRE_TP1_SHIFT), AIPS_PACRE_TP1_SHIFT, AIPS_PACRE_TP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRE, field WP1[25] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRE_WP1 field. */
#define AIPS_RD_PACRE_WP1(base) ((AIPS_PACRE_REG(base) & AIPS_PACRE_WP1_MASK) >> AIPS_PACRE_WP1_SHIFT)
#define AIPS_BRD_PACRE_WP1(base) (BME_UBFX32(&AIPS_PACRE_REG(base), AIPS_PACRE_WP1_SHIFT, AIPS_PACRE_WP1_WIDTH))

/*! @brief Set the WP1 field to a new value. */
#define AIPS_WR_PACRE_WP1(base, value) (AIPS_RMW_PACRE(base, AIPS_PACRE_WP1_MASK, AIPS_PACRE_WP1(value)))
#define AIPS_BWR_PACRE_WP1(base, value) (BME_BFI32(&AIPS_PACRE_REG(base), ((uint32_t)(value) << AIPS_PACRE_WP1_SHIFT), AIPS_PACRE_WP1_SHIFT, AIPS_PACRE_WP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRE, field SP1[26] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master must
 * be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRE_SP1 field. */
#define AIPS_RD_PACRE_SP1(base) ((AIPS_PACRE_REG(base) & AIPS_PACRE_SP1_MASK) >> AIPS_PACRE_SP1_SHIFT)
#define AIPS_BRD_PACRE_SP1(base) (BME_UBFX32(&AIPS_PACRE_REG(base), AIPS_PACRE_SP1_SHIFT, AIPS_PACRE_SP1_WIDTH))

/*! @brief Set the SP1 field to a new value. */
#define AIPS_WR_PACRE_SP1(base, value) (AIPS_RMW_PACRE(base, AIPS_PACRE_SP1_MASK, AIPS_PACRE_SP1(value)))
#define AIPS_BWR_PACRE_SP1(base, value) (BME_BFI32(&AIPS_PACRE_REG(base), ((uint32_t)(value) << AIPS_PACRE_SP1_SHIFT), AIPS_PACRE_SP1_SHIFT, AIPS_PACRE_SP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRE, field TP0[28] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRE_TP0 field. */
#define AIPS_RD_PACRE_TP0(base) ((AIPS_PACRE_REG(base) & AIPS_PACRE_TP0_MASK) >> AIPS_PACRE_TP0_SHIFT)
#define AIPS_BRD_PACRE_TP0(base) (BME_UBFX32(&AIPS_PACRE_REG(base), AIPS_PACRE_TP0_SHIFT, AIPS_PACRE_TP0_WIDTH))

/*! @brief Set the TP0 field to a new value. */
#define AIPS_WR_PACRE_TP0(base, value) (AIPS_RMW_PACRE(base, AIPS_PACRE_TP0_MASK, AIPS_PACRE_TP0(value)))
#define AIPS_BWR_PACRE_TP0(base, value) (BME_BFI32(&AIPS_PACRE_REG(base), ((uint32_t)(value) << AIPS_PACRE_TP0_SHIFT), AIPS_PACRE_TP0_SHIFT, AIPS_PACRE_TP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRE, field WP0[29] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRE_WP0 field. */
#define AIPS_RD_PACRE_WP0(base) ((AIPS_PACRE_REG(base) & AIPS_PACRE_WP0_MASK) >> AIPS_PACRE_WP0_SHIFT)
#define AIPS_BRD_PACRE_WP0(base) (BME_UBFX32(&AIPS_PACRE_REG(base), AIPS_PACRE_WP0_SHIFT, AIPS_PACRE_WP0_WIDTH))

/*! @brief Set the WP0 field to a new value. */
#define AIPS_WR_PACRE_WP0(base, value) (AIPS_RMW_PACRE(base, AIPS_PACRE_WP0_MASK, AIPS_PACRE_WP0(value)))
#define AIPS_BWR_PACRE_WP0(base, value) (BME_BFI32(&AIPS_PACRE_REG(base), ((uint32_t)(value) << AIPS_PACRE_WP0_SHIFT), AIPS_PACRE_WP0_SHIFT, AIPS_PACRE_WP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRE, field SP0[30] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRE_SP0 field. */
#define AIPS_RD_PACRE_SP0(base) ((AIPS_PACRE_REG(base) & AIPS_PACRE_SP0_MASK) >> AIPS_PACRE_SP0_SHIFT)
#define AIPS_BRD_PACRE_SP0(base) (BME_UBFX32(&AIPS_PACRE_REG(base), AIPS_PACRE_SP0_SHIFT, AIPS_PACRE_SP0_WIDTH))

/*! @brief Set the SP0 field to a new value. */
#define AIPS_WR_PACRE_SP0(base, value) (AIPS_RMW_PACRE(base, AIPS_PACRE_SP0_MASK, AIPS_PACRE_SP0(value)))
#define AIPS_BWR_PACRE_SP0(base, value) (BME_BFI32(&AIPS_PACRE_REG(base), ((uint32_t)(value) << AIPS_PACRE_SP0_SHIFT), AIPS_PACRE_SP0_SHIFT, AIPS_PACRE_SP0_WIDTH))
/*@}*/

/*******************************************************************************
 * AIPS_PACRF - Peripheral Access Control Register
 ******************************************************************************/

/*!
 * @brief AIPS_PACRF - Peripheral Access Control Register (RW)
 *
 * Reset value: 0x00004404U
 *
 * This section describes PACR registers E-P, which control peripheral slots
 * 32-127. See PACRPeripheral Access Control Register for the description of these
 * registers.
 */
/*!
 * @name Constants and macros for entire AIPS_PACRF register
 */
/*@{*/
#define AIPS_RD_PACRF(base)      (AIPS_PACRF_REG(base))
#define AIPS_WR_PACRF(base, value) (AIPS_PACRF_REG(base) = (value))
#define AIPS_RMW_PACRF(base, mask, value) (AIPS_WR_PACRF(base, (AIPS_RD_PACRF(base) & ~(mask)) | (value)))
#define AIPS_SET_PACRF(base, value) (BME_OR32(&AIPS_PACRF_REG(base), (uint32_t)(value)))
#define AIPS_CLR_PACRF(base, value) (BME_AND32(&AIPS_PACRF_REG(base), (uint32_t)(~(value))))
#define AIPS_TOG_PACRF(base, value) (BME_XOR32(&AIPS_PACRF_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual AIPS_PACRF bitfields
 */

/*!
 * @name Register AIPS_PACRF, field TP7[0] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRF_TP7 field. */
#define AIPS_RD_PACRF_TP7(base) ((AIPS_PACRF_REG(base) & AIPS_PACRF_TP7_MASK) >> AIPS_PACRF_TP7_SHIFT)
#define AIPS_BRD_PACRF_TP7(base) (BME_UBFX32(&AIPS_PACRF_REG(base), AIPS_PACRF_TP7_SHIFT, AIPS_PACRF_TP7_WIDTH))

/*! @brief Set the TP7 field to a new value. */
#define AIPS_WR_PACRF_TP7(base, value) (AIPS_RMW_PACRF(base, AIPS_PACRF_TP7_MASK, AIPS_PACRF_TP7(value)))
#define AIPS_BWR_PACRF_TP7(base, value) (BME_BFI32(&AIPS_PACRF_REG(base), ((uint32_t)(value) << AIPS_PACRF_TP7_SHIFT), AIPS_PACRF_TP7_SHIFT, AIPS_PACRF_TP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRF, field WP7[1] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRF_WP7 field. */
#define AIPS_RD_PACRF_WP7(base) ((AIPS_PACRF_REG(base) & AIPS_PACRF_WP7_MASK) >> AIPS_PACRF_WP7_SHIFT)
#define AIPS_BRD_PACRF_WP7(base) (BME_UBFX32(&AIPS_PACRF_REG(base), AIPS_PACRF_WP7_SHIFT, AIPS_PACRF_WP7_WIDTH))

/*! @brief Set the WP7 field to a new value. */
#define AIPS_WR_PACRF_WP7(base, value) (AIPS_RMW_PACRF(base, AIPS_PACRF_WP7_MASK, AIPS_PACRF_WP7(value)))
#define AIPS_BWR_PACRF_WP7(base, value) (BME_BFI32(&AIPS_PACRF_REG(base), ((uint32_t)(value) << AIPS_PACRF_WP7_SHIFT), AIPS_PACRF_WP7_SHIFT, AIPS_PACRF_WP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRF, field SP7[2] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRF_SP7 field. */
#define AIPS_RD_PACRF_SP7(base) ((AIPS_PACRF_REG(base) & AIPS_PACRF_SP7_MASK) >> AIPS_PACRF_SP7_SHIFT)
#define AIPS_BRD_PACRF_SP7(base) (BME_UBFX32(&AIPS_PACRF_REG(base), AIPS_PACRF_SP7_SHIFT, AIPS_PACRF_SP7_WIDTH))

/*! @brief Set the SP7 field to a new value. */
#define AIPS_WR_PACRF_SP7(base, value) (AIPS_RMW_PACRF(base, AIPS_PACRF_SP7_MASK, AIPS_PACRF_SP7(value)))
#define AIPS_BWR_PACRF_SP7(base, value) (BME_BFI32(&AIPS_PACRF_REG(base), ((uint32_t)(value) << AIPS_PACRF_SP7_SHIFT), AIPS_PACRF_SP7_SHIFT, AIPS_PACRF_SP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRF, field TP6[4] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRF_TP6 field. */
#define AIPS_RD_PACRF_TP6(base) ((AIPS_PACRF_REG(base) & AIPS_PACRF_TP6_MASK) >> AIPS_PACRF_TP6_SHIFT)
#define AIPS_BRD_PACRF_TP6(base) (BME_UBFX32(&AIPS_PACRF_REG(base), AIPS_PACRF_TP6_SHIFT, AIPS_PACRF_TP6_WIDTH))

/*! @brief Set the TP6 field to a new value. */
#define AIPS_WR_PACRF_TP6(base, value) (AIPS_RMW_PACRF(base, AIPS_PACRF_TP6_MASK, AIPS_PACRF_TP6(value)))
#define AIPS_BWR_PACRF_TP6(base, value) (BME_BFI32(&AIPS_PACRF_REG(base), ((uint32_t)(value) << AIPS_PACRF_TP6_SHIFT), AIPS_PACRF_TP6_SHIFT, AIPS_PACRF_TP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRF, field WP6[5] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRF_WP6 field. */
#define AIPS_RD_PACRF_WP6(base) ((AIPS_PACRF_REG(base) & AIPS_PACRF_WP6_MASK) >> AIPS_PACRF_WP6_SHIFT)
#define AIPS_BRD_PACRF_WP6(base) (BME_UBFX32(&AIPS_PACRF_REG(base), AIPS_PACRF_WP6_SHIFT, AIPS_PACRF_WP6_WIDTH))

/*! @brief Set the WP6 field to a new value. */
#define AIPS_WR_PACRF_WP6(base, value) (AIPS_RMW_PACRF(base, AIPS_PACRF_WP6_MASK, AIPS_PACRF_WP6(value)))
#define AIPS_BWR_PACRF_WP6(base, value) (BME_BFI32(&AIPS_PACRF_REG(base), ((uint32_t)(value) << AIPS_PACRF_WP6_SHIFT), AIPS_PACRF_WP6_SHIFT, AIPS_PACRF_WP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRF, field SP6[6] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRF_SP6 field. */
#define AIPS_RD_PACRF_SP6(base) ((AIPS_PACRF_REG(base) & AIPS_PACRF_SP6_MASK) >> AIPS_PACRF_SP6_SHIFT)
#define AIPS_BRD_PACRF_SP6(base) (BME_UBFX32(&AIPS_PACRF_REG(base), AIPS_PACRF_SP6_SHIFT, AIPS_PACRF_SP6_WIDTH))

/*! @brief Set the SP6 field to a new value. */
#define AIPS_WR_PACRF_SP6(base, value) (AIPS_RMW_PACRF(base, AIPS_PACRF_SP6_MASK, AIPS_PACRF_SP6(value)))
#define AIPS_BWR_PACRF_SP6(base, value) (BME_BFI32(&AIPS_PACRF_REG(base), ((uint32_t)(value) << AIPS_PACRF_SP6_SHIFT), AIPS_PACRF_SP6_SHIFT, AIPS_PACRF_SP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRF, field TP5[8] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRF_TP5 field. */
#define AIPS_RD_PACRF_TP5(base) ((AIPS_PACRF_REG(base) & AIPS_PACRF_TP5_MASK) >> AIPS_PACRF_TP5_SHIFT)
#define AIPS_BRD_PACRF_TP5(base) (BME_UBFX32(&AIPS_PACRF_REG(base), AIPS_PACRF_TP5_SHIFT, AIPS_PACRF_TP5_WIDTH))

/*! @brief Set the TP5 field to a new value. */
#define AIPS_WR_PACRF_TP5(base, value) (AIPS_RMW_PACRF(base, AIPS_PACRF_TP5_MASK, AIPS_PACRF_TP5(value)))
#define AIPS_BWR_PACRF_TP5(base, value) (BME_BFI32(&AIPS_PACRF_REG(base), ((uint32_t)(value) << AIPS_PACRF_TP5_SHIFT), AIPS_PACRF_TP5_SHIFT, AIPS_PACRF_TP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRF, field WP5[9] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRF_WP5 field. */
#define AIPS_RD_PACRF_WP5(base) ((AIPS_PACRF_REG(base) & AIPS_PACRF_WP5_MASK) >> AIPS_PACRF_WP5_SHIFT)
#define AIPS_BRD_PACRF_WP5(base) (BME_UBFX32(&AIPS_PACRF_REG(base), AIPS_PACRF_WP5_SHIFT, AIPS_PACRF_WP5_WIDTH))

/*! @brief Set the WP5 field to a new value. */
#define AIPS_WR_PACRF_WP5(base, value) (AIPS_RMW_PACRF(base, AIPS_PACRF_WP5_MASK, AIPS_PACRF_WP5(value)))
#define AIPS_BWR_PACRF_WP5(base, value) (BME_BFI32(&AIPS_PACRF_REG(base), ((uint32_t)(value) << AIPS_PACRF_WP5_SHIFT), AIPS_PACRF_WP5_SHIFT, AIPS_PACRF_WP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRF, field SP5[10] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRF_SP5 field. */
#define AIPS_RD_PACRF_SP5(base) ((AIPS_PACRF_REG(base) & AIPS_PACRF_SP5_MASK) >> AIPS_PACRF_SP5_SHIFT)
#define AIPS_BRD_PACRF_SP5(base) (BME_UBFX32(&AIPS_PACRF_REG(base), AIPS_PACRF_SP5_SHIFT, AIPS_PACRF_SP5_WIDTH))

/*! @brief Set the SP5 field to a new value. */
#define AIPS_WR_PACRF_SP5(base, value) (AIPS_RMW_PACRF(base, AIPS_PACRF_SP5_MASK, AIPS_PACRF_SP5(value)))
#define AIPS_BWR_PACRF_SP5(base, value) (BME_BFI32(&AIPS_PACRF_REG(base), ((uint32_t)(value) << AIPS_PACRF_SP5_SHIFT), AIPS_PACRF_SP5_SHIFT, AIPS_PACRF_SP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRF, field TP4[12] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRF_TP4 field. */
#define AIPS_RD_PACRF_TP4(base) ((AIPS_PACRF_REG(base) & AIPS_PACRF_TP4_MASK) >> AIPS_PACRF_TP4_SHIFT)
#define AIPS_BRD_PACRF_TP4(base) (BME_UBFX32(&AIPS_PACRF_REG(base), AIPS_PACRF_TP4_SHIFT, AIPS_PACRF_TP4_WIDTH))

/*! @brief Set the TP4 field to a new value. */
#define AIPS_WR_PACRF_TP4(base, value) (AIPS_RMW_PACRF(base, AIPS_PACRF_TP4_MASK, AIPS_PACRF_TP4(value)))
#define AIPS_BWR_PACRF_TP4(base, value) (BME_BFI32(&AIPS_PACRF_REG(base), ((uint32_t)(value) << AIPS_PACRF_TP4_SHIFT), AIPS_PACRF_TP4_SHIFT, AIPS_PACRF_TP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRF, field WP4[13] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRF_WP4 field. */
#define AIPS_RD_PACRF_WP4(base) ((AIPS_PACRF_REG(base) & AIPS_PACRF_WP4_MASK) >> AIPS_PACRF_WP4_SHIFT)
#define AIPS_BRD_PACRF_WP4(base) (BME_UBFX32(&AIPS_PACRF_REG(base), AIPS_PACRF_WP4_SHIFT, AIPS_PACRF_WP4_WIDTH))

/*! @brief Set the WP4 field to a new value. */
#define AIPS_WR_PACRF_WP4(base, value) (AIPS_RMW_PACRF(base, AIPS_PACRF_WP4_MASK, AIPS_PACRF_WP4(value)))
#define AIPS_BWR_PACRF_WP4(base, value) (BME_BFI32(&AIPS_PACRF_REG(base), ((uint32_t)(value) << AIPS_PACRF_WP4_SHIFT), AIPS_PACRF_WP4_SHIFT, AIPS_PACRF_WP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRF, field SP4[14] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRF_SP4 field. */
#define AIPS_RD_PACRF_SP4(base) ((AIPS_PACRF_REG(base) & AIPS_PACRF_SP4_MASK) >> AIPS_PACRF_SP4_SHIFT)
#define AIPS_BRD_PACRF_SP4(base) (BME_UBFX32(&AIPS_PACRF_REG(base), AIPS_PACRF_SP4_SHIFT, AIPS_PACRF_SP4_WIDTH))

/*! @brief Set the SP4 field to a new value. */
#define AIPS_WR_PACRF_SP4(base, value) (AIPS_RMW_PACRF(base, AIPS_PACRF_SP4_MASK, AIPS_PACRF_SP4(value)))
#define AIPS_BWR_PACRF_SP4(base, value) (BME_BFI32(&AIPS_PACRF_REG(base), ((uint32_t)(value) << AIPS_PACRF_SP4_SHIFT), AIPS_PACRF_SP4_SHIFT, AIPS_PACRF_SP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRF, field TP3[16] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRF_TP3 field. */
#define AIPS_RD_PACRF_TP3(base) ((AIPS_PACRF_REG(base) & AIPS_PACRF_TP3_MASK) >> AIPS_PACRF_TP3_SHIFT)
#define AIPS_BRD_PACRF_TP3(base) (BME_UBFX32(&AIPS_PACRF_REG(base), AIPS_PACRF_TP3_SHIFT, AIPS_PACRF_TP3_WIDTH))

/*! @brief Set the TP3 field to a new value. */
#define AIPS_WR_PACRF_TP3(base, value) (AIPS_RMW_PACRF(base, AIPS_PACRF_TP3_MASK, AIPS_PACRF_TP3(value)))
#define AIPS_BWR_PACRF_TP3(base, value) (BME_BFI32(&AIPS_PACRF_REG(base), ((uint32_t)(value) << AIPS_PACRF_TP3_SHIFT), AIPS_PACRF_TP3_SHIFT, AIPS_PACRF_TP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRF, field WP3[17] (RW)
 *
 * Determines whether the peripheral allows write accesss. When this bit is set
 * and a write access is attempted, access terminates with an error response and
 * no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRF_WP3 field. */
#define AIPS_RD_PACRF_WP3(base) ((AIPS_PACRF_REG(base) & AIPS_PACRF_WP3_MASK) >> AIPS_PACRF_WP3_SHIFT)
#define AIPS_BRD_PACRF_WP3(base) (BME_UBFX32(&AIPS_PACRF_REG(base), AIPS_PACRF_WP3_SHIFT, AIPS_PACRF_WP3_WIDTH))

/*! @brief Set the WP3 field to a new value. */
#define AIPS_WR_PACRF_WP3(base, value) (AIPS_RMW_PACRF(base, AIPS_PACRF_WP3_MASK, AIPS_PACRF_WP3(value)))
#define AIPS_BWR_PACRF_WP3(base, value) (BME_BFI32(&AIPS_PACRF_REG(base), ((uint32_t)(value) << AIPS_PACRF_WP3_SHIFT), AIPS_PACRF_WP3_SHIFT, AIPS_PACRF_WP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRF, field SP3[18] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRF_SP3 field. */
#define AIPS_RD_PACRF_SP3(base) ((AIPS_PACRF_REG(base) & AIPS_PACRF_SP3_MASK) >> AIPS_PACRF_SP3_SHIFT)
#define AIPS_BRD_PACRF_SP3(base) (BME_UBFX32(&AIPS_PACRF_REG(base), AIPS_PACRF_SP3_SHIFT, AIPS_PACRF_SP3_WIDTH))

/*! @brief Set the SP3 field to a new value. */
#define AIPS_WR_PACRF_SP3(base, value) (AIPS_RMW_PACRF(base, AIPS_PACRF_SP3_MASK, AIPS_PACRF_SP3(value)))
#define AIPS_BWR_PACRF_SP3(base, value) (BME_BFI32(&AIPS_PACRF_REG(base), ((uint32_t)(value) << AIPS_PACRF_SP3_SHIFT), AIPS_PACRF_SP3_SHIFT, AIPS_PACRF_SP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRF, field TP2[20] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRF_TP2 field. */
#define AIPS_RD_PACRF_TP2(base) ((AIPS_PACRF_REG(base) & AIPS_PACRF_TP2_MASK) >> AIPS_PACRF_TP2_SHIFT)
#define AIPS_BRD_PACRF_TP2(base) (BME_UBFX32(&AIPS_PACRF_REG(base), AIPS_PACRF_TP2_SHIFT, AIPS_PACRF_TP2_WIDTH))

/*! @brief Set the TP2 field to a new value. */
#define AIPS_WR_PACRF_TP2(base, value) (AIPS_RMW_PACRF(base, AIPS_PACRF_TP2_MASK, AIPS_PACRF_TP2(value)))
#define AIPS_BWR_PACRF_TP2(base, value) (BME_BFI32(&AIPS_PACRF_REG(base), ((uint32_t)(value) << AIPS_PACRF_TP2_SHIFT), AIPS_PACRF_TP2_SHIFT, AIPS_PACRF_TP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRF, field WP2[21] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRF_WP2 field. */
#define AIPS_RD_PACRF_WP2(base) ((AIPS_PACRF_REG(base) & AIPS_PACRF_WP2_MASK) >> AIPS_PACRF_WP2_SHIFT)
#define AIPS_BRD_PACRF_WP2(base) (BME_UBFX32(&AIPS_PACRF_REG(base), AIPS_PACRF_WP2_SHIFT, AIPS_PACRF_WP2_WIDTH))

/*! @brief Set the WP2 field to a new value. */
#define AIPS_WR_PACRF_WP2(base, value) (AIPS_RMW_PACRF(base, AIPS_PACRF_WP2_MASK, AIPS_PACRF_WP2(value)))
#define AIPS_BWR_PACRF_WP2(base, value) (BME_BFI32(&AIPS_PACRF_REG(base), ((uint32_t)(value) << AIPS_PACRF_WP2_SHIFT), AIPS_PACRF_WP2_SHIFT, AIPS_PACRF_WP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRF, field SP2[22] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRF_SP2 field. */
#define AIPS_RD_PACRF_SP2(base) ((AIPS_PACRF_REG(base) & AIPS_PACRF_SP2_MASK) >> AIPS_PACRF_SP2_SHIFT)
#define AIPS_BRD_PACRF_SP2(base) (BME_UBFX32(&AIPS_PACRF_REG(base), AIPS_PACRF_SP2_SHIFT, AIPS_PACRF_SP2_WIDTH))

/*! @brief Set the SP2 field to a new value. */
#define AIPS_WR_PACRF_SP2(base, value) (AIPS_RMW_PACRF(base, AIPS_PACRF_SP2_MASK, AIPS_PACRF_SP2(value)))
#define AIPS_BWR_PACRF_SP2(base, value) (BME_BFI32(&AIPS_PACRF_REG(base), ((uint32_t)(value) << AIPS_PACRF_SP2_SHIFT), AIPS_PACRF_SP2_SHIFT, AIPS_PACRF_SP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRF, field TP1[24] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRF_TP1 field. */
#define AIPS_RD_PACRF_TP1(base) ((AIPS_PACRF_REG(base) & AIPS_PACRF_TP1_MASK) >> AIPS_PACRF_TP1_SHIFT)
#define AIPS_BRD_PACRF_TP1(base) (BME_UBFX32(&AIPS_PACRF_REG(base), AIPS_PACRF_TP1_SHIFT, AIPS_PACRF_TP1_WIDTH))

/*! @brief Set the TP1 field to a new value. */
#define AIPS_WR_PACRF_TP1(base, value) (AIPS_RMW_PACRF(base, AIPS_PACRF_TP1_MASK, AIPS_PACRF_TP1(value)))
#define AIPS_BWR_PACRF_TP1(base, value) (BME_BFI32(&AIPS_PACRF_REG(base), ((uint32_t)(value) << AIPS_PACRF_TP1_SHIFT), AIPS_PACRF_TP1_SHIFT, AIPS_PACRF_TP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRF, field WP1[25] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRF_WP1 field. */
#define AIPS_RD_PACRF_WP1(base) ((AIPS_PACRF_REG(base) & AIPS_PACRF_WP1_MASK) >> AIPS_PACRF_WP1_SHIFT)
#define AIPS_BRD_PACRF_WP1(base) (BME_UBFX32(&AIPS_PACRF_REG(base), AIPS_PACRF_WP1_SHIFT, AIPS_PACRF_WP1_WIDTH))

/*! @brief Set the WP1 field to a new value. */
#define AIPS_WR_PACRF_WP1(base, value) (AIPS_RMW_PACRF(base, AIPS_PACRF_WP1_MASK, AIPS_PACRF_WP1(value)))
#define AIPS_BWR_PACRF_WP1(base, value) (BME_BFI32(&AIPS_PACRF_REG(base), ((uint32_t)(value) << AIPS_PACRF_WP1_SHIFT), AIPS_PACRF_WP1_SHIFT, AIPS_PACRF_WP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRF, field SP1[26] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master must
 * be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRF_SP1 field. */
#define AIPS_RD_PACRF_SP1(base) ((AIPS_PACRF_REG(base) & AIPS_PACRF_SP1_MASK) >> AIPS_PACRF_SP1_SHIFT)
#define AIPS_BRD_PACRF_SP1(base) (BME_UBFX32(&AIPS_PACRF_REG(base), AIPS_PACRF_SP1_SHIFT, AIPS_PACRF_SP1_WIDTH))

/*! @brief Set the SP1 field to a new value. */
#define AIPS_WR_PACRF_SP1(base, value) (AIPS_RMW_PACRF(base, AIPS_PACRF_SP1_MASK, AIPS_PACRF_SP1(value)))
#define AIPS_BWR_PACRF_SP1(base, value) (BME_BFI32(&AIPS_PACRF_REG(base), ((uint32_t)(value) << AIPS_PACRF_SP1_SHIFT), AIPS_PACRF_SP1_SHIFT, AIPS_PACRF_SP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRF, field TP0[28] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRF_TP0 field. */
#define AIPS_RD_PACRF_TP0(base) ((AIPS_PACRF_REG(base) & AIPS_PACRF_TP0_MASK) >> AIPS_PACRF_TP0_SHIFT)
#define AIPS_BRD_PACRF_TP0(base) (BME_UBFX32(&AIPS_PACRF_REG(base), AIPS_PACRF_TP0_SHIFT, AIPS_PACRF_TP0_WIDTH))

/*! @brief Set the TP0 field to a new value. */
#define AIPS_WR_PACRF_TP0(base, value) (AIPS_RMW_PACRF(base, AIPS_PACRF_TP0_MASK, AIPS_PACRF_TP0(value)))
#define AIPS_BWR_PACRF_TP0(base, value) (BME_BFI32(&AIPS_PACRF_REG(base), ((uint32_t)(value) << AIPS_PACRF_TP0_SHIFT), AIPS_PACRF_TP0_SHIFT, AIPS_PACRF_TP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRF, field WP0[29] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRF_WP0 field. */
#define AIPS_RD_PACRF_WP0(base) ((AIPS_PACRF_REG(base) & AIPS_PACRF_WP0_MASK) >> AIPS_PACRF_WP0_SHIFT)
#define AIPS_BRD_PACRF_WP0(base) (BME_UBFX32(&AIPS_PACRF_REG(base), AIPS_PACRF_WP0_SHIFT, AIPS_PACRF_WP0_WIDTH))

/*! @brief Set the WP0 field to a new value. */
#define AIPS_WR_PACRF_WP0(base, value) (AIPS_RMW_PACRF(base, AIPS_PACRF_WP0_MASK, AIPS_PACRF_WP0(value)))
#define AIPS_BWR_PACRF_WP0(base, value) (BME_BFI32(&AIPS_PACRF_REG(base), ((uint32_t)(value) << AIPS_PACRF_WP0_SHIFT), AIPS_PACRF_WP0_SHIFT, AIPS_PACRF_WP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRF, field SP0[30] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRF_SP0 field. */
#define AIPS_RD_PACRF_SP0(base) ((AIPS_PACRF_REG(base) & AIPS_PACRF_SP0_MASK) >> AIPS_PACRF_SP0_SHIFT)
#define AIPS_BRD_PACRF_SP0(base) (BME_UBFX32(&AIPS_PACRF_REG(base), AIPS_PACRF_SP0_SHIFT, AIPS_PACRF_SP0_WIDTH))

/*! @brief Set the SP0 field to a new value. */
#define AIPS_WR_PACRF_SP0(base, value) (AIPS_RMW_PACRF(base, AIPS_PACRF_SP0_MASK, AIPS_PACRF_SP0(value)))
#define AIPS_BWR_PACRF_SP0(base, value) (BME_BFI32(&AIPS_PACRF_REG(base), ((uint32_t)(value) << AIPS_PACRF_SP0_SHIFT), AIPS_PACRF_SP0_SHIFT, AIPS_PACRF_SP0_WIDTH))
/*@}*/

/*******************************************************************************
 * AIPS_PACRG - Peripheral Access Control Register
 ******************************************************************************/

/*!
 * @brief AIPS_PACRG - Peripheral Access Control Register (RW)
 *
 * Reset value: 0x00400444U
 *
 * This section describes PACR registers E-P, which control peripheral slots
 * 32-127. See PACRPeripheral Access Control Register for the description of these
 * registers.
 */
/*!
 * @name Constants and macros for entire AIPS_PACRG register
 */
/*@{*/
#define AIPS_RD_PACRG(base)      (AIPS_PACRG_REG(base))
#define AIPS_WR_PACRG(base, value) (AIPS_PACRG_REG(base) = (value))
#define AIPS_RMW_PACRG(base, mask, value) (AIPS_WR_PACRG(base, (AIPS_RD_PACRG(base) & ~(mask)) | (value)))
#define AIPS_SET_PACRG(base, value) (BME_OR32(&AIPS_PACRG_REG(base), (uint32_t)(value)))
#define AIPS_CLR_PACRG(base, value) (BME_AND32(&AIPS_PACRG_REG(base), (uint32_t)(~(value))))
#define AIPS_TOG_PACRG(base, value) (BME_XOR32(&AIPS_PACRG_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual AIPS_PACRG bitfields
 */

/*!
 * @name Register AIPS_PACRG, field TP7[0] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRG_TP7 field. */
#define AIPS_RD_PACRG_TP7(base) ((AIPS_PACRG_REG(base) & AIPS_PACRG_TP7_MASK) >> AIPS_PACRG_TP7_SHIFT)
#define AIPS_BRD_PACRG_TP7(base) (BME_UBFX32(&AIPS_PACRG_REG(base), AIPS_PACRG_TP7_SHIFT, AIPS_PACRG_TP7_WIDTH))

/*! @brief Set the TP7 field to a new value. */
#define AIPS_WR_PACRG_TP7(base, value) (AIPS_RMW_PACRG(base, AIPS_PACRG_TP7_MASK, AIPS_PACRG_TP7(value)))
#define AIPS_BWR_PACRG_TP7(base, value) (BME_BFI32(&AIPS_PACRG_REG(base), ((uint32_t)(value) << AIPS_PACRG_TP7_SHIFT), AIPS_PACRG_TP7_SHIFT, AIPS_PACRG_TP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRG, field WP7[1] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRG_WP7 field. */
#define AIPS_RD_PACRG_WP7(base) ((AIPS_PACRG_REG(base) & AIPS_PACRG_WP7_MASK) >> AIPS_PACRG_WP7_SHIFT)
#define AIPS_BRD_PACRG_WP7(base) (BME_UBFX32(&AIPS_PACRG_REG(base), AIPS_PACRG_WP7_SHIFT, AIPS_PACRG_WP7_WIDTH))

/*! @brief Set the WP7 field to a new value. */
#define AIPS_WR_PACRG_WP7(base, value) (AIPS_RMW_PACRG(base, AIPS_PACRG_WP7_MASK, AIPS_PACRG_WP7(value)))
#define AIPS_BWR_PACRG_WP7(base, value) (BME_BFI32(&AIPS_PACRG_REG(base), ((uint32_t)(value) << AIPS_PACRG_WP7_SHIFT), AIPS_PACRG_WP7_SHIFT, AIPS_PACRG_WP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRG, field SP7[2] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRG_SP7 field. */
#define AIPS_RD_PACRG_SP7(base) ((AIPS_PACRG_REG(base) & AIPS_PACRG_SP7_MASK) >> AIPS_PACRG_SP7_SHIFT)
#define AIPS_BRD_PACRG_SP7(base) (BME_UBFX32(&AIPS_PACRG_REG(base), AIPS_PACRG_SP7_SHIFT, AIPS_PACRG_SP7_WIDTH))

/*! @brief Set the SP7 field to a new value. */
#define AIPS_WR_PACRG_SP7(base, value) (AIPS_RMW_PACRG(base, AIPS_PACRG_SP7_MASK, AIPS_PACRG_SP7(value)))
#define AIPS_BWR_PACRG_SP7(base, value) (BME_BFI32(&AIPS_PACRG_REG(base), ((uint32_t)(value) << AIPS_PACRG_SP7_SHIFT), AIPS_PACRG_SP7_SHIFT, AIPS_PACRG_SP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRG, field TP6[4] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRG_TP6 field. */
#define AIPS_RD_PACRG_TP6(base) ((AIPS_PACRG_REG(base) & AIPS_PACRG_TP6_MASK) >> AIPS_PACRG_TP6_SHIFT)
#define AIPS_BRD_PACRG_TP6(base) (BME_UBFX32(&AIPS_PACRG_REG(base), AIPS_PACRG_TP6_SHIFT, AIPS_PACRG_TP6_WIDTH))

/*! @brief Set the TP6 field to a new value. */
#define AIPS_WR_PACRG_TP6(base, value) (AIPS_RMW_PACRG(base, AIPS_PACRG_TP6_MASK, AIPS_PACRG_TP6(value)))
#define AIPS_BWR_PACRG_TP6(base, value) (BME_BFI32(&AIPS_PACRG_REG(base), ((uint32_t)(value) << AIPS_PACRG_TP6_SHIFT), AIPS_PACRG_TP6_SHIFT, AIPS_PACRG_TP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRG, field WP6[5] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRG_WP6 field. */
#define AIPS_RD_PACRG_WP6(base) ((AIPS_PACRG_REG(base) & AIPS_PACRG_WP6_MASK) >> AIPS_PACRG_WP6_SHIFT)
#define AIPS_BRD_PACRG_WP6(base) (BME_UBFX32(&AIPS_PACRG_REG(base), AIPS_PACRG_WP6_SHIFT, AIPS_PACRG_WP6_WIDTH))

/*! @brief Set the WP6 field to a new value. */
#define AIPS_WR_PACRG_WP6(base, value) (AIPS_RMW_PACRG(base, AIPS_PACRG_WP6_MASK, AIPS_PACRG_WP6(value)))
#define AIPS_BWR_PACRG_WP6(base, value) (BME_BFI32(&AIPS_PACRG_REG(base), ((uint32_t)(value) << AIPS_PACRG_WP6_SHIFT), AIPS_PACRG_WP6_SHIFT, AIPS_PACRG_WP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRG, field SP6[6] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRG_SP6 field. */
#define AIPS_RD_PACRG_SP6(base) ((AIPS_PACRG_REG(base) & AIPS_PACRG_SP6_MASK) >> AIPS_PACRG_SP6_SHIFT)
#define AIPS_BRD_PACRG_SP6(base) (BME_UBFX32(&AIPS_PACRG_REG(base), AIPS_PACRG_SP6_SHIFT, AIPS_PACRG_SP6_WIDTH))

/*! @brief Set the SP6 field to a new value. */
#define AIPS_WR_PACRG_SP6(base, value) (AIPS_RMW_PACRG(base, AIPS_PACRG_SP6_MASK, AIPS_PACRG_SP6(value)))
#define AIPS_BWR_PACRG_SP6(base, value) (BME_BFI32(&AIPS_PACRG_REG(base), ((uint32_t)(value) << AIPS_PACRG_SP6_SHIFT), AIPS_PACRG_SP6_SHIFT, AIPS_PACRG_SP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRG, field TP5[8] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRG_TP5 field. */
#define AIPS_RD_PACRG_TP5(base) ((AIPS_PACRG_REG(base) & AIPS_PACRG_TP5_MASK) >> AIPS_PACRG_TP5_SHIFT)
#define AIPS_BRD_PACRG_TP5(base) (BME_UBFX32(&AIPS_PACRG_REG(base), AIPS_PACRG_TP5_SHIFT, AIPS_PACRG_TP5_WIDTH))

/*! @brief Set the TP5 field to a new value. */
#define AIPS_WR_PACRG_TP5(base, value) (AIPS_RMW_PACRG(base, AIPS_PACRG_TP5_MASK, AIPS_PACRG_TP5(value)))
#define AIPS_BWR_PACRG_TP5(base, value) (BME_BFI32(&AIPS_PACRG_REG(base), ((uint32_t)(value) << AIPS_PACRG_TP5_SHIFT), AIPS_PACRG_TP5_SHIFT, AIPS_PACRG_TP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRG, field WP5[9] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRG_WP5 field. */
#define AIPS_RD_PACRG_WP5(base) ((AIPS_PACRG_REG(base) & AIPS_PACRG_WP5_MASK) >> AIPS_PACRG_WP5_SHIFT)
#define AIPS_BRD_PACRG_WP5(base) (BME_UBFX32(&AIPS_PACRG_REG(base), AIPS_PACRG_WP5_SHIFT, AIPS_PACRG_WP5_WIDTH))

/*! @brief Set the WP5 field to a new value. */
#define AIPS_WR_PACRG_WP5(base, value) (AIPS_RMW_PACRG(base, AIPS_PACRG_WP5_MASK, AIPS_PACRG_WP5(value)))
#define AIPS_BWR_PACRG_WP5(base, value) (BME_BFI32(&AIPS_PACRG_REG(base), ((uint32_t)(value) << AIPS_PACRG_WP5_SHIFT), AIPS_PACRG_WP5_SHIFT, AIPS_PACRG_WP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRG, field SP5[10] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRG_SP5 field. */
#define AIPS_RD_PACRG_SP5(base) ((AIPS_PACRG_REG(base) & AIPS_PACRG_SP5_MASK) >> AIPS_PACRG_SP5_SHIFT)
#define AIPS_BRD_PACRG_SP5(base) (BME_UBFX32(&AIPS_PACRG_REG(base), AIPS_PACRG_SP5_SHIFT, AIPS_PACRG_SP5_WIDTH))

/*! @brief Set the SP5 field to a new value. */
#define AIPS_WR_PACRG_SP5(base, value) (AIPS_RMW_PACRG(base, AIPS_PACRG_SP5_MASK, AIPS_PACRG_SP5(value)))
#define AIPS_BWR_PACRG_SP5(base, value) (BME_BFI32(&AIPS_PACRG_REG(base), ((uint32_t)(value) << AIPS_PACRG_SP5_SHIFT), AIPS_PACRG_SP5_SHIFT, AIPS_PACRG_SP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRG, field TP4[12] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRG_TP4 field. */
#define AIPS_RD_PACRG_TP4(base) ((AIPS_PACRG_REG(base) & AIPS_PACRG_TP4_MASK) >> AIPS_PACRG_TP4_SHIFT)
#define AIPS_BRD_PACRG_TP4(base) (BME_UBFX32(&AIPS_PACRG_REG(base), AIPS_PACRG_TP4_SHIFT, AIPS_PACRG_TP4_WIDTH))

/*! @brief Set the TP4 field to a new value. */
#define AIPS_WR_PACRG_TP4(base, value) (AIPS_RMW_PACRG(base, AIPS_PACRG_TP4_MASK, AIPS_PACRG_TP4(value)))
#define AIPS_BWR_PACRG_TP4(base, value) (BME_BFI32(&AIPS_PACRG_REG(base), ((uint32_t)(value) << AIPS_PACRG_TP4_SHIFT), AIPS_PACRG_TP4_SHIFT, AIPS_PACRG_TP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRG, field WP4[13] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRG_WP4 field. */
#define AIPS_RD_PACRG_WP4(base) ((AIPS_PACRG_REG(base) & AIPS_PACRG_WP4_MASK) >> AIPS_PACRG_WP4_SHIFT)
#define AIPS_BRD_PACRG_WP4(base) (BME_UBFX32(&AIPS_PACRG_REG(base), AIPS_PACRG_WP4_SHIFT, AIPS_PACRG_WP4_WIDTH))

/*! @brief Set the WP4 field to a new value. */
#define AIPS_WR_PACRG_WP4(base, value) (AIPS_RMW_PACRG(base, AIPS_PACRG_WP4_MASK, AIPS_PACRG_WP4(value)))
#define AIPS_BWR_PACRG_WP4(base, value) (BME_BFI32(&AIPS_PACRG_REG(base), ((uint32_t)(value) << AIPS_PACRG_WP4_SHIFT), AIPS_PACRG_WP4_SHIFT, AIPS_PACRG_WP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRG, field SP4[14] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRG_SP4 field. */
#define AIPS_RD_PACRG_SP4(base) ((AIPS_PACRG_REG(base) & AIPS_PACRG_SP4_MASK) >> AIPS_PACRG_SP4_SHIFT)
#define AIPS_BRD_PACRG_SP4(base) (BME_UBFX32(&AIPS_PACRG_REG(base), AIPS_PACRG_SP4_SHIFT, AIPS_PACRG_SP4_WIDTH))

/*! @brief Set the SP4 field to a new value. */
#define AIPS_WR_PACRG_SP4(base, value) (AIPS_RMW_PACRG(base, AIPS_PACRG_SP4_MASK, AIPS_PACRG_SP4(value)))
#define AIPS_BWR_PACRG_SP4(base, value) (BME_BFI32(&AIPS_PACRG_REG(base), ((uint32_t)(value) << AIPS_PACRG_SP4_SHIFT), AIPS_PACRG_SP4_SHIFT, AIPS_PACRG_SP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRG, field TP3[16] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRG_TP3 field. */
#define AIPS_RD_PACRG_TP3(base) ((AIPS_PACRG_REG(base) & AIPS_PACRG_TP3_MASK) >> AIPS_PACRG_TP3_SHIFT)
#define AIPS_BRD_PACRG_TP3(base) (BME_UBFX32(&AIPS_PACRG_REG(base), AIPS_PACRG_TP3_SHIFT, AIPS_PACRG_TP3_WIDTH))

/*! @brief Set the TP3 field to a new value. */
#define AIPS_WR_PACRG_TP3(base, value) (AIPS_RMW_PACRG(base, AIPS_PACRG_TP3_MASK, AIPS_PACRG_TP3(value)))
#define AIPS_BWR_PACRG_TP3(base, value) (BME_BFI32(&AIPS_PACRG_REG(base), ((uint32_t)(value) << AIPS_PACRG_TP3_SHIFT), AIPS_PACRG_TP3_SHIFT, AIPS_PACRG_TP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRG, field WP3[17] (RW)
 *
 * Determines whether the peripheral allows write accesss. When this bit is set
 * and a write access is attempted, access terminates with an error response and
 * no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRG_WP3 field. */
#define AIPS_RD_PACRG_WP3(base) ((AIPS_PACRG_REG(base) & AIPS_PACRG_WP3_MASK) >> AIPS_PACRG_WP3_SHIFT)
#define AIPS_BRD_PACRG_WP3(base) (BME_UBFX32(&AIPS_PACRG_REG(base), AIPS_PACRG_WP3_SHIFT, AIPS_PACRG_WP3_WIDTH))

/*! @brief Set the WP3 field to a new value. */
#define AIPS_WR_PACRG_WP3(base, value) (AIPS_RMW_PACRG(base, AIPS_PACRG_WP3_MASK, AIPS_PACRG_WP3(value)))
#define AIPS_BWR_PACRG_WP3(base, value) (BME_BFI32(&AIPS_PACRG_REG(base), ((uint32_t)(value) << AIPS_PACRG_WP3_SHIFT), AIPS_PACRG_WP3_SHIFT, AIPS_PACRG_WP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRG, field SP3[18] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRG_SP3 field. */
#define AIPS_RD_PACRG_SP3(base) ((AIPS_PACRG_REG(base) & AIPS_PACRG_SP3_MASK) >> AIPS_PACRG_SP3_SHIFT)
#define AIPS_BRD_PACRG_SP3(base) (BME_UBFX32(&AIPS_PACRG_REG(base), AIPS_PACRG_SP3_SHIFT, AIPS_PACRG_SP3_WIDTH))

/*! @brief Set the SP3 field to a new value. */
#define AIPS_WR_PACRG_SP3(base, value) (AIPS_RMW_PACRG(base, AIPS_PACRG_SP3_MASK, AIPS_PACRG_SP3(value)))
#define AIPS_BWR_PACRG_SP3(base, value) (BME_BFI32(&AIPS_PACRG_REG(base), ((uint32_t)(value) << AIPS_PACRG_SP3_SHIFT), AIPS_PACRG_SP3_SHIFT, AIPS_PACRG_SP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRG, field TP2[20] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRG_TP2 field. */
#define AIPS_RD_PACRG_TP2(base) ((AIPS_PACRG_REG(base) & AIPS_PACRG_TP2_MASK) >> AIPS_PACRG_TP2_SHIFT)
#define AIPS_BRD_PACRG_TP2(base) (BME_UBFX32(&AIPS_PACRG_REG(base), AIPS_PACRG_TP2_SHIFT, AIPS_PACRG_TP2_WIDTH))

/*! @brief Set the TP2 field to a new value. */
#define AIPS_WR_PACRG_TP2(base, value) (AIPS_RMW_PACRG(base, AIPS_PACRG_TP2_MASK, AIPS_PACRG_TP2(value)))
#define AIPS_BWR_PACRG_TP2(base, value) (BME_BFI32(&AIPS_PACRG_REG(base), ((uint32_t)(value) << AIPS_PACRG_TP2_SHIFT), AIPS_PACRG_TP2_SHIFT, AIPS_PACRG_TP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRG, field WP2[21] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRG_WP2 field. */
#define AIPS_RD_PACRG_WP2(base) ((AIPS_PACRG_REG(base) & AIPS_PACRG_WP2_MASK) >> AIPS_PACRG_WP2_SHIFT)
#define AIPS_BRD_PACRG_WP2(base) (BME_UBFX32(&AIPS_PACRG_REG(base), AIPS_PACRG_WP2_SHIFT, AIPS_PACRG_WP2_WIDTH))

/*! @brief Set the WP2 field to a new value. */
#define AIPS_WR_PACRG_WP2(base, value) (AIPS_RMW_PACRG(base, AIPS_PACRG_WP2_MASK, AIPS_PACRG_WP2(value)))
#define AIPS_BWR_PACRG_WP2(base, value) (BME_BFI32(&AIPS_PACRG_REG(base), ((uint32_t)(value) << AIPS_PACRG_WP2_SHIFT), AIPS_PACRG_WP2_SHIFT, AIPS_PACRG_WP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRG, field SP2[22] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRG_SP2 field. */
#define AIPS_RD_PACRG_SP2(base) ((AIPS_PACRG_REG(base) & AIPS_PACRG_SP2_MASK) >> AIPS_PACRG_SP2_SHIFT)
#define AIPS_BRD_PACRG_SP2(base) (BME_UBFX32(&AIPS_PACRG_REG(base), AIPS_PACRG_SP2_SHIFT, AIPS_PACRG_SP2_WIDTH))

/*! @brief Set the SP2 field to a new value. */
#define AIPS_WR_PACRG_SP2(base, value) (AIPS_RMW_PACRG(base, AIPS_PACRG_SP2_MASK, AIPS_PACRG_SP2(value)))
#define AIPS_BWR_PACRG_SP2(base, value) (BME_BFI32(&AIPS_PACRG_REG(base), ((uint32_t)(value) << AIPS_PACRG_SP2_SHIFT), AIPS_PACRG_SP2_SHIFT, AIPS_PACRG_SP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRG, field TP1[24] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRG_TP1 field. */
#define AIPS_RD_PACRG_TP1(base) ((AIPS_PACRG_REG(base) & AIPS_PACRG_TP1_MASK) >> AIPS_PACRG_TP1_SHIFT)
#define AIPS_BRD_PACRG_TP1(base) (BME_UBFX32(&AIPS_PACRG_REG(base), AIPS_PACRG_TP1_SHIFT, AIPS_PACRG_TP1_WIDTH))

/*! @brief Set the TP1 field to a new value. */
#define AIPS_WR_PACRG_TP1(base, value) (AIPS_RMW_PACRG(base, AIPS_PACRG_TP1_MASK, AIPS_PACRG_TP1(value)))
#define AIPS_BWR_PACRG_TP1(base, value) (BME_BFI32(&AIPS_PACRG_REG(base), ((uint32_t)(value) << AIPS_PACRG_TP1_SHIFT), AIPS_PACRG_TP1_SHIFT, AIPS_PACRG_TP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRG, field WP1[25] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRG_WP1 field. */
#define AIPS_RD_PACRG_WP1(base) ((AIPS_PACRG_REG(base) & AIPS_PACRG_WP1_MASK) >> AIPS_PACRG_WP1_SHIFT)
#define AIPS_BRD_PACRG_WP1(base) (BME_UBFX32(&AIPS_PACRG_REG(base), AIPS_PACRG_WP1_SHIFT, AIPS_PACRG_WP1_WIDTH))

/*! @brief Set the WP1 field to a new value. */
#define AIPS_WR_PACRG_WP1(base, value) (AIPS_RMW_PACRG(base, AIPS_PACRG_WP1_MASK, AIPS_PACRG_WP1(value)))
#define AIPS_BWR_PACRG_WP1(base, value) (BME_BFI32(&AIPS_PACRG_REG(base), ((uint32_t)(value) << AIPS_PACRG_WP1_SHIFT), AIPS_PACRG_WP1_SHIFT, AIPS_PACRG_WP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRG, field SP1[26] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master must
 * be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRG_SP1 field. */
#define AIPS_RD_PACRG_SP1(base) ((AIPS_PACRG_REG(base) & AIPS_PACRG_SP1_MASK) >> AIPS_PACRG_SP1_SHIFT)
#define AIPS_BRD_PACRG_SP1(base) (BME_UBFX32(&AIPS_PACRG_REG(base), AIPS_PACRG_SP1_SHIFT, AIPS_PACRG_SP1_WIDTH))

/*! @brief Set the SP1 field to a new value. */
#define AIPS_WR_PACRG_SP1(base, value) (AIPS_RMW_PACRG(base, AIPS_PACRG_SP1_MASK, AIPS_PACRG_SP1(value)))
#define AIPS_BWR_PACRG_SP1(base, value) (BME_BFI32(&AIPS_PACRG_REG(base), ((uint32_t)(value) << AIPS_PACRG_SP1_SHIFT), AIPS_PACRG_SP1_SHIFT, AIPS_PACRG_SP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRG, field TP0[28] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRG_TP0 field. */
#define AIPS_RD_PACRG_TP0(base) ((AIPS_PACRG_REG(base) & AIPS_PACRG_TP0_MASK) >> AIPS_PACRG_TP0_SHIFT)
#define AIPS_BRD_PACRG_TP0(base) (BME_UBFX32(&AIPS_PACRG_REG(base), AIPS_PACRG_TP0_SHIFT, AIPS_PACRG_TP0_WIDTH))

/*! @brief Set the TP0 field to a new value. */
#define AIPS_WR_PACRG_TP0(base, value) (AIPS_RMW_PACRG(base, AIPS_PACRG_TP0_MASK, AIPS_PACRG_TP0(value)))
#define AIPS_BWR_PACRG_TP0(base, value) (BME_BFI32(&AIPS_PACRG_REG(base), ((uint32_t)(value) << AIPS_PACRG_TP0_SHIFT), AIPS_PACRG_TP0_SHIFT, AIPS_PACRG_TP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRG, field WP0[29] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRG_WP0 field. */
#define AIPS_RD_PACRG_WP0(base) ((AIPS_PACRG_REG(base) & AIPS_PACRG_WP0_MASK) >> AIPS_PACRG_WP0_SHIFT)
#define AIPS_BRD_PACRG_WP0(base) (BME_UBFX32(&AIPS_PACRG_REG(base), AIPS_PACRG_WP0_SHIFT, AIPS_PACRG_WP0_WIDTH))

/*! @brief Set the WP0 field to a new value. */
#define AIPS_WR_PACRG_WP0(base, value) (AIPS_RMW_PACRG(base, AIPS_PACRG_WP0_MASK, AIPS_PACRG_WP0(value)))
#define AIPS_BWR_PACRG_WP0(base, value) (BME_BFI32(&AIPS_PACRG_REG(base), ((uint32_t)(value) << AIPS_PACRG_WP0_SHIFT), AIPS_PACRG_WP0_SHIFT, AIPS_PACRG_WP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRG, field SP0[30] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRG_SP0 field. */
#define AIPS_RD_PACRG_SP0(base) ((AIPS_PACRG_REG(base) & AIPS_PACRG_SP0_MASK) >> AIPS_PACRG_SP0_SHIFT)
#define AIPS_BRD_PACRG_SP0(base) (BME_UBFX32(&AIPS_PACRG_REG(base), AIPS_PACRG_SP0_SHIFT, AIPS_PACRG_SP0_WIDTH))

/*! @brief Set the SP0 field to a new value. */
#define AIPS_WR_PACRG_SP0(base, value) (AIPS_RMW_PACRG(base, AIPS_PACRG_SP0_MASK, AIPS_PACRG_SP0(value)))
#define AIPS_BWR_PACRG_SP0(base, value) (BME_BFI32(&AIPS_PACRG_REG(base), ((uint32_t)(value) << AIPS_PACRG_SP0_SHIFT), AIPS_PACRG_SP0_SHIFT, AIPS_PACRG_SP0_WIDTH))
/*@}*/

/*******************************************************************************
 * AIPS_PACRH - Peripheral Access Control Register
 ******************************************************************************/

/*!
 * @brief AIPS_PACRH - Peripheral Access Control Register (RW)
 *
 * Reset value: 0x44440444U
 *
 * This section describes PACR registers E-P, which control peripheral slots
 * 32-127. See PACRPeripheral Access Control Register for the description of these
 * registers.
 */
/*!
 * @name Constants and macros for entire AIPS_PACRH register
 */
/*@{*/
#define AIPS_RD_PACRH(base)      (AIPS_PACRH_REG(base))
#define AIPS_WR_PACRH(base, value) (AIPS_PACRH_REG(base) = (value))
#define AIPS_RMW_PACRH(base, mask, value) (AIPS_WR_PACRH(base, (AIPS_RD_PACRH(base) & ~(mask)) | (value)))
#define AIPS_SET_PACRH(base, value) (BME_OR32(&AIPS_PACRH_REG(base), (uint32_t)(value)))
#define AIPS_CLR_PACRH(base, value) (BME_AND32(&AIPS_PACRH_REG(base), (uint32_t)(~(value))))
#define AIPS_TOG_PACRH(base, value) (BME_XOR32(&AIPS_PACRH_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual AIPS_PACRH bitfields
 */

/*!
 * @name Register AIPS_PACRH, field TP7[0] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRH_TP7 field. */
#define AIPS_RD_PACRH_TP7(base) ((AIPS_PACRH_REG(base) & AIPS_PACRH_TP7_MASK) >> AIPS_PACRH_TP7_SHIFT)
#define AIPS_BRD_PACRH_TP7(base) (BME_UBFX32(&AIPS_PACRH_REG(base), AIPS_PACRH_TP7_SHIFT, AIPS_PACRH_TP7_WIDTH))

/*! @brief Set the TP7 field to a new value. */
#define AIPS_WR_PACRH_TP7(base, value) (AIPS_RMW_PACRH(base, AIPS_PACRH_TP7_MASK, AIPS_PACRH_TP7(value)))
#define AIPS_BWR_PACRH_TP7(base, value) (BME_BFI32(&AIPS_PACRH_REG(base), ((uint32_t)(value) << AIPS_PACRH_TP7_SHIFT), AIPS_PACRH_TP7_SHIFT, AIPS_PACRH_TP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRH, field WP7[1] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRH_WP7 field. */
#define AIPS_RD_PACRH_WP7(base) ((AIPS_PACRH_REG(base) & AIPS_PACRH_WP7_MASK) >> AIPS_PACRH_WP7_SHIFT)
#define AIPS_BRD_PACRH_WP7(base) (BME_UBFX32(&AIPS_PACRH_REG(base), AIPS_PACRH_WP7_SHIFT, AIPS_PACRH_WP7_WIDTH))

/*! @brief Set the WP7 field to a new value. */
#define AIPS_WR_PACRH_WP7(base, value) (AIPS_RMW_PACRH(base, AIPS_PACRH_WP7_MASK, AIPS_PACRH_WP7(value)))
#define AIPS_BWR_PACRH_WP7(base, value) (BME_BFI32(&AIPS_PACRH_REG(base), ((uint32_t)(value) << AIPS_PACRH_WP7_SHIFT), AIPS_PACRH_WP7_SHIFT, AIPS_PACRH_WP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRH, field SP7[2] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRH_SP7 field. */
#define AIPS_RD_PACRH_SP7(base) ((AIPS_PACRH_REG(base) & AIPS_PACRH_SP7_MASK) >> AIPS_PACRH_SP7_SHIFT)
#define AIPS_BRD_PACRH_SP7(base) (BME_UBFX32(&AIPS_PACRH_REG(base), AIPS_PACRH_SP7_SHIFT, AIPS_PACRH_SP7_WIDTH))

/*! @brief Set the SP7 field to a new value. */
#define AIPS_WR_PACRH_SP7(base, value) (AIPS_RMW_PACRH(base, AIPS_PACRH_SP7_MASK, AIPS_PACRH_SP7(value)))
#define AIPS_BWR_PACRH_SP7(base, value) (BME_BFI32(&AIPS_PACRH_REG(base), ((uint32_t)(value) << AIPS_PACRH_SP7_SHIFT), AIPS_PACRH_SP7_SHIFT, AIPS_PACRH_SP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRH, field TP6[4] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRH_TP6 field. */
#define AIPS_RD_PACRH_TP6(base) ((AIPS_PACRH_REG(base) & AIPS_PACRH_TP6_MASK) >> AIPS_PACRH_TP6_SHIFT)
#define AIPS_BRD_PACRH_TP6(base) (BME_UBFX32(&AIPS_PACRH_REG(base), AIPS_PACRH_TP6_SHIFT, AIPS_PACRH_TP6_WIDTH))

/*! @brief Set the TP6 field to a new value. */
#define AIPS_WR_PACRH_TP6(base, value) (AIPS_RMW_PACRH(base, AIPS_PACRH_TP6_MASK, AIPS_PACRH_TP6(value)))
#define AIPS_BWR_PACRH_TP6(base, value) (BME_BFI32(&AIPS_PACRH_REG(base), ((uint32_t)(value) << AIPS_PACRH_TP6_SHIFT), AIPS_PACRH_TP6_SHIFT, AIPS_PACRH_TP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRH, field WP6[5] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRH_WP6 field. */
#define AIPS_RD_PACRH_WP6(base) ((AIPS_PACRH_REG(base) & AIPS_PACRH_WP6_MASK) >> AIPS_PACRH_WP6_SHIFT)
#define AIPS_BRD_PACRH_WP6(base) (BME_UBFX32(&AIPS_PACRH_REG(base), AIPS_PACRH_WP6_SHIFT, AIPS_PACRH_WP6_WIDTH))

/*! @brief Set the WP6 field to a new value. */
#define AIPS_WR_PACRH_WP6(base, value) (AIPS_RMW_PACRH(base, AIPS_PACRH_WP6_MASK, AIPS_PACRH_WP6(value)))
#define AIPS_BWR_PACRH_WP6(base, value) (BME_BFI32(&AIPS_PACRH_REG(base), ((uint32_t)(value) << AIPS_PACRH_WP6_SHIFT), AIPS_PACRH_WP6_SHIFT, AIPS_PACRH_WP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRH, field SP6[6] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRH_SP6 field. */
#define AIPS_RD_PACRH_SP6(base) ((AIPS_PACRH_REG(base) & AIPS_PACRH_SP6_MASK) >> AIPS_PACRH_SP6_SHIFT)
#define AIPS_BRD_PACRH_SP6(base) (BME_UBFX32(&AIPS_PACRH_REG(base), AIPS_PACRH_SP6_SHIFT, AIPS_PACRH_SP6_WIDTH))

/*! @brief Set the SP6 field to a new value. */
#define AIPS_WR_PACRH_SP6(base, value) (AIPS_RMW_PACRH(base, AIPS_PACRH_SP6_MASK, AIPS_PACRH_SP6(value)))
#define AIPS_BWR_PACRH_SP6(base, value) (BME_BFI32(&AIPS_PACRH_REG(base), ((uint32_t)(value) << AIPS_PACRH_SP6_SHIFT), AIPS_PACRH_SP6_SHIFT, AIPS_PACRH_SP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRH, field TP5[8] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRH_TP5 field. */
#define AIPS_RD_PACRH_TP5(base) ((AIPS_PACRH_REG(base) & AIPS_PACRH_TP5_MASK) >> AIPS_PACRH_TP5_SHIFT)
#define AIPS_BRD_PACRH_TP5(base) (BME_UBFX32(&AIPS_PACRH_REG(base), AIPS_PACRH_TP5_SHIFT, AIPS_PACRH_TP5_WIDTH))

/*! @brief Set the TP5 field to a new value. */
#define AIPS_WR_PACRH_TP5(base, value) (AIPS_RMW_PACRH(base, AIPS_PACRH_TP5_MASK, AIPS_PACRH_TP5(value)))
#define AIPS_BWR_PACRH_TP5(base, value) (BME_BFI32(&AIPS_PACRH_REG(base), ((uint32_t)(value) << AIPS_PACRH_TP5_SHIFT), AIPS_PACRH_TP5_SHIFT, AIPS_PACRH_TP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRH, field WP5[9] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRH_WP5 field. */
#define AIPS_RD_PACRH_WP5(base) ((AIPS_PACRH_REG(base) & AIPS_PACRH_WP5_MASK) >> AIPS_PACRH_WP5_SHIFT)
#define AIPS_BRD_PACRH_WP5(base) (BME_UBFX32(&AIPS_PACRH_REG(base), AIPS_PACRH_WP5_SHIFT, AIPS_PACRH_WP5_WIDTH))

/*! @brief Set the WP5 field to a new value. */
#define AIPS_WR_PACRH_WP5(base, value) (AIPS_RMW_PACRH(base, AIPS_PACRH_WP5_MASK, AIPS_PACRH_WP5(value)))
#define AIPS_BWR_PACRH_WP5(base, value) (BME_BFI32(&AIPS_PACRH_REG(base), ((uint32_t)(value) << AIPS_PACRH_WP5_SHIFT), AIPS_PACRH_WP5_SHIFT, AIPS_PACRH_WP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRH, field SP5[10] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRH_SP5 field. */
#define AIPS_RD_PACRH_SP5(base) ((AIPS_PACRH_REG(base) & AIPS_PACRH_SP5_MASK) >> AIPS_PACRH_SP5_SHIFT)
#define AIPS_BRD_PACRH_SP5(base) (BME_UBFX32(&AIPS_PACRH_REG(base), AIPS_PACRH_SP5_SHIFT, AIPS_PACRH_SP5_WIDTH))

/*! @brief Set the SP5 field to a new value. */
#define AIPS_WR_PACRH_SP5(base, value) (AIPS_RMW_PACRH(base, AIPS_PACRH_SP5_MASK, AIPS_PACRH_SP5(value)))
#define AIPS_BWR_PACRH_SP5(base, value) (BME_BFI32(&AIPS_PACRH_REG(base), ((uint32_t)(value) << AIPS_PACRH_SP5_SHIFT), AIPS_PACRH_SP5_SHIFT, AIPS_PACRH_SP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRH, field TP4[12] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRH_TP4 field. */
#define AIPS_RD_PACRH_TP4(base) ((AIPS_PACRH_REG(base) & AIPS_PACRH_TP4_MASK) >> AIPS_PACRH_TP4_SHIFT)
#define AIPS_BRD_PACRH_TP4(base) (BME_UBFX32(&AIPS_PACRH_REG(base), AIPS_PACRH_TP4_SHIFT, AIPS_PACRH_TP4_WIDTH))

/*! @brief Set the TP4 field to a new value. */
#define AIPS_WR_PACRH_TP4(base, value) (AIPS_RMW_PACRH(base, AIPS_PACRH_TP4_MASK, AIPS_PACRH_TP4(value)))
#define AIPS_BWR_PACRH_TP4(base, value) (BME_BFI32(&AIPS_PACRH_REG(base), ((uint32_t)(value) << AIPS_PACRH_TP4_SHIFT), AIPS_PACRH_TP4_SHIFT, AIPS_PACRH_TP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRH, field WP4[13] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRH_WP4 field. */
#define AIPS_RD_PACRH_WP4(base) ((AIPS_PACRH_REG(base) & AIPS_PACRH_WP4_MASK) >> AIPS_PACRH_WP4_SHIFT)
#define AIPS_BRD_PACRH_WP4(base) (BME_UBFX32(&AIPS_PACRH_REG(base), AIPS_PACRH_WP4_SHIFT, AIPS_PACRH_WP4_WIDTH))

/*! @brief Set the WP4 field to a new value. */
#define AIPS_WR_PACRH_WP4(base, value) (AIPS_RMW_PACRH(base, AIPS_PACRH_WP4_MASK, AIPS_PACRH_WP4(value)))
#define AIPS_BWR_PACRH_WP4(base, value) (BME_BFI32(&AIPS_PACRH_REG(base), ((uint32_t)(value) << AIPS_PACRH_WP4_SHIFT), AIPS_PACRH_WP4_SHIFT, AIPS_PACRH_WP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRH, field SP4[14] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRH_SP4 field. */
#define AIPS_RD_PACRH_SP4(base) ((AIPS_PACRH_REG(base) & AIPS_PACRH_SP4_MASK) >> AIPS_PACRH_SP4_SHIFT)
#define AIPS_BRD_PACRH_SP4(base) (BME_UBFX32(&AIPS_PACRH_REG(base), AIPS_PACRH_SP4_SHIFT, AIPS_PACRH_SP4_WIDTH))

/*! @brief Set the SP4 field to a new value. */
#define AIPS_WR_PACRH_SP4(base, value) (AIPS_RMW_PACRH(base, AIPS_PACRH_SP4_MASK, AIPS_PACRH_SP4(value)))
#define AIPS_BWR_PACRH_SP4(base, value) (BME_BFI32(&AIPS_PACRH_REG(base), ((uint32_t)(value) << AIPS_PACRH_SP4_SHIFT), AIPS_PACRH_SP4_SHIFT, AIPS_PACRH_SP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRH, field TP3[16] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRH_TP3 field. */
#define AIPS_RD_PACRH_TP3(base) ((AIPS_PACRH_REG(base) & AIPS_PACRH_TP3_MASK) >> AIPS_PACRH_TP3_SHIFT)
#define AIPS_BRD_PACRH_TP3(base) (BME_UBFX32(&AIPS_PACRH_REG(base), AIPS_PACRH_TP3_SHIFT, AIPS_PACRH_TP3_WIDTH))

/*! @brief Set the TP3 field to a new value. */
#define AIPS_WR_PACRH_TP3(base, value) (AIPS_RMW_PACRH(base, AIPS_PACRH_TP3_MASK, AIPS_PACRH_TP3(value)))
#define AIPS_BWR_PACRH_TP3(base, value) (BME_BFI32(&AIPS_PACRH_REG(base), ((uint32_t)(value) << AIPS_PACRH_TP3_SHIFT), AIPS_PACRH_TP3_SHIFT, AIPS_PACRH_TP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRH, field WP3[17] (RW)
 *
 * Determines whether the peripheral allows write accesss. When this bit is set
 * and a write access is attempted, access terminates with an error response and
 * no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRH_WP3 field. */
#define AIPS_RD_PACRH_WP3(base) ((AIPS_PACRH_REG(base) & AIPS_PACRH_WP3_MASK) >> AIPS_PACRH_WP3_SHIFT)
#define AIPS_BRD_PACRH_WP3(base) (BME_UBFX32(&AIPS_PACRH_REG(base), AIPS_PACRH_WP3_SHIFT, AIPS_PACRH_WP3_WIDTH))

/*! @brief Set the WP3 field to a new value. */
#define AIPS_WR_PACRH_WP3(base, value) (AIPS_RMW_PACRH(base, AIPS_PACRH_WP3_MASK, AIPS_PACRH_WP3(value)))
#define AIPS_BWR_PACRH_WP3(base, value) (BME_BFI32(&AIPS_PACRH_REG(base), ((uint32_t)(value) << AIPS_PACRH_WP3_SHIFT), AIPS_PACRH_WP3_SHIFT, AIPS_PACRH_WP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRH, field SP3[18] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRH_SP3 field. */
#define AIPS_RD_PACRH_SP3(base) ((AIPS_PACRH_REG(base) & AIPS_PACRH_SP3_MASK) >> AIPS_PACRH_SP3_SHIFT)
#define AIPS_BRD_PACRH_SP3(base) (BME_UBFX32(&AIPS_PACRH_REG(base), AIPS_PACRH_SP3_SHIFT, AIPS_PACRH_SP3_WIDTH))

/*! @brief Set the SP3 field to a new value. */
#define AIPS_WR_PACRH_SP3(base, value) (AIPS_RMW_PACRH(base, AIPS_PACRH_SP3_MASK, AIPS_PACRH_SP3(value)))
#define AIPS_BWR_PACRH_SP3(base, value) (BME_BFI32(&AIPS_PACRH_REG(base), ((uint32_t)(value) << AIPS_PACRH_SP3_SHIFT), AIPS_PACRH_SP3_SHIFT, AIPS_PACRH_SP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRH, field TP2[20] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRH_TP2 field. */
#define AIPS_RD_PACRH_TP2(base) ((AIPS_PACRH_REG(base) & AIPS_PACRH_TP2_MASK) >> AIPS_PACRH_TP2_SHIFT)
#define AIPS_BRD_PACRH_TP2(base) (BME_UBFX32(&AIPS_PACRH_REG(base), AIPS_PACRH_TP2_SHIFT, AIPS_PACRH_TP2_WIDTH))

/*! @brief Set the TP2 field to a new value. */
#define AIPS_WR_PACRH_TP2(base, value) (AIPS_RMW_PACRH(base, AIPS_PACRH_TP2_MASK, AIPS_PACRH_TP2(value)))
#define AIPS_BWR_PACRH_TP2(base, value) (BME_BFI32(&AIPS_PACRH_REG(base), ((uint32_t)(value) << AIPS_PACRH_TP2_SHIFT), AIPS_PACRH_TP2_SHIFT, AIPS_PACRH_TP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRH, field WP2[21] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRH_WP2 field. */
#define AIPS_RD_PACRH_WP2(base) ((AIPS_PACRH_REG(base) & AIPS_PACRH_WP2_MASK) >> AIPS_PACRH_WP2_SHIFT)
#define AIPS_BRD_PACRH_WP2(base) (BME_UBFX32(&AIPS_PACRH_REG(base), AIPS_PACRH_WP2_SHIFT, AIPS_PACRH_WP2_WIDTH))

/*! @brief Set the WP2 field to a new value. */
#define AIPS_WR_PACRH_WP2(base, value) (AIPS_RMW_PACRH(base, AIPS_PACRH_WP2_MASK, AIPS_PACRH_WP2(value)))
#define AIPS_BWR_PACRH_WP2(base, value) (BME_BFI32(&AIPS_PACRH_REG(base), ((uint32_t)(value) << AIPS_PACRH_WP2_SHIFT), AIPS_PACRH_WP2_SHIFT, AIPS_PACRH_WP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRH, field SP2[22] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRH_SP2 field. */
#define AIPS_RD_PACRH_SP2(base) ((AIPS_PACRH_REG(base) & AIPS_PACRH_SP2_MASK) >> AIPS_PACRH_SP2_SHIFT)
#define AIPS_BRD_PACRH_SP2(base) (BME_UBFX32(&AIPS_PACRH_REG(base), AIPS_PACRH_SP2_SHIFT, AIPS_PACRH_SP2_WIDTH))

/*! @brief Set the SP2 field to a new value. */
#define AIPS_WR_PACRH_SP2(base, value) (AIPS_RMW_PACRH(base, AIPS_PACRH_SP2_MASK, AIPS_PACRH_SP2(value)))
#define AIPS_BWR_PACRH_SP2(base, value) (BME_BFI32(&AIPS_PACRH_REG(base), ((uint32_t)(value) << AIPS_PACRH_SP2_SHIFT), AIPS_PACRH_SP2_SHIFT, AIPS_PACRH_SP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRH, field TP1[24] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRH_TP1 field. */
#define AIPS_RD_PACRH_TP1(base) ((AIPS_PACRH_REG(base) & AIPS_PACRH_TP1_MASK) >> AIPS_PACRH_TP1_SHIFT)
#define AIPS_BRD_PACRH_TP1(base) (BME_UBFX32(&AIPS_PACRH_REG(base), AIPS_PACRH_TP1_SHIFT, AIPS_PACRH_TP1_WIDTH))

/*! @brief Set the TP1 field to a new value. */
#define AIPS_WR_PACRH_TP1(base, value) (AIPS_RMW_PACRH(base, AIPS_PACRH_TP1_MASK, AIPS_PACRH_TP1(value)))
#define AIPS_BWR_PACRH_TP1(base, value) (BME_BFI32(&AIPS_PACRH_REG(base), ((uint32_t)(value) << AIPS_PACRH_TP1_SHIFT), AIPS_PACRH_TP1_SHIFT, AIPS_PACRH_TP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRH, field WP1[25] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRH_WP1 field. */
#define AIPS_RD_PACRH_WP1(base) ((AIPS_PACRH_REG(base) & AIPS_PACRH_WP1_MASK) >> AIPS_PACRH_WP1_SHIFT)
#define AIPS_BRD_PACRH_WP1(base) (BME_UBFX32(&AIPS_PACRH_REG(base), AIPS_PACRH_WP1_SHIFT, AIPS_PACRH_WP1_WIDTH))

/*! @brief Set the WP1 field to a new value. */
#define AIPS_WR_PACRH_WP1(base, value) (AIPS_RMW_PACRH(base, AIPS_PACRH_WP1_MASK, AIPS_PACRH_WP1(value)))
#define AIPS_BWR_PACRH_WP1(base, value) (BME_BFI32(&AIPS_PACRH_REG(base), ((uint32_t)(value) << AIPS_PACRH_WP1_SHIFT), AIPS_PACRH_WP1_SHIFT, AIPS_PACRH_WP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRH, field SP1[26] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master must
 * be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRH_SP1 field. */
#define AIPS_RD_PACRH_SP1(base) ((AIPS_PACRH_REG(base) & AIPS_PACRH_SP1_MASK) >> AIPS_PACRH_SP1_SHIFT)
#define AIPS_BRD_PACRH_SP1(base) (BME_UBFX32(&AIPS_PACRH_REG(base), AIPS_PACRH_SP1_SHIFT, AIPS_PACRH_SP1_WIDTH))

/*! @brief Set the SP1 field to a new value. */
#define AIPS_WR_PACRH_SP1(base, value) (AIPS_RMW_PACRH(base, AIPS_PACRH_SP1_MASK, AIPS_PACRH_SP1(value)))
#define AIPS_BWR_PACRH_SP1(base, value) (BME_BFI32(&AIPS_PACRH_REG(base), ((uint32_t)(value) << AIPS_PACRH_SP1_SHIFT), AIPS_PACRH_SP1_SHIFT, AIPS_PACRH_SP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRH, field TP0[28] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRH_TP0 field. */
#define AIPS_RD_PACRH_TP0(base) ((AIPS_PACRH_REG(base) & AIPS_PACRH_TP0_MASK) >> AIPS_PACRH_TP0_SHIFT)
#define AIPS_BRD_PACRH_TP0(base) (BME_UBFX32(&AIPS_PACRH_REG(base), AIPS_PACRH_TP0_SHIFT, AIPS_PACRH_TP0_WIDTH))

/*! @brief Set the TP0 field to a new value. */
#define AIPS_WR_PACRH_TP0(base, value) (AIPS_RMW_PACRH(base, AIPS_PACRH_TP0_MASK, AIPS_PACRH_TP0(value)))
#define AIPS_BWR_PACRH_TP0(base, value) (BME_BFI32(&AIPS_PACRH_REG(base), ((uint32_t)(value) << AIPS_PACRH_TP0_SHIFT), AIPS_PACRH_TP0_SHIFT, AIPS_PACRH_TP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRH, field WP0[29] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRH_WP0 field. */
#define AIPS_RD_PACRH_WP0(base) ((AIPS_PACRH_REG(base) & AIPS_PACRH_WP0_MASK) >> AIPS_PACRH_WP0_SHIFT)
#define AIPS_BRD_PACRH_WP0(base) (BME_UBFX32(&AIPS_PACRH_REG(base), AIPS_PACRH_WP0_SHIFT, AIPS_PACRH_WP0_WIDTH))

/*! @brief Set the WP0 field to a new value. */
#define AIPS_WR_PACRH_WP0(base, value) (AIPS_RMW_PACRH(base, AIPS_PACRH_WP0_MASK, AIPS_PACRH_WP0(value)))
#define AIPS_BWR_PACRH_WP0(base, value) (BME_BFI32(&AIPS_PACRH_REG(base), ((uint32_t)(value) << AIPS_PACRH_WP0_SHIFT), AIPS_PACRH_WP0_SHIFT, AIPS_PACRH_WP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRH, field SP0[30] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRH_SP0 field. */
#define AIPS_RD_PACRH_SP0(base) ((AIPS_PACRH_REG(base) & AIPS_PACRH_SP0_MASK) >> AIPS_PACRH_SP0_SHIFT)
#define AIPS_BRD_PACRH_SP0(base) (BME_UBFX32(&AIPS_PACRH_REG(base), AIPS_PACRH_SP0_SHIFT, AIPS_PACRH_SP0_WIDTH))

/*! @brief Set the SP0 field to a new value. */
#define AIPS_WR_PACRH_SP0(base, value) (AIPS_RMW_PACRH(base, AIPS_PACRH_SP0_MASK, AIPS_PACRH_SP0(value)))
#define AIPS_BWR_PACRH_SP0(base, value) (BME_BFI32(&AIPS_PACRH_REG(base), ((uint32_t)(value) << AIPS_PACRH_SP0_SHIFT), AIPS_PACRH_SP0_SHIFT, AIPS_PACRH_SP0_WIDTH))
/*@}*/

/*******************************************************************************
 * AIPS_PACRI - Peripheral Access Control Register
 ******************************************************************************/

/*!
 * @brief AIPS_PACRI - Peripheral Access Control Register (RW)
 *
 * Reset value: 0x44004404U
 *
 * This section describes PACR registers E-P, which control peripheral slots
 * 32-127. See PACRPeripheral Access Control Register for the description of these
 * registers.
 */
/*!
 * @name Constants and macros for entire AIPS_PACRI register
 */
/*@{*/
#define AIPS_RD_PACRI(base)      (AIPS_PACRI_REG(base))
#define AIPS_WR_PACRI(base, value) (AIPS_PACRI_REG(base) = (value))
#define AIPS_RMW_PACRI(base, mask, value) (AIPS_WR_PACRI(base, (AIPS_RD_PACRI(base) & ~(mask)) | (value)))
#define AIPS_SET_PACRI(base, value) (BME_OR32(&AIPS_PACRI_REG(base), (uint32_t)(value)))
#define AIPS_CLR_PACRI(base, value) (BME_AND32(&AIPS_PACRI_REG(base), (uint32_t)(~(value))))
#define AIPS_TOG_PACRI(base, value) (BME_XOR32(&AIPS_PACRI_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual AIPS_PACRI bitfields
 */

/*!
 * @name Register AIPS_PACRI, field TP7[0] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRI_TP7 field. */
#define AIPS_RD_PACRI_TP7(base) ((AIPS_PACRI_REG(base) & AIPS_PACRI_TP7_MASK) >> AIPS_PACRI_TP7_SHIFT)
#define AIPS_BRD_PACRI_TP7(base) (BME_UBFX32(&AIPS_PACRI_REG(base), AIPS_PACRI_TP7_SHIFT, AIPS_PACRI_TP7_WIDTH))

/*! @brief Set the TP7 field to a new value. */
#define AIPS_WR_PACRI_TP7(base, value) (AIPS_RMW_PACRI(base, AIPS_PACRI_TP7_MASK, AIPS_PACRI_TP7(value)))
#define AIPS_BWR_PACRI_TP7(base, value) (BME_BFI32(&AIPS_PACRI_REG(base), ((uint32_t)(value) << AIPS_PACRI_TP7_SHIFT), AIPS_PACRI_TP7_SHIFT, AIPS_PACRI_TP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRI, field WP7[1] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRI_WP7 field. */
#define AIPS_RD_PACRI_WP7(base) ((AIPS_PACRI_REG(base) & AIPS_PACRI_WP7_MASK) >> AIPS_PACRI_WP7_SHIFT)
#define AIPS_BRD_PACRI_WP7(base) (BME_UBFX32(&AIPS_PACRI_REG(base), AIPS_PACRI_WP7_SHIFT, AIPS_PACRI_WP7_WIDTH))

/*! @brief Set the WP7 field to a new value. */
#define AIPS_WR_PACRI_WP7(base, value) (AIPS_RMW_PACRI(base, AIPS_PACRI_WP7_MASK, AIPS_PACRI_WP7(value)))
#define AIPS_BWR_PACRI_WP7(base, value) (BME_BFI32(&AIPS_PACRI_REG(base), ((uint32_t)(value) << AIPS_PACRI_WP7_SHIFT), AIPS_PACRI_WP7_SHIFT, AIPS_PACRI_WP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRI, field SP7[2] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRI_SP7 field. */
#define AIPS_RD_PACRI_SP7(base) ((AIPS_PACRI_REG(base) & AIPS_PACRI_SP7_MASK) >> AIPS_PACRI_SP7_SHIFT)
#define AIPS_BRD_PACRI_SP7(base) (BME_UBFX32(&AIPS_PACRI_REG(base), AIPS_PACRI_SP7_SHIFT, AIPS_PACRI_SP7_WIDTH))

/*! @brief Set the SP7 field to a new value. */
#define AIPS_WR_PACRI_SP7(base, value) (AIPS_RMW_PACRI(base, AIPS_PACRI_SP7_MASK, AIPS_PACRI_SP7(value)))
#define AIPS_BWR_PACRI_SP7(base, value) (BME_BFI32(&AIPS_PACRI_REG(base), ((uint32_t)(value) << AIPS_PACRI_SP7_SHIFT), AIPS_PACRI_SP7_SHIFT, AIPS_PACRI_SP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRI, field TP6[4] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRI_TP6 field. */
#define AIPS_RD_PACRI_TP6(base) ((AIPS_PACRI_REG(base) & AIPS_PACRI_TP6_MASK) >> AIPS_PACRI_TP6_SHIFT)
#define AIPS_BRD_PACRI_TP6(base) (BME_UBFX32(&AIPS_PACRI_REG(base), AIPS_PACRI_TP6_SHIFT, AIPS_PACRI_TP6_WIDTH))

/*! @brief Set the TP6 field to a new value. */
#define AIPS_WR_PACRI_TP6(base, value) (AIPS_RMW_PACRI(base, AIPS_PACRI_TP6_MASK, AIPS_PACRI_TP6(value)))
#define AIPS_BWR_PACRI_TP6(base, value) (BME_BFI32(&AIPS_PACRI_REG(base), ((uint32_t)(value) << AIPS_PACRI_TP6_SHIFT), AIPS_PACRI_TP6_SHIFT, AIPS_PACRI_TP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRI, field WP6[5] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRI_WP6 field. */
#define AIPS_RD_PACRI_WP6(base) ((AIPS_PACRI_REG(base) & AIPS_PACRI_WP6_MASK) >> AIPS_PACRI_WP6_SHIFT)
#define AIPS_BRD_PACRI_WP6(base) (BME_UBFX32(&AIPS_PACRI_REG(base), AIPS_PACRI_WP6_SHIFT, AIPS_PACRI_WP6_WIDTH))

/*! @brief Set the WP6 field to a new value. */
#define AIPS_WR_PACRI_WP6(base, value) (AIPS_RMW_PACRI(base, AIPS_PACRI_WP6_MASK, AIPS_PACRI_WP6(value)))
#define AIPS_BWR_PACRI_WP6(base, value) (BME_BFI32(&AIPS_PACRI_REG(base), ((uint32_t)(value) << AIPS_PACRI_WP6_SHIFT), AIPS_PACRI_WP6_SHIFT, AIPS_PACRI_WP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRI, field SP6[6] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRI_SP6 field. */
#define AIPS_RD_PACRI_SP6(base) ((AIPS_PACRI_REG(base) & AIPS_PACRI_SP6_MASK) >> AIPS_PACRI_SP6_SHIFT)
#define AIPS_BRD_PACRI_SP6(base) (BME_UBFX32(&AIPS_PACRI_REG(base), AIPS_PACRI_SP6_SHIFT, AIPS_PACRI_SP6_WIDTH))

/*! @brief Set the SP6 field to a new value. */
#define AIPS_WR_PACRI_SP6(base, value) (AIPS_RMW_PACRI(base, AIPS_PACRI_SP6_MASK, AIPS_PACRI_SP6(value)))
#define AIPS_BWR_PACRI_SP6(base, value) (BME_BFI32(&AIPS_PACRI_REG(base), ((uint32_t)(value) << AIPS_PACRI_SP6_SHIFT), AIPS_PACRI_SP6_SHIFT, AIPS_PACRI_SP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRI, field TP5[8] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRI_TP5 field. */
#define AIPS_RD_PACRI_TP5(base) ((AIPS_PACRI_REG(base) & AIPS_PACRI_TP5_MASK) >> AIPS_PACRI_TP5_SHIFT)
#define AIPS_BRD_PACRI_TP5(base) (BME_UBFX32(&AIPS_PACRI_REG(base), AIPS_PACRI_TP5_SHIFT, AIPS_PACRI_TP5_WIDTH))

/*! @brief Set the TP5 field to a new value. */
#define AIPS_WR_PACRI_TP5(base, value) (AIPS_RMW_PACRI(base, AIPS_PACRI_TP5_MASK, AIPS_PACRI_TP5(value)))
#define AIPS_BWR_PACRI_TP5(base, value) (BME_BFI32(&AIPS_PACRI_REG(base), ((uint32_t)(value) << AIPS_PACRI_TP5_SHIFT), AIPS_PACRI_TP5_SHIFT, AIPS_PACRI_TP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRI, field WP5[9] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRI_WP5 field. */
#define AIPS_RD_PACRI_WP5(base) ((AIPS_PACRI_REG(base) & AIPS_PACRI_WP5_MASK) >> AIPS_PACRI_WP5_SHIFT)
#define AIPS_BRD_PACRI_WP5(base) (BME_UBFX32(&AIPS_PACRI_REG(base), AIPS_PACRI_WP5_SHIFT, AIPS_PACRI_WP5_WIDTH))

/*! @brief Set the WP5 field to a new value. */
#define AIPS_WR_PACRI_WP5(base, value) (AIPS_RMW_PACRI(base, AIPS_PACRI_WP5_MASK, AIPS_PACRI_WP5(value)))
#define AIPS_BWR_PACRI_WP5(base, value) (BME_BFI32(&AIPS_PACRI_REG(base), ((uint32_t)(value) << AIPS_PACRI_WP5_SHIFT), AIPS_PACRI_WP5_SHIFT, AIPS_PACRI_WP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRI, field SP5[10] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRI_SP5 field. */
#define AIPS_RD_PACRI_SP5(base) ((AIPS_PACRI_REG(base) & AIPS_PACRI_SP5_MASK) >> AIPS_PACRI_SP5_SHIFT)
#define AIPS_BRD_PACRI_SP5(base) (BME_UBFX32(&AIPS_PACRI_REG(base), AIPS_PACRI_SP5_SHIFT, AIPS_PACRI_SP5_WIDTH))

/*! @brief Set the SP5 field to a new value. */
#define AIPS_WR_PACRI_SP5(base, value) (AIPS_RMW_PACRI(base, AIPS_PACRI_SP5_MASK, AIPS_PACRI_SP5(value)))
#define AIPS_BWR_PACRI_SP5(base, value) (BME_BFI32(&AIPS_PACRI_REG(base), ((uint32_t)(value) << AIPS_PACRI_SP5_SHIFT), AIPS_PACRI_SP5_SHIFT, AIPS_PACRI_SP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRI, field TP4[12] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRI_TP4 field. */
#define AIPS_RD_PACRI_TP4(base) ((AIPS_PACRI_REG(base) & AIPS_PACRI_TP4_MASK) >> AIPS_PACRI_TP4_SHIFT)
#define AIPS_BRD_PACRI_TP4(base) (BME_UBFX32(&AIPS_PACRI_REG(base), AIPS_PACRI_TP4_SHIFT, AIPS_PACRI_TP4_WIDTH))

/*! @brief Set the TP4 field to a new value. */
#define AIPS_WR_PACRI_TP4(base, value) (AIPS_RMW_PACRI(base, AIPS_PACRI_TP4_MASK, AIPS_PACRI_TP4(value)))
#define AIPS_BWR_PACRI_TP4(base, value) (BME_BFI32(&AIPS_PACRI_REG(base), ((uint32_t)(value) << AIPS_PACRI_TP4_SHIFT), AIPS_PACRI_TP4_SHIFT, AIPS_PACRI_TP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRI, field WP4[13] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRI_WP4 field. */
#define AIPS_RD_PACRI_WP4(base) ((AIPS_PACRI_REG(base) & AIPS_PACRI_WP4_MASK) >> AIPS_PACRI_WP4_SHIFT)
#define AIPS_BRD_PACRI_WP4(base) (BME_UBFX32(&AIPS_PACRI_REG(base), AIPS_PACRI_WP4_SHIFT, AIPS_PACRI_WP4_WIDTH))

/*! @brief Set the WP4 field to a new value. */
#define AIPS_WR_PACRI_WP4(base, value) (AIPS_RMW_PACRI(base, AIPS_PACRI_WP4_MASK, AIPS_PACRI_WP4(value)))
#define AIPS_BWR_PACRI_WP4(base, value) (BME_BFI32(&AIPS_PACRI_REG(base), ((uint32_t)(value) << AIPS_PACRI_WP4_SHIFT), AIPS_PACRI_WP4_SHIFT, AIPS_PACRI_WP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRI, field SP4[14] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRI_SP4 field. */
#define AIPS_RD_PACRI_SP4(base) ((AIPS_PACRI_REG(base) & AIPS_PACRI_SP4_MASK) >> AIPS_PACRI_SP4_SHIFT)
#define AIPS_BRD_PACRI_SP4(base) (BME_UBFX32(&AIPS_PACRI_REG(base), AIPS_PACRI_SP4_SHIFT, AIPS_PACRI_SP4_WIDTH))

/*! @brief Set the SP4 field to a new value. */
#define AIPS_WR_PACRI_SP4(base, value) (AIPS_RMW_PACRI(base, AIPS_PACRI_SP4_MASK, AIPS_PACRI_SP4(value)))
#define AIPS_BWR_PACRI_SP4(base, value) (BME_BFI32(&AIPS_PACRI_REG(base), ((uint32_t)(value) << AIPS_PACRI_SP4_SHIFT), AIPS_PACRI_SP4_SHIFT, AIPS_PACRI_SP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRI, field TP3[16] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRI_TP3 field. */
#define AIPS_RD_PACRI_TP3(base) ((AIPS_PACRI_REG(base) & AIPS_PACRI_TP3_MASK) >> AIPS_PACRI_TP3_SHIFT)
#define AIPS_BRD_PACRI_TP3(base) (BME_UBFX32(&AIPS_PACRI_REG(base), AIPS_PACRI_TP3_SHIFT, AIPS_PACRI_TP3_WIDTH))

/*! @brief Set the TP3 field to a new value. */
#define AIPS_WR_PACRI_TP3(base, value) (AIPS_RMW_PACRI(base, AIPS_PACRI_TP3_MASK, AIPS_PACRI_TP3(value)))
#define AIPS_BWR_PACRI_TP3(base, value) (BME_BFI32(&AIPS_PACRI_REG(base), ((uint32_t)(value) << AIPS_PACRI_TP3_SHIFT), AIPS_PACRI_TP3_SHIFT, AIPS_PACRI_TP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRI, field WP3[17] (RW)
 *
 * Determines whether the peripheral allows write accesss. When this bit is set
 * and a write access is attempted, access terminates with an error response and
 * no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRI_WP3 field. */
#define AIPS_RD_PACRI_WP3(base) ((AIPS_PACRI_REG(base) & AIPS_PACRI_WP3_MASK) >> AIPS_PACRI_WP3_SHIFT)
#define AIPS_BRD_PACRI_WP3(base) (BME_UBFX32(&AIPS_PACRI_REG(base), AIPS_PACRI_WP3_SHIFT, AIPS_PACRI_WP3_WIDTH))

/*! @brief Set the WP3 field to a new value. */
#define AIPS_WR_PACRI_WP3(base, value) (AIPS_RMW_PACRI(base, AIPS_PACRI_WP3_MASK, AIPS_PACRI_WP3(value)))
#define AIPS_BWR_PACRI_WP3(base, value) (BME_BFI32(&AIPS_PACRI_REG(base), ((uint32_t)(value) << AIPS_PACRI_WP3_SHIFT), AIPS_PACRI_WP3_SHIFT, AIPS_PACRI_WP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRI, field SP3[18] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRI_SP3 field. */
#define AIPS_RD_PACRI_SP3(base) ((AIPS_PACRI_REG(base) & AIPS_PACRI_SP3_MASK) >> AIPS_PACRI_SP3_SHIFT)
#define AIPS_BRD_PACRI_SP3(base) (BME_UBFX32(&AIPS_PACRI_REG(base), AIPS_PACRI_SP3_SHIFT, AIPS_PACRI_SP3_WIDTH))

/*! @brief Set the SP3 field to a new value. */
#define AIPS_WR_PACRI_SP3(base, value) (AIPS_RMW_PACRI(base, AIPS_PACRI_SP3_MASK, AIPS_PACRI_SP3(value)))
#define AIPS_BWR_PACRI_SP3(base, value) (BME_BFI32(&AIPS_PACRI_REG(base), ((uint32_t)(value) << AIPS_PACRI_SP3_SHIFT), AIPS_PACRI_SP3_SHIFT, AIPS_PACRI_SP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRI, field TP2[20] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRI_TP2 field. */
#define AIPS_RD_PACRI_TP2(base) ((AIPS_PACRI_REG(base) & AIPS_PACRI_TP2_MASK) >> AIPS_PACRI_TP2_SHIFT)
#define AIPS_BRD_PACRI_TP2(base) (BME_UBFX32(&AIPS_PACRI_REG(base), AIPS_PACRI_TP2_SHIFT, AIPS_PACRI_TP2_WIDTH))

/*! @brief Set the TP2 field to a new value. */
#define AIPS_WR_PACRI_TP2(base, value) (AIPS_RMW_PACRI(base, AIPS_PACRI_TP2_MASK, AIPS_PACRI_TP2(value)))
#define AIPS_BWR_PACRI_TP2(base, value) (BME_BFI32(&AIPS_PACRI_REG(base), ((uint32_t)(value) << AIPS_PACRI_TP2_SHIFT), AIPS_PACRI_TP2_SHIFT, AIPS_PACRI_TP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRI, field WP2[21] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRI_WP2 field. */
#define AIPS_RD_PACRI_WP2(base) ((AIPS_PACRI_REG(base) & AIPS_PACRI_WP2_MASK) >> AIPS_PACRI_WP2_SHIFT)
#define AIPS_BRD_PACRI_WP2(base) (BME_UBFX32(&AIPS_PACRI_REG(base), AIPS_PACRI_WP2_SHIFT, AIPS_PACRI_WP2_WIDTH))

/*! @brief Set the WP2 field to a new value. */
#define AIPS_WR_PACRI_WP2(base, value) (AIPS_RMW_PACRI(base, AIPS_PACRI_WP2_MASK, AIPS_PACRI_WP2(value)))
#define AIPS_BWR_PACRI_WP2(base, value) (BME_BFI32(&AIPS_PACRI_REG(base), ((uint32_t)(value) << AIPS_PACRI_WP2_SHIFT), AIPS_PACRI_WP2_SHIFT, AIPS_PACRI_WP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRI, field SP2[22] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRI_SP2 field. */
#define AIPS_RD_PACRI_SP2(base) ((AIPS_PACRI_REG(base) & AIPS_PACRI_SP2_MASK) >> AIPS_PACRI_SP2_SHIFT)
#define AIPS_BRD_PACRI_SP2(base) (BME_UBFX32(&AIPS_PACRI_REG(base), AIPS_PACRI_SP2_SHIFT, AIPS_PACRI_SP2_WIDTH))

/*! @brief Set the SP2 field to a new value. */
#define AIPS_WR_PACRI_SP2(base, value) (AIPS_RMW_PACRI(base, AIPS_PACRI_SP2_MASK, AIPS_PACRI_SP2(value)))
#define AIPS_BWR_PACRI_SP2(base, value) (BME_BFI32(&AIPS_PACRI_REG(base), ((uint32_t)(value) << AIPS_PACRI_SP2_SHIFT), AIPS_PACRI_SP2_SHIFT, AIPS_PACRI_SP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRI, field TP1[24] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRI_TP1 field. */
#define AIPS_RD_PACRI_TP1(base) ((AIPS_PACRI_REG(base) & AIPS_PACRI_TP1_MASK) >> AIPS_PACRI_TP1_SHIFT)
#define AIPS_BRD_PACRI_TP1(base) (BME_UBFX32(&AIPS_PACRI_REG(base), AIPS_PACRI_TP1_SHIFT, AIPS_PACRI_TP1_WIDTH))

/*! @brief Set the TP1 field to a new value. */
#define AIPS_WR_PACRI_TP1(base, value) (AIPS_RMW_PACRI(base, AIPS_PACRI_TP1_MASK, AIPS_PACRI_TP1(value)))
#define AIPS_BWR_PACRI_TP1(base, value) (BME_BFI32(&AIPS_PACRI_REG(base), ((uint32_t)(value) << AIPS_PACRI_TP1_SHIFT), AIPS_PACRI_TP1_SHIFT, AIPS_PACRI_TP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRI, field WP1[25] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRI_WP1 field. */
#define AIPS_RD_PACRI_WP1(base) ((AIPS_PACRI_REG(base) & AIPS_PACRI_WP1_MASK) >> AIPS_PACRI_WP1_SHIFT)
#define AIPS_BRD_PACRI_WP1(base) (BME_UBFX32(&AIPS_PACRI_REG(base), AIPS_PACRI_WP1_SHIFT, AIPS_PACRI_WP1_WIDTH))

/*! @brief Set the WP1 field to a new value. */
#define AIPS_WR_PACRI_WP1(base, value) (AIPS_RMW_PACRI(base, AIPS_PACRI_WP1_MASK, AIPS_PACRI_WP1(value)))
#define AIPS_BWR_PACRI_WP1(base, value) (BME_BFI32(&AIPS_PACRI_REG(base), ((uint32_t)(value) << AIPS_PACRI_WP1_SHIFT), AIPS_PACRI_WP1_SHIFT, AIPS_PACRI_WP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRI, field SP1[26] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master must
 * be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRI_SP1 field. */
#define AIPS_RD_PACRI_SP1(base) ((AIPS_PACRI_REG(base) & AIPS_PACRI_SP1_MASK) >> AIPS_PACRI_SP1_SHIFT)
#define AIPS_BRD_PACRI_SP1(base) (BME_UBFX32(&AIPS_PACRI_REG(base), AIPS_PACRI_SP1_SHIFT, AIPS_PACRI_SP1_WIDTH))

/*! @brief Set the SP1 field to a new value. */
#define AIPS_WR_PACRI_SP1(base, value) (AIPS_RMW_PACRI(base, AIPS_PACRI_SP1_MASK, AIPS_PACRI_SP1(value)))
#define AIPS_BWR_PACRI_SP1(base, value) (BME_BFI32(&AIPS_PACRI_REG(base), ((uint32_t)(value) << AIPS_PACRI_SP1_SHIFT), AIPS_PACRI_SP1_SHIFT, AIPS_PACRI_SP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRI, field TP0[28] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRI_TP0 field. */
#define AIPS_RD_PACRI_TP0(base) ((AIPS_PACRI_REG(base) & AIPS_PACRI_TP0_MASK) >> AIPS_PACRI_TP0_SHIFT)
#define AIPS_BRD_PACRI_TP0(base) (BME_UBFX32(&AIPS_PACRI_REG(base), AIPS_PACRI_TP0_SHIFT, AIPS_PACRI_TP0_WIDTH))

/*! @brief Set the TP0 field to a new value. */
#define AIPS_WR_PACRI_TP0(base, value) (AIPS_RMW_PACRI(base, AIPS_PACRI_TP0_MASK, AIPS_PACRI_TP0(value)))
#define AIPS_BWR_PACRI_TP0(base, value) (BME_BFI32(&AIPS_PACRI_REG(base), ((uint32_t)(value) << AIPS_PACRI_TP0_SHIFT), AIPS_PACRI_TP0_SHIFT, AIPS_PACRI_TP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRI, field WP0[29] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRI_WP0 field. */
#define AIPS_RD_PACRI_WP0(base) ((AIPS_PACRI_REG(base) & AIPS_PACRI_WP0_MASK) >> AIPS_PACRI_WP0_SHIFT)
#define AIPS_BRD_PACRI_WP0(base) (BME_UBFX32(&AIPS_PACRI_REG(base), AIPS_PACRI_WP0_SHIFT, AIPS_PACRI_WP0_WIDTH))

/*! @brief Set the WP0 field to a new value. */
#define AIPS_WR_PACRI_WP0(base, value) (AIPS_RMW_PACRI(base, AIPS_PACRI_WP0_MASK, AIPS_PACRI_WP0(value)))
#define AIPS_BWR_PACRI_WP0(base, value) (BME_BFI32(&AIPS_PACRI_REG(base), ((uint32_t)(value) << AIPS_PACRI_WP0_SHIFT), AIPS_PACRI_WP0_SHIFT, AIPS_PACRI_WP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRI, field SP0[30] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRI_SP0 field. */
#define AIPS_RD_PACRI_SP0(base) ((AIPS_PACRI_REG(base) & AIPS_PACRI_SP0_MASK) >> AIPS_PACRI_SP0_SHIFT)
#define AIPS_BRD_PACRI_SP0(base) (BME_UBFX32(&AIPS_PACRI_REG(base), AIPS_PACRI_SP0_SHIFT, AIPS_PACRI_SP0_WIDTH))

/*! @brief Set the SP0 field to a new value. */
#define AIPS_WR_PACRI_SP0(base, value) (AIPS_RMW_PACRI(base, AIPS_PACRI_SP0_MASK, AIPS_PACRI_SP0(value)))
#define AIPS_BWR_PACRI_SP0(base, value) (BME_BFI32(&AIPS_PACRI_REG(base), ((uint32_t)(value) << AIPS_PACRI_SP0_SHIFT), AIPS_PACRI_SP0_SHIFT, AIPS_PACRI_SP0_WIDTH))
/*@}*/

/*******************************************************************************
 * AIPS_PACRJ - Peripheral Access Control Register
 ******************************************************************************/

/*!
 * @brief AIPS_PACRJ - Peripheral Access Control Register (RW)
 *
 * Reset value: 0x44444400U
 *
 * This section describes PACR registers E-P, which control peripheral slots
 * 32-127. See PACRPeripheral Access Control Register for the description of these
 * registers.
 */
/*!
 * @name Constants and macros for entire AIPS_PACRJ register
 */
/*@{*/
#define AIPS_RD_PACRJ(base)      (AIPS_PACRJ_REG(base))
#define AIPS_WR_PACRJ(base, value) (AIPS_PACRJ_REG(base) = (value))
#define AIPS_RMW_PACRJ(base, mask, value) (AIPS_WR_PACRJ(base, (AIPS_RD_PACRJ(base) & ~(mask)) | (value)))
#define AIPS_SET_PACRJ(base, value) (BME_OR32(&AIPS_PACRJ_REG(base), (uint32_t)(value)))
#define AIPS_CLR_PACRJ(base, value) (BME_AND32(&AIPS_PACRJ_REG(base), (uint32_t)(~(value))))
#define AIPS_TOG_PACRJ(base, value) (BME_XOR32(&AIPS_PACRJ_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual AIPS_PACRJ bitfields
 */

/*!
 * @name Register AIPS_PACRJ, field TP7[0] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRJ_TP7 field. */
#define AIPS_RD_PACRJ_TP7(base) ((AIPS_PACRJ_REG(base) & AIPS_PACRJ_TP7_MASK) >> AIPS_PACRJ_TP7_SHIFT)
#define AIPS_BRD_PACRJ_TP7(base) (BME_UBFX32(&AIPS_PACRJ_REG(base), AIPS_PACRJ_TP7_SHIFT, AIPS_PACRJ_TP7_WIDTH))

/*! @brief Set the TP7 field to a new value. */
#define AIPS_WR_PACRJ_TP7(base, value) (AIPS_RMW_PACRJ(base, AIPS_PACRJ_TP7_MASK, AIPS_PACRJ_TP7(value)))
#define AIPS_BWR_PACRJ_TP7(base, value) (BME_BFI32(&AIPS_PACRJ_REG(base), ((uint32_t)(value) << AIPS_PACRJ_TP7_SHIFT), AIPS_PACRJ_TP7_SHIFT, AIPS_PACRJ_TP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRJ, field WP7[1] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRJ_WP7 field. */
#define AIPS_RD_PACRJ_WP7(base) ((AIPS_PACRJ_REG(base) & AIPS_PACRJ_WP7_MASK) >> AIPS_PACRJ_WP7_SHIFT)
#define AIPS_BRD_PACRJ_WP7(base) (BME_UBFX32(&AIPS_PACRJ_REG(base), AIPS_PACRJ_WP7_SHIFT, AIPS_PACRJ_WP7_WIDTH))

/*! @brief Set the WP7 field to a new value. */
#define AIPS_WR_PACRJ_WP7(base, value) (AIPS_RMW_PACRJ(base, AIPS_PACRJ_WP7_MASK, AIPS_PACRJ_WP7(value)))
#define AIPS_BWR_PACRJ_WP7(base, value) (BME_BFI32(&AIPS_PACRJ_REG(base), ((uint32_t)(value) << AIPS_PACRJ_WP7_SHIFT), AIPS_PACRJ_WP7_SHIFT, AIPS_PACRJ_WP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRJ, field SP7[2] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRJ_SP7 field. */
#define AIPS_RD_PACRJ_SP7(base) ((AIPS_PACRJ_REG(base) & AIPS_PACRJ_SP7_MASK) >> AIPS_PACRJ_SP7_SHIFT)
#define AIPS_BRD_PACRJ_SP7(base) (BME_UBFX32(&AIPS_PACRJ_REG(base), AIPS_PACRJ_SP7_SHIFT, AIPS_PACRJ_SP7_WIDTH))

/*! @brief Set the SP7 field to a new value. */
#define AIPS_WR_PACRJ_SP7(base, value) (AIPS_RMW_PACRJ(base, AIPS_PACRJ_SP7_MASK, AIPS_PACRJ_SP7(value)))
#define AIPS_BWR_PACRJ_SP7(base, value) (BME_BFI32(&AIPS_PACRJ_REG(base), ((uint32_t)(value) << AIPS_PACRJ_SP7_SHIFT), AIPS_PACRJ_SP7_SHIFT, AIPS_PACRJ_SP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRJ, field TP6[4] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRJ_TP6 field. */
#define AIPS_RD_PACRJ_TP6(base) ((AIPS_PACRJ_REG(base) & AIPS_PACRJ_TP6_MASK) >> AIPS_PACRJ_TP6_SHIFT)
#define AIPS_BRD_PACRJ_TP6(base) (BME_UBFX32(&AIPS_PACRJ_REG(base), AIPS_PACRJ_TP6_SHIFT, AIPS_PACRJ_TP6_WIDTH))

/*! @brief Set the TP6 field to a new value. */
#define AIPS_WR_PACRJ_TP6(base, value) (AIPS_RMW_PACRJ(base, AIPS_PACRJ_TP6_MASK, AIPS_PACRJ_TP6(value)))
#define AIPS_BWR_PACRJ_TP6(base, value) (BME_BFI32(&AIPS_PACRJ_REG(base), ((uint32_t)(value) << AIPS_PACRJ_TP6_SHIFT), AIPS_PACRJ_TP6_SHIFT, AIPS_PACRJ_TP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRJ, field WP6[5] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRJ_WP6 field. */
#define AIPS_RD_PACRJ_WP6(base) ((AIPS_PACRJ_REG(base) & AIPS_PACRJ_WP6_MASK) >> AIPS_PACRJ_WP6_SHIFT)
#define AIPS_BRD_PACRJ_WP6(base) (BME_UBFX32(&AIPS_PACRJ_REG(base), AIPS_PACRJ_WP6_SHIFT, AIPS_PACRJ_WP6_WIDTH))

/*! @brief Set the WP6 field to a new value. */
#define AIPS_WR_PACRJ_WP6(base, value) (AIPS_RMW_PACRJ(base, AIPS_PACRJ_WP6_MASK, AIPS_PACRJ_WP6(value)))
#define AIPS_BWR_PACRJ_WP6(base, value) (BME_BFI32(&AIPS_PACRJ_REG(base), ((uint32_t)(value) << AIPS_PACRJ_WP6_SHIFT), AIPS_PACRJ_WP6_SHIFT, AIPS_PACRJ_WP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRJ, field SP6[6] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRJ_SP6 field. */
#define AIPS_RD_PACRJ_SP6(base) ((AIPS_PACRJ_REG(base) & AIPS_PACRJ_SP6_MASK) >> AIPS_PACRJ_SP6_SHIFT)
#define AIPS_BRD_PACRJ_SP6(base) (BME_UBFX32(&AIPS_PACRJ_REG(base), AIPS_PACRJ_SP6_SHIFT, AIPS_PACRJ_SP6_WIDTH))

/*! @brief Set the SP6 field to a new value. */
#define AIPS_WR_PACRJ_SP6(base, value) (AIPS_RMW_PACRJ(base, AIPS_PACRJ_SP6_MASK, AIPS_PACRJ_SP6(value)))
#define AIPS_BWR_PACRJ_SP6(base, value) (BME_BFI32(&AIPS_PACRJ_REG(base), ((uint32_t)(value) << AIPS_PACRJ_SP6_SHIFT), AIPS_PACRJ_SP6_SHIFT, AIPS_PACRJ_SP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRJ, field TP5[8] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRJ_TP5 field. */
#define AIPS_RD_PACRJ_TP5(base) ((AIPS_PACRJ_REG(base) & AIPS_PACRJ_TP5_MASK) >> AIPS_PACRJ_TP5_SHIFT)
#define AIPS_BRD_PACRJ_TP5(base) (BME_UBFX32(&AIPS_PACRJ_REG(base), AIPS_PACRJ_TP5_SHIFT, AIPS_PACRJ_TP5_WIDTH))

/*! @brief Set the TP5 field to a new value. */
#define AIPS_WR_PACRJ_TP5(base, value) (AIPS_RMW_PACRJ(base, AIPS_PACRJ_TP5_MASK, AIPS_PACRJ_TP5(value)))
#define AIPS_BWR_PACRJ_TP5(base, value) (BME_BFI32(&AIPS_PACRJ_REG(base), ((uint32_t)(value) << AIPS_PACRJ_TP5_SHIFT), AIPS_PACRJ_TP5_SHIFT, AIPS_PACRJ_TP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRJ, field WP5[9] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRJ_WP5 field. */
#define AIPS_RD_PACRJ_WP5(base) ((AIPS_PACRJ_REG(base) & AIPS_PACRJ_WP5_MASK) >> AIPS_PACRJ_WP5_SHIFT)
#define AIPS_BRD_PACRJ_WP5(base) (BME_UBFX32(&AIPS_PACRJ_REG(base), AIPS_PACRJ_WP5_SHIFT, AIPS_PACRJ_WP5_WIDTH))

/*! @brief Set the WP5 field to a new value. */
#define AIPS_WR_PACRJ_WP5(base, value) (AIPS_RMW_PACRJ(base, AIPS_PACRJ_WP5_MASK, AIPS_PACRJ_WP5(value)))
#define AIPS_BWR_PACRJ_WP5(base, value) (BME_BFI32(&AIPS_PACRJ_REG(base), ((uint32_t)(value) << AIPS_PACRJ_WP5_SHIFT), AIPS_PACRJ_WP5_SHIFT, AIPS_PACRJ_WP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRJ, field SP5[10] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRJ_SP5 field. */
#define AIPS_RD_PACRJ_SP5(base) ((AIPS_PACRJ_REG(base) & AIPS_PACRJ_SP5_MASK) >> AIPS_PACRJ_SP5_SHIFT)
#define AIPS_BRD_PACRJ_SP5(base) (BME_UBFX32(&AIPS_PACRJ_REG(base), AIPS_PACRJ_SP5_SHIFT, AIPS_PACRJ_SP5_WIDTH))

/*! @brief Set the SP5 field to a new value. */
#define AIPS_WR_PACRJ_SP5(base, value) (AIPS_RMW_PACRJ(base, AIPS_PACRJ_SP5_MASK, AIPS_PACRJ_SP5(value)))
#define AIPS_BWR_PACRJ_SP5(base, value) (BME_BFI32(&AIPS_PACRJ_REG(base), ((uint32_t)(value) << AIPS_PACRJ_SP5_SHIFT), AIPS_PACRJ_SP5_SHIFT, AIPS_PACRJ_SP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRJ, field TP4[12] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRJ_TP4 field. */
#define AIPS_RD_PACRJ_TP4(base) ((AIPS_PACRJ_REG(base) & AIPS_PACRJ_TP4_MASK) >> AIPS_PACRJ_TP4_SHIFT)
#define AIPS_BRD_PACRJ_TP4(base) (BME_UBFX32(&AIPS_PACRJ_REG(base), AIPS_PACRJ_TP4_SHIFT, AIPS_PACRJ_TP4_WIDTH))

/*! @brief Set the TP4 field to a new value. */
#define AIPS_WR_PACRJ_TP4(base, value) (AIPS_RMW_PACRJ(base, AIPS_PACRJ_TP4_MASK, AIPS_PACRJ_TP4(value)))
#define AIPS_BWR_PACRJ_TP4(base, value) (BME_BFI32(&AIPS_PACRJ_REG(base), ((uint32_t)(value) << AIPS_PACRJ_TP4_SHIFT), AIPS_PACRJ_TP4_SHIFT, AIPS_PACRJ_TP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRJ, field WP4[13] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRJ_WP4 field. */
#define AIPS_RD_PACRJ_WP4(base) ((AIPS_PACRJ_REG(base) & AIPS_PACRJ_WP4_MASK) >> AIPS_PACRJ_WP4_SHIFT)
#define AIPS_BRD_PACRJ_WP4(base) (BME_UBFX32(&AIPS_PACRJ_REG(base), AIPS_PACRJ_WP4_SHIFT, AIPS_PACRJ_WP4_WIDTH))

/*! @brief Set the WP4 field to a new value. */
#define AIPS_WR_PACRJ_WP4(base, value) (AIPS_RMW_PACRJ(base, AIPS_PACRJ_WP4_MASK, AIPS_PACRJ_WP4(value)))
#define AIPS_BWR_PACRJ_WP4(base, value) (BME_BFI32(&AIPS_PACRJ_REG(base), ((uint32_t)(value) << AIPS_PACRJ_WP4_SHIFT), AIPS_PACRJ_WP4_SHIFT, AIPS_PACRJ_WP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRJ, field SP4[14] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRJ_SP4 field. */
#define AIPS_RD_PACRJ_SP4(base) ((AIPS_PACRJ_REG(base) & AIPS_PACRJ_SP4_MASK) >> AIPS_PACRJ_SP4_SHIFT)
#define AIPS_BRD_PACRJ_SP4(base) (BME_UBFX32(&AIPS_PACRJ_REG(base), AIPS_PACRJ_SP4_SHIFT, AIPS_PACRJ_SP4_WIDTH))

/*! @brief Set the SP4 field to a new value. */
#define AIPS_WR_PACRJ_SP4(base, value) (AIPS_RMW_PACRJ(base, AIPS_PACRJ_SP4_MASK, AIPS_PACRJ_SP4(value)))
#define AIPS_BWR_PACRJ_SP4(base, value) (BME_BFI32(&AIPS_PACRJ_REG(base), ((uint32_t)(value) << AIPS_PACRJ_SP4_SHIFT), AIPS_PACRJ_SP4_SHIFT, AIPS_PACRJ_SP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRJ, field TP3[16] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRJ_TP3 field. */
#define AIPS_RD_PACRJ_TP3(base) ((AIPS_PACRJ_REG(base) & AIPS_PACRJ_TP3_MASK) >> AIPS_PACRJ_TP3_SHIFT)
#define AIPS_BRD_PACRJ_TP3(base) (BME_UBFX32(&AIPS_PACRJ_REG(base), AIPS_PACRJ_TP3_SHIFT, AIPS_PACRJ_TP3_WIDTH))

/*! @brief Set the TP3 field to a new value. */
#define AIPS_WR_PACRJ_TP3(base, value) (AIPS_RMW_PACRJ(base, AIPS_PACRJ_TP3_MASK, AIPS_PACRJ_TP3(value)))
#define AIPS_BWR_PACRJ_TP3(base, value) (BME_BFI32(&AIPS_PACRJ_REG(base), ((uint32_t)(value) << AIPS_PACRJ_TP3_SHIFT), AIPS_PACRJ_TP3_SHIFT, AIPS_PACRJ_TP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRJ, field WP3[17] (RW)
 *
 * Determines whether the peripheral allows write accesss. When this bit is set
 * and a write access is attempted, access terminates with an error response and
 * no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRJ_WP3 field. */
#define AIPS_RD_PACRJ_WP3(base) ((AIPS_PACRJ_REG(base) & AIPS_PACRJ_WP3_MASK) >> AIPS_PACRJ_WP3_SHIFT)
#define AIPS_BRD_PACRJ_WP3(base) (BME_UBFX32(&AIPS_PACRJ_REG(base), AIPS_PACRJ_WP3_SHIFT, AIPS_PACRJ_WP3_WIDTH))

/*! @brief Set the WP3 field to a new value. */
#define AIPS_WR_PACRJ_WP3(base, value) (AIPS_RMW_PACRJ(base, AIPS_PACRJ_WP3_MASK, AIPS_PACRJ_WP3(value)))
#define AIPS_BWR_PACRJ_WP3(base, value) (BME_BFI32(&AIPS_PACRJ_REG(base), ((uint32_t)(value) << AIPS_PACRJ_WP3_SHIFT), AIPS_PACRJ_WP3_SHIFT, AIPS_PACRJ_WP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRJ, field SP3[18] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRJ_SP3 field. */
#define AIPS_RD_PACRJ_SP3(base) ((AIPS_PACRJ_REG(base) & AIPS_PACRJ_SP3_MASK) >> AIPS_PACRJ_SP3_SHIFT)
#define AIPS_BRD_PACRJ_SP3(base) (BME_UBFX32(&AIPS_PACRJ_REG(base), AIPS_PACRJ_SP3_SHIFT, AIPS_PACRJ_SP3_WIDTH))

/*! @brief Set the SP3 field to a new value. */
#define AIPS_WR_PACRJ_SP3(base, value) (AIPS_RMW_PACRJ(base, AIPS_PACRJ_SP3_MASK, AIPS_PACRJ_SP3(value)))
#define AIPS_BWR_PACRJ_SP3(base, value) (BME_BFI32(&AIPS_PACRJ_REG(base), ((uint32_t)(value) << AIPS_PACRJ_SP3_SHIFT), AIPS_PACRJ_SP3_SHIFT, AIPS_PACRJ_SP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRJ, field TP2[20] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRJ_TP2 field. */
#define AIPS_RD_PACRJ_TP2(base) ((AIPS_PACRJ_REG(base) & AIPS_PACRJ_TP2_MASK) >> AIPS_PACRJ_TP2_SHIFT)
#define AIPS_BRD_PACRJ_TP2(base) (BME_UBFX32(&AIPS_PACRJ_REG(base), AIPS_PACRJ_TP2_SHIFT, AIPS_PACRJ_TP2_WIDTH))

/*! @brief Set the TP2 field to a new value. */
#define AIPS_WR_PACRJ_TP2(base, value) (AIPS_RMW_PACRJ(base, AIPS_PACRJ_TP2_MASK, AIPS_PACRJ_TP2(value)))
#define AIPS_BWR_PACRJ_TP2(base, value) (BME_BFI32(&AIPS_PACRJ_REG(base), ((uint32_t)(value) << AIPS_PACRJ_TP2_SHIFT), AIPS_PACRJ_TP2_SHIFT, AIPS_PACRJ_TP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRJ, field WP2[21] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRJ_WP2 field. */
#define AIPS_RD_PACRJ_WP2(base) ((AIPS_PACRJ_REG(base) & AIPS_PACRJ_WP2_MASK) >> AIPS_PACRJ_WP2_SHIFT)
#define AIPS_BRD_PACRJ_WP2(base) (BME_UBFX32(&AIPS_PACRJ_REG(base), AIPS_PACRJ_WP2_SHIFT, AIPS_PACRJ_WP2_WIDTH))

/*! @brief Set the WP2 field to a new value. */
#define AIPS_WR_PACRJ_WP2(base, value) (AIPS_RMW_PACRJ(base, AIPS_PACRJ_WP2_MASK, AIPS_PACRJ_WP2(value)))
#define AIPS_BWR_PACRJ_WP2(base, value) (BME_BFI32(&AIPS_PACRJ_REG(base), ((uint32_t)(value) << AIPS_PACRJ_WP2_SHIFT), AIPS_PACRJ_WP2_SHIFT, AIPS_PACRJ_WP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRJ, field SP2[22] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRJ_SP2 field. */
#define AIPS_RD_PACRJ_SP2(base) ((AIPS_PACRJ_REG(base) & AIPS_PACRJ_SP2_MASK) >> AIPS_PACRJ_SP2_SHIFT)
#define AIPS_BRD_PACRJ_SP2(base) (BME_UBFX32(&AIPS_PACRJ_REG(base), AIPS_PACRJ_SP2_SHIFT, AIPS_PACRJ_SP2_WIDTH))

/*! @brief Set the SP2 field to a new value. */
#define AIPS_WR_PACRJ_SP2(base, value) (AIPS_RMW_PACRJ(base, AIPS_PACRJ_SP2_MASK, AIPS_PACRJ_SP2(value)))
#define AIPS_BWR_PACRJ_SP2(base, value) (BME_BFI32(&AIPS_PACRJ_REG(base), ((uint32_t)(value) << AIPS_PACRJ_SP2_SHIFT), AIPS_PACRJ_SP2_SHIFT, AIPS_PACRJ_SP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRJ, field TP1[24] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRJ_TP1 field. */
#define AIPS_RD_PACRJ_TP1(base) ((AIPS_PACRJ_REG(base) & AIPS_PACRJ_TP1_MASK) >> AIPS_PACRJ_TP1_SHIFT)
#define AIPS_BRD_PACRJ_TP1(base) (BME_UBFX32(&AIPS_PACRJ_REG(base), AIPS_PACRJ_TP1_SHIFT, AIPS_PACRJ_TP1_WIDTH))

/*! @brief Set the TP1 field to a new value. */
#define AIPS_WR_PACRJ_TP1(base, value) (AIPS_RMW_PACRJ(base, AIPS_PACRJ_TP1_MASK, AIPS_PACRJ_TP1(value)))
#define AIPS_BWR_PACRJ_TP1(base, value) (BME_BFI32(&AIPS_PACRJ_REG(base), ((uint32_t)(value) << AIPS_PACRJ_TP1_SHIFT), AIPS_PACRJ_TP1_SHIFT, AIPS_PACRJ_TP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRJ, field WP1[25] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRJ_WP1 field. */
#define AIPS_RD_PACRJ_WP1(base) ((AIPS_PACRJ_REG(base) & AIPS_PACRJ_WP1_MASK) >> AIPS_PACRJ_WP1_SHIFT)
#define AIPS_BRD_PACRJ_WP1(base) (BME_UBFX32(&AIPS_PACRJ_REG(base), AIPS_PACRJ_WP1_SHIFT, AIPS_PACRJ_WP1_WIDTH))

/*! @brief Set the WP1 field to a new value. */
#define AIPS_WR_PACRJ_WP1(base, value) (AIPS_RMW_PACRJ(base, AIPS_PACRJ_WP1_MASK, AIPS_PACRJ_WP1(value)))
#define AIPS_BWR_PACRJ_WP1(base, value) (BME_BFI32(&AIPS_PACRJ_REG(base), ((uint32_t)(value) << AIPS_PACRJ_WP1_SHIFT), AIPS_PACRJ_WP1_SHIFT, AIPS_PACRJ_WP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRJ, field SP1[26] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master must
 * be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRJ_SP1 field. */
#define AIPS_RD_PACRJ_SP1(base) ((AIPS_PACRJ_REG(base) & AIPS_PACRJ_SP1_MASK) >> AIPS_PACRJ_SP1_SHIFT)
#define AIPS_BRD_PACRJ_SP1(base) (BME_UBFX32(&AIPS_PACRJ_REG(base), AIPS_PACRJ_SP1_SHIFT, AIPS_PACRJ_SP1_WIDTH))

/*! @brief Set the SP1 field to a new value. */
#define AIPS_WR_PACRJ_SP1(base, value) (AIPS_RMW_PACRJ(base, AIPS_PACRJ_SP1_MASK, AIPS_PACRJ_SP1(value)))
#define AIPS_BWR_PACRJ_SP1(base, value) (BME_BFI32(&AIPS_PACRJ_REG(base), ((uint32_t)(value) << AIPS_PACRJ_SP1_SHIFT), AIPS_PACRJ_SP1_SHIFT, AIPS_PACRJ_SP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRJ, field TP0[28] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRJ_TP0 field. */
#define AIPS_RD_PACRJ_TP0(base) ((AIPS_PACRJ_REG(base) & AIPS_PACRJ_TP0_MASK) >> AIPS_PACRJ_TP0_SHIFT)
#define AIPS_BRD_PACRJ_TP0(base) (BME_UBFX32(&AIPS_PACRJ_REG(base), AIPS_PACRJ_TP0_SHIFT, AIPS_PACRJ_TP0_WIDTH))

/*! @brief Set the TP0 field to a new value. */
#define AIPS_WR_PACRJ_TP0(base, value) (AIPS_RMW_PACRJ(base, AIPS_PACRJ_TP0_MASK, AIPS_PACRJ_TP0(value)))
#define AIPS_BWR_PACRJ_TP0(base, value) (BME_BFI32(&AIPS_PACRJ_REG(base), ((uint32_t)(value) << AIPS_PACRJ_TP0_SHIFT), AIPS_PACRJ_TP0_SHIFT, AIPS_PACRJ_TP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRJ, field WP0[29] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRJ_WP0 field. */
#define AIPS_RD_PACRJ_WP0(base) ((AIPS_PACRJ_REG(base) & AIPS_PACRJ_WP0_MASK) >> AIPS_PACRJ_WP0_SHIFT)
#define AIPS_BRD_PACRJ_WP0(base) (BME_UBFX32(&AIPS_PACRJ_REG(base), AIPS_PACRJ_WP0_SHIFT, AIPS_PACRJ_WP0_WIDTH))

/*! @brief Set the WP0 field to a new value. */
#define AIPS_WR_PACRJ_WP0(base, value) (AIPS_RMW_PACRJ(base, AIPS_PACRJ_WP0_MASK, AIPS_PACRJ_WP0(value)))
#define AIPS_BWR_PACRJ_WP0(base, value) (BME_BFI32(&AIPS_PACRJ_REG(base), ((uint32_t)(value) << AIPS_PACRJ_WP0_SHIFT), AIPS_PACRJ_WP0_SHIFT, AIPS_PACRJ_WP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRJ, field SP0[30] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRJ_SP0 field. */
#define AIPS_RD_PACRJ_SP0(base) ((AIPS_PACRJ_REG(base) & AIPS_PACRJ_SP0_MASK) >> AIPS_PACRJ_SP0_SHIFT)
#define AIPS_BRD_PACRJ_SP0(base) (BME_UBFX32(&AIPS_PACRJ_REG(base), AIPS_PACRJ_SP0_SHIFT, AIPS_PACRJ_SP0_WIDTH))

/*! @brief Set the SP0 field to a new value. */
#define AIPS_WR_PACRJ_SP0(base, value) (AIPS_RMW_PACRJ(base, AIPS_PACRJ_SP0_MASK, AIPS_PACRJ_SP0(value)))
#define AIPS_BWR_PACRJ_SP0(base, value) (BME_BFI32(&AIPS_PACRJ_REG(base), ((uint32_t)(value) << AIPS_PACRJ_SP0_SHIFT), AIPS_PACRJ_SP0_SHIFT, AIPS_PACRJ_SP0_WIDTH))
/*@}*/

/*******************************************************************************
 * AIPS_PACRK - Peripheral Access Control Register
 ******************************************************************************/

/*!
 * @brief AIPS_PACRK - Peripheral Access Control Register (RW)
 *
 * Reset value: 0x00400000U
 *
 * This section describes PACR registers E-P, which control peripheral slots
 * 32-127. See PACRPeripheral Access Control Register for the description of these
 * registers.
 */
/*!
 * @name Constants and macros for entire AIPS_PACRK register
 */
/*@{*/
#define AIPS_RD_PACRK(base)      (AIPS_PACRK_REG(base))
#define AIPS_WR_PACRK(base, value) (AIPS_PACRK_REG(base) = (value))
#define AIPS_RMW_PACRK(base, mask, value) (AIPS_WR_PACRK(base, (AIPS_RD_PACRK(base) & ~(mask)) | (value)))
#define AIPS_SET_PACRK(base, value) (BME_OR32(&AIPS_PACRK_REG(base), (uint32_t)(value)))
#define AIPS_CLR_PACRK(base, value) (BME_AND32(&AIPS_PACRK_REG(base), (uint32_t)(~(value))))
#define AIPS_TOG_PACRK(base, value) (BME_XOR32(&AIPS_PACRK_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual AIPS_PACRK bitfields
 */

/*!
 * @name Register AIPS_PACRK, field TP7[0] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRK_TP7 field. */
#define AIPS_RD_PACRK_TP7(base) ((AIPS_PACRK_REG(base) & AIPS_PACRK_TP7_MASK) >> AIPS_PACRK_TP7_SHIFT)
#define AIPS_BRD_PACRK_TP7(base) (BME_UBFX32(&AIPS_PACRK_REG(base), AIPS_PACRK_TP7_SHIFT, AIPS_PACRK_TP7_WIDTH))

/*! @brief Set the TP7 field to a new value. */
#define AIPS_WR_PACRK_TP7(base, value) (AIPS_RMW_PACRK(base, AIPS_PACRK_TP7_MASK, AIPS_PACRK_TP7(value)))
#define AIPS_BWR_PACRK_TP7(base, value) (BME_BFI32(&AIPS_PACRK_REG(base), ((uint32_t)(value) << AIPS_PACRK_TP7_SHIFT), AIPS_PACRK_TP7_SHIFT, AIPS_PACRK_TP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRK, field WP7[1] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRK_WP7 field. */
#define AIPS_RD_PACRK_WP7(base) ((AIPS_PACRK_REG(base) & AIPS_PACRK_WP7_MASK) >> AIPS_PACRK_WP7_SHIFT)
#define AIPS_BRD_PACRK_WP7(base) (BME_UBFX32(&AIPS_PACRK_REG(base), AIPS_PACRK_WP7_SHIFT, AIPS_PACRK_WP7_WIDTH))

/*! @brief Set the WP7 field to a new value. */
#define AIPS_WR_PACRK_WP7(base, value) (AIPS_RMW_PACRK(base, AIPS_PACRK_WP7_MASK, AIPS_PACRK_WP7(value)))
#define AIPS_BWR_PACRK_WP7(base, value) (BME_BFI32(&AIPS_PACRK_REG(base), ((uint32_t)(value) << AIPS_PACRK_WP7_SHIFT), AIPS_PACRK_WP7_SHIFT, AIPS_PACRK_WP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRK, field SP7[2] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRK_SP7 field. */
#define AIPS_RD_PACRK_SP7(base) ((AIPS_PACRK_REG(base) & AIPS_PACRK_SP7_MASK) >> AIPS_PACRK_SP7_SHIFT)
#define AIPS_BRD_PACRK_SP7(base) (BME_UBFX32(&AIPS_PACRK_REG(base), AIPS_PACRK_SP7_SHIFT, AIPS_PACRK_SP7_WIDTH))

/*! @brief Set the SP7 field to a new value. */
#define AIPS_WR_PACRK_SP7(base, value) (AIPS_RMW_PACRK(base, AIPS_PACRK_SP7_MASK, AIPS_PACRK_SP7(value)))
#define AIPS_BWR_PACRK_SP7(base, value) (BME_BFI32(&AIPS_PACRK_REG(base), ((uint32_t)(value) << AIPS_PACRK_SP7_SHIFT), AIPS_PACRK_SP7_SHIFT, AIPS_PACRK_SP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRK, field TP6[4] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRK_TP6 field. */
#define AIPS_RD_PACRK_TP6(base) ((AIPS_PACRK_REG(base) & AIPS_PACRK_TP6_MASK) >> AIPS_PACRK_TP6_SHIFT)
#define AIPS_BRD_PACRK_TP6(base) (BME_UBFX32(&AIPS_PACRK_REG(base), AIPS_PACRK_TP6_SHIFT, AIPS_PACRK_TP6_WIDTH))

/*! @brief Set the TP6 field to a new value. */
#define AIPS_WR_PACRK_TP6(base, value) (AIPS_RMW_PACRK(base, AIPS_PACRK_TP6_MASK, AIPS_PACRK_TP6(value)))
#define AIPS_BWR_PACRK_TP6(base, value) (BME_BFI32(&AIPS_PACRK_REG(base), ((uint32_t)(value) << AIPS_PACRK_TP6_SHIFT), AIPS_PACRK_TP6_SHIFT, AIPS_PACRK_TP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRK, field WP6[5] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRK_WP6 field. */
#define AIPS_RD_PACRK_WP6(base) ((AIPS_PACRK_REG(base) & AIPS_PACRK_WP6_MASK) >> AIPS_PACRK_WP6_SHIFT)
#define AIPS_BRD_PACRK_WP6(base) (BME_UBFX32(&AIPS_PACRK_REG(base), AIPS_PACRK_WP6_SHIFT, AIPS_PACRK_WP6_WIDTH))

/*! @brief Set the WP6 field to a new value. */
#define AIPS_WR_PACRK_WP6(base, value) (AIPS_RMW_PACRK(base, AIPS_PACRK_WP6_MASK, AIPS_PACRK_WP6(value)))
#define AIPS_BWR_PACRK_WP6(base, value) (BME_BFI32(&AIPS_PACRK_REG(base), ((uint32_t)(value) << AIPS_PACRK_WP6_SHIFT), AIPS_PACRK_WP6_SHIFT, AIPS_PACRK_WP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRK, field SP6[6] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRK_SP6 field. */
#define AIPS_RD_PACRK_SP6(base) ((AIPS_PACRK_REG(base) & AIPS_PACRK_SP6_MASK) >> AIPS_PACRK_SP6_SHIFT)
#define AIPS_BRD_PACRK_SP6(base) (BME_UBFX32(&AIPS_PACRK_REG(base), AIPS_PACRK_SP6_SHIFT, AIPS_PACRK_SP6_WIDTH))

/*! @brief Set the SP6 field to a new value. */
#define AIPS_WR_PACRK_SP6(base, value) (AIPS_RMW_PACRK(base, AIPS_PACRK_SP6_MASK, AIPS_PACRK_SP6(value)))
#define AIPS_BWR_PACRK_SP6(base, value) (BME_BFI32(&AIPS_PACRK_REG(base), ((uint32_t)(value) << AIPS_PACRK_SP6_SHIFT), AIPS_PACRK_SP6_SHIFT, AIPS_PACRK_SP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRK, field TP5[8] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRK_TP5 field. */
#define AIPS_RD_PACRK_TP5(base) ((AIPS_PACRK_REG(base) & AIPS_PACRK_TP5_MASK) >> AIPS_PACRK_TP5_SHIFT)
#define AIPS_BRD_PACRK_TP5(base) (BME_UBFX32(&AIPS_PACRK_REG(base), AIPS_PACRK_TP5_SHIFT, AIPS_PACRK_TP5_WIDTH))

/*! @brief Set the TP5 field to a new value. */
#define AIPS_WR_PACRK_TP5(base, value) (AIPS_RMW_PACRK(base, AIPS_PACRK_TP5_MASK, AIPS_PACRK_TP5(value)))
#define AIPS_BWR_PACRK_TP5(base, value) (BME_BFI32(&AIPS_PACRK_REG(base), ((uint32_t)(value) << AIPS_PACRK_TP5_SHIFT), AIPS_PACRK_TP5_SHIFT, AIPS_PACRK_TP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRK, field WP5[9] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRK_WP5 field. */
#define AIPS_RD_PACRK_WP5(base) ((AIPS_PACRK_REG(base) & AIPS_PACRK_WP5_MASK) >> AIPS_PACRK_WP5_SHIFT)
#define AIPS_BRD_PACRK_WP5(base) (BME_UBFX32(&AIPS_PACRK_REG(base), AIPS_PACRK_WP5_SHIFT, AIPS_PACRK_WP5_WIDTH))

/*! @brief Set the WP5 field to a new value. */
#define AIPS_WR_PACRK_WP5(base, value) (AIPS_RMW_PACRK(base, AIPS_PACRK_WP5_MASK, AIPS_PACRK_WP5(value)))
#define AIPS_BWR_PACRK_WP5(base, value) (BME_BFI32(&AIPS_PACRK_REG(base), ((uint32_t)(value) << AIPS_PACRK_WP5_SHIFT), AIPS_PACRK_WP5_SHIFT, AIPS_PACRK_WP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRK, field SP5[10] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRK_SP5 field. */
#define AIPS_RD_PACRK_SP5(base) ((AIPS_PACRK_REG(base) & AIPS_PACRK_SP5_MASK) >> AIPS_PACRK_SP5_SHIFT)
#define AIPS_BRD_PACRK_SP5(base) (BME_UBFX32(&AIPS_PACRK_REG(base), AIPS_PACRK_SP5_SHIFT, AIPS_PACRK_SP5_WIDTH))

/*! @brief Set the SP5 field to a new value. */
#define AIPS_WR_PACRK_SP5(base, value) (AIPS_RMW_PACRK(base, AIPS_PACRK_SP5_MASK, AIPS_PACRK_SP5(value)))
#define AIPS_BWR_PACRK_SP5(base, value) (BME_BFI32(&AIPS_PACRK_REG(base), ((uint32_t)(value) << AIPS_PACRK_SP5_SHIFT), AIPS_PACRK_SP5_SHIFT, AIPS_PACRK_SP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRK, field TP4[12] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRK_TP4 field. */
#define AIPS_RD_PACRK_TP4(base) ((AIPS_PACRK_REG(base) & AIPS_PACRK_TP4_MASK) >> AIPS_PACRK_TP4_SHIFT)
#define AIPS_BRD_PACRK_TP4(base) (BME_UBFX32(&AIPS_PACRK_REG(base), AIPS_PACRK_TP4_SHIFT, AIPS_PACRK_TP4_WIDTH))

/*! @brief Set the TP4 field to a new value. */
#define AIPS_WR_PACRK_TP4(base, value) (AIPS_RMW_PACRK(base, AIPS_PACRK_TP4_MASK, AIPS_PACRK_TP4(value)))
#define AIPS_BWR_PACRK_TP4(base, value) (BME_BFI32(&AIPS_PACRK_REG(base), ((uint32_t)(value) << AIPS_PACRK_TP4_SHIFT), AIPS_PACRK_TP4_SHIFT, AIPS_PACRK_TP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRK, field WP4[13] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRK_WP4 field. */
#define AIPS_RD_PACRK_WP4(base) ((AIPS_PACRK_REG(base) & AIPS_PACRK_WP4_MASK) >> AIPS_PACRK_WP4_SHIFT)
#define AIPS_BRD_PACRK_WP4(base) (BME_UBFX32(&AIPS_PACRK_REG(base), AIPS_PACRK_WP4_SHIFT, AIPS_PACRK_WP4_WIDTH))

/*! @brief Set the WP4 field to a new value. */
#define AIPS_WR_PACRK_WP4(base, value) (AIPS_RMW_PACRK(base, AIPS_PACRK_WP4_MASK, AIPS_PACRK_WP4(value)))
#define AIPS_BWR_PACRK_WP4(base, value) (BME_BFI32(&AIPS_PACRK_REG(base), ((uint32_t)(value) << AIPS_PACRK_WP4_SHIFT), AIPS_PACRK_WP4_SHIFT, AIPS_PACRK_WP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRK, field SP4[14] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRK_SP4 field. */
#define AIPS_RD_PACRK_SP4(base) ((AIPS_PACRK_REG(base) & AIPS_PACRK_SP4_MASK) >> AIPS_PACRK_SP4_SHIFT)
#define AIPS_BRD_PACRK_SP4(base) (BME_UBFX32(&AIPS_PACRK_REG(base), AIPS_PACRK_SP4_SHIFT, AIPS_PACRK_SP4_WIDTH))

/*! @brief Set the SP4 field to a new value. */
#define AIPS_WR_PACRK_SP4(base, value) (AIPS_RMW_PACRK(base, AIPS_PACRK_SP4_MASK, AIPS_PACRK_SP4(value)))
#define AIPS_BWR_PACRK_SP4(base, value) (BME_BFI32(&AIPS_PACRK_REG(base), ((uint32_t)(value) << AIPS_PACRK_SP4_SHIFT), AIPS_PACRK_SP4_SHIFT, AIPS_PACRK_SP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRK, field TP3[16] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRK_TP3 field. */
#define AIPS_RD_PACRK_TP3(base) ((AIPS_PACRK_REG(base) & AIPS_PACRK_TP3_MASK) >> AIPS_PACRK_TP3_SHIFT)
#define AIPS_BRD_PACRK_TP3(base) (BME_UBFX32(&AIPS_PACRK_REG(base), AIPS_PACRK_TP3_SHIFT, AIPS_PACRK_TP3_WIDTH))

/*! @brief Set the TP3 field to a new value. */
#define AIPS_WR_PACRK_TP3(base, value) (AIPS_RMW_PACRK(base, AIPS_PACRK_TP3_MASK, AIPS_PACRK_TP3(value)))
#define AIPS_BWR_PACRK_TP3(base, value) (BME_BFI32(&AIPS_PACRK_REG(base), ((uint32_t)(value) << AIPS_PACRK_TP3_SHIFT), AIPS_PACRK_TP3_SHIFT, AIPS_PACRK_TP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRK, field WP3[17] (RW)
 *
 * Determines whether the peripheral allows write accesss. When this bit is set
 * and a write access is attempted, access terminates with an error response and
 * no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRK_WP3 field. */
#define AIPS_RD_PACRK_WP3(base) ((AIPS_PACRK_REG(base) & AIPS_PACRK_WP3_MASK) >> AIPS_PACRK_WP3_SHIFT)
#define AIPS_BRD_PACRK_WP3(base) (BME_UBFX32(&AIPS_PACRK_REG(base), AIPS_PACRK_WP3_SHIFT, AIPS_PACRK_WP3_WIDTH))

/*! @brief Set the WP3 field to a new value. */
#define AIPS_WR_PACRK_WP3(base, value) (AIPS_RMW_PACRK(base, AIPS_PACRK_WP3_MASK, AIPS_PACRK_WP3(value)))
#define AIPS_BWR_PACRK_WP3(base, value) (BME_BFI32(&AIPS_PACRK_REG(base), ((uint32_t)(value) << AIPS_PACRK_WP3_SHIFT), AIPS_PACRK_WP3_SHIFT, AIPS_PACRK_WP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRK, field SP3[18] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRK_SP3 field. */
#define AIPS_RD_PACRK_SP3(base) ((AIPS_PACRK_REG(base) & AIPS_PACRK_SP3_MASK) >> AIPS_PACRK_SP3_SHIFT)
#define AIPS_BRD_PACRK_SP3(base) (BME_UBFX32(&AIPS_PACRK_REG(base), AIPS_PACRK_SP3_SHIFT, AIPS_PACRK_SP3_WIDTH))

/*! @brief Set the SP3 field to a new value. */
#define AIPS_WR_PACRK_SP3(base, value) (AIPS_RMW_PACRK(base, AIPS_PACRK_SP3_MASK, AIPS_PACRK_SP3(value)))
#define AIPS_BWR_PACRK_SP3(base, value) (BME_BFI32(&AIPS_PACRK_REG(base), ((uint32_t)(value) << AIPS_PACRK_SP3_SHIFT), AIPS_PACRK_SP3_SHIFT, AIPS_PACRK_SP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRK, field TP2[20] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRK_TP2 field. */
#define AIPS_RD_PACRK_TP2(base) ((AIPS_PACRK_REG(base) & AIPS_PACRK_TP2_MASK) >> AIPS_PACRK_TP2_SHIFT)
#define AIPS_BRD_PACRK_TP2(base) (BME_UBFX32(&AIPS_PACRK_REG(base), AIPS_PACRK_TP2_SHIFT, AIPS_PACRK_TP2_WIDTH))

/*! @brief Set the TP2 field to a new value. */
#define AIPS_WR_PACRK_TP2(base, value) (AIPS_RMW_PACRK(base, AIPS_PACRK_TP2_MASK, AIPS_PACRK_TP2(value)))
#define AIPS_BWR_PACRK_TP2(base, value) (BME_BFI32(&AIPS_PACRK_REG(base), ((uint32_t)(value) << AIPS_PACRK_TP2_SHIFT), AIPS_PACRK_TP2_SHIFT, AIPS_PACRK_TP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRK, field WP2[21] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRK_WP2 field. */
#define AIPS_RD_PACRK_WP2(base) ((AIPS_PACRK_REG(base) & AIPS_PACRK_WP2_MASK) >> AIPS_PACRK_WP2_SHIFT)
#define AIPS_BRD_PACRK_WP2(base) (BME_UBFX32(&AIPS_PACRK_REG(base), AIPS_PACRK_WP2_SHIFT, AIPS_PACRK_WP2_WIDTH))

/*! @brief Set the WP2 field to a new value. */
#define AIPS_WR_PACRK_WP2(base, value) (AIPS_RMW_PACRK(base, AIPS_PACRK_WP2_MASK, AIPS_PACRK_WP2(value)))
#define AIPS_BWR_PACRK_WP2(base, value) (BME_BFI32(&AIPS_PACRK_REG(base), ((uint32_t)(value) << AIPS_PACRK_WP2_SHIFT), AIPS_PACRK_WP2_SHIFT, AIPS_PACRK_WP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRK, field SP2[22] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRK_SP2 field. */
#define AIPS_RD_PACRK_SP2(base) ((AIPS_PACRK_REG(base) & AIPS_PACRK_SP2_MASK) >> AIPS_PACRK_SP2_SHIFT)
#define AIPS_BRD_PACRK_SP2(base) (BME_UBFX32(&AIPS_PACRK_REG(base), AIPS_PACRK_SP2_SHIFT, AIPS_PACRK_SP2_WIDTH))

/*! @brief Set the SP2 field to a new value. */
#define AIPS_WR_PACRK_SP2(base, value) (AIPS_RMW_PACRK(base, AIPS_PACRK_SP2_MASK, AIPS_PACRK_SP2(value)))
#define AIPS_BWR_PACRK_SP2(base, value) (BME_BFI32(&AIPS_PACRK_REG(base), ((uint32_t)(value) << AIPS_PACRK_SP2_SHIFT), AIPS_PACRK_SP2_SHIFT, AIPS_PACRK_SP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRK, field TP1[24] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRK_TP1 field. */
#define AIPS_RD_PACRK_TP1(base) ((AIPS_PACRK_REG(base) & AIPS_PACRK_TP1_MASK) >> AIPS_PACRK_TP1_SHIFT)
#define AIPS_BRD_PACRK_TP1(base) (BME_UBFX32(&AIPS_PACRK_REG(base), AIPS_PACRK_TP1_SHIFT, AIPS_PACRK_TP1_WIDTH))

/*! @brief Set the TP1 field to a new value. */
#define AIPS_WR_PACRK_TP1(base, value) (AIPS_RMW_PACRK(base, AIPS_PACRK_TP1_MASK, AIPS_PACRK_TP1(value)))
#define AIPS_BWR_PACRK_TP1(base, value) (BME_BFI32(&AIPS_PACRK_REG(base), ((uint32_t)(value) << AIPS_PACRK_TP1_SHIFT), AIPS_PACRK_TP1_SHIFT, AIPS_PACRK_TP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRK, field WP1[25] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRK_WP1 field. */
#define AIPS_RD_PACRK_WP1(base) ((AIPS_PACRK_REG(base) & AIPS_PACRK_WP1_MASK) >> AIPS_PACRK_WP1_SHIFT)
#define AIPS_BRD_PACRK_WP1(base) (BME_UBFX32(&AIPS_PACRK_REG(base), AIPS_PACRK_WP1_SHIFT, AIPS_PACRK_WP1_WIDTH))

/*! @brief Set the WP1 field to a new value. */
#define AIPS_WR_PACRK_WP1(base, value) (AIPS_RMW_PACRK(base, AIPS_PACRK_WP1_MASK, AIPS_PACRK_WP1(value)))
#define AIPS_BWR_PACRK_WP1(base, value) (BME_BFI32(&AIPS_PACRK_REG(base), ((uint32_t)(value) << AIPS_PACRK_WP1_SHIFT), AIPS_PACRK_WP1_SHIFT, AIPS_PACRK_WP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRK, field SP1[26] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master must
 * be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRK_SP1 field. */
#define AIPS_RD_PACRK_SP1(base) ((AIPS_PACRK_REG(base) & AIPS_PACRK_SP1_MASK) >> AIPS_PACRK_SP1_SHIFT)
#define AIPS_BRD_PACRK_SP1(base) (BME_UBFX32(&AIPS_PACRK_REG(base), AIPS_PACRK_SP1_SHIFT, AIPS_PACRK_SP1_WIDTH))

/*! @brief Set the SP1 field to a new value. */
#define AIPS_WR_PACRK_SP1(base, value) (AIPS_RMW_PACRK(base, AIPS_PACRK_SP1_MASK, AIPS_PACRK_SP1(value)))
#define AIPS_BWR_PACRK_SP1(base, value) (BME_BFI32(&AIPS_PACRK_REG(base), ((uint32_t)(value) << AIPS_PACRK_SP1_SHIFT), AIPS_PACRK_SP1_SHIFT, AIPS_PACRK_SP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRK, field TP0[28] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRK_TP0 field. */
#define AIPS_RD_PACRK_TP0(base) ((AIPS_PACRK_REG(base) & AIPS_PACRK_TP0_MASK) >> AIPS_PACRK_TP0_SHIFT)
#define AIPS_BRD_PACRK_TP0(base) (BME_UBFX32(&AIPS_PACRK_REG(base), AIPS_PACRK_TP0_SHIFT, AIPS_PACRK_TP0_WIDTH))

/*! @brief Set the TP0 field to a new value. */
#define AIPS_WR_PACRK_TP0(base, value) (AIPS_RMW_PACRK(base, AIPS_PACRK_TP0_MASK, AIPS_PACRK_TP0(value)))
#define AIPS_BWR_PACRK_TP0(base, value) (BME_BFI32(&AIPS_PACRK_REG(base), ((uint32_t)(value) << AIPS_PACRK_TP0_SHIFT), AIPS_PACRK_TP0_SHIFT, AIPS_PACRK_TP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRK, field WP0[29] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRK_WP0 field. */
#define AIPS_RD_PACRK_WP0(base) ((AIPS_PACRK_REG(base) & AIPS_PACRK_WP0_MASK) >> AIPS_PACRK_WP0_SHIFT)
#define AIPS_BRD_PACRK_WP0(base) (BME_UBFX32(&AIPS_PACRK_REG(base), AIPS_PACRK_WP0_SHIFT, AIPS_PACRK_WP0_WIDTH))

/*! @brief Set the WP0 field to a new value. */
#define AIPS_WR_PACRK_WP0(base, value) (AIPS_RMW_PACRK(base, AIPS_PACRK_WP0_MASK, AIPS_PACRK_WP0(value)))
#define AIPS_BWR_PACRK_WP0(base, value) (BME_BFI32(&AIPS_PACRK_REG(base), ((uint32_t)(value) << AIPS_PACRK_WP0_SHIFT), AIPS_PACRK_WP0_SHIFT, AIPS_PACRK_WP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRK, field SP0[30] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRK_SP0 field. */
#define AIPS_RD_PACRK_SP0(base) ((AIPS_PACRK_REG(base) & AIPS_PACRK_SP0_MASK) >> AIPS_PACRK_SP0_SHIFT)
#define AIPS_BRD_PACRK_SP0(base) (BME_UBFX32(&AIPS_PACRK_REG(base), AIPS_PACRK_SP0_SHIFT, AIPS_PACRK_SP0_WIDTH))

/*! @brief Set the SP0 field to a new value. */
#define AIPS_WR_PACRK_SP0(base, value) (AIPS_RMW_PACRK(base, AIPS_PACRK_SP0_MASK, AIPS_PACRK_SP0(value)))
#define AIPS_BWR_PACRK_SP0(base, value) (BME_BFI32(&AIPS_PACRK_REG(base), ((uint32_t)(value) << AIPS_PACRK_SP0_SHIFT), AIPS_PACRK_SP0_SHIFT, AIPS_PACRK_SP0_WIDTH))
/*@}*/

/*******************************************************************************
 * AIPS_PACRL - Peripheral Access Control Register
 ******************************************************************************/

/*!
 * @brief AIPS_PACRL - Peripheral Access Control Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This section describes PACR registers E-P, which control peripheral slots
 * 32-127. See PACRPeripheral Access Control Register for the description of these
 * registers.
 */
/*!
 * @name Constants and macros for entire AIPS_PACRL register
 */
/*@{*/
#define AIPS_RD_PACRL(base)      (AIPS_PACRL_REG(base))
#define AIPS_WR_PACRL(base, value) (AIPS_PACRL_REG(base) = (value))
#define AIPS_RMW_PACRL(base, mask, value) (AIPS_WR_PACRL(base, (AIPS_RD_PACRL(base) & ~(mask)) | (value)))
#define AIPS_SET_PACRL(base, value) (BME_OR32(&AIPS_PACRL_REG(base), (uint32_t)(value)))
#define AIPS_CLR_PACRL(base, value) (BME_AND32(&AIPS_PACRL_REG(base), (uint32_t)(~(value))))
#define AIPS_TOG_PACRL(base, value) (BME_XOR32(&AIPS_PACRL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual AIPS_PACRL bitfields
 */

/*!
 * @name Register AIPS_PACRL, field TP7[0] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRL_TP7 field. */
#define AIPS_RD_PACRL_TP7(base) ((AIPS_PACRL_REG(base) & AIPS_PACRL_TP7_MASK) >> AIPS_PACRL_TP7_SHIFT)
#define AIPS_BRD_PACRL_TP7(base) (BME_UBFX32(&AIPS_PACRL_REG(base), AIPS_PACRL_TP7_SHIFT, AIPS_PACRL_TP7_WIDTH))

/*! @brief Set the TP7 field to a new value. */
#define AIPS_WR_PACRL_TP7(base, value) (AIPS_RMW_PACRL(base, AIPS_PACRL_TP7_MASK, AIPS_PACRL_TP7(value)))
#define AIPS_BWR_PACRL_TP7(base, value) (BME_BFI32(&AIPS_PACRL_REG(base), ((uint32_t)(value) << AIPS_PACRL_TP7_SHIFT), AIPS_PACRL_TP7_SHIFT, AIPS_PACRL_TP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRL, field WP7[1] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRL_WP7 field. */
#define AIPS_RD_PACRL_WP7(base) ((AIPS_PACRL_REG(base) & AIPS_PACRL_WP7_MASK) >> AIPS_PACRL_WP7_SHIFT)
#define AIPS_BRD_PACRL_WP7(base) (BME_UBFX32(&AIPS_PACRL_REG(base), AIPS_PACRL_WP7_SHIFT, AIPS_PACRL_WP7_WIDTH))

/*! @brief Set the WP7 field to a new value. */
#define AIPS_WR_PACRL_WP7(base, value) (AIPS_RMW_PACRL(base, AIPS_PACRL_WP7_MASK, AIPS_PACRL_WP7(value)))
#define AIPS_BWR_PACRL_WP7(base, value) (BME_BFI32(&AIPS_PACRL_REG(base), ((uint32_t)(value) << AIPS_PACRL_WP7_SHIFT), AIPS_PACRL_WP7_SHIFT, AIPS_PACRL_WP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRL, field SP7[2] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRL_SP7 field. */
#define AIPS_RD_PACRL_SP7(base) ((AIPS_PACRL_REG(base) & AIPS_PACRL_SP7_MASK) >> AIPS_PACRL_SP7_SHIFT)
#define AIPS_BRD_PACRL_SP7(base) (BME_UBFX32(&AIPS_PACRL_REG(base), AIPS_PACRL_SP7_SHIFT, AIPS_PACRL_SP7_WIDTH))

/*! @brief Set the SP7 field to a new value. */
#define AIPS_WR_PACRL_SP7(base, value) (AIPS_RMW_PACRL(base, AIPS_PACRL_SP7_MASK, AIPS_PACRL_SP7(value)))
#define AIPS_BWR_PACRL_SP7(base, value) (BME_BFI32(&AIPS_PACRL_REG(base), ((uint32_t)(value) << AIPS_PACRL_SP7_SHIFT), AIPS_PACRL_SP7_SHIFT, AIPS_PACRL_SP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRL, field TP6[4] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRL_TP6 field. */
#define AIPS_RD_PACRL_TP6(base) ((AIPS_PACRL_REG(base) & AIPS_PACRL_TP6_MASK) >> AIPS_PACRL_TP6_SHIFT)
#define AIPS_BRD_PACRL_TP6(base) (BME_UBFX32(&AIPS_PACRL_REG(base), AIPS_PACRL_TP6_SHIFT, AIPS_PACRL_TP6_WIDTH))

/*! @brief Set the TP6 field to a new value. */
#define AIPS_WR_PACRL_TP6(base, value) (AIPS_RMW_PACRL(base, AIPS_PACRL_TP6_MASK, AIPS_PACRL_TP6(value)))
#define AIPS_BWR_PACRL_TP6(base, value) (BME_BFI32(&AIPS_PACRL_REG(base), ((uint32_t)(value) << AIPS_PACRL_TP6_SHIFT), AIPS_PACRL_TP6_SHIFT, AIPS_PACRL_TP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRL, field WP6[5] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRL_WP6 field. */
#define AIPS_RD_PACRL_WP6(base) ((AIPS_PACRL_REG(base) & AIPS_PACRL_WP6_MASK) >> AIPS_PACRL_WP6_SHIFT)
#define AIPS_BRD_PACRL_WP6(base) (BME_UBFX32(&AIPS_PACRL_REG(base), AIPS_PACRL_WP6_SHIFT, AIPS_PACRL_WP6_WIDTH))

/*! @brief Set the WP6 field to a new value. */
#define AIPS_WR_PACRL_WP6(base, value) (AIPS_RMW_PACRL(base, AIPS_PACRL_WP6_MASK, AIPS_PACRL_WP6(value)))
#define AIPS_BWR_PACRL_WP6(base, value) (BME_BFI32(&AIPS_PACRL_REG(base), ((uint32_t)(value) << AIPS_PACRL_WP6_SHIFT), AIPS_PACRL_WP6_SHIFT, AIPS_PACRL_WP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRL, field SP6[6] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRL_SP6 field. */
#define AIPS_RD_PACRL_SP6(base) ((AIPS_PACRL_REG(base) & AIPS_PACRL_SP6_MASK) >> AIPS_PACRL_SP6_SHIFT)
#define AIPS_BRD_PACRL_SP6(base) (BME_UBFX32(&AIPS_PACRL_REG(base), AIPS_PACRL_SP6_SHIFT, AIPS_PACRL_SP6_WIDTH))

/*! @brief Set the SP6 field to a new value. */
#define AIPS_WR_PACRL_SP6(base, value) (AIPS_RMW_PACRL(base, AIPS_PACRL_SP6_MASK, AIPS_PACRL_SP6(value)))
#define AIPS_BWR_PACRL_SP6(base, value) (BME_BFI32(&AIPS_PACRL_REG(base), ((uint32_t)(value) << AIPS_PACRL_SP6_SHIFT), AIPS_PACRL_SP6_SHIFT, AIPS_PACRL_SP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRL, field TP5[8] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRL_TP5 field. */
#define AIPS_RD_PACRL_TP5(base) ((AIPS_PACRL_REG(base) & AIPS_PACRL_TP5_MASK) >> AIPS_PACRL_TP5_SHIFT)
#define AIPS_BRD_PACRL_TP5(base) (BME_UBFX32(&AIPS_PACRL_REG(base), AIPS_PACRL_TP5_SHIFT, AIPS_PACRL_TP5_WIDTH))

/*! @brief Set the TP5 field to a new value. */
#define AIPS_WR_PACRL_TP5(base, value) (AIPS_RMW_PACRL(base, AIPS_PACRL_TP5_MASK, AIPS_PACRL_TP5(value)))
#define AIPS_BWR_PACRL_TP5(base, value) (BME_BFI32(&AIPS_PACRL_REG(base), ((uint32_t)(value) << AIPS_PACRL_TP5_SHIFT), AIPS_PACRL_TP5_SHIFT, AIPS_PACRL_TP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRL, field WP5[9] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRL_WP5 field. */
#define AIPS_RD_PACRL_WP5(base) ((AIPS_PACRL_REG(base) & AIPS_PACRL_WP5_MASK) >> AIPS_PACRL_WP5_SHIFT)
#define AIPS_BRD_PACRL_WP5(base) (BME_UBFX32(&AIPS_PACRL_REG(base), AIPS_PACRL_WP5_SHIFT, AIPS_PACRL_WP5_WIDTH))

/*! @brief Set the WP5 field to a new value. */
#define AIPS_WR_PACRL_WP5(base, value) (AIPS_RMW_PACRL(base, AIPS_PACRL_WP5_MASK, AIPS_PACRL_WP5(value)))
#define AIPS_BWR_PACRL_WP5(base, value) (BME_BFI32(&AIPS_PACRL_REG(base), ((uint32_t)(value) << AIPS_PACRL_WP5_SHIFT), AIPS_PACRL_WP5_SHIFT, AIPS_PACRL_WP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRL, field SP5[10] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRL_SP5 field. */
#define AIPS_RD_PACRL_SP5(base) ((AIPS_PACRL_REG(base) & AIPS_PACRL_SP5_MASK) >> AIPS_PACRL_SP5_SHIFT)
#define AIPS_BRD_PACRL_SP5(base) (BME_UBFX32(&AIPS_PACRL_REG(base), AIPS_PACRL_SP5_SHIFT, AIPS_PACRL_SP5_WIDTH))

/*! @brief Set the SP5 field to a new value. */
#define AIPS_WR_PACRL_SP5(base, value) (AIPS_RMW_PACRL(base, AIPS_PACRL_SP5_MASK, AIPS_PACRL_SP5(value)))
#define AIPS_BWR_PACRL_SP5(base, value) (BME_BFI32(&AIPS_PACRL_REG(base), ((uint32_t)(value) << AIPS_PACRL_SP5_SHIFT), AIPS_PACRL_SP5_SHIFT, AIPS_PACRL_SP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRL, field TP4[12] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRL_TP4 field. */
#define AIPS_RD_PACRL_TP4(base) ((AIPS_PACRL_REG(base) & AIPS_PACRL_TP4_MASK) >> AIPS_PACRL_TP4_SHIFT)
#define AIPS_BRD_PACRL_TP4(base) (BME_UBFX32(&AIPS_PACRL_REG(base), AIPS_PACRL_TP4_SHIFT, AIPS_PACRL_TP4_WIDTH))

/*! @brief Set the TP4 field to a new value. */
#define AIPS_WR_PACRL_TP4(base, value) (AIPS_RMW_PACRL(base, AIPS_PACRL_TP4_MASK, AIPS_PACRL_TP4(value)))
#define AIPS_BWR_PACRL_TP4(base, value) (BME_BFI32(&AIPS_PACRL_REG(base), ((uint32_t)(value) << AIPS_PACRL_TP4_SHIFT), AIPS_PACRL_TP4_SHIFT, AIPS_PACRL_TP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRL, field WP4[13] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRL_WP4 field. */
#define AIPS_RD_PACRL_WP4(base) ((AIPS_PACRL_REG(base) & AIPS_PACRL_WP4_MASK) >> AIPS_PACRL_WP4_SHIFT)
#define AIPS_BRD_PACRL_WP4(base) (BME_UBFX32(&AIPS_PACRL_REG(base), AIPS_PACRL_WP4_SHIFT, AIPS_PACRL_WP4_WIDTH))

/*! @brief Set the WP4 field to a new value. */
#define AIPS_WR_PACRL_WP4(base, value) (AIPS_RMW_PACRL(base, AIPS_PACRL_WP4_MASK, AIPS_PACRL_WP4(value)))
#define AIPS_BWR_PACRL_WP4(base, value) (BME_BFI32(&AIPS_PACRL_REG(base), ((uint32_t)(value) << AIPS_PACRL_WP4_SHIFT), AIPS_PACRL_WP4_SHIFT, AIPS_PACRL_WP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRL, field SP4[14] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRL_SP4 field. */
#define AIPS_RD_PACRL_SP4(base) ((AIPS_PACRL_REG(base) & AIPS_PACRL_SP4_MASK) >> AIPS_PACRL_SP4_SHIFT)
#define AIPS_BRD_PACRL_SP4(base) (BME_UBFX32(&AIPS_PACRL_REG(base), AIPS_PACRL_SP4_SHIFT, AIPS_PACRL_SP4_WIDTH))

/*! @brief Set the SP4 field to a new value. */
#define AIPS_WR_PACRL_SP4(base, value) (AIPS_RMW_PACRL(base, AIPS_PACRL_SP4_MASK, AIPS_PACRL_SP4(value)))
#define AIPS_BWR_PACRL_SP4(base, value) (BME_BFI32(&AIPS_PACRL_REG(base), ((uint32_t)(value) << AIPS_PACRL_SP4_SHIFT), AIPS_PACRL_SP4_SHIFT, AIPS_PACRL_SP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRL, field TP3[16] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRL_TP3 field. */
#define AIPS_RD_PACRL_TP3(base) ((AIPS_PACRL_REG(base) & AIPS_PACRL_TP3_MASK) >> AIPS_PACRL_TP3_SHIFT)
#define AIPS_BRD_PACRL_TP3(base) (BME_UBFX32(&AIPS_PACRL_REG(base), AIPS_PACRL_TP3_SHIFT, AIPS_PACRL_TP3_WIDTH))

/*! @brief Set the TP3 field to a new value. */
#define AIPS_WR_PACRL_TP3(base, value) (AIPS_RMW_PACRL(base, AIPS_PACRL_TP3_MASK, AIPS_PACRL_TP3(value)))
#define AIPS_BWR_PACRL_TP3(base, value) (BME_BFI32(&AIPS_PACRL_REG(base), ((uint32_t)(value) << AIPS_PACRL_TP3_SHIFT), AIPS_PACRL_TP3_SHIFT, AIPS_PACRL_TP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRL, field WP3[17] (RW)
 *
 * Determines whether the peripheral allows write accesss. When this bit is set
 * and a write access is attempted, access terminates with an error response and
 * no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRL_WP3 field. */
#define AIPS_RD_PACRL_WP3(base) ((AIPS_PACRL_REG(base) & AIPS_PACRL_WP3_MASK) >> AIPS_PACRL_WP3_SHIFT)
#define AIPS_BRD_PACRL_WP3(base) (BME_UBFX32(&AIPS_PACRL_REG(base), AIPS_PACRL_WP3_SHIFT, AIPS_PACRL_WP3_WIDTH))

/*! @brief Set the WP3 field to a new value. */
#define AIPS_WR_PACRL_WP3(base, value) (AIPS_RMW_PACRL(base, AIPS_PACRL_WP3_MASK, AIPS_PACRL_WP3(value)))
#define AIPS_BWR_PACRL_WP3(base, value) (BME_BFI32(&AIPS_PACRL_REG(base), ((uint32_t)(value) << AIPS_PACRL_WP3_SHIFT), AIPS_PACRL_WP3_SHIFT, AIPS_PACRL_WP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRL, field SP3[18] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRL_SP3 field. */
#define AIPS_RD_PACRL_SP3(base) ((AIPS_PACRL_REG(base) & AIPS_PACRL_SP3_MASK) >> AIPS_PACRL_SP3_SHIFT)
#define AIPS_BRD_PACRL_SP3(base) (BME_UBFX32(&AIPS_PACRL_REG(base), AIPS_PACRL_SP3_SHIFT, AIPS_PACRL_SP3_WIDTH))

/*! @brief Set the SP3 field to a new value. */
#define AIPS_WR_PACRL_SP3(base, value) (AIPS_RMW_PACRL(base, AIPS_PACRL_SP3_MASK, AIPS_PACRL_SP3(value)))
#define AIPS_BWR_PACRL_SP3(base, value) (BME_BFI32(&AIPS_PACRL_REG(base), ((uint32_t)(value) << AIPS_PACRL_SP3_SHIFT), AIPS_PACRL_SP3_SHIFT, AIPS_PACRL_SP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRL, field TP2[20] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRL_TP2 field. */
#define AIPS_RD_PACRL_TP2(base) ((AIPS_PACRL_REG(base) & AIPS_PACRL_TP2_MASK) >> AIPS_PACRL_TP2_SHIFT)
#define AIPS_BRD_PACRL_TP2(base) (BME_UBFX32(&AIPS_PACRL_REG(base), AIPS_PACRL_TP2_SHIFT, AIPS_PACRL_TP2_WIDTH))

/*! @brief Set the TP2 field to a new value. */
#define AIPS_WR_PACRL_TP2(base, value) (AIPS_RMW_PACRL(base, AIPS_PACRL_TP2_MASK, AIPS_PACRL_TP2(value)))
#define AIPS_BWR_PACRL_TP2(base, value) (BME_BFI32(&AIPS_PACRL_REG(base), ((uint32_t)(value) << AIPS_PACRL_TP2_SHIFT), AIPS_PACRL_TP2_SHIFT, AIPS_PACRL_TP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRL, field WP2[21] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRL_WP2 field. */
#define AIPS_RD_PACRL_WP2(base) ((AIPS_PACRL_REG(base) & AIPS_PACRL_WP2_MASK) >> AIPS_PACRL_WP2_SHIFT)
#define AIPS_BRD_PACRL_WP2(base) (BME_UBFX32(&AIPS_PACRL_REG(base), AIPS_PACRL_WP2_SHIFT, AIPS_PACRL_WP2_WIDTH))

/*! @brief Set the WP2 field to a new value. */
#define AIPS_WR_PACRL_WP2(base, value) (AIPS_RMW_PACRL(base, AIPS_PACRL_WP2_MASK, AIPS_PACRL_WP2(value)))
#define AIPS_BWR_PACRL_WP2(base, value) (BME_BFI32(&AIPS_PACRL_REG(base), ((uint32_t)(value) << AIPS_PACRL_WP2_SHIFT), AIPS_PACRL_WP2_SHIFT, AIPS_PACRL_WP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRL, field SP2[22] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRL_SP2 field. */
#define AIPS_RD_PACRL_SP2(base) ((AIPS_PACRL_REG(base) & AIPS_PACRL_SP2_MASK) >> AIPS_PACRL_SP2_SHIFT)
#define AIPS_BRD_PACRL_SP2(base) (BME_UBFX32(&AIPS_PACRL_REG(base), AIPS_PACRL_SP2_SHIFT, AIPS_PACRL_SP2_WIDTH))

/*! @brief Set the SP2 field to a new value. */
#define AIPS_WR_PACRL_SP2(base, value) (AIPS_RMW_PACRL(base, AIPS_PACRL_SP2_MASK, AIPS_PACRL_SP2(value)))
#define AIPS_BWR_PACRL_SP2(base, value) (BME_BFI32(&AIPS_PACRL_REG(base), ((uint32_t)(value) << AIPS_PACRL_SP2_SHIFT), AIPS_PACRL_SP2_SHIFT, AIPS_PACRL_SP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRL, field TP1[24] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRL_TP1 field. */
#define AIPS_RD_PACRL_TP1(base) ((AIPS_PACRL_REG(base) & AIPS_PACRL_TP1_MASK) >> AIPS_PACRL_TP1_SHIFT)
#define AIPS_BRD_PACRL_TP1(base) (BME_UBFX32(&AIPS_PACRL_REG(base), AIPS_PACRL_TP1_SHIFT, AIPS_PACRL_TP1_WIDTH))

/*! @brief Set the TP1 field to a new value. */
#define AIPS_WR_PACRL_TP1(base, value) (AIPS_RMW_PACRL(base, AIPS_PACRL_TP1_MASK, AIPS_PACRL_TP1(value)))
#define AIPS_BWR_PACRL_TP1(base, value) (BME_BFI32(&AIPS_PACRL_REG(base), ((uint32_t)(value) << AIPS_PACRL_TP1_SHIFT), AIPS_PACRL_TP1_SHIFT, AIPS_PACRL_TP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRL, field WP1[25] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRL_WP1 field. */
#define AIPS_RD_PACRL_WP1(base) ((AIPS_PACRL_REG(base) & AIPS_PACRL_WP1_MASK) >> AIPS_PACRL_WP1_SHIFT)
#define AIPS_BRD_PACRL_WP1(base) (BME_UBFX32(&AIPS_PACRL_REG(base), AIPS_PACRL_WP1_SHIFT, AIPS_PACRL_WP1_WIDTH))

/*! @brief Set the WP1 field to a new value. */
#define AIPS_WR_PACRL_WP1(base, value) (AIPS_RMW_PACRL(base, AIPS_PACRL_WP1_MASK, AIPS_PACRL_WP1(value)))
#define AIPS_BWR_PACRL_WP1(base, value) (BME_BFI32(&AIPS_PACRL_REG(base), ((uint32_t)(value) << AIPS_PACRL_WP1_SHIFT), AIPS_PACRL_WP1_SHIFT, AIPS_PACRL_WP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRL, field SP1[26] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master must
 * be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRL_SP1 field. */
#define AIPS_RD_PACRL_SP1(base) ((AIPS_PACRL_REG(base) & AIPS_PACRL_SP1_MASK) >> AIPS_PACRL_SP1_SHIFT)
#define AIPS_BRD_PACRL_SP1(base) (BME_UBFX32(&AIPS_PACRL_REG(base), AIPS_PACRL_SP1_SHIFT, AIPS_PACRL_SP1_WIDTH))

/*! @brief Set the SP1 field to a new value. */
#define AIPS_WR_PACRL_SP1(base, value) (AIPS_RMW_PACRL(base, AIPS_PACRL_SP1_MASK, AIPS_PACRL_SP1(value)))
#define AIPS_BWR_PACRL_SP1(base, value) (BME_BFI32(&AIPS_PACRL_REG(base), ((uint32_t)(value) << AIPS_PACRL_SP1_SHIFT), AIPS_PACRL_SP1_SHIFT, AIPS_PACRL_SP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRL, field TP0[28] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRL_TP0 field. */
#define AIPS_RD_PACRL_TP0(base) ((AIPS_PACRL_REG(base) & AIPS_PACRL_TP0_MASK) >> AIPS_PACRL_TP0_SHIFT)
#define AIPS_BRD_PACRL_TP0(base) (BME_UBFX32(&AIPS_PACRL_REG(base), AIPS_PACRL_TP0_SHIFT, AIPS_PACRL_TP0_WIDTH))

/*! @brief Set the TP0 field to a new value. */
#define AIPS_WR_PACRL_TP0(base, value) (AIPS_RMW_PACRL(base, AIPS_PACRL_TP0_MASK, AIPS_PACRL_TP0(value)))
#define AIPS_BWR_PACRL_TP0(base, value) (BME_BFI32(&AIPS_PACRL_REG(base), ((uint32_t)(value) << AIPS_PACRL_TP0_SHIFT), AIPS_PACRL_TP0_SHIFT, AIPS_PACRL_TP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRL, field WP0[29] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRL_WP0 field. */
#define AIPS_RD_PACRL_WP0(base) ((AIPS_PACRL_REG(base) & AIPS_PACRL_WP0_MASK) >> AIPS_PACRL_WP0_SHIFT)
#define AIPS_BRD_PACRL_WP0(base) (BME_UBFX32(&AIPS_PACRL_REG(base), AIPS_PACRL_WP0_SHIFT, AIPS_PACRL_WP0_WIDTH))

/*! @brief Set the WP0 field to a new value. */
#define AIPS_WR_PACRL_WP0(base, value) (AIPS_RMW_PACRL(base, AIPS_PACRL_WP0_MASK, AIPS_PACRL_WP0(value)))
#define AIPS_BWR_PACRL_WP0(base, value) (BME_BFI32(&AIPS_PACRL_REG(base), ((uint32_t)(value) << AIPS_PACRL_WP0_SHIFT), AIPS_PACRL_WP0_SHIFT, AIPS_PACRL_WP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRL, field SP0[30] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRL_SP0 field. */
#define AIPS_RD_PACRL_SP0(base) ((AIPS_PACRL_REG(base) & AIPS_PACRL_SP0_MASK) >> AIPS_PACRL_SP0_SHIFT)
#define AIPS_BRD_PACRL_SP0(base) (BME_UBFX32(&AIPS_PACRL_REG(base), AIPS_PACRL_SP0_SHIFT, AIPS_PACRL_SP0_WIDTH))

/*! @brief Set the SP0 field to a new value. */
#define AIPS_WR_PACRL_SP0(base, value) (AIPS_RMW_PACRL(base, AIPS_PACRL_SP0_MASK, AIPS_PACRL_SP0(value)))
#define AIPS_BWR_PACRL_SP0(base, value) (BME_BFI32(&AIPS_PACRL_REG(base), ((uint32_t)(value) << AIPS_PACRL_SP0_SHIFT), AIPS_PACRL_SP0_SHIFT, AIPS_PACRL_SP0_WIDTH))
/*@}*/

/*******************************************************************************
 * AIPS_PACRM - Peripheral Access Control Register
 ******************************************************************************/

/*!
 * @brief AIPS_PACRM - Peripheral Access Control Register (RW)
 *
 * Reset value: 0x04404444U
 *
 * This section describes PACR registers E-P, which control peripheral slots
 * 32-127. See PACRPeripheral Access Control Register for the description of these
 * registers.
 */
/*!
 * @name Constants and macros for entire AIPS_PACRM register
 */
/*@{*/
#define AIPS_RD_PACRM(base)      (AIPS_PACRM_REG(base))
#define AIPS_WR_PACRM(base, value) (AIPS_PACRM_REG(base) = (value))
#define AIPS_RMW_PACRM(base, mask, value) (AIPS_WR_PACRM(base, (AIPS_RD_PACRM(base) & ~(mask)) | (value)))
#define AIPS_SET_PACRM(base, value) (BME_OR32(&AIPS_PACRM_REG(base), (uint32_t)(value)))
#define AIPS_CLR_PACRM(base, value) (BME_AND32(&AIPS_PACRM_REG(base), (uint32_t)(~(value))))
#define AIPS_TOG_PACRM(base, value) (BME_XOR32(&AIPS_PACRM_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual AIPS_PACRM bitfields
 */

/*!
 * @name Register AIPS_PACRM, field TP7[0] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRM_TP7 field. */
#define AIPS_RD_PACRM_TP7(base) ((AIPS_PACRM_REG(base) & AIPS_PACRM_TP7_MASK) >> AIPS_PACRM_TP7_SHIFT)
#define AIPS_BRD_PACRM_TP7(base) (BME_UBFX32(&AIPS_PACRM_REG(base), AIPS_PACRM_TP7_SHIFT, AIPS_PACRM_TP7_WIDTH))

/*! @brief Set the TP7 field to a new value. */
#define AIPS_WR_PACRM_TP7(base, value) (AIPS_RMW_PACRM(base, AIPS_PACRM_TP7_MASK, AIPS_PACRM_TP7(value)))
#define AIPS_BWR_PACRM_TP7(base, value) (BME_BFI32(&AIPS_PACRM_REG(base), ((uint32_t)(value) << AIPS_PACRM_TP7_SHIFT), AIPS_PACRM_TP7_SHIFT, AIPS_PACRM_TP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRM, field WP7[1] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRM_WP7 field. */
#define AIPS_RD_PACRM_WP7(base) ((AIPS_PACRM_REG(base) & AIPS_PACRM_WP7_MASK) >> AIPS_PACRM_WP7_SHIFT)
#define AIPS_BRD_PACRM_WP7(base) (BME_UBFX32(&AIPS_PACRM_REG(base), AIPS_PACRM_WP7_SHIFT, AIPS_PACRM_WP7_WIDTH))

/*! @brief Set the WP7 field to a new value. */
#define AIPS_WR_PACRM_WP7(base, value) (AIPS_RMW_PACRM(base, AIPS_PACRM_WP7_MASK, AIPS_PACRM_WP7(value)))
#define AIPS_BWR_PACRM_WP7(base, value) (BME_BFI32(&AIPS_PACRM_REG(base), ((uint32_t)(value) << AIPS_PACRM_WP7_SHIFT), AIPS_PACRM_WP7_SHIFT, AIPS_PACRM_WP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRM, field SP7[2] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRM_SP7 field. */
#define AIPS_RD_PACRM_SP7(base) ((AIPS_PACRM_REG(base) & AIPS_PACRM_SP7_MASK) >> AIPS_PACRM_SP7_SHIFT)
#define AIPS_BRD_PACRM_SP7(base) (BME_UBFX32(&AIPS_PACRM_REG(base), AIPS_PACRM_SP7_SHIFT, AIPS_PACRM_SP7_WIDTH))

/*! @brief Set the SP7 field to a new value. */
#define AIPS_WR_PACRM_SP7(base, value) (AIPS_RMW_PACRM(base, AIPS_PACRM_SP7_MASK, AIPS_PACRM_SP7(value)))
#define AIPS_BWR_PACRM_SP7(base, value) (BME_BFI32(&AIPS_PACRM_REG(base), ((uint32_t)(value) << AIPS_PACRM_SP7_SHIFT), AIPS_PACRM_SP7_SHIFT, AIPS_PACRM_SP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRM, field TP6[4] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRM_TP6 field. */
#define AIPS_RD_PACRM_TP6(base) ((AIPS_PACRM_REG(base) & AIPS_PACRM_TP6_MASK) >> AIPS_PACRM_TP6_SHIFT)
#define AIPS_BRD_PACRM_TP6(base) (BME_UBFX32(&AIPS_PACRM_REG(base), AIPS_PACRM_TP6_SHIFT, AIPS_PACRM_TP6_WIDTH))

/*! @brief Set the TP6 field to a new value. */
#define AIPS_WR_PACRM_TP6(base, value) (AIPS_RMW_PACRM(base, AIPS_PACRM_TP6_MASK, AIPS_PACRM_TP6(value)))
#define AIPS_BWR_PACRM_TP6(base, value) (BME_BFI32(&AIPS_PACRM_REG(base), ((uint32_t)(value) << AIPS_PACRM_TP6_SHIFT), AIPS_PACRM_TP6_SHIFT, AIPS_PACRM_TP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRM, field WP6[5] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRM_WP6 field. */
#define AIPS_RD_PACRM_WP6(base) ((AIPS_PACRM_REG(base) & AIPS_PACRM_WP6_MASK) >> AIPS_PACRM_WP6_SHIFT)
#define AIPS_BRD_PACRM_WP6(base) (BME_UBFX32(&AIPS_PACRM_REG(base), AIPS_PACRM_WP6_SHIFT, AIPS_PACRM_WP6_WIDTH))

/*! @brief Set the WP6 field to a new value. */
#define AIPS_WR_PACRM_WP6(base, value) (AIPS_RMW_PACRM(base, AIPS_PACRM_WP6_MASK, AIPS_PACRM_WP6(value)))
#define AIPS_BWR_PACRM_WP6(base, value) (BME_BFI32(&AIPS_PACRM_REG(base), ((uint32_t)(value) << AIPS_PACRM_WP6_SHIFT), AIPS_PACRM_WP6_SHIFT, AIPS_PACRM_WP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRM, field SP6[6] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRM_SP6 field. */
#define AIPS_RD_PACRM_SP6(base) ((AIPS_PACRM_REG(base) & AIPS_PACRM_SP6_MASK) >> AIPS_PACRM_SP6_SHIFT)
#define AIPS_BRD_PACRM_SP6(base) (BME_UBFX32(&AIPS_PACRM_REG(base), AIPS_PACRM_SP6_SHIFT, AIPS_PACRM_SP6_WIDTH))

/*! @brief Set the SP6 field to a new value. */
#define AIPS_WR_PACRM_SP6(base, value) (AIPS_RMW_PACRM(base, AIPS_PACRM_SP6_MASK, AIPS_PACRM_SP6(value)))
#define AIPS_BWR_PACRM_SP6(base, value) (BME_BFI32(&AIPS_PACRM_REG(base), ((uint32_t)(value) << AIPS_PACRM_SP6_SHIFT), AIPS_PACRM_SP6_SHIFT, AIPS_PACRM_SP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRM, field TP5[8] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRM_TP5 field. */
#define AIPS_RD_PACRM_TP5(base) ((AIPS_PACRM_REG(base) & AIPS_PACRM_TP5_MASK) >> AIPS_PACRM_TP5_SHIFT)
#define AIPS_BRD_PACRM_TP5(base) (BME_UBFX32(&AIPS_PACRM_REG(base), AIPS_PACRM_TP5_SHIFT, AIPS_PACRM_TP5_WIDTH))

/*! @brief Set the TP5 field to a new value. */
#define AIPS_WR_PACRM_TP5(base, value) (AIPS_RMW_PACRM(base, AIPS_PACRM_TP5_MASK, AIPS_PACRM_TP5(value)))
#define AIPS_BWR_PACRM_TP5(base, value) (BME_BFI32(&AIPS_PACRM_REG(base), ((uint32_t)(value) << AIPS_PACRM_TP5_SHIFT), AIPS_PACRM_TP5_SHIFT, AIPS_PACRM_TP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRM, field WP5[9] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRM_WP5 field. */
#define AIPS_RD_PACRM_WP5(base) ((AIPS_PACRM_REG(base) & AIPS_PACRM_WP5_MASK) >> AIPS_PACRM_WP5_SHIFT)
#define AIPS_BRD_PACRM_WP5(base) (BME_UBFX32(&AIPS_PACRM_REG(base), AIPS_PACRM_WP5_SHIFT, AIPS_PACRM_WP5_WIDTH))

/*! @brief Set the WP5 field to a new value. */
#define AIPS_WR_PACRM_WP5(base, value) (AIPS_RMW_PACRM(base, AIPS_PACRM_WP5_MASK, AIPS_PACRM_WP5(value)))
#define AIPS_BWR_PACRM_WP5(base, value) (BME_BFI32(&AIPS_PACRM_REG(base), ((uint32_t)(value) << AIPS_PACRM_WP5_SHIFT), AIPS_PACRM_WP5_SHIFT, AIPS_PACRM_WP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRM, field SP5[10] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRM_SP5 field. */
#define AIPS_RD_PACRM_SP5(base) ((AIPS_PACRM_REG(base) & AIPS_PACRM_SP5_MASK) >> AIPS_PACRM_SP5_SHIFT)
#define AIPS_BRD_PACRM_SP5(base) (BME_UBFX32(&AIPS_PACRM_REG(base), AIPS_PACRM_SP5_SHIFT, AIPS_PACRM_SP5_WIDTH))

/*! @brief Set the SP5 field to a new value. */
#define AIPS_WR_PACRM_SP5(base, value) (AIPS_RMW_PACRM(base, AIPS_PACRM_SP5_MASK, AIPS_PACRM_SP5(value)))
#define AIPS_BWR_PACRM_SP5(base, value) (BME_BFI32(&AIPS_PACRM_REG(base), ((uint32_t)(value) << AIPS_PACRM_SP5_SHIFT), AIPS_PACRM_SP5_SHIFT, AIPS_PACRM_SP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRM, field TP4[12] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRM_TP4 field. */
#define AIPS_RD_PACRM_TP4(base) ((AIPS_PACRM_REG(base) & AIPS_PACRM_TP4_MASK) >> AIPS_PACRM_TP4_SHIFT)
#define AIPS_BRD_PACRM_TP4(base) (BME_UBFX32(&AIPS_PACRM_REG(base), AIPS_PACRM_TP4_SHIFT, AIPS_PACRM_TP4_WIDTH))

/*! @brief Set the TP4 field to a new value. */
#define AIPS_WR_PACRM_TP4(base, value) (AIPS_RMW_PACRM(base, AIPS_PACRM_TP4_MASK, AIPS_PACRM_TP4(value)))
#define AIPS_BWR_PACRM_TP4(base, value) (BME_BFI32(&AIPS_PACRM_REG(base), ((uint32_t)(value) << AIPS_PACRM_TP4_SHIFT), AIPS_PACRM_TP4_SHIFT, AIPS_PACRM_TP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRM, field WP4[13] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRM_WP4 field. */
#define AIPS_RD_PACRM_WP4(base) ((AIPS_PACRM_REG(base) & AIPS_PACRM_WP4_MASK) >> AIPS_PACRM_WP4_SHIFT)
#define AIPS_BRD_PACRM_WP4(base) (BME_UBFX32(&AIPS_PACRM_REG(base), AIPS_PACRM_WP4_SHIFT, AIPS_PACRM_WP4_WIDTH))

/*! @brief Set the WP4 field to a new value. */
#define AIPS_WR_PACRM_WP4(base, value) (AIPS_RMW_PACRM(base, AIPS_PACRM_WP4_MASK, AIPS_PACRM_WP4(value)))
#define AIPS_BWR_PACRM_WP4(base, value) (BME_BFI32(&AIPS_PACRM_REG(base), ((uint32_t)(value) << AIPS_PACRM_WP4_SHIFT), AIPS_PACRM_WP4_SHIFT, AIPS_PACRM_WP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRM, field SP4[14] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRM_SP4 field. */
#define AIPS_RD_PACRM_SP4(base) ((AIPS_PACRM_REG(base) & AIPS_PACRM_SP4_MASK) >> AIPS_PACRM_SP4_SHIFT)
#define AIPS_BRD_PACRM_SP4(base) (BME_UBFX32(&AIPS_PACRM_REG(base), AIPS_PACRM_SP4_SHIFT, AIPS_PACRM_SP4_WIDTH))

/*! @brief Set the SP4 field to a new value. */
#define AIPS_WR_PACRM_SP4(base, value) (AIPS_RMW_PACRM(base, AIPS_PACRM_SP4_MASK, AIPS_PACRM_SP4(value)))
#define AIPS_BWR_PACRM_SP4(base, value) (BME_BFI32(&AIPS_PACRM_REG(base), ((uint32_t)(value) << AIPS_PACRM_SP4_SHIFT), AIPS_PACRM_SP4_SHIFT, AIPS_PACRM_SP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRM, field TP3[16] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRM_TP3 field. */
#define AIPS_RD_PACRM_TP3(base) ((AIPS_PACRM_REG(base) & AIPS_PACRM_TP3_MASK) >> AIPS_PACRM_TP3_SHIFT)
#define AIPS_BRD_PACRM_TP3(base) (BME_UBFX32(&AIPS_PACRM_REG(base), AIPS_PACRM_TP3_SHIFT, AIPS_PACRM_TP3_WIDTH))

/*! @brief Set the TP3 field to a new value. */
#define AIPS_WR_PACRM_TP3(base, value) (AIPS_RMW_PACRM(base, AIPS_PACRM_TP3_MASK, AIPS_PACRM_TP3(value)))
#define AIPS_BWR_PACRM_TP3(base, value) (BME_BFI32(&AIPS_PACRM_REG(base), ((uint32_t)(value) << AIPS_PACRM_TP3_SHIFT), AIPS_PACRM_TP3_SHIFT, AIPS_PACRM_TP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRM, field WP3[17] (RW)
 *
 * Determines whether the peripheral allows write accesss. When this bit is set
 * and a write access is attempted, access terminates with an error response and
 * no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRM_WP3 field. */
#define AIPS_RD_PACRM_WP3(base) ((AIPS_PACRM_REG(base) & AIPS_PACRM_WP3_MASK) >> AIPS_PACRM_WP3_SHIFT)
#define AIPS_BRD_PACRM_WP3(base) (BME_UBFX32(&AIPS_PACRM_REG(base), AIPS_PACRM_WP3_SHIFT, AIPS_PACRM_WP3_WIDTH))

/*! @brief Set the WP3 field to a new value. */
#define AIPS_WR_PACRM_WP3(base, value) (AIPS_RMW_PACRM(base, AIPS_PACRM_WP3_MASK, AIPS_PACRM_WP3(value)))
#define AIPS_BWR_PACRM_WP3(base, value) (BME_BFI32(&AIPS_PACRM_REG(base), ((uint32_t)(value) << AIPS_PACRM_WP3_SHIFT), AIPS_PACRM_WP3_SHIFT, AIPS_PACRM_WP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRM, field SP3[18] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRM_SP3 field. */
#define AIPS_RD_PACRM_SP3(base) ((AIPS_PACRM_REG(base) & AIPS_PACRM_SP3_MASK) >> AIPS_PACRM_SP3_SHIFT)
#define AIPS_BRD_PACRM_SP3(base) (BME_UBFX32(&AIPS_PACRM_REG(base), AIPS_PACRM_SP3_SHIFT, AIPS_PACRM_SP3_WIDTH))

/*! @brief Set the SP3 field to a new value. */
#define AIPS_WR_PACRM_SP3(base, value) (AIPS_RMW_PACRM(base, AIPS_PACRM_SP3_MASK, AIPS_PACRM_SP3(value)))
#define AIPS_BWR_PACRM_SP3(base, value) (BME_BFI32(&AIPS_PACRM_REG(base), ((uint32_t)(value) << AIPS_PACRM_SP3_SHIFT), AIPS_PACRM_SP3_SHIFT, AIPS_PACRM_SP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRM, field TP2[20] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRM_TP2 field. */
#define AIPS_RD_PACRM_TP2(base) ((AIPS_PACRM_REG(base) & AIPS_PACRM_TP2_MASK) >> AIPS_PACRM_TP2_SHIFT)
#define AIPS_BRD_PACRM_TP2(base) (BME_UBFX32(&AIPS_PACRM_REG(base), AIPS_PACRM_TP2_SHIFT, AIPS_PACRM_TP2_WIDTH))

/*! @brief Set the TP2 field to a new value. */
#define AIPS_WR_PACRM_TP2(base, value) (AIPS_RMW_PACRM(base, AIPS_PACRM_TP2_MASK, AIPS_PACRM_TP2(value)))
#define AIPS_BWR_PACRM_TP2(base, value) (BME_BFI32(&AIPS_PACRM_REG(base), ((uint32_t)(value) << AIPS_PACRM_TP2_SHIFT), AIPS_PACRM_TP2_SHIFT, AIPS_PACRM_TP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRM, field WP2[21] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRM_WP2 field. */
#define AIPS_RD_PACRM_WP2(base) ((AIPS_PACRM_REG(base) & AIPS_PACRM_WP2_MASK) >> AIPS_PACRM_WP2_SHIFT)
#define AIPS_BRD_PACRM_WP2(base) (BME_UBFX32(&AIPS_PACRM_REG(base), AIPS_PACRM_WP2_SHIFT, AIPS_PACRM_WP2_WIDTH))

/*! @brief Set the WP2 field to a new value. */
#define AIPS_WR_PACRM_WP2(base, value) (AIPS_RMW_PACRM(base, AIPS_PACRM_WP2_MASK, AIPS_PACRM_WP2(value)))
#define AIPS_BWR_PACRM_WP2(base, value) (BME_BFI32(&AIPS_PACRM_REG(base), ((uint32_t)(value) << AIPS_PACRM_WP2_SHIFT), AIPS_PACRM_WP2_SHIFT, AIPS_PACRM_WP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRM, field SP2[22] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRM_SP2 field. */
#define AIPS_RD_PACRM_SP2(base) ((AIPS_PACRM_REG(base) & AIPS_PACRM_SP2_MASK) >> AIPS_PACRM_SP2_SHIFT)
#define AIPS_BRD_PACRM_SP2(base) (BME_UBFX32(&AIPS_PACRM_REG(base), AIPS_PACRM_SP2_SHIFT, AIPS_PACRM_SP2_WIDTH))

/*! @brief Set the SP2 field to a new value. */
#define AIPS_WR_PACRM_SP2(base, value) (AIPS_RMW_PACRM(base, AIPS_PACRM_SP2_MASK, AIPS_PACRM_SP2(value)))
#define AIPS_BWR_PACRM_SP2(base, value) (BME_BFI32(&AIPS_PACRM_REG(base), ((uint32_t)(value) << AIPS_PACRM_SP2_SHIFT), AIPS_PACRM_SP2_SHIFT, AIPS_PACRM_SP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRM, field TP1[24] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRM_TP1 field. */
#define AIPS_RD_PACRM_TP1(base) ((AIPS_PACRM_REG(base) & AIPS_PACRM_TP1_MASK) >> AIPS_PACRM_TP1_SHIFT)
#define AIPS_BRD_PACRM_TP1(base) (BME_UBFX32(&AIPS_PACRM_REG(base), AIPS_PACRM_TP1_SHIFT, AIPS_PACRM_TP1_WIDTH))

/*! @brief Set the TP1 field to a new value. */
#define AIPS_WR_PACRM_TP1(base, value) (AIPS_RMW_PACRM(base, AIPS_PACRM_TP1_MASK, AIPS_PACRM_TP1(value)))
#define AIPS_BWR_PACRM_TP1(base, value) (BME_BFI32(&AIPS_PACRM_REG(base), ((uint32_t)(value) << AIPS_PACRM_TP1_SHIFT), AIPS_PACRM_TP1_SHIFT, AIPS_PACRM_TP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRM, field WP1[25] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRM_WP1 field. */
#define AIPS_RD_PACRM_WP1(base) ((AIPS_PACRM_REG(base) & AIPS_PACRM_WP1_MASK) >> AIPS_PACRM_WP1_SHIFT)
#define AIPS_BRD_PACRM_WP1(base) (BME_UBFX32(&AIPS_PACRM_REG(base), AIPS_PACRM_WP1_SHIFT, AIPS_PACRM_WP1_WIDTH))

/*! @brief Set the WP1 field to a new value. */
#define AIPS_WR_PACRM_WP1(base, value) (AIPS_RMW_PACRM(base, AIPS_PACRM_WP1_MASK, AIPS_PACRM_WP1(value)))
#define AIPS_BWR_PACRM_WP1(base, value) (BME_BFI32(&AIPS_PACRM_REG(base), ((uint32_t)(value) << AIPS_PACRM_WP1_SHIFT), AIPS_PACRM_WP1_SHIFT, AIPS_PACRM_WP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRM, field SP1[26] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master must
 * be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRM_SP1 field. */
#define AIPS_RD_PACRM_SP1(base) ((AIPS_PACRM_REG(base) & AIPS_PACRM_SP1_MASK) >> AIPS_PACRM_SP1_SHIFT)
#define AIPS_BRD_PACRM_SP1(base) (BME_UBFX32(&AIPS_PACRM_REG(base), AIPS_PACRM_SP1_SHIFT, AIPS_PACRM_SP1_WIDTH))

/*! @brief Set the SP1 field to a new value. */
#define AIPS_WR_PACRM_SP1(base, value) (AIPS_RMW_PACRM(base, AIPS_PACRM_SP1_MASK, AIPS_PACRM_SP1(value)))
#define AIPS_BWR_PACRM_SP1(base, value) (BME_BFI32(&AIPS_PACRM_REG(base), ((uint32_t)(value) << AIPS_PACRM_SP1_SHIFT), AIPS_PACRM_SP1_SHIFT, AIPS_PACRM_SP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRM, field TP0[28] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRM_TP0 field. */
#define AIPS_RD_PACRM_TP0(base) ((AIPS_PACRM_REG(base) & AIPS_PACRM_TP0_MASK) >> AIPS_PACRM_TP0_SHIFT)
#define AIPS_BRD_PACRM_TP0(base) (BME_UBFX32(&AIPS_PACRM_REG(base), AIPS_PACRM_TP0_SHIFT, AIPS_PACRM_TP0_WIDTH))

/*! @brief Set the TP0 field to a new value. */
#define AIPS_WR_PACRM_TP0(base, value) (AIPS_RMW_PACRM(base, AIPS_PACRM_TP0_MASK, AIPS_PACRM_TP0(value)))
#define AIPS_BWR_PACRM_TP0(base, value) (BME_BFI32(&AIPS_PACRM_REG(base), ((uint32_t)(value) << AIPS_PACRM_TP0_SHIFT), AIPS_PACRM_TP0_SHIFT, AIPS_PACRM_TP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRM, field WP0[29] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRM_WP0 field. */
#define AIPS_RD_PACRM_WP0(base) ((AIPS_PACRM_REG(base) & AIPS_PACRM_WP0_MASK) >> AIPS_PACRM_WP0_SHIFT)
#define AIPS_BRD_PACRM_WP0(base) (BME_UBFX32(&AIPS_PACRM_REG(base), AIPS_PACRM_WP0_SHIFT, AIPS_PACRM_WP0_WIDTH))

/*! @brief Set the WP0 field to a new value. */
#define AIPS_WR_PACRM_WP0(base, value) (AIPS_RMW_PACRM(base, AIPS_PACRM_WP0_MASK, AIPS_PACRM_WP0(value)))
#define AIPS_BWR_PACRM_WP0(base, value) (BME_BFI32(&AIPS_PACRM_REG(base), ((uint32_t)(value) << AIPS_PACRM_WP0_SHIFT), AIPS_PACRM_WP0_SHIFT, AIPS_PACRM_WP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRM, field SP0[30] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRM_SP0 field. */
#define AIPS_RD_PACRM_SP0(base) ((AIPS_PACRM_REG(base) & AIPS_PACRM_SP0_MASK) >> AIPS_PACRM_SP0_SHIFT)
#define AIPS_BRD_PACRM_SP0(base) (BME_UBFX32(&AIPS_PACRM_REG(base), AIPS_PACRM_SP0_SHIFT, AIPS_PACRM_SP0_WIDTH))

/*! @brief Set the SP0 field to a new value. */
#define AIPS_WR_PACRM_SP0(base, value) (AIPS_RMW_PACRM(base, AIPS_PACRM_SP0_MASK, AIPS_PACRM_SP0(value)))
#define AIPS_BWR_PACRM_SP0(base, value) (BME_BFI32(&AIPS_PACRM_REG(base), ((uint32_t)(value) << AIPS_PACRM_SP0_SHIFT), AIPS_PACRM_SP0_SHIFT, AIPS_PACRM_SP0_WIDTH))
/*@}*/

/*******************************************************************************
 * AIPS_PACRN - Peripheral Access Control Register
 ******************************************************************************/

/*!
 * @brief AIPS_PACRN - Peripheral Access Control Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This section describes PACR registers E-P, which control peripheral slots
 * 32-127. See PACRPeripheral Access Control Register for the description of these
 * registers.
 */
/*!
 * @name Constants and macros for entire AIPS_PACRN register
 */
/*@{*/
#define AIPS_RD_PACRN(base)      (AIPS_PACRN_REG(base))
#define AIPS_WR_PACRN(base, value) (AIPS_PACRN_REG(base) = (value))
#define AIPS_RMW_PACRN(base, mask, value) (AIPS_WR_PACRN(base, (AIPS_RD_PACRN(base) & ~(mask)) | (value)))
#define AIPS_SET_PACRN(base, value) (BME_OR32(&AIPS_PACRN_REG(base), (uint32_t)(value)))
#define AIPS_CLR_PACRN(base, value) (BME_AND32(&AIPS_PACRN_REG(base), (uint32_t)(~(value))))
#define AIPS_TOG_PACRN(base, value) (BME_XOR32(&AIPS_PACRN_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual AIPS_PACRN bitfields
 */

/*!
 * @name Register AIPS_PACRN, field TP7[0] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRN_TP7 field. */
#define AIPS_RD_PACRN_TP7(base) ((AIPS_PACRN_REG(base) & AIPS_PACRN_TP7_MASK) >> AIPS_PACRN_TP7_SHIFT)
#define AIPS_BRD_PACRN_TP7(base) (BME_UBFX32(&AIPS_PACRN_REG(base), AIPS_PACRN_TP7_SHIFT, AIPS_PACRN_TP7_WIDTH))

/*! @brief Set the TP7 field to a new value. */
#define AIPS_WR_PACRN_TP7(base, value) (AIPS_RMW_PACRN(base, AIPS_PACRN_TP7_MASK, AIPS_PACRN_TP7(value)))
#define AIPS_BWR_PACRN_TP7(base, value) (BME_BFI32(&AIPS_PACRN_REG(base), ((uint32_t)(value) << AIPS_PACRN_TP7_SHIFT), AIPS_PACRN_TP7_SHIFT, AIPS_PACRN_TP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRN, field WP7[1] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRN_WP7 field. */
#define AIPS_RD_PACRN_WP7(base) ((AIPS_PACRN_REG(base) & AIPS_PACRN_WP7_MASK) >> AIPS_PACRN_WP7_SHIFT)
#define AIPS_BRD_PACRN_WP7(base) (BME_UBFX32(&AIPS_PACRN_REG(base), AIPS_PACRN_WP7_SHIFT, AIPS_PACRN_WP7_WIDTH))

/*! @brief Set the WP7 field to a new value. */
#define AIPS_WR_PACRN_WP7(base, value) (AIPS_RMW_PACRN(base, AIPS_PACRN_WP7_MASK, AIPS_PACRN_WP7(value)))
#define AIPS_BWR_PACRN_WP7(base, value) (BME_BFI32(&AIPS_PACRN_REG(base), ((uint32_t)(value) << AIPS_PACRN_WP7_SHIFT), AIPS_PACRN_WP7_SHIFT, AIPS_PACRN_WP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRN, field SP7[2] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRN_SP7 field. */
#define AIPS_RD_PACRN_SP7(base) ((AIPS_PACRN_REG(base) & AIPS_PACRN_SP7_MASK) >> AIPS_PACRN_SP7_SHIFT)
#define AIPS_BRD_PACRN_SP7(base) (BME_UBFX32(&AIPS_PACRN_REG(base), AIPS_PACRN_SP7_SHIFT, AIPS_PACRN_SP7_WIDTH))

/*! @brief Set the SP7 field to a new value. */
#define AIPS_WR_PACRN_SP7(base, value) (AIPS_RMW_PACRN(base, AIPS_PACRN_SP7_MASK, AIPS_PACRN_SP7(value)))
#define AIPS_BWR_PACRN_SP7(base, value) (BME_BFI32(&AIPS_PACRN_REG(base), ((uint32_t)(value) << AIPS_PACRN_SP7_SHIFT), AIPS_PACRN_SP7_SHIFT, AIPS_PACRN_SP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRN, field TP6[4] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRN_TP6 field. */
#define AIPS_RD_PACRN_TP6(base) ((AIPS_PACRN_REG(base) & AIPS_PACRN_TP6_MASK) >> AIPS_PACRN_TP6_SHIFT)
#define AIPS_BRD_PACRN_TP6(base) (BME_UBFX32(&AIPS_PACRN_REG(base), AIPS_PACRN_TP6_SHIFT, AIPS_PACRN_TP6_WIDTH))

/*! @brief Set the TP6 field to a new value. */
#define AIPS_WR_PACRN_TP6(base, value) (AIPS_RMW_PACRN(base, AIPS_PACRN_TP6_MASK, AIPS_PACRN_TP6(value)))
#define AIPS_BWR_PACRN_TP6(base, value) (BME_BFI32(&AIPS_PACRN_REG(base), ((uint32_t)(value) << AIPS_PACRN_TP6_SHIFT), AIPS_PACRN_TP6_SHIFT, AIPS_PACRN_TP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRN, field WP6[5] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRN_WP6 field. */
#define AIPS_RD_PACRN_WP6(base) ((AIPS_PACRN_REG(base) & AIPS_PACRN_WP6_MASK) >> AIPS_PACRN_WP6_SHIFT)
#define AIPS_BRD_PACRN_WP6(base) (BME_UBFX32(&AIPS_PACRN_REG(base), AIPS_PACRN_WP6_SHIFT, AIPS_PACRN_WP6_WIDTH))

/*! @brief Set the WP6 field to a new value. */
#define AIPS_WR_PACRN_WP6(base, value) (AIPS_RMW_PACRN(base, AIPS_PACRN_WP6_MASK, AIPS_PACRN_WP6(value)))
#define AIPS_BWR_PACRN_WP6(base, value) (BME_BFI32(&AIPS_PACRN_REG(base), ((uint32_t)(value) << AIPS_PACRN_WP6_SHIFT), AIPS_PACRN_WP6_SHIFT, AIPS_PACRN_WP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRN, field SP6[6] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRN_SP6 field. */
#define AIPS_RD_PACRN_SP6(base) ((AIPS_PACRN_REG(base) & AIPS_PACRN_SP6_MASK) >> AIPS_PACRN_SP6_SHIFT)
#define AIPS_BRD_PACRN_SP6(base) (BME_UBFX32(&AIPS_PACRN_REG(base), AIPS_PACRN_SP6_SHIFT, AIPS_PACRN_SP6_WIDTH))

/*! @brief Set the SP6 field to a new value. */
#define AIPS_WR_PACRN_SP6(base, value) (AIPS_RMW_PACRN(base, AIPS_PACRN_SP6_MASK, AIPS_PACRN_SP6(value)))
#define AIPS_BWR_PACRN_SP6(base, value) (BME_BFI32(&AIPS_PACRN_REG(base), ((uint32_t)(value) << AIPS_PACRN_SP6_SHIFT), AIPS_PACRN_SP6_SHIFT, AIPS_PACRN_SP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRN, field TP5[8] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRN_TP5 field. */
#define AIPS_RD_PACRN_TP5(base) ((AIPS_PACRN_REG(base) & AIPS_PACRN_TP5_MASK) >> AIPS_PACRN_TP5_SHIFT)
#define AIPS_BRD_PACRN_TP5(base) (BME_UBFX32(&AIPS_PACRN_REG(base), AIPS_PACRN_TP5_SHIFT, AIPS_PACRN_TP5_WIDTH))

/*! @brief Set the TP5 field to a new value. */
#define AIPS_WR_PACRN_TP5(base, value) (AIPS_RMW_PACRN(base, AIPS_PACRN_TP5_MASK, AIPS_PACRN_TP5(value)))
#define AIPS_BWR_PACRN_TP5(base, value) (BME_BFI32(&AIPS_PACRN_REG(base), ((uint32_t)(value) << AIPS_PACRN_TP5_SHIFT), AIPS_PACRN_TP5_SHIFT, AIPS_PACRN_TP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRN, field WP5[9] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRN_WP5 field. */
#define AIPS_RD_PACRN_WP5(base) ((AIPS_PACRN_REG(base) & AIPS_PACRN_WP5_MASK) >> AIPS_PACRN_WP5_SHIFT)
#define AIPS_BRD_PACRN_WP5(base) (BME_UBFX32(&AIPS_PACRN_REG(base), AIPS_PACRN_WP5_SHIFT, AIPS_PACRN_WP5_WIDTH))

/*! @brief Set the WP5 field to a new value. */
#define AIPS_WR_PACRN_WP5(base, value) (AIPS_RMW_PACRN(base, AIPS_PACRN_WP5_MASK, AIPS_PACRN_WP5(value)))
#define AIPS_BWR_PACRN_WP5(base, value) (BME_BFI32(&AIPS_PACRN_REG(base), ((uint32_t)(value) << AIPS_PACRN_WP5_SHIFT), AIPS_PACRN_WP5_SHIFT, AIPS_PACRN_WP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRN, field SP5[10] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRN_SP5 field. */
#define AIPS_RD_PACRN_SP5(base) ((AIPS_PACRN_REG(base) & AIPS_PACRN_SP5_MASK) >> AIPS_PACRN_SP5_SHIFT)
#define AIPS_BRD_PACRN_SP5(base) (BME_UBFX32(&AIPS_PACRN_REG(base), AIPS_PACRN_SP5_SHIFT, AIPS_PACRN_SP5_WIDTH))

/*! @brief Set the SP5 field to a new value. */
#define AIPS_WR_PACRN_SP5(base, value) (AIPS_RMW_PACRN(base, AIPS_PACRN_SP5_MASK, AIPS_PACRN_SP5(value)))
#define AIPS_BWR_PACRN_SP5(base, value) (BME_BFI32(&AIPS_PACRN_REG(base), ((uint32_t)(value) << AIPS_PACRN_SP5_SHIFT), AIPS_PACRN_SP5_SHIFT, AIPS_PACRN_SP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRN, field TP4[12] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRN_TP4 field. */
#define AIPS_RD_PACRN_TP4(base) ((AIPS_PACRN_REG(base) & AIPS_PACRN_TP4_MASK) >> AIPS_PACRN_TP4_SHIFT)
#define AIPS_BRD_PACRN_TP4(base) (BME_UBFX32(&AIPS_PACRN_REG(base), AIPS_PACRN_TP4_SHIFT, AIPS_PACRN_TP4_WIDTH))

/*! @brief Set the TP4 field to a new value. */
#define AIPS_WR_PACRN_TP4(base, value) (AIPS_RMW_PACRN(base, AIPS_PACRN_TP4_MASK, AIPS_PACRN_TP4(value)))
#define AIPS_BWR_PACRN_TP4(base, value) (BME_BFI32(&AIPS_PACRN_REG(base), ((uint32_t)(value) << AIPS_PACRN_TP4_SHIFT), AIPS_PACRN_TP4_SHIFT, AIPS_PACRN_TP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRN, field WP4[13] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRN_WP4 field. */
#define AIPS_RD_PACRN_WP4(base) ((AIPS_PACRN_REG(base) & AIPS_PACRN_WP4_MASK) >> AIPS_PACRN_WP4_SHIFT)
#define AIPS_BRD_PACRN_WP4(base) (BME_UBFX32(&AIPS_PACRN_REG(base), AIPS_PACRN_WP4_SHIFT, AIPS_PACRN_WP4_WIDTH))

/*! @brief Set the WP4 field to a new value. */
#define AIPS_WR_PACRN_WP4(base, value) (AIPS_RMW_PACRN(base, AIPS_PACRN_WP4_MASK, AIPS_PACRN_WP4(value)))
#define AIPS_BWR_PACRN_WP4(base, value) (BME_BFI32(&AIPS_PACRN_REG(base), ((uint32_t)(value) << AIPS_PACRN_WP4_SHIFT), AIPS_PACRN_WP4_SHIFT, AIPS_PACRN_WP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRN, field SP4[14] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRN_SP4 field. */
#define AIPS_RD_PACRN_SP4(base) ((AIPS_PACRN_REG(base) & AIPS_PACRN_SP4_MASK) >> AIPS_PACRN_SP4_SHIFT)
#define AIPS_BRD_PACRN_SP4(base) (BME_UBFX32(&AIPS_PACRN_REG(base), AIPS_PACRN_SP4_SHIFT, AIPS_PACRN_SP4_WIDTH))

/*! @brief Set the SP4 field to a new value. */
#define AIPS_WR_PACRN_SP4(base, value) (AIPS_RMW_PACRN(base, AIPS_PACRN_SP4_MASK, AIPS_PACRN_SP4(value)))
#define AIPS_BWR_PACRN_SP4(base, value) (BME_BFI32(&AIPS_PACRN_REG(base), ((uint32_t)(value) << AIPS_PACRN_SP4_SHIFT), AIPS_PACRN_SP4_SHIFT, AIPS_PACRN_SP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRN, field TP3[16] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRN_TP3 field. */
#define AIPS_RD_PACRN_TP3(base) ((AIPS_PACRN_REG(base) & AIPS_PACRN_TP3_MASK) >> AIPS_PACRN_TP3_SHIFT)
#define AIPS_BRD_PACRN_TP3(base) (BME_UBFX32(&AIPS_PACRN_REG(base), AIPS_PACRN_TP3_SHIFT, AIPS_PACRN_TP3_WIDTH))

/*! @brief Set the TP3 field to a new value. */
#define AIPS_WR_PACRN_TP3(base, value) (AIPS_RMW_PACRN(base, AIPS_PACRN_TP3_MASK, AIPS_PACRN_TP3(value)))
#define AIPS_BWR_PACRN_TP3(base, value) (BME_BFI32(&AIPS_PACRN_REG(base), ((uint32_t)(value) << AIPS_PACRN_TP3_SHIFT), AIPS_PACRN_TP3_SHIFT, AIPS_PACRN_TP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRN, field WP3[17] (RW)
 *
 * Determines whether the peripheral allows write accesss. When this bit is set
 * and a write access is attempted, access terminates with an error response and
 * no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRN_WP3 field. */
#define AIPS_RD_PACRN_WP3(base) ((AIPS_PACRN_REG(base) & AIPS_PACRN_WP3_MASK) >> AIPS_PACRN_WP3_SHIFT)
#define AIPS_BRD_PACRN_WP3(base) (BME_UBFX32(&AIPS_PACRN_REG(base), AIPS_PACRN_WP3_SHIFT, AIPS_PACRN_WP3_WIDTH))

/*! @brief Set the WP3 field to a new value. */
#define AIPS_WR_PACRN_WP3(base, value) (AIPS_RMW_PACRN(base, AIPS_PACRN_WP3_MASK, AIPS_PACRN_WP3(value)))
#define AIPS_BWR_PACRN_WP3(base, value) (BME_BFI32(&AIPS_PACRN_REG(base), ((uint32_t)(value) << AIPS_PACRN_WP3_SHIFT), AIPS_PACRN_WP3_SHIFT, AIPS_PACRN_WP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRN, field SP3[18] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRN_SP3 field. */
#define AIPS_RD_PACRN_SP3(base) ((AIPS_PACRN_REG(base) & AIPS_PACRN_SP3_MASK) >> AIPS_PACRN_SP3_SHIFT)
#define AIPS_BRD_PACRN_SP3(base) (BME_UBFX32(&AIPS_PACRN_REG(base), AIPS_PACRN_SP3_SHIFT, AIPS_PACRN_SP3_WIDTH))

/*! @brief Set the SP3 field to a new value. */
#define AIPS_WR_PACRN_SP3(base, value) (AIPS_RMW_PACRN(base, AIPS_PACRN_SP3_MASK, AIPS_PACRN_SP3(value)))
#define AIPS_BWR_PACRN_SP3(base, value) (BME_BFI32(&AIPS_PACRN_REG(base), ((uint32_t)(value) << AIPS_PACRN_SP3_SHIFT), AIPS_PACRN_SP3_SHIFT, AIPS_PACRN_SP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRN, field TP2[20] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRN_TP2 field. */
#define AIPS_RD_PACRN_TP2(base) ((AIPS_PACRN_REG(base) & AIPS_PACRN_TP2_MASK) >> AIPS_PACRN_TP2_SHIFT)
#define AIPS_BRD_PACRN_TP2(base) (BME_UBFX32(&AIPS_PACRN_REG(base), AIPS_PACRN_TP2_SHIFT, AIPS_PACRN_TP2_WIDTH))

/*! @brief Set the TP2 field to a new value. */
#define AIPS_WR_PACRN_TP2(base, value) (AIPS_RMW_PACRN(base, AIPS_PACRN_TP2_MASK, AIPS_PACRN_TP2(value)))
#define AIPS_BWR_PACRN_TP2(base, value) (BME_BFI32(&AIPS_PACRN_REG(base), ((uint32_t)(value) << AIPS_PACRN_TP2_SHIFT), AIPS_PACRN_TP2_SHIFT, AIPS_PACRN_TP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRN, field WP2[21] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRN_WP2 field. */
#define AIPS_RD_PACRN_WP2(base) ((AIPS_PACRN_REG(base) & AIPS_PACRN_WP2_MASK) >> AIPS_PACRN_WP2_SHIFT)
#define AIPS_BRD_PACRN_WP2(base) (BME_UBFX32(&AIPS_PACRN_REG(base), AIPS_PACRN_WP2_SHIFT, AIPS_PACRN_WP2_WIDTH))

/*! @brief Set the WP2 field to a new value. */
#define AIPS_WR_PACRN_WP2(base, value) (AIPS_RMW_PACRN(base, AIPS_PACRN_WP2_MASK, AIPS_PACRN_WP2(value)))
#define AIPS_BWR_PACRN_WP2(base, value) (BME_BFI32(&AIPS_PACRN_REG(base), ((uint32_t)(value) << AIPS_PACRN_WP2_SHIFT), AIPS_PACRN_WP2_SHIFT, AIPS_PACRN_WP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRN, field SP2[22] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRN_SP2 field. */
#define AIPS_RD_PACRN_SP2(base) ((AIPS_PACRN_REG(base) & AIPS_PACRN_SP2_MASK) >> AIPS_PACRN_SP2_SHIFT)
#define AIPS_BRD_PACRN_SP2(base) (BME_UBFX32(&AIPS_PACRN_REG(base), AIPS_PACRN_SP2_SHIFT, AIPS_PACRN_SP2_WIDTH))

/*! @brief Set the SP2 field to a new value. */
#define AIPS_WR_PACRN_SP2(base, value) (AIPS_RMW_PACRN(base, AIPS_PACRN_SP2_MASK, AIPS_PACRN_SP2(value)))
#define AIPS_BWR_PACRN_SP2(base, value) (BME_BFI32(&AIPS_PACRN_REG(base), ((uint32_t)(value) << AIPS_PACRN_SP2_SHIFT), AIPS_PACRN_SP2_SHIFT, AIPS_PACRN_SP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRN, field TP1[24] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRN_TP1 field. */
#define AIPS_RD_PACRN_TP1(base) ((AIPS_PACRN_REG(base) & AIPS_PACRN_TP1_MASK) >> AIPS_PACRN_TP1_SHIFT)
#define AIPS_BRD_PACRN_TP1(base) (BME_UBFX32(&AIPS_PACRN_REG(base), AIPS_PACRN_TP1_SHIFT, AIPS_PACRN_TP1_WIDTH))

/*! @brief Set the TP1 field to a new value. */
#define AIPS_WR_PACRN_TP1(base, value) (AIPS_RMW_PACRN(base, AIPS_PACRN_TP1_MASK, AIPS_PACRN_TP1(value)))
#define AIPS_BWR_PACRN_TP1(base, value) (BME_BFI32(&AIPS_PACRN_REG(base), ((uint32_t)(value) << AIPS_PACRN_TP1_SHIFT), AIPS_PACRN_TP1_SHIFT, AIPS_PACRN_TP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRN, field WP1[25] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRN_WP1 field. */
#define AIPS_RD_PACRN_WP1(base) ((AIPS_PACRN_REG(base) & AIPS_PACRN_WP1_MASK) >> AIPS_PACRN_WP1_SHIFT)
#define AIPS_BRD_PACRN_WP1(base) (BME_UBFX32(&AIPS_PACRN_REG(base), AIPS_PACRN_WP1_SHIFT, AIPS_PACRN_WP1_WIDTH))

/*! @brief Set the WP1 field to a new value. */
#define AIPS_WR_PACRN_WP1(base, value) (AIPS_RMW_PACRN(base, AIPS_PACRN_WP1_MASK, AIPS_PACRN_WP1(value)))
#define AIPS_BWR_PACRN_WP1(base, value) (BME_BFI32(&AIPS_PACRN_REG(base), ((uint32_t)(value) << AIPS_PACRN_WP1_SHIFT), AIPS_PACRN_WP1_SHIFT, AIPS_PACRN_WP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRN, field SP1[26] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master must
 * be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRN_SP1 field. */
#define AIPS_RD_PACRN_SP1(base) ((AIPS_PACRN_REG(base) & AIPS_PACRN_SP1_MASK) >> AIPS_PACRN_SP1_SHIFT)
#define AIPS_BRD_PACRN_SP1(base) (BME_UBFX32(&AIPS_PACRN_REG(base), AIPS_PACRN_SP1_SHIFT, AIPS_PACRN_SP1_WIDTH))

/*! @brief Set the SP1 field to a new value. */
#define AIPS_WR_PACRN_SP1(base, value) (AIPS_RMW_PACRN(base, AIPS_PACRN_SP1_MASK, AIPS_PACRN_SP1(value)))
#define AIPS_BWR_PACRN_SP1(base, value) (BME_BFI32(&AIPS_PACRN_REG(base), ((uint32_t)(value) << AIPS_PACRN_SP1_SHIFT), AIPS_PACRN_SP1_SHIFT, AIPS_PACRN_SP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRN, field TP0[28] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRN_TP0 field. */
#define AIPS_RD_PACRN_TP0(base) ((AIPS_PACRN_REG(base) & AIPS_PACRN_TP0_MASK) >> AIPS_PACRN_TP0_SHIFT)
#define AIPS_BRD_PACRN_TP0(base) (BME_UBFX32(&AIPS_PACRN_REG(base), AIPS_PACRN_TP0_SHIFT, AIPS_PACRN_TP0_WIDTH))

/*! @brief Set the TP0 field to a new value. */
#define AIPS_WR_PACRN_TP0(base, value) (AIPS_RMW_PACRN(base, AIPS_PACRN_TP0_MASK, AIPS_PACRN_TP0(value)))
#define AIPS_BWR_PACRN_TP0(base, value) (BME_BFI32(&AIPS_PACRN_REG(base), ((uint32_t)(value) << AIPS_PACRN_TP0_SHIFT), AIPS_PACRN_TP0_SHIFT, AIPS_PACRN_TP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRN, field WP0[29] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRN_WP0 field. */
#define AIPS_RD_PACRN_WP0(base) ((AIPS_PACRN_REG(base) & AIPS_PACRN_WP0_MASK) >> AIPS_PACRN_WP0_SHIFT)
#define AIPS_BRD_PACRN_WP0(base) (BME_UBFX32(&AIPS_PACRN_REG(base), AIPS_PACRN_WP0_SHIFT, AIPS_PACRN_WP0_WIDTH))

/*! @brief Set the WP0 field to a new value. */
#define AIPS_WR_PACRN_WP0(base, value) (AIPS_RMW_PACRN(base, AIPS_PACRN_WP0_MASK, AIPS_PACRN_WP0(value)))
#define AIPS_BWR_PACRN_WP0(base, value) (BME_BFI32(&AIPS_PACRN_REG(base), ((uint32_t)(value) << AIPS_PACRN_WP0_SHIFT), AIPS_PACRN_WP0_SHIFT, AIPS_PACRN_WP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRN, field SP0[30] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRN_SP0 field. */
#define AIPS_RD_PACRN_SP0(base) ((AIPS_PACRN_REG(base) & AIPS_PACRN_SP0_MASK) >> AIPS_PACRN_SP0_SHIFT)
#define AIPS_BRD_PACRN_SP0(base) (BME_UBFX32(&AIPS_PACRN_REG(base), AIPS_PACRN_SP0_SHIFT, AIPS_PACRN_SP0_WIDTH))

/*! @brief Set the SP0 field to a new value. */
#define AIPS_WR_PACRN_SP0(base, value) (AIPS_RMW_PACRN(base, AIPS_PACRN_SP0_MASK, AIPS_PACRN_SP0(value)))
#define AIPS_BWR_PACRN_SP0(base, value) (BME_BFI32(&AIPS_PACRN_REG(base), ((uint32_t)(value) << AIPS_PACRN_SP0_SHIFT), AIPS_PACRN_SP0_SHIFT, AIPS_PACRN_SP0_WIDTH))
/*@}*/

/*******************************************************************************
 * AIPS_PACRO - Peripheral Access Control Register
 ******************************************************************************/

/*!
 * @brief AIPS_PACRO - Peripheral Access Control Register (RW)
 *
 * Reset value: 0x00444000U
 *
 * This section describes PACR registers E-P, which control peripheral slots
 * 32-127. See PACRPeripheral Access Control Register for the description of these
 * registers.
 */
/*!
 * @name Constants and macros for entire AIPS_PACRO register
 */
/*@{*/
#define AIPS_RD_PACRO(base)      (AIPS_PACRO_REG(base))
#define AIPS_WR_PACRO(base, value) (AIPS_PACRO_REG(base) = (value))
#define AIPS_RMW_PACRO(base, mask, value) (AIPS_WR_PACRO(base, (AIPS_RD_PACRO(base) & ~(mask)) | (value)))
#define AIPS_SET_PACRO(base, value) (BME_OR32(&AIPS_PACRO_REG(base), (uint32_t)(value)))
#define AIPS_CLR_PACRO(base, value) (BME_AND32(&AIPS_PACRO_REG(base), (uint32_t)(~(value))))
#define AIPS_TOG_PACRO(base, value) (BME_XOR32(&AIPS_PACRO_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual AIPS_PACRO bitfields
 */

/*!
 * @name Register AIPS_PACRO, field TP7[0] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRO_TP7 field. */
#define AIPS_RD_PACRO_TP7(base) ((AIPS_PACRO_REG(base) & AIPS_PACRO_TP7_MASK) >> AIPS_PACRO_TP7_SHIFT)
#define AIPS_BRD_PACRO_TP7(base) (BME_UBFX32(&AIPS_PACRO_REG(base), AIPS_PACRO_TP7_SHIFT, AIPS_PACRO_TP7_WIDTH))

/*! @brief Set the TP7 field to a new value. */
#define AIPS_WR_PACRO_TP7(base, value) (AIPS_RMW_PACRO(base, AIPS_PACRO_TP7_MASK, AIPS_PACRO_TP7(value)))
#define AIPS_BWR_PACRO_TP7(base, value) (BME_BFI32(&AIPS_PACRO_REG(base), ((uint32_t)(value) << AIPS_PACRO_TP7_SHIFT), AIPS_PACRO_TP7_SHIFT, AIPS_PACRO_TP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRO, field WP7[1] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRO_WP7 field. */
#define AIPS_RD_PACRO_WP7(base) ((AIPS_PACRO_REG(base) & AIPS_PACRO_WP7_MASK) >> AIPS_PACRO_WP7_SHIFT)
#define AIPS_BRD_PACRO_WP7(base) (BME_UBFX32(&AIPS_PACRO_REG(base), AIPS_PACRO_WP7_SHIFT, AIPS_PACRO_WP7_WIDTH))

/*! @brief Set the WP7 field to a new value. */
#define AIPS_WR_PACRO_WP7(base, value) (AIPS_RMW_PACRO(base, AIPS_PACRO_WP7_MASK, AIPS_PACRO_WP7(value)))
#define AIPS_BWR_PACRO_WP7(base, value) (BME_BFI32(&AIPS_PACRO_REG(base), ((uint32_t)(value) << AIPS_PACRO_WP7_SHIFT), AIPS_PACRO_WP7_SHIFT, AIPS_PACRO_WP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRO, field SP7[2] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRO_SP7 field. */
#define AIPS_RD_PACRO_SP7(base) ((AIPS_PACRO_REG(base) & AIPS_PACRO_SP7_MASK) >> AIPS_PACRO_SP7_SHIFT)
#define AIPS_BRD_PACRO_SP7(base) (BME_UBFX32(&AIPS_PACRO_REG(base), AIPS_PACRO_SP7_SHIFT, AIPS_PACRO_SP7_WIDTH))

/*! @brief Set the SP7 field to a new value. */
#define AIPS_WR_PACRO_SP7(base, value) (AIPS_RMW_PACRO(base, AIPS_PACRO_SP7_MASK, AIPS_PACRO_SP7(value)))
#define AIPS_BWR_PACRO_SP7(base, value) (BME_BFI32(&AIPS_PACRO_REG(base), ((uint32_t)(value) << AIPS_PACRO_SP7_SHIFT), AIPS_PACRO_SP7_SHIFT, AIPS_PACRO_SP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRO, field TP6[4] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRO_TP6 field. */
#define AIPS_RD_PACRO_TP6(base) ((AIPS_PACRO_REG(base) & AIPS_PACRO_TP6_MASK) >> AIPS_PACRO_TP6_SHIFT)
#define AIPS_BRD_PACRO_TP6(base) (BME_UBFX32(&AIPS_PACRO_REG(base), AIPS_PACRO_TP6_SHIFT, AIPS_PACRO_TP6_WIDTH))

/*! @brief Set the TP6 field to a new value. */
#define AIPS_WR_PACRO_TP6(base, value) (AIPS_RMW_PACRO(base, AIPS_PACRO_TP6_MASK, AIPS_PACRO_TP6(value)))
#define AIPS_BWR_PACRO_TP6(base, value) (BME_BFI32(&AIPS_PACRO_REG(base), ((uint32_t)(value) << AIPS_PACRO_TP6_SHIFT), AIPS_PACRO_TP6_SHIFT, AIPS_PACRO_TP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRO, field WP6[5] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRO_WP6 field. */
#define AIPS_RD_PACRO_WP6(base) ((AIPS_PACRO_REG(base) & AIPS_PACRO_WP6_MASK) >> AIPS_PACRO_WP6_SHIFT)
#define AIPS_BRD_PACRO_WP6(base) (BME_UBFX32(&AIPS_PACRO_REG(base), AIPS_PACRO_WP6_SHIFT, AIPS_PACRO_WP6_WIDTH))

/*! @brief Set the WP6 field to a new value. */
#define AIPS_WR_PACRO_WP6(base, value) (AIPS_RMW_PACRO(base, AIPS_PACRO_WP6_MASK, AIPS_PACRO_WP6(value)))
#define AIPS_BWR_PACRO_WP6(base, value) (BME_BFI32(&AIPS_PACRO_REG(base), ((uint32_t)(value) << AIPS_PACRO_WP6_SHIFT), AIPS_PACRO_WP6_SHIFT, AIPS_PACRO_WP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRO, field SP6[6] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRO_SP6 field. */
#define AIPS_RD_PACRO_SP6(base) ((AIPS_PACRO_REG(base) & AIPS_PACRO_SP6_MASK) >> AIPS_PACRO_SP6_SHIFT)
#define AIPS_BRD_PACRO_SP6(base) (BME_UBFX32(&AIPS_PACRO_REG(base), AIPS_PACRO_SP6_SHIFT, AIPS_PACRO_SP6_WIDTH))

/*! @brief Set the SP6 field to a new value. */
#define AIPS_WR_PACRO_SP6(base, value) (AIPS_RMW_PACRO(base, AIPS_PACRO_SP6_MASK, AIPS_PACRO_SP6(value)))
#define AIPS_BWR_PACRO_SP6(base, value) (BME_BFI32(&AIPS_PACRO_REG(base), ((uint32_t)(value) << AIPS_PACRO_SP6_SHIFT), AIPS_PACRO_SP6_SHIFT, AIPS_PACRO_SP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRO, field TP5[8] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRO_TP5 field. */
#define AIPS_RD_PACRO_TP5(base) ((AIPS_PACRO_REG(base) & AIPS_PACRO_TP5_MASK) >> AIPS_PACRO_TP5_SHIFT)
#define AIPS_BRD_PACRO_TP5(base) (BME_UBFX32(&AIPS_PACRO_REG(base), AIPS_PACRO_TP5_SHIFT, AIPS_PACRO_TP5_WIDTH))

/*! @brief Set the TP5 field to a new value. */
#define AIPS_WR_PACRO_TP5(base, value) (AIPS_RMW_PACRO(base, AIPS_PACRO_TP5_MASK, AIPS_PACRO_TP5(value)))
#define AIPS_BWR_PACRO_TP5(base, value) (BME_BFI32(&AIPS_PACRO_REG(base), ((uint32_t)(value) << AIPS_PACRO_TP5_SHIFT), AIPS_PACRO_TP5_SHIFT, AIPS_PACRO_TP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRO, field WP5[9] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRO_WP5 field. */
#define AIPS_RD_PACRO_WP5(base) ((AIPS_PACRO_REG(base) & AIPS_PACRO_WP5_MASK) >> AIPS_PACRO_WP5_SHIFT)
#define AIPS_BRD_PACRO_WP5(base) (BME_UBFX32(&AIPS_PACRO_REG(base), AIPS_PACRO_WP5_SHIFT, AIPS_PACRO_WP5_WIDTH))

/*! @brief Set the WP5 field to a new value. */
#define AIPS_WR_PACRO_WP5(base, value) (AIPS_RMW_PACRO(base, AIPS_PACRO_WP5_MASK, AIPS_PACRO_WP5(value)))
#define AIPS_BWR_PACRO_WP5(base, value) (BME_BFI32(&AIPS_PACRO_REG(base), ((uint32_t)(value) << AIPS_PACRO_WP5_SHIFT), AIPS_PACRO_WP5_SHIFT, AIPS_PACRO_WP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRO, field SP5[10] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRO_SP5 field. */
#define AIPS_RD_PACRO_SP5(base) ((AIPS_PACRO_REG(base) & AIPS_PACRO_SP5_MASK) >> AIPS_PACRO_SP5_SHIFT)
#define AIPS_BRD_PACRO_SP5(base) (BME_UBFX32(&AIPS_PACRO_REG(base), AIPS_PACRO_SP5_SHIFT, AIPS_PACRO_SP5_WIDTH))

/*! @brief Set the SP5 field to a new value. */
#define AIPS_WR_PACRO_SP5(base, value) (AIPS_RMW_PACRO(base, AIPS_PACRO_SP5_MASK, AIPS_PACRO_SP5(value)))
#define AIPS_BWR_PACRO_SP5(base, value) (BME_BFI32(&AIPS_PACRO_REG(base), ((uint32_t)(value) << AIPS_PACRO_SP5_SHIFT), AIPS_PACRO_SP5_SHIFT, AIPS_PACRO_SP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRO, field TP4[12] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRO_TP4 field. */
#define AIPS_RD_PACRO_TP4(base) ((AIPS_PACRO_REG(base) & AIPS_PACRO_TP4_MASK) >> AIPS_PACRO_TP4_SHIFT)
#define AIPS_BRD_PACRO_TP4(base) (BME_UBFX32(&AIPS_PACRO_REG(base), AIPS_PACRO_TP4_SHIFT, AIPS_PACRO_TP4_WIDTH))

/*! @brief Set the TP4 field to a new value. */
#define AIPS_WR_PACRO_TP4(base, value) (AIPS_RMW_PACRO(base, AIPS_PACRO_TP4_MASK, AIPS_PACRO_TP4(value)))
#define AIPS_BWR_PACRO_TP4(base, value) (BME_BFI32(&AIPS_PACRO_REG(base), ((uint32_t)(value) << AIPS_PACRO_TP4_SHIFT), AIPS_PACRO_TP4_SHIFT, AIPS_PACRO_TP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRO, field WP4[13] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRO_WP4 field. */
#define AIPS_RD_PACRO_WP4(base) ((AIPS_PACRO_REG(base) & AIPS_PACRO_WP4_MASK) >> AIPS_PACRO_WP4_SHIFT)
#define AIPS_BRD_PACRO_WP4(base) (BME_UBFX32(&AIPS_PACRO_REG(base), AIPS_PACRO_WP4_SHIFT, AIPS_PACRO_WP4_WIDTH))

/*! @brief Set the WP4 field to a new value. */
#define AIPS_WR_PACRO_WP4(base, value) (AIPS_RMW_PACRO(base, AIPS_PACRO_WP4_MASK, AIPS_PACRO_WP4(value)))
#define AIPS_BWR_PACRO_WP4(base, value) (BME_BFI32(&AIPS_PACRO_REG(base), ((uint32_t)(value) << AIPS_PACRO_WP4_SHIFT), AIPS_PACRO_WP4_SHIFT, AIPS_PACRO_WP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRO, field SP4[14] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRO_SP4 field. */
#define AIPS_RD_PACRO_SP4(base) ((AIPS_PACRO_REG(base) & AIPS_PACRO_SP4_MASK) >> AIPS_PACRO_SP4_SHIFT)
#define AIPS_BRD_PACRO_SP4(base) (BME_UBFX32(&AIPS_PACRO_REG(base), AIPS_PACRO_SP4_SHIFT, AIPS_PACRO_SP4_WIDTH))

/*! @brief Set the SP4 field to a new value. */
#define AIPS_WR_PACRO_SP4(base, value) (AIPS_RMW_PACRO(base, AIPS_PACRO_SP4_MASK, AIPS_PACRO_SP4(value)))
#define AIPS_BWR_PACRO_SP4(base, value) (BME_BFI32(&AIPS_PACRO_REG(base), ((uint32_t)(value) << AIPS_PACRO_SP4_SHIFT), AIPS_PACRO_SP4_SHIFT, AIPS_PACRO_SP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRO, field TP3[16] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRO_TP3 field. */
#define AIPS_RD_PACRO_TP3(base) ((AIPS_PACRO_REG(base) & AIPS_PACRO_TP3_MASK) >> AIPS_PACRO_TP3_SHIFT)
#define AIPS_BRD_PACRO_TP3(base) (BME_UBFX32(&AIPS_PACRO_REG(base), AIPS_PACRO_TP3_SHIFT, AIPS_PACRO_TP3_WIDTH))

/*! @brief Set the TP3 field to a new value. */
#define AIPS_WR_PACRO_TP3(base, value) (AIPS_RMW_PACRO(base, AIPS_PACRO_TP3_MASK, AIPS_PACRO_TP3(value)))
#define AIPS_BWR_PACRO_TP3(base, value) (BME_BFI32(&AIPS_PACRO_REG(base), ((uint32_t)(value) << AIPS_PACRO_TP3_SHIFT), AIPS_PACRO_TP3_SHIFT, AIPS_PACRO_TP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRO, field WP3[17] (RW)
 *
 * Determines whether the peripheral allows write accesss. When this bit is set
 * and a write access is attempted, access terminates with an error response and
 * no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRO_WP3 field. */
#define AIPS_RD_PACRO_WP3(base) ((AIPS_PACRO_REG(base) & AIPS_PACRO_WP3_MASK) >> AIPS_PACRO_WP3_SHIFT)
#define AIPS_BRD_PACRO_WP3(base) (BME_UBFX32(&AIPS_PACRO_REG(base), AIPS_PACRO_WP3_SHIFT, AIPS_PACRO_WP3_WIDTH))

/*! @brief Set the WP3 field to a new value. */
#define AIPS_WR_PACRO_WP3(base, value) (AIPS_RMW_PACRO(base, AIPS_PACRO_WP3_MASK, AIPS_PACRO_WP3(value)))
#define AIPS_BWR_PACRO_WP3(base, value) (BME_BFI32(&AIPS_PACRO_REG(base), ((uint32_t)(value) << AIPS_PACRO_WP3_SHIFT), AIPS_PACRO_WP3_SHIFT, AIPS_PACRO_WP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRO, field SP3[18] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRO_SP3 field. */
#define AIPS_RD_PACRO_SP3(base) ((AIPS_PACRO_REG(base) & AIPS_PACRO_SP3_MASK) >> AIPS_PACRO_SP3_SHIFT)
#define AIPS_BRD_PACRO_SP3(base) (BME_UBFX32(&AIPS_PACRO_REG(base), AIPS_PACRO_SP3_SHIFT, AIPS_PACRO_SP3_WIDTH))

/*! @brief Set the SP3 field to a new value. */
#define AIPS_WR_PACRO_SP3(base, value) (AIPS_RMW_PACRO(base, AIPS_PACRO_SP3_MASK, AIPS_PACRO_SP3(value)))
#define AIPS_BWR_PACRO_SP3(base, value) (BME_BFI32(&AIPS_PACRO_REG(base), ((uint32_t)(value) << AIPS_PACRO_SP3_SHIFT), AIPS_PACRO_SP3_SHIFT, AIPS_PACRO_SP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRO, field TP2[20] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRO_TP2 field. */
#define AIPS_RD_PACRO_TP2(base) ((AIPS_PACRO_REG(base) & AIPS_PACRO_TP2_MASK) >> AIPS_PACRO_TP2_SHIFT)
#define AIPS_BRD_PACRO_TP2(base) (BME_UBFX32(&AIPS_PACRO_REG(base), AIPS_PACRO_TP2_SHIFT, AIPS_PACRO_TP2_WIDTH))

/*! @brief Set the TP2 field to a new value. */
#define AIPS_WR_PACRO_TP2(base, value) (AIPS_RMW_PACRO(base, AIPS_PACRO_TP2_MASK, AIPS_PACRO_TP2(value)))
#define AIPS_BWR_PACRO_TP2(base, value) (BME_BFI32(&AIPS_PACRO_REG(base), ((uint32_t)(value) << AIPS_PACRO_TP2_SHIFT), AIPS_PACRO_TP2_SHIFT, AIPS_PACRO_TP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRO, field WP2[21] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRO_WP2 field. */
#define AIPS_RD_PACRO_WP2(base) ((AIPS_PACRO_REG(base) & AIPS_PACRO_WP2_MASK) >> AIPS_PACRO_WP2_SHIFT)
#define AIPS_BRD_PACRO_WP2(base) (BME_UBFX32(&AIPS_PACRO_REG(base), AIPS_PACRO_WP2_SHIFT, AIPS_PACRO_WP2_WIDTH))

/*! @brief Set the WP2 field to a new value. */
#define AIPS_WR_PACRO_WP2(base, value) (AIPS_RMW_PACRO(base, AIPS_PACRO_WP2_MASK, AIPS_PACRO_WP2(value)))
#define AIPS_BWR_PACRO_WP2(base, value) (BME_BFI32(&AIPS_PACRO_REG(base), ((uint32_t)(value) << AIPS_PACRO_WP2_SHIFT), AIPS_PACRO_WP2_SHIFT, AIPS_PACRO_WP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRO, field SP2[22] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRO_SP2 field. */
#define AIPS_RD_PACRO_SP2(base) ((AIPS_PACRO_REG(base) & AIPS_PACRO_SP2_MASK) >> AIPS_PACRO_SP2_SHIFT)
#define AIPS_BRD_PACRO_SP2(base) (BME_UBFX32(&AIPS_PACRO_REG(base), AIPS_PACRO_SP2_SHIFT, AIPS_PACRO_SP2_WIDTH))

/*! @brief Set the SP2 field to a new value. */
#define AIPS_WR_PACRO_SP2(base, value) (AIPS_RMW_PACRO(base, AIPS_PACRO_SP2_MASK, AIPS_PACRO_SP2(value)))
#define AIPS_BWR_PACRO_SP2(base, value) (BME_BFI32(&AIPS_PACRO_REG(base), ((uint32_t)(value) << AIPS_PACRO_SP2_SHIFT), AIPS_PACRO_SP2_SHIFT, AIPS_PACRO_SP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRO, field TP1[24] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRO_TP1 field. */
#define AIPS_RD_PACRO_TP1(base) ((AIPS_PACRO_REG(base) & AIPS_PACRO_TP1_MASK) >> AIPS_PACRO_TP1_SHIFT)
#define AIPS_BRD_PACRO_TP1(base) (BME_UBFX32(&AIPS_PACRO_REG(base), AIPS_PACRO_TP1_SHIFT, AIPS_PACRO_TP1_WIDTH))

/*! @brief Set the TP1 field to a new value. */
#define AIPS_WR_PACRO_TP1(base, value) (AIPS_RMW_PACRO(base, AIPS_PACRO_TP1_MASK, AIPS_PACRO_TP1(value)))
#define AIPS_BWR_PACRO_TP1(base, value) (BME_BFI32(&AIPS_PACRO_REG(base), ((uint32_t)(value) << AIPS_PACRO_TP1_SHIFT), AIPS_PACRO_TP1_SHIFT, AIPS_PACRO_TP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRO, field WP1[25] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRO_WP1 field. */
#define AIPS_RD_PACRO_WP1(base) ((AIPS_PACRO_REG(base) & AIPS_PACRO_WP1_MASK) >> AIPS_PACRO_WP1_SHIFT)
#define AIPS_BRD_PACRO_WP1(base) (BME_UBFX32(&AIPS_PACRO_REG(base), AIPS_PACRO_WP1_SHIFT, AIPS_PACRO_WP1_WIDTH))

/*! @brief Set the WP1 field to a new value. */
#define AIPS_WR_PACRO_WP1(base, value) (AIPS_RMW_PACRO(base, AIPS_PACRO_WP1_MASK, AIPS_PACRO_WP1(value)))
#define AIPS_BWR_PACRO_WP1(base, value) (BME_BFI32(&AIPS_PACRO_REG(base), ((uint32_t)(value) << AIPS_PACRO_WP1_SHIFT), AIPS_PACRO_WP1_SHIFT, AIPS_PACRO_WP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRO, field SP1[26] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master must
 * be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRO_SP1 field. */
#define AIPS_RD_PACRO_SP1(base) ((AIPS_PACRO_REG(base) & AIPS_PACRO_SP1_MASK) >> AIPS_PACRO_SP1_SHIFT)
#define AIPS_BRD_PACRO_SP1(base) (BME_UBFX32(&AIPS_PACRO_REG(base), AIPS_PACRO_SP1_SHIFT, AIPS_PACRO_SP1_WIDTH))

/*! @brief Set the SP1 field to a new value. */
#define AIPS_WR_PACRO_SP1(base, value) (AIPS_RMW_PACRO(base, AIPS_PACRO_SP1_MASK, AIPS_PACRO_SP1(value)))
#define AIPS_BWR_PACRO_SP1(base, value) (BME_BFI32(&AIPS_PACRO_REG(base), ((uint32_t)(value) << AIPS_PACRO_SP1_SHIFT), AIPS_PACRO_SP1_SHIFT, AIPS_PACRO_SP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRO, field TP0[28] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRO_TP0 field. */
#define AIPS_RD_PACRO_TP0(base) ((AIPS_PACRO_REG(base) & AIPS_PACRO_TP0_MASK) >> AIPS_PACRO_TP0_SHIFT)
#define AIPS_BRD_PACRO_TP0(base) (BME_UBFX32(&AIPS_PACRO_REG(base), AIPS_PACRO_TP0_SHIFT, AIPS_PACRO_TP0_WIDTH))

/*! @brief Set the TP0 field to a new value. */
#define AIPS_WR_PACRO_TP0(base, value) (AIPS_RMW_PACRO(base, AIPS_PACRO_TP0_MASK, AIPS_PACRO_TP0(value)))
#define AIPS_BWR_PACRO_TP0(base, value) (BME_BFI32(&AIPS_PACRO_REG(base), ((uint32_t)(value) << AIPS_PACRO_TP0_SHIFT), AIPS_PACRO_TP0_SHIFT, AIPS_PACRO_TP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRO, field WP0[29] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRO_WP0 field. */
#define AIPS_RD_PACRO_WP0(base) ((AIPS_PACRO_REG(base) & AIPS_PACRO_WP0_MASK) >> AIPS_PACRO_WP0_SHIFT)
#define AIPS_BRD_PACRO_WP0(base) (BME_UBFX32(&AIPS_PACRO_REG(base), AIPS_PACRO_WP0_SHIFT, AIPS_PACRO_WP0_WIDTH))

/*! @brief Set the WP0 field to a new value. */
#define AIPS_WR_PACRO_WP0(base, value) (AIPS_RMW_PACRO(base, AIPS_PACRO_WP0_MASK, AIPS_PACRO_WP0(value)))
#define AIPS_BWR_PACRO_WP0(base, value) (BME_BFI32(&AIPS_PACRO_REG(base), ((uint32_t)(value) << AIPS_PACRO_WP0_SHIFT), AIPS_PACRO_WP0_SHIFT, AIPS_PACRO_WP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRO, field SP0[30] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRO_SP0 field. */
#define AIPS_RD_PACRO_SP0(base) ((AIPS_PACRO_REG(base) & AIPS_PACRO_SP0_MASK) >> AIPS_PACRO_SP0_SHIFT)
#define AIPS_BRD_PACRO_SP0(base) (BME_UBFX32(&AIPS_PACRO_REG(base), AIPS_PACRO_SP0_SHIFT, AIPS_PACRO_SP0_WIDTH))

/*! @brief Set the SP0 field to a new value. */
#define AIPS_WR_PACRO_SP0(base, value) (AIPS_RMW_PACRO(base, AIPS_PACRO_SP0_MASK, AIPS_PACRO_SP0(value)))
#define AIPS_BWR_PACRO_SP0(base, value) (BME_BFI32(&AIPS_PACRO_REG(base), ((uint32_t)(value) << AIPS_PACRO_SP0_SHIFT), AIPS_PACRO_SP0_SHIFT, AIPS_PACRO_SP0_WIDTH))
/*@}*/

/*******************************************************************************
 * AIPS_PACRP - Peripheral Access Control Register
 ******************************************************************************/

/*!
 * @brief AIPS_PACRP - Peripheral Access Control Register (RW)
 *
 * Reset value: 0x44444444U
 *
 * This section describes PACR registers E-P, which control peripheral slots
 * 32-127. See PACRPeripheral Access Control Register for the description of these
 * registers.
 */
/*!
 * @name Constants and macros for entire AIPS_PACRP register
 */
/*@{*/
#define AIPS_RD_PACRP(base)      (AIPS_PACRP_REG(base))
#define AIPS_WR_PACRP(base, value) (AIPS_PACRP_REG(base) = (value))
#define AIPS_RMW_PACRP(base, mask, value) (AIPS_WR_PACRP(base, (AIPS_RD_PACRP(base) & ~(mask)) | (value)))
#define AIPS_SET_PACRP(base, value) (BME_OR32(&AIPS_PACRP_REG(base), (uint32_t)(value)))
#define AIPS_CLR_PACRP(base, value) (BME_AND32(&AIPS_PACRP_REG(base), (uint32_t)(~(value))))
#define AIPS_TOG_PACRP(base, value) (BME_XOR32(&AIPS_PACRP_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual AIPS_PACRP bitfields
 */

/*!
 * @name Register AIPS_PACRP, field TP7[0] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRP_TP7 field. */
#define AIPS_RD_PACRP_TP7(base) ((AIPS_PACRP_REG(base) & AIPS_PACRP_TP7_MASK) >> AIPS_PACRP_TP7_SHIFT)
#define AIPS_BRD_PACRP_TP7(base) (BME_UBFX32(&AIPS_PACRP_REG(base), AIPS_PACRP_TP7_SHIFT, AIPS_PACRP_TP7_WIDTH))

/*! @brief Set the TP7 field to a new value. */
#define AIPS_WR_PACRP_TP7(base, value) (AIPS_RMW_PACRP(base, AIPS_PACRP_TP7_MASK, AIPS_PACRP_TP7(value)))
#define AIPS_BWR_PACRP_TP7(base, value) (BME_BFI32(&AIPS_PACRP_REG(base), ((uint32_t)(value) << AIPS_PACRP_TP7_SHIFT), AIPS_PACRP_TP7_SHIFT, AIPS_PACRP_TP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRP, field WP7[1] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRP_WP7 field. */
#define AIPS_RD_PACRP_WP7(base) ((AIPS_PACRP_REG(base) & AIPS_PACRP_WP7_MASK) >> AIPS_PACRP_WP7_SHIFT)
#define AIPS_BRD_PACRP_WP7(base) (BME_UBFX32(&AIPS_PACRP_REG(base), AIPS_PACRP_WP7_SHIFT, AIPS_PACRP_WP7_WIDTH))

/*! @brief Set the WP7 field to a new value. */
#define AIPS_WR_PACRP_WP7(base, value) (AIPS_RMW_PACRP(base, AIPS_PACRP_WP7_MASK, AIPS_PACRP_WP7(value)))
#define AIPS_BWR_PACRP_WP7(base, value) (BME_BFI32(&AIPS_PACRP_REG(base), ((uint32_t)(value) << AIPS_PACRP_WP7_SHIFT), AIPS_PACRP_WP7_SHIFT, AIPS_PACRP_WP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRP, field SP7[2] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRP_SP7 field. */
#define AIPS_RD_PACRP_SP7(base) ((AIPS_PACRP_REG(base) & AIPS_PACRP_SP7_MASK) >> AIPS_PACRP_SP7_SHIFT)
#define AIPS_BRD_PACRP_SP7(base) (BME_UBFX32(&AIPS_PACRP_REG(base), AIPS_PACRP_SP7_SHIFT, AIPS_PACRP_SP7_WIDTH))

/*! @brief Set the SP7 field to a new value. */
#define AIPS_WR_PACRP_SP7(base, value) (AIPS_RMW_PACRP(base, AIPS_PACRP_SP7_MASK, AIPS_PACRP_SP7(value)))
#define AIPS_BWR_PACRP_SP7(base, value) (BME_BFI32(&AIPS_PACRP_REG(base), ((uint32_t)(value) << AIPS_PACRP_SP7_SHIFT), AIPS_PACRP_SP7_SHIFT, AIPS_PACRP_SP7_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRP, field TP6[4] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRP_TP6 field. */
#define AIPS_RD_PACRP_TP6(base) ((AIPS_PACRP_REG(base) & AIPS_PACRP_TP6_MASK) >> AIPS_PACRP_TP6_SHIFT)
#define AIPS_BRD_PACRP_TP6(base) (BME_UBFX32(&AIPS_PACRP_REG(base), AIPS_PACRP_TP6_SHIFT, AIPS_PACRP_TP6_WIDTH))

/*! @brief Set the TP6 field to a new value. */
#define AIPS_WR_PACRP_TP6(base, value) (AIPS_RMW_PACRP(base, AIPS_PACRP_TP6_MASK, AIPS_PACRP_TP6(value)))
#define AIPS_BWR_PACRP_TP6(base, value) (BME_BFI32(&AIPS_PACRP_REG(base), ((uint32_t)(value) << AIPS_PACRP_TP6_SHIFT), AIPS_PACRP_TP6_SHIFT, AIPS_PACRP_TP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRP, field WP6[5] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRP_WP6 field. */
#define AIPS_RD_PACRP_WP6(base) ((AIPS_PACRP_REG(base) & AIPS_PACRP_WP6_MASK) >> AIPS_PACRP_WP6_SHIFT)
#define AIPS_BRD_PACRP_WP6(base) (BME_UBFX32(&AIPS_PACRP_REG(base), AIPS_PACRP_WP6_SHIFT, AIPS_PACRP_WP6_WIDTH))

/*! @brief Set the WP6 field to a new value. */
#define AIPS_WR_PACRP_WP6(base, value) (AIPS_RMW_PACRP(base, AIPS_PACRP_WP6_MASK, AIPS_PACRP_WP6(value)))
#define AIPS_BWR_PACRP_WP6(base, value) (BME_BFI32(&AIPS_PACRP_REG(base), ((uint32_t)(value) << AIPS_PACRP_WP6_SHIFT), AIPS_PACRP_WP6_SHIFT, AIPS_PACRP_WP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRP, field SP6[6] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRP_SP6 field. */
#define AIPS_RD_PACRP_SP6(base) ((AIPS_PACRP_REG(base) & AIPS_PACRP_SP6_MASK) >> AIPS_PACRP_SP6_SHIFT)
#define AIPS_BRD_PACRP_SP6(base) (BME_UBFX32(&AIPS_PACRP_REG(base), AIPS_PACRP_SP6_SHIFT, AIPS_PACRP_SP6_WIDTH))

/*! @brief Set the SP6 field to a new value. */
#define AIPS_WR_PACRP_SP6(base, value) (AIPS_RMW_PACRP(base, AIPS_PACRP_SP6_MASK, AIPS_PACRP_SP6(value)))
#define AIPS_BWR_PACRP_SP6(base, value) (BME_BFI32(&AIPS_PACRP_REG(base), ((uint32_t)(value) << AIPS_PACRP_SP6_SHIFT), AIPS_PACRP_SP6_SHIFT, AIPS_PACRP_SP6_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRP, field TP5[8] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRP_TP5 field. */
#define AIPS_RD_PACRP_TP5(base) ((AIPS_PACRP_REG(base) & AIPS_PACRP_TP5_MASK) >> AIPS_PACRP_TP5_SHIFT)
#define AIPS_BRD_PACRP_TP5(base) (BME_UBFX32(&AIPS_PACRP_REG(base), AIPS_PACRP_TP5_SHIFT, AIPS_PACRP_TP5_WIDTH))

/*! @brief Set the TP5 field to a new value. */
#define AIPS_WR_PACRP_TP5(base, value) (AIPS_RMW_PACRP(base, AIPS_PACRP_TP5_MASK, AIPS_PACRP_TP5(value)))
#define AIPS_BWR_PACRP_TP5(base, value) (BME_BFI32(&AIPS_PACRP_REG(base), ((uint32_t)(value) << AIPS_PACRP_TP5_SHIFT), AIPS_PACRP_TP5_SHIFT, AIPS_PACRP_TP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRP, field WP5[9] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRP_WP5 field. */
#define AIPS_RD_PACRP_WP5(base) ((AIPS_PACRP_REG(base) & AIPS_PACRP_WP5_MASK) >> AIPS_PACRP_WP5_SHIFT)
#define AIPS_BRD_PACRP_WP5(base) (BME_UBFX32(&AIPS_PACRP_REG(base), AIPS_PACRP_WP5_SHIFT, AIPS_PACRP_WP5_WIDTH))

/*! @brief Set the WP5 field to a new value. */
#define AIPS_WR_PACRP_WP5(base, value) (AIPS_RMW_PACRP(base, AIPS_PACRP_WP5_MASK, AIPS_PACRP_WP5(value)))
#define AIPS_BWR_PACRP_WP5(base, value) (BME_BFI32(&AIPS_PACRP_REG(base), ((uint32_t)(value) << AIPS_PACRP_WP5_SHIFT), AIPS_PACRP_WP5_SHIFT, AIPS_PACRP_WP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRP, field SP5[10] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRP_SP5 field. */
#define AIPS_RD_PACRP_SP5(base) ((AIPS_PACRP_REG(base) & AIPS_PACRP_SP5_MASK) >> AIPS_PACRP_SP5_SHIFT)
#define AIPS_BRD_PACRP_SP5(base) (BME_UBFX32(&AIPS_PACRP_REG(base), AIPS_PACRP_SP5_SHIFT, AIPS_PACRP_SP5_WIDTH))

/*! @brief Set the SP5 field to a new value. */
#define AIPS_WR_PACRP_SP5(base, value) (AIPS_RMW_PACRP(base, AIPS_PACRP_SP5_MASK, AIPS_PACRP_SP5(value)))
#define AIPS_BWR_PACRP_SP5(base, value) (BME_BFI32(&AIPS_PACRP_REG(base), ((uint32_t)(value) << AIPS_PACRP_SP5_SHIFT), AIPS_PACRP_SP5_SHIFT, AIPS_PACRP_SP5_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRP, field TP4[12] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRP_TP4 field. */
#define AIPS_RD_PACRP_TP4(base) ((AIPS_PACRP_REG(base) & AIPS_PACRP_TP4_MASK) >> AIPS_PACRP_TP4_SHIFT)
#define AIPS_BRD_PACRP_TP4(base) (BME_UBFX32(&AIPS_PACRP_REG(base), AIPS_PACRP_TP4_SHIFT, AIPS_PACRP_TP4_WIDTH))

/*! @brief Set the TP4 field to a new value. */
#define AIPS_WR_PACRP_TP4(base, value) (AIPS_RMW_PACRP(base, AIPS_PACRP_TP4_MASK, AIPS_PACRP_TP4(value)))
#define AIPS_BWR_PACRP_TP4(base, value) (BME_BFI32(&AIPS_PACRP_REG(base), ((uint32_t)(value) << AIPS_PACRP_TP4_SHIFT), AIPS_PACRP_TP4_SHIFT, AIPS_PACRP_TP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRP, field WP4[13] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRP_WP4 field. */
#define AIPS_RD_PACRP_WP4(base) ((AIPS_PACRP_REG(base) & AIPS_PACRP_WP4_MASK) >> AIPS_PACRP_WP4_SHIFT)
#define AIPS_BRD_PACRP_WP4(base) (BME_UBFX32(&AIPS_PACRP_REG(base), AIPS_PACRP_WP4_SHIFT, AIPS_PACRP_WP4_WIDTH))

/*! @brief Set the WP4 field to a new value. */
#define AIPS_WR_PACRP_WP4(base, value) (AIPS_RMW_PACRP(base, AIPS_PACRP_WP4_MASK, AIPS_PACRP_WP4(value)))
#define AIPS_BWR_PACRP_WP4(base, value) (BME_BFI32(&AIPS_PACRP_REG(base), ((uint32_t)(value) << AIPS_PACRP_WP4_SHIFT), AIPS_PACRP_WP4_SHIFT, AIPS_PACRP_WP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRP, field SP4[14] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRP_SP4 field. */
#define AIPS_RD_PACRP_SP4(base) ((AIPS_PACRP_REG(base) & AIPS_PACRP_SP4_MASK) >> AIPS_PACRP_SP4_SHIFT)
#define AIPS_BRD_PACRP_SP4(base) (BME_UBFX32(&AIPS_PACRP_REG(base), AIPS_PACRP_SP4_SHIFT, AIPS_PACRP_SP4_WIDTH))

/*! @brief Set the SP4 field to a new value. */
#define AIPS_WR_PACRP_SP4(base, value) (AIPS_RMW_PACRP(base, AIPS_PACRP_SP4_MASK, AIPS_PACRP_SP4(value)))
#define AIPS_BWR_PACRP_SP4(base, value) (BME_BFI32(&AIPS_PACRP_REG(base), ((uint32_t)(value) << AIPS_PACRP_SP4_SHIFT), AIPS_PACRP_SP4_SHIFT, AIPS_PACRP_SP4_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRP, field TP3[16] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRP_TP3 field. */
#define AIPS_RD_PACRP_TP3(base) ((AIPS_PACRP_REG(base) & AIPS_PACRP_TP3_MASK) >> AIPS_PACRP_TP3_SHIFT)
#define AIPS_BRD_PACRP_TP3(base) (BME_UBFX32(&AIPS_PACRP_REG(base), AIPS_PACRP_TP3_SHIFT, AIPS_PACRP_TP3_WIDTH))

/*! @brief Set the TP3 field to a new value. */
#define AIPS_WR_PACRP_TP3(base, value) (AIPS_RMW_PACRP(base, AIPS_PACRP_TP3_MASK, AIPS_PACRP_TP3(value)))
#define AIPS_BWR_PACRP_TP3(base, value) (BME_BFI32(&AIPS_PACRP_REG(base), ((uint32_t)(value) << AIPS_PACRP_TP3_SHIFT), AIPS_PACRP_TP3_SHIFT, AIPS_PACRP_TP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRP, field WP3[17] (RW)
 *
 * Determines whether the peripheral allows write accesss. When this bit is set
 * and a write access is attempted, access terminates with an error response and
 * no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRP_WP3 field. */
#define AIPS_RD_PACRP_WP3(base) ((AIPS_PACRP_REG(base) & AIPS_PACRP_WP3_MASK) >> AIPS_PACRP_WP3_SHIFT)
#define AIPS_BRD_PACRP_WP3(base) (BME_UBFX32(&AIPS_PACRP_REG(base), AIPS_PACRP_WP3_SHIFT, AIPS_PACRP_WP3_WIDTH))

/*! @brief Set the WP3 field to a new value. */
#define AIPS_WR_PACRP_WP3(base, value) (AIPS_RMW_PACRP(base, AIPS_PACRP_WP3_MASK, AIPS_PACRP_WP3(value)))
#define AIPS_BWR_PACRP_WP3(base, value) (BME_BFI32(&AIPS_PACRP_REG(base), ((uint32_t)(value) << AIPS_PACRP_WP3_SHIFT), AIPS_PACRP_WP3_SHIFT, AIPS_PACRP_WP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRP, field SP3[18] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRP_SP3 field. */
#define AIPS_RD_PACRP_SP3(base) ((AIPS_PACRP_REG(base) & AIPS_PACRP_SP3_MASK) >> AIPS_PACRP_SP3_SHIFT)
#define AIPS_BRD_PACRP_SP3(base) (BME_UBFX32(&AIPS_PACRP_REG(base), AIPS_PACRP_SP3_SHIFT, AIPS_PACRP_SP3_WIDTH))

/*! @brief Set the SP3 field to a new value. */
#define AIPS_WR_PACRP_SP3(base, value) (AIPS_RMW_PACRP(base, AIPS_PACRP_SP3_MASK, AIPS_PACRP_SP3(value)))
#define AIPS_BWR_PACRP_SP3(base, value) (BME_BFI32(&AIPS_PACRP_REG(base), ((uint32_t)(value) << AIPS_PACRP_SP3_SHIFT), AIPS_PACRP_SP3_SHIFT, AIPS_PACRP_SP3_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRP, field TP2[20] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRP_TP2 field. */
#define AIPS_RD_PACRP_TP2(base) ((AIPS_PACRP_REG(base) & AIPS_PACRP_TP2_MASK) >> AIPS_PACRP_TP2_SHIFT)
#define AIPS_BRD_PACRP_TP2(base) (BME_UBFX32(&AIPS_PACRP_REG(base), AIPS_PACRP_TP2_SHIFT, AIPS_PACRP_TP2_WIDTH))

/*! @brief Set the TP2 field to a new value. */
#define AIPS_WR_PACRP_TP2(base, value) (AIPS_RMW_PACRP(base, AIPS_PACRP_TP2_MASK, AIPS_PACRP_TP2(value)))
#define AIPS_BWR_PACRP_TP2(base, value) (BME_BFI32(&AIPS_PACRP_REG(base), ((uint32_t)(value) << AIPS_PACRP_TP2_SHIFT), AIPS_PACRP_TP2_SHIFT, AIPS_PACRP_TP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRP, field WP2[21] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRP_WP2 field. */
#define AIPS_RD_PACRP_WP2(base) ((AIPS_PACRP_REG(base) & AIPS_PACRP_WP2_MASK) >> AIPS_PACRP_WP2_SHIFT)
#define AIPS_BRD_PACRP_WP2(base) (BME_UBFX32(&AIPS_PACRP_REG(base), AIPS_PACRP_WP2_SHIFT, AIPS_PACRP_WP2_WIDTH))

/*! @brief Set the WP2 field to a new value. */
#define AIPS_WR_PACRP_WP2(base, value) (AIPS_RMW_PACRP(base, AIPS_PACRP_WP2_MASK, AIPS_PACRP_WP2(value)))
#define AIPS_BWR_PACRP_WP2(base, value) (BME_BFI32(&AIPS_PACRP_REG(base), ((uint32_t)(value) << AIPS_PACRP_WP2_SHIFT), AIPS_PACRP_WP2_SHIFT, AIPS_PACRP_WP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRP, field SP2[22] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this bit is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control bit for the master must be
 * set. If not, access terminates with an error response and no peripheral access
 * initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRP_SP2 field. */
#define AIPS_RD_PACRP_SP2(base) ((AIPS_PACRP_REG(base) & AIPS_PACRP_SP2_MASK) >> AIPS_PACRP_SP2_SHIFT)
#define AIPS_BRD_PACRP_SP2(base) (BME_UBFX32(&AIPS_PACRP_REG(base), AIPS_PACRP_SP2_SHIFT, AIPS_PACRP_SP2_WIDTH))

/*! @brief Set the SP2 field to a new value. */
#define AIPS_WR_PACRP_SP2(base, value) (AIPS_RMW_PACRP(base, AIPS_PACRP_SP2_MASK, AIPS_PACRP_SP2(value)))
#define AIPS_BWR_PACRP_SP2(base, value) (BME_BFI32(&AIPS_PACRP_REG(base), ((uint32_t)(value) << AIPS_PACRP_SP2_SHIFT), AIPS_PACRP_SP2_SHIFT, AIPS_PACRP_SP2_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRP, field TP1[24] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this field is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRP_TP1 field. */
#define AIPS_RD_PACRP_TP1(base) ((AIPS_PACRP_REG(base) & AIPS_PACRP_TP1_MASK) >> AIPS_PACRP_TP1_SHIFT)
#define AIPS_BRD_PACRP_TP1(base) (BME_UBFX32(&AIPS_PACRP_REG(base), AIPS_PACRP_TP1_SHIFT, AIPS_PACRP_TP1_WIDTH))

/*! @brief Set the TP1 field to a new value. */
#define AIPS_WR_PACRP_TP1(base, value) (AIPS_RMW_PACRP(base, AIPS_PACRP_TP1_MASK, AIPS_PACRP_TP1(value)))
#define AIPS_BWR_PACRP_TP1(base, value) (BME_BFI32(&AIPS_PACRP_REG(base), ((uint32_t)(value) << AIPS_PACRP_TP1_SHIFT), AIPS_PACRP_TP1_SHIFT, AIPS_PACRP_TP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRP, field WP1[25] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRP_WP1 field. */
#define AIPS_RD_PACRP_WP1(base) ((AIPS_PACRP_REG(base) & AIPS_PACRP_WP1_MASK) >> AIPS_PACRP_WP1_SHIFT)
#define AIPS_BRD_PACRP_WP1(base) (BME_UBFX32(&AIPS_PACRP_REG(base), AIPS_PACRP_WP1_SHIFT, AIPS_PACRP_WP1_WIDTH))

/*! @brief Set the WP1 field to a new value. */
#define AIPS_WR_PACRP_WP1(base, value) (AIPS_RMW_PACRP(base, AIPS_PACRP_WP1_MASK, AIPS_PACRP_WP1(value)))
#define AIPS_BWR_PACRP_WP1(base, value) (BME_BFI32(&AIPS_PACRP_REG(base), ((uint32_t)(value) << AIPS_PACRP_WP1_SHIFT), AIPS_PACRP_WP1_SHIFT, AIPS_PACRP_WP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRP, field SP1[26] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * access. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master must
 * be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRP_SP1 field. */
#define AIPS_RD_PACRP_SP1(base) ((AIPS_PACRP_REG(base) & AIPS_PACRP_SP1_MASK) >> AIPS_PACRP_SP1_SHIFT)
#define AIPS_BRD_PACRP_SP1(base) (BME_UBFX32(&AIPS_PACRP_REG(base), AIPS_PACRP_SP1_SHIFT, AIPS_PACRP_SP1_WIDTH))

/*! @brief Set the SP1 field to a new value. */
#define AIPS_WR_PACRP_SP1(base, value) (AIPS_RMW_PACRP(base, AIPS_PACRP_SP1_MASK, AIPS_PACRP_SP1(value)))
#define AIPS_BWR_PACRP_SP1(base, value) (BME_BFI32(&AIPS_PACRP_REG(base), ((uint32_t)(value) << AIPS_PACRP_SP1_SHIFT), AIPS_PACRP_SP1_SHIFT, AIPS_PACRP_SP1_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRP, field TP0[28] (RW)
 *
 * Determines whether the peripheral allows accesses from an untrusted master.
 * When this bit is set and an access is attempted by an untrusted master, the
 * access terminates with an error response and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - Accesses from an untrusted master are allowed.
 * - 0b1 - Accesses from an untrusted master are not allowed.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRP_TP0 field. */
#define AIPS_RD_PACRP_TP0(base) ((AIPS_PACRP_REG(base) & AIPS_PACRP_TP0_MASK) >> AIPS_PACRP_TP0_SHIFT)
#define AIPS_BRD_PACRP_TP0(base) (BME_UBFX32(&AIPS_PACRP_REG(base), AIPS_PACRP_TP0_SHIFT, AIPS_PACRP_TP0_WIDTH))

/*! @brief Set the TP0 field to a new value. */
#define AIPS_WR_PACRP_TP0(base, value) (AIPS_RMW_PACRP(base, AIPS_PACRP_TP0_MASK, AIPS_PACRP_TP0(value)))
#define AIPS_BWR_PACRP_TP0(base, value) (BME_BFI32(&AIPS_PACRP_REG(base), ((uint32_t)(value) << AIPS_PACRP_TP0_SHIFT), AIPS_PACRP_TP0_SHIFT, AIPS_PACRP_TP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRP, field WP0[29] (RW)
 *
 * Determines whether the peripheral allows write accesses. When this field is
 * set and a write access is attempted, access terminates with an error response
 * and no peripheral access initiates.
 *
 * Values:
 * - 0b0 - This peripheral allows write accesses.
 * - 0b1 - This peripheral is write protected.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRP_WP0 field. */
#define AIPS_RD_PACRP_WP0(base) ((AIPS_PACRP_REG(base) & AIPS_PACRP_WP0_MASK) >> AIPS_PACRP_WP0_SHIFT)
#define AIPS_BRD_PACRP_WP0(base) (BME_UBFX32(&AIPS_PACRP_REG(base), AIPS_PACRP_WP0_SHIFT, AIPS_PACRP_WP0_WIDTH))

/*! @brief Set the WP0 field to a new value. */
#define AIPS_WR_PACRP_WP0(base, value) (AIPS_RMW_PACRP(base, AIPS_PACRP_WP0_MASK, AIPS_PACRP_WP0(value)))
#define AIPS_BWR_PACRP_WP0(base, value) (BME_BFI32(&AIPS_PACRP_REG(base), ((uint32_t)(value) << AIPS_PACRP_WP0_SHIFT), AIPS_PACRP_WP0_SHIFT, AIPS_PACRP_WP0_WIDTH))
/*@}*/

/*!
 * @name Register AIPS_PACRP, field SP0[30] (RW)
 *
 * Determines whether the peripheral requires supervisor privilege level for
 * accesses. When this field is set, the master privilege level must indicate the
 * supervisor access attribute, and the MPRx[MPLn] control field for the master
 * must be set. If not, access terminates with an error response and no peripheral
 * access initiates.
 *
 * Values:
 * - 0b0 - This peripheral does not require supervisor privilege level for
 *     accesses.
 * - 0b1 - This peripheral requires supervisor privilege level for accesses.
 */
/*@{*/
/*! @brief Read current value of the AIPS_PACRP_SP0 field. */
#define AIPS_RD_PACRP_SP0(base) ((AIPS_PACRP_REG(base) & AIPS_PACRP_SP0_MASK) >> AIPS_PACRP_SP0_SHIFT)
#define AIPS_BRD_PACRP_SP0(base) (BME_UBFX32(&AIPS_PACRP_REG(base), AIPS_PACRP_SP0_SHIFT, AIPS_PACRP_SP0_WIDTH))

/*! @brief Set the SP0 field to a new value. */
#define AIPS_WR_PACRP_SP0(base, value) (AIPS_RMW_PACRP(base, AIPS_PACRP_SP0_MASK, AIPS_PACRP_SP0(value)))
#define AIPS_BWR_PACRP_SP0(base, value) (BME_BFI32(&AIPS_PACRP_REG(base), ((uint32_t)(value) << AIPS_PACRP_SP0_SHIFT), AIPS_PACRP_SP0_SHIFT, AIPS_PACRP_SP0_WIDTH))
/*@}*/

/*
 * MK82F25615 AXBS
 *
 * Crossbar switch
 *
 * Registers defined in this header file:
 * - AXBS_PRS - Priority Registers Slave
 * - AXBS_CRS - Control Register
 * - AXBS_MGPCR0 - Master General Purpose Control Register
 * - AXBS_MGPCR1 - Master General Purpose Control Register
 * - AXBS_MGPCR2 - Master General Purpose Control Register
 * - AXBS_MGPCR3 - Master General Purpose Control Register
 * - AXBS_MGPCR4 - Master General Purpose Control Register
 */

#define AXBS_INSTANCE_COUNT (1U) /*!< Number of instances of the AXBS module. */
#define AXBS_IDX (0U) /*!< Instance number for AXBS. */

/*******************************************************************************
 * AXBS_PRS - Priority Registers Slave
 ******************************************************************************/

/*!
 * @brief AXBS_PRS - Priority Registers Slave (RW)
 *
 * Reset value: 0x00043210U
 *
 * The priority registers (PRSn) set the priority of each master port on a per
 * slave port basis and reside in each slave port. The priority register can be
 * accessed only with 32-bit accesses. After the CRSn[RO] bit is set, the PRSn
 * register can only be read; attempts to write to it have no effect on PRSn and
 * result in a bus-error response to the master initiating the write. Two available
 * masters must not be programmed with the same priority level. Attempts to
 * program two or more masters with the same priority level result in a bus-error
 * response and the PRSn is not updated. Valid values for the Mn priority fields
 * depend on which masters are available on the chip. This information can be found in
 * the chip-specific information for the crossbar. If the chip contains less
 * than five masters, values 0 to 3 are valid. Writing other values will result in
 * an error. If the chip contains five or more masters, valid values are 0 to n-1,
 * where n is the number of masters attached to the Crossbar Switch. Other
 * values will result in an error. See the chip-specific crossbar information for the
 * reset value of this register.
 */
/*!
 * @name Constants and macros for entire AXBS_PRS register
 */
/*@{*/
#define AXBS_RD_PRS(base, index) (AXBS_PRS_REG(base, index))
#define AXBS_WR_PRS(base, index, value) (AXBS_PRS_REG(base, index) = (value))
#define AXBS_RMW_PRS(base, index, mask, value) (AXBS_WR_PRS(base, index, (AXBS_RD_PRS(base, index) & ~(mask)) | (value)))
#define AXBS_SET_PRS(base, index, value) (BME_OR32(&AXBS_PRS_REG(base, index), (uint32_t)(value)))
#define AXBS_CLR_PRS(base, index, value) (BME_AND32(&AXBS_PRS_REG(base, index), (uint32_t)(~(value))))
#define AXBS_TOG_PRS(base, index, value) (BME_XOR32(&AXBS_PRS_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual AXBS_PRS bitfields
 */

/*!
 * @name Register AXBS_PRS, field M0[2:0] (RW)
 *
 * Values:
 * - 0b000 - This master has level 1, or highest, priority when accessing the
 *     slave port.
 * - 0b001 - This master has level 2 priority when accessing the slave port.
 * - 0b010 - This master has level 3 priority when accessing the slave port.
 * - 0b011 - This master has level 4 priority when accessing the slave port.
 * - 0b100 - This master has level 5 priority when accessing the slave port.
 * - 0b101 - This master has level 6 priority when accessing the slave port.
 * - 0b110 - This master has level 7 priority when accessing the slave port.
 * - 0b111 - This master has level 8, or lowest, priority when accessing the
 *     slave port.
 */
/*@{*/
/*! @brief Read current value of the AXBS_PRS_M0 field. */
#define AXBS_RD_PRS_M0(base, index) ((AXBS_PRS_REG(base, index) & AXBS_PRS_M0_MASK) >> AXBS_PRS_M0_SHIFT)
#define AXBS_BRD_PRS_M0(base, index) (BME_UBFX32(&AXBS_PRS_REG(base, index), AXBS_PRS_M0_SHIFT, AXBS_PRS_M0_WIDTH))

/*! @brief Set the M0 field to a new value. */
#define AXBS_WR_PRS_M0(base, index, value) (AXBS_RMW_PRS(base, index, AXBS_PRS_M0_MASK, AXBS_PRS_M0(value)))
#define AXBS_BWR_PRS_M0(base, index, value) (BME_BFI32(&AXBS_PRS_REG(base, index), ((uint32_t)(value) << AXBS_PRS_M0_SHIFT), AXBS_PRS_M0_SHIFT, AXBS_PRS_M0_WIDTH))
/*@}*/

/*!
 * @name Register AXBS_PRS, field M1[6:4] (RW)
 *
 * Values:
 * - 0b000 - This master has level 1, or highest, priority when accessing the
 *     slave port.
 * - 0b001 - This master has level 2 priority when accessing the slave port.
 * - 0b010 - This master has level 3 priority when accessing the slave port.
 * - 0b011 - This master has level 4 priority when accessing the slave port.
 * - 0b100 - This master has level 5 priority when accessing the slave port.
 * - 0b101 - This master has level 6 priority when accessing the slave port.
 * - 0b110 - This master has level 7 priority when accessing the slave port.
 * - 0b111 - This master has level 8, or lowest, priority when accessing the
 *     slave port.
 */
/*@{*/
/*! @brief Read current value of the AXBS_PRS_M1 field. */
#define AXBS_RD_PRS_M1(base, index) ((AXBS_PRS_REG(base, index) & AXBS_PRS_M1_MASK) >> AXBS_PRS_M1_SHIFT)
#define AXBS_BRD_PRS_M1(base, index) (BME_UBFX32(&AXBS_PRS_REG(base, index), AXBS_PRS_M1_SHIFT, AXBS_PRS_M1_WIDTH))

/*! @brief Set the M1 field to a new value. */
#define AXBS_WR_PRS_M1(base, index, value) (AXBS_RMW_PRS(base, index, AXBS_PRS_M1_MASK, AXBS_PRS_M1(value)))
#define AXBS_BWR_PRS_M1(base, index, value) (BME_BFI32(&AXBS_PRS_REG(base, index), ((uint32_t)(value) << AXBS_PRS_M1_SHIFT), AXBS_PRS_M1_SHIFT, AXBS_PRS_M1_WIDTH))
/*@}*/

/*!
 * @name Register AXBS_PRS, field M2[10:8] (RW)
 *
 * Values:
 * - 0b000 - This master has level 1, or highest, priority when accessing the
 *     slave port.
 * - 0b001 - This master has level 2 priority when accessing the slave port.
 * - 0b010 - This master has level 3 priority when accessing the slave port.
 * - 0b011 - This master has level 4 priority when accessing the slave port.
 * - 0b100 - This master has level 5 priority when accessing the slave port.
 * - 0b101 - This master has level 6 priority when accessing the slave port.
 * - 0b110 - This master has level 7 priority when accessing the slave port.
 * - 0b111 - This master has level 8, or lowest, priority when accessing the
 *     slave port.
 */
/*@{*/
/*! @brief Read current value of the AXBS_PRS_M2 field. */
#define AXBS_RD_PRS_M2(base, index) ((AXBS_PRS_REG(base, index) & AXBS_PRS_M2_MASK) >> AXBS_PRS_M2_SHIFT)
#define AXBS_BRD_PRS_M2(base, index) (BME_UBFX32(&AXBS_PRS_REG(base, index), AXBS_PRS_M2_SHIFT, AXBS_PRS_M2_WIDTH))

/*! @brief Set the M2 field to a new value. */
#define AXBS_WR_PRS_M2(base, index, value) (AXBS_RMW_PRS(base, index, AXBS_PRS_M2_MASK, AXBS_PRS_M2(value)))
#define AXBS_BWR_PRS_M2(base, index, value) (BME_BFI32(&AXBS_PRS_REG(base, index), ((uint32_t)(value) << AXBS_PRS_M2_SHIFT), AXBS_PRS_M2_SHIFT, AXBS_PRS_M2_WIDTH))
/*@}*/

/*!
 * @name Register AXBS_PRS, field M3[14:12] (RW)
 *
 * Values:
 * - 0b000 - This master has level 1, or highest, priority when accessing the
 *     slave port.
 * - 0b001 - This master has level 2 priority when accessing the slave port.
 * - 0b010 - This master has level 3 priority when accessing the slave port.
 * - 0b011 - This master has level 4 priority when accessing the slave port.
 * - 0b100 - This master has level 5 priority when accessing the slave port.
 * - 0b101 - This master has level 6 priority when accessing the slave port.
 * - 0b110 - This master has level 7 priority when accessing the slave port.
 * - 0b111 - This master has level 8, or lowest, priority when accessing the
 *     slave port.
 */
/*@{*/
/*! @brief Read current value of the AXBS_PRS_M3 field. */
#define AXBS_RD_PRS_M3(base, index) ((AXBS_PRS_REG(base, index) & AXBS_PRS_M3_MASK) >> AXBS_PRS_M3_SHIFT)
#define AXBS_BRD_PRS_M3(base, index) (BME_UBFX32(&AXBS_PRS_REG(base, index), AXBS_PRS_M3_SHIFT, AXBS_PRS_M3_WIDTH))

/*! @brief Set the M3 field to a new value. */
#define AXBS_WR_PRS_M3(base, index, value) (AXBS_RMW_PRS(base, index, AXBS_PRS_M3_MASK, AXBS_PRS_M3(value)))
#define AXBS_BWR_PRS_M3(base, index, value) (BME_BFI32(&AXBS_PRS_REG(base, index), ((uint32_t)(value) << AXBS_PRS_M3_SHIFT), AXBS_PRS_M3_SHIFT, AXBS_PRS_M3_WIDTH))
/*@}*/

/*!
 * @name Register AXBS_PRS, field M4[18:16] (RW)
 *
 * Values:
 * - 0b000 - This master has level 1, or highest, priority when accessing the
 *     slave port.
 * - 0b001 - This master has level 2 priority when accessing the slave port.
 * - 0b010 - This master has level 3 priority when accessing the slave port.
 * - 0b011 - This master has level 4 priority when accessing the slave port.
 * - 0b100 - This master has level 5 priority when accessing the slave port.
 * - 0b101 - This master has level 6 priority when accessing the slave port.
 * - 0b110 - This master has level 7 priority when accessing the slave port.
 * - 0b111 - This master has level 8, or lowest, priority when accessing the
 *     slave port.
 */
/*@{*/
/*! @brief Read current value of the AXBS_PRS_M4 field. */
#define AXBS_RD_PRS_M4(base, index) ((AXBS_PRS_REG(base, index) & AXBS_PRS_M4_MASK) >> AXBS_PRS_M4_SHIFT)
#define AXBS_BRD_PRS_M4(base, index) (BME_UBFX32(&AXBS_PRS_REG(base, index), AXBS_PRS_M4_SHIFT, AXBS_PRS_M4_WIDTH))

/*! @brief Set the M4 field to a new value. */
#define AXBS_WR_PRS_M4(base, index, value) (AXBS_RMW_PRS(base, index, AXBS_PRS_M4_MASK, AXBS_PRS_M4(value)))
#define AXBS_BWR_PRS_M4(base, index, value) (BME_BFI32(&AXBS_PRS_REG(base, index), ((uint32_t)(value) << AXBS_PRS_M4_SHIFT), AXBS_PRS_M4_SHIFT, AXBS_PRS_M4_WIDTH))
/*@}*/

/*******************************************************************************
 * AXBS_CRS - Control Register
 ******************************************************************************/

/*!
 * @brief AXBS_CRS - Control Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * These registers control several features of each slave port and must be
 * accessed using 32-bit accesses. After CRSn[RO] is set, the PRSn can only be read;
 * attempts to write to it have no effect and result in an error response. See the
 * chip-specific crossbar information for the reset value of this register.
 */
/*!
 * @name Constants and macros for entire AXBS_CRS register
 */
/*@{*/
#define AXBS_RD_CRS(base, index) (AXBS_CRS_REG(base, index))
#define AXBS_WR_CRS(base, index, value) (AXBS_CRS_REG(base, index) = (value))
#define AXBS_RMW_CRS(base, index, mask, value) (AXBS_WR_CRS(base, index, (AXBS_RD_CRS(base, index) & ~(mask)) | (value)))
#define AXBS_SET_CRS(base, index, value) (BME_OR32(&AXBS_CRS_REG(base, index), (uint32_t)(value)))
#define AXBS_CLR_CRS(base, index, value) (BME_AND32(&AXBS_CRS_REG(base, index), (uint32_t)(~(value))))
#define AXBS_TOG_CRS(base, index, value) (BME_XOR32(&AXBS_CRS_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual AXBS_CRS bitfields
 */

/*!
 * @name Register AXBS_CRS, field PARK[2:0] (RW)
 *
 * Determines which master port the current slave port parks on when no masters
 * are actively making requests and the PCTL bits are cleared. Select only master
 * ports that are present on the chip. Otherwise, undefined behavior might occur.
 *
 * Values:
 * - 0b000 - Park on master port M0
 * - 0b001 - Park on master port M1
 * - 0b010 - Park on master port M2
 * - 0b011 - Park on master port M3
 * - 0b100 - Park on master port M4
 * - 0b101 - Park on master port M5
 * - 0b110 - Park on master port M6
 * - 0b111 - Park on master port M7
 */
/*@{*/
/*! @brief Read current value of the AXBS_CRS_PARK field. */
#define AXBS_RD_CRS_PARK(base, index) ((AXBS_CRS_REG(base, index) & AXBS_CRS_PARK_MASK) >> AXBS_CRS_PARK_SHIFT)
#define AXBS_BRD_CRS_PARK(base, index) (BME_UBFX32(&AXBS_CRS_REG(base, index), AXBS_CRS_PARK_SHIFT, AXBS_CRS_PARK_WIDTH))

/*! @brief Set the PARK field to a new value. */
#define AXBS_WR_CRS_PARK(base, index, value) (AXBS_RMW_CRS(base, index, AXBS_CRS_PARK_MASK, AXBS_CRS_PARK(value)))
#define AXBS_BWR_CRS_PARK(base, index, value) (BME_BFI32(&AXBS_CRS_REG(base, index), ((uint32_t)(value) << AXBS_CRS_PARK_SHIFT), AXBS_CRS_PARK_SHIFT, AXBS_CRS_PARK_WIDTH))
/*@}*/

/*!
 * @name Register AXBS_CRS, field PCTL[5:4] (RW)
 *
 * Determines the slave port's parking control. The low-power park feature
 * results in an overall power savings if the slave port is not saturated. However,
 * this forces an extra latency clock when any master tries to access the slave
 * port while not in use because it is not parked on any master.
 *
 * Values:
 * - 0b00 - When no master makes a request, the arbiter parks the slave port on
 *     the master port defined by the PARK field
 * - 0b01 - When no master makes a request, the arbiter parks the slave port on
 *     the last master to be in control of the slave port
 * - 0b10 - When no master makes a request, the slave port is not parked on a
 *     master and the arbiter drives all outputs to a constant safe state
 * - 0b11 - Reserved
 */
/*@{*/
/*! @brief Read current value of the AXBS_CRS_PCTL field. */
#define AXBS_RD_CRS_PCTL(base, index) ((AXBS_CRS_REG(base, index) & AXBS_CRS_PCTL_MASK) >> AXBS_CRS_PCTL_SHIFT)
#define AXBS_BRD_CRS_PCTL(base, index) (BME_UBFX32(&AXBS_CRS_REG(base, index), AXBS_CRS_PCTL_SHIFT, AXBS_CRS_PCTL_WIDTH))

/*! @brief Set the PCTL field to a new value. */
#define AXBS_WR_CRS_PCTL(base, index, value) (AXBS_RMW_CRS(base, index, AXBS_CRS_PCTL_MASK, AXBS_CRS_PCTL(value)))
#define AXBS_BWR_CRS_PCTL(base, index, value) (BME_BFI32(&AXBS_CRS_REG(base, index), ((uint32_t)(value) << AXBS_CRS_PCTL_SHIFT), AXBS_CRS_PCTL_SHIFT, AXBS_CRS_PCTL_WIDTH))
/*@}*/

/*!
 * @name Register AXBS_CRS, field ARB[9:8] (RW)
 *
 * Selects the arbitration policy for the slave port.
 *
 * Values:
 * - 0b00 - Fixed priority
 * - 0b01 - Round-robin, or rotating, priority
 * - 0b10 - Reserved
 * - 0b11 - Reserved
 */
/*@{*/
/*! @brief Read current value of the AXBS_CRS_ARB field. */
#define AXBS_RD_CRS_ARB(base, index) ((AXBS_CRS_REG(base, index) & AXBS_CRS_ARB_MASK) >> AXBS_CRS_ARB_SHIFT)
#define AXBS_BRD_CRS_ARB(base, index) (BME_UBFX32(&AXBS_CRS_REG(base, index), AXBS_CRS_ARB_SHIFT, AXBS_CRS_ARB_WIDTH))

/*! @brief Set the ARB field to a new value. */
#define AXBS_WR_CRS_ARB(base, index, value) (AXBS_RMW_CRS(base, index, AXBS_CRS_ARB_MASK, AXBS_CRS_ARB(value)))
#define AXBS_BWR_CRS_ARB(base, index, value) (BME_BFI32(&AXBS_CRS_REG(base, index), ((uint32_t)(value) << AXBS_CRS_ARB_SHIFT), AXBS_CRS_ARB_SHIFT, AXBS_CRS_ARB_WIDTH))
/*@}*/

/*!
 * @name Register AXBS_CRS, field HLP[30] (RW)
 *
 * Sets the initial arbitration priority for low power mode requests . Setting
 * this bit will not affect the request for low power mode from attaining highest
 * priority once it has control of the slave ports.
 *
 * Values:
 * - 0b0 - The low power mode request has the highest priority for arbitration
 *     on this slave port
 * - 0b1 - The low power mode request has the lowest initial priority for
 *     arbitration on this slave port
 */
/*@{*/
/*! @brief Read current value of the AXBS_CRS_HLP field. */
#define AXBS_RD_CRS_HLP(base, index) ((AXBS_CRS_REG(base, index) & AXBS_CRS_HLP_MASK) >> AXBS_CRS_HLP_SHIFT)
#define AXBS_BRD_CRS_HLP(base, index) (BME_UBFX32(&AXBS_CRS_REG(base, index), AXBS_CRS_HLP_SHIFT, AXBS_CRS_HLP_WIDTH))

/*! @brief Set the HLP field to a new value. */
#define AXBS_WR_CRS_HLP(base, index, value) (AXBS_RMW_CRS(base, index, AXBS_CRS_HLP_MASK, AXBS_CRS_HLP(value)))
#define AXBS_BWR_CRS_HLP(base, index, value) (BME_BFI32(&AXBS_CRS_REG(base, index), ((uint32_t)(value) << AXBS_CRS_HLP_SHIFT), AXBS_CRS_HLP_SHIFT, AXBS_CRS_HLP_WIDTH))
/*@}*/

/*!
 * @name Register AXBS_CRS, field RO[31] (RW)
 *
 * Forces the slave port's CSRn and PRSn registers to be read-only. After set,
 * only a hardware reset clears it.
 *
 * Values:
 * - 0b0 - The slave port's registers are writeable
 * - 0b1 - The slave port's registers are read-only and cannot be written.
 *     Attempted writes have no effect on the registers and result in a bus error
 *     response.
 */
/*@{*/
/*! @brief Read current value of the AXBS_CRS_RO field. */
#define AXBS_RD_CRS_RO(base, index) ((AXBS_CRS_REG(base, index) & AXBS_CRS_RO_MASK) >> AXBS_CRS_RO_SHIFT)
#define AXBS_BRD_CRS_RO(base, index) (BME_UBFX32(&AXBS_CRS_REG(base, index), AXBS_CRS_RO_SHIFT, AXBS_CRS_RO_WIDTH))

/*! @brief Set the RO field to a new value. */
#define AXBS_WR_CRS_RO(base, index, value) (AXBS_RMW_CRS(base, index, AXBS_CRS_RO_MASK, AXBS_CRS_RO(value)))
#define AXBS_BWR_CRS_RO(base, index, value) (BME_BFI32(&AXBS_CRS_REG(base, index), ((uint32_t)(value) << AXBS_CRS_RO_SHIFT), AXBS_CRS_RO_SHIFT, AXBS_CRS_RO_WIDTH))
/*@}*/

/*******************************************************************************
 * AXBS_MGPCR0 - Master General Purpose Control Register
 ******************************************************************************/

/*!
 * @brief AXBS_MGPCR0 - Master General Purpose Control Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The MGPCR controls only whether the master's undefined length burst accesses
 * are allowed to complete uninterrupted or whether they can be broken by
 * requests from higher priority masters. The MGPCR can be accessed only in Supervisor
 * mode with 32-bit accesses. If there are fewer than eight master ports, only the
 * registers associated with those masters are present. Register addresses
 * associated with master ports that are not present are reserved. Please see this
 * module's chip-specific information for which master ports are present on this
 * module.
 */
/*!
 * @name Constants and macros for entire AXBS_MGPCR0 register
 */
/*@{*/
#define AXBS_RD_MGPCR0(base)     (AXBS_MGPCR0_REG(base))
#define AXBS_WR_MGPCR0(base, value) (AXBS_MGPCR0_REG(base) = (value))
#define AXBS_RMW_MGPCR0(base, mask, value) (AXBS_WR_MGPCR0(base, (AXBS_RD_MGPCR0(base) & ~(mask)) | (value)))
#define AXBS_SET_MGPCR0(base, value) (BME_OR32(&AXBS_MGPCR0_REG(base), (uint32_t)(value)))
#define AXBS_CLR_MGPCR0(base, value) (BME_AND32(&AXBS_MGPCR0_REG(base), (uint32_t)(~(value))))
#define AXBS_TOG_MGPCR0(base, value) (BME_XOR32(&AXBS_MGPCR0_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual AXBS_MGPCR0 bitfields
 */

/*!
 * @name Register AXBS_MGPCR0, field AULB[2:0] (RW)
 *
 * Determines whether, and when, the crossbar switch arbitrates away the slave
 * port the master owns when the master is performing undefined length burst
 * accesses.
 *
 * Values:
 * - 0b000 - No arbitration is allowed during an undefined length burst
 * - 0b001 - Arbitration is allowed at any time during an undefined length burst
 * - 0b010 - Arbitration is allowed after four beats of an undefined length burst
 * - 0b011 - Arbitration is allowed after eight beats of an undefined length
 *     burst
 * - 0b100 - Arbitration is allowed after 16 beats of an undefined length burst
 * - 0b101 - Reserved
 * - 0b110 - Reserved
 * - 0b111 - Reserved
 */
/*@{*/
/*! @brief Read current value of the AXBS_MGPCR0_AULB field. */
#define AXBS_RD_MGPCR0_AULB(base) ((AXBS_MGPCR0_REG(base) & AXBS_MGPCR0_AULB_MASK) >> AXBS_MGPCR0_AULB_SHIFT)
#define AXBS_BRD_MGPCR0_AULB(base) (BME_UBFX32(&AXBS_MGPCR0_REG(base), AXBS_MGPCR0_AULB_SHIFT, AXBS_MGPCR0_AULB_WIDTH))

/*! @brief Set the AULB field to a new value. */
#define AXBS_WR_MGPCR0_AULB(base, value) (AXBS_RMW_MGPCR0(base, AXBS_MGPCR0_AULB_MASK, AXBS_MGPCR0_AULB(value)))
#define AXBS_BWR_MGPCR0_AULB(base, value) (BME_BFI32(&AXBS_MGPCR0_REG(base), ((uint32_t)(value) << AXBS_MGPCR0_AULB_SHIFT), AXBS_MGPCR0_AULB_SHIFT, AXBS_MGPCR0_AULB_WIDTH))
/*@}*/

/*******************************************************************************
 * AXBS_MGPCR1 - Master General Purpose Control Register
 ******************************************************************************/

/*!
 * @brief AXBS_MGPCR1 - Master General Purpose Control Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The MGPCR controls only whether the master's undefined length burst accesses
 * are allowed to complete uninterrupted or whether they can be broken by
 * requests from higher priority masters. The MGPCR can be accessed only in Supervisor
 * mode with 32-bit accesses. If there are fewer than eight master ports, only the
 * registers associated with those masters are present. Register addresses
 * associated with master ports that are not present are reserved. Please see this
 * module's chip-specific information for which master ports are present on this
 * module.
 */
/*!
 * @name Constants and macros for entire AXBS_MGPCR1 register
 */
/*@{*/
#define AXBS_RD_MGPCR1(base)     (AXBS_MGPCR1_REG(base))
#define AXBS_WR_MGPCR1(base, value) (AXBS_MGPCR1_REG(base) = (value))
#define AXBS_RMW_MGPCR1(base, mask, value) (AXBS_WR_MGPCR1(base, (AXBS_RD_MGPCR1(base) & ~(mask)) | (value)))
#define AXBS_SET_MGPCR1(base, value) (BME_OR32(&AXBS_MGPCR1_REG(base), (uint32_t)(value)))
#define AXBS_CLR_MGPCR1(base, value) (BME_AND32(&AXBS_MGPCR1_REG(base), (uint32_t)(~(value))))
#define AXBS_TOG_MGPCR1(base, value) (BME_XOR32(&AXBS_MGPCR1_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual AXBS_MGPCR1 bitfields
 */

/*!
 * @name Register AXBS_MGPCR1, field AULB[2:0] (RW)
 *
 * Determines whether, and when, the crossbar switch arbitrates away the slave
 * port the master owns when the master is performing undefined length burst
 * accesses.
 *
 * Values:
 * - 0b000 - No arbitration is allowed during an undefined length burst
 * - 0b001 - Arbitration is allowed at any time during an undefined length burst
 * - 0b010 - Arbitration is allowed after four beats of an undefined length burst
 * - 0b011 - Arbitration is allowed after eight beats of an undefined length
 *     burst
 * - 0b100 - Arbitration is allowed after 16 beats of an undefined length burst
 * - 0b101 - Reserved
 * - 0b110 - Reserved
 * - 0b111 - Reserved
 */
/*@{*/
/*! @brief Read current value of the AXBS_MGPCR1_AULB field. */
#define AXBS_RD_MGPCR1_AULB(base) ((AXBS_MGPCR1_REG(base) & AXBS_MGPCR1_AULB_MASK) >> AXBS_MGPCR1_AULB_SHIFT)
#define AXBS_BRD_MGPCR1_AULB(base) (BME_UBFX32(&AXBS_MGPCR1_REG(base), AXBS_MGPCR1_AULB_SHIFT, AXBS_MGPCR1_AULB_WIDTH))

/*! @brief Set the AULB field to a new value. */
#define AXBS_WR_MGPCR1_AULB(base, value) (AXBS_RMW_MGPCR1(base, AXBS_MGPCR1_AULB_MASK, AXBS_MGPCR1_AULB(value)))
#define AXBS_BWR_MGPCR1_AULB(base, value) (BME_BFI32(&AXBS_MGPCR1_REG(base), ((uint32_t)(value) << AXBS_MGPCR1_AULB_SHIFT), AXBS_MGPCR1_AULB_SHIFT, AXBS_MGPCR1_AULB_WIDTH))
/*@}*/

/*******************************************************************************
 * AXBS_MGPCR2 - Master General Purpose Control Register
 ******************************************************************************/

/*!
 * @brief AXBS_MGPCR2 - Master General Purpose Control Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The MGPCR controls only whether the master's undefined length burst accesses
 * are allowed to complete uninterrupted or whether they can be broken by
 * requests from higher priority masters. The MGPCR can be accessed only in Supervisor
 * mode with 32-bit accesses. If there are fewer than eight master ports, only the
 * registers associated with those masters are present. Register addresses
 * associated with master ports that are not present are reserved. Please see this
 * module's chip-specific information for which master ports are present on this
 * module.
 */
/*!
 * @name Constants and macros for entire AXBS_MGPCR2 register
 */
/*@{*/
#define AXBS_RD_MGPCR2(base)     (AXBS_MGPCR2_REG(base))
#define AXBS_WR_MGPCR2(base, value) (AXBS_MGPCR2_REG(base) = (value))
#define AXBS_RMW_MGPCR2(base, mask, value) (AXBS_WR_MGPCR2(base, (AXBS_RD_MGPCR2(base) & ~(mask)) | (value)))
#define AXBS_SET_MGPCR2(base, value) (BME_OR32(&AXBS_MGPCR2_REG(base), (uint32_t)(value)))
#define AXBS_CLR_MGPCR2(base, value) (BME_AND32(&AXBS_MGPCR2_REG(base), (uint32_t)(~(value))))
#define AXBS_TOG_MGPCR2(base, value) (BME_XOR32(&AXBS_MGPCR2_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual AXBS_MGPCR2 bitfields
 */

/*!
 * @name Register AXBS_MGPCR2, field AULB[2:0] (RW)
 *
 * Determines whether, and when, the crossbar switch arbitrates away the slave
 * port the master owns when the master is performing undefined length burst
 * accesses.
 *
 * Values:
 * - 0b000 - No arbitration is allowed during an undefined length burst
 * - 0b001 - Arbitration is allowed at any time during an undefined length burst
 * - 0b010 - Arbitration is allowed after four beats of an undefined length burst
 * - 0b011 - Arbitration is allowed after eight beats of an undefined length
 *     burst
 * - 0b100 - Arbitration is allowed after 16 beats of an undefined length burst
 * - 0b101 - Reserved
 * - 0b110 - Reserved
 * - 0b111 - Reserved
 */
/*@{*/
/*! @brief Read current value of the AXBS_MGPCR2_AULB field. */
#define AXBS_RD_MGPCR2_AULB(base) ((AXBS_MGPCR2_REG(base) & AXBS_MGPCR2_AULB_MASK) >> AXBS_MGPCR2_AULB_SHIFT)
#define AXBS_BRD_MGPCR2_AULB(base) (BME_UBFX32(&AXBS_MGPCR2_REG(base), AXBS_MGPCR2_AULB_SHIFT, AXBS_MGPCR2_AULB_WIDTH))

/*! @brief Set the AULB field to a new value. */
#define AXBS_WR_MGPCR2_AULB(base, value) (AXBS_RMW_MGPCR2(base, AXBS_MGPCR2_AULB_MASK, AXBS_MGPCR2_AULB(value)))
#define AXBS_BWR_MGPCR2_AULB(base, value) (BME_BFI32(&AXBS_MGPCR2_REG(base), ((uint32_t)(value) << AXBS_MGPCR2_AULB_SHIFT), AXBS_MGPCR2_AULB_SHIFT, AXBS_MGPCR2_AULB_WIDTH))
/*@}*/

/*******************************************************************************
 * AXBS_MGPCR3 - Master General Purpose Control Register
 ******************************************************************************/

/*!
 * @brief AXBS_MGPCR3 - Master General Purpose Control Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The MGPCR controls only whether the master's undefined length burst accesses
 * are allowed to complete uninterrupted or whether they can be broken by
 * requests from higher priority masters. The MGPCR can be accessed only in Supervisor
 * mode with 32-bit accesses. If there are fewer than eight master ports, only the
 * registers associated with those masters are present. Register addresses
 * associated with master ports that are not present are reserved. Please see this
 * module's chip-specific information for which master ports are present on this
 * module.
 */
/*!
 * @name Constants and macros for entire AXBS_MGPCR3 register
 */
/*@{*/
#define AXBS_RD_MGPCR3(base)     (AXBS_MGPCR3_REG(base))
#define AXBS_WR_MGPCR3(base, value) (AXBS_MGPCR3_REG(base) = (value))
#define AXBS_RMW_MGPCR3(base, mask, value) (AXBS_WR_MGPCR3(base, (AXBS_RD_MGPCR3(base) & ~(mask)) | (value)))
#define AXBS_SET_MGPCR3(base, value) (BME_OR32(&AXBS_MGPCR3_REG(base), (uint32_t)(value)))
#define AXBS_CLR_MGPCR3(base, value) (BME_AND32(&AXBS_MGPCR3_REG(base), (uint32_t)(~(value))))
#define AXBS_TOG_MGPCR3(base, value) (BME_XOR32(&AXBS_MGPCR3_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual AXBS_MGPCR3 bitfields
 */

/*!
 * @name Register AXBS_MGPCR3, field AULB[2:0] (RW)
 *
 * Determines whether, and when, the crossbar switch arbitrates away the slave
 * port the master owns when the master is performing undefined length burst
 * accesses.
 *
 * Values:
 * - 0b000 - No arbitration is allowed during an undefined length burst
 * - 0b001 - Arbitration is allowed at any time during an undefined length burst
 * - 0b010 - Arbitration is allowed after four beats of an undefined length burst
 * - 0b011 - Arbitration is allowed after eight beats of an undefined length
 *     burst
 * - 0b100 - Arbitration is allowed after 16 beats of an undefined length burst
 * - 0b101 - Reserved
 * - 0b110 - Reserved
 * - 0b111 - Reserved
 */
/*@{*/
/*! @brief Read current value of the AXBS_MGPCR3_AULB field. */
#define AXBS_RD_MGPCR3_AULB(base) ((AXBS_MGPCR3_REG(base) & AXBS_MGPCR3_AULB_MASK) >> AXBS_MGPCR3_AULB_SHIFT)
#define AXBS_BRD_MGPCR3_AULB(base) (BME_UBFX32(&AXBS_MGPCR3_REG(base), AXBS_MGPCR3_AULB_SHIFT, AXBS_MGPCR3_AULB_WIDTH))

/*! @brief Set the AULB field to a new value. */
#define AXBS_WR_MGPCR3_AULB(base, value) (AXBS_RMW_MGPCR3(base, AXBS_MGPCR3_AULB_MASK, AXBS_MGPCR3_AULB(value)))
#define AXBS_BWR_MGPCR3_AULB(base, value) (BME_BFI32(&AXBS_MGPCR3_REG(base), ((uint32_t)(value) << AXBS_MGPCR3_AULB_SHIFT), AXBS_MGPCR3_AULB_SHIFT, AXBS_MGPCR3_AULB_WIDTH))
/*@}*/

/*******************************************************************************
 * AXBS_MGPCR4 - Master General Purpose Control Register
 ******************************************************************************/

/*!
 * @brief AXBS_MGPCR4 - Master General Purpose Control Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The MGPCR controls only whether the master's undefined length burst accesses
 * are allowed to complete uninterrupted or whether they can be broken by
 * requests from higher priority masters. The MGPCR can be accessed only in Supervisor
 * mode with 32-bit accesses. If there are fewer than eight master ports, only the
 * registers associated with those masters are present. Register addresses
 * associated with master ports that are not present are reserved. Please see this
 * module's chip-specific information for which master ports are present on this
 * module.
 */
/*!
 * @name Constants and macros for entire AXBS_MGPCR4 register
 */
/*@{*/
#define AXBS_RD_MGPCR4(base)     (AXBS_MGPCR4_REG(base))
#define AXBS_WR_MGPCR4(base, value) (AXBS_MGPCR4_REG(base) = (value))
#define AXBS_RMW_MGPCR4(base, mask, value) (AXBS_WR_MGPCR4(base, (AXBS_RD_MGPCR4(base) & ~(mask)) | (value)))
#define AXBS_SET_MGPCR4(base, value) (BME_OR32(&AXBS_MGPCR4_REG(base), (uint32_t)(value)))
#define AXBS_CLR_MGPCR4(base, value) (BME_AND32(&AXBS_MGPCR4_REG(base), (uint32_t)(~(value))))
#define AXBS_TOG_MGPCR4(base, value) (BME_XOR32(&AXBS_MGPCR4_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual AXBS_MGPCR4 bitfields
 */

/*!
 * @name Register AXBS_MGPCR4, field AULB[2:0] (RW)
 *
 * Determines whether, and when, the crossbar switch arbitrates away the slave
 * port the master owns when the master is performing undefined length burst
 * accesses.
 *
 * Values:
 * - 0b000 - No arbitration is allowed during an undefined length burst
 * - 0b001 - Arbitration is allowed at any time during an undefined length burst
 * - 0b010 - Arbitration is allowed after four beats of an undefined length burst
 * - 0b011 - Arbitration is allowed after eight beats of an undefined length
 *     burst
 * - 0b100 - Arbitration is allowed after 16 beats of an undefined length burst
 * - 0b101 - Reserved
 * - 0b110 - Reserved
 * - 0b111 - Reserved
 */
/*@{*/
/*! @brief Read current value of the AXBS_MGPCR4_AULB field. */
#define AXBS_RD_MGPCR4_AULB(base) ((AXBS_MGPCR4_REG(base) & AXBS_MGPCR4_AULB_MASK) >> AXBS_MGPCR4_AULB_SHIFT)
#define AXBS_BRD_MGPCR4_AULB(base) (BME_UBFX32(&AXBS_MGPCR4_REG(base), AXBS_MGPCR4_AULB_SHIFT, AXBS_MGPCR4_AULB_WIDTH))

/*! @brief Set the AULB field to a new value. */
#define AXBS_WR_MGPCR4_AULB(base, value) (AXBS_RMW_MGPCR4(base, AXBS_MGPCR4_AULB_MASK, AXBS_MGPCR4_AULB(value)))
#define AXBS_BWR_MGPCR4_AULB(base, value) (BME_BFI32(&AXBS_MGPCR4_REG(base), ((uint32_t)(value) << AXBS_MGPCR4_AULB_SHIFT), AXBS_MGPCR4_AULB_SHIFT, AXBS_MGPCR4_AULB_WIDTH))
/*@}*/

/*
 * MK82F25615 CAU
 *
 * Memory Mapped Cryptographic Acceleration Unit (MMCAU)
 *
 * Registers defined in this header file:
 * - CAU_DIRECT - Direct access register 0
 * - CAU_LDR_CASR - Status register - Load Register command
 * - CAU_LDR_CAA - Accumulator register - Load Register command
 * - CAU_LDR_CA - General Purpose Register 0 - Load Register command
 * - CAU_STR_CASR - Status register - Store Register command
 * - CAU_STR_CAA - Accumulator register - Store Register command
 * - CAU_STR_CA - General Purpose Register 0 - Store Register command
 * - CAU_ADR_CASR - Status register - Add Register command
 * - CAU_ADR_CAA - Accumulator register - Add to register command
 * - CAU_ADR_CA - General Purpose Register 0 - Add to register command
 * - CAU_RADR_CASR - Status register - Reverse and Add to Register command
 * - CAU_RADR_CAA - Accumulator register - Reverse and Add to Register command
 * - CAU_RADR_CA - General Purpose Register 0 - Reverse and Add to Register command
 * - CAU_XOR_CASR - Status register - Exclusive Or command
 * - CAU_XOR_CAA - Accumulator register - Exclusive Or command
 * - CAU_XOR_CA - General Purpose Register 0 - Exclusive Or command
 * - CAU_ROTL_CASR - Status register - Rotate Left command
 * - CAU_ROTL_CAA - Accumulator register - Rotate Left command
 * - CAU_ROTL_CA - General Purpose Register 0 - Rotate Left command
 * - CAU_AESC_CASR - Status register - AES Column Operation command
 * - CAU_AESC_CAA - Accumulator register - AES Column Operation command
 * - CAU_AESC_CA - General Purpose Register 0 - AES Column Operation command
 * - CAU_AESIC_CASR - Status register - AES Inverse Column Operation command
 * - CAU_AESIC_CAA - Accumulator register - AES Inverse Column Operation command
 * - CAU_AESIC_CA - General Purpose Register 0 - AES Inverse Column Operation command
 */

#define CAU_INSTANCE_COUNT (1U) /*!< Number of instances of the CAU module. */
#define CAU_IDX (0U) /*!< Instance number for CAU. */

/*******************************************************************************
 * CAU_DIRECT - Direct access register 0
 ******************************************************************************/

/*!
 * @brief CAU_DIRECT - Direct access register 0 (WO)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire CAU_DIRECT register
 */
/*@{*/
#define CAU_WR_DIRECT(base, index, value) (CAU_DIRECT_REG(base, index) = (value))
/*@}*/

/*******************************************************************************
 * CAU_LDR_CASR - Status register - Load Register command
 ******************************************************************************/

/*!
 * @brief CAU_LDR_CASR - Status register - Load Register command (WO)
 *
 * Reset value: 0x20000000U
 */
/*!
 * @name Constants and macros for entire CAU_LDR_CASR register
 */
/*@{*/
#define CAU_WR_LDR_CASR(base, value) (CAU_LDR_CASR_REG(base) = (value))
/*@}*/

/*
 * Constants & macros for individual CAU_LDR_CASR bitfields
 */

/*!
 * @name Register CAU_LDR_CASR, field IC[0] (WO)
 *
 * Values:
 * - 0b0 - No illegal commands issued
 * - 0b1 - Illegal command issued
 */
/*@{*/
/*! @brief Set the IC field to a new value. */
#define CAU_WR_LDR_CASR_IC(base, value) (CAU_WR_LDR_CASR(base, CAU_LDR_CASR_IC(value)))
#define CAU_BWR_LDR_CASR_IC(base, value) (CAU_WR_LDR_CASR_IC(base, value))
/*@}*/

/*!
 * @name Register CAU_LDR_CASR, field DPE[1] (WO)
 *
 * Values:
 * - 0b0 - No error detected
 * - 0b1 - DES key parity error detected
 */
/*@{*/
/*! @brief Set the DPE field to a new value. */
#define CAU_WR_LDR_CASR_DPE(base, value) (CAU_WR_LDR_CASR(base, CAU_LDR_CASR_DPE(value)))
#define CAU_BWR_LDR_CASR_DPE(base, value) (CAU_WR_LDR_CASR_DPE(base, value))
/*@}*/

/*!
 * @name Register CAU_LDR_CASR, field VER[31:28] (WO)
 *
 * Values:
 * - 0b0001 - Initial CAU version
 * - 0b0010 - Second version, added support for SHA-256 algorithm.(This is the
 *     value on this device)
 */
/*@{*/
/*! @brief Set the VER field to a new value. */
#define CAU_WR_LDR_CASR_VER(base, value) (CAU_WR_LDR_CASR(base, CAU_LDR_CASR_VER(value)))
#define CAU_BWR_LDR_CASR_VER(base, value) (CAU_WR_LDR_CASR_VER(base, value))
/*@}*/

/*******************************************************************************
 * CAU_LDR_CAA - Accumulator register - Load Register command
 ******************************************************************************/

/*!
 * @brief CAU_LDR_CAA - Accumulator register - Load Register command (WO)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire CAU_LDR_CAA register
 */
/*@{*/
#define CAU_WR_LDR_CAA(base, value) (CAU_LDR_CAA_REG(base) = (value))
/*@}*/

/*******************************************************************************
 * CAU_LDR_CA - General Purpose Register 0 - Load Register command
 ******************************************************************************/

/*!
 * @brief CAU_LDR_CA - General Purpose Register 0 - Load Register command (WO)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire CAU_LDR_CA register
 */
/*@{*/
#define CAU_WR_LDR_CA(base, index, value) (CAU_LDR_CA_REG(base, index) = (value))
/*@}*/

/*******************************************************************************
 * CAU_STR_CASR - Status register - Store Register command
 ******************************************************************************/

/*!
 * @brief CAU_STR_CASR - Status register - Store Register command (RO)
 *
 * Reset value: 0x20000000U
 */
/*!
 * @name Constants and macros for entire CAU_STR_CASR register
 */
/*@{*/
#define CAU_RD_STR_CASR(base)    (CAU_STR_CASR_REG(base))
/*@}*/

/*
 * Constants & macros for individual CAU_STR_CASR bitfields
 */

/*!
 * @name Register CAU_STR_CASR, field IC[0] (RO)
 *
 * Values:
 * - 0b0 - No illegal commands issued
 * - 0b1 - Illegal command issued
 */
/*@{*/
/*! @brief Read current value of the CAU_STR_CASR_IC field. */
#define CAU_RD_STR_CASR_IC(base) ((CAU_STR_CASR_REG(base) & CAU_STR_CASR_IC_MASK) >> CAU_STR_CASR_IC_SHIFT)
#define CAU_BRD_STR_CASR_IC(base) (CAU_RD_STR_CASR_IC(base))
/*@}*/

/*!
 * @name Register CAU_STR_CASR, field DPE[1] (RO)
 *
 * Values:
 * - 0b0 - No error detected
 * - 0b1 - DES key parity error detected
 */
/*@{*/
/*! @brief Read current value of the CAU_STR_CASR_DPE field. */
#define CAU_RD_STR_CASR_DPE(base) ((CAU_STR_CASR_REG(base) & CAU_STR_CASR_DPE_MASK) >> CAU_STR_CASR_DPE_SHIFT)
#define CAU_BRD_STR_CASR_DPE(base) (CAU_RD_STR_CASR_DPE(base))
/*@}*/

/*!
 * @name Register CAU_STR_CASR, field VER[31:28] (RO)
 *
 * Values:
 * - 0b0001 - Initial CAU version
 * - 0b0010 - Second version, added support for SHA-256 algorithm.(This is the
 *     value on this device)
 */
/*@{*/
/*! @brief Read current value of the CAU_STR_CASR_VER field. */
#define CAU_RD_STR_CASR_VER(base) ((CAU_STR_CASR_REG(base) & CAU_STR_CASR_VER_MASK) >> CAU_STR_CASR_VER_SHIFT)
#define CAU_BRD_STR_CASR_VER(base) (CAU_RD_STR_CASR_VER(base))
/*@}*/

/*******************************************************************************
 * CAU_STR_CAA - Accumulator register - Store Register command
 ******************************************************************************/

/*!
 * @brief CAU_STR_CAA - Accumulator register - Store Register command (RO)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire CAU_STR_CAA register
 */
/*@{*/
#define CAU_RD_STR_CAA(base)     (CAU_STR_CAA_REG(base))
/*@}*/

/*******************************************************************************
 * CAU_STR_CA - General Purpose Register 0 - Store Register command
 ******************************************************************************/

/*!
 * @brief CAU_STR_CA - General Purpose Register 0 - Store Register command (RO)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire CAU_STR_CA register
 */
/*@{*/
#define CAU_RD_STR_CA(base, index) (CAU_STR_CA_REG(base, index))
/*@}*/

/*******************************************************************************
 * CAU_ADR_CASR - Status register - Add Register command
 ******************************************************************************/

/*!
 * @brief CAU_ADR_CASR - Status register - Add Register command (WO)
 *
 * Reset value: 0x20000000U
 */
/*!
 * @name Constants and macros for entire CAU_ADR_CASR register
 */
/*@{*/
#define CAU_WR_ADR_CASR(base, value) (CAU_ADR_CASR_REG(base) = (value))
/*@}*/

/*
 * Constants & macros for individual CAU_ADR_CASR bitfields
 */

/*!
 * @name Register CAU_ADR_CASR, field IC[0] (WO)
 *
 * Values:
 * - 0b0 - No illegal commands issued
 * - 0b1 - Illegal command issued
 */
/*@{*/
/*! @brief Set the IC field to a new value. */
#define CAU_WR_ADR_CASR_IC(base, value) (CAU_WR_ADR_CASR(base, CAU_ADR_CASR_IC(value)))
#define CAU_BWR_ADR_CASR_IC(base, value) (CAU_WR_ADR_CASR_IC(base, value))
/*@}*/

/*!
 * @name Register CAU_ADR_CASR, field DPE[1] (WO)
 *
 * Values:
 * - 0b0 - No error detected
 * - 0b1 - DES key parity error detected
 */
/*@{*/
/*! @brief Set the DPE field to a new value. */
#define CAU_WR_ADR_CASR_DPE(base, value) (CAU_WR_ADR_CASR(base, CAU_ADR_CASR_DPE(value)))
#define CAU_BWR_ADR_CASR_DPE(base, value) (CAU_WR_ADR_CASR_DPE(base, value))
/*@}*/

/*!
 * @name Register CAU_ADR_CASR, field VER[31:28] (WO)
 *
 * Values:
 * - 0b0001 - Initial CAU version
 * - 0b0010 - Second version, added support for SHA-256 algorithm.(This is the
 *     value on this device)
 */
/*@{*/
/*! @brief Set the VER field to a new value. */
#define CAU_WR_ADR_CASR_VER(base, value) (CAU_WR_ADR_CASR(base, CAU_ADR_CASR_VER(value)))
#define CAU_BWR_ADR_CASR_VER(base, value) (CAU_WR_ADR_CASR_VER(base, value))
/*@}*/

/*******************************************************************************
 * CAU_ADR_CAA - Accumulator register - Add to register command
 ******************************************************************************/

/*!
 * @brief CAU_ADR_CAA - Accumulator register - Add to register command (WO)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire CAU_ADR_CAA register
 */
/*@{*/
#define CAU_WR_ADR_CAA(base, value) (CAU_ADR_CAA_REG(base) = (value))
/*@}*/

/*******************************************************************************
 * CAU_ADR_CA - General Purpose Register 0 - Add to register command
 ******************************************************************************/

/*!
 * @brief CAU_ADR_CA - General Purpose Register 0 - Add to register command (WO)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire CAU_ADR_CA register
 */
/*@{*/
#define CAU_WR_ADR_CA(base, index, value) (CAU_ADR_CA_REG(base, index) = (value))
/*@}*/

/*******************************************************************************
 * CAU_RADR_CASR - Status register - Reverse and Add to Register command
 ******************************************************************************/

/*!
 * @brief CAU_RADR_CASR - Status register - Reverse and Add to Register command (WO)
 *
 * Reset value: 0x20000000U
 */
/*!
 * @name Constants and macros for entire CAU_RADR_CASR register
 */
/*@{*/
#define CAU_WR_RADR_CASR(base, value) (CAU_RADR_CASR_REG(base) = (value))
/*@}*/

/*
 * Constants & macros for individual CAU_RADR_CASR bitfields
 */

/*!
 * @name Register CAU_RADR_CASR, field IC[0] (WO)
 *
 * Values:
 * - 0b0 - No illegal commands issued
 * - 0b1 - Illegal command issued
 */
/*@{*/
/*! @brief Set the IC field to a new value. */
#define CAU_WR_RADR_CASR_IC(base, value) (CAU_WR_RADR_CASR(base, CAU_RADR_CASR_IC(value)))
#define CAU_BWR_RADR_CASR_IC(base, value) (CAU_WR_RADR_CASR_IC(base, value))
/*@}*/

/*!
 * @name Register CAU_RADR_CASR, field DPE[1] (WO)
 *
 * Values:
 * - 0b0 - No error detected
 * - 0b1 - DES key parity error detected
 */
/*@{*/
/*! @brief Set the DPE field to a new value. */
#define CAU_WR_RADR_CASR_DPE(base, value) (CAU_WR_RADR_CASR(base, CAU_RADR_CASR_DPE(value)))
#define CAU_BWR_RADR_CASR_DPE(base, value) (CAU_WR_RADR_CASR_DPE(base, value))
/*@}*/

/*!
 * @name Register CAU_RADR_CASR, field VER[31:28] (WO)
 *
 * Values:
 * - 0b0001 - Initial CAU version
 * - 0b0010 - Second version, added support for SHA-256 algorithm.(This is the
 *     value on this device)
 */
/*@{*/
/*! @brief Set the VER field to a new value. */
#define CAU_WR_RADR_CASR_VER(base, value) (CAU_WR_RADR_CASR(base, CAU_RADR_CASR_VER(value)))
#define CAU_BWR_RADR_CASR_VER(base, value) (CAU_WR_RADR_CASR_VER(base, value))
/*@}*/

/*******************************************************************************
 * CAU_RADR_CAA - Accumulator register - Reverse and Add to Register command
 ******************************************************************************/

/*!
 * @brief CAU_RADR_CAA - Accumulator register - Reverse and Add to Register command (WO)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire CAU_RADR_CAA register
 */
/*@{*/
#define CAU_WR_RADR_CAA(base, value) (CAU_RADR_CAA_REG(base) = (value))
/*@}*/

/*******************************************************************************
 * CAU_RADR_CA - General Purpose Register 0 - Reverse and Add to Register command
 ******************************************************************************/

/*!
 * @brief CAU_RADR_CA - General Purpose Register 0 - Reverse and Add to Register command (WO)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire CAU_RADR_CA register
 */
/*@{*/
#define CAU_WR_RADR_CA(base, index, value) (CAU_RADR_CA_REG(base, index) = (value))
/*@}*/

/*******************************************************************************
 * CAU_XOR_CASR - Status register - Exclusive Or command
 ******************************************************************************/

/*!
 * @brief CAU_XOR_CASR - Status register - Exclusive Or command (WO)
 *
 * Reset value: 0x20000000U
 */
/*!
 * @name Constants and macros for entire CAU_XOR_CASR register
 */
/*@{*/
#define CAU_WR_XOR_CASR(base, value) (CAU_XOR_CASR_REG(base) = (value))
/*@}*/

/*
 * Constants & macros for individual CAU_XOR_CASR bitfields
 */

/*!
 * @name Register CAU_XOR_CASR, field IC[0] (WO)
 *
 * Values:
 * - 0b0 - No illegal commands issued
 * - 0b1 - Illegal command issued
 */
/*@{*/
/*! @brief Set the IC field to a new value. */
#define CAU_WR_XOR_CASR_IC(base, value) (CAU_WR_XOR_CASR(base, CAU_XOR_CASR_IC(value)))
#define CAU_BWR_XOR_CASR_IC(base, value) (CAU_WR_XOR_CASR_IC(base, value))
/*@}*/

/*!
 * @name Register CAU_XOR_CASR, field DPE[1] (WO)
 *
 * Values:
 * - 0b0 - No error detected
 * - 0b1 - DES key parity error detected
 */
/*@{*/
/*! @brief Set the DPE field to a new value. */
#define CAU_WR_XOR_CASR_DPE(base, value) (CAU_WR_XOR_CASR(base, CAU_XOR_CASR_DPE(value)))
#define CAU_BWR_XOR_CASR_DPE(base, value) (CAU_WR_XOR_CASR_DPE(base, value))
/*@}*/

/*!
 * @name Register CAU_XOR_CASR, field VER[31:28] (WO)
 *
 * Values:
 * - 0b0001 - Initial CAU version
 * - 0b0010 - Second version, added support for SHA-256 algorithm.(This is the
 *     value on this device)
 */
/*@{*/
/*! @brief Set the VER field to a new value. */
#define CAU_WR_XOR_CASR_VER(base, value) (CAU_WR_XOR_CASR(base, CAU_XOR_CASR_VER(value)))
#define CAU_BWR_XOR_CASR_VER(base, value) (CAU_WR_XOR_CASR_VER(base, value))
/*@}*/

/*******************************************************************************
 * CAU_XOR_CAA - Accumulator register - Exclusive Or command
 ******************************************************************************/

/*!
 * @brief CAU_XOR_CAA - Accumulator register - Exclusive Or command (WO)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire CAU_XOR_CAA register
 */
/*@{*/
#define CAU_WR_XOR_CAA(base, value) (CAU_XOR_CAA_REG(base) = (value))
/*@}*/

/*******************************************************************************
 * CAU_XOR_CA - General Purpose Register 0 - Exclusive Or command
 ******************************************************************************/

/*!
 * @brief CAU_XOR_CA - General Purpose Register 0 - Exclusive Or command (WO)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire CAU_XOR_CA register
 */
/*@{*/
#define CAU_WR_XOR_CA(base, index, value) (CAU_XOR_CA_REG(base, index) = (value))
/*@}*/

/*******************************************************************************
 * CAU_ROTL_CASR - Status register - Rotate Left command
 ******************************************************************************/

/*!
 * @brief CAU_ROTL_CASR - Status register - Rotate Left command (WO)
 *
 * Reset value: 0x20000000U
 */
/*!
 * @name Constants and macros for entire CAU_ROTL_CASR register
 */
/*@{*/
#define CAU_WR_ROTL_CASR(base, value) (CAU_ROTL_CASR_REG(base) = (value))
/*@}*/

/*
 * Constants & macros for individual CAU_ROTL_CASR bitfields
 */

/*!
 * @name Register CAU_ROTL_CASR, field IC[0] (WO)
 *
 * Values:
 * - 0b0 - No illegal commands issued
 * - 0b1 - Illegal command issued
 */
/*@{*/
/*! @brief Set the IC field to a new value. */
#define CAU_WR_ROTL_CASR_IC(base, value) (CAU_WR_ROTL_CASR(base, CAU_ROTL_CASR_IC(value)))
#define CAU_BWR_ROTL_CASR_IC(base, value) (CAU_WR_ROTL_CASR_IC(base, value))
/*@}*/

/*!
 * @name Register CAU_ROTL_CASR, field DPE[1] (WO)
 *
 * Values:
 * - 0b0 - No error detected
 * - 0b1 - DES key parity error detected
 */
/*@{*/
/*! @brief Set the DPE field to a new value. */
#define CAU_WR_ROTL_CASR_DPE(base, value) (CAU_WR_ROTL_CASR(base, CAU_ROTL_CASR_DPE(value)))
#define CAU_BWR_ROTL_CASR_DPE(base, value) (CAU_WR_ROTL_CASR_DPE(base, value))
/*@}*/

/*!
 * @name Register CAU_ROTL_CASR, field VER[31:28] (WO)
 *
 * Values:
 * - 0b0001 - Initial CAU version
 * - 0b0010 - Second version, added support for SHA-256 algorithm.(This is the
 *     value on this device)
 */
/*@{*/
/*! @brief Set the VER field to a new value. */
#define CAU_WR_ROTL_CASR_VER(base, value) (CAU_WR_ROTL_CASR(base, CAU_ROTL_CASR_VER(value)))
#define CAU_BWR_ROTL_CASR_VER(base, value) (CAU_WR_ROTL_CASR_VER(base, value))
/*@}*/

/*******************************************************************************
 * CAU_ROTL_CAA - Accumulator register - Rotate Left command
 ******************************************************************************/

/*!
 * @brief CAU_ROTL_CAA - Accumulator register - Rotate Left command (WO)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire CAU_ROTL_CAA register
 */
/*@{*/
#define CAU_WR_ROTL_CAA(base, value) (CAU_ROTL_CAA_REG(base) = (value))
/*@}*/

/*******************************************************************************
 * CAU_ROTL_CA - General Purpose Register 0 - Rotate Left command
 ******************************************************************************/

/*!
 * @brief CAU_ROTL_CA - General Purpose Register 0 - Rotate Left command (WO)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire CAU_ROTL_CA register
 */
/*@{*/
#define CAU_WR_ROTL_CA(base, index, value) (CAU_ROTL_CA_REG(base, index) = (value))
/*@}*/

/*******************************************************************************
 * CAU_AESC_CASR - Status register - AES Column Operation command
 ******************************************************************************/

/*!
 * @brief CAU_AESC_CASR - Status register - AES Column Operation command (WO)
 *
 * Reset value: 0x20000000U
 */
/*!
 * @name Constants and macros for entire CAU_AESC_CASR register
 */
/*@{*/
#define CAU_WR_AESC_CASR(base, value) (CAU_AESC_CASR_REG(base) = (value))
/*@}*/

/*
 * Constants & macros for individual CAU_AESC_CASR bitfields
 */

/*!
 * @name Register CAU_AESC_CASR, field IC[0] (WO)
 *
 * Values:
 * - 0b0 - No illegal commands issued
 * - 0b1 - Illegal command issued
 */
/*@{*/
/*! @brief Set the IC field to a new value. */
#define CAU_WR_AESC_CASR_IC(base, value) (CAU_WR_AESC_CASR(base, CAU_AESC_CASR_IC(value)))
#define CAU_BWR_AESC_CASR_IC(base, value) (CAU_WR_AESC_CASR_IC(base, value))
/*@}*/

/*!
 * @name Register CAU_AESC_CASR, field DPE[1] (WO)
 *
 * Values:
 * - 0b0 - No error detected
 * - 0b1 - DES key parity error detected
 */
/*@{*/
/*! @brief Set the DPE field to a new value. */
#define CAU_WR_AESC_CASR_DPE(base, value) (CAU_WR_AESC_CASR(base, CAU_AESC_CASR_DPE(value)))
#define CAU_BWR_AESC_CASR_DPE(base, value) (CAU_WR_AESC_CASR_DPE(base, value))
/*@}*/

/*!
 * @name Register CAU_AESC_CASR, field VER[31:28] (WO)
 *
 * Values:
 * - 0b0001 - Initial CAU version
 * - 0b0010 - Second version, added support for SHA-256 algorithm.(This is the
 *     value on this device)
 */
/*@{*/
/*! @brief Set the VER field to a new value. */
#define CAU_WR_AESC_CASR_VER(base, value) (CAU_WR_AESC_CASR(base, CAU_AESC_CASR_VER(value)))
#define CAU_BWR_AESC_CASR_VER(base, value) (CAU_WR_AESC_CASR_VER(base, value))
/*@}*/

/*******************************************************************************
 * CAU_AESC_CAA - Accumulator register - AES Column Operation command
 ******************************************************************************/

/*!
 * @brief CAU_AESC_CAA - Accumulator register - AES Column Operation command (WO)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire CAU_AESC_CAA register
 */
/*@{*/
#define CAU_WR_AESC_CAA(base, value) (CAU_AESC_CAA_REG(base) = (value))
/*@}*/

/*******************************************************************************
 * CAU_AESC_CA - General Purpose Register 0 - AES Column Operation command
 ******************************************************************************/

/*!
 * @brief CAU_AESC_CA - General Purpose Register 0 - AES Column Operation command (WO)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire CAU_AESC_CA register
 */
/*@{*/
#define CAU_WR_AESC_CA(base, index, value) (CAU_AESC_CA_REG(base, index) = (value))
/*@}*/

/*******************************************************************************
 * CAU_AESIC_CASR - Status register - AES Inverse Column Operation command
 ******************************************************************************/

/*!
 * @brief CAU_AESIC_CASR - Status register - AES Inverse Column Operation command (WO)
 *
 * Reset value: 0x20000000U
 */
/*!
 * @name Constants and macros for entire CAU_AESIC_CASR register
 */
/*@{*/
#define CAU_WR_AESIC_CASR(base, value) (CAU_AESIC_CASR_REG(base) = (value))
/*@}*/

/*
 * Constants & macros for individual CAU_AESIC_CASR bitfields
 */

/*!
 * @name Register CAU_AESIC_CASR, field IC[0] (WO)
 *
 * Values:
 * - 0b0 - No illegal commands issued
 * - 0b1 - Illegal command issued
 */
/*@{*/
/*! @brief Set the IC field to a new value. */
#define CAU_WR_AESIC_CASR_IC(base, value) (CAU_WR_AESIC_CASR(base, CAU_AESIC_CASR_IC(value)))
#define CAU_BWR_AESIC_CASR_IC(base, value) (CAU_WR_AESIC_CASR_IC(base, value))
/*@}*/

/*!
 * @name Register CAU_AESIC_CASR, field DPE[1] (WO)
 *
 * Values:
 * - 0b0 - No error detected
 * - 0b1 - DES key parity error detected
 */
/*@{*/
/*! @brief Set the DPE field to a new value. */
#define CAU_WR_AESIC_CASR_DPE(base, value) (CAU_WR_AESIC_CASR(base, CAU_AESIC_CASR_DPE(value)))
#define CAU_BWR_AESIC_CASR_DPE(base, value) (CAU_WR_AESIC_CASR_DPE(base, value))
/*@}*/

/*!
 * @name Register CAU_AESIC_CASR, field VER[31:28] (WO)
 *
 * Values:
 * - 0b0001 - Initial CAU version
 * - 0b0010 - Second version, added support for SHA-256 algorithm.(This is the
 *     value on this device)
 */
/*@{*/
/*! @brief Set the VER field to a new value. */
#define CAU_WR_AESIC_CASR_VER(base, value) (CAU_WR_AESIC_CASR(base, CAU_AESIC_CASR_VER(value)))
#define CAU_BWR_AESIC_CASR_VER(base, value) (CAU_WR_AESIC_CASR_VER(base, value))
/*@}*/

/*******************************************************************************
 * CAU_AESIC_CAA - Accumulator register - AES Inverse Column Operation command
 ******************************************************************************/

/*!
 * @brief CAU_AESIC_CAA - Accumulator register - AES Inverse Column Operation command (WO)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire CAU_AESIC_CAA register
 */
/*@{*/
#define CAU_WR_AESIC_CAA(base, value) (CAU_AESIC_CAA_REG(base) = (value))
/*@}*/

/*******************************************************************************
 * CAU_AESIC_CA - General Purpose Register 0 - AES Inverse Column Operation command
 ******************************************************************************/

/*!
 * @brief CAU_AESIC_CA - General Purpose Register 0 - AES Inverse Column Operation command (WO)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire CAU_AESIC_CA register
 */
/*@{*/
#define CAU_WR_AESIC_CA(base, index, value) (CAU_AESIC_CA_REG(base, index) = (value))
/*@}*/

/*
 * MK82F25615 CMP
 *
 * High-Speed Comparator (CMP), Voltage Reference (VREF) Digital-to-Analog Converter (DAC), and Analog Mux (ANMUX)
 *
 * Registers defined in this header file:
 * - CMP_CR0 - CMP Control Register 0
 * - CMP_CR1 - CMP Control Register 1
 * - CMP_FPR - CMP Filter Period Register
 * - CMP_SCR - CMP Status and Control Register
 * - CMP_DACCR - DAC Control Register
 * - CMP_MUXCR - MUX Control Register
 */

#define CMP_INSTANCE_COUNT (2U) /*!< Number of instances of the CMP module. */
#define CMP0_IDX (0U) /*!< Instance number for CMP0. */
#define CMP1_IDX (1U) /*!< Instance number for CMP1. */

/*******************************************************************************
 * CMP_CR0 - CMP Control Register 0
 ******************************************************************************/

/*!
 * @brief CMP_CR0 - CMP Control Register 0 (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire CMP_CR0 register
 */
/*@{*/
#define CMP_RD_CR0(base)         (CMP_CR0_REG(base))
#define CMP_WR_CR0(base, value)  (CMP_CR0_REG(base) = (value))
#define CMP_RMW_CR0(base, mask, value) (CMP_WR_CR0(base, (CMP_RD_CR0(base) & ~(mask)) | (value)))
#define CMP_SET_CR0(base, value) (BME_OR8(&CMP_CR0_REG(base), (uint8_t)(value)))
#define CMP_CLR_CR0(base, value) (BME_AND8(&CMP_CR0_REG(base), (uint8_t)(~(value))))
#define CMP_TOG_CR0(base, value) (BME_XOR8(&CMP_CR0_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual CMP_CR0 bitfields
 */

/*!
 * @name Register CMP_CR0, field HYSTCTR[1:0] (RW)
 *
 * Defines the programmable hysteresis level. The hysteresis values associated
 * with each level are device-specific. See the Data Sheet of the device for the
 * exact values.
 *
 * Values:
 * - 0b00 - Level 0
 * - 0b01 - Level 1
 * - 0b10 - Level 2
 * - 0b11 - Level 3
 */
/*@{*/
/*! @brief Read current value of the CMP_CR0_HYSTCTR field. */
#define CMP_RD_CR0_HYSTCTR(base) ((CMP_CR0_REG(base) & CMP_CR0_HYSTCTR_MASK) >> CMP_CR0_HYSTCTR_SHIFT)
#define CMP_BRD_CR0_HYSTCTR(base) (BME_UBFX8(&CMP_CR0_REG(base), CMP_CR0_HYSTCTR_SHIFT, CMP_CR0_HYSTCTR_WIDTH))

/*! @brief Set the HYSTCTR field to a new value. */
#define CMP_WR_CR0_HYSTCTR(base, value) (CMP_RMW_CR0(base, CMP_CR0_HYSTCTR_MASK, CMP_CR0_HYSTCTR(value)))
#define CMP_BWR_CR0_HYSTCTR(base, value) (BME_BFI8(&CMP_CR0_REG(base), ((uint8_t)(value) << CMP_CR0_HYSTCTR_SHIFT), CMP_CR0_HYSTCTR_SHIFT, CMP_CR0_HYSTCTR_WIDTH))
/*@}*/

/*!
 * @name Register CMP_CR0, field FILTER_CNT[6:4] (RW)
 *
 * Represents the number of consecutive samples that must agree prior to the
 * comparator ouput filter accepting a new output state. For information regarding
 * filter programming and latency, see the Functional descriptionThe CMP module
 * can be used to compare two analog input voltages applied to INP and INM. .
 *
 * Values:
 * - 0b000 - Filter is disabled. If SE = 1, then COUT is a logic 0. This is not
 *     a legal state, and is not recommended. If SE = 0, COUT = COUTA.
 * - 0b001 - One sample must agree. The comparator output is simply sampled.
 * - 0b010 - 2 consecutive samples must agree.
 * - 0b011 - 3 consecutive samples must agree.
 * - 0b100 - 4 consecutive samples must agree.
 * - 0b101 - 5 consecutive samples must agree.
 * - 0b110 - 6 consecutive samples must agree.
 * - 0b111 - 7 consecutive samples must agree.
 */
/*@{*/
/*! @brief Read current value of the CMP_CR0_FILTER_CNT field. */
#define CMP_RD_CR0_FILTER_CNT(base) ((CMP_CR0_REG(base) & CMP_CR0_FILTER_CNT_MASK) >> CMP_CR0_FILTER_CNT_SHIFT)
#define CMP_BRD_CR0_FILTER_CNT(base) (BME_UBFX8(&CMP_CR0_REG(base), CMP_CR0_FILTER_CNT_SHIFT, CMP_CR0_FILTER_CNT_WIDTH))

/*! @brief Set the FILTER_CNT field to a new value. */
#define CMP_WR_CR0_FILTER_CNT(base, value) (CMP_RMW_CR0(base, CMP_CR0_FILTER_CNT_MASK, CMP_CR0_FILTER_CNT(value)))
#define CMP_BWR_CR0_FILTER_CNT(base, value) (BME_BFI8(&CMP_CR0_REG(base), ((uint8_t)(value) << CMP_CR0_FILTER_CNT_SHIFT), CMP_CR0_FILTER_CNT_SHIFT, CMP_CR0_FILTER_CNT_WIDTH))
/*@}*/

/*******************************************************************************
 * CMP_CR1 - CMP Control Register 1
 ******************************************************************************/

/*!
 * @brief CMP_CR1 - CMP Control Register 1 (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire CMP_CR1 register
 */
/*@{*/
#define CMP_RD_CR1(base)         (CMP_CR1_REG(base))
#define CMP_WR_CR1(base, value)  (CMP_CR1_REG(base) = (value))
#define CMP_RMW_CR1(base, mask, value) (CMP_WR_CR1(base, (CMP_RD_CR1(base) & ~(mask)) | (value)))
#define CMP_SET_CR1(base, value) (BME_OR8(&CMP_CR1_REG(base), (uint8_t)(value)))
#define CMP_CLR_CR1(base, value) (BME_AND8(&CMP_CR1_REG(base), (uint8_t)(~(value))))
#define CMP_TOG_CR1(base, value) (BME_XOR8(&CMP_CR1_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual CMP_CR1 bitfields
 */

/*!
 * @name Register CMP_CR1, field EN[0] (RW)
 *
 * Enables the Analog Comparator module. When the module is not enabled, it
 * remains in the off state, and consumes no power. When the user selects the same
 * input from analog mux to the positive and negative port, the comparator is
 * disabled automatically.
 *
 * Values:
 * - 0b0 - Analog Comparator is disabled.
 * - 0b1 - Analog Comparator is enabled.
 */
/*@{*/
/*! @brief Read current value of the CMP_CR1_EN field. */
#define CMP_RD_CR1_EN(base)  ((CMP_CR1_REG(base) & CMP_CR1_EN_MASK) >> CMP_CR1_EN_SHIFT)
#define CMP_BRD_CR1_EN(base) (BME_UBFX8(&CMP_CR1_REG(base), CMP_CR1_EN_SHIFT, CMP_CR1_EN_WIDTH))

/*! @brief Set the EN field to a new value. */
#define CMP_WR_CR1_EN(base, value) (CMP_RMW_CR1(base, CMP_CR1_EN_MASK, CMP_CR1_EN(value)))
#define CMP_BWR_CR1_EN(base, value) (BME_BFI8(&CMP_CR1_REG(base), ((uint8_t)(value) << CMP_CR1_EN_SHIFT), CMP_CR1_EN_SHIFT, CMP_CR1_EN_WIDTH))
/*@}*/

/*!
 * @name Register CMP_CR1, field OPE[1] (RW)
 *
 * Values:
 * - 0b0 - CMPO is not available on the associated CMPO output pin. If the
 *     comparator does not own the pin, this field has no effect.
 * - 0b1 - CMPO is available on the associated CMPO output pin. The comparator
 *     output (CMPO) is driven out on the associated CMPO output pin if the
 *     comparator owns the pin. If the comparator does not own the field, this bit has
 *     no effect.
 */
/*@{*/
/*! @brief Read current value of the CMP_CR1_OPE field. */
#define CMP_RD_CR1_OPE(base) ((CMP_CR1_REG(base) & CMP_CR1_OPE_MASK) >> CMP_CR1_OPE_SHIFT)
#define CMP_BRD_CR1_OPE(base) (BME_UBFX8(&CMP_CR1_REG(base), CMP_CR1_OPE_SHIFT, CMP_CR1_OPE_WIDTH))

/*! @brief Set the OPE field to a new value. */
#define CMP_WR_CR1_OPE(base, value) (CMP_RMW_CR1(base, CMP_CR1_OPE_MASK, CMP_CR1_OPE(value)))
#define CMP_BWR_CR1_OPE(base, value) (BME_BFI8(&CMP_CR1_REG(base), ((uint8_t)(value) << CMP_CR1_OPE_SHIFT), CMP_CR1_OPE_SHIFT, CMP_CR1_OPE_WIDTH))
/*@}*/

/*!
 * @name Register CMP_CR1, field COS[2] (RW)
 *
 * Values:
 * - 0b0 - Set the filtered comparator output (CMPO) to equal COUT.
 * - 0b1 - Set the unfiltered comparator output (CMPO) to equal COUTA.
 */
/*@{*/
/*! @brief Read current value of the CMP_CR1_COS field. */
#define CMP_RD_CR1_COS(base) ((CMP_CR1_REG(base) & CMP_CR1_COS_MASK) >> CMP_CR1_COS_SHIFT)
#define CMP_BRD_CR1_COS(base) (BME_UBFX8(&CMP_CR1_REG(base), CMP_CR1_COS_SHIFT, CMP_CR1_COS_WIDTH))

/*! @brief Set the COS field to a new value. */
#define CMP_WR_CR1_COS(base, value) (CMP_RMW_CR1(base, CMP_CR1_COS_MASK, CMP_CR1_COS(value)))
#define CMP_BWR_CR1_COS(base, value) (BME_BFI8(&CMP_CR1_REG(base), ((uint8_t)(value) << CMP_CR1_COS_SHIFT), CMP_CR1_COS_SHIFT, CMP_CR1_COS_WIDTH))
/*@}*/

/*!
 * @name Register CMP_CR1, field INV[3] (RW)
 *
 * Allows selection of the polarity of the analog comparator function. It is
 * also driven to the COUT output, on both the device pin and as SCR[COUT], when
 * OPE=0.
 *
 * Values:
 * - 0b0 - Does not invert the comparator output.
 * - 0b1 - Inverts the comparator output.
 */
/*@{*/
/*! @brief Read current value of the CMP_CR1_INV field. */
#define CMP_RD_CR1_INV(base) ((CMP_CR1_REG(base) & CMP_CR1_INV_MASK) >> CMP_CR1_INV_SHIFT)
#define CMP_BRD_CR1_INV(base) (BME_UBFX8(&CMP_CR1_REG(base), CMP_CR1_INV_SHIFT, CMP_CR1_INV_WIDTH))

/*! @brief Set the INV field to a new value. */
#define CMP_WR_CR1_INV(base, value) (CMP_RMW_CR1(base, CMP_CR1_INV_MASK, CMP_CR1_INV(value)))
#define CMP_BWR_CR1_INV(base, value) (BME_BFI8(&CMP_CR1_REG(base), ((uint8_t)(value) << CMP_CR1_INV_SHIFT), CMP_CR1_INV_SHIFT, CMP_CR1_INV_WIDTH))
/*@}*/

/*!
 * @name Register CMP_CR1, field PMODE[4] (RW)
 *
 * See the electrical specifications table in the device Data Sheet for details.
 *
 * Values:
 * - 0b0 - Low-Speed (LS) Comparison mode selected. In this mode, CMP has slower
 *     output propagation delay and lower current consumption.
 * - 0b1 - High-Speed (HS) Comparison mode selected. In this mode, CMP has
 *     faster output propagation delay and higher current consumption.
 */
/*@{*/
/*! @brief Read current value of the CMP_CR1_PMODE field. */
#define CMP_RD_CR1_PMODE(base) ((CMP_CR1_REG(base) & CMP_CR1_PMODE_MASK) >> CMP_CR1_PMODE_SHIFT)
#define CMP_BRD_CR1_PMODE(base) (BME_UBFX8(&CMP_CR1_REG(base), CMP_CR1_PMODE_SHIFT, CMP_CR1_PMODE_WIDTH))

/*! @brief Set the PMODE field to a new value. */
#define CMP_WR_CR1_PMODE(base, value) (CMP_RMW_CR1(base, CMP_CR1_PMODE_MASK, CMP_CR1_PMODE(value)))
#define CMP_BWR_CR1_PMODE(base, value) (BME_BFI8(&CMP_CR1_REG(base), ((uint8_t)(value) << CMP_CR1_PMODE_SHIFT), CMP_CR1_PMODE_SHIFT, CMP_CR1_PMODE_WIDTH))
/*@}*/

/*!
 * @name Register CMP_CR1, field TRIGM[5] (RW)
 *
 * CMP and DAC are configured to CMP Trigger mode when CMP_CR1[TRIGM] is set to
 * 1. In addition, the CMP should be enabled. If the DAC is to be used as a
 * reference to the CMP, it should also be enabled. CMP Trigger mode depends on an
 * external timer resource to periodically enable the CMP and 6-bit DAC in order to
 * generate a triggered compare. Upon setting TRIGM, the CMP and DAC are placed
 * in a standby state until an external timer resource trigger is received. See
 * the chip configuration for details about the external timer resource.
 *
 * Values:
 * - 0b0 - Trigger mode is disabled.
 * - 0b1 - Trigger mode is enabled.
 */
/*@{*/
/*! @brief Read current value of the CMP_CR1_TRIGM field. */
#define CMP_RD_CR1_TRIGM(base) ((CMP_CR1_REG(base) & CMP_CR1_TRIGM_MASK) >> CMP_CR1_TRIGM_SHIFT)
#define CMP_BRD_CR1_TRIGM(base) (BME_UBFX8(&CMP_CR1_REG(base), CMP_CR1_TRIGM_SHIFT, CMP_CR1_TRIGM_WIDTH))

/*! @brief Set the TRIGM field to a new value. */
#define CMP_WR_CR1_TRIGM(base, value) (CMP_RMW_CR1(base, CMP_CR1_TRIGM_MASK, CMP_CR1_TRIGM(value)))
#define CMP_BWR_CR1_TRIGM(base, value) (BME_BFI8(&CMP_CR1_REG(base), ((uint8_t)(value) << CMP_CR1_TRIGM_SHIFT), CMP_CR1_TRIGM_SHIFT, CMP_CR1_TRIGM_WIDTH))
/*@}*/

/*!
 * @name Register CMP_CR1, field WE[6] (RW)
 *
 * At any given time, either SE or WE can be set. If a write to this register
 * attempts to set both, then SE is set and WE is cleared. However, avoid writing
 * 1s to both field locations because this "11" case is reserved and may change in
 * future implementations.
 *
 * Values:
 * - 0b0 - Windowing mode is not selected.
 * - 0b1 - Windowing mode is selected.
 */
/*@{*/
/*! @brief Read current value of the CMP_CR1_WE field. */
#define CMP_RD_CR1_WE(base)  ((CMP_CR1_REG(base) & CMP_CR1_WE_MASK) >> CMP_CR1_WE_SHIFT)
#define CMP_BRD_CR1_WE(base) (BME_UBFX8(&CMP_CR1_REG(base), CMP_CR1_WE_SHIFT, CMP_CR1_WE_WIDTH))

/*! @brief Set the WE field to a new value. */
#define CMP_WR_CR1_WE(base, value) (CMP_RMW_CR1(base, CMP_CR1_WE_MASK, CMP_CR1_WE(value)))
#define CMP_BWR_CR1_WE(base, value) (BME_BFI8(&CMP_CR1_REG(base), ((uint8_t)(value) << CMP_CR1_WE_SHIFT), CMP_CR1_WE_SHIFT, CMP_CR1_WE_WIDTH))
/*@}*/

/*!
 * @name Register CMP_CR1, field SE[7] (RW)
 *
 * At any given time, either SE or WE can be set. If a write to this register
 * attempts to set both, then SE is set and WE is cleared. However, avoid writing
 * 1s to both field locations because this "11" case is reserved and may change in
 * future implementations.
 *
 * Values:
 * - 0b0 - Sampling mode is not selected.
 * - 0b1 - Sampling mode is selected.
 */
/*@{*/
/*! @brief Read current value of the CMP_CR1_SE field. */
#define CMP_RD_CR1_SE(base)  ((CMP_CR1_REG(base) & CMP_CR1_SE_MASK) >> CMP_CR1_SE_SHIFT)
#define CMP_BRD_CR1_SE(base) (BME_UBFX8(&CMP_CR1_REG(base), CMP_CR1_SE_SHIFT, CMP_CR1_SE_WIDTH))

/*! @brief Set the SE field to a new value. */
#define CMP_WR_CR1_SE(base, value) (CMP_RMW_CR1(base, CMP_CR1_SE_MASK, CMP_CR1_SE(value)))
#define CMP_BWR_CR1_SE(base, value) (BME_BFI8(&CMP_CR1_REG(base), ((uint8_t)(value) << CMP_CR1_SE_SHIFT), CMP_CR1_SE_SHIFT, CMP_CR1_SE_WIDTH))
/*@}*/

/*******************************************************************************
 * CMP_FPR - CMP Filter Period Register
 ******************************************************************************/

/*!
 * @brief CMP_FPR - CMP Filter Period Register (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire CMP_FPR register
 */
/*@{*/
#define CMP_RD_FPR(base)         (CMP_FPR_REG(base))
#define CMP_WR_FPR(base, value)  (CMP_FPR_REG(base) = (value))
#define CMP_RMW_FPR(base, mask, value) (CMP_WR_FPR(base, (CMP_RD_FPR(base) & ~(mask)) | (value)))
#define CMP_SET_FPR(base, value) (BME_OR8(&CMP_FPR_REG(base), (uint8_t)(value)))
#define CMP_CLR_FPR(base, value) (BME_AND8(&CMP_FPR_REG(base), (uint8_t)(~(value))))
#define CMP_TOG_FPR(base, value) (BME_XOR8(&CMP_FPR_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * CMP_SCR - CMP Status and Control Register
 ******************************************************************************/

/*!
 * @brief CMP_SCR - CMP Status and Control Register (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire CMP_SCR register
 */
/*@{*/
#define CMP_RD_SCR(base)         (CMP_SCR_REG(base))
#define CMP_WR_SCR(base, value)  (CMP_SCR_REG(base) = (value))
#define CMP_RMW_SCR(base, mask, value) (CMP_WR_SCR(base, (CMP_RD_SCR(base) & ~(mask)) | (value)))
#define CMP_SET_SCR(base, value) (BME_OR8(&CMP_SCR_REG(base), (uint8_t)(value)))
#define CMP_CLR_SCR(base, value) (BME_AND8(&CMP_SCR_REG(base), (uint8_t)(~(value))))
#define CMP_TOG_SCR(base, value) (BME_XOR8(&CMP_SCR_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual CMP_SCR bitfields
 */

/*!
 * @name Register CMP_SCR, field COUT[0] (RO)
 *
 * Returns the current value of the Analog Comparator output, when read. The
 * field is reset to 0 and will read as CR1[INV] when the Analog Comparator module
 * is disabled, that is, when CR1[EN] = 0. Writes to this field are ignored.
 */
/*@{*/
/*! @brief Read current value of the CMP_SCR_COUT field. */
#define CMP_RD_SCR_COUT(base) ((CMP_SCR_REG(base) & CMP_SCR_COUT_MASK) >> CMP_SCR_COUT_SHIFT)
#define CMP_BRD_SCR_COUT(base) (BME_UBFX8(&CMP_SCR_REG(base), CMP_SCR_COUT_SHIFT, CMP_SCR_COUT_WIDTH))
/*@}*/

/*!
 * @name Register CMP_SCR, field CFF[1] (W1C)
 *
 * Detects a falling-edge on COUT, when set, during normal operation. CFF is
 * cleared by writing 1 to it. During Stop modes, CFF is level sensitive .
 *
 * Values:
 * - 0b0 - Falling-edge on COUT has not been detected.
 * - 0b1 - Falling-edge on COUT has occurred.
 */
/*@{*/
/*! @brief Read current value of the CMP_SCR_CFF field. */
#define CMP_RD_SCR_CFF(base) ((CMP_SCR_REG(base) & CMP_SCR_CFF_MASK) >> CMP_SCR_CFF_SHIFT)
#define CMP_BRD_SCR_CFF(base) (BME_UBFX8(&CMP_SCR_REG(base), CMP_SCR_CFF_SHIFT, CMP_SCR_CFF_WIDTH))

/*! @brief Set the CFF field to a new value. */
#define CMP_WR_SCR_CFF(base, value) (CMP_RMW_SCR(base, (CMP_SCR_CFF_MASK | CMP_SCR_CFR_MASK), CMP_SCR_CFF(value)))
#define CMP_BWR_SCR_CFF(base, value) (BME_BFI8(&CMP_SCR_REG(base), ((uint8_t)(value) << CMP_SCR_CFF_SHIFT), CMP_SCR_CFF_SHIFT, CMP_SCR_CFF_WIDTH))
/*@}*/

/*!
 * @name Register CMP_SCR, field CFR[2] (W1C)
 *
 * Detects a rising-edge on COUT, when set, during normal operation. CFR is
 * cleared by writing 1 to it. During Stop modes, CFR is level sensitive .
 *
 * Values:
 * - 0b0 - Rising-edge on COUT has not been detected.
 * - 0b1 - Rising-edge on COUT has occurred.
 */
/*@{*/
/*! @brief Read current value of the CMP_SCR_CFR field. */
#define CMP_RD_SCR_CFR(base) ((CMP_SCR_REG(base) & CMP_SCR_CFR_MASK) >> CMP_SCR_CFR_SHIFT)
#define CMP_BRD_SCR_CFR(base) (BME_UBFX8(&CMP_SCR_REG(base), CMP_SCR_CFR_SHIFT, CMP_SCR_CFR_WIDTH))

/*! @brief Set the CFR field to a new value. */
#define CMP_WR_SCR_CFR(base, value) (CMP_RMW_SCR(base, (CMP_SCR_CFR_MASK | CMP_SCR_CFF_MASK), CMP_SCR_CFR(value)))
#define CMP_BWR_SCR_CFR(base, value) (BME_BFI8(&CMP_SCR_REG(base), ((uint8_t)(value) << CMP_SCR_CFR_SHIFT), CMP_SCR_CFR_SHIFT, CMP_SCR_CFR_WIDTH))
/*@}*/

/*!
 * @name Register CMP_SCR, field IEF[3] (RW)
 *
 * Enables the CFF interrupt from the CMP. When this field is set, an interrupt
 * will be asserted when CFF is set.
 *
 * Values:
 * - 0b0 - Interrupt is disabled.
 * - 0b1 - Interrupt is enabled.
 */
/*@{*/
/*! @brief Read current value of the CMP_SCR_IEF field. */
#define CMP_RD_SCR_IEF(base) ((CMP_SCR_REG(base) & CMP_SCR_IEF_MASK) >> CMP_SCR_IEF_SHIFT)
#define CMP_BRD_SCR_IEF(base) (BME_UBFX8(&CMP_SCR_REG(base), CMP_SCR_IEF_SHIFT, CMP_SCR_IEF_WIDTH))

/*! @brief Set the IEF field to a new value. */
#define CMP_WR_SCR_IEF(base, value) (CMP_RMW_SCR(base, (CMP_SCR_IEF_MASK | CMP_SCR_CFF_MASK | CMP_SCR_CFR_MASK), CMP_SCR_IEF(value)))
#define CMP_BWR_SCR_IEF(base, value) (BME_BFI8(&CMP_SCR_REG(base), ((uint8_t)(value) << CMP_SCR_IEF_SHIFT), CMP_SCR_IEF_SHIFT, CMP_SCR_IEF_WIDTH))
/*@}*/

/*!
 * @name Register CMP_SCR, field IER[4] (RW)
 *
 * Enables the CFR interrupt from the CMP. When this field is set, an interrupt
 * will be asserted when CFR is set.
 *
 * Values:
 * - 0b0 - Interrupt is disabled.
 * - 0b1 - Interrupt is enabled.
 */
/*@{*/
/*! @brief Read current value of the CMP_SCR_IER field. */
#define CMP_RD_SCR_IER(base) ((CMP_SCR_REG(base) & CMP_SCR_IER_MASK) >> CMP_SCR_IER_SHIFT)
#define CMP_BRD_SCR_IER(base) (BME_UBFX8(&CMP_SCR_REG(base), CMP_SCR_IER_SHIFT, CMP_SCR_IER_WIDTH))

/*! @brief Set the IER field to a new value. */
#define CMP_WR_SCR_IER(base, value) (CMP_RMW_SCR(base, (CMP_SCR_IER_MASK | CMP_SCR_CFF_MASK | CMP_SCR_CFR_MASK), CMP_SCR_IER(value)))
#define CMP_BWR_SCR_IER(base, value) (BME_BFI8(&CMP_SCR_REG(base), ((uint8_t)(value) << CMP_SCR_IER_SHIFT), CMP_SCR_IER_SHIFT, CMP_SCR_IER_WIDTH))
/*@}*/

/*!
 * @name Register CMP_SCR, field DMAEN[6] (RW)
 *
 * Enables the DMA transfer triggered from the CMP module. When this field is
 * set, a DMA request is asserted when CFR or CFF is set.
 *
 * Values:
 * - 0b0 - DMA is disabled.
 * - 0b1 - DMA is enabled.
 */
/*@{*/
/*! @brief Read current value of the CMP_SCR_DMAEN field. */
#define CMP_RD_SCR_DMAEN(base) ((CMP_SCR_REG(base) & CMP_SCR_DMAEN_MASK) >> CMP_SCR_DMAEN_SHIFT)
#define CMP_BRD_SCR_DMAEN(base) (BME_UBFX8(&CMP_SCR_REG(base), CMP_SCR_DMAEN_SHIFT, CMP_SCR_DMAEN_WIDTH))

/*! @brief Set the DMAEN field to a new value. */
#define CMP_WR_SCR_DMAEN(base, value) (CMP_RMW_SCR(base, (CMP_SCR_DMAEN_MASK | CMP_SCR_CFF_MASK | CMP_SCR_CFR_MASK), CMP_SCR_DMAEN(value)))
#define CMP_BWR_SCR_DMAEN(base, value) (BME_BFI8(&CMP_SCR_REG(base), ((uint8_t)(value) << CMP_SCR_DMAEN_SHIFT), CMP_SCR_DMAEN_SHIFT, CMP_SCR_DMAEN_WIDTH))
/*@}*/

/*******************************************************************************
 * CMP_DACCR - DAC Control Register
 ******************************************************************************/

/*!
 * @brief CMP_DACCR - DAC Control Register (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire CMP_DACCR register
 */
/*@{*/
#define CMP_RD_DACCR(base)       (CMP_DACCR_REG(base))
#define CMP_WR_DACCR(base, value) (CMP_DACCR_REG(base) = (value))
#define CMP_RMW_DACCR(base, mask, value) (CMP_WR_DACCR(base, (CMP_RD_DACCR(base) & ~(mask)) | (value)))
#define CMP_SET_DACCR(base, value) (BME_OR8(&CMP_DACCR_REG(base), (uint8_t)(value)))
#define CMP_CLR_DACCR(base, value) (BME_AND8(&CMP_DACCR_REG(base), (uint8_t)(~(value))))
#define CMP_TOG_DACCR(base, value) (BME_XOR8(&CMP_DACCR_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual CMP_DACCR bitfields
 */

/*!
 * @name Register CMP_DACCR, field VOSEL[5:0] (RW)
 *
 * Selects an output voltage from one of 64 distinct levels. DACO = (V in /64) *
 * (VOSEL[5:0] + 1) , so the DACO range is from V in /64 to V in .
 */
/*@{*/
/*! @brief Read current value of the CMP_DACCR_VOSEL field. */
#define CMP_RD_DACCR_VOSEL(base) ((CMP_DACCR_REG(base) & CMP_DACCR_VOSEL_MASK) >> CMP_DACCR_VOSEL_SHIFT)
#define CMP_BRD_DACCR_VOSEL(base) (BME_UBFX8(&CMP_DACCR_REG(base), CMP_DACCR_VOSEL_SHIFT, CMP_DACCR_VOSEL_WIDTH))

/*! @brief Set the VOSEL field to a new value. */
#define CMP_WR_DACCR_VOSEL(base, value) (CMP_RMW_DACCR(base, CMP_DACCR_VOSEL_MASK, CMP_DACCR_VOSEL(value)))
#define CMP_BWR_DACCR_VOSEL(base, value) (BME_BFI8(&CMP_DACCR_REG(base), ((uint8_t)(value) << CMP_DACCR_VOSEL_SHIFT), CMP_DACCR_VOSEL_SHIFT, CMP_DACCR_VOSEL_WIDTH))
/*@}*/

/*!
 * @name Register CMP_DACCR, field VRSEL[6] (RW)
 *
 * Values:
 * - 0b0 - Vin1 is selected as resistor ladder network supply reference.
 * - 0b1 - Vin2 is selected as resistor ladder network supply reference.
 */
/*@{*/
/*! @brief Read current value of the CMP_DACCR_VRSEL field. */
#define CMP_RD_DACCR_VRSEL(base) ((CMP_DACCR_REG(base) & CMP_DACCR_VRSEL_MASK) >> CMP_DACCR_VRSEL_SHIFT)
#define CMP_BRD_DACCR_VRSEL(base) (BME_UBFX8(&CMP_DACCR_REG(base), CMP_DACCR_VRSEL_SHIFT, CMP_DACCR_VRSEL_WIDTH))

/*! @brief Set the VRSEL field to a new value. */
#define CMP_WR_DACCR_VRSEL(base, value) (CMP_RMW_DACCR(base, CMP_DACCR_VRSEL_MASK, CMP_DACCR_VRSEL(value)))
#define CMP_BWR_DACCR_VRSEL(base, value) (BME_BFI8(&CMP_DACCR_REG(base), ((uint8_t)(value) << CMP_DACCR_VRSEL_SHIFT), CMP_DACCR_VRSEL_SHIFT, CMP_DACCR_VRSEL_WIDTH))
/*@}*/

/*!
 * @name Register CMP_DACCR, field DACEN[7] (RW)
 *
 * Enables the DAC. When the DAC is disabled, it is powered down to conserve
 * power.
 *
 * Values:
 * - 0b0 - DAC is disabled.
 * - 0b1 - DAC is enabled.
 */
/*@{*/
/*! @brief Read current value of the CMP_DACCR_DACEN field. */
#define CMP_RD_DACCR_DACEN(base) ((CMP_DACCR_REG(base) & CMP_DACCR_DACEN_MASK) >> CMP_DACCR_DACEN_SHIFT)
#define CMP_BRD_DACCR_DACEN(base) (BME_UBFX8(&CMP_DACCR_REG(base), CMP_DACCR_DACEN_SHIFT, CMP_DACCR_DACEN_WIDTH))

/*! @brief Set the DACEN field to a new value. */
#define CMP_WR_DACCR_DACEN(base, value) (CMP_RMW_DACCR(base, CMP_DACCR_DACEN_MASK, CMP_DACCR_DACEN(value)))
#define CMP_BWR_DACCR_DACEN(base, value) (BME_BFI8(&CMP_DACCR_REG(base), ((uint8_t)(value) << CMP_DACCR_DACEN_SHIFT), CMP_DACCR_DACEN_SHIFT, CMP_DACCR_DACEN_WIDTH))
/*@}*/

/*******************************************************************************
 * CMP_MUXCR - MUX Control Register
 ******************************************************************************/

/*!
 * @brief CMP_MUXCR - MUX Control Register (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire CMP_MUXCR register
 */
/*@{*/
#define CMP_RD_MUXCR(base)       (CMP_MUXCR_REG(base))
#define CMP_WR_MUXCR(base, value) (CMP_MUXCR_REG(base) = (value))
#define CMP_RMW_MUXCR(base, mask, value) (CMP_WR_MUXCR(base, (CMP_RD_MUXCR(base) & ~(mask)) | (value)))
#define CMP_SET_MUXCR(base, value) (BME_OR8(&CMP_MUXCR_REG(base), (uint8_t)(value)))
#define CMP_CLR_MUXCR(base, value) (BME_AND8(&CMP_MUXCR_REG(base), (uint8_t)(~(value))))
#define CMP_TOG_MUXCR(base, value) (BME_XOR8(&CMP_MUXCR_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual CMP_MUXCR bitfields
 */

/*!
 * @name Register CMP_MUXCR, field MSEL[2:0] (RW)
 *
 * Determines which input is selected for the minus input of the comparator. For
 * INx inputs, see CMP, DAC, and ANMUX block diagrams. When an inappropriate
 * operation selects the same input for both muxes, the comparator automatically
 * shuts down to prevent itself from becoming a noise generator.
 *
 * Values:
 * - 0b000 - IN0
 * - 0b001 - IN1
 * - 0b010 - IN2
 * - 0b011 - IN3
 * - 0b100 - IN4
 * - 0b101 - IN5
 * - 0b110 - IN6
 * - 0b111 - IN7
 */
/*@{*/
/*! @brief Read current value of the CMP_MUXCR_MSEL field. */
#define CMP_RD_MUXCR_MSEL(base) ((CMP_MUXCR_REG(base) & CMP_MUXCR_MSEL_MASK) >> CMP_MUXCR_MSEL_SHIFT)
#define CMP_BRD_MUXCR_MSEL(base) (BME_UBFX8(&CMP_MUXCR_REG(base), CMP_MUXCR_MSEL_SHIFT, CMP_MUXCR_MSEL_WIDTH))

/*! @brief Set the MSEL field to a new value. */
#define CMP_WR_MUXCR_MSEL(base, value) (CMP_RMW_MUXCR(base, CMP_MUXCR_MSEL_MASK, CMP_MUXCR_MSEL(value)))
#define CMP_BWR_MUXCR_MSEL(base, value) (BME_BFI8(&CMP_MUXCR_REG(base), ((uint8_t)(value) << CMP_MUXCR_MSEL_SHIFT), CMP_MUXCR_MSEL_SHIFT, CMP_MUXCR_MSEL_WIDTH))
/*@}*/

/*!
 * @name Register CMP_MUXCR, field PSEL[5:3] (RW)
 *
 * Determines which input is selected for the plus input of the comparator. For
 * INx inputs, see CMP, DAC, and ANMUX block diagrams. When an inappropriate
 * operation selects the same input for both muxes, the comparator automatically
 * shuts down to prevent itself from becoming a noise generator.
 *
 * Values:
 * - 0b000 - IN0
 * - 0b001 - IN1
 * - 0b010 - IN2
 * - 0b011 - IN3
 * - 0b100 - IN4
 * - 0b101 - IN5
 * - 0b110 - IN6
 * - 0b111 - IN7
 */
/*@{*/
/*! @brief Read current value of the CMP_MUXCR_PSEL field. */
#define CMP_RD_MUXCR_PSEL(base) ((CMP_MUXCR_REG(base) & CMP_MUXCR_PSEL_MASK) >> CMP_MUXCR_PSEL_SHIFT)
#define CMP_BRD_MUXCR_PSEL(base) (BME_UBFX8(&CMP_MUXCR_REG(base), CMP_MUXCR_PSEL_SHIFT, CMP_MUXCR_PSEL_WIDTH))

/*! @brief Set the PSEL field to a new value. */
#define CMP_WR_MUXCR_PSEL(base, value) (CMP_RMW_MUXCR(base, CMP_MUXCR_PSEL_MASK, CMP_MUXCR_PSEL(value)))
#define CMP_BWR_MUXCR_PSEL(base, value) (BME_BFI8(&CMP_MUXCR_REG(base), ((uint8_t)(value) << CMP_MUXCR_PSEL_SHIFT), CMP_MUXCR_PSEL_SHIFT, CMP_MUXCR_PSEL_WIDTH))
/*@}*/

/*
 * MK82F25615 CMT
 *
 * Carrier Modulator Transmitter
 *
 * Registers defined in this header file:
 * - CMT_CGH1 - CMT Carrier Generator High Data Register 1
 * - CMT_CGL1 - CMT Carrier Generator Low Data Register 1
 * - CMT_CGH2 - CMT Carrier Generator High Data Register 2
 * - CMT_CGL2 - CMT Carrier Generator Low Data Register 2
 * - CMT_OC - CMT Output Control Register
 * - CMT_MSC - CMT Modulator Status and Control Register
 * - CMT_CMD1 - CMT Modulator Data Register Mark High
 * - CMT_CMD2 - CMT Modulator Data Register Mark Low
 * - CMT_CMD3 - CMT Modulator Data Register Space High
 * - CMT_CMD4 - CMT Modulator Data Register Space Low
 * - CMT_PPS - CMT Primary Prescaler Register
 * - CMT_DMA - CMT Direct Memory Access Register
 */

#define CMT_INSTANCE_COUNT (1U) /*!< Number of instances of the CMT module. */
#define CMT_IDX (0U) /*!< Instance number for CMT. */

/*******************************************************************************
 * CMT_CGH1 - CMT Carrier Generator High Data Register 1
 ******************************************************************************/

/*!
 * @brief CMT_CGH1 - CMT Carrier Generator High Data Register 1 (RW)
 *
 * Reset value: 0x00U
 *
 * This data register contains the primary high value for generating the carrier
 * output.
 */
/*!
 * @name Constants and macros for entire CMT_CGH1 register
 */
/*@{*/
#define CMT_RD_CGH1(base)        (CMT_CGH1_REG(base))
#define CMT_WR_CGH1(base, value) (CMT_CGH1_REG(base) = (value))
#define CMT_RMW_CGH1(base, mask, value) (CMT_WR_CGH1(base, (CMT_RD_CGH1(base) & ~(mask)) | (value)))
#define CMT_SET_CGH1(base, value) (BME_OR8(&CMT_CGH1_REG(base), (uint8_t)(value)))
#define CMT_CLR_CGH1(base, value) (BME_AND8(&CMT_CGH1_REG(base), (uint8_t)(~(value))))
#define CMT_TOG_CGH1(base, value) (BME_XOR8(&CMT_CGH1_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * CMT_CGL1 - CMT Carrier Generator Low Data Register 1
 ******************************************************************************/

/*!
 * @brief CMT_CGL1 - CMT Carrier Generator Low Data Register 1 (RW)
 *
 * Reset value: 0x00U
 *
 * This data register contains the primary low value for generating the carrier
 * output.
 */
/*!
 * @name Constants and macros for entire CMT_CGL1 register
 */
/*@{*/
#define CMT_RD_CGL1(base)        (CMT_CGL1_REG(base))
#define CMT_WR_CGL1(base, value) (CMT_CGL1_REG(base) = (value))
#define CMT_RMW_CGL1(base, mask, value) (CMT_WR_CGL1(base, (CMT_RD_CGL1(base) & ~(mask)) | (value)))
#define CMT_SET_CGL1(base, value) (BME_OR8(&CMT_CGL1_REG(base), (uint8_t)(value)))
#define CMT_CLR_CGL1(base, value) (BME_AND8(&CMT_CGL1_REG(base), (uint8_t)(~(value))))
#define CMT_TOG_CGL1(base, value) (BME_XOR8(&CMT_CGL1_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * CMT_CGH2 - CMT Carrier Generator High Data Register 2
 ******************************************************************************/

/*!
 * @brief CMT_CGH2 - CMT Carrier Generator High Data Register 2 (RW)
 *
 * Reset value: 0x00U
 *
 * This data register contains the secondary high value for generating the
 * carrier output.
 */
/*!
 * @name Constants and macros for entire CMT_CGH2 register
 */
/*@{*/
#define CMT_RD_CGH2(base)        (CMT_CGH2_REG(base))
#define CMT_WR_CGH2(base, value) (CMT_CGH2_REG(base) = (value))
#define CMT_RMW_CGH2(base, mask, value) (CMT_WR_CGH2(base, (CMT_RD_CGH2(base) & ~(mask)) | (value)))
#define CMT_SET_CGH2(base, value) (BME_OR8(&CMT_CGH2_REG(base), (uint8_t)(value)))
#define CMT_CLR_CGH2(base, value) (BME_AND8(&CMT_CGH2_REG(base), (uint8_t)(~(value))))
#define CMT_TOG_CGH2(base, value) (BME_XOR8(&CMT_CGH2_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * CMT_CGL2 - CMT Carrier Generator Low Data Register 2
 ******************************************************************************/

/*!
 * @brief CMT_CGL2 - CMT Carrier Generator Low Data Register 2 (RW)
 *
 * Reset value: 0x00U
 *
 * This data register contains the secondary low value for generating the
 * carrier output.
 */
/*!
 * @name Constants and macros for entire CMT_CGL2 register
 */
/*@{*/
#define CMT_RD_CGL2(base)        (CMT_CGL2_REG(base))
#define CMT_WR_CGL2(base, value) (CMT_CGL2_REG(base) = (value))
#define CMT_RMW_CGL2(base, mask, value) (CMT_WR_CGL2(base, (CMT_RD_CGL2(base) & ~(mask)) | (value)))
#define CMT_SET_CGL2(base, value) (BME_OR8(&CMT_CGL2_REG(base), (uint8_t)(value)))
#define CMT_CLR_CGL2(base, value) (BME_AND8(&CMT_CGL2_REG(base), (uint8_t)(~(value))))
#define CMT_TOG_CGL2(base, value) (BME_XOR8(&CMT_CGL2_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * CMT_OC - CMT Output Control Register
 ******************************************************************************/

/*!
 * @brief CMT_OC - CMT Output Control Register (RW)
 *
 * Reset value: 0x00U
 *
 * This register is used to control the IRO signal of the CMT module.
 */
/*!
 * @name Constants and macros for entire CMT_OC register
 */
/*@{*/
#define CMT_RD_OC(base)          (CMT_OC_REG(base))
#define CMT_WR_OC(base, value)   (CMT_OC_REG(base) = (value))
#define CMT_RMW_OC(base, mask, value) (CMT_WR_OC(base, (CMT_RD_OC(base) & ~(mask)) | (value)))
#define CMT_SET_OC(base, value)  (BME_OR8(&CMT_OC_REG(base), (uint8_t)(value)))
#define CMT_CLR_OC(base, value)  (BME_AND8(&CMT_OC_REG(base), (uint8_t)(~(value))))
#define CMT_TOG_OC(base, value)  (BME_XOR8(&CMT_OC_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual CMT_OC bitfields
 */

/*!
 * @name Register CMT_OC, field IROPEN[5] (RW)
 *
 * Enables and disables the IRO signal. When the IRO signal is enabled, it is an
 * output that drives out either the CMT transmitter output or the state of IROL
 * depending on whether MSC[MCGEN] is set or not. Also, the state of output is
 * either inverted or non-inverted, depending on the state of CMTPOL. When the IRO
 * signal is disabled, it is in a high-impedance state and is unable to draw any
 * current. This signal is disabled during reset.
 *
 * Values:
 * - 0b0 - The IRO signal is disabled.
 * - 0b1 - The IRO signal is enabled as output.
 */
/*@{*/
/*! @brief Read current value of the CMT_OC_IROPEN field. */
#define CMT_RD_OC_IROPEN(base) ((CMT_OC_REG(base) & CMT_OC_IROPEN_MASK) >> CMT_OC_IROPEN_SHIFT)
#define CMT_BRD_OC_IROPEN(base) (BME_UBFX8(&CMT_OC_REG(base), CMT_OC_IROPEN_SHIFT, CMT_OC_IROPEN_WIDTH))

/*! @brief Set the IROPEN field to a new value. */
#define CMT_WR_OC_IROPEN(base, value) (CMT_RMW_OC(base, CMT_OC_IROPEN_MASK, CMT_OC_IROPEN(value)))
#define CMT_BWR_OC_IROPEN(base, value) (BME_BFI8(&CMT_OC_REG(base), ((uint8_t)(value) << CMT_OC_IROPEN_SHIFT), CMT_OC_IROPEN_SHIFT, CMT_OC_IROPEN_WIDTH))
/*@}*/

/*!
 * @name Register CMT_OC, field CMTPOL[6] (RW)
 *
 * Controls the polarity of the IRO signal.
 *
 * Values:
 * - 0b0 - The IRO signal is active-low.
 * - 0b1 - The IRO signal is active-high.
 */
/*@{*/
/*! @brief Read current value of the CMT_OC_CMTPOL field. */
#define CMT_RD_OC_CMTPOL(base) ((CMT_OC_REG(base) & CMT_OC_CMTPOL_MASK) >> CMT_OC_CMTPOL_SHIFT)
#define CMT_BRD_OC_CMTPOL(base) (BME_UBFX8(&CMT_OC_REG(base), CMT_OC_CMTPOL_SHIFT, CMT_OC_CMTPOL_WIDTH))

/*! @brief Set the CMTPOL field to a new value. */
#define CMT_WR_OC_CMTPOL(base, value) (CMT_RMW_OC(base, CMT_OC_CMTPOL_MASK, CMT_OC_CMTPOL(value)))
#define CMT_BWR_OC_CMTPOL(base, value) (BME_BFI8(&CMT_OC_REG(base), ((uint8_t)(value) << CMT_OC_CMTPOL_SHIFT), CMT_OC_CMTPOL_SHIFT, CMT_OC_CMTPOL_WIDTH))
/*@}*/

/*!
 * @name Register CMT_OC, field IROL[7] (RW)
 *
 * Reads the state of the IRO latch. Writing to IROL changes the state of the
 * IRO signal when MSC[MCGEN] is cleared and IROPEN is set.
 */
/*@{*/
/*! @brief Read current value of the CMT_OC_IROL field. */
#define CMT_RD_OC_IROL(base) ((CMT_OC_REG(base) & CMT_OC_IROL_MASK) >> CMT_OC_IROL_SHIFT)
#define CMT_BRD_OC_IROL(base) (BME_UBFX8(&CMT_OC_REG(base), CMT_OC_IROL_SHIFT, CMT_OC_IROL_WIDTH))

/*! @brief Set the IROL field to a new value. */
#define CMT_WR_OC_IROL(base, value) (CMT_RMW_OC(base, CMT_OC_IROL_MASK, CMT_OC_IROL(value)))
#define CMT_BWR_OC_IROL(base, value) (BME_BFI8(&CMT_OC_REG(base), ((uint8_t)(value) << CMT_OC_IROL_SHIFT), CMT_OC_IROL_SHIFT, CMT_OC_IROL_WIDTH))
/*@}*/

/*******************************************************************************
 * CMT_MSC - CMT Modulator Status and Control Register
 ******************************************************************************/

/*!
 * @brief CMT_MSC - CMT Modulator Status and Control Register (RW)
 *
 * Reset value: 0x00U
 *
 * This register contains the modulator and carrier generator enable (MCGEN),
 * end of cycle interrupt enable (EOCIE), FSK mode select (FSK), baseband enable
 * (BASE), extended space (EXSPC), prescaler (CMTDIV) bits, and the end of cycle
 * (EOCF) status bit.
 */
/*!
 * @name Constants and macros for entire CMT_MSC register
 */
/*@{*/
#define CMT_RD_MSC(base)         (CMT_MSC_REG(base))
#define CMT_WR_MSC(base, value)  (CMT_MSC_REG(base) = (value))
#define CMT_RMW_MSC(base, mask, value) (CMT_WR_MSC(base, (CMT_RD_MSC(base) & ~(mask)) | (value)))
#define CMT_SET_MSC(base, value) (BME_OR8(&CMT_MSC_REG(base), (uint8_t)(value)))
#define CMT_CLR_MSC(base, value) (BME_AND8(&CMT_MSC_REG(base), (uint8_t)(~(value))))
#define CMT_TOG_MSC(base, value) (BME_XOR8(&CMT_MSC_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual CMT_MSC bitfields
 */

/*!
 * @name Register CMT_MSC, field MCGEN[0] (RW)
 *
 * Setting MCGEN will initialize the carrier generator and modulator and will
 * enable all clocks. When enabled, the carrier generator and modulator will
 * function continuously. When MCGEN is cleared, the current modulator cycle will be
 * allowed to expire before all carrier and modulator clocks are disabled to save
 * power and the modulator output is forced low. To prevent spurious operation,
 * the user should initialize all data and control registers before enabling the
 * system.
 *
 * Values:
 * - 0b0 - Modulator and carrier generator disabled
 * - 0b1 - Modulator and carrier generator enabled
 */
/*@{*/
/*! @brief Read current value of the CMT_MSC_MCGEN field. */
#define CMT_RD_MSC_MCGEN(base) ((CMT_MSC_REG(base) & CMT_MSC_MCGEN_MASK) >> CMT_MSC_MCGEN_SHIFT)
#define CMT_BRD_MSC_MCGEN(base) (BME_UBFX8(&CMT_MSC_REG(base), CMT_MSC_MCGEN_SHIFT, CMT_MSC_MCGEN_WIDTH))

/*! @brief Set the MCGEN field to a new value. */
#define CMT_WR_MSC_MCGEN(base, value) (CMT_RMW_MSC(base, CMT_MSC_MCGEN_MASK, CMT_MSC_MCGEN(value)))
#define CMT_BWR_MSC_MCGEN(base, value) (BME_BFI8(&CMT_MSC_REG(base), ((uint8_t)(value) << CMT_MSC_MCGEN_SHIFT), CMT_MSC_MCGEN_SHIFT, CMT_MSC_MCGEN_WIDTH))
/*@}*/

/*!
 * @name Register CMT_MSC, field EOCIE[1] (RW)
 *
 * Requests to enable a CPU interrupt when EOCF is set if EOCIE is high.
 *
 * Values:
 * - 0b0 - CPU interrupt is disabled.
 * - 0b1 - CPU interrupt is enabled.
 */
/*@{*/
/*! @brief Read current value of the CMT_MSC_EOCIE field. */
#define CMT_RD_MSC_EOCIE(base) ((CMT_MSC_REG(base) & CMT_MSC_EOCIE_MASK) >> CMT_MSC_EOCIE_SHIFT)
#define CMT_BRD_MSC_EOCIE(base) (BME_UBFX8(&CMT_MSC_REG(base), CMT_MSC_EOCIE_SHIFT, CMT_MSC_EOCIE_WIDTH))

/*! @brief Set the EOCIE field to a new value. */
#define CMT_WR_MSC_EOCIE(base, value) (CMT_RMW_MSC(base, CMT_MSC_EOCIE_MASK, CMT_MSC_EOCIE(value)))
#define CMT_BWR_MSC_EOCIE(base, value) (BME_BFI8(&CMT_MSC_REG(base), ((uint8_t)(value) << CMT_MSC_EOCIE_SHIFT), CMT_MSC_EOCIE_SHIFT, CMT_MSC_EOCIE_WIDTH))
/*@}*/

/*!
 * @name Register CMT_MSC, field FSK[2] (RW)
 *
 * Enables FSK operation.
 *
 * Values:
 * - 0b0 - The CMT operates in Time or Baseband mode.
 * - 0b1 - The CMT operates in FSK mode.
 */
/*@{*/
/*! @brief Read current value of the CMT_MSC_FSK field. */
#define CMT_RD_MSC_FSK(base) ((CMT_MSC_REG(base) & CMT_MSC_FSK_MASK) >> CMT_MSC_FSK_SHIFT)
#define CMT_BRD_MSC_FSK(base) (BME_UBFX8(&CMT_MSC_REG(base), CMT_MSC_FSK_SHIFT, CMT_MSC_FSK_WIDTH))

/*! @brief Set the FSK field to a new value. */
#define CMT_WR_MSC_FSK(base, value) (CMT_RMW_MSC(base, CMT_MSC_FSK_MASK, CMT_MSC_FSK(value)))
#define CMT_BWR_MSC_FSK(base, value) (BME_BFI8(&CMT_MSC_REG(base), ((uint8_t)(value) << CMT_MSC_FSK_SHIFT), CMT_MSC_FSK_SHIFT, CMT_MSC_FSK_WIDTH))
/*@}*/

/*!
 * @name Register CMT_MSC, field BASE[3] (RW)
 *
 * When set, BASE disables the carrier generator and forces the carrier output
 * high for generation of baseband protocols. When BASE is cleared, the carrier
 * generator is enabled and the carrier output toggles at the frequency determined
 * by values stored in the carrier data registers. This field is cleared by
 * reset. This field is not double-buffered and must not be written to during a
 * transmission.
 *
 * Values:
 * - 0b0 - Baseband mode is disabled.
 * - 0b1 - Baseband mode is enabled.
 */
/*@{*/
/*! @brief Read current value of the CMT_MSC_BASE field. */
#define CMT_RD_MSC_BASE(base) ((CMT_MSC_REG(base) & CMT_MSC_BASE_MASK) >> CMT_MSC_BASE_SHIFT)
#define CMT_BRD_MSC_BASE(base) (BME_UBFX8(&CMT_MSC_REG(base), CMT_MSC_BASE_SHIFT, CMT_MSC_BASE_WIDTH))

/*! @brief Set the BASE field to a new value. */
#define CMT_WR_MSC_BASE(base, value) (CMT_RMW_MSC(base, CMT_MSC_BASE_MASK, CMT_MSC_BASE(value)))
#define CMT_BWR_MSC_BASE(base, value) (BME_BFI8(&CMT_MSC_REG(base), ((uint8_t)(value) << CMT_MSC_BASE_SHIFT), CMT_MSC_BASE_SHIFT, CMT_MSC_BASE_WIDTH))
/*@}*/

/*!
 * @name Register CMT_MSC, field EXSPC[4] (RW)
 *
 * Enables the extended space operation.
 *
 * Values:
 * - 0b0 - Extended space is disabled.
 * - 0b1 - Extended space is enabled.
 */
/*@{*/
/*! @brief Read current value of the CMT_MSC_EXSPC field. */
#define CMT_RD_MSC_EXSPC(base) ((CMT_MSC_REG(base) & CMT_MSC_EXSPC_MASK) >> CMT_MSC_EXSPC_SHIFT)
#define CMT_BRD_MSC_EXSPC(base) (BME_UBFX8(&CMT_MSC_REG(base), CMT_MSC_EXSPC_SHIFT, CMT_MSC_EXSPC_WIDTH))

/*! @brief Set the EXSPC field to a new value. */
#define CMT_WR_MSC_EXSPC(base, value) (CMT_RMW_MSC(base, CMT_MSC_EXSPC_MASK, CMT_MSC_EXSPC(value)))
#define CMT_BWR_MSC_EXSPC(base, value) (BME_BFI8(&CMT_MSC_REG(base), ((uint8_t)(value) << CMT_MSC_EXSPC_SHIFT), CMT_MSC_EXSPC_SHIFT, CMT_MSC_EXSPC_WIDTH))
/*@}*/

/*!
 * @name Register CMT_MSC, field CMTDIV[6:5] (RW)
 *
 * Causes the CMT to be clocked at the IF signal frequency, or the IF frequency
 * divided by 2 ,4, or 8 . This field must not be changed during a transmission
 * because it is not double-buffered.
 *
 * Values:
 * - 0b00 - IF * 1
 * - 0b01 - IF * 2
 * - 0b10 - IF * 4
 * - 0b11 - IF * 8
 */
/*@{*/
/*! @brief Read current value of the CMT_MSC_CMTDIV field. */
#define CMT_RD_MSC_CMTDIV(base) ((CMT_MSC_REG(base) & CMT_MSC_CMTDIV_MASK) >> CMT_MSC_CMTDIV_SHIFT)
#define CMT_BRD_MSC_CMTDIV(base) (BME_UBFX8(&CMT_MSC_REG(base), CMT_MSC_CMTDIV_SHIFT, CMT_MSC_CMTDIV_WIDTH))

/*! @brief Set the CMTDIV field to a new value. */
#define CMT_WR_MSC_CMTDIV(base, value) (CMT_RMW_MSC(base, CMT_MSC_CMTDIV_MASK, CMT_MSC_CMTDIV(value)))
#define CMT_BWR_MSC_CMTDIV(base, value) (BME_BFI8(&CMT_MSC_REG(base), ((uint8_t)(value) << CMT_MSC_CMTDIV_SHIFT), CMT_MSC_CMTDIV_SHIFT, CMT_MSC_CMTDIV_WIDTH))
/*@}*/

/*!
 * @name Register CMT_MSC, field EOCF[7] (RO)
 *
 * Sets when: The modulator is not currently active and MCGEN is set to begin
 * the initial CMT transmission. At the end of each modulation cycle while MCGEN is
 * set. This is recognized when a match occurs between the contents of the space
 * period register and the down counter. At this time, the counter is
 * initialized with, possibly new contents of the mark period buffer, CMD1 and CMD2, and
 * the space period register is loaded with, possibly new contents of the space
 * period buffer, CMD3 and CMD4. This flag is cleared by reading MSC followed by an
 * access of CMD2 or CMD4, or by the DMA transfer.
 *
 * Values:
 * - 0b0 - End of modulation cycle has not occured since the flag last cleared.
 * - 0b1 - End of modulator cycle has occurred.
 */
/*@{*/
/*! @brief Read current value of the CMT_MSC_EOCF field. */
#define CMT_RD_MSC_EOCF(base) ((CMT_MSC_REG(base) & CMT_MSC_EOCF_MASK) >> CMT_MSC_EOCF_SHIFT)
#define CMT_BRD_MSC_EOCF(base) (BME_UBFX8(&CMT_MSC_REG(base), CMT_MSC_EOCF_SHIFT, CMT_MSC_EOCF_WIDTH))
/*@}*/

/*******************************************************************************
 * CMT_CMD1 - CMT Modulator Data Register Mark High
 ******************************************************************************/

/*!
 * @brief CMT_CMD1 - CMT Modulator Data Register Mark High (RW)
 *
 * Reset value: 0x00U
 *
 * The contents of this register are transferred to the modulator down counter
 * upon the completion of a modulation period.
 */
/*!
 * @name Constants and macros for entire CMT_CMD1 register
 */
/*@{*/
#define CMT_RD_CMD1(base)        (CMT_CMD1_REG(base))
#define CMT_WR_CMD1(base, value) (CMT_CMD1_REG(base) = (value))
#define CMT_RMW_CMD1(base, mask, value) (CMT_WR_CMD1(base, (CMT_RD_CMD1(base) & ~(mask)) | (value)))
#define CMT_SET_CMD1(base, value) (BME_OR8(&CMT_CMD1_REG(base), (uint8_t)(value)))
#define CMT_CLR_CMD1(base, value) (BME_AND8(&CMT_CMD1_REG(base), (uint8_t)(~(value))))
#define CMT_TOG_CMD1(base, value) (BME_XOR8(&CMT_CMD1_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * CMT_CMD2 - CMT Modulator Data Register Mark Low
 ******************************************************************************/

/*!
 * @brief CMT_CMD2 - CMT Modulator Data Register Mark Low (RW)
 *
 * Reset value: 0x00U
 *
 * The contents of this register are transferred to the modulator down counter
 * upon the completion of a modulation period.
 */
/*!
 * @name Constants and macros for entire CMT_CMD2 register
 */
/*@{*/
#define CMT_RD_CMD2(base)        (CMT_CMD2_REG(base))
#define CMT_WR_CMD2(base, value) (CMT_CMD2_REG(base) = (value))
#define CMT_RMW_CMD2(base, mask, value) (CMT_WR_CMD2(base, (CMT_RD_CMD2(base) & ~(mask)) | (value)))
#define CMT_SET_CMD2(base, value) (BME_OR8(&CMT_CMD2_REG(base), (uint8_t)(value)))
#define CMT_CLR_CMD2(base, value) (BME_AND8(&CMT_CMD2_REG(base), (uint8_t)(~(value))))
#define CMT_TOG_CMD2(base, value) (BME_XOR8(&CMT_CMD2_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * CMT_CMD3 - CMT Modulator Data Register Space High
 ******************************************************************************/

/*!
 * @brief CMT_CMD3 - CMT Modulator Data Register Space High (RW)
 *
 * Reset value: 0x00U
 *
 * The contents of this register are transferred to the space period register
 * upon the completion of a modulation period.
 */
/*!
 * @name Constants and macros for entire CMT_CMD3 register
 */
/*@{*/
#define CMT_RD_CMD3(base)        (CMT_CMD3_REG(base))
#define CMT_WR_CMD3(base, value) (CMT_CMD3_REG(base) = (value))
#define CMT_RMW_CMD3(base, mask, value) (CMT_WR_CMD3(base, (CMT_RD_CMD3(base) & ~(mask)) | (value)))
#define CMT_SET_CMD3(base, value) (BME_OR8(&CMT_CMD3_REG(base), (uint8_t)(value)))
#define CMT_CLR_CMD3(base, value) (BME_AND8(&CMT_CMD3_REG(base), (uint8_t)(~(value))))
#define CMT_TOG_CMD3(base, value) (BME_XOR8(&CMT_CMD3_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * CMT_CMD4 - CMT Modulator Data Register Space Low
 ******************************************************************************/

/*!
 * @brief CMT_CMD4 - CMT Modulator Data Register Space Low (RW)
 *
 * Reset value: 0x00U
 *
 * The contents of this register are transferred to the space period register
 * upon the completion of a modulation period.
 */
/*!
 * @name Constants and macros for entire CMT_CMD4 register
 */
/*@{*/
#define CMT_RD_CMD4(base)        (CMT_CMD4_REG(base))
#define CMT_WR_CMD4(base, value) (CMT_CMD4_REG(base) = (value))
#define CMT_RMW_CMD4(base, mask, value) (CMT_WR_CMD4(base, (CMT_RD_CMD4(base) & ~(mask)) | (value)))
#define CMT_SET_CMD4(base, value) (BME_OR8(&CMT_CMD4_REG(base), (uint8_t)(value)))
#define CMT_CLR_CMD4(base, value) (BME_AND8(&CMT_CMD4_REG(base), (uint8_t)(~(value))))
#define CMT_TOG_CMD4(base, value) (BME_XOR8(&CMT_CMD4_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * CMT_PPS - CMT Primary Prescaler Register
 ******************************************************************************/

/*!
 * @brief CMT_PPS - CMT Primary Prescaler Register (RW)
 *
 * Reset value: 0x00U
 *
 * This register is used to set the Primary Prescaler Divider field (PPSDIV).
 */
/*!
 * @name Constants and macros for entire CMT_PPS register
 */
/*@{*/
#define CMT_RD_PPS(base)         (CMT_PPS_REG(base))
#define CMT_WR_PPS(base, value)  (CMT_PPS_REG(base) = (value))
#define CMT_RMW_PPS(base, mask, value) (CMT_WR_PPS(base, (CMT_RD_PPS(base) & ~(mask)) | (value)))
#define CMT_SET_PPS(base, value) (BME_OR8(&CMT_PPS_REG(base), (uint8_t)(value)))
#define CMT_CLR_PPS(base, value) (BME_AND8(&CMT_PPS_REG(base), (uint8_t)(~(value))))
#define CMT_TOG_PPS(base, value) (BME_XOR8(&CMT_PPS_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual CMT_PPS bitfields
 */

/*!
 * @name Register CMT_PPS, field PPSDIV[3:0] (RW)
 *
 * Divides the CMT clock to generate the Intermediate Frequency clock enable to
 * the secondary prescaler.
 *
 * Values:
 * - 0b0000 - Bus clock * 1
 * - 0b0001 - Bus clock * 2
 * - 0b0010 - Bus clock * 3
 * - 0b0011 - Bus clock * 4
 * - 0b0100 - Bus clock * 5
 * - 0b0101 - Bus clock * 6
 * - 0b0110 - Bus clock * 7
 * - 0b0111 - Bus clock * 8
 * - 0b1000 - Bus clock * 9
 * - 0b1001 - Bus clock * 10
 * - 0b1010 - Bus clock * 11
 * - 0b1011 - Bus clock * 12
 * - 0b1100 - Bus clock * 13
 * - 0b1101 - Bus clock * 14
 * - 0b1110 - Bus clock * 15
 * - 0b1111 - Bus clock * 16
 */
/*@{*/
/*! @brief Read current value of the CMT_PPS_PPSDIV field. */
#define CMT_RD_PPS_PPSDIV(base) ((CMT_PPS_REG(base) & CMT_PPS_PPSDIV_MASK) >> CMT_PPS_PPSDIV_SHIFT)
#define CMT_BRD_PPS_PPSDIV(base) (BME_UBFX8(&CMT_PPS_REG(base), CMT_PPS_PPSDIV_SHIFT, CMT_PPS_PPSDIV_WIDTH))

/*! @brief Set the PPSDIV field to a new value. */
#define CMT_WR_PPS_PPSDIV(base, value) (CMT_RMW_PPS(base, CMT_PPS_PPSDIV_MASK, CMT_PPS_PPSDIV(value)))
#define CMT_BWR_PPS_PPSDIV(base, value) (BME_BFI8(&CMT_PPS_REG(base), ((uint8_t)(value) << CMT_PPS_PPSDIV_SHIFT), CMT_PPS_PPSDIV_SHIFT, CMT_PPS_PPSDIV_WIDTH))
/*@}*/

/*******************************************************************************
 * CMT_DMA - CMT Direct Memory Access Register
 ******************************************************************************/

/*!
 * @brief CMT_DMA - CMT Direct Memory Access Register (RW)
 *
 * Reset value: 0x00U
 *
 * This register is used to enable/disable direct memory access (DMA).
 */
/*!
 * @name Constants and macros for entire CMT_DMA register
 */
/*@{*/
#define CMT_RD_DMA(base)         (CMT_DMA_REG(base))
#define CMT_WR_DMA(base, value)  (CMT_DMA_REG(base) = (value))
#define CMT_RMW_DMA(base, mask, value) (CMT_WR_DMA(base, (CMT_RD_DMA(base) & ~(mask)) | (value)))
#define CMT_SET_DMA(base, value) (BME_OR8(&CMT_DMA_REG(base), (uint8_t)(value)))
#define CMT_CLR_DMA(base, value) (BME_AND8(&CMT_DMA_REG(base), (uint8_t)(~(value))))
#define CMT_TOG_DMA(base, value) (BME_XOR8(&CMT_DMA_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual CMT_DMA bitfields
 */

/*!
 * @name Register CMT_DMA, field DMA[0] (RW)
 *
 * Enables the DMA protocol.
 *
 * Values:
 * - 0b0 - DMA transfer request and done are disabled.
 * - 0b1 - DMA transfer request and done are enabled.
 */
/*@{*/
/*! @brief Read current value of the CMT_DMA_DMA field. */
#define CMT_RD_DMA_DMA(base) ((CMT_DMA_REG(base) & CMT_DMA_DMA_MASK) >> CMT_DMA_DMA_SHIFT)
#define CMT_BRD_DMA_DMA(base) (BME_UBFX8(&CMT_DMA_REG(base), CMT_DMA_DMA_SHIFT, CMT_DMA_DMA_WIDTH))

/*! @brief Set the DMA field to a new value. */
#define CMT_WR_DMA_DMA(base, value) (CMT_RMW_DMA(base, CMT_DMA_DMA_MASK, CMT_DMA_DMA(value)))
#define CMT_BWR_DMA_DMA(base, value) (BME_BFI8(&CMT_DMA_REG(base), ((uint8_t)(value) << CMT_DMA_DMA_SHIFT), CMT_DMA_DMA_SHIFT, CMT_DMA_DMA_WIDTH))
/*@}*/

/*
 * MK82F25615 CRC
 *
 * Cyclic Redundancy Check
 *
 * Registers defined in this header file:
 * - CRC_DATAL - CRC_DATAL register.
 * - CRC_DATAH - CRC_DATAH register.
 * - CRC_DATALL - CRC_DATALL register.
 * - CRC_DATALU - CRC_DATALU register.
 * - CRC_DATAHL - CRC_DATAHL register.
 * - CRC_DATAHU - CRC_DATAHU register.
 * - CRC_DATA - CRC Data register
 * - CRC_GPOLY - CRC Polynomial register
 * - CRC_GPOLYL - CRC_GPOLYL register.
 * - CRC_GPOLYH - CRC_GPOLYH register.
 * - CRC_GPOLYLL - CRC_GPOLYLL register.
 * - CRC_GPOLYLU - CRC_GPOLYLU register.
 * - CRC_GPOLYHL - CRC_GPOLYHL register.
 * - CRC_GPOLYHU - CRC_GPOLYHU register.
 * - CRC_CTRL - CRC Control register
 * - CRC_CTRLHU - CRC_CTRLHU register.
 */

#define CRC_INSTANCE_COUNT (1U) /*!< Number of instances of the CRC module. */
#define CRC_IDX (0U) /*!< Instance number for CRC. */

/*******************************************************************************
 * CRC_DATALL - CRC_DATALL register.
 ******************************************************************************/

/*!
 * @brief CRC_DATALL - CRC_DATALL register. (RW)
 *
 * Reset value: 0xFFU
 */
/*!
 * @name Constants and macros for entire CRC_DATALL register
 */
/*@{*/
#define CRC_RD_DATALL(base)      (CRC_DATALL_REG(base))
#define CRC_WR_DATALL(base, value) (CRC_DATALL_REG(base) = (value))
#define CRC_RMW_DATALL(base, mask, value) (CRC_WR_DATALL(base, (CRC_RD_DATALL(base) & ~(mask)) | (value)))
#define CRC_SET_DATALL(base, value) (BME_OR8(&CRC_DATALL_REG(base), (uint8_t)(value)))
#define CRC_CLR_DATALL(base, value) (BME_AND8(&CRC_DATALL_REG(base), (uint8_t)(~(value))))
#define CRC_TOG_DATALL(base, value) (BME_XOR8(&CRC_DATALL_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * CRC_DATAL - CRC_DATAL register.
 ******************************************************************************/

/*!
 * @brief CRC_DATAL - CRC_DATAL register. (RW)
 *
 * Reset value: 0xFFFFU
 */
/*!
 * @name Constants and macros for entire CRC_DATAL register
 */
/*@{*/
#define CRC_RD_DATAL(base)       (CRC_DATAL_REG(base))
#define CRC_WR_DATAL(base, value) (CRC_DATAL_REG(base) = (value))
#define CRC_RMW_DATAL(base, mask, value) (CRC_WR_DATAL(base, (CRC_RD_DATAL(base) & ~(mask)) | (value)))
#define CRC_SET_DATAL(base, value) (BME_OR16(&CRC_DATAL_REG(base), (uint16_t)(value)))
#define CRC_CLR_DATAL(base, value) (BME_AND16(&CRC_DATAL_REG(base), (uint16_t)(~(value))))
#define CRC_TOG_DATAL(base, value) (BME_XOR16(&CRC_DATAL_REG(base), (uint16_t)(value)))
/*@}*/

/*******************************************************************************
 * CRC_DATA - CRC Data register
 ******************************************************************************/

/*!
 * @brief CRC_DATA - CRC Data register (RW)
 *
 * Reset value: 0xFFFFFFFFU
 *
 * The CRC Data register contains the value of the seed, data, and checksum.
 * When CTRL[WAS] is set, any write to the data register is regarded as the seed
 * value. When CTRL[WAS] is cleared, any write to the data register is regarded as
 * data for general CRC computation. In 16-bit CRC mode, the HU and HL fields are
 * not used for programming the seed value, and reads of these fields return an
 * indeterminate value. In 32-bit CRC mode, all fields are used for programming
 * the seed value. When programming data values, the values can be written 8 bits,
 * 16 bits, or 32 bits at a time, provided all bytes are contiguous; with MSB of
 * data value written first. After all data values are written, the CRC result
 * can be read from this data register. In 16-bit CRC mode, the CRC result is
 * available in the LU and LL fields. In 32-bit CRC mode, all fields contain the
 * result. Reads of this register at any time return the intermediate CRC value,
 * provided the CRC module is configured.
 */
/*!
 * @name Constants and macros for entire CRC_DATA register
 */
/*@{*/
#define CRC_RD_DATA(base)        (CRC_DATA_REG(base))
#define CRC_WR_DATA(base, value) (CRC_DATA_REG(base) = (value))
#define CRC_RMW_DATA(base, mask, value) (CRC_WR_DATA(base, (CRC_RD_DATA(base) & ~(mask)) | (value)))
#define CRC_SET_DATA(base, value) (BME_OR32(&CRC_DATA_REG(base), (uint32_t)(value)))
#define CRC_CLR_DATA(base, value) (BME_AND32(&CRC_DATA_REG(base), (uint32_t)(~(value))))
#define CRC_TOG_DATA(base, value) (BME_XOR32(&CRC_DATA_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual CRC_DATA bitfields
 */

/*!
 * @name Register CRC_DATA, field LL[7:0] (RW)
 *
 * When CTRL[WAS] is 1, values written to this field are part of the seed value.
 * When CTRL[WAS] is 0, data written to this field is used for CRC checksum
 * generation.
 */
/*@{*/
/*! @brief Read current value of the CRC_DATA_LL field. */
#define CRC_RD_DATA_LL(base) ((CRC_DATA_REG(base) & CRC_DATA_LL_MASK) >> CRC_DATA_LL_SHIFT)
#define CRC_BRD_DATA_LL(base) (BME_UBFX32(&CRC_DATA_REG(base), CRC_DATA_LL_SHIFT, CRC_DATA_LL_WIDTH))

/*! @brief Set the LL field to a new value. */
#define CRC_WR_DATA_LL(base, value) (CRC_RMW_DATA(base, CRC_DATA_LL_MASK, CRC_DATA_LL(value)))
#define CRC_BWR_DATA_LL(base, value) (BME_BFI32(&CRC_DATA_REG(base), ((uint32_t)(value) << CRC_DATA_LL_SHIFT), CRC_DATA_LL_SHIFT, CRC_DATA_LL_WIDTH))
/*@}*/

/*!
 * @name Register CRC_DATA, field LU[15:8] (RW)
 *
 * When CTRL[WAS] is 1, values written to this field are part of the seed value.
 * When CTRL[WAS] is 0, data written to this field is used for CRC checksum
 * generation.
 */
/*@{*/
/*! @brief Read current value of the CRC_DATA_LU field. */
#define CRC_RD_DATA_LU(base) ((CRC_DATA_REG(base) & CRC_DATA_LU_MASK) >> CRC_DATA_LU_SHIFT)
#define CRC_BRD_DATA_LU(base) (BME_UBFX32(&CRC_DATA_REG(base), CRC_DATA_LU_SHIFT, CRC_DATA_LU_WIDTH))

/*! @brief Set the LU field to a new value. */
#define CRC_WR_DATA_LU(base, value) (CRC_RMW_DATA(base, CRC_DATA_LU_MASK, CRC_DATA_LU(value)))
#define CRC_BWR_DATA_LU(base, value) (BME_BFI32(&CRC_DATA_REG(base), ((uint32_t)(value) << CRC_DATA_LU_SHIFT), CRC_DATA_LU_SHIFT, CRC_DATA_LU_WIDTH))
/*@}*/

/*!
 * @name Register CRC_DATA, field HL[23:16] (RW)
 *
 * In 16-bit CRC mode (CTRL[TCRC] is 0), this field is not used for programming
 * a seed value. In 32-bit CRC mode (CTRL[TCRC] is 1), values written to this
 * field are part of the seed value when CTRL[WAS] is 1. When CTRL[WAS] is 0, data
 * written to this field is used for CRC checksum generation in both 16-bit and
 * 32-bit CRC modes.
 */
/*@{*/
/*! @brief Read current value of the CRC_DATA_HL field. */
#define CRC_RD_DATA_HL(base) ((CRC_DATA_REG(base) & CRC_DATA_HL_MASK) >> CRC_DATA_HL_SHIFT)
#define CRC_BRD_DATA_HL(base) (BME_UBFX32(&CRC_DATA_REG(base), CRC_DATA_HL_SHIFT, CRC_DATA_HL_WIDTH))

/*! @brief Set the HL field to a new value. */
#define CRC_WR_DATA_HL(base, value) (CRC_RMW_DATA(base, CRC_DATA_HL_MASK, CRC_DATA_HL(value)))
#define CRC_BWR_DATA_HL(base, value) (BME_BFI32(&CRC_DATA_REG(base), ((uint32_t)(value) << CRC_DATA_HL_SHIFT), CRC_DATA_HL_SHIFT, CRC_DATA_HL_WIDTH))
/*@}*/

/*!
 * @name Register CRC_DATA, field HU[31:24] (RW)
 *
 * In 16-bit CRC mode (CTRL[TCRC] is 0), this field is not used for programming
 * a seed value. In 32-bit CRC mode (CTRL[TCRC] is 1), values written to this
 * field are part of the seed value when CTRL[WAS] is 1. When CTRL[WAS] is 0, data
 * written to this field is used for CRC checksum generation in both 16-bit and
 * 32-bit CRC modes.
 */
/*@{*/
/*! @brief Read current value of the CRC_DATA_HU field. */
#define CRC_RD_DATA_HU(base) ((CRC_DATA_REG(base) & CRC_DATA_HU_MASK) >> CRC_DATA_HU_SHIFT)
#define CRC_BRD_DATA_HU(base) (BME_UBFX32(&CRC_DATA_REG(base), CRC_DATA_HU_SHIFT, CRC_DATA_HU_WIDTH))

/*! @brief Set the HU field to a new value. */
#define CRC_WR_DATA_HU(base, value) (CRC_RMW_DATA(base, CRC_DATA_HU_MASK, CRC_DATA_HU(value)))
#define CRC_BWR_DATA_HU(base, value) (BME_BFI32(&CRC_DATA_REG(base), ((uint32_t)(value) << CRC_DATA_HU_SHIFT), CRC_DATA_HU_SHIFT, CRC_DATA_HU_WIDTH))
/*@}*/

/*******************************************************************************
 * CRC_DATALU - CRC_DATALU register.
 ******************************************************************************/

/*!
 * @brief CRC_DATALU - CRC_DATALU register. (RW)
 *
 * Reset value: 0xFFU
 */
/*!
 * @name Constants and macros for entire CRC_DATALU register
 */
/*@{*/
#define CRC_RD_DATALU(base)      (CRC_DATALU_REG(base))
#define CRC_WR_DATALU(base, value) (CRC_DATALU_REG(base) = (value))
#define CRC_RMW_DATALU(base, mask, value) (CRC_WR_DATALU(base, (CRC_RD_DATALU(base) & ~(mask)) | (value)))
#define CRC_SET_DATALU(base, value) (BME_OR8(&CRC_DATALU_REG(base), (uint8_t)(value)))
#define CRC_CLR_DATALU(base, value) (BME_AND8(&CRC_DATALU_REG(base), (uint8_t)(~(value))))
#define CRC_TOG_DATALU(base, value) (BME_XOR8(&CRC_DATALU_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * CRC_DATAHL - CRC_DATAHL register.
 ******************************************************************************/

/*!
 * @brief CRC_DATAHL - CRC_DATAHL register. (RW)
 *
 * Reset value: 0xFFU
 */
/*!
 * @name Constants and macros for entire CRC_DATAHL register
 */
/*@{*/
#define CRC_RD_DATAHL(base)      (CRC_DATAHL_REG(base))
#define CRC_WR_DATAHL(base, value) (CRC_DATAHL_REG(base) = (value))
#define CRC_RMW_DATAHL(base, mask, value) (CRC_WR_DATAHL(base, (CRC_RD_DATAHL(base) & ~(mask)) | (value)))
#define CRC_SET_DATAHL(base, value) (BME_OR8(&CRC_DATAHL_REG(base), (uint8_t)(value)))
#define CRC_CLR_DATAHL(base, value) (BME_AND8(&CRC_DATAHL_REG(base), (uint8_t)(~(value))))
#define CRC_TOG_DATAHL(base, value) (BME_XOR8(&CRC_DATAHL_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * CRC_DATAH - CRC_DATAH register.
 ******************************************************************************/

/*!
 * @brief CRC_DATAH - CRC_DATAH register. (RW)
 *
 * Reset value: 0xFFFFU
 */
/*!
 * @name Constants and macros for entire CRC_DATAH register
 */
/*@{*/
#define CRC_RD_DATAH(base)       (CRC_DATAH_REG(base))
#define CRC_WR_DATAH(base, value) (CRC_DATAH_REG(base) = (value))
#define CRC_RMW_DATAH(base, mask, value) (CRC_WR_DATAH(base, (CRC_RD_DATAH(base) & ~(mask)) | (value)))
#define CRC_SET_DATAH(base, value) (BME_OR16(&CRC_DATAH_REG(base), (uint16_t)(value)))
#define CRC_CLR_DATAH(base, value) (BME_AND16(&CRC_DATAH_REG(base), (uint16_t)(~(value))))
#define CRC_TOG_DATAH(base, value) (BME_XOR16(&CRC_DATAH_REG(base), (uint16_t)(value)))
/*@}*/

/*******************************************************************************
 * CRC_DATAHU - CRC_DATAHU register.
 ******************************************************************************/

/*!
 * @brief CRC_DATAHU - CRC_DATAHU register. (RW)
 *
 * Reset value: 0xFFU
 */
/*!
 * @name Constants and macros for entire CRC_DATAHU register
 */
/*@{*/
#define CRC_RD_DATAHU(base)      (CRC_DATAHU_REG(base))
#define CRC_WR_DATAHU(base, value) (CRC_DATAHU_REG(base) = (value))
#define CRC_RMW_DATAHU(base, mask, value) (CRC_WR_DATAHU(base, (CRC_RD_DATAHU(base) & ~(mask)) | (value)))
#define CRC_SET_DATAHU(base, value) (BME_OR8(&CRC_DATAHU_REG(base), (uint8_t)(value)))
#define CRC_CLR_DATAHU(base, value) (BME_AND8(&CRC_DATAHU_REG(base), (uint8_t)(~(value))))
#define CRC_TOG_DATAHU(base, value) (BME_XOR8(&CRC_DATAHU_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * CRC_GPOLYLL - CRC_GPOLYLL register.
 ******************************************************************************/

/*!
 * @brief CRC_GPOLYLL - CRC_GPOLYLL register. (RW)
 *
 * Reset value: 0xFFU
 */
/*!
 * @name Constants and macros for entire CRC_GPOLYLL register
 */
/*@{*/
#define CRC_RD_GPOLYLL(base)     (CRC_GPOLYLL_REG(base))
#define CRC_WR_GPOLYLL(base, value) (CRC_GPOLYLL_REG(base) = (value))
#define CRC_RMW_GPOLYLL(base, mask, value) (CRC_WR_GPOLYLL(base, (CRC_RD_GPOLYLL(base) & ~(mask)) | (value)))
#define CRC_SET_GPOLYLL(base, value) (BME_OR8(&CRC_GPOLYLL_REG(base), (uint8_t)(value)))
#define CRC_CLR_GPOLYLL(base, value) (BME_AND8(&CRC_GPOLYLL_REG(base), (uint8_t)(~(value))))
#define CRC_TOG_GPOLYLL(base, value) (BME_XOR8(&CRC_GPOLYLL_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * CRC_GPOLY - CRC Polynomial register
 ******************************************************************************/

/*!
 * @brief CRC_GPOLY - CRC Polynomial register (RW)
 *
 * Reset value: 0x00001021U
 *
 * This register contains the value of the polynomial for the CRC calculation.
 * The HIGH field contains the upper 16 bits of the CRC polynomial, which are used
 * only in 32-bit CRC mode. Writes to the HIGH field are ignored in 16-bit CRC
 * mode. The LOW field contains the lower 16 bits of the CRC polynomial, which are
 * used in both 16- and 32-bit CRC modes.
 */
/*!
 * @name Constants and macros for entire CRC_GPOLY register
 */
/*@{*/
#define CRC_RD_GPOLY(base)       (CRC_GPOLY_REG(base))
#define CRC_WR_GPOLY(base, value) (CRC_GPOLY_REG(base) = (value))
#define CRC_RMW_GPOLY(base, mask, value) (CRC_WR_GPOLY(base, (CRC_RD_GPOLY(base) & ~(mask)) | (value)))
#define CRC_SET_GPOLY(base, value) (BME_OR32(&CRC_GPOLY_REG(base), (uint32_t)(value)))
#define CRC_CLR_GPOLY(base, value) (BME_AND32(&CRC_GPOLY_REG(base), (uint32_t)(~(value))))
#define CRC_TOG_GPOLY(base, value) (BME_XOR32(&CRC_GPOLY_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual CRC_GPOLY bitfields
 */

/*!
 * @name Register CRC_GPOLY, field LOW[15:0] (RW)
 *
 * Writable and readable in both 32-bit and 16-bit CRC modes.
 */
/*@{*/
/*! @brief Read current value of the CRC_GPOLY_LOW field. */
#define CRC_RD_GPOLY_LOW(base) ((CRC_GPOLY_REG(base) & CRC_GPOLY_LOW_MASK) >> CRC_GPOLY_LOW_SHIFT)
#define CRC_BRD_GPOLY_LOW(base) (CRC_RD_GPOLY_LOW(base))

/*! @brief Set the LOW field to a new value. */
#define CRC_WR_GPOLY_LOW(base, value) (CRC_RMW_GPOLY(base, CRC_GPOLY_LOW_MASK, CRC_GPOLY_LOW(value)))
#define CRC_BWR_GPOLY_LOW(base, value) (CRC_WR_GPOLY_LOW(base, value))
/*@}*/

/*!
 * @name Register CRC_GPOLY, field HIGH[31:16] (RW)
 *
 * Writable and readable in 32-bit CRC mode (CTRL[TCRC] is 1). This field is not
 * writable in 16-bit CRC mode (CTRL[TCRC] is 0).
 */
/*@{*/
/*! @brief Read current value of the CRC_GPOLY_HIGH field. */
#define CRC_RD_GPOLY_HIGH(base) ((CRC_GPOLY_REG(base) & CRC_GPOLY_HIGH_MASK) >> CRC_GPOLY_HIGH_SHIFT)
#define CRC_BRD_GPOLY_HIGH(base) (CRC_RD_GPOLY_HIGH(base))

/*! @brief Set the HIGH field to a new value. */
#define CRC_WR_GPOLY_HIGH(base, value) (CRC_RMW_GPOLY(base, CRC_GPOLY_HIGH_MASK, CRC_GPOLY_HIGH(value)))
#define CRC_BWR_GPOLY_HIGH(base, value) (CRC_WR_GPOLY_HIGH(base, value))
/*@}*/

/*******************************************************************************
 * CRC_GPOLYL - CRC_GPOLYL register.
 ******************************************************************************/

/*!
 * @brief CRC_GPOLYL - CRC_GPOLYL register. (RW)
 *
 * Reset value: 0xFFFFU
 */
/*!
 * @name Constants and macros for entire CRC_GPOLYL register
 */
/*@{*/
#define CRC_RD_GPOLYL(base)      (CRC_GPOLYL_REG(base))
#define CRC_WR_GPOLYL(base, value) (CRC_GPOLYL_REG(base) = (value))
#define CRC_RMW_GPOLYL(base, mask, value) (CRC_WR_GPOLYL(base, (CRC_RD_GPOLYL(base) & ~(mask)) | (value)))
#define CRC_SET_GPOLYL(base, value) (BME_OR16(&CRC_GPOLYL_REG(base), (uint16_t)(value)))
#define CRC_CLR_GPOLYL(base, value) (BME_AND16(&CRC_GPOLYL_REG(base), (uint16_t)(~(value))))
#define CRC_TOG_GPOLYL(base, value) (BME_XOR16(&CRC_GPOLYL_REG(base), (uint16_t)(value)))
/*@}*/

/*******************************************************************************
 * CRC_GPOLYLU - CRC_GPOLYLU register.
 ******************************************************************************/

/*!
 * @brief CRC_GPOLYLU - CRC_GPOLYLU register. (RW)
 *
 * Reset value: 0xFFU
 */
/*!
 * @name Constants and macros for entire CRC_GPOLYLU register
 */
/*@{*/
#define CRC_RD_GPOLYLU(base)     (CRC_GPOLYLU_REG(base))
#define CRC_WR_GPOLYLU(base, value) (CRC_GPOLYLU_REG(base) = (value))
#define CRC_RMW_GPOLYLU(base, mask, value) (CRC_WR_GPOLYLU(base, (CRC_RD_GPOLYLU(base) & ~(mask)) | (value)))
#define CRC_SET_GPOLYLU(base, value) (BME_OR8(&CRC_GPOLYLU_REG(base), (uint8_t)(value)))
#define CRC_CLR_GPOLYLU(base, value) (BME_AND8(&CRC_GPOLYLU_REG(base), (uint8_t)(~(value))))
#define CRC_TOG_GPOLYLU(base, value) (BME_XOR8(&CRC_GPOLYLU_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * CRC_GPOLYH - CRC_GPOLYH register.
 ******************************************************************************/

/*!
 * @brief CRC_GPOLYH - CRC_GPOLYH register. (RW)
 *
 * Reset value: 0xFFFFU
 */
/*!
 * @name Constants and macros for entire CRC_GPOLYH register
 */
/*@{*/
#define CRC_RD_GPOLYH(base)      (CRC_GPOLYH_REG(base))
#define CRC_WR_GPOLYH(base, value) (CRC_GPOLYH_REG(base) = (value))
#define CRC_RMW_GPOLYH(base, mask, value) (CRC_WR_GPOLYH(base, (CRC_RD_GPOLYH(base) & ~(mask)) | (value)))
#define CRC_SET_GPOLYH(base, value) (BME_OR16(&CRC_GPOLYH_REG(base), (uint16_t)(value)))
#define CRC_CLR_GPOLYH(base, value) (BME_AND16(&CRC_GPOLYH_REG(base), (uint16_t)(~(value))))
#define CRC_TOG_GPOLYH(base, value) (BME_XOR16(&CRC_GPOLYH_REG(base), (uint16_t)(value)))
/*@}*/

/*******************************************************************************
 * CRC_GPOLYHL - CRC_GPOLYHL register.
 ******************************************************************************/

/*!
 * @brief CRC_GPOLYHL - CRC_GPOLYHL register. (RW)
 *
 * Reset value: 0xFFU
 */
/*!
 * @name Constants and macros for entire CRC_GPOLYHL register
 */
/*@{*/
#define CRC_RD_GPOLYHL(base)     (CRC_GPOLYHL_REG(base))
#define CRC_WR_GPOLYHL(base, value) (CRC_GPOLYHL_REG(base) = (value))
#define CRC_RMW_GPOLYHL(base, mask, value) (CRC_WR_GPOLYHL(base, (CRC_RD_GPOLYHL(base) & ~(mask)) | (value)))
#define CRC_SET_GPOLYHL(base, value) (BME_OR8(&CRC_GPOLYHL_REG(base), (uint8_t)(value)))
#define CRC_CLR_GPOLYHL(base, value) (BME_AND8(&CRC_GPOLYHL_REG(base), (uint8_t)(~(value))))
#define CRC_TOG_GPOLYHL(base, value) (BME_XOR8(&CRC_GPOLYHL_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * CRC_GPOLYHU - CRC_GPOLYHU register.
 ******************************************************************************/

/*!
 * @brief CRC_GPOLYHU - CRC_GPOLYHU register. (RW)
 *
 * Reset value: 0xFFU
 */
/*!
 * @name Constants and macros for entire CRC_GPOLYHU register
 */
/*@{*/
#define CRC_RD_GPOLYHU(base)     (CRC_GPOLYHU_REG(base))
#define CRC_WR_GPOLYHU(base, value) (CRC_GPOLYHU_REG(base) = (value))
#define CRC_RMW_GPOLYHU(base, mask, value) (CRC_WR_GPOLYHU(base, (CRC_RD_GPOLYHU(base) & ~(mask)) | (value)))
#define CRC_SET_GPOLYHU(base, value) (BME_OR8(&CRC_GPOLYHU_REG(base), (uint8_t)(value)))
#define CRC_CLR_GPOLYHU(base, value) (BME_AND8(&CRC_GPOLYHU_REG(base), (uint8_t)(~(value))))
#define CRC_TOG_GPOLYHU(base, value) (BME_XOR8(&CRC_GPOLYHU_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * CRC_CTRL - CRC Control register
 ******************************************************************************/

/*!
 * @brief CRC_CTRL - CRC Control register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register controls the configuration and working of the CRC module.
 * Appropriate bits must be set before starting a new CRC calculation. A new CRC
 * calculation is initialized by asserting CTRL[WAS] and then writing the seed into
 * the CRC data register.
 */
/*!
 * @name Constants and macros for entire CRC_CTRL register
 */
/*@{*/
#define CRC_RD_CTRL(base)        (CRC_CTRL_REG(base))
#define CRC_WR_CTRL(base, value) (CRC_CTRL_REG(base) = (value))
#define CRC_RMW_CTRL(base, mask, value) (CRC_WR_CTRL(base, (CRC_RD_CTRL(base) & ~(mask)) | (value)))
#define CRC_SET_CTRL(base, value) (BME_OR32(&CRC_CTRL_REG(base), (uint32_t)(value)))
#define CRC_CLR_CTRL(base, value) (BME_AND32(&CRC_CTRL_REG(base), (uint32_t)(~(value))))
#define CRC_TOG_CTRL(base, value) (BME_XOR32(&CRC_CTRL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual CRC_CTRL bitfields
 */

/*!
 * @name Register CRC_CTRL, field TCRC[24] (RW)
 *
 * Width of CRC protocol.
 *
 * Values:
 * - 0b0 - 16-bit CRC protocol.
 * - 0b1 - 32-bit CRC protocol.
 */
/*@{*/
/*! @brief Read current value of the CRC_CTRL_TCRC field. */
#define CRC_RD_CTRL_TCRC(base) ((CRC_CTRL_REG(base) & CRC_CTRL_TCRC_MASK) >> CRC_CTRL_TCRC_SHIFT)
#define CRC_BRD_CTRL_TCRC(base) (BME_UBFX32(&CRC_CTRL_REG(base), CRC_CTRL_TCRC_SHIFT, CRC_CTRL_TCRC_WIDTH))

/*! @brief Set the TCRC field to a new value. */
#define CRC_WR_CTRL_TCRC(base, value) (CRC_RMW_CTRL(base, CRC_CTRL_TCRC_MASK, CRC_CTRL_TCRC(value)))
#define CRC_BWR_CTRL_TCRC(base, value) (BME_BFI32(&CRC_CTRL_REG(base), ((uint32_t)(value) << CRC_CTRL_TCRC_SHIFT), CRC_CTRL_TCRC_SHIFT, CRC_CTRL_TCRC_WIDTH))
/*@}*/

/*!
 * @name Register CRC_CTRL, field WAS[25] (RW)
 *
 * When asserted, a value written to the CRC data register is considered a seed
 * value. When deasserted, a value written to the CRC data register is taken as
 * data for CRC computation.
 *
 * Values:
 * - 0b0 - Writes to the CRC data register are data values.
 * - 0b1 - Writes to the CRC data register are seed values.
 */
/*@{*/
/*! @brief Read current value of the CRC_CTRL_WAS field. */
#define CRC_RD_CTRL_WAS(base) ((CRC_CTRL_REG(base) & CRC_CTRL_WAS_MASK) >> CRC_CTRL_WAS_SHIFT)
#define CRC_BRD_CTRL_WAS(base) (BME_UBFX32(&CRC_CTRL_REG(base), CRC_CTRL_WAS_SHIFT, CRC_CTRL_WAS_WIDTH))

/*! @brief Set the WAS field to a new value. */
#define CRC_WR_CTRL_WAS(base, value) (CRC_RMW_CTRL(base, CRC_CTRL_WAS_MASK, CRC_CTRL_WAS(value)))
#define CRC_BWR_CTRL_WAS(base, value) (BME_BFI32(&CRC_CTRL_REG(base), ((uint32_t)(value) << CRC_CTRL_WAS_SHIFT), CRC_CTRL_WAS_SHIFT, CRC_CTRL_WAS_WIDTH))
/*@}*/

/*!
 * @name Register CRC_CTRL, field FXOR[26] (RW)
 *
 * Some CRC protocols require the final checksum to be XORed with 0xFFFFFFFF or
 * 0xFFFF. Asserting this bit enables on the fly complementing of read data.
 *
 * Values:
 * - 0b0 - No XOR on reading.
 * - 0b1 - Invert or complement the read value of the CRC Data register.
 */
/*@{*/
/*! @brief Read current value of the CRC_CTRL_FXOR field. */
#define CRC_RD_CTRL_FXOR(base) ((CRC_CTRL_REG(base) & CRC_CTRL_FXOR_MASK) >> CRC_CTRL_FXOR_SHIFT)
#define CRC_BRD_CTRL_FXOR(base) (BME_UBFX32(&CRC_CTRL_REG(base), CRC_CTRL_FXOR_SHIFT, CRC_CTRL_FXOR_WIDTH))

/*! @brief Set the FXOR field to a new value. */
#define CRC_WR_CTRL_FXOR(base, value) (CRC_RMW_CTRL(base, CRC_CTRL_FXOR_MASK, CRC_CTRL_FXOR(value)))
#define CRC_BWR_CTRL_FXOR(base, value) (BME_BFI32(&CRC_CTRL_REG(base), ((uint32_t)(value) << CRC_CTRL_FXOR_SHIFT), CRC_CTRL_FXOR_SHIFT, CRC_CTRL_FXOR_WIDTH))
/*@}*/

/*!
 * @name Register CRC_CTRL, field TOTR[29:28] (RW)
 *
 * Identifies the transpose configuration of the value read from the CRC Data
 * register. See the description of the transpose feature for the available
 * transpose options.
 *
 * Values:
 * - 0b00 - No transposition.
 * - 0b01 - Bits in bytes are transposed; bytes are not transposed.
 * - 0b10 - Both bits in bytes and bytes are transposed.
 * - 0b11 - Only bytes are transposed; no bits in a byte are transposed.
 */
/*@{*/
/*! @brief Read current value of the CRC_CTRL_TOTR field. */
#define CRC_RD_CTRL_TOTR(base) ((CRC_CTRL_REG(base) & CRC_CTRL_TOTR_MASK) >> CRC_CTRL_TOTR_SHIFT)
#define CRC_BRD_CTRL_TOTR(base) (BME_UBFX32(&CRC_CTRL_REG(base), CRC_CTRL_TOTR_SHIFT, CRC_CTRL_TOTR_WIDTH))

/*! @brief Set the TOTR field to a new value. */
#define CRC_WR_CTRL_TOTR(base, value) (CRC_RMW_CTRL(base, CRC_CTRL_TOTR_MASK, CRC_CTRL_TOTR(value)))
#define CRC_BWR_CTRL_TOTR(base, value) (BME_BFI32(&CRC_CTRL_REG(base), ((uint32_t)(value) << CRC_CTRL_TOTR_SHIFT), CRC_CTRL_TOTR_SHIFT, CRC_CTRL_TOTR_WIDTH))
/*@}*/

/*!
 * @name Register CRC_CTRL, field TOT[31:30] (RW)
 *
 * Defines the transpose configuration of the data written to the CRC data
 * register. See the description of the transpose feature for the available transpose
 * options.
 *
 * Values:
 * - 0b00 - No transposition.
 * - 0b01 - Bits in bytes are transposed; bytes are not transposed.
 * - 0b10 - Both bits in bytes and bytes are transposed.
 * - 0b11 - Only bytes are transposed; no bits in a byte are transposed.
 */
/*@{*/
/*! @brief Read current value of the CRC_CTRL_TOT field. */
#define CRC_RD_CTRL_TOT(base) ((CRC_CTRL_REG(base) & CRC_CTRL_TOT_MASK) >> CRC_CTRL_TOT_SHIFT)
#define CRC_BRD_CTRL_TOT(base) (BME_UBFX32(&CRC_CTRL_REG(base), CRC_CTRL_TOT_SHIFT, CRC_CTRL_TOT_WIDTH))

/*! @brief Set the TOT field to a new value. */
#define CRC_WR_CTRL_TOT(base, value) (CRC_RMW_CTRL(base, CRC_CTRL_TOT_MASK, CRC_CTRL_TOT(value)))
#define CRC_BWR_CTRL_TOT(base, value) (BME_BFI32(&CRC_CTRL_REG(base), ((uint32_t)(value) << CRC_CTRL_TOT_SHIFT), CRC_CTRL_TOT_SHIFT, CRC_CTRL_TOT_WIDTH))
/*@}*/

/*******************************************************************************
 * CRC_CTRLHU - CRC_CTRLHU register.
 ******************************************************************************/

/*!
 * @brief CRC_CTRLHU - CRC_CTRLHU register. (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire CRC_CTRLHU register
 */
/*@{*/
#define CRC_RD_CTRLHU(base)      (CRC_CTRLHU_REG(base))
#define CRC_WR_CTRLHU(base, value) (CRC_CTRLHU_REG(base) = (value))
#define CRC_RMW_CTRLHU(base, mask, value) (CRC_WR_CTRLHU(base, (CRC_RD_CTRLHU(base) & ~(mask)) | (value)))
#define CRC_SET_CTRLHU(base, value) (BME_OR8(&CRC_CTRLHU_REG(base), (uint8_t)(value)))
#define CRC_CLR_CTRLHU(base, value) (BME_AND8(&CRC_CTRLHU_REG(base), (uint8_t)(~(value))))
#define CRC_TOG_CTRLHU(base, value) (BME_XOR8(&CRC_CTRLHU_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual CRC_CTRLHU bitfields
 */

/*!
 * @name Register CRC_CTRLHU, field TCRC[0] (RW)
 *
 * Values:
 * - 0b0 - 16-bit CRC protocol.
 * - 0b1 - 32-bit CRC protocol.
 */
/*@{*/
/*! @brief Read current value of the CRC_CTRLHU_TCRC field. */
#define CRC_RD_CTRLHU_TCRC(base) ((CRC_CTRLHU_REG(base) & CRC_CTRLHU_TCRC_MASK) >> CRC_CTRLHU_TCRC_SHIFT)
#define CRC_BRD_CTRLHU_TCRC(base) (BME_UBFX8(&CRC_CTRLHU_REG(base), CRC_CTRLHU_TCRC_SHIFT, CRC_CTRLHU_TCRC_WIDTH))

/*! @brief Set the TCRC field to a new value. */
#define CRC_WR_CTRLHU_TCRC(base, value) (CRC_RMW_CTRLHU(base, CRC_CTRLHU_TCRC_MASK, CRC_CTRLHU_TCRC(value)))
#define CRC_BWR_CTRLHU_TCRC(base, value) (BME_BFI8(&CRC_CTRLHU_REG(base), ((uint8_t)(value) << CRC_CTRLHU_TCRC_SHIFT), CRC_CTRLHU_TCRC_SHIFT, CRC_CTRLHU_TCRC_WIDTH))
/*@}*/

/*!
 * @name Register CRC_CTRLHU, field WAS[1] (RW)
 *
 * Values:
 * - 0b0 - Writes to CRC data register are data values.
 * - 0b1 - Writes to CRC data reguster are seed values.
 */
/*@{*/
/*! @brief Read current value of the CRC_CTRLHU_WAS field. */
#define CRC_RD_CTRLHU_WAS(base) ((CRC_CTRLHU_REG(base) & CRC_CTRLHU_WAS_MASK) >> CRC_CTRLHU_WAS_SHIFT)
#define CRC_BRD_CTRLHU_WAS(base) (BME_UBFX8(&CRC_CTRLHU_REG(base), CRC_CTRLHU_WAS_SHIFT, CRC_CTRLHU_WAS_WIDTH))

/*! @brief Set the WAS field to a new value. */
#define CRC_WR_CTRLHU_WAS(base, value) (CRC_RMW_CTRLHU(base, CRC_CTRLHU_WAS_MASK, CRC_CTRLHU_WAS(value)))
#define CRC_BWR_CTRLHU_WAS(base, value) (BME_BFI8(&CRC_CTRLHU_REG(base), ((uint8_t)(value) << CRC_CTRLHU_WAS_SHIFT), CRC_CTRLHU_WAS_SHIFT, CRC_CTRLHU_WAS_WIDTH))
/*@}*/

/*!
 * @name Register CRC_CTRLHU, field FXOR[2] (RW)
 *
 * Values:
 * - 0b0 - No XOR on reading.
 * - 0b1 - Invert or complement the read value of CRC data register.
 */
/*@{*/
/*! @brief Read current value of the CRC_CTRLHU_FXOR field. */
#define CRC_RD_CTRLHU_FXOR(base) ((CRC_CTRLHU_REG(base) & CRC_CTRLHU_FXOR_MASK) >> CRC_CTRLHU_FXOR_SHIFT)
#define CRC_BRD_CTRLHU_FXOR(base) (BME_UBFX8(&CRC_CTRLHU_REG(base), CRC_CTRLHU_FXOR_SHIFT, CRC_CTRLHU_FXOR_WIDTH))

/*! @brief Set the FXOR field to a new value. */
#define CRC_WR_CTRLHU_FXOR(base, value) (CRC_RMW_CTRLHU(base, CRC_CTRLHU_FXOR_MASK, CRC_CTRLHU_FXOR(value)))
#define CRC_BWR_CTRLHU_FXOR(base, value) (BME_BFI8(&CRC_CTRLHU_REG(base), ((uint8_t)(value) << CRC_CTRLHU_FXOR_SHIFT), CRC_CTRLHU_FXOR_SHIFT, CRC_CTRLHU_FXOR_WIDTH))
/*@}*/

/*!
 * @name Register CRC_CTRLHU, field TOTR[5:4] (RW)
 *
 * Values:
 * - 0b00 - No Transposition.
 * - 0b01 - Bits in bytes are transposed, bytes are not transposed.
 * - 0b10 - Both bits in bytes and bytes are transposed.
 * - 0b11 - Only bytes are transposed; no bits in a byte are transposed.
 */
/*@{*/
/*! @brief Read current value of the CRC_CTRLHU_TOTR field. */
#define CRC_RD_CTRLHU_TOTR(base) ((CRC_CTRLHU_REG(base) & CRC_CTRLHU_TOTR_MASK) >> CRC_CTRLHU_TOTR_SHIFT)
#define CRC_BRD_CTRLHU_TOTR(base) (BME_UBFX8(&CRC_CTRLHU_REG(base), CRC_CTRLHU_TOTR_SHIFT, CRC_CTRLHU_TOTR_WIDTH))

/*! @brief Set the TOTR field to a new value. */
#define CRC_WR_CTRLHU_TOTR(base, value) (CRC_RMW_CTRLHU(base, CRC_CTRLHU_TOTR_MASK, CRC_CTRLHU_TOTR(value)))
#define CRC_BWR_CTRLHU_TOTR(base, value) (BME_BFI8(&CRC_CTRLHU_REG(base), ((uint8_t)(value) << CRC_CTRLHU_TOTR_SHIFT), CRC_CTRLHU_TOTR_SHIFT, CRC_CTRLHU_TOTR_WIDTH))
/*@}*/

/*!
 * @name Register CRC_CTRLHU, field TOT[7:6] (RW)
 *
 * Values:
 * - 0b00 - No Transposition.
 * - 0b01 - Bits in bytes are transposed, bytes are not transposed.
 * - 0b10 - Both bits in bytes and bytes are transposed.
 * - 0b11 - Only bytes are transposed; no bits in a byte are transposed.
 */
/*@{*/
/*! @brief Read current value of the CRC_CTRLHU_TOT field. */
#define CRC_RD_CTRLHU_TOT(base) ((CRC_CTRLHU_REG(base) & CRC_CTRLHU_TOT_MASK) >> CRC_CTRLHU_TOT_SHIFT)
#define CRC_BRD_CTRLHU_TOT(base) (BME_UBFX8(&CRC_CTRLHU_REG(base), CRC_CTRLHU_TOT_SHIFT, CRC_CTRLHU_TOT_WIDTH))

/*! @brief Set the TOT field to a new value. */
#define CRC_WR_CTRLHU_TOT(base, value) (CRC_RMW_CTRLHU(base, CRC_CTRLHU_TOT_MASK, CRC_CTRLHU_TOT(value)))
#define CRC_BWR_CTRLHU_TOT(base, value) (BME_BFI8(&CRC_CTRLHU_REG(base), ((uint8_t)(value) << CRC_CTRLHU_TOT_SHIFT), CRC_CTRLHU_TOT_SHIFT, CRC_CTRLHU_TOT_WIDTH))
/*@}*/

/*
 * MK82F25615 DAC
 *
 * 12-Bit Digital-to-Analog Converter
 *
 * Registers defined in this header file:
 * - DAC_DATL - DAC Data Low Register
 * - DAC_DATH - DAC Data High Register
 * - DAC_SR - DAC Status Register
 * - DAC_C0 - DAC Control Register
 * - DAC_C1 - DAC Control Register 1
 * - DAC_C2 - DAC Control Register 2
 */

#define DAC_INSTANCE_COUNT (1U) /*!< Number of instances of the DAC module. */
#define DAC0_IDX (0U) /*!< Instance number for DAC0. */

/*******************************************************************************
 * DAC_DATL - DAC Data Low Register
 ******************************************************************************/

/*!
 * @brief DAC_DATL - DAC Data Low Register (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire DAC_DATL register
 */
/*@{*/
#define DAC_RD_DATL(base, index) (DAC_DATL_REG(base, index))
#define DAC_WR_DATL(base, index, value) (DAC_DATL_REG(base, index) = (value))
#define DAC_RMW_DATL(base, index, mask, value) (DAC_WR_DATL(base, index, (DAC_RD_DATL(base, index) & ~(mask)) | (value)))
#define DAC_SET_DATL(base, index, value) (BME_OR8(&DAC_DATL_REG(base, index), (uint8_t)(value)))
#define DAC_CLR_DATL(base, index, value) (BME_AND8(&DAC_DATL_REG(base, index), (uint8_t)(~(value))))
#define DAC_TOG_DATL(base, index, value) (BME_XOR8(&DAC_DATL_REG(base, index), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * DAC_DATH - DAC Data High Register
 ******************************************************************************/

/*!
 * @brief DAC_DATH - DAC Data High Register (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire DAC_DATH register
 */
/*@{*/
#define DAC_RD_DATH(base, index) (DAC_DATH_REG(base, index))
#define DAC_WR_DATH(base, index, value) (DAC_DATH_REG(base, index) = (value))
#define DAC_RMW_DATH(base, index, mask, value) (DAC_WR_DATH(base, index, (DAC_RD_DATH(base, index) & ~(mask)) | (value)))
#define DAC_SET_DATH(base, index, value) (BME_OR8(&DAC_DATH_REG(base, index), (uint8_t)(value)))
#define DAC_CLR_DATH(base, index, value) (BME_AND8(&DAC_DATH_REG(base, index), (uint8_t)(~(value))))
#define DAC_TOG_DATH(base, index, value) (BME_XOR8(&DAC_DATH_REG(base, index), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DAC_DATH bitfields
 */

/*!
 * @name Register DAC_DATH, field DATA1[3:0] (RW)
 *
 * When the DAC Buffer is not enabled, DATA[11:0] controls the output voltage
 * based on the following formula. V out = V in * (1 + DACDAT0[11:0])/4096 When the
 * DAC buffer is enabled, DATA[11:0] is mapped to the 16-word buffer.
 */
/*@{*/
/*! @brief Read current value of the DAC_DATH_DATA1 field. */
#define DAC_RD_DATH_DATA1(base, index) ((DAC_DATH_REG(base, index) & DAC_DATH_DATA1_MASK) >> DAC_DATH_DATA1_SHIFT)
#define DAC_BRD_DATH_DATA1(base, index) (BME_UBFX8(&DAC_DATH_REG(base, index), DAC_DATH_DATA1_SHIFT, DAC_DATH_DATA1_WIDTH))

/*! @brief Set the DATA1 field to a new value. */
#define DAC_WR_DATH_DATA1(base, index, value) (DAC_RMW_DATH(base, index, DAC_DATH_DATA1_MASK, DAC_DATH_DATA1(value)))
#define DAC_BWR_DATH_DATA1(base, index, value) (BME_BFI8(&DAC_DATH_REG(base, index), ((uint8_t)(value) << DAC_DATH_DATA1_SHIFT), DAC_DATH_DATA1_SHIFT, DAC_DATH_DATA1_WIDTH))
/*@}*/

/*******************************************************************************
 * DAC_SR - DAC Status Register
 ******************************************************************************/

/*!
 * @brief DAC_SR - DAC Status Register (RW)
 *
 * Reset value: 0x02U
 *
 * If DMA is enabled, the flags can be cleared automatically by DMA when the DMA
 * request is done. Writing 0 to a field clears it whereas writing 1 has no
 * effect. After reset, DACBFRPTF is set and can be cleared by software, if needed.
 * The flags are set only when the data buffer status is changed.
 */
/*!
 * @name Constants and macros for entire DAC_SR register
 */
/*@{*/
#define DAC_RD_SR(base)          (DAC_SR_REG(base))
#define DAC_WR_SR(base, value)   (DAC_SR_REG(base) = (value))
#define DAC_RMW_SR(base, mask, value) (DAC_WR_SR(base, (DAC_RD_SR(base) & ~(mask)) | (value)))
#define DAC_SET_SR(base, value)  (BME_OR8(&DAC_SR_REG(base), (uint8_t)(value)))
#define DAC_CLR_SR(base, value)  (BME_AND8(&DAC_SR_REG(base), (uint8_t)(~(value))))
#define DAC_TOG_SR(base, value)  (BME_XOR8(&DAC_SR_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DAC_SR bitfields
 */

/*!
 * @name Register DAC_SR, field DACBFRPBF[0] (RW)
 *
 * In FIFO mode, it is FIFO FULL status bit. It means FIFO read pointer equals
 * Write Pointer because of Write Pointer increase. If this bit is set, any write
 * to FIFO from either DMA or CPU is ignored by DAC. It is cleared if there is
 * any DAC trigger making the DAC read pointer increase. Write to this bit is
 * ignored in FIFO mode.
 *
 * Values:
 * - 0b0 - The DAC buffer read pointer is not equal to C2[DACBFUP].
 * - 0b1 - The DAC buffer read pointer is equal to C2[DACBFUP].
 */
/*@{*/
/*! @brief Read current value of the DAC_SR_DACBFRPBF field. */
#define DAC_RD_SR_DACBFRPBF(base) ((DAC_SR_REG(base) & DAC_SR_DACBFRPBF_MASK) >> DAC_SR_DACBFRPBF_SHIFT)
#define DAC_BRD_SR_DACBFRPBF(base) (BME_UBFX8(&DAC_SR_REG(base), DAC_SR_DACBFRPBF_SHIFT, DAC_SR_DACBFRPBF_WIDTH))

/*! @brief Set the DACBFRPBF field to a new value. */
#define DAC_WR_SR_DACBFRPBF(base, value) (DAC_RMW_SR(base, DAC_SR_DACBFRPBF_MASK, DAC_SR_DACBFRPBF(value)))
#define DAC_BWR_SR_DACBFRPBF(base, value) (BME_BFI8(&DAC_SR_REG(base), ((uint8_t)(value) << DAC_SR_DACBFRPBF_SHIFT), DAC_SR_DACBFRPBF_SHIFT, DAC_SR_DACBFRPBF_WIDTH))
/*@}*/

/*!
 * @name Register DAC_SR, field DACBFRPTF[1] (RW)
 *
 * In FIFO mode, it is FIFO nearly empty flag. It is set when only one data
 * remains in FIFO. Any DAC trigger does not increase the Read Pointer if this bit is
 * set to avoid any possible glitch or abrupt change at DAC output. It is
 * cleared automatically if FIFO is not empty.
 *
 * Values:
 * - 0b0 - The DAC buffer read pointer is not zero.
 * - 0b1 - The DAC buffer read pointer is zero.
 */
/*@{*/
/*! @brief Read current value of the DAC_SR_DACBFRPTF field. */
#define DAC_RD_SR_DACBFRPTF(base) ((DAC_SR_REG(base) & DAC_SR_DACBFRPTF_MASK) >> DAC_SR_DACBFRPTF_SHIFT)
#define DAC_BRD_SR_DACBFRPTF(base) (BME_UBFX8(&DAC_SR_REG(base), DAC_SR_DACBFRPTF_SHIFT, DAC_SR_DACBFRPTF_WIDTH))

/*! @brief Set the DACBFRPTF field to a new value. */
#define DAC_WR_SR_DACBFRPTF(base, value) (DAC_RMW_SR(base, DAC_SR_DACBFRPTF_MASK, DAC_SR_DACBFRPTF(value)))
#define DAC_BWR_SR_DACBFRPTF(base, value) (BME_BFI8(&DAC_SR_REG(base), ((uint8_t)(value) << DAC_SR_DACBFRPTF_SHIFT), DAC_SR_DACBFRPTF_SHIFT, DAC_SR_DACBFRPTF_WIDTH))
/*@}*/

/*!
 * @name Register DAC_SR, field DACBFWMF[2] (RW)
 *
 * This bit is set if the remaining FIFO data is less than the watermark
 * setting. It is cleared automatically by writing data into FIFO by DMA or CPU. Write
 * to this bit is ignored in FIFO mode.
 *
 * Values:
 * - 0b0 - The DAC buffer read pointer has not reached the watermark level.
 * - 0b1 - The DAC buffer read pointer has reached the watermark level.
 */
/*@{*/
/*! @brief Read current value of the DAC_SR_DACBFWMF field. */
#define DAC_RD_SR_DACBFWMF(base) ((DAC_SR_REG(base) & DAC_SR_DACBFWMF_MASK) >> DAC_SR_DACBFWMF_SHIFT)
#define DAC_BRD_SR_DACBFWMF(base) (BME_UBFX8(&DAC_SR_REG(base), DAC_SR_DACBFWMF_SHIFT, DAC_SR_DACBFWMF_WIDTH))

/*! @brief Set the DACBFWMF field to a new value. */
#define DAC_WR_SR_DACBFWMF(base, value) (DAC_RMW_SR(base, DAC_SR_DACBFWMF_MASK, DAC_SR_DACBFWMF(value)))
#define DAC_BWR_SR_DACBFWMF(base, value) (BME_BFI8(&DAC_SR_REG(base), ((uint8_t)(value) << DAC_SR_DACBFWMF_SHIFT), DAC_SR_DACBFWMF_SHIFT, DAC_SR_DACBFWMF_WIDTH))
/*@}*/

/*******************************************************************************
 * DAC_C0 - DAC Control Register
 ******************************************************************************/

/*!
 * @brief DAC_C0 - DAC Control Register (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire DAC_C0 register
 */
/*@{*/
#define DAC_RD_C0(base)          (DAC_C0_REG(base))
#define DAC_WR_C0(base, value)   (DAC_C0_REG(base) = (value))
#define DAC_RMW_C0(base, mask, value) (DAC_WR_C0(base, (DAC_RD_C0(base) & ~(mask)) | (value)))
#define DAC_SET_C0(base, value)  (BME_OR8(&DAC_C0_REG(base), (uint8_t)(value)))
#define DAC_CLR_C0(base, value)  (BME_AND8(&DAC_C0_REG(base), (uint8_t)(~(value))))
#define DAC_TOG_C0(base, value)  (BME_XOR8(&DAC_C0_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DAC_C0 bitfields
 */

/*!
 * @name Register DAC_C0, field DACBBIEN[0] (RW)
 *
 * Values:
 * - 0b0 - The DAC buffer read pointer bottom flag interrupt is disabled.
 * - 0b1 - The DAC buffer read pointer bottom flag interrupt is enabled.
 */
/*@{*/
/*! @brief Read current value of the DAC_C0_DACBBIEN field. */
#define DAC_RD_C0_DACBBIEN(base) ((DAC_C0_REG(base) & DAC_C0_DACBBIEN_MASK) >> DAC_C0_DACBBIEN_SHIFT)
#define DAC_BRD_C0_DACBBIEN(base) (BME_UBFX8(&DAC_C0_REG(base), DAC_C0_DACBBIEN_SHIFT, DAC_C0_DACBBIEN_WIDTH))

/*! @brief Set the DACBBIEN field to a new value. */
#define DAC_WR_C0_DACBBIEN(base, value) (DAC_RMW_C0(base, DAC_C0_DACBBIEN_MASK, DAC_C0_DACBBIEN(value)))
#define DAC_BWR_C0_DACBBIEN(base, value) (BME_BFI8(&DAC_C0_REG(base), ((uint8_t)(value) << DAC_C0_DACBBIEN_SHIFT), DAC_C0_DACBBIEN_SHIFT, DAC_C0_DACBBIEN_WIDTH))
/*@}*/

/*!
 * @name Register DAC_C0, field DACBTIEN[1] (RW)
 *
 * Values:
 * - 0b0 - The DAC buffer read pointer top flag interrupt is disabled.
 * - 0b1 - The DAC buffer read pointer top flag interrupt is enabled.
 */
/*@{*/
/*! @brief Read current value of the DAC_C0_DACBTIEN field. */
#define DAC_RD_C0_DACBTIEN(base) ((DAC_C0_REG(base) & DAC_C0_DACBTIEN_MASK) >> DAC_C0_DACBTIEN_SHIFT)
#define DAC_BRD_C0_DACBTIEN(base) (BME_UBFX8(&DAC_C0_REG(base), DAC_C0_DACBTIEN_SHIFT, DAC_C0_DACBTIEN_WIDTH))

/*! @brief Set the DACBTIEN field to a new value. */
#define DAC_WR_C0_DACBTIEN(base, value) (DAC_RMW_C0(base, DAC_C0_DACBTIEN_MASK, DAC_C0_DACBTIEN(value)))
#define DAC_BWR_C0_DACBTIEN(base, value) (BME_BFI8(&DAC_C0_REG(base), ((uint8_t)(value) << DAC_C0_DACBTIEN_SHIFT), DAC_C0_DACBTIEN_SHIFT, DAC_C0_DACBTIEN_WIDTH))
/*@}*/

/*!
 * @name Register DAC_C0, field DACBWIEN[2] (RW)
 *
 * Values:
 * - 0b0 - The DAC buffer watermark interrupt is disabled.
 * - 0b1 - The DAC buffer watermark interrupt is enabled.
 */
/*@{*/
/*! @brief Read current value of the DAC_C0_DACBWIEN field. */
#define DAC_RD_C0_DACBWIEN(base) ((DAC_C0_REG(base) & DAC_C0_DACBWIEN_MASK) >> DAC_C0_DACBWIEN_SHIFT)
#define DAC_BRD_C0_DACBWIEN(base) (BME_UBFX8(&DAC_C0_REG(base), DAC_C0_DACBWIEN_SHIFT, DAC_C0_DACBWIEN_WIDTH))

/*! @brief Set the DACBWIEN field to a new value. */
#define DAC_WR_C0_DACBWIEN(base, value) (DAC_RMW_C0(base, DAC_C0_DACBWIEN_MASK, DAC_C0_DACBWIEN(value)))
#define DAC_BWR_C0_DACBWIEN(base, value) (BME_BFI8(&DAC_C0_REG(base), ((uint8_t)(value) << DAC_C0_DACBWIEN_SHIFT), DAC_C0_DACBWIEN_SHIFT, DAC_C0_DACBWIEN_WIDTH))
/*@}*/

/*!
 * @name Register DAC_C0, field LPEN[3] (RW)
 *
 * See the 12-bit DAC electrical characteristics of the device data sheet for
 * details on the impact of the modes below.
 *
 * Values:
 * - 0b0 - High-Power mode
 * - 0b1 - Low-Power mode
 */
/*@{*/
/*! @brief Read current value of the DAC_C0_LPEN field. */
#define DAC_RD_C0_LPEN(base) ((DAC_C0_REG(base) & DAC_C0_LPEN_MASK) >> DAC_C0_LPEN_SHIFT)
#define DAC_BRD_C0_LPEN(base) (BME_UBFX8(&DAC_C0_REG(base), DAC_C0_LPEN_SHIFT, DAC_C0_LPEN_WIDTH))

/*! @brief Set the LPEN field to a new value. */
#define DAC_WR_C0_LPEN(base, value) (DAC_RMW_C0(base, DAC_C0_LPEN_MASK, DAC_C0_LPEN(value)))
#define DAC_BWR_C0_LPEN(base, value) (BME_BFI8(&DAC_C0_REG(base), ((uint8_t)(value) << DAC_C0_LPEN_SHIFT), DAC_C0_LPEN_SHIFT, DAC_C0_LPEN_WIDTH))
/*@}*/

/*!
 * @name Register DAC_C0, field DACSWTRG[4] (WORZ)
 *
 * Active high. This is a write-only field, which always reads 0. If DAC
 * software trigger is selected and buffer is enabled, writing 1 to this field will
 * advance the buffer read pointer once.
 *
 * Values:
 * - 0b0 - The DAC soft trigger is not valid.
 * - 0b1 - The DAC soft trigger is valid.
 */
/*@{*/
/*! @brief Set the DACSWTRG field to a new value. */
#define DAC_WR_C0_DACSWTRG(base, value) (DAC_RMW_C0(base, DAC_C0_DACSWTRG_MASK, DAC_C0_DACSWTRG(value)))
#define DAC_BWR_C0_DACSWTRG(base, value) (BME_BFI8(&DAC_C0_REG(base), ((uint8_t)(value) << DAC_C0_DACSWTRG_SHIFT), DAC_C0_DACSWTRG_SHIFT, DAC_C0_DACSWTRG_WIDTH))
/*@}*/

/*!
 * @name Register DAC_C0, field DACTRGSEL[5] (RW)
 *
 * Values:
 * - 0b0 - The DAC hardware trigger is selected.
 * - 0b1 - The DAC software trigger is selected.
 */
/*@{*/
/*! @brief Read current value of the DAC_C0_DACTRGSEL field. */
#define DAC_RD_C0_DACTRGSEL(base) ((DAC_C0_REG(base) & DAC_C0_DACTRGSEL_MASK) >> DAC_C0_DACTRGSEL_SHIFT)
#define DAC_BRD_C0_DACTRGSEL(base) (BME_UBFX8(&DAC_C0_REG(base), DAC_C0_DACTRGSEL_SHIFT, DAC_C0_DACTRGSEL_WIDTH))

/*! @brief Set the DACTRGSEL field to a new value. */
#define DAC_WR_C0_DACTRGSEL(base, value) (DAC_RMW_C0(base, DAC_C0_DACTRGSEL_MASK, DAC_C0_DACTRGSEL(value)))
#define DAC_BWR_C0_DACTRGSEL(base, value) (BME_BFI8(&DAC_C0_REG(base), ((uint8_t)(value) << DAC_C0_DACTRGSEL_SHIFT), DAC_C0_DACTRGSEL_SHIFT, DAC_C0_DACTRGSEL_WIDTH))
/*@}*/

/*!
 * @name Register DAC_C0, field DACRFS[6] (RW)
 *
 * Values:
 * - 0b0 - The DAC selects DACREF_1 as the reference voltage.
 * - 0b1 - The DAC selects DACREF_2 as the reference voltage.
 */
/*@{*/
/*! @brief Read current value of the DAC_C0_DACRFS field. */
#define DAC_RD_C0_DACRFS(base) ((DAC_C0_REG(base) & DAC_C0_DACRFS_MASK) >> DAC_C0_DACRFS_SHIFT)
#define DAC_BRD_C0_DACRFS(base) (BME_UBFX8(&DAC_C0_REG(base), DAC_C0_DACRFS_SHIFT, DAC_C0_DACRFS_WIDTH))

/*! @brief Set the DACRFS field to a new value. */
#define DAC_WR_C0_DACRFS(base, value) (DAC_RMW_C0(base, DAC_C0_DACRFS_MASK, DAC_C0_DACRFS(value)))
#define DAC_BWR_C0_DACRFS(base, value) (BME_BFI8(&DAC_C0_REG(base), ((uint8_t)(value) << DAC_C0_DACRFS_SHIFT), DAC_C0_DACRFS_SHIFT, DAC_C0_DACRFS_WIDTH))
/*@}*/

/*!
 * @name Register DAC_C0, field DACEN[7] (RW)
 *
 * Starts the Programmable Reference Generator operation.
 *
 * Values:
 * - 0b0 - The DAC system is disabled.
 * - 0b1 - The DAC system is enabled.
 */
/*@{*/
/*! @brief Read current value of the DAC_C0_DACEN field. */
#define DAC_RD_C0_DACEN(base) ((DAC_C0_REG(base) & DAC_C0_DACEN_MASK) >> DAC_C0_DACEN_SHIFT)
#define DAC_BRD_C0_DACEN(base) (BME_UBFX8(&DAC_C0_REG(base), DAC_C0_DACEN_SHIFT, DAC_C0_DACEN_WIDTH))

/*! @brief Set the DACEN field to a new value. */
#define DAC_WR_C0_DACEN(base, value) (DAC_RMW_C0(base, DAC_C0_DACEN_MASK, DAC_C0_DACEN(value)))
#define DAC_BWR_C0_DACEN(base, value) (BME_BFI8(&DAC_C0_REG(base), ((uint8_t)(value) << DAC_C0_DACEN_SHIFT), DAC_C0_DACEN_SHIFT, DAC_C0_DACEN_WIDTH))
/*@}*/

/*******************************************************************************
 * DAC_C1 - DAC Control Register 1
 ******************************************************************************/

/*!
 * @brief DAC_C1 - DAC Control Register 1 (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire DAC_C1 register
 */
/*@{*/
#define DAC_RD_C1(base)          (DAC_C1_REG(base))
#define DAC_WR_C1(base, value)   (DAC_C1_REG(base) = (value))
#define DAC_RMW_C1(base, mask, value) (DAC_WR_C1(base, (DAC_RD_C1(base) & ~(mask)) | (value)))
#define DAC_SET_C1(base, value)  (BME_OR8(&DAC_C1_REG(base), (uint8_t)(value)))
#define DAC_CLR_C1(base, value)  (BME_AND8(&DAC_C1_REG(base), (uint8_t)(~(value))))
#define DAC_TOG_C1(base, value)  (BME_XOR8(&DAC_C1_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DAC_C1 bitfields
 */

/*!
 * @name Register DAC_C1, field DACBFEN[0] (RW)
 *
 * Values:
 * - 0b0 - Buffer read pointer is disabled. The converted data is always the
 *     first word of the buffer.
 * - 0b1 - Buffer read pointer is enabled. The converted data is the word that
 *     the read pointer points to. It means converted data can be from any word of
 *     the buffer.
 */
/*@{*/
/*! @brief Read current value of the DAC_C1_DACBFEN field. */
#define DAC_RD_C1_DACBFEN(base) ((DAC_C1_REG(base) & DAC_C1_DACBFEN_MASK) >> DAC_C1_DACBFEN_SHIFT)
#define DAC_BRD_C1_DACBFEN(base) (BME_UBFX8(&DAC_C1_REG(base), DAC_C1_DACBFEN_SHIFT, DAC_C1_DACBFEN_WIDTH))

/*! @brief Set the DACBFEN field to a new value. */
#define DAC_WR_C1_DACBFEN(base, value) (DAC_RMW_C1(base, DAC_C1_DACBFEN_MASK, DAC_C1_DACBFEN(value)))
#define DAC_BWR_C1_DACBFEN(base, value) (BME_BFI8(&DAC_C1_REG(base), ((uint8_t)(value) << DAC_C1_DACBFEN_SHIFT), DAC_C1_DACBFEN_SHIFT, DAC_C1_DACBFEN_WIDTH))
/*@}*/

/*!
 * @name Register DAC_C1, field DACBFMD[2:1] (RW)
 *
 * Values:
 * - 0b00 - Normal mode
 * - 0b01 - Swing mode
 * - 0b10 - One-Time Scan mode
 * - 0b11 - FIFO mode
 */
/*@{*/
/*! @brief Read current value of the DAC_C1_DACBFMD field. */
#define DAC_RD_C1_DACBFMD(base) ((DAC_C1_REG(base) & DAC_C1_DACBFMD_MASK) >> DAC_C1_DACBFMD_SHIFT)
#define DAC_BRD_C1_DACBFMD(base) (BME_UBFX8(&DAC_C1_REG(base), DAC_C1_DACBFMD_SHIFT, DAC_C1_DACBFMD_WIDTH))

/*! @brief Set the DACBFMD field to a new value. */
#define DAC_WR_C1_DACBFMD(base, value) (DAC_RMW_C1(base, DAC_C1_DACBFMD_MASK, DAC_C1_DACBFMD(value)))
#define DAC_BWR_C1_DACBFMD(base, value) (BME_BFI8(&DAC_C1_REG(base), ((uint8_t)(value) << DAC_C1_DACBFMD_SHIFT), DAC_C1_DACBFMD_SHIFT, DAC_C1_DACBFMD_WIDTH))
/*@}*/

/*!
 * @name Register DAC_C1, field DACBFWM[4:3] (RW)
 *
 * In normal mode it controls when SR[DACBFWMF] is set. When the DAC buffer read
 * pointer reaches the word defined by this field, which is 1-4 words away from
 * the upper limit (DACBUP), SR[DACBFWMF] will be set. This allows user
 * configuration of the watermark interrupt. In FIFO mode, it is FIFO watermark select
 * field.
 *
 * Values:
 * - 0b00 - In normal mode, 1 word . In FIFO mode, 2 or less than 2 data
 *     remaining in FIFO will set watermark status bit.
 * - 0b01 - In normal mode, 2 words . In FIFO mode, Max/4 or less than Max/4
 *     data remaining in FIFO will set watermark status bit.
 * - 0b10 - In normal mode, 3 words . In FIFO mode, Max/2 or less than Max/2
 *     data remaining in FIFO will set watermark status bit.
 * - 0b11 - In normal mode, 4 words . In FIFO mode, Max-2 or less than Max-2
 *     data remaining in FIFO will set watermark status bit.
 */
/*@{*/
/*! @brief Read current value of the DAC_C1_DACBFWM field. */
#define DAC_RD_C1_DACBFWM(base) ((DAC_C1_REG(base) & DAC_C1_DACBFWM_MASK) >> DAC_C1_DACBFWM_SHIFT)
#define DAC_BRD_C1_DACBFWM(base) (BME_UBFX8(&DAC_C1_REG(base), DAC_C1_DACBFWM_SHIFT, DAC_C1_DACBFWM_WIDTH))

/*! @brief Set the DACBFWM field to a new value. */
#define DAC_WR_C1_DACBFWM(base, value) (DAC_RMW_C1(base, DAC_C1_DACBFWM_MASK, DAC_C1_DACBFWM(value)))
#define DAC_BWR_C1_DACBFWM(base, value) (BME_BFI8(&DAC_C1_REG(base), ((uint8_t)(value) << DAC_C1_DACBFWM_SHIFT), DAC_C1_DACBFWM_SHIFT, DAC_C1_DACBFWM_WIDTH))
/*@}*/

/*!
 * @name Register DAC_C1, field DMAEN[7] (RW)
 *
 * Values:
 * - 0b0 - DMA is disabled.
 * - 0b1 - DMA is enabled. When DMA is enabled, the DMA request will be
 *     generated by original interrupts. The interrupts will not be presented on this
 *     module at the same time.
 */
/*@{*/
/*! @brief Read current value of the DAC_C1_DMAEN field. */
#define DAC_RD_C1_DMAEN(base) ((DAC_C1_REG(base) & DAC_C1_DMAEN_MASK) >> DAC_C1_DMAEN_SHIFT)
#define DAC_BRD_C1_DMAEN(base) (BME_UBFX8(&DAC_C1_REG(base), DAC_C1_DMAEN_SHIFT, DAC_C1_DMAEN_WIDTH))

/*! @brief Set the DMAEN field to a new value. */
#define DAC_WR_C1_DMAEN(base, value) (DAC_RMW_C1(base, DAC_C1_DMAEN_MASK, DAC_C1_DMAEN(value)))
#define DAC_BWR_C1_DMAEN(base, value) (BME_BFI8(&DAC_C1_REG(base), ((uint8_t)(value) << DAC_C1_DMAEN_SHIFT), DAC_C1_DMAEN_SHIFT, DAC_C1_DMAEN_WIDTH))
/*@}*/

/*******************************************************************************
 * DAC_C2 - DAC Control Register 2
 ******************************************************************************/

/*!
 * @brief DAC_C2 - DAC Control Register 2 (RW)
 *
 * Reset value: 0x0FU
 */
/*!
 * @name Constants and macros for entire DAC_C2 register
 */
/*@{*/
#define DAC_RD_C2(base)          (DAC_C2_REG(base))
#define DAC_WR_C2(base, value)   (DAC_C2_REG(base) = (value))
#define DAC_RMW_C2(base, mask, value) (DAC_WR_C2(base, (DAC_RD_C2(base) & ~(mask)) | (value)))
#define DAC_SET_C2(base, value)  (BME_OR8(&DAC_C2_REG(base), (uint8_t)(value)))
#define DAC_CLR_C2(base, value)  (BME_AND8(&DAC_C2_REG(base), (uint8_t)(~(value))))
#define DAC_TOG_C2(base, value)  (BME_XOR8(&DAC_C2_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DAC_C2 bitfields
 */

/*!
 * @name Register DAC_C2, field DACBFUP[3:0] (RW)
 *
 * In normal mode it selects the upper limit of the DAC buffer. The buffer read
 * pointer cannot exceed it. In FIFO mode it is the FIFO write pointer. User
 * cannot set Buffer Up limit in FIFO mode. In Normal mode its reset value is MAX.
 * When IP is configured to FIFO mode, this register becomes Write_Pointer, and its
 * value is initially set to equal READ_POINTER automatically, and the FIFO
 * status is empty. It is writable and user can configure it to the same address to
 * reset FIFO as empty.
 */
/*@{*/
/*! @brief Read current value of the DAC_C2_DACBFUP field. */
#define DAC_RD_C2_DACBFUP(base) ((DAC_C2_REG(base) & DAC_C2_DACBFUP_MASK) >> DAC_C2_DACBFUP_SHIFT)
#define DAC_BRD_C2_DACBFUP(base) (BME_UBFX8(&DAC_C2_REG(base), DAC_C2_DACBFUP_SHIFT, DAC_C2_DACBFUP_WIDTH))

/*! @brief Set the DACBFUP field to a new value. */
#define DAC_WR_C2_DACBFUP(base, value) (DAC_RMW_C2(base, DAC_C2_DACBFUP_MASK, DAC_C2_DACBFUP(value)))
#define DAC_BWR_C2_DACBFUP(base, value) (BME_BFI8(&DAC_C2_REG(base), ((uint8_t)(value) << DAC_C2_DACBFUP_SHIFT), DAC_C2_DACBFUP_SHIFT, DAC_C2_DACBFUP_WIDTH))
/*@}*/

/*!
 * @name Register DAC_C2, field DACBFRP[7:4] (RW)
 *
 * In normal mode it keeps the current value of the buffer read pointer. FIFO
 * mode, it is the FIFO read pointer. It is writable in FIFO mode. User can
 * configure it to same address to reset FIFO as empty.
 */
/*@{*/
/*! @brief Read current value of the DAC_C2_DACBFRP field. */
#define DAC_RD_C2_DACBFRP(base) ((DAC_C2_REG(base) & DAC_C2_DACBFRP_MASK) >> DAC_C2_DACBFRP_SHIFT)
#define DAC_BRD_C2_DACBFRP(base) (BME_UBFX8(&DAC_C2_REG(base), DAC_C2_DACBFRP_SHIFT, DAC_C2_DACBFRP_WIDTH))

/*! @brief Set the DACBFRP field to a new value. */
#define DAC_WR_C2_DACBFRP(base, value) (DAC_RMW_C2(base, DAC_C2_DACBFRP_MASK, DAC_C2_DACBFRP(value)))
#define DAC_BWR_C2_DACBFRP(base, value) (BME_BFI8(&DAC_C2_REG(base), ((uint8_t)(value) << DAC_C2_DACBFRP_SHIFT), DAC_C2_DACBFRP_SHIFT, DAC_C2_DACBFRP_WIDTH))
/*@}*/

/*
 * MK82F25615 DMA
 *
 * Enhanced direct memory access controller
 *
 * Registers defined in this header file:
 * - DMA_CR - Control Register
 * - DMA_ES - Error Status Register
 * - DMA_ERQ - Enable Request Register
 * - DMA_EEI - Enable Error Interrupt Register
 * - DMA_CEEI - Clear Enable Error Interrupt Register
 * - DMA_SEEI - Set Enable Error Interrupt Register
 * - DMA_CERQ - Clear Enable Request Register
 * - DMA_SERQ - Set Enable Request Register
 * - DMA_CDNE - Clear DONE Status Bit Register
 * - DMA_SSRT - Set START Bit Register
 * - DMA_CERR - Clear Error Register
 * - DMA_CINT - Clear Interrupt Request Register
 * - DMA_INT - Interrupt Request Register
 * - DMA_ERR - Error Register
 * - DMA_HRS - Hardware Request Status Register
 * - DMA_EARS - Enable Asynchronous Request in Stop Register
 * - DMA_DCHPRI3 - Channel n Priority Register
 * - DMA_DCHPRI2 - Channel n Priority Register
 * - DMA_DCHPRI1 - Channel n Priority Register
 * - DMA_DCHPRI0 - Channel n Priority Register
 * - DMA_DCHPRI7 - Channel n Priority Register
 * - DMA_DCHPRI6 - Channel n Priority Register
 * - DMA_DCHPRI5 - Channel n Priority Register
 * - DMA_DCHPRI4 - Channel n Priority Register
 * - DMA_DCHPRI11 - Channel n Priority Register
 * - DMA_DCHPRI10 - Channel n Priority Register
 * - DMA_DCHPRI9 - Channel n Priority Register
 * - DMA_DCHPRI8 - Channel n Priority Register
 * - DMA_DCHPRI15 - Channel n Priority Register
 * - DMA_DCHPRI14 - Channel n Priority Register
 * - DMA_DCHPRI13 - Channel n Priority Register
 * - DMA_DCHPRI12 - Channel n Priority Register
 * - DMA_DCHPRI19 - Channel n Priority Register
 * - DMA_DCHPRI18 - Channel n Priority Register
 * - DMA_DCHPRI17 - Channel n Priority Register
 * - DMA_DCHPRI16 - Channel n Priority Register
 * - DMA_DCHPRI23 - Channel n Priority Register
 * - DMA_DCHPRI22 - Channel n Priority Register
 * - DMA_DCHPRI21 - Channel n Priority Register
 * - DMA_DCHPRI20 - Channel n Priority Register
 * - DMA_DCHPRI27 - Channel n Priority Register
 * - DMA_DCHPRI26 - Channel n Priority Register
 * - DMA_DCHPRI25 - Channel n Priority Register
 * - DMA_DCHPRI24 - Channel n Priority Register
 * - DMA_DCHPRI31 - Channel n Priority Register
 * - DMA_DCHPRI30 - Channel n Priority Register
 * - DMA_DCHPRI29 - Channel n Priority Register
 * - DMA_DCHPRI28 - Channel n Priority Register
 * - DMA_SADDR - TCD Source Address
 * - DMA_SOFF - TCD Signed Source Address Offset
 * - DMA_ATTR - TCD Transfer Attributes
 * - DMA_NBYTES_MLNO - TCD Minor Byte Count (Minor Loop Mapping Disabled)
 * - DMA_NBYTES_MLOFFNO - TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)
 * - DMA_NBYTES_MLOFFYES - TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)
 * - DMA_SLAST - TCD Last Source Address Adjustment
 * - DMA_DADDR - TCD Destination Address
 * - DMA_DOFF - TCD Signed Destination Address Offset
 * - DMA_CITER_ELINKNO - TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)
 * - DMA_CITER_ELINKYES - TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)
 * - DMA_DLAST_SGA - TCD Last Destination Address Adjustment/Scatter Gather Address
 * - DMA_CSR - TCD Control and Status
 * - DMA_BITER_ELINKNO - TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)
 * - DMA_BITER_ELINKYES - TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)
 */

#define DMA_INSTANCE_COUNT (1U) /*!< Number of instances of the DMA module. */
#define DMA_IDX (0U) /*!< Instance number for DMA. */

/*******************************************************************************
 * DMA_CR - Control Register
 ******************************************************************************/

/*!
 * @brief DMA_CR - Control Register (RW)
 *
 * Reset value: 0x00000400U
 *
 * The CR defines the basic operating configuration of the DMA. The DMA
 * arbitrates channel service requests in two groups of 16 channels each: Group 1
 * contains channels 31-16 Group 0 contains channels 15-0 Arbitration within a group can
 * be configured to use either a fixed-priority or a round-robin scheme. For
 * fixed-priority arbitration, the highest priority channel requesting service is
 * selected to execute. The channel priority registers assign the priorities; see
 * the DCHPRIn registers. For round-robin arbitration, the channel priorities are
 * ignored and channels within each group are cycled through (from high to low
 * channel number) without regard to priority. For correct operation, writes to the
 * CR register must be performed only when the DMA channels are inactive; that
 * is, when TCDn_CSR[ACTIVE] bits are cleared. The group priorities operate in a
 * similar fashion. In group fixed priority arbitration mode, channel service
 * requests in the highest priority group are executed first, where priority level 1
 * is the highest and priority level 0 is the lowest. The group priorities are
 * assigned in the GRPnPRI fields of the DMA Control Register (CR). All group
 * priorities must have unique values prior to any channel service requests occurring;
 * otherwise, a configuration error will be reported. For group round robin
 * arbitration, the group priorities are ignored and the groups are cycled through
 * (from high to low group number) without regard to priority. Minor loop offsets
 * are address offset values added to the final source address (TCDn_SADDR) or
 * destination address (TCDn_DADDR) upon minor loop completion. When minor loop
 * offsets are enabled, the minor loop offset (MLOFF) is added to the final source
 * address (TCDn_SADDR), to the final destination address (TCDn_DADDR), or to both
 * prior to the addresses being written back into the TCD. If the major loop is
 * complete, the minor loop offset is ignored and the major loop address offsets
 * (TCDn_SLAST and TCDn_DLAST_SGA) are used to compute the next TCDn_SADDR and
 * TCDn_DADDR values. When minor loop mapping is enabled (EMLM is 1), TCDn word2 is
 * redefined. A portion of TCDn word2 is used to specify multiple fields: a
 * source enable bit (SMLOE) to specify the minor loop offset should be applied to the
 * source address (TCDn_SADDR) upon minor loop completion, a destination enable
 * bit (DMLOE) to specify the minor loop offset should be applied to the
 * destination address (TCDn_DADDR) upon minor loop completion, and the sign extended
 * minor loop offset value (MLOFF). The same offset value (MLOFF) is used for both
 * source and destination minor loop offsets. When either minor loop offset is
 * enabled (SMLOE set or DMLOE set), the NBYTES field is reduced to 10 bits. When
 * both minor loop offsets are disabled (SMLOE cleared and DMLOE cleared), the
 * NBYTES field is a 30-bit vector. When minor loop mapping is disabled (EMLM is 0),
 * all 32 bits of TCDn word2 are assigned to the NBYTES field.
 */
/*!
 * @name Constants and macros for entire DMA_CR register
 */
/*@{*/
#define DMA_RD_CR(base)          (DMA_CR_REG(base))
#define DMA_WR_CR(base, value)   (DMA_CR_REG(base) = (value))
#define DMA_RMW_CR(base, mask, value) (DMA_WR_CR(base, (DMA_RD_CR(base) & ~(mask)) | (value)))
#define DMA_SET_CR(base, value)  (BME_OR32(&DMA_CR_REG(base), (uint32_t)(value)))
#define DMA_CLR_CR(base, value)  (BME_AND32(&DMA_CR_REG(base), (uint32_t)(~(value))))
#define DMA_TOG_CR(base, value)  (BME_XOR32(&DMA_CR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_CR bitfields
 */

/*!
 * @name Register DMA_CR, field EDBG[1] (RW)
 *
 * Values:
 * - 0b0 - When in debug mode, the DMA continues to operate.
 * - 0b1 - When in debug mode, the DMA stalls the start of a new channel.
 *     Executing channels are allowed to complete. Channel execution resumes when the
 *     system exits debug mode or the EDBG bit is cleared.
 */
/*@{*/
/*! @brief Read current value of the DMA_CR_EDBG field. */
#define DMA_RD_CR_EDBG(base) ((DMA_CR_REG(base) & DMA_CR_EDBG_MASK) >> DMA_CR_EDBG_SHIFT)
#define DMA_BRD_CR_EDBG(base) (BME_UBFX32(&DMA_CR_REG(base), DMA_CR_EDBG_SHIFT, DMA_CR_EDBG_WIDTH))

/*! @brief Set the EDBG field to a new value. */
#define DMA_WR_CR_EDBG(base, value) (DMA_RMW_CR(base, DMA_CR_EDBG_MASK, DMA_CR_EDBG(value)))
#define DMA_BWR_CR_EDBG(base, value) (BME_BFI32(&DMA_CR_REG(base), ((uint32_t)(value) << DMA_CR_EDBG_SHIFT), DMA_CR_EDBG_SHIFT, DMA_CR_EDBG_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CR, field ERCA[2] (RW)
 *
 * Values:
 * - 0b0 - Fixed priority arbitration is used for channel selection within each
 *     group.
 * - 0b1 - Round robin arbitration is used for channel selection within each
 *     group.
 */
/*@{*/
/*! @brief Read current value of the DMA_CR_ERCA field. */
#define DMA_RD_CR_ERCA(base) ((DMA_CR_REG(base) & DMA_CR_ERCA_MASK) >> DMA_CR_ERCA_SHIFT)
#define DMA_BRD_CR_ERCA(base) (BME_UBFX32(&DMA_CR_REG(base), DMA_CR_ERCA_SHIFT, DMA_CR_ERCA_WIDTH))

/*! @brief Set the ERCA field to a new value. */
#define DMA_WR_CR_ERCA(base, value) (DMA_RMW_CR(base, DMA_CR_ERCA_MASK, DMA_CR_ERCA(value)))
#define DMA_BWR_CR_ERCA(base, value) (BME_BFI32(&DMA_CR_REG(base), ((uint32_t)(value) << DMA_CR_ERCA_SHIFT), DMA_CR_ERCA_SHIFT, DMA_CR_ERCA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CR, field ERGA[3] (RW)
 *
 * Values:
 * - 0b0 - Fixed priority arbitration is used for selection among the groups.
 * - 0b1 - Round robin arbitration is used for selection among the groups.
 */
/*@{*/
/*! @brief Read current value of the DMA_CR_ERGA field. */
#define DMA_RD_CR_ERGA(base) ((DMA_CR_REG(base) & DMA_CR_ERGA_MASK) >> DMA_CR_ERGA_SHIFT)
#define DMA_BRD_CR_ERGA(base) (BME_UBFX32(&DMA_CR_REG(base), DMA_CR_ERGA_SHIFT, DMA_CR_ERGA_WIDTH))

/*! @brief Set the ERGA field to a new value. */
#define DMA_WR_CR_ERGA(base, value) (DMA_RMW_CR(base, DMA_CR_ERGA_MASK, DMA_CR_ERGA(value)))
#define DMA_BWR_CR_ERGA(base, value) (BME_BFI32(&DMA_CR_REG(base), ((uint32_t)(value) << DMA_CR_ERGA_SHIFT), DMA_CR_ERGA_SHIFT, DMA_CR_ERGA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CR, field HOE[4] (RW)
 *
 * Values:
 * - 0b0 - Normal operation
 * - 0b1 - Any error causes the HALT bit to set. Subsequently, all service
 *     requests are ignored until the HALT bit is cleared.
 */
/*@{*/
/*! @brief Read current value of the DMA_CR_HOE field. */
#define DMA_RD_CR_HOE(base)  ((DMA_CR_REG(base) & DMA_CR_HOE_MASK) >> DMA_CR_HOE_SHIFT)
#define DMA_BRD_CR_HOE(base) (BME_UBFX32(&DMA_CR_REG(base), DMA_CR_HOE_SHIFT, DMA_CR_HOE_WIDTH))

/*! @brief Set the HOE field to a new value. */
#define DMA_WR_CR_HOE(base, value) (DMA_RMW_CR(base, DMA_CR_HOE_MASK, DMA_CR_HOE(value)))
#define DMA_BWR_CR_HOE(base, value) (BME_BFI32(&DMA_CR_REG(base), ((uint32_t)(value) << DMA_CR_HOE_SHIFT), DMA_CR_HOE_SHIFT, DMA_CR_HOE_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CR, field HALT[5] (RW)
 *
 * Values:
 * - 0b0 - Normal operation
 * - 0b1 - Stall the start of any new channels. Executing channels are allowed
 *     to complete. Channel execution resumes when this bit is cleared.
 */
/*@{*/
/*! @brief Read current value of the DMA_CR_HALT field. */
#define DMA_RD_CR_HALT(base) ((DMA_CR_REG(base) & DMA_CR_HALT_MASK) >> DMA_CR_HALT_SHIFT)
#define DMA_BRD_CR_HALT(base) (BME_UBFX32(&DMA_CR_REG(base), DMA_CR_HALT_SHIFT, DMA_CR_HALT_WIDTH))

/*! @brief Set the HALT field to a new value. */
#define DMA_WR_CR_HALT(base, value) (DMA_RMW_CR(base, DMA_CR_HALT_MASK, DMA_CR_HALT(value)))
#define DMA_BWR_CR_HALT(base, value) (BME_BFI32(&DMA_CR_REG(base), ((uint32_t)(value) << DMA_CR_HALT_SHIFT), DMA_CR_HALT_SHIFT, DMA_CR_HALT_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CR, field CLM[6] (RW)
 *
 * Do not use continuous link mode with a channel linking to itself if there is
 * only one minor loop iteration per service request. If the channel's NBYTES
 * value is the same as either the source or destination size, do not use channel
 * linking to itself. The same data transfer profile can be achieved by simply
 * increasing the NBYTES value. A larger NBYTES value provides more efficient, faster
 * processing.
 *
 * Values:
 * - 0b0 - A minor loop channel link made to itself goes through channel
 *     arbitration before being activated again.
 * - 0b1 - A minor loop channel link made to itself does not go through channel
 *     arbitration before being activated again. Upon minor loop completion, the
 *     channel activates again if that channel has a minor loop channel link
 *     enabled and the link channel is itself. This effectively applies the minor
 *     loop offsets and restarts the next minor loop.
 */
/*@{*/
/*! @brief Read current value of the DMA_CR_CLM field. */
#define DMA_RD_CR_CLM(base)  ((DMA_CR_REG(base) & DMA_CR_CLM_MASK) >> DMA_CR_CLM_SHIFT)
#define DMA_BRD_CR_CLM(base) (BME_UBFX32(&DMA_CR_REG(base), DMA_CR_CLM_SHIFT, DMA_CR_CLM_WIDTH))

/*! @brief Set the CLM field to a new value. */
#define DMA_WR_CR_CLM(base, value) (DMA_RMW_CR(base, DMA_CR_CLM_MASK, DMA_CR_CLM(value)))
#define DMA_BWR_CR_CLM(base, value) (BME_BFI32(&DMA_CR_REG(base), ((uint32_t)(value) << DMA_CR_CLM_SHIFT), DMA_CR_CLM_SHIFT, DMA_CR_CLM_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CR, field EMLM[7] (RW)
 *
 * Values:
 * - 0b0 - Disabled. TCDn.word2 is defined as a 32-bit NBYTES field.
 * - 0b1 - Enabled. TCDn.word2 is redefined to include individual enable fields,
 *     an offset field, and the NBYTES field. The individual enable fields allow
 *     the minor loop offset to be applied to the source address, the
 *     destination address, or both. The NBYTES field is reduced when either offset is
 *     enabled.
 */
/*@{*/
/*! @brief Read current value of the DMA_CR_EMLM field. */
#define DMA_RD_CR_EMLM(base) ((DMA_CR_REG(base) & DMA_CR_EMLM_MASK) >> DMA_CR_EMLM_SHIFT)
#define DMA_BRD_CR_EMLM(base) (BME_UBFX32(&DMA_CR_REG(base), DMA_CR_EMLM_SHIFT, DMA_CR_EMLM_WIDTH))

/*! @brief Set the EMLM field to a new value. */
#define DMA_WR_CR_EMLM(base, value) (DMA_RMW_CR(base, DMA_CR_EMLM_MASK, DMA_CR_EMLM(value)))
#define DMA_BWR_CR_EMLM(base, value) (BME_BFI32(&DMA_CR_REG(base), ((uint32_t)(value) << DMA_CR_EMLM_SHIFT), DMA_CR_EMLM_SHIFT, DMA_CR_EMLM_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CR, field GRP0PRI[8] (RW)
 *
 * Group 0 priority level when fixed priority group arbitration is enabled.
 */
/*@{*/
/*! @brief Read current value of the DMA_CR_GRP0PRI field. */
#define DMA_RD_CR_GRP0PRI(base) ((DMA_CR_REG(base) & DMA_CR_GRP0PRI_MASK) >> DMA_CR_GRP0PRI_SHIFT)
#define DMA_BRD_CR_GRP0PRI(base) (BME_UBFX32(&DMA_CR_REG(base), DMA_CR_GRP0PRI_SHIFT, DMA_CR_GRP0PRI_WIDTH))

/*! @brief Set the GRP0PRI field to a new value. */
#define DMA_WR_CR_GRP0PRI(base, value) (DMA_RMW_CR(base, DMA_CR_GRP0PRI_MASK, DMA_CR_GRP0PRI(value)))
#define DMA_BWR_CR_GRP0PRI(base, value) (BME_BFI32(&DMA_CR_REG(base), ((uint32_t)(value) << DMA_CR_GRP0PRI_SHIFT), DMA_CR_GRP0PRI_SHIFT, DMA_CR_GRP0PRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CR, field GRP1PRI[10] (RW)
 *
 * Group 1 priority level when fixed priority group arbitration is enabled.
 */
/*@{*/
/*! @brief Read current value of the DMA_CR_GRP1PRI field. */
#define DMA_RD_CR_GRP1PRI(base) ((DMA_CR_REG(base) & DMA_CR_GRP1PRI_MASK) >> DMA_CR_GRP1PRI_SHIFT)
#define DMA_BRD_CR_GRP1PRI(base) (BME_UBFX32(&DMA_CR_REG(base), DMA_CR_GRP1PRI_SHIFT, DMA_CR_GRP1PRI_WIDTH))

/*! @brief Set the GRP1PRI field to a new value. */
#define DMA_WR_CR_GRP1PRI(base, value) (DMA_RMW_CR(base, DMA_CR_GRP1PRI_MASK, DMA_CR_GRP1PRI(value)))
#define DMA_BWR_CR_GRP1PRI(base, value) (BME_BFI32(&DMA_CR_REG(base), ((uint32_t)(value) << DMA_CR_GRP1PRI_SHIFT), DMA_CR_GRP1PRI_SHIFT, DMA_CR_GRP1PRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CR, field ECX[16] (RW)
 *
 * Values:
 * - 0b0 - Normal operation
 * - 0b1 - Cancel the remaining data transfer in the same fashion as the CX bit.
 *     Stop the executing channel and force the minor loop to finish. The cancel
 *     takes effect after the last write of the current read/write sequence. The
 *     ECX bit clears itself after the cancel is honored. In addition to
 *     cancelling the transfer, ECX treats the cancel as an error condition, thus
 *     updating the Error Status register (DMAx_ES) and generating an optional error
 *     interrupt.
 */
/*@{*/
/*! @brief Read current value of the DMA_CR_ECX field. */
#define DMA_RD_CR_ECX(base)  ((DMA_CR_REG(base) & DMA_CR_ECX_MASK) >> DMA_CR_ECX_SHIFT)
#define DMA_BRD_CR_ECX(base) (BME_UBFX32(&DMA_CR_REG(base), DMA_CR_ECX_SHIFT, DMA_CR_ECX_WIDTH))

/*! @brief Set the ECX field to a new value. */
#define DMA_WR_CR_ECX(base, value) (DMA_RMW_CR(base, DMA_CR_ECX_MASK, DMA_CR_ECX(value)))
#define DMA_BWR_CR_ECX(base, value) (BME_BFI32(&DMA_CR_REG(base), ((uint32_t)(value) << DMA_CR_ECX_SHIFT), DMA_CR_ECX_SHIFT, DMA_CR_ECX_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CR, field CX[17] (RW)
 *
 * Values:
 * - 0b0 - Normal operation
 * - 0b1 - Cancel the remaining data transfer. Stop the executing channel and
 *     force the minor loop to finish. The cancel takes effect after the last write
 *     of the current read/write sequence. The CX bit clears itself after the
 *     cancel has been honored. This cancel retires the channel normally as if the
 *     minor loop was completed.
 */
/*@{*/
/*! @brief Read current value of the DMA_CR_CX field. */
#define DMA_RD_CR_CX(base)   ((DMA_CR_REG(base) & DMA_CR_CX_MASK) >> DMA_CR_CX_SHIFT)
#define DMA_BRD_CR_CX(base)  (BME_UBFX32(&DMA_CR_REG(base), DMA_CR_CX_SHIFT, DMA_CR_CX_WIDTH))

/*! @brief Set the CX field to a new value. */
#define DMA_WR_CR_CX(base, value) (DMA_RMW_CR(base, DMA_CR_CX_MASK, DMA_CR_CX(value)))
#define DMA_BWR_CR_CX(base, value) (BME_BFI32(&DMA_CR_REG(base), ((uint32_t)(value) << DMA_CR_CX_SHIFT), DMA_CR_CX_SHIFT, DMA_CR_CX_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_ES - Error Status Register
 ******************************************************************************/

/*!
 * @brief DMA_ES - Error Status Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The ES provides information concerning the last recorded channel error.
 * Channel errors can be caused by: A configuration error, that is: An illegal setting
 * in the transfer-control descriptor, or An illegal priority register setting
 * in fixed-arbitration An error termination to a bus master read or write cycle
 * See the Error Reporting and Handling section for more details.
 */
/*!
 * @name Constants and macros for entire DMA_ES register
 */
/*@{*/
#define DMA_RD_ES(base)          (DMA_ES_REG(base))
/*@}*/

/*
 * Constants & macros for individual DMA_ES bitfields
 */

/*!
 * @name Register DMA_ES, field DBE[0] (RO)
 *
 * Values:
 * - 0b0 - No destination bus error
 * - 0b1 - The last recorded error was a bus error on a destination write
 */
/*@{*/
/*! @brief Read current value of the DMA_ES_DBE field. */
#define DMA_RD_ES_DBE(base)  ((DMA_ES_REG(base) & DMA_ES_DBE_MASK) >> DMA_ES_DBE_SHIFT)
#define DMA_BRD_ES_DBE(base) (BME_UBFX32(&DMA_ES_REG(base), DMA_ES_DBE_SHIFT, DMA_ES_DBE_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ES, field SBE[1] (RO)
 *
 * Values:
 * - 0b0 - No source bus error
 * - 0b1 - The last recorded error was a bus error on a source read
 */
/*@{*/
/*! @brief Read current value of the DMA_ES_SBE field. */
#define DMA_RD_ES_SBE(base)  ((DMA_ES_REG(base) & DMA_ES_SBE_MASK) >> DMA_ES_SBE_SHIFT)
#define DMA_BRD_ES_SBE(base) (BME_UBFX32(&DMA_ES_REG(base), DMA_ES_SBE_SHIFT, DMA_ES_SBE_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ES, field SGE[2] (RO)
 *
 * Values:
 * - 0b0 - No scatter/gather configuration error
 * - 0b1 - The last recorded error was a configuration error detected in the
 *     TCDn_DLASTSGA field. This field is checked at the beginning of a
 *     scatter/gather operation after major loop completion if TCDn_CSR[ESG] is enabled.
 *     TCDn_DLASTSGA is not on a 32 byte boundary.
 */
/*@{*/
/*! @brief Read current value of the DMA_ES_SGE field. */
#define DMA_RD_ES_SGE(base)  ((DMA_ES_REG(base) & DMA_ES_SGE_MASK) >> DMA_ES_SGE_SHIFT)
#define DMA_BRD_ES_SGE(base) (BME_UBFX32(&DMA_ES_REG(base), DMA_ES_SGE_SHIFT, DMA_ES_SGE_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ES, field NCE[3] (RO)
 *
 * Values:
 * - 0b0 - No NBYTES/CITER configuration error
 * - 0b1 - The last recorded error was a configuration error detected in the
 *     TCDn_NBYTES or TCDn_CITER fields. TCDn_NBYTES is not a multiple of
 *     TCDn_ATTR[SSIZE] and TCDn_ATTR[DSIZE], or TCDn_CITER[CITER] is equal to zero, or
 *     TCDn_CITER[ELINK] is not equal to TCDn_BITER[ELINK]
 */
/*@{*/
/*! @brief Read current value of the DMA_ES_NCE field. */
#define DMA_RD_ES_NCE(base)  ((DMA_ES_REG(base) & DMA_ES_NCE_MASK) >> DMA_ES_NCE_SHIFT)
#define DMA_BRD_ES_NCE(base) (BME_UBFX32(&DMA_ES_REG(base), DMA_ES_NCE_SHIFT, DMA_ES_NCE_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ES, field DOE[4] (RO)
 *
 * Values:
 * - 0b0 - No destination offset configuration error
 * - 0b1 - The last recorded error was a configuration error detected in the
 *     TCDn_DOFF field. TCDn_DOFF is inconsistent with TCDn_ATTR[DSIZE].
 */
/*@{*/
/*! @brief Read current value of the DMA_ES_DOE field. */
#define DMA_RD_ES_DOE(base)  ((DMA_ES_REG(base) & DMA_ES_DOE_MASK) >> DMA_ES_DOE_SHIFT)
#define DMA_BRD_ES_DOE(base) (BME_UBFX32(&DMA_ES_REG(base), DMA_ES_DOE_SHIFT, DMA_ES_DOE_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ES, field DAE[5] (RO)
 *
 * Values:
 * - 0b0 - No destination address configuration error
 * - 0b1 - The last recorded error was a configuration error detected in the
 *     TCDn_DADDR field. TCDn_DADDR is inconsistent with TCDn_ATTR[DSIZE].
 */
/*@{*/
/*! @brief Read current value of the DMA_ES_DAE field. */
#define DMA_RD_ES_DAE(base)  ((DMA_ES_REG(base) & DMA_ES_DAE_MASK) >> DMA_ES_DAE_SHIFT)
#define DMA_BRD_ES_DAE(base) (BME_UBFX32(&DMA_ES_REG(base), DMA_ES_DAE_SHIFT, DMA_ES_DAE_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ES, field SOE[6] (RO)
 *
 * Values:
 * - 0b0 - No source offset configuration error
 * - 0b1 - The last recorded error was a configuration error detected in the
 *     TCDn_SOFF field. TCDn_SOFF is inconsistent with TCDn_ATTR[SSIZE].
 */
/*@{*/
/*! @brief Read current value of the DMA_ES_SOE field. */
#define DMA_RD_ES_SOE(base)  ((DMA_ES_REG(base) & DMA_ES_SOE_MASK) >> DMA_ES_SOE_SHIFT)
#define DMA_BRD_ES_SOE(base) (BME_UBFX32(&DMA_ES_REG(base), DMA_ES_SOE_SHIFT, DMA_ES_SOE_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ES, field SAE[7] (RO)
 *
 * Values:
 * - 0b0 - No source address configuration error.
 * - 0b1 - The last recorded error was a configuration error detected in the
 *     TCDn_SADDR field. TCDn_SADDR is inconsistent with TCDn_ATTR[SSIZE].
 */
/*@{*/
/*! @brief Read current value of the DMA_ES_SAE field. */
#define DMA_RD_ES_SAE(base)  ((DMA_ES_REG(base) & DMA_ES_SAE_MASK) >> DMA_ES_SAE_SHIFT)
#define DMA_BRD_ES_SAE(base) (BME_UBFX32(&DMA_ES_REG(base), DMA_ES_SAE_SHIFT, DMA_ES_SAE_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ES, field ERRCHN[12:8] (RO)
 *
 * The channel number of the last recorded error, excluding GPE and CPE errors,
 * or last recorded error canceled transfer.
 */
/*@{*/
/*! @brief Read current value of the DMA_ES_ERRCHN field. */
#define DMA_RD_ES_ERRCHN(base) ((DMA_ES_REG(base) & DMA_ES_ERRCHN_MASK) >> DMA_ES_ERRCHN_SHIFT)
#define DMA_BRD_ES_ERRCHN(base) (BME_UBFX32(&DMA_ES_REG(base), DMA_ES_ERRCHN_SHIFT, DMA_ES_ERRCHN_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ES, field CPE[14] (RO)
 *
 * Values:
 * - 0b0 - No channel priority error
 * - 0b1 - The last recorded error was a configuration error in the channel
 *     priorities within a group. Channel priorities within a group are not unique.
 */
/*@{*/
/*! @brief Read current value of the DMA_ES_CPE field. */
#define DMA_RD_ES_CPE(base)  ((DMA_ES_REG(base) & DMA_ES_CPE_MASK) >> DMA_ES_CPE_SHIFT)
#define DMA_BRD_ES_CPE(base) (BME_UBFX32(&DMA_ES_REG(base), DMA_ES_CPE_SHIFT, DMA_ES_CPE_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ES, field GPE[15] (RO)
 *
 * Values:
 * - 0b0 - No group priority error
 * - 0b1 - The last recorded error was a configuration error among the group
 *     priorities. All group priorities are not unique.
 */
/*@{*/
/*! @brief Read current value of the DMA_ES_GPE field. */
#define DMA_RD_ES_GPE(base)  ((DMA_ES_REG(base) & DMA_ES_GPE_MASK) >> DMA_ES_GPE_SHIFT)
#define DMA_BRD_ES_GPE(base) (BME_UBFX32(&DMA_ES_REG(base), DMA_ES_GPE_SHIFT, DMA_ES_GPE_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ES, field ECX[16] (RO)
 *
 * Values:
 * - 0b0 - No canceled transfers
 * - 0b1 - The last recorded entry was a canceled transfer by the error cancel
 *     transfer input
 */
/*@{*/
/*! @brief Read current value of the DMA_ES_ECX field. */
#define DMA_RD_ES_ECX(base)  ((DMA_ES_REG(base) & DMA_ES_ECX_MASK) >> DMA_ES_ECX_SHIFT)
#define DMA_BRD_ES_ECX(base) (BME_UBFX32(&DMA_ES_REG(base), DMA_ES_ECX_SHIFT, DMA_ES_ECX_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ES, field VLD[31] (RO)
 *
 * Logical OR of all ERR status bits
 *
 * Values:
 * - 0b0 - No ERR bits are set.
 * - 0b1 - At least one ERR bit is set indicating a valid error exists that has
 *     not been cleared.
 */
/*@{*/
/*! @brief Read current value of the DMA_ES_VLD field. */
#define DMA_RD_ES_VLD(base)  ((DMA_ES_REG(base) & DMA_ES_VLD_MASK) >> DMA_ES_VLD_SHIFT)
#define DMA_BRD_ES_VLD(base) (BME_UBFX32(&DMA_ES_REG(base), DMA_ES_VLD_SHIFT, DMA_ES_VLD_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_ERQ - Enable Request Register
 ******************************************************************************/

/*!
 * @brief DMA_ERQ - Enable Request Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The ERQ register provides a bit map for the 32 channels to enable the request
 * signal for each channel. The state of any given channel enable is directly
 * affected by writes to this register; it is also affected by writes to the SERQ
 * and CERQ registers. These registers are provided so the request enable for a
 * single channel can easily be modified without needing to perform a
 * read-modify-write sequence to the ERQ. DMA request input signals and this enable request
 * flag must be asserted before a channel's hardware service request is accepted.
 * The state of the DMA enable request flag does not affect a channel service
 * request made explicitly through software or a linked channel request.
 */
/*!
 * @name Constants and macros for entire DMA_ERQ register
 */
/*@{*/
#define DMA_RD_ERQ(base)         (DMA_ERQ_REG(base))
#define DMA_WR_ERQ(base, value)  (DMA_ERQ_REG(base) = (value))
#define DMA_RMW_ERQ(base, mask, value) (DMA_WR_ERQ(base, (DMA_RD_ERQ(base) & ~(mask)) | (value)))
#define DMA_SET_ERQ(base, value) (BME_OR32(&DMA_ERQ_REG(base), (uint32_t)(value)))
#define DMA_CLR_ERQ(base, value) (BME_AND32(&DMA_ERQ_REG(base), (uint32_t)(~(value))))
#define DMA_TOG_ERQ(base, value) (BME_XOR32(&DMA_ERQ_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_ERQ bitfields
 */

/*!
 * @name Register DMA_ERQ, field ERQ0[0] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ0 field. */
#define DMA_RD_ERQ_ERQ0(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ0_MASK) >> DMA_ERQ_ERQ0_SHIFT)
#define DMA_BRD_ERQ_ERQ0(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ0_SHIFT, DMA_ERQ_ERQ0_WIDTH))

/*! @brief Set the ERQ0 field to a new value. */
#define DMA_WR_ERQ_ERQ0(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ0_MASK, DMA_ERQ_ERQ0(value)))
#define DMA_BWR_ERQ_ERQ0(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ0_SHIFT), DMA_ERQ_ERQ0_SHIFT, DMA_ERQ_ERQ0_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ1[1] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ1 field. */
#define DMA_RD_ERQ_ERQ1(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ1_MASK) >> DMA_ERQ_ERQ1_SHIFT)
#define DMA_BRD_ERQ_ERQ1(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ1_SHIFT, DMA_ERQ_ERQ1_WIDTH))

/*! @brief Set the ERQ1 field to a new value. */
#define DMA_WR_ERQ_ERQ1(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ1_MASK, DMA_ERQ_ERQ1(value)))
#define DMA_BWR_ERQ_ERQ1(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ1_SHIFT), DMA_ERQ_ERQ1_SHIFT, DMA_ERQ_ERQ1_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ2[2] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ2 field. */
#define DMA_RD_ERQ_ERQ2(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ2_MASK) >> DMA_ERQ_ERQ2_SHIFT)
#define DMA_BRD_ERQ_ERQ2(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ2_SHIFT, DMA_ERQ_ERQ2_WIDTH))

/*! @brief Set the ERQ2 field to a new value. */
#define DMA_WR_ERQ_ERQ2(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ2_MASK, DMA_ERQ_ERQ2(value)))
#define DMA_BWR_ERQ_ERQ2(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ2_SHIFT), DMA_ERQ_ERQ2_SHIFT, DMA_ERQ_ERQ2_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ3[3] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ3 field. */
#define DMA_RD_ERQ_ERQ3(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ3_MASK) >> DMA_ERQ_ERQ3_SHIFT)
#define DMA_BRD_ERQ_ERQ3(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ3_SHIFT, DMA_ERQ_ERQ3_WIDTH))

/*! @brief Set the ERQ3 field to a new value. */
#define DMA_WR_ERQ_ERQ3(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ3_MASK, DMA_ERQ_ERQ3(value)))
#define DMA_BWR_ERQ_ERQ3(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ3_SHIFT), DMA_ERQ_ERQ3_SHIFT, DMA_ERQ_ERQ3_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ4[4] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ4 field. */
#define DMA_RD_ERQ_ERQ4(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ4_MASK) >> DMA_ERQ_ERQ4_SHIFT)
#define DMA_BRD_ERQ_ERQ4(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ4_SHIFT, DMA_ERQ_ERQ4_WIDTH))

/*! @brief Set the ERQ4 field to a new value. */
#define DMA_WR_ERQ_ERQ4(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ4_MASK, DMA_ERQ_ERQ4(value)))
#define DMA_BWR_ERQ_ERQ4(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ4_SHIFT), DMA_ERQ_ERQ4_SHIFT, DMA_ERQ_ERQ4_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ5[5] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ5 field. */
#define DMA_RD_ERQ_ERQ5(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ5_MASK) >> DMA_ERQ_ERQ5_SHIFT)
#define DMA_BRD_ERQ_ERQ5(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ5_SHIFT, DMA_ERQ_ERQ5_WIDTH))

/*! @brief Set the ERQ5 field to a new value. */
#define DMA_WR_ERQ_ERQ5(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ5_MASK, DMA_ERQ_ERQ5(value)))
#define DMA_BWR_ERQ_ERQ5(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ5_SHIFT), DMA_ERQ_ERQ5_SHIFT, DMA_ERQ_ERQ5_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ6[6] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ6 field. */
#define DMA_RD_ERQ_ERQ6(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ6_MASK) >> DMA_ERQ_ERQ6_SHIFT)
#define DMA_BRD_ERQ_ERQ6(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ6_SHIFT, DMA_ERQ_ERQ6_WIDTH))

/*! @brief Set the ERQ6 field to a new value. */
#define DMA_WR_ERQ_ERQ6(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ6_MASK, DMA_ERQ_ERQ6(value)))
#define DMA_BWR_ERQ_ERQ6(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ6_SHIFT), DMA_ERQ_ERQ6_SHIFT, DMA_ERQ_ERQ6_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ7[7] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ7 field. */
#define DMA_RD_ERQ_ERQ7(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ7_MASK) >> DMA_ERQ_ERQ7_SHIFT)
#define DMA_BRD_ERQ_ERQ7(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ7_SHIFT, DMA_ERQ_ERQ7_WIDTH))

/*! @brief Set the ERQ7 field to a new value. */
#define DMA_WR_ERQ_ERQ7(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ7_MASK, DMA_ERQ_ERQ7(value)))
#define DMA_BWR_ERQ_ERQ7(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ7_SHIFT), DMA_ERQ_ERQ7_SHIFT, DMA_ERQ_ERQ7_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ8[8] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ8 field. */
#define DMA_RD_ERQ_ERQ8(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ8_MASK) >> DMA_ERQ_ERQ8_SHIFT)
#define DMA_BRD_ERQ_ERQ8(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ8_SHIFT, DMA_ERQ_ERQ8_WIDTH))

/*! @brief Set the ERQ8 field to a new value. */
#define DMA_WR_ERQ_ERQ8(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ8_MASK, DMA_ERQ_ERQ8(value)))
#define DMA_BWR_ERQ_ERQ8(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ8_SHIFT), DMA_ERQ_ERQ8_SHIFT, DMA_ERQ_ERQ8_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ9[9] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ9 field. */
#define DMA_RD_ERQ_ERQ9(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ9_MASK) >> DMA_ERQ_ERQ9_SHIFT)
#define DMA_BRD_ERQ_ERQ9(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ9_SHIFT, DMA_ERQ_ERQ9_WIDTH))

/*! @brief Set the ERQ9 field to a new value. */
#define DMA_WR_ERQ_ERQ9(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ9_MASK, DMA_ERQ_ERQ9(value)))
#define DMA_BWR_ERQ_ERQ9(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ9_SHIFT), DMA_ERQ_ERQ9_SHIFT, DMA_ERQ_ERQ9_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ10[10] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ10 field. */
#define DMA_RD_ERQ_ERQ10(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ10_MASK) >> DMA_ERQ_ERQ10_SHIFT)
#define DMA_BRD_ERQ_ERQ10(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ10_SHIFT, DMA_ERQ_ERQ10_WIDTH))

/*! @brief Set the ERQ10 field to a new value. */
#define DMA_WR_ERQ_ERQ10(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ10_MASK, DMA_ERQ_ERQ10(value)))
#define DMA_BWR_ERQ_ERQ10(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ10_SHIFT), DMA_ERQ_ERQ10_SHIFT, DMA_ERQ_ERQ10_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ11[11] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ11 field. */
#define DMA_RD_ERQ_ERQ11(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ11_MASK) >> DMA_ERQ_ERQ11_SHIFT)
#define DMA_BRD_ERQ_ERQ11(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ11_SHIFT, DMA_ERQ_ERQ11_WIDTH))

/*! @brief Set the ERQ11 field to a new value. */
#define DMA_WR_ERQ_ERQ11(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ11_MASK, DMA_ERQ_ERQ11(value)))
#define DMA_BWR_ERQ_ERQ11(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ11_SHIFT), DMA_ERQ_ERQ11_SHIFT, DMA_ERQ_ERQ11_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ12[12] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ12 field. */
#define DMA_RD_ERQ_ERQ12(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ12_MASK) >> DMA_ERQ_ERQ12_SHIFT)
#define DMA_BRD_ERQ_ERQ12(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ12_SHIFT, DMA_ERQ_ERQ12_WIDTH))

/*! @brief Set the ERQ12 field to a new value. */
#define DMA_WR_ERQ_ERQ12(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ12_MASK, DMA_ERQ_ERQ12(value)))
#define DMA_BWR_ERQ_ERQ12(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ12_SHIFT), DMA_ERQ_ERQ12_SHIFT, DMA_ERQ_ERQ12_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ13[13] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ13 field. */
#define DMA_RD_ERQ_ERQ13(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ13_MASK) >> DMA_ERQ_ERQ13_SHIFT)
#define DMA_BRD_ERQ_ERQ13(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ13_SHIFT, DMA_ERQ_ERQ13_WIDTH))

/*! @brief Set the ERQ13 field to a new value. */
#define DMA_WR_ERQ_ERQ13(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ13_MASK, DMA_ERQ_ERQ13(value)))
#define DMA_BWR_ERQ_ERQ13(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ13_SHIFT), DMA_ERQ_ERQ13_SHIFT, DMA_ERQ_ERQ13_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ14[14] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ14 field. */
#define DMA_RD_ERQ_ERQ14(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ14_MASK) >> DMA_ERQ_ERQ14_SHIFT)
#define DMA_BRD_ERQ_ERQ14(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ14_SHIFT, DMA_ERQ_ERQ14_WIDTH))

/*! @brief Set the ERQ14 field to a new value. */
#define DMA_WR_ERQ_ERQ14(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ14_MASK, DMA_ERQ_ERQ14(value)))
#define DMA_BWR_ERQ_ERQ14(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ14_SHIFT), DMA_ERQ_ERQ14_SHIFT, DMA_ERQ_ERQ14_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ15[15] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ15 field. */
#define DMA_RD_ERQ_ERQ15(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ15_MASK) >> DMA_ERQ_ERQ15_SHIFT)
#define DMA_BRD_ERQ_ERQ15(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ15_SHIFT, DMA_ERQ_ERQ15_WIDTH))

/*! @brief Set the ERQ15 field to a new value. */
#define DMA_WR_ERQ_ERQ15(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ15_MASK, DMA_ERQ_ERQ15(value)))
#define DMA_BWR_ERQ_ERQ15(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ15_SHIFT), DMA_ERQ_ERQ15_SHIFT, DMA_ERQ_ERQ15_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ16[16] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ16 field. */
#define DMA_RD_ERQ_ERQ16(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ16_MASK) >> DMA_ERQ_ERQ16_SHIFT)
#define DMA_BRD_ERQ_ERQ16(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ16_SHIFT, DMA_ERQ_ERQ16_WIDTH))

/*! @brief Set the ERQ16 field to a new value. */
#define DMA_WR_ERQ_ERQ16(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ16_MASK, DMA_ERQ_ERQ16(value)))
#define DMA_BWR_ERQ_ERQ16(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ16_SHIFT), DMA_ERQ_ERQ16_SHIFT, DMA_ERQ_ERQ16_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ17[17] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ17 field. */
#define DMA_RD_ERQ_ERQ17(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ17_MASK) >> DMA_ERQ_ERQ17_SHIFT)
#define DMA_BRD_ERQ_ERQ17(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ17_SHIFT, DMA_ERQ_ERQ17_WIDTH))

/*! @brief Set the ERQ17 field to a new value. */
#define DMA_WR_ERQ_ERQ17(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ17_MASK, DMA_ERQ_ERQ17(value)))
#define DMA_BWR_ERQ_ERQ17(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ17_SHIFT), DMA_ERQ_ERQ17_SHIFT, DMA_ERQ_ERQ17_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ18[18] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ18 field. */
#define DMA_RD_ERQ_ERQ18(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ18_MASK) >> DMA_ERQ_ERQ18_SHIFT)
#define DMA_BRD_ERQ_ERQ18(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ18_SHIFT, DMA_ERQ_ERQ18_WIDTH))

/*! @brief Set the ERQ18 field to a new value. */
#define DMA_WR_ERQ_ERQ18(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ18_MASK, DMA_ERQ_ERQ18(value)))
#define DMA_BWR_ERQ_ERQ18(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ18_SHIFT), DMA_ERQ_ERQ18_SHIFT, DMA_ERQ_ERQ18_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ19[19] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ19 field. */
#define DMA_RD_ERQ_ERQ19(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ19_MASK) >> DMA_ERQ_ERQ19_SHIFT)
#define DMA_BRD_ERQ_ERQ19(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ19_SHIFT, DMA_ERQ_ERQ19_WIDTH))

/*! @brief Set the ERQ19 field to a new value. */
#define DMA_WR_ERQ_ERQ19(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ19_MASK, DMA_ERQ_ERQ19(value)))
#define DMA_BWR_ERQ_ERQ19(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ19_SHIFT), DMA_ERQ_ERQ19_SHIFT, DMA_ERQ_ERQ19_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ20[20] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ20 field. */
#define DMA_RD_ERQ_ERQ20(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ20_MASK) >> DMA_ERQ_ERQ20_SHIFT)
#define DMA_BRD_ERQ_ERQ20(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ20_SHIFT, DMA_ERQ_ERQ20_WIDTH))

/*! @brief Set the ERQ20 field to a new value. */
#define DMA_WR_ERQ_ERQ20(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ20_MASK, DMA_ERQ_ERQ20(value)))
#define DMA_BWR_ERQ_ERQ20(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ20_SHIFT), DMA_ERQ_ERQ20_SHIFT, DMA_ERQ_ERQ20_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ21[21] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ21 field. */
#define DMA_RD_ERQ_ERQ21(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ21_MASK) >> DMA_ERQ_ERQ21_SHIFT)
#define DMA_BRD_ERQ_ERQ21(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ21_SHIFT, DMA_ERQ_ERQ21_WIDTH))

/*! @brief Set the ERQ21 field to a new value. */
#define DMA_WR_ERQ_ERQ21(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ21_MASK, DMA_ERQ_ERQ21(value)))
#define DMA_BWR_ERQ_ERQ21(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ21_SHIFT), DMA_ERQ_ERQ21_SHIFT, DMA_ERQ_ERQ21_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ22[22] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ22 field. */
#define DMA_RD_ERQ_ERQ22(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ22_MASK) >> DMA_ERQ_ERQ22_SHIFT)
#define DMA_BRD_ERQ_ERQ22(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ22_SHIFT, DMA_ERQ_ERQ22_WIDTH))

/*! @brief Set the ERQ22 field to a new value. */
#define DMA_WR_ERQ_ERQ22(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ22_MASK, DMA_ERQ_ERQ22(value)))
#define DMA_BWR_ERQ_ERQ22(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ22_SHIFT), DMA_ERQ_ERQ22_SHIFT, DMA_ERQ_ERQ22_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ23[23] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ23 field. */
#define DMA_RD_ERQ_ERQ23(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ23_MASK) >> DMA_ERQ_ERQ23_SHIFT)
#define DMA_BRD_ERQ_ERQ23(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ23_SHIFT, DMA_ERQ_ERQ23_WIDTH))

/*! @brief Set the ERQ23 field to a new value. */
#define DMA_WR_ERQ_ERQ23(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ23_MASK, DMA_ERQ_ERQ23(value)))
#define DMA_BWR_ERQ_ERQ23(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ23_SHIFT), DMA_ERQ_ERQ23_SHIFT, DMA_ERQ_ERQ23_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ24[24] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ24 field. */
#define DMA_RD_ERQ_ERQ24(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ24_MASK) >> DMA_ERQ_ERQ24_SHIFT)
#define DMA_BRD_ERQ_ERQ24(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ24_SHIFT, DMA_ERQ_ERQ24_WIDTH))

/*! @brief Set the ERQ24 field to a new value. */
#define DMA_WR_ERQ_ERQ24(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ24_MASK, DMA_ERQ_ERQ24(value)))
#define DMA_BWR_ERQ_ERQ24(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ24_SHIFT), DMA_ERQ_ERQ24_SHIFT, DMA_ERQ_ERQ24_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ25[25] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ25 field. */
#define DMA_RD_ERQ_ERQ25(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ25_MASK) >> DMA_ERQ_ERQ25_SHIFT)
#define DMA_BRD_ERQ_ERQ25(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ25_SHIFT, DMA_ERQ_ERQ25_WIDTH))

/*! @brief Set the ERQ25 field to a new value. */
#define DMA_WR_ERQ_ERQ25(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ25_MASK, DMA_ERQ_ERQ25(value)))
#define DMA_BWR_ERQ_ERQ25(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ25_SHIFT), DMA_ERQ_ERQ25_SHIFT, DMA_ERQ_ERQ25_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ26[26] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ26 field. */
#define DMA_RD_ERQ_ERQ26(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ26_MASK) >> DMA_ERQ_ERQ26_SHIFT)
#define DMA_BRD_ERQ_ERQ26(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ26_SHIFT, DMA_ERQ_ERQ26_WIDTH))

/*! @brief Set the ERQ26 field to a new value. */
#define DMA_WR_ERQ_ERQ26(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ26_MASK, DMA_ERQ_ERQ26(value)))
#define DMA_BWR_ERQ_ERQ26(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ26_SHIFT), DMA_ERQ_ERQ26_SHIFT, DMA_ERQ_ERQ26_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ27[27] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ27 field. */
#define DMA_RD_ERQ_ERQ27(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ27_MASK) >> DMA_ERQ_ERQ27_SHIFT)
#define DMA_BRD_ERQ_ERQ27(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ27_SHIFT, DMA_ERQ_ERQ27_WIDTH))

/*! @brief Set the ERQ27 field to a new value. */
#define DMA_WR_ERQ_ERQ27(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ27_MASK, DMA_ERQ_ERQ27(value)))
#define DMA_BWR_ERQ_ERQ27(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ27_SHIFT), DMA_ERQ_ERQ27_SHIFT, DMA_ERQ_ERQ27_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ28[28] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ28 field. */
#define DMA_RD_ERQ_ERQ28(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ28_MASK) >> DMA_ERQ_ERQ28_SHIFT)
#define DMA_BRD_ERQ_ERQ28(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ28_SHIFT, DMA_ERQ_ERQ28_WIDTH))

/*! @brief Set the ERQ28 field to a new value. */
#define DMA_WR_ERQ_ERQ28(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ28_MASK, DMA_ERQ_ERQ28(value)))
#define DMA_BWR_ERQ_ERQ28(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ28_SHIFT), DMA_ERQ_ERQ28_SHIFT, DMA_ERQ_ERQ28_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ29[29] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ29 field. */
#define DMA_RD_ERQ_ERQ29(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ29_MASK) >> DMA_ERQ_ERQ29_SHIFT)
#define DMA_BRD_ERQ_ERQ29(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ29_SHIFT, DMA_ERQ_ERQ29_WIDTH))

/*! @brief Set the ERQ29 field to a new value. */
#define DMA_WR_ERQ_ERQ29(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ29_MASK, DMA_ERQ_ERQ29(value)))
#define DMA_BWR_ERQ_ERQ29(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ29_SHIFT), DMA_ERQ_ERQ29_SHIFT, DMA_ERQ_ERQ29_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ30[30] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ30 field. */
#define DMA_RD_ERQ_ERQ30(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ30_MASK) >> DMA_ERQ_ERQ30_SHIFT)
#define DMA_BRD_ERQ_ERQ30(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ30_SHIFT, DMA_ERQ_ERQ30_WIDTH))

/*! @brief Set the ERQ30 field to a new value. */
#define DMA_WR_ERQ_ERQ30(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ30_MASK, DMA_ERQ_ERQ30(value)))
#define DMA_BWR_ERQ_ERQ30(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ30_SHIFT), DMA_ERQ_ERQ30_SHIFT, DMA_ERQ_ERQ30_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERQ, field ERQ31[31] (RW)
 *
 * Values:
 * - 0b0 - The DMA request signal for the corresponding channel is disabled
 * - 0b1 - The DMA request signal for the corresponding channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ERQ_ERQ31 field. */
#define DMA_RD_ERQ_ERQ31(base) ((DMA_ERQ_REG(base) & DMA_ERQ_ERQ31_MASK) >> DMA_ERQ_ERQ31_SHIFT)
#define DMA_BRD_ERQ_ERQ31(base) (BME_UBFX32(&DMA_ERQ_REG(base), DMA_ERQ_ERQ31_SHIFT, DMA_ERQ_ERQ31_WIDTH))

/*! @brief Set the ERQ31 field to a new value. */
#define DMA_WR_ERQ_ERQ31(base, value) (DMA_RMW_ERQ(base, DMA_ERQ_ERQ31_MASK, DMA_ERQ_ERQ31(value)))
#define DMA_BWR_ERQ_ERQ31(base, value) (BME_BFI32(&DMA_ERQ_REG(base), ((uint32_t)(value) << DMA_ERQ_ERQ31_SHIFT), DMA_ERQ_ERQ31_SHIFT, DMA_ERQ_ERQ31_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_EEI - Enable Error Interrupt Register
 ******************************************************************************/

/*!
 * @brief DMA_EEI - Enable Error Interrupt Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The EEI register provides a bit map for the 32 channels to enable the error
 * interrupt signal for each channel. The state of any given channel's error
 * interrupt enable is directly affected by writes to this register; it is also
 * affected by writes to the SEEI and CEEI. These registers are provided so that the
 * error interrupt enable for a single channel can easily be modified without the
 * need to perform a read-modify-write sequence to the EEI register. The DMA error
 * indicator and the error interrupt enable flag must be asserted before an
 * error interrupt request for a given channel is asserted to the interrupt
 * controller.
 */
/*!
 * @name Constants and macros for entire DMA_EEI register
 */
/*@{*/
#define DMA_RD_EEI(base)         (DMA_EEI_REG(base))
#define DMA_WR_EEI(base, value)  (DMA_EEI_REG(base) = (value))
#define DMA_RMW_EEI(base, mask, value) (DMA_WR_EEI(base, (DMA_RD_EEI(base) & ~(mask)) | (value)))
#define DMA_SET_EEI(base, value) (BME_OR32(&DMA_EEI_REG(base), (uint32_t)(value)))
#define DMA_CLR_EEI(base, value) (BME_AND32(&DMA_EEI_REG(base), (uint32_t)(~(value))))
#define DMA_TOG_EEI(base, value) (BME_XOR32(&DMA_EEI_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_EEI bitfields
 */

/*!
 * @name Register DMA_EEI, field EEI0[0] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI0 field. */
#define DMA_RD_EEI_EEI0(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI0_MASK) >> DMA_EEI_EEI0_SHIFT)
#define DMA_BRD_EEI_EEI0(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI0_SHIFT, DMA_EEI_EEI0_WIDTH))

/*! @brief Set the EEI0 field to a new value. */
#define DMA_WR_EEI_EEI0(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI0_MASK, DMA_EEI_EEI0(value)))
#define DMA_BWR_EEI_EEI0(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI0_SHIFT), DMA_EEI_EEI0_SHIFT, DMA_EEI_EEI0_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI1[1] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI1 field. */
#define DMA_RD_EEI_EEI1(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI1_MASK) >> DMA_EEI_EEI1_SHIFT)
#define DMA_BRD_EEI_EEI1(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI1_SHIFT, DMA_EEI_EEI1_WIDTH))

/*! @brief Set the EEI1 field to a new value. */
#define DMA_WR_EEI_EEI1(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI1_MASK, DMA_EEI_EEI1(value)))
#define DMA_BWR_EEI_EEI1(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI1_SHIFT), DMA_EEI_EEI1_SHIFT, DMA_EEI_EEI1_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI2[2] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI2 field. */
#define DMA_RD_EEI_EEI2(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI2_MASK) >> DMA_EEI_EEI2_SHIFT)
#define DMA_BRD_EEI_EEI2(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI2_SHIFT, DMA_EEI_EEI2_WIDTH))

/*! @brief Set the EEI2 field to a new value. */
#define DMA_WR_EEI_EEI2(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI2_MASK, DMA_EEI_EEI2(value)))
#define DMA_BWR_EEI_EEI2(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI2_SHIFT), DMA_EEI_EEI2_SHIFT, DMA_EEI_EEI2_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI3[3] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI3 field. */
#define DMA_RD_EEI_EEI3(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI3_MASK) >> DMA_EEI_EEI3_SHIFT)
#define DMA_BRD_EEI_EEI3(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI3_SHIFT, DMA_EEI_EEI3_WIDTH))

/*! @brief Set the EEI3 field to a new value. */
#define DMA_WR_EEI_EEI3(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI3_MASK, DMA_EEI_EEI3(value)))
#define DMA_BWR_EEI_EEI3(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI3_SHIFT), DMA_EEI_EEI3_SHIFT, DMA_EEI_EEI3_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI4[4] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI4 field. */
#define DMA_RD_EEI_EEI4(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI4_MASK) >> DMA_EEI_EEI4_SHIFT)
#define DMA_BRD_EEI_EEI4(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI4_SHIFT, DMA_EEI_EEI4_WIDTH))

/*! @brief Set the EEI4 field to a new value. */
#define DMA_WR_EEI_EEI4(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI4_MASK, DMA_EEI_EEI4(value)))
#define DMA_BWR_EEI_EEI4(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI4_SHIFT), DMA_EEI_EEI4_SHIFT, DMA_EEI_EEI4_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI5[5] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI5 field. */
#define DMA_RD_EEI_EEI5(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI5_MASK) >> DMA_EEI_EEI5_SHIFT)
#define DMA_BRD_EEI_EEI5(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI5_SHIFT, DMA_EEI_EEI5_WIDTH))

/*! @brief Set the EEI5 field to a new value. */
#define DMA_WR_EEI_EEI5(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI5_MASK, DMA_EEI_EEI5(value)))
#define DMA_BWR_EEI_EEI5(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI5_SHIFT), DMA_EEI_EEI5_SHIFT, DMA_EEI_EEI5_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI6[6] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI6 field. */
#define DMA_RD_EEI_EEI6(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI6_MASK) >> DMA_EEI_EEI6_SHIFT)
#define DMA_BRD_EEI_EEI6(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI6_SHIFT, DMA_EEI_EEI6_WIDTH))

/*! @brief Set the EEI6 field to a new value. */
#define DMA_WR_EEI_EEI6(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI6_MASK, DMA_EEI_EEI6(value)))
#define DMA_BWR_EEI_EEI6(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI6_SHIFT), DMA_EEI_EEI6_SHIFT, DMA_EEI_EEI6_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI7[7] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI7 field. */
#define DMA_RD_EEI_EEI7(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI7_MASK) >> DMA_EEI_EEI7_SHIFT)
#define DMA_BRD_EEI_EEI7(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI7_SHIFT, DMA_EEI_EEI7_WIDTH))

/*! @brief Set the EEI7 field to a new value. */
#define DMA_WR_EEI_EEI7(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI7_MASK, DMA_EEI_EEI7(value)))
#define DMA_BWR_EEI_EEI7(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI7_SHIFT), DMA_EEI_EEI7_SHIFT, DMA_EEI_EEI7_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI8[8] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI8 field. */
#define DMA_RD_EEI_EEI8(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI8_MASK) >> DMA_EEI_EEI8_SHIFT)
#define DMA_BRD_EEI_EEI8(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI8_SHIFT, DMA_EEI_EEI8_WIDTH))

/*! @brief Set the EEI8 field to a new value. */
#define DMA_WR_EEI_EEI8(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI8_MASK, DMA_EEI_EEI8(value)))
#define DMA_BWR_EEI_EEI8(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI8_SHIFT), DMA_EEI_EEI8_SHIFT, DMA_EEI_EEI8_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI9[9] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI9 field. */
#define DMA_RD_EEI_EEI9(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI9_MASK) >> DMA_EEI_EEI9_SHIFT)
#define DMA_BRD_EEI_EEI9(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI9_SHIFT, DMA_EEI_EEI9_WIDTH))

/*! @brief Set the EEI9 field to a new value. */
#define DMA_WR_EEI_EEI9(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI9_MASK, DMA_EEI_EEI9(value)))
#define DMA_BWR_EEI_EEI9(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI9_SHIFT), DMA_EEI_EEI9_SHIFT, DMA_EEI_EEI9_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI10[10] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI10 field. */
#define DMA_RD_EEI_EEI10(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI10_MASK) >> DMA_EEI_EEI10_SHIFT)
#define DMA_BRD_EEI_EEI10(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI10_SHIFT, DMA_EEI_EEI10_WIDTH))

/*! @brief Set the EEI10 field to a new value. */
#define DMA_WR_EEI_EEI10(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI10_MASK, DMA_EEI_EEI10(value)))
#define DMA_BWR_EEI_EEI10(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI10_SHIFT), DMA_EEI_EEI10_SHIFT, DMA_EEI_EEI10_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI11[11] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI11 field. */
#define DMA_RD_EEI_EEI11(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI11_MASK) >> DMA_EEI_EEI11_SHIFT)
#define DMA_BRD_EEI_EEI11(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI11_SHIFT, DMA_EEI_EEI11_WIDTH))

/*! @brief Set the EEI11 field to a new value. */
#define DMA_WR_EEI_EEI11(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI11_MASK, DMA_EEI_EEI11(value)))
#define DMA_BWR_EEI_EEI11(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI11_SHIFT), DMA_EEI_EEI11_SHIFT, DMA_EEI_EEI11_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI12[12] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI12 field. */
#define DMA_RD_EEI_EEI12(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI12_MASK) >> DMA_EEI_EEI12_SHIFT)
#define DMA_BRD_EEI_EEI12(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI12_SHIFT, DMA_EEI_EEI12_WIDTH))

/*! @brief Set the EEI12 field to a new value. */
#define DMA_WR_EEI_EEI12(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI12_MASK, DMA_EEI_EEI12(value)))
#define DMA_BWR_EEI_EEI12(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI12_SHIFT), DMA_EEI_EEI12_SHIFT, DMA_EEI_EEI12_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI13[13] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI13 field. */
#define DMA_RD_EEI_EEI13(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI13_MASK) >> DMA_EEI_EEI13_SHIFT)
#define DMA_BRD_EEI_EEI13(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI13_SHIFT, DMA_EEI_EEI13_WIDTH))

/*! @brief Set the EEI13 field to a new value. */
#define DMA_WR_EEI_EEI13(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI13_MASK, DMA_EEI_EEI13(value)))
#define DMA_BWR_EEI_EEI13(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI13_SHIFT), DMA_EEI_EEI13_SHIFT, DMA_EEI_EEI13_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI14[14] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI14 field. */
#define DMA_RD_EEI_EEI14(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI14_MASK) >> DMA_EEI_EEI14_SHIFT)
#define DMA_BRD_EEI_EEI14(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI14_SHIFT, DMA_EEI_EEI14_WIDTH))

/*! @brief Set the EEI14 field to a new value. */
#define DMA_WR_EEI_EEI14(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI14_MASK, DMA_EEI_EEI14(value)))
#define DMA_BWR_EEI_EEI14(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI14_SHIFT), DMA_EEI_EEI14_SHIFT, DMA_EEI_EEI14_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI15[15] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI15 field. */
#define DMA_RD_EEI_EEI15(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI15_MASK) >> DMA_EEI_EEI15_SHIFT)
#define DMA_BRD_EEI_EEI15(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI15_SHIFT, DMA_EEI_EEI15_WIDTH))

/*! @brief Set the EEI15 field to a new value. */
#define DMA_WR_EEI_EEI15(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI15_MASK, DMA_EEI_EEI15(value)))
#define DMA_BWR_EEI_EEI15(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI15_SHIFT), DMA_EEI_EEI15_SHIFT, DMA_EEI_EEI15_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI16[16] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI16 field. */
#define DMA_RD_EEI_EEI16(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI16_MASK) >> DMA_EEI_EEI16_SHIFT)
#define DMA_BRD_EEI_EEI16(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI16_SHIFT, DMA_EEI_EEI16_WIDTH))

/*! @brief Set the EEI16 field to a new value. */
#define DMA_WR_EEI_EEI16(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI16_MASK, DMA_EEI_EEI16(value)))
#define DMA_BWR_EEI_EEI16(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI16_SHIFT), DMA_EEI_EEI16_SHIFT, DMA_EEI_EEI16_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI17[17] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI17 field. */
#define DMA_RD_EEI_EEI17(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI17_MASK) >> DMA_EEI_EEI17_SHIFT)
#define DMA_BRD_EEI_EEI17(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI17_SHIFT, DMA_EEI_EEI17_WIDTH))

/*! @brief Set the EEI17 field to a new value. */
#define DMA_WR_EEI_EEI17(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI17_MASK, DMA_EEI_EEI17(value)))
#define DMA_BWR_EEI_EEI17(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI17_SHIFT), DMA_EEI_EEI17_SHIFT, DMA_EEI_EEI17_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI18[18] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI18 field. */
#define DMA_RD_EEI_EEI18(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI18_MASK) >> DMA_EEI_EEI18_SHIFT)
#define DMA_BRD_EEI_EEI18(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI18_SHIFT, DMA_EEI_EEI18_WIDTH))

/*! @brief Set the EEI18 field to a new value. */
#define DMA_WR_EEI_EEI18(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI18_MASK, DMA_EEI_EEI18(value)))
#define DMA_BWR_EEI_EEI18(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI18_SHIFT), DMA_EEI_EEI18_SHIFT, DMA_EEI_EEI18_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI19[19] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI19 field. */
#define DMA_RD_EEI_EEI19(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI19_MASK) >> DMA_EEI_EEI19_SHIFT)
#define DMA_BRD_EEI_EEI19(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI19_SHIFT, DMA_EEI_EEI19_WIDTH))

/*! @brief Set the EEI19 field to a new value. */
#define DMA_WR_EEI_EEI19(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI19_MASK, DMA_EEI_EEI19(value)))
#define DMA_BWR_EEI_EEI19(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI19_SHIFT), DMA_EEI_EEI19_SHIFT, DMA_EEI_EEI19_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI20[20] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI20 field. */
#define DMA_RD_EEI_EEI20(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI20_MASK) >> DMA_EEI_EEI20_SHIFT)
#define DMA_BRD_EEI_EEI20(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI20_SHIFT, DMA_EEI_EEI20_WIDTH))

/*! @brief Set the EEI20 field to a new value. */
#define DMA_WR_EEI_EEI20(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI20_MASK, DMA_EEI_EEI20(value)))
#define DMA_BWR_EEI_EEI20(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI20_SHIFT), DMA_EEI_EEI20_SHIFT, DMA_EEI_EEI20_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI21[21] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI21 field. */
#define DMA_RD_EEI_EEI21(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI21_MASK) >> DMA_EEI_EEI21_SHIFT)
#define DMA_BRD_EEI_EEI21(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI21_SHIFT, DMA_EEI_EEI21_WIDTH))

/*! @brief Set the EEI21 field to a new value. */
#define DMA_WR_EEI_EEI21(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI21_MASK, DMA_EEI_EEI21(value)))
#define DMA_BWR_EEI_EEI21(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI21_SHIFT), DMA_EEI_EEI21_SHIFT, DMA_EEI_EEI21_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI22[22] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI22 field. */
#define DMA_RD_EEI_EEI22(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI22_MASK) >> DMA_EEI_EEI22_SHIFT)
#define DMA_BRD_EEI_EEI22(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI22_SHIFT, DMA_EEI_EEI22_WIDTH))

/*! @brief Set the EEI22 field to a new value. */
#define DMA_WR_EEI_EEI22(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI22_MASK, DMA_EEI_EEI22(value)))
#define DMA_BWR_EEI_EEI22(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI22_SHIFT), DMA_EEI_EEI22_SHIFT, DMA_EEI_EEI22_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI23[23] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI23 field. */
#define DMA_RD_EEI_EEI23(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI23_MASK) >> DMA_EEI_EEI23_SHIFT)
#define DMA_BRD_EEI_EEI23(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI23_SHIFT, DMA_EEI_EEI23_WIDTH))

/*! @brief Set the EEI23 field to a new value. */
#define DMA_WR_EEI_EEI23(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI23_MASK, DMA_EEI_EEI23(value)))
#define DMA_BWR_EEI_EEI23(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI23_SHIFT), DMA_EEI_EEI23_SHIFT, DMA_EEI_EEI23_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI24[24] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI24 field. */
#define DMA_RD_EEI_EEI24(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI24_MASK) >> DMA_EEI_EEI24_SHIFT)
#define DMA_BRD_EEI_EEI24(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI24_SHIFT, DMA_EEI_EEI24_WIDTH))

/*! @brief Set the EEI24 field to a new value. */
#define DMA_WR_EEI_EEI24(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI24_MASK, DMA_EEI_EEI24(value)))
#define DMA_BWR_EEI_EEI24(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI24_SHIFT), DMA_EEI_EEI24_SHIFT, DMA_EEI_EEI24_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI25[25] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI25 field. */
#define DMA_RD_EEI_EEI25(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI25_MASK) >> DMA_EEI_EEI25_SHIFT)
#define DMA_BRD_EEI_EEI25(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI25_SHIFT, DMA_EEI_EEI25_WIDTH))

/*! @brief Set the EEI25 field to a new value. */
#define DMA_WR_EEI_EEI25(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI25_MASK, DMA_EEI_EEI25(value)))
#define DMA_BWR_EEI_EEI25(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI25_SHIFT), DMA_EEI_EEI25_SHIFT, DMA_EEI_EEI25_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI26[26] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI26 field. */
#define DMA_RD_EEI_EEI26(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI26_MASK) >> DMA_EEI_EEI26_SHIFT)
#define DMA_BRD_EEI_EEI26(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI26_SHIFT, DMA_EEI_EEI26_WIDTH))

/*! @brief Set the EEI26 field to a new value. */
#define DMA_WR_EEI_EEI26(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI26_MASK, DMA_EEI_EEI26(value)))
#define DMA_BWR_EEI_EEI26(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI26_SHIFT), DMA_EEI_EEI26_SHIFT, DMA_EEI_EEI26_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI27[27] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI27 field. */
#define DMA_RD_EEI_EEI27(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI27_MASK) >> DMA_EEI_EEI27_SHIFT)
#define DMA_BRD_EEI_EEI27(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI27_SHIFT, DMA_EEI_EEI27_WIDTH))

/*! @brief Set the EEI27 field to a new value. */
#define DMA_WR_EEI_EEI27(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI27_MASK, DMA_EEI_EEI27(value)))
#define DMA_BWR_EEI_EEI27(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI27_SHIFT), DMA_EEI_EEI27_SHIFT, DMA_EEI_EEI27_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI28[28] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI28 field. */
#define DMA_RD_EEI_EEI28(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI28_MASK) >> DMA_EEI_EEI28_SHIFT)
#define DMA_BRD_EEI_EEI28(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI28_SHIFT, DMA_EEI_EEI28_WIDTH))

/*! @brief Set the EEI28 field to a new value. */
#define DMA_WR_EEI_EEI28(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI28_MASK, DMA_EEI_EEI28(value)))
#define DMA_BWR_EEI_EEI28(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI28_SHIFT), DMA_EEI_EEI28_SHIFT, DMA_EEI_EEI28_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI29[29] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI29 field. */
#define DMA_RD_EEI_EEI29(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI29_MASK) >> DMA_EEI_EEI29_SHIFT)
#define DMA_BRD_EEI_EEI29(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI29_SHIFT, DMA_EEI_EEI29_WIDTH))

/*! @brief Set the EEI29 field to a new value. */
#define DMA_WR_EEI_EEI29(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI29_MASK, DMA_EEI_EEI29(value)))
#define DMA_BWR_EEI_EEI29(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI29_SHIFT), DMA_EEI_EEI29_SHIFT, DMA_EEI_EEI29_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI30[30] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI30 field. */
#define DMA_RD_EEI_EEI30(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI30_MASK) >> DMA_EEI_EEI30_SHIFT)
#define DMA_BRD_EEI_EEI30(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI30_SHIFT, DMA_EEI_EEI30_WIDTH))

/*! @brief Set the EEI30 field to a new value. */
#define DMA_WR_EEI_EEI30(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI30_MASK, DMA_EEI_EEI30(value)))
#define DMA_BWR_EEI_EEI30(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI30_SHIFT), DMA_EEI_EEI30_SHIFT, DMA_EEI_EEI30_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EEI, field EEI31[31] (RW)
 *
 * Values:
 * - 0b0 - The error signal for corresponding channel does not generate an error
 *     interrupt
 * - 0b1 - The assertion of the error signal for corresponding channel generates
 *     an error interrupt request
 */
/*@{*/
/*! @brief Read current value of the DMA_EEI_EEI31 field. */
#define DMA_RD_EEI_EEI31(base) ((DMA_EEI_REG(base) & DMA_EEI_EEI31_MASK) >> DMA_EEI_EEI31_SHIFT)
#define DMA_BRD_EEI_EEI31(base) (BME_UBFX32(&DMA_EEI_REG(base), DMA_EEI_EEI31_SHIFT, DMA_EEI_EEI31_WIDTH))

/*! @brief Set the EEI31 field to a new value. */
#define DMA_WR_EEI_EEI31(base, value) (DMA_RMW_EEI(base, DMA_EEI_EEI31_MASK, DMA_EEI_EEI31(value)))
#define DMA_BWR_EEI_EEI31(base, value) (BME_BFI32(&DMA_EEI_REG(base), ((uint32_t)(value) << DMA_EEI_EEI31_SHIFT), DMA_EEI_EEI31_SHIFT, DMA_EEI_EEI31_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_CEEI - Clear Enable Error Interrupt Register
 ******************************************************************************/

/*!
 * @brief DMA_CEEI - Clear Enable Error Interrupt Register (WO)
 *
 * Reset value: 0x00U
 *
 * The CEEI provides a simple memory-mapped mechanism to clear a given bit in
 * the EEI to disable the error interrupt for a given channel. The data value on a
 * register write causes the corresponding bit in the EEI to be cleared. Setting
 * the CAEE bit provides a global clear function, forcing the EEI contents to be
 * cleared, disabling all DMA request inputs. If the NOP bit is set, the command
 * is ignored. This allows you to write multiple-byte registers as a 32-bit word.
 * Reads of this register return all zeroes.
 */
/*!
 * @name Constants and macros for entire DMA_CEEI register
 */
/*@{*/
#define DMA_RD_CEEI(base)        (DMA_CEEI_REG(base))
#define DMA_WR_CEEI(base, value) (DMA_CEEI_REG(base) = (value))
#define DMA_RMW_CEEI(base, mask, value) (DMA_WR_CEEI(base, (DMA_RD_CEEI(base) & ~(mask)) | (value)))
/*@}*/

/*
 * Constants & macros for individual DMA_CEEI bitfields
 */

/*!
 * @name Register DMA_CEEI, field CEEI[4:0] (WORZ)
 *
 * Clears the corresponding bit in EEI
 */
/*@{*/
/*! @brief Set the CEEI field to a new value. */
#define DMA_WR_CEEI_CEEI(base, value) (DMA_RMW_CEEI(base, DMA_CEEI_CEEI_MASK, DMA_CEEI_CEEI(value)))
#define DMA_BWR_CEEI_CEEI(base, value) (BME_BFI8(&DMA_CEEI_REG(base), ((uint8_t)(value) << DMA_CEEI_CEEI_SHIFT), DMA_CEEI_CEEI_SHIFT, DMA_CEEI_CEEI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CEEI, field CAEE[6] (WORZ)
 *
 * Values:
 * - 0b0 - Clear only the EEI bit specified in the CEEI field
 * - 0b1 - Clear all bits in EEI
 */
/*@{*/
/*! @brief Set the CAEE field to a new value. */
#define DMA_WR_CEEI_CAEE(base, value) (DMA_RMW_CEEI(base, DMA_CEEI_CAEE_MASK, DMA_CEEI_CAEE(value)))
#define DMA_BWR_CEEI_CAEE(base, value) (BME_BFI8(&DMA_CEEI_REG(base), ((uint8_t)(value) << DMA_CEEI_CAEE_SHIFT), DMA_CEEI_CAEE_SHIFT, DMA_CEEI_CAEE_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CEEI, field NOP[7] (WORZ)
 *
 * Values:
 * - 0b0 - Normal operation
 * - 0b1 - No operation, ignore the other bits in this register
 */
/*@{*/
/*! @brief Set the NOP field to a new value. */
#define DMA_WR_CEEI_NOP(base, value) (DMA_RMW_CEEI(base, DMA_CEEI_NOP_MASK, DMA_CEEI_NOP(value)))
#define DMA_BWR_CEEI_NOP(base, value) (BME_BFI8(&DMA_CEEI_REG(base), ((uint8_t)(value) << DMA_CEEI_NOP_SHIFT), DMA_CEEI_NOP_SHIFT, DMA_CEEI_NOP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_SEEI - Set Enable Error Interrupt Register
 ******************************************************************************/

/*!
 * @brief DMA_SEEI - Set Enable Error Interrupt Register (WO)
 *
 * Reset value: 0x00U
 *
 * The SEEI provides a simple memory-mapped mechanism to set a given bit in the
 * EEI to enable the error interrupt for a given channel. The data value on a
 * register write causes the corresponding bit in the EEI to be set. Setting the
 * SAEE bit provides a global set function, forcing the entire EEI contents to be
 * set. If the NOP bit is set, the command is ignored. This allows you to write
 * multiple-byte registers as a 32-bit word. Reads of this register return all
 * zeroes.
 */
/*!
 * @name Constants and macros for entire DMA_SEEI register
 */
/*@{*/
#define DMA_RD_SEEI(base)        (DMA_SEEI_REG(base))
#define DMA_WR_SEEI(base, value) (DMA_SEEI_REG(base) = (value))
#define DMA_RMW_SEEI(base, mask, value) (DMA_WR_SEEI(base, (DMA_RD_SEEI(base) & ~(mask)) | (value)))
/*@}*/

/*
 * Constants & macros for individual DMA_SEEI bitfields
 */

/*!
 * @name Register DMA_SEEI, field SEEI[4:0] (WORZ)
 *
 * Sets the corresponding bit in EEI
 */
/*@{*/
/*! @brief Set the SEEI field to a new value. */
#define DMA_WR_SEEI_SEEI(base, value) (DMA_RMW_SEEI(base, DMA_SEEI_SEEI_MASK, DMA_SEEI_SEEI(value)))
#define DMA_BWR_SEEI_SEEI(base, value) (BME_BFI8(&DMA_SEEI_REG(base), ((uint8_t)(value) << DMA_SEEI_SEEI_SHIFT), DMA_SEEI_SEEI_SHIFT, DMA_SEEI_SEEI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_SEEI, field SAEE[6] (WORZ)
 *
 * Values:
 * - 0b0 - Set only the EEI bit specified in the SEEI field.
 * - 0b1 - Sets all bits in EEI
 */
/*@{*/
/*! @brief Set the SAEE field to a new value. */
#define DMA_WR_SEEI_SAEE(base, value) (DMA_RMW_SEEI(base, DMA_SEEI_SAEE_MASK, DMA_SEEI_SAEE(value)))
#define DMA_BWR_SEEI_SAEE(base, value) (BME_BFI8(&DMA_SEEI_REG(base), ((uint8_t)(value) << DMA_SEEI_SAEE_SHIFT), DMA_SEEI_SAEE_SHIFT, DMA_SEEI_SAEE_WIDTH))
/*@}*/

/*!
 * @name Register DMA_SEEI, field NOP[7] (WORZ)
 *
 * Values:
 * - 0b0 - Normal operation
 * - 0b1 - No operation, ignore the other bits in this register
 */
/*@{*/
/*! @brief Set the NOP field to a new value. */
#define DMA_WR_SEEI_NOP(base, value) (DMA_RMW_SEEI(base, DMA_SEEI_NOP_MASK, DMA_SEEI_NOP(value)))
#define DMA_BWR_SEEI_NOP(base, value) (BME_BFI8(&DMA_SEEI_REG(base), ((uint8_t)(value) << DMA_SEEI_NOP_SHIFT), DMA_SEEI_NOP_SHIFT, DMA_SEEI_NOP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_CERQ - Clear Enable Request Register
 ******************************************************************************/

/*!
 * @brief DMA_CERQ - Clear Enable Request Register (WO)
 *
 * Reset value: 0x00U
 *
 * The CERQ provides a simple memory-mapped mechanism to clear a given bit in
 * the ERQ to disable the DMA request for a given channel. The data value on a
 * register write causes the corresponding bit in the ERQ to be cleared. Setting the
 * CAER bit provides a global clear function, forcing the entire contents of the
 * ERQ to be cleared, disabling all DMA request inputs. If NOP is set, the
 * command is ignored. This allows you to write multiple-byte registers as a 32-bit
 * word. Reads of this register return all zeroes.
 */
/*!
 * @name Constants and macros for entire DMA_CERQ register
 */
/*@{*/
#define DMA_RD_CERQ(base)        (DMA_CERQ_REG(base))
#define DMA_WR_CERQ(base, value) (DMA_CERQ_REG(base) = (value))
#define DMA_RMW_CERQ(base, mask, value) (DMA_WR_CERQ(base, (DMA_RD_CERQ(base) & ~(mask)) | (value)))
/*@}*/

/*
 * Constants & macros for individual DMA_CERQ bitfields
 */

/*!
 * @name Register DMA_CERQ, field CERQ[4:0] (WORZ)
 *
 * Clears the corresponding bit in ERQ.
 */
/*@{*/
/*! @brief Set the CERQ field to a new value. */
#define DMA_WR_CERQ_CERQ(base, value) (DMA_RMW_CERQ(base, DMA_CERQ_CERQ_MASK, DMA_CERQ_CERQ(value)))
#define DMA_BWR_CERQ_CERQ(base, value) (BME_BFI8(&DMA_CERQ_REG(base), ((uint8_t)(value) << DMA_CERQ_CERQ_SHIFT), DMA_CERQ_CERQ_SHIFT, DMA_CERQ_CERQ_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CERQ, field CAER[6] (WORZ)
 *
 * Values:
 * - 0b0 - Clear only the ERQ bit specified in the CERQ field
 * - 0b1 - Clear all bits in ERQ
 */
/*@{*/
/*! @brief Set the CAER field to a new value. */
#define DMA_WR_CERQ_CAER(base, value) (DMA_RMW_CERQ(base, DMA_CERQ_CAER_MASK, DMA_CERQ_CAER(value)))
#define DMA_BWR_CERQ_CAER(base, value) (BME_BFI8(&DMA_CERQ_REG(base), ((uint8_t)(value) << DMA_CERQ_CAER_SHIFT), DMA_CERQ_CAER_SHIFT, DMA_CERQ_CAER_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CERQ, field NOP[7] (WORZ)
 *
 * Values:
 * - 0b0 - Normal operation
 * - 0b1 - No operation, ignore the other bits in this register
 */
/*@{*/
/*! @brief Set the NOP field to a new value. */
#define DMA_WR_CERQ_NOP(base, value) (DMA_RMW_CERQ(base, DMA_CERQ_NOP_MASK, DMA_CERQ_NOP(value)))
#define DMA_BWR_CERQ_NOP(base, value) (BME_BFI8(&DMA_CERQ_REG(base), ((uint8_t)(value) << DMA_CERQ_NOP_SHIFT), DMA_CERQ_NOP_SHIFT, DMA_CERQ_NOP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_SERQ - Set Enable Request Register
 ******************************************************************************/

/*!
 * @brief DMA_SERQ - Set Enable Request Register (WO)
 *
 * Reset value: 0x00U
 *
 * The SERQ provides a simple memory-mapped mechanism to set a given bit in the
 * ERQ to enable the DMA request for a given channel. The data value on a
 * register write causes the corresponding bit in the ERQ to be set. Setting the SAER
 * bit provides a global set function, forcing the entire contents of ERQ to be
 * set. If the NOP bit is set, the command is ignored. This allows you to write
 * multiple-byte registers as a 32-bit word. Reads of this register return all zeroes.
 */
/*!
 * @name Constants and macros for entire DMA_SERQ register
 */
/*@{*/
#define DMA_RD_SERQ(base)        (DMA_SERQ_REG(base))
#define DMA_WR_SERQ(base, value) (DMA_SERQ_REG(base) = (value))
#define DMA_RMW_SERQ(base, mask, value) (DMA_WR_SERQ(base, (DMA_RD_SERQ(base) & ~(mask)) | (value)))
/*@}*/

/*
 * Constants & macros for individual DMA_SERQ bitfields
 */

/*!
 * @name Register DMA_SERQ, field SERQ[4:0] (WORZ)
 *
 * Sets the corresponding bit in ERQ.
 */
/*@{*/
/*! @brief Set the SERQ field to a new value. */
#define DMA_WR_SERQ_SERQ(base, value) (DMA_RMW_SERQ(base, DMA_SERQ_SERQ_MASK, DMA_SERQ_SERQ(value)))
#define DMA_BWR_SERQ_SERQ(base, value) (BME_BFI8(&DMA_SERQ_REG(base), ((uint8_t)(value) << DMA_SERQ_SERQ_SHIFT), DMA_SERQ_SERQ_SHIFT, DMA_SERQ_SERQ_WIDTH))
/*@}*/

/*!
 * @name Register DMA_SERQ, field SAER[6] (WORZ)
 *
 * Values:
 * - 0b0 - Set only the ERQ bit specified in the SERQ field
 * - 0b1 - Set all bits in ERQ
 */
/*@{*/
/*! @brief Set the SAER field to a new value. */
#define DMA_WR_SERQ_SAER(base, value) (DMA_RMW_SERQ(base, DMA_SERQ_SAER_MASK, DMA_SERQ_SAER(value)))
#define DMA_BWR_SERQ_SAER(base, value) (BME_BFI8(&DMA_SERQ_REG(base), ((uint8_t)(value) << DMA_SERQ_SAER_SHIFT), DMA_SERQ_SAER_SHIFT, DMA_SERQ_SAER_WIDTH))
/*@}*/

/*!
 * @name Register DMA_SERQ, field NOP[7] (WORZ)
 *
 * Values:
 * - 0b0 - Normal operation
 * - 0b1 - No operation, ignore the other bits in this register
 */
/*@{*/
/*! @brief Set the NOP field to a new value. */
#define DMA_WR_SERQ_NOP(base, value) (DMA_RMW_SERQ(base, DMA_SERQ_NOP_MASK, DMA_SERQ_NOP(value)))
#define DMA_BWR_SERQ_NOP(base, value) (BME_BFI8(&DMA_SERQ_REG(base), ((uint8_t)(value) << DMA_SERQ_NOP_SHIFT), DMA_SERQ_NOP_SHIFT, DMA_SERQ_NOP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_CDNE - Clear DONE Status Bit Register
 ******************************************************************************/

/*!
 * @brief DMA_CDNE - Clear DONE Status Bit Register (WO)
 *
 * Reset value: 0x00U
 *
 * The CDNE provides a simple memory-mapped mechanism to clear the DONE bit in
 * the TCD of the given channel. The data value on a register write causes the
 * DONE bit in the corresponding transfer control descriptor to be cleared. Setting
 * the CADN bit provides a global clear function, forcing all DONE bits to be
 * cleared. If the NOP bit is set, the command is ignored. This allows you to write
 * multiple-byte registers as a 32-bit word. Reads of this register return all
 * zeroes.
 */
/*!
 * @name Constants and macros for entire DMA_CDNE register
 */
/*@{*/
#define DMA_RD_CDNE(base)        (DMA_CDNE_REG(base))
#define DMA_WR_CDNE(base, value) (DMA_CDNE_REG(base) = (value))
#define DMA_RMW_CDNE(base, mask, value) (DMA_WR_CDNE(base, (DMA_RD_CDNE(base) & ~(mask)) | (value)))
/*@}*/

/*
 * Constants & macros for individual DMA_CDNE bitfields
 */

/*!
 * @name Register DMA_CDNE, field CDNE[4:0] (WORZ)
 *
 * Clears the corresponding bit in TCDn_CSR[DONE]
 */
/*@{*/
/*! @brief Set the CDNE field to a new value. */
#define DMA_WR_CDNE_CDNE(base, value) (DMA_RMW_CDNE(base, DMA_CDNE_CDNE_MASK, DMA_CDNE_CDNE(value)))
#define DMA_BWR_CDNE_CDNE(base, value) (BME_BFI8(&DMA_CDNE_REG(base), ((uint8_t)(value) << DMA_CDNE_CDNE_SHIFT), DMA_CDNE_CDNE_SHIFT, DMA_CDNE_CDNE_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CDNE, field CADN[6] (WORZ)
 *
 * Values:
 * - 0b0 - Clears only the TCDn_CSR[DONE] bit specified in the CDNE field
 * - 0b1 - Clears all bits in TCDn_CSR[DONE]
 */
/*@{*/
/*! @brief Set the CADN field to a new value. */
#define DMA_WR_CDNE_CADN(base, value) (DMA_RMW_CDNE(base, DMA_CDNE_CADN_MASK, DMA_CDNE_CADN(value)))
#define DMA_BWR_CDNE_CADN(base, value) (BME_BFI8(&DMA_CDNE_REG(base), ((uint8_t)(value) << DMA_CDNE_CADN_SHIFT), DMA_CDNE_CADN_SHIFT, DMA_CDNE_CADN_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CDNE, field NOP[7] (WORZ)
 *
 * Values:
 * - 0b0 - Normal operation
 * - 0b1 - No operation, ignore the other bits in this register
 */
/*@{*/
/*! @brief Set the NOP field to a new value. */
#define DMA_WR_CDNE_NOP(base, value) (DMA_RMW_CDNE(base, DMA_CDNE_NOP_MASK, DMA_CDNE_NOP(value)))
#define DMA_BWR_CDNE_NOP(base, value) (BME_BFI8(&DMA_CDNE_REG(base), ((uint8_t)(value) << DMA_CDNE_NOP_SHIFT), DMA_CDNE_NOP_SHIFT, DMA_CDNE_NOP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_SSRT - Set START Bit Register
 ******************************************************************************/

/*!
 * @brief DMA_SSRT - Set START Bit Register (WO)
 *
 * Reset value: 0x00U
 *
 * The SSRT provides a simple memory-mapped mechanism to set the START bit in
 * the TCD of the given channel. The data value on a register write causes the
 * START bit in the corresponding transfer control descriptor to be set. Setting the
 * SAST bit provides a global set function, forcing all START bits to be set. If
 * the NOP bit is set, the command is ignored. This allows you to write
 * multiple-byte registers as a 32-bit word. Reads of this register return all zeroes.
 */
/*!
 * @name Constants and macros for entire DMA_SSRT register
 */
/*@{*/
#define DMA_RD_SSRT(base)        (DMA_SSRT_REG(base))
#define DMA_WR_SSRT(base, value) (DMA_SSRT_REG(base) = (value))
#define DMA_RMW_SSRT(base, mask, value) (DMA_WR_SSRT(base, (DMA_RD_SSRT(base) & ~(mask)) | (value)))
/*@}*/

/*
 * Constants & macros for individual DMA_SSRT bitfields
 */

/*!
 * @name Register DMA_SSRT, field SSRT[4:0] (WORZ)
 *
 * Sets the corresponding bit in TCDn_CSR[START]
 */
/*@{*/
/*! @brief Set the SSRT field to a new value. */
#define DMA_WR_SSRT_SSRT(base, value) (DMA_RMW_SSRT(base, DMA_SSRT_SSRT_MASK, DMA_SSRT_SSRT(value)))
#define DMA_BWR_SSRT_SSRT(base, value) (BME_BFI8(&DMA_SSRT_REG(base), ((uint8_t)(value) << DMA_SSRT_SSRT_SHIFT), DMA_SSRT_SSRT_SHIFT, DMA_SSRT_SSRT_WIDTH))
/*@}*/

/*!
 * @name Register DMA_SSRT, field SAST[6] (WORZ)
 *
 * Values:
 * - 0b0 - Set only the TCDn_CSR[START] bit specified in the SSRT field
 * - 0b1 - Set all bits in TCDn_CSR[START]
 */
/*@{*/
/*! @brief Set the SAST field to a new value. */
#define DMA_WR_SSRT_SAST(base, value) (DMA_RMW_SSRT(base, DMA_SSRT_SAST_MASK, DMA_SSRT_SAST(value)))
#define DMA_BWR_SSRT_SAST(base, value) (BME_BFI8(&DMA_SSRT_REG(base), ((uint8_t)(value) << DMA_SSRT_SAST_SHIFT), DMA_SSRT_SAST_SHIFT, DMA_SSRT_SAST_WIDTH))
/*@}*/

/*!
 * @name Register DMA_SSRT, field NOP[7] (WORZ)
 *
 * Values:
 * - 0b0 - Normal operation
 * - 0b1 - No operation, ignore the other bits in this register
 */
/*@{*/
/*! @brief Set the NOP field to a new value. */
#define DMA_WR_SSRT_NOP(base, value) (DMA_RMW_SSRT(base, DMA_SSRT_NOP_MASK, DMA_SSRT_NOP(value)))
#define DMA_BWR_SSRT_NOP(base, value) (BME_BFI8(&DMA_SSRT_REG(base), ((uint8_t)(value) << DMA_SSRT_NOP_SHIFT), DMA_SSRT_NOP_SHIFT, DMA_SSRT_NOP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_CERR - Clear Error Register
 ******************************************************************************/

/*!
 * @brief DMA_CERR - Clear Error Register (WO)
 *
 * Reset value: 0x00U
 *
 * The CERR provides a simple memory-mapped mechanism to clear a given bit in
 * the ERR to disable the error condition flag for a given channel. The given value
 * on a register write causes the corresponding bit in the ERR to be cleared.
 * Setting the CAEI bit provides a global clear function, forcing the ERR contents
 * to be cleared, clearing all channel error indicators. If the NOP bit is set,
 * the command is ignored. This allows you to write multiple-byte registers as a
 * 32-bit word. Reads of this register return all zeroes.
 */
/*!
 * @name Constants and macros for entire DMA_CERR register
 */
/*@{*/
#define DMA_RD_CERR(base)        (DMA_CERR_REG(base))
#define DMA_WR_CERR(base, value) (DMA_CERR_REG(base) = (value))
#define DMA_RMW_CERR(base, mask, value) (DMA_WR_CERR(base, (DMA_RD_CERR(base) & ~(mask)) | (value)))
/*@}*/

/*
 * Constants & macros for individual DMA_CERR bitfields
 */

/*!
 * @name Register DMA_CERR, field CERR[4:0] (WORZ)
 *
 * Clears the corresponding bit in ERR
 */
/*@{*/
/*! @brief Set the CERR field to a new value. */
#define DMA_WR_CERR_CERR(base, value) (DMA_RMW_CERR(base, DMA_CERR_CERR_MASK, DMA_CERR_CERR(value)))
#define DMA_BWR_CERR_CERR(base, value) (BME_BFI8(&DMA_CERR_REG(base), ((uint8_t)(value) << DMA_CERR_CERR_SHIFT), DMA_CERR_CERR_SHIFT, DMA_CERR_CERR_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CERR, field CAEI[6] (WORZ)
 *
 * Values:
 * - 0b0 - Clear only the ERR bit specified in the CERR field
 * - 0b1 - Clear all bits in ERR
 */
/*@{*/
/*! @brief Set the CAEI field to a new value. */
#define DMA_WR_CERR_CAEI(base, value) (DMA_RMW_CERR(base, DMA_CERR_CAEI_MASK, DMA_CERR_CAEI(value)))
#define DMA_BWR_CERR_CAEI(base, value) (BME_BFI8(&DMA_CERR_REG(base), ((uint8_t)(value) << DMA_CERR_CAEI_SHIFT), DMA_CERR_CAEI_SHIFT, DMA_CERR_CAEI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CERR, field NOP[7] (WORZ)
 *
 * Values:
 * - 0b0 - Normal operation
 * - 0b1 - No operation, ignore the other bits in this register
 */
/*@{*/
/*! @brief Set the NOP field to a new value. */
#define DMA_WR_CERR_NOP(base, value) (DMA_RMW_CERR(base, DMA_CERR_NOP_MASK, DMA_CERR_NOP(value)))
#define DMA_BWR_CERR_NOP(base, value) (BME_BFI8(&DMA_CERR_REG(base), ((uint8_t)(value) << DMA_CERR_NOP_SHIFT), DMA_CERR_NOP_SHIFT, DMA_CERR_NOP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_CINT - Clear Interrupt Request Register
 ******************************************************************************/

/*!
 * @brief DMA_CINT - Clear Interrupt Request Register (WO)
 *
 * Reset value: 0x00U
 *
 * The CINT provides a simple, memory-mapped mechanism to clear a given bit in
 * the INT to disable the interrupt request for a given channel. The given value
 * on a register write causes the corresponding bit in the INT to be cleared.
 * Setting the CAIR bit provides a global clear function, forcing the entire contents
 * of the INT to be cleared, disabling all DMA interrupt requests. If the NOP
 * bit is set, the command is ignored. This allows you to write multiple-byte
 * registers as a 32-bit word. Reads of this register return all zeroes.
 */
/*!
 * @name Constants and macros for entire DMA_CINT register
 */
/*@{*/
#define DMA_RD_CINT(base)        (DMA_CINT_REG(base))
#define DMA_WR_CINT(base, value) (DMA_CINT_REG(base) = (value))
#define DMA_RMW_CINT(base, mask, value) (DMA_WR_CINT(base, (DMA_RD_CINT(base) & ~(mask)) | (value)))
/*@}*/

/*
 * Constants & macros for individual DMA_CINT bitfields
 */

/*!
 * @name Register DMA_CINT, field CINT[4:0] (WORZ)
 *
 * Clears the corresponding bit in INT
 */
/*@{*/
/*! @brief Set the CINT field to a new value. */
#define DMA_WR_CINT_CINT(base, value) (DMA_RMW_CINT(base, DMA_CINT_CINT_MASK, DMA_CINT_CINT(value)))
#define DMA_BWR_CINT_CINT(base, value) (BME_BFI8(&DMA_CINT_REG(base), ((uint8_t)(value) << DMA_CINT_CINT_SHIFT), DMA_CINT_CINT_SHIFT, DMA_CINT_CINT_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CINT, field CAIR[6] (WORZ)
 *
 * Values:
 * - 0b0 - Clear only the INT bit specified in the CINT field
 * - 0b1 - Clear all bits in INT
 */
/*@{*/
/*! @brief Set the CAIR field to a new value. */
#define DMA_WR_CINT_CAIR(base, value) (DMA_RMW_CINT(base, DMA_CINT_CAIR_MASK, DMA_CINT_CAIR(value)))
#define DMA_BWR_CINT_CAIR(base, value) (BME_BFI8(&DMA_CINT_REG(base), ((uint8_t)(value) << DMA_CINT_CAIR_SHIFT), DMA_CINT_CAIR_SHIFT, DMA_CINT_CAIR_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CINT, field NOP[7] (WORZ)
 *
 * Values:
 * - 0b0 - Normal operation
 * - 0b1 - No operation, ignore the other bits in this register
 */
/*@{*/
/*! @brief Set the NOP field to a new value. */
#define DMA_WR_CINT_NOP(base, value) (DMA_RMW_CINT(base, DMA_CINT_NOP_MASK, DMA_CINT_NOP(value)))
#define DMA_BWR_CINT_NOP(base, value) (BME_BFI8(&DMA_CINT_REG(base), ((uint8_t)(value) << DMA_CINT_NOP_SHIFT), DMA_CINT_NOP_SHIFT, DMA_CINT_NOP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_INT - Interrupt Request Register
 ******************************************************************************/

/*!
 * @brief DMA_INT - Interrupt Request Register (W1C)
 *
 * Reset value: 0x00000000U
 *
 * The INT register provides a bit map for the 32 channels signaling the
 * presence of an interrupt request for each channel. Depending on the appropriate bit
 * setting in the transfer-control descriptors, the eDMA engine generates an
 * interrupt on data transfer completion. The outputs of this register are directly
 * routed to the interrupt controller. During the interrupt-service routine
 * associated with any given channel, it is the software's responsibility to clear the
 * appropriate bit, negating the interrupt request. Typically, a write to the CINT
 * register in the interrupt service routine is used for this purpose. The state
 * of any given channel's interrupt request is directly affected by writes to
 * this register; it is also affected by writes to the CINT register. On writes to
 * INT, a 1 in any bit position clears the corresponding channel's interrupt
 * request. A zero in any bit position has no affect on the corresponding channel's
 * current interrupt status. The CINT register is provided so the interrupt
 * request for a single channel can easily be cleared without the need to perform a
 * read-modify-write sequence to the INT register.
 */
/*!
 * @name Constants and macros for entire DMA_INT register
 */
/*@{*/
#define DMA_RD_INT(base)         (DMA_INT_REG(base))
#define DMA_WR_INT(base, value)  (DMA_INT_REG(base) = (value))
#define DMA_RMW_INT(base, mask, value) (DMA_WR_INT(base, (DMA_RD_INT(base) & ~(mask)) | (value)))
#define DMA_SET_INT(base, value) (BME_OR32(&DMA_INT_REG(base), (uint32_t)(value)))
#define DMA_CLR_INT(base, value) (BME_AND32(&DMA_INT_REG(base), (uint32_t)(~(value))))
#define DMA_TOG_INT(base, value) (BME_XOR32(&DMA_INT_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_INT bitfields
 */

/*!
 * @name Register DMA_INT, field INT0[0] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT0 field. */
#define DMA_RD_INT_INT0(base) ((DMA_INT_REG(base) & DMA_INT_INT0_MASK) >> DMA_INT_INT0_SHIFT)
#define DMA_BRD_INT_INT0(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT0_SHIFT, DMA_INT_INT0_WIDTH))

/*! @brief Set the INT0 field to a new value. */
#define DMA_WR_INT_INT0(base, value) (DMA_RMW_INT(base, (DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT0(value)))
#define DMA_BWR_INT_INT0(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT0_SHIFT), DMA_INT_INT0_SHIFT, DMA_INT_INT0_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT1[1] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT1 field. */
#define DMA_RD_INT_INT1(base) ((DMA_INT_REG(base) & DMA_INT_INT1_MASK) >> DMA_INT_INT1_SHIFT)
#define DMA_BRD_INT_INT1(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT1_SHIFT, DMA_INT_INT1_WIDTH))

/*! @brief Set the INT1 field to a new value. */
#define DMA_WR_INT_INT1(base, value) (DMA_RMW_INT(base, (DMA_INT_INT1_MASK | DMA_INT_INT0_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT1(value)))
#define DMA_BWR_INT_INT1(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT1_SHIFT), DMA_INT_INT1_SHIFT, DMA_INT_INT1_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT2[2] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT2 field. */
#define DMA_RD_INT_INT2(base) ((DMA_INT_REG(base) & DMA_INT_INT2_MASK) >> DMA_INT_INT2_SHIFT)
#define DMA_BRD_INT_INT2(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT2_SHIFT, DMA_INT_INT2_WIDTH))

/*! @brief Set the INT2 field to a new value. */
#define DMA_WR_INT_INT2(base, value) (DMA_RMW_INT(base, (DMA_INT_INT2_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT2(value)))
#define DMA_BWR_INT_INT2(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT2_SHIFT), DMA_INT_INT2_SHIFT, DMA_INT_INT2_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT3[3] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT3 field. */
#define DMA_RD_INT_INT3(base) ((DMA_INT_REG(base) & DMA_INT_INT3_MASK) >> DMA_INT_INT3_SHIFT)
#define DMA_BRD_INT_INT3(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT3_SHIFT, DMA_INT_INT3_WIDTH))

/*! @brief Set the INT3 field to a new value. */
#define DMA_WR_INT_INT3(base, value) (DMA_RMW_INT(base, (DMA_INT_INT3_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT3(value)))
#define DMA_BWR_INT_INT3(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT3_SHIFT), DMA_INT_INT3_SHIFT, DMA_INT_INT3_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT4[4] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT4 field. */
#define DMA_RD_INT_INT4(base) ((DMA_INT_REG(base) & DMA_INT_INT4_MASK) >> DMA_INT_INT4_SHIFT)
#define DMA_BRD_INT_INT4(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT4_SHIFT, DMA_INT_INT4_WIDTH))

/*! @brief Set the INT4 field to a new value. */
#define DMA_WR_INT_INT4(base, value) (DMA_RMW_INT(base, (DMA_INT_INT4_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT4(value)))
#define DMA_BWR_INT_INT4(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT4_SHIFT), DMA_INT_INT4_SHIFT, DMA_INT_INT4_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT5[5] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT5 field. */
#define DMA_RD_INT_INT5(base) ((DMA_INT_REG(base) & DMA_INT_INT5_MASK) >> DMA_INT_INT5_SHIFT)
#define DMA_BRD_INT_INT5(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT5_SHIFT, DMA_INT_INT5_WIDTH))

/*! @brief Set the INT5 field to a new value. */
#define DMA_WR_INT_INT5(base, value) (DMA_RMW_INT(base, (DMA_INT_INT5_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT5(value)))
#define DMA_BWR_INT_INT5(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT5_SHIFT), DMA_INT_INT5_SHIFT, DMA_INT_INT5_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT6[6] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT6 field. */
#define DMA_RD_INT_INT6(base) ((DMA_INT_REG(base) & DMA_INT_INT6_MASK) >> DMA_INT_INT6_SHIFT)
#define DMA_BRD_INT_INT6(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT6_SHIFT, DMA_INT_INT6_WIDTH))

/*! @brief Set the INT6 field to a new value. */
#define DMA_WR_INT_INT6(base, value) (DMA_RMW_INT(base, (DMA_INT_INT6_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT6(value)))
#define DMA_BWR_INT_INT6(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT6_SHIFT), DMA_INT_INT6_SHIFT, DMA_INT_INT6_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT7[7] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT7 field. */
#define DMA_RD_INT_INT7(base) ((DMA_INT_REG(base) & DMA_INT_INT7_MASK) >> DMA_INT_INT7_SHIFT)
#define DMA_BRD_INT_INT7(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT7_SHIFT, DMA_INT_INT7_WIDTH))

/*! @brief Set the INT7 field to a new value. */
#define DMA_WR_INT_INT7(base, value) (DMA_RMW_INT(base, (DMA_INT_INT7_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT7(value)))
#define DMA_BWR_INT_INT7(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT7_SHIFT), DMA_INT_INT7_SHIFT, DMA_INT_INT7_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT8[8] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT8 field. */
#define DMA_RD_INT_INT8(base) ((DMA_INT_REG(base) & DMA_INT_INT8_MASK) >> DMA_INT_INT8_SHIFT)
#define DMA_BRD_INT_INT8(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT8_SHIFT, DMA_INT_INT8_WIDTH))

/*! @brief Set the INT8 field to a new value. */
#define DMA_WR_INT_INT8(base, value) (DMA_RMW_INT(base, (DMA_INT_INT8_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT8(value)))
#define DMA_BWR_INT_INT8(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT8_SHIFT), DMA_INT_INT8_SHIFT, DMA_INT_INT8_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT9[9] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT9 field. */
#define DMA_RD_INT_INT9(base) ((DMA_INT_REG(base) & DMA_INT_INT9_MASK) >> DMA_INT_INT9_SHIFT)
#define DMA_BRD_INT_INT9(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT9_SHIFT, DMA_INT_INT9_WIDTH))

/*! @brief Set the INT9 field to a new value. */
#define DMA_WR_INT_INT9(base, value) (DMA_RMW_INT(base, (DMA_INT_INT9_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT9(value)))
#define DMA_BWR_INT_INT9(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT9_SHIFT), DMA_INT_INT9_SHIFT, DMA_INT_INT9_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT10[10] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT10 field. */
#define DMA_RD_INT_INT10(base) ((DMA_INT_REG(base) & DMA_INT_INT10_MASK) >> DMA_INT_INT10_SHIFT)
#define DMA_BRD_INT_INT10(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT10_SHIFT, DMA_INT_INT10_WIDTH))

/*! @brief Set the INT10 field to a new value. */
#define DMA_WR_INT_INT10(base, value) (DMA_RMW_INT(base, (DMA_INT_INT10_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT10(value)))
#define DMA_BWR_INT_INT10(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT10_SHIFT), DMA_INT_INT10_SHIFT, DMA_INT_INT10_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT11[11] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT11 field. */
#define DMA_RD_INT_INT11(base) ((DMA_INT_REG(base) & DMA_INT_INT11_MASK) >> DMA_INT_INT11_SHIFT)
#define DMA_BRD_INT_INT11(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT11_SHIFT, DMA_INT_INT11_WIDTH))

/*! @brief Set the INT11 field to a new value. */
#define DMA_WR_INT_INT11(base, value) (DMA_RMW_INT(base, (DMA_INT_INT11_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT11(value)))
#define DMA_BWR_INT_INT11(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT11_SHIFT), DMA_INT_INT11_SHIFT, DMA_INT_INT11_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT12[12] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT12 field. */
#define DMA_RD_INT_INT12(base) ((DMA_INT_REG(base) & DMA_INT_INT12_MASK) >> DMA_INT_INT12_SHIFT)
#define DMA_BRD_INT_INT12(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT12_SHIFT, DMA_INT_INT12_WIDTH))

/*! @brief Set the INT12 field to a new value. */
#define DMA_WR_INT_INT12(base, value) (DMA_RMW_INT(base, (DMA_INT_INT12_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT12(value)))
#define DMA_BWR_INT_INT12(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT12_SHIFT), DMA_INT_INT12_SHIFT, DMA_INT_INT12_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT13[13] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT13 field. */
#define DMA_RD_INT_INT13(base) ((DMA_INT_REG(base) & DMA_INT_INT13_MASK) >> DMA_INT_INT13_SHIFT)
#define DMA_BRD_INT_INT13(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT13_SHIFT, DMA_INT_INT13_WIDTH))

/*! @brief Set the INT13 field to a new value. */
#define DMA_WR_INT_INT13(base, value) (DMA_RMW_INT(base, (DMA_INT_INT13_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT13(value)))
#define DMA_BWR_INT_INT13(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT13_SHIFT), DMA_INT_INT13_SHIFT, DMA_INT_INT13_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT14[14] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT14 field. */
#define DMA_RD_INT_INT14(base) ((DMA_INT_REG(base) & DMA_INT_INT14_MASK) >> DMA_INT_INT14_SHIFT)
#define DMA_BRD_INT_INT14(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT14_SHIFT, DMA_INT_INT14_WIDTH))

/*! @brief Set the INT14 field to a new value. */
#define DMA_WR_INT_INT14(base, value) (DMA_RMW_INT(base, (DMA_INT_INT14_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT14(value)))
#define DMA_BWR_INT_INT14(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT14_SHIFT), DMA_INT_INT14_SHIFT, DMA_INT_INT14_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT15[15] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT15 field. */
#define DMA_RD_INT_INT15(base) ((DMA_INT_REG(base) & DMA_INT_INT15_MASK) >> DMA_INT_INT15_SHIFT)
#define DMA_BRD_INT_INT15(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT15_SHIFT, DMA_INT_INT15_WIDTH))

/*! @brief Set the INT15 field to a new value. */
#define DMA_WR_INT_INT15(base, value) (DMA_RMW_INT(base, (DMA_INT_INT15_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT15(value)))
#define DMA_BWR_INT_INT15(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT15_SHIFT), DMA_INT_INT15_SHIFT, DMA_INT_INT15_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT16[16] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT16 field. */
#define DMA_RD_INT_INT16(base) ((DMA_INT_REG(base) & DMA_INT_INT16_MASK) >> DMA_INT_INT16_SHIFT)
#define DMA_BRD_INT_INT16(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT16_SHIFT, DMA_INT_INT16_WIDTH))

/*! @brief Set the INT16 field to a new value. */
#define DMA_WR_INT_INT16(base, value) (DMA_RMW_INT(base, (DMA_INT_INT16_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT16(value)))
#define DMA_BWR_INT_INT16(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT16_SHIFT), DMA_INT_INT16_SHIFT, DMA_INT_INT16_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT17[17] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT17 field. */
#define DMA_RD_INT_INT17(base) ((DMA_INT_REG(base) & DMA_INT_INT17_MASK) >> DMA_INT_INT17_SHIFT)
#define DMA_BRD_INT_INT17(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT17_SHIFT, DMA_INT_INT17_WIDTH))

/*! @brief Set the INT17 field to a new value. */
#define DMA_WR_INT_INT17(base, value) (DMA_RMW_INT(base, (DMA_INT_INT17_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT17(value)))
#define DMA_BWR_INT_INT17(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT17_SHIFT), DMA_INT_INT17_SHIFT, DMA_INT_INT17_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT18[18] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT18 field. */
#define DMA_RD_INT_INT18(base) ((DMA_INT_REG(base) & DMA_INT_INT18_MASK) >> DMA_INT_INT18_SHIFT)
#define DMA_BRD_INT_INT18(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT18_SHIFT, DMA_INT_INT18_WIDTH))

/*! @brief Set the INT18 field to a new value. */
#define DMA_WR_INT_INT18(base, value) (DMA_RMW_INT(base, (DMA_INT_INT18_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT18(value)))
#define DMA_BWR_INT_INT18(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT18_SHIFT), DMA_INT_INT18_SHIFT, DMA_INT_INT18_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT19[19] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT19 field. */
#define DMA_RD_INT_INT19(base) ((DMA_INT_REG(base) & DMA_INT_INT19_MASK) >> DMA_INT_INT19_SHIFT)
#define DMA_BRD_INT_INT19(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT19_SHIFT, DMA_INT_INT19_WIDTH))

/*! @brief Set the INT19 field to a new value. */
#define DMA_WR_INT_INT19(base, value) (DMA_RMW_INT(base, (DMA_INT_INT19_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT19(value)))
#define DMA_BWR_INT_INT19(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT19_SHIFT), DMA_INT_INT19_SHIFT, DMA_INT_INT19_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT20[20] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT20 field. */
#define DMA_RD_INT_INT20(base) ((DMA_INT_REG(base) & DMA_INT_INT20_MASK) >> DMA_INT_INT20_SHIFT)
#define DMA_BRD_INT_INT20(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT20_SHIFT, DMA_INT_INT20_WIDTH))

/*! @brief Set the INT20 field to a new value. */
#define DMA_WR_INT_INT20(base, value) (DMA_RMW_INT(base, (DMA_INT_INT20_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT20(value)))
#define DMA_BWR_INT_INT20(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT20_SHIFT), DMA_INT_INT20_SHIFT, DMA_INT_INT20_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT21[21] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT21 field. */
#define DMA_RD_INT_INT21(base) ((DMA_INT_REG(base) & DMA_INT_INT21_MASK) >> DMA_INT_INT21_SHIFT)
#define DMA_BRD_INT_INT21(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT21_SHIFT, DMA_INT_INT21_WIDTH))

/*! @brief Set the INT21 field to a new value. */
#define DMA_WR_INT_INT21(base, value) (DMA_RMW_INT(base, (DMA_INT_INT21_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT21(value)))
#define DMA_BWR_INT_INT21(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT21_SHIFT), DMA_INT_INT21_SHIFT, DMA_INT_INT21_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT22[22] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT22 field. */
#define DMA_RD_INT_INT22(base) ((DMA_INT_REG(base) & DMA_INT_INT22_MASK) >> DMA_INT_INT22_SHIFT)
#define DMA_BRD_INT_INT22(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT22_SHIFT, DMA_INT_INT22_WIDTH))

/*! @brief Set the INT22 field to a new value. */
#define DMA_WR_INT_INT22(base, value) (DMA_RMW_INT(base, (DMA_INT_INT22_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT22(value)))
#define DMA_BWR_INT_INT22(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT22_SHIFT), DMA_INT_INT22_SHIFT, DMA_INT_INT22_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT23[23] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT23 field. */
#define DMA_RD_INT_INT23(base) ((DMA_INT_REG(base) & DMA_INT_INT23_MASK) >> DMA_INT_INT23_SHIFT)
#define DMA_BRD_INT_INT23(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT23_SHIFT, DMA_INT_INT23_WIDTH))

/*! @brief Set the INT23 field to a new value. */
#define DMA_WR_INT_INT23(base, value) (DMA_RMW_INT(base, (DMA_INT_INT23_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT23(value)))
#define DMA_BWR_INT_INT23(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT23_SHIFT), DMA_INT_INT23_SHIFT, DMA_INT_INT23_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT24[24] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT24 field. */
#define DMA_RD_INT_INT24(base) ((DMA_INT_REG(base) & DMA_INT_INT24_MASK) >> DMA_INT_INT24_SHIFT)
#define DMA_BRD_INT_INT24(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT24_SHIFT, DMA_INT_INT24_WIDTH))

/*! @brief Set the INT24 field to a new value. */
#define DMA_WR_INT_INT24(base, value) (DMA_RMW_INT(base, (DMA_INT_INT24_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT24(value)))
#define DMA_BWR_INT_INT24(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT24_SHIFT), DMA_INT_INT24_SHIFT, DMA_INT_INT24_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT25[25] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT25 field. */
#define DMA_RD_INT_INT25(base) ((DMA_INT_REG(base) & DMA_INT_INT25_MASK) >> DMA_INT_INT25_SHIFT)
#define DMA_BRD_INT_INT25(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT25_SHIFT, DMA_INT_INT25_WIDTH))

/*! @brief Set the INT25 field to a new value. */
#define DMA_WR_INT_INT25(base, value) (DMA_RMW_INT(base, (DMA_INT_INT25_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT25(value)))
#define DMA_BWR_INT_INT25(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT25_SHIFT), DMA_INT_INT25_SHIFT, DMA_INT_INT25_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT26[26] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT26 field. */
#define DMA_RD_INT_INT26(base) ((DMA_INT_REG(base) & DMA_INT_INT26_MASK) >> DMA_INT_INT26_SHIFT)
#define DMA_BRD_INT_INT26(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT26_SHIFT, DMA_INT_INT26_WIDTH))

/*! @brief Set the INT26 field to a new value. */
#define DMA_WR_INT_INT26(base, value) (DMA_RMW_INT(base, (DMA_INT_INT26_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT26(value)))
#define DMA_BWR_INT_INT26(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT26_SHIFT), DMA_INT_INT26_SHIFT, DMA_INT_INT26_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT27[27] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT27 field. */
#define DMA_RD_INT_INT27(base) ((DMA_INT_REG(base) & DMA_INT_INT27_MASK) >> DMA_INT_INT27_SHIFT)
#define DMA_BRD_INT_INT27(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT27_SHIFT, DMA_INT_INT27_WIDTH))

/*! @brief Set the INT27 field to a new value. */
#define DMA_WR_INT_INT27(base, value) (DMA_RMW_INT(base, (DMA_INT_INT27_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT27(value)))
#define DMA_BWR_INT_INT27(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT27_SHIFT), DMA_INT_INT27_SHIFT, DMA_INT_INT27_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT28[28] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT28 field. */
#define DMA_RD_INT_INT28(base) ((DMA_INT_REG(base) & DMA_INT_INT28_MASK) >> DMA_INT_INT28_SHIFT)
#define DMA_BRD_INT_INT28(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT28_SHIFT, DMA_INT_INT28_WIDTH))

/*! @brief Set the INT28 field to a new value. */
#define DMA_WR_INT_INT28(base, value) (DMA_RMW_INT(base, (DMA_INT_INT28_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT28(value)))
#define DMA_BWR_INT_INT28(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT28_SHIFT), DMA_INT_INT28_SHIFT, DMA_INT_INT28_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT29[29] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT29 field. */
#define DMA_RD_INT_INT29(base) ((DMA_INT_REG(base) & DMA_INT_INT29_MASK) >> DMA_INT_INT29_SHIFT)
#define DMA_BRD_INT_INT29(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT29_SHIFT, DMA_INT_INT29_WIDTH))

/*! @brief Set the INT29 field to a new value. */
#define DMA_WR_INT_INT29(base, value) (DMA_RMW_INT(base, (DMA_INT_INT29_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT30_MASK | DMA_INT_INT31_MASK), DMA_INT_INT29(value)))
#define DMA_BWR_INT_INT29(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT29_SHIFT), DMA_INT_INT29_SHIFT, DMA_INT_INT29_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT30[30] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT30 field. */
#define DMA_RD_INT_INT30(base) ((DMA_INT_REG(base) & DMA_INT_INT30_MASK) >> DMA_INT_INT30_SHIFT)
#define DMA_BRD_INT_INT30(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT30_SHIFT, DMA_INT_INT30_WIDTH))

/*! @brief Set the INT30 field to a new value. */
#define DMA_WR_INT_INT30(base, value) (DMA_RMW_INT(base, (DMA_INT_INT30_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT31_MASK), DMA_INT_INT30(value)))
#define DMA_BWR_INT_INT30(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT30_SHIFT), DMA_INT_INT30_SHIFT, DMA_INT_INT30_WIDTH))
/*@}*/

/*!
 * @name Register DMA_INT, field INT31[31] (W1C)
 *
 * Values:
 * - 0b0 - The interrupt request for corresponding channel is cleared
 * - 0b1 - The interrupt request for corresponding channel is active
 */
/*@{*/
/*! @brief Read current value of the DMA_INT_INT31 field. */
#define DMA_RD_INT_INT31(base) ((DMA_INT_REG(base) & DMA_INT_INT31_MASK) >> DMA_INT_INT31_SHIFT)
#define DMA_BRD_INT_INT31(base) (BME_UBFX32(&DMA_INT_REG(base), DMA_INT_INT31_SHIFT, DMA_INT_INT31_WIDTH))

/*! @brief Set the INT31 field to a new value. */
#define DMA_WR_INT_INT31(base, value) (DMA_RMW_INT(base, (DMA_INT_INT31_MASK | DMA_INT_INT0_MASK | DMA_INT_INT1_MASK | DMA_INT_INT2_MASK | DMA_INT_INT3_MASK | DMA_INT_INT4_MASK | DMA_INT_INT5_MASK | DMA_INT_INT6_MASK | DMA_INT_INT7_MASK | DMA_INT_INT8_MASK | DMA_INT_INT9_MASK | DMA_INT_INT10_MASK | DMA_INT_INT11_MASK | DMA_INT_INT12_MASK | DMA_INT_INT13_MASK | DMA_INT_INT14_MASK | DMA_INT_INT15_MASK | DMA_INT_INT16_MASK | DMA_INT_INT17_MASK | DMA_INT_INT18_MASK | DMA_INT_INT19_MASK | DMA_INT_INT20_MASK | DMA_INT_INT21_MASK | DMA_INT_INT22_MASK | DMA_INT_INT23_MASK | DMA_INT_INT24_MASK | DMA_INT_INT25_MASK | DMA_INT_INT26_MASK | DMA_INT_INT27_MASK | DMA_INT_INT28_MASK | DMA_INT_INT29_MASK | DMA_INT_INT30_MASK), DMA_INT_INT31(value)))
#define DMA_BWR_INT_INT31(base, value) (BME_BFI32(&DMA_INT_REG(base), ((uint32_t)(value) << DMA_INT_INT31_SHIFT), DMA_INT_INT31_SHIFT, DMA_INT_INT31_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_ERR - Error Register
 ******************************************************************************/

/*!
 * @brief DMA_ERR - Error Register (W1C)
 *
 * Reset value: 0x00000000U
 *
 * The ERR provides a bit map for the 32 channels, signaling the presence of an
 * error for each channel. The eDMA engine signals the occurrence of an error
 * condition by setting the appropriate bit in this register. The outputs of this
 * register are enabled by the contents of the EEI, then logically summed across
 * groups of 16 and 32 channels to form several group error interrupt requests,
 * which are then routed to the interrupt controller. During the execution of the
 * interrupt-service routine associated with any DMA errors, it is software's
 * responsibility to clear the appropriate bit, negating the error-interrupt request.
 * Typically, a write to the CERR in the interrupt-service routine is used for
 * this purpose. The normal DMA channel completion indicators (setting the transfer
 * control descriptor DONE flag and the possible assertion of an interrupt
 * request) are not affected when an error is detected. The contents of this register
 * can also be polled because a non-zero value indicates the presence of a
 * channel error regardless of the state of the EEI. The state of any given channel's
 * error indicators is affected by writes to this register; it is also affected by
 * writes to the CERR. On writes to the ERR, a one in any bit position clears
 * the corresponding channel's error status. A zero in any bit position has no
 * affect on the corresponding channel's current error status. The CERR is provided
 * so the error indicator for a single channel can easily be cleared.
 */
/*!
 * @name Constants and macros for entire DMA_ERR register
 */
/*@{*/
#define DMA_RD_ERR(base)         (DMA_ERR_REG(base))
#define DMA_WR_ERR(base, value)  (DMA_ERR_REG(base) = (value))
#define DMA_RMW_ERR(base, mask, value) (DMA_WR_ERR(base, (DMA_RD_ERR(base) & ~(mask)) | (value)))
#define DMA_SET_ERR(base, value) (BME_OR32(&DMA_ERR_REG(base), (uint32_t)(value)))
#define DMA_CLR_ERR(base, value) (BME_AND32(&DMA_ERR_REG(base), (uint32_t)(~(value))))
#define DMA_TOG_ERR(base, value) (BME_XOR32(&DMA_ERR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_ERR bitfields
 */

/*!
 * @name Register DMA_ERR, field ERR0[0] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR0 field. */
#define DMA_RD_ERR_ERR0(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR0_MASK) >> DMA_ERR_ERR0_SHIFT)
#define DMA_BRD_ERR_ERR0(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR0_SHIFT, DMA_ERR_ERR0_WIDTH))

/*! @brief Set the ERR0 field to a new value. */
#define DMA_WR_ERR_ERR0(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR0(value)))
#define DMA_BWR_ERR_ERR0(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR0_SHIFT), DMA_ERR_ERR0_SHIFT, DMA_ERR_ERR0_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR1[1] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR1 field. */
#define DMA_RD_ERR_ERR1(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR1_MASK) >> DMA_ERR_ERR1_SHIFT)
#define DMA_BRD_ERR_ERR1(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR1_SHIFT, DMA_ERR_ERR1_WIDTH))

/*! @brief Set the ERR1 field to a new value. */
#define DMA_WR_ERR_ERR1(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR1_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR1(value)))
#define DMA_BWR_ERR_ERR1(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR1_SHIFT), DMA_ERR_ERR1_SHIFT, DMA_ERR_ERR1_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR2[2] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR2 field. */
#define DMA_RD_ERR_ERR2(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR2_MASK) >> DMA_ERR_ERR2_SHIFT)
#define DMA_BRD_ERR_ERR2(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR2_SHIFT, DMA_ERR_ERR2_WIDTH))

/*! @brief Set the ERR2 field to a new value. */
#define DMA_WR_ERR_ERR2(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR2_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR2(value)))
#define DMA_BWR_ERR_ERR2(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR2_SHIFT), DMA_ERR_ERR2_SHIFT, DMA_ERR_ERR2_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR3[3] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR3 field. */
#define DMA_RD_ERR_ERR3(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR3_MASK) >> DMA_ERR_ERR3_SHIFT)
#define DMA_BRD_ERR_ERR3(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR3_SHIFT, DMA_ERR_ERR3_WIDTH))

/*! @brief Set the ERR3 field to a new value. */
#define DMA_WR_ERR_ERR3(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR3_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR3(value)))
#define DMA_BWR_ERR_ERR3(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR3_SHIFT), DMA_ERR_ERR3_SHIFT, DMA_ERR_ERR3_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR4[4] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR4 field. */
#define DMA_RD_ERR_ERR4(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR4_MASK) >> DMA_ERR_ERR4_SHIFT)
#define DMA_BRD_ERR_ERR4(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR4_SHIFT, DMA_ERR_ERR4_WIDTH))

/*! @brief Set the ERR4 field to a new value. */
#define DMA_WR_ERR_ERR4(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR4_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR4(value)))
#define DMA_BWR_ERR_ERR4(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR4_SHIFT), DMA_ERR_ERR4_SHIFT, DMA_ERR_ERR4_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR5[5] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR5 field. */
#define DMA_RD_ERR_ERR5(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR5_MASK) >> DMA_ERR_ERR5_SHIFT)
#define DMA_BRD_ERR_ERR5(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR5_SHIFT, DMA_ERR_ERR5_WIDTH))

/*! @brief Set the ERR5 field to a new value. */
#define DMA_WR_ERR_ERR5(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR5_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR5(value)))
#define DMA_BWR_ERR_ERR5(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR5_SHIFT), DMA_ERR_ERR5_SHIFT, DMA_ERR_ERR5_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR6[6] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR6 field. */
#define DMA_RD_ERR_ERR6(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR6_MASK) >> DMA_ERR_ERR6_SHIFT)
#define DMA_BRD_ERR_ERR6(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR6_SHIFT, DMA_ERR_ERR6_WIDTH))

/*! @brief Set the ERR6 field to a new value. */
#define DMA_WR_ERR_ERR6(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR6_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR6(value)))
#define DMA_BWR_ERR_ERR6(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR6_SHIFT), DMA_ERR_ERR6_SHIFT, DMA_ERR_ERR6_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR7[7] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR7 field. */
#define DMA_RD_ERR_ERR7(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR7_MASK) >> DMA_ERR_ERR7_SHIFT)
#define DMA_BRD_ERR_ERR7(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR7_SHIFT, DMA_ERR_ERR7_WIDTH))

/*! @brief Set the ERR7 field to a new value. */
#define DMA_WR_ERR_ERR7(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR7_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR7(value)))
#define DMA_BWR_ERR_ERR7(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR7_SHIFT), DMA_ERR_ERR7_SHIFT, DMA_ERR_ERR7_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR8[8] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR8 field. */
#define DMA_RD_ERR_ERR8(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR8_MASK) >> DMA_ERR_ERR8_SHIFT)
#define DMA_BRD_ERR_ERR8(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR8_SHIFT, DMA_ERR_ERR8_WIDTH))

/*! @brief Set the ERR8 field to a new value. */
#define DMA_WR_ERR_ERR8(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR8_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR8(value)))
#define DMA_BWR_ERR_ERR8(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR8_SHIFT), DMA_ERR_ERR8_SHIFT, DMA_ERR_ERR8_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR9[9] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR9 field. */
#define DMA_RD_ERR_ERR9(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR9_MASK) >> DMA_ERR_ERR9_SHIFT)
#define DMA_BRD_ERR_ERR9(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR9_SHIFT, DMA_ERR_ERR9_WIDTH))

/*! @brief Set the ERR9 field to a new value. */
#define DMA_WR_ERR_ERR9(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR9_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR9(value)))
#define DMA_BWR_ERR_ERR9(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR9_SHIFT), DMA_ERR_ERR9_SHIFT, DMA_ERR_ERR9_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR10[10] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR10 field. */
#define DMA_RD_ERR_ERR10(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR10_MASK) >> DMA_ERR_ERR10_SHIFT)
#define DMA_BRD_ERR_ERR10(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR10_SHIFT, DMA_ERR_ERR10_WIDTH))

/*! @brief Set the ERR10 field to a new value. */
#define DMA_WR_ERR_ERR10(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR10_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR10(value)))
#define DMA_BWR_ERR_ERR10(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR10_SHIFT), DMA_ERR_ERR10_SHIFT, DMA_ERR_ERR10_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR11[11] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR11 field. */
#define DMA_RD_ERR_ERR11(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR11_MASK) >> DMA_ERR_ERR11_SHIFT)
#define DMA_BRD_ERR_ERR11(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR11_SHIFT, DMA_ERR_ERR11_WIDTH))

/*! @brief Set the ERR11 field to a new value. */
#define DMA_WR_ERR_ERR11(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR11_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR11(value)))
#define DMA_BWR_ERR_ERR11(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR11_SHIFT), DMA_ERR_ERR11_SHIFT, DMA_ERR_ERR11_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR12[12] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR12 field. */
#define DMA_RD_ERR_ERR12(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR12_MASK) >> DMA_ERR_ERR12_SHIFT)
#define DMA_BRD_ERR_ERR12(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR12_SHIFT, DMA_ERR_ERR12_WIDTH))

/*! @brief Set the ERR12 field to a new value. */
#define DMA_WR_ERR_ERR12(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR12_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR12(value)))
#define DMA_BWR_ERR_ERR12(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR12_SHIFT), DMA_ERR_ERR12_SHIFT, DMA_ERR_ERR12_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR13[13] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR13 field. */
#define DMA_RD_ERR_ERR13(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR13_MASK) >> DMA_ERR_ERR13_SHIFT)
#define DMA_BRD_ERR_ERR13(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR13_SHIFT, DMA_ERR_ERR13_WIDTH))

/*! @brief Set the ERR13 field to a new value. */
#define DMA_WR_ERR_ERR13(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR13_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR13(value)))
#define DMA_BWR_ERR_ERR13(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR13_SHIFT), DMA_ERR_ERR13_SHIFT, DMA_ERR_ERR13_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR14[14] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR14 field. */
#define DMA_RD_ERR_ERR14(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR14_MASK) >> DMA_ERR_ERR14_SHIFT)
#define DMA_BRD_ERR_ERR14(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR14_SHIFT, DMA_ERR_ERR14_WIDTH))

/*! @brief Set the ERR14 field to a new value. */
#define DMA_WR_ERR_ERR14(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR14_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR14(value)))
#define DMA_BWR_ERR_ERR14(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR14_SHIFT), DMA_ERR_ERR14_SHIFT, DMA_ERR_ERR14_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR15[15] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR15 field. */
#define DMA_RD_ERR_ERR15(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR15_MASK) >> DMA_ERR_ERR15_SHIFT)
#define DMA_BRD_ERR_ERR15(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR15_SHIFT, DMA_ERR_ERR15_WIDTH))

/*! @brief Set the ERR15 field to a new value. */
#define DMA_WR_ERR_ERR15(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR15_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR15(value)))
#define DMA_BWR_ERR_ERR15(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR15_SHIFT), DMA_ERR_ERR15_SHIFT, DMA_ERR_ERR15_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR16[16] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR16 field. */
#define DMA_RD_ERR_ERR16(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR16_MASK) >> DMA_ERR_ERR16_SHIFT)
#define DMA_BRD_ERR_ERR16(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR16_SHIFT, DMA_ERR_ERR16_WIDTH))

/*! @brief Set the ERR16 field to a new value. */
#define DMA_WR_ERR_ERR16(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR16_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR16(value)))
#define DMA_BWR_ERR_ERR16(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR16_SHIFT), DMA_ERR_ERR16_SHIFT, DMA_ERR_ERR16_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR17[17] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR17 field. */
#define DMA_RD_ERR_ERR17(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR17_MASK) >> DMA_ERR_ERR17_SHIFT)
#define DMA_BRD_ERR_ERR17(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR17_SHIFT, DMA_ERR_ERR17_WIDTH))

/*! @brief Set the ERR17 field to a new value. */
#define DMA_WR_ERR_ERR17(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR17_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR17(value)))
#define DMA_BWR_ERR_ERR17(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR17_SHIFT), DMA_ERR_ERR17_SHIFT, DMA_ERR_ERR17_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR18[18] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR18 field. */
#define DMA_RD_ERR_ERR18(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR18_MASK) >> DMA_ERR_ERR18_SHIFT)
#define DMA_BRD_ERR_ERR18(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR18_SHIFT, DMA_ERR_ERR18_WIDTH))

/*! @brief Set the ERR18 field to a new value. */
#define DMA_WR_ERR_ERR18(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR18_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR18(value)))
#define DMA_BWR_ERR_ERR18(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR18_SHIFT), DMA_ERR_ERR18_SHIFT, DMA_ERR_ERR18_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR19[19] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR19 field. */
#define DMA_RD_ERR_ERR19(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR19_MASK) >> DMA_ERR_ERR19_SHIFT)
#define DMA_BRD_ERR_ERR19(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR19_SHIFT, DMA_ERR_ERR19_WIDTH))

/*! @brief Set the ERR19 field to a new value. */
#define DMA_WR_ERR_ERR19(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR19_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR19(value)))
#define DMA_BWR_ERR_ERR19(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR19_SHIFT), DMA_ERR_ERR19_SHIFT, DMA_ERR_ERR19_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR20[20] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR20 field. */
#define DMA_RD_ERR_ERR20(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR20_MASK) >> DMA_ERR_ERR20_SHIFT)
#define DMA_BRD_ERR_ERR20(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR20_SHIFT, DMA_ERR_ERR20_WIDTH))

/*! @brief Set the ERR20 field to a new value. */
#define DMA_WR_ERR_ERR20(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR20_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR20(value)))
#define DMA_BWR_ERR_ERR20(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR20_SHIFT), DMA_ERR_ERR20_SHIFT, DMA_ERR_ERR20_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR21[21] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR21 field. */
#define DMA_RD_ERR_ERR21(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR21_MASK) >> DMA_ERR_ERR21_SHIFT)
#define DMA_BRD_ERR_ERR21(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR21_SHIFT, DMA_ERR_ERR21_WIDTH))

/*! @brief Set the ERR21 field to a new value. */
#define DMA_WR_ERR_ERR21(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR21_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR21(value)))
#define DMA_BWR_ERR_ERR21(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR21_SHIFT), DMA_ERR_ERR21_SHIFT, DMA_ERR_ERR21_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR22[22] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR22 field. */
#define DMA_RD_ERR_ERR22(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR22_MASK) >> DMA_ERR_ERR22_SHIFT)
#define DMA_BRD_ERR_ERR22(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR22_SHIFT, DMA_ERR_ERR22_WIDTH))

/*! @brief Set the ERR22 field to a new value. */
#define DMA_WR_ERR_ERR22(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR22_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR22(value)))
#define DMA_BWR_ERR_ERR22(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR22_SHIFT), DMA_ERR_ERR22_SHIFT, DMA_ERR_ERR22_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR23[23] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR23 field. */
#define DMA_RD_ERR_ERR23(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR23_MASK) >> DMA_ERR_ERR23_SHIFT)
#define DMA_BRD_ERR_ERR23(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR23_SHIFT, DMA_ERR_ERR23_WIDTH))

/*! @brief Set the ERR23 field to a new value. */
#define DMA_WR_ERR_ERR23(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR23_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR23(value)))
#define DMA_BWR_ERR_ERR23(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR23_SHIFT), DMA_ERR_ERR23_SHIFT, DMA_ERR_ERR23_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR24[24] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR24 field. */
#define DMA_RD_ERR_ERR24(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR24_MASK) >> DMA_ERR_ERR24_SHIFT)
#define DMA_BRD_ERR_ERR24(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR24_SHIFT, DMA_ERR_ERR24_WIDTH))

/*! @brief Set the ERR24 field to a new value. */
#define DMA_WR_ERR_ERR24(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR24_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR24(value)))
#define DMA_BWR_ERR_ERR24(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR24_SHIFT), DMA_ERR_ERR24_SHIFT, DMA_ERR_ERR24_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR25[25] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR25 field. */
#define DMA_RD_ERR_ERR25(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR25_MASK) >> DMA_ERR_ERR25_SHIFT)
#define DMA_BRD_ERR_ERR25(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR25_SHIFT, DMA_ERR_ERR25_WIDTH))

/*! @brief Set the ERR25 field to a new value. */
#define DMA_WR_ERR_ERR25(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR25_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR25(value)))
#define DMA_BWR_ERR_ERR25(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR25_SHIFT), DMA_ERR_ERR25_SHIFT, DMA_ERR_ERR25_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR26[26] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR26 field. */
#define DMA_RD_ERR_ERR26(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR26_MASK) >> DMA_ERR_ERR26_SHIFT)
#define DMA_BRD_ERR_ERR26(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR26_SHIFT, DMA_ERR_ERR26_WIDTH))

/*! @brief Set the ERR26 field to a new value. */
#define DMA_WR_ERR_ERR26(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR26_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR26(value)))
#define DMA_BWR_ERR_ERR26(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR26_SHIFT), DMA_ERR_ERR26_SHIFT, DMA_ERR_ERR26_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR27[27] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR27 field. */
#define DMA_RD_ERR_ERR27(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR27_MASK) >> DMA_ERR_ERR27_SHIFT)
#define DMA_BRD_ERR_ERR27(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR27_SHIFT, DMA_ERR_ERR27_WIDTH))

/*! @brief Set the ERR27 field to a new value. */
#define DMA_WR_ERR_ERR27(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR27_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR27(value)))
#define DMA_BWR_ERR_ERR27(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR27_SHIFT), DMA_ERR_ERR27_SHIFT, DMA_ERR_ERR27_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR28[28] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR28 field. */
#define DMA_RD_ERR_ERR28(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR28_MASK) >> DMA_ERR_ERR28_SHIFT)
#define DMA_BRD_ERR_ERR28(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR28_SHIFT, DMA_ERR_ERR28_WIDTH))

/*! @brief Set the ERR28 field to a new value. */
#define DMA_WR_ERR_ERR28(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR28_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR28(value)))
#define DMA_BWR_ERR_ERR28(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR28_SHIFT), DMA_ERR_ERR28_SHIFT, DMA_ERR_ERR28_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR29[29] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR29 field. */
#define DMA_RD_ERR_ERR29(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR29_MASK) >> DMA_ERR_ERR29_SHIFT)
#define DMA_BRD_ERR_ERR29(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR29_SHIFT, DMA_ERR_ERR29_WIDTH))

/*! @brief Set the ERR29 field to a new value. */
#define DMA_WR_ERR_ERR29(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR29_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR30_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR29(value)))
#define DMA_BWR_ERR_ERR29(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR29_SHIFT), DMA_ERR_ERR29_SHIFT, DMA_ERR_ERR29_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR30[30] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR30 field. */
#define DMA_RD_ERR_ERR30(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR30_MASK) >> DMA_ERR_ERR30_SHIFT)
#define DMA_BRD_ERR_ERR30(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR30_SHIFT, DMA_ERR_ERR30_WIDTH))

/*! @brief Set the ERR30 field to a new value. */
#define DMA_WR_ERR_ERR30(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR30_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR31_MASK), DMA_ERR_ERR30(value)))
#define DMA_BWR_ERR_ERR30(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR30_SHIFT), DMA_ERR_ERR30_SHIFT, DMA_ERR_ERR30_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ERR, field ERR31[31] (W1C)
 *
 * Values:
 * - 0b0 - An error in this channel has not occurred
 * - 0b1 - An error in this channel has occurred
 */
/*@{*/
/*! @brief Read current value of the DMA_ERR_ERR31 field. */
#define DMA_RD_ERR_ERR31(base) ((DMA_ERR_REG(base) & DMA_ERR_ERR31_MASK) >> DMA_ERR_ERR31_SHIFT)
#define DMA_BRD_ERR_ERR31(base) (BME_UBFX32(&DMA_ERR_REG(base), DMA_ERR_ERR31_SHIFT, DMA_ERR_ERR31_WIDTH))

/*! @brief Set the ERR31 field to a new value. */
#define DMA_WR_ERR_ERR31(base, value) (DMA_RMW_ERR(base, (DMA_ERR_ERR31_MASK | DMA_ERR_ERR0_MASK | DMA_ERR_ERR1_MASK | DMA_ERR_ERR2_MASK | DMA_ERR_ERR3_MASK | DMA_ERR_ERR4_MASK | DMA_ERR_ERR5_MASK | DMA_ERR_ERR6_MASK | DMA_ERR_ERR7_MASK | DMA_ERR_ERR8_MASK | DMA_ERR_ERR9_MASK | DMA_ERR_ERR10_MASK | DMA_ERR_ERR11_MASK | DMA_ERR_ERR12_MASK | DMA_ERR_ERR13_MASK | DMA_ERR_ERR14_MASK | DMA_ERR_ERR15_MASK | DMA_ERR_ERR16_MASK | DMA_ERR_ERR17_MASK | DMA_ERR_ERR18_MASK | DMA_ERR_ERR19_MASK | DMA_ERR_ERR20_MASK | DMA_ERR_ERR21_MASK | DMA_ERR_ERR22_MASK | DMA_ERR_ERR23_MASK | DMA_ERR_ERR24_MASK | DMA_ERR_ERR25_MASK | DMA_ERR_ERR26_MASK | DMA_ERR_ERR27_MASK | DMA_ERR_ERR28_MASK | DMA_ERR_ERR29_MASK | DMA_ERR_ERR30_MASK), DMA_ERR_ERR31(value)))
#define DMA_BWR_ERR_ERR31(base, value) (BME_BFI32(&DMA_ERR_REG(base), ((uint32_t)(value) << DMA_ERR_ERR31_SHIFT), DMA_ERR_ERR31_SHIFT, DMA_ERR_ERR31_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_HRS - Hardware Request Status Register
 ******************************************************************************/

/*!
 * @brief DMA_HRS - Hardware Request Status Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The HRS register provides a bit map for the DMA channels, signaling the
 * presence of a hardware request for each channel. The hardware request status bits
 * reflect the current state of the register and qualified (via the ERQ fields)
 * DMA request signals as seen by the DMA's arbitration logic. This view into the
 * hardware request signals may be used for debug purposes. These bits reflect the
 * state of the request as seen by the arbitration logic. Therefore, this status
 * is affected by the ERQ bits.
 */
/*!
 * @name Constants and macros for entire DMA_HRS register
 */
/*@{*/
#define DMA_RD_HRS(base)         (DMA_HRS_REG(base))
/*@}*/

/*
 * Constants & macros for individual DMA_HRS bitfields
 */

/*!
 * @name Register DMA_HRS, field HRS0[0] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 0 is not present
 * - 0b1 - A hardware service request for channel 0 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS0 field. */
#define DMA_RD_HRS_HRS0(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS0_MASK) >> DMA_HRS_HRS0_SHIFT)
#define DMA_BRD_HRS_HRS0(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS0_SHIFT, DMA_HRS_HRS0_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS1[1] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 1 is not present
 * - 0b1 - A hardware service request for channel 1 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS1 field. */
#define DMA_RD_HRS_HRS1(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS1_MASK) >> DMA_HRS_HRS1_SHIFT)
#define DMA_BRD_HRS_HRS1(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS1_SHIFT, DMA_HRS_HRS1_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS2[2] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 2 is not present
 * - 0b1 - A hardware service request for channel 2 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS2 field. */
#define DMA_RD_HRS_HRS2(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS2_MASK) >> DMA_HRS_HRS2_SHIFT)
#define DMA_BRD_HRS_HRS2(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS2_SHIFT, DMA_HRS_HRS2_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS3[3] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 3 is not present
 * - 0b1 - A hardware service request for channel 3 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS3 field. */
#define DMA_RD_HRS_HRS3(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS3_MASK) >> DMA_HRS_HRS3_SHIFT)
#define DMA_BRD_HRS_HRS3(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS3_SHIFT, DMA_HRS_HRS3_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS4[4] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 4 is not present
 * - 0b1 - A hardware service request for channel 4 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS4 field. */
#define DMA_RD_HRS_HRS4(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS4_MASK) >> DMA_HRS_HRS4_SHIFT)
#define DMA_BRD_HRS_HRS4(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS4_SHIFT, DMA_HRS_HRS4_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS5[5] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 5 is not present
 * - 0b1 - A hardware service request for channel 5 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS5 field. */
#define DMA_RD_HRS_HRS5(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS5_MASK) >> DMA_HRS_HRS5_SHIFT)
#define DMA_BRD_HRS_HRS5(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS5_SHIFT, DMA_HRS_HRS5_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS6[6] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 6 is not present
 * - 0b1 - A hardware service request for channel 6 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS6 field. */
#define DMA_RD_HRS_HRS6(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS6_MASK) >> DMA_HRS_HRS6_SHIFT)
#define DMA_BRD_HRS_HRS6(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS6_SHIFT, DMA_HRS_HRS6_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS7[7] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 7 is not present
 * - 0b1 - A hardware service request for channel 7 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS7 field. */
#define DMA_RD_HRS_HRS7(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS7_MASK) >> DMA_HRS_HRS7_SHIFT)
#define DMA_BRD_HRS_HRS7(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS7_SHIFT, DMA_HRS_HRS7_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS8[8] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 8 is not present
 * - 0b1 - A hardware service request for channel 8 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS8 field. */
#define DMA_RD_HRS_HRS8(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS8_MASK) >> DMA_HRS_HRS8_SHIFT)
#define DMA_BRD_HRS_HRS8(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS8_SHIFT, DMA_HRS_HRS8_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS9[9] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 9 is not present
 * - 0b1 - A hardware service request for channel 9 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS9 field. */
#define DMA_RD_HRS_HRS9(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS9_MASK) >> DMA_HRS_HRS9_SHIFT)
#define DMA_BRD_HRS_HRS9(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS9_SHIFT, DMA_HRS_HRS9_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS10[10] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 10 is not present
 * - 0b1 - A hardware service request for channel 10 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS10 field. */
#define DMA_RD_HRS_HRS10(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS10_MASK) >> DMA_HRS_HRS10_SHIFT)
#define DMA_BRD_HRS_HRS10(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS10_SHIFT, DMA_HRS_HRS10_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS11[11] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 11 is not present
 * - 0b1 - A hardware service request for channel 11 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS11 field. */
#define DMA_RD_HRS_HRS11(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS11_MASK) >> DMA_HRS_HRS11_SHIFT)
#define DMA_BRD_HRS_HRS11(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS11_SHIFT, DMA_HRS_HRS11_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS12[12] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 12 is not present
 * - 0b1 - A hardware service request for channel 12 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS12 field. */
#define DMA_RD_HRS_HRS12(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS12_MASK) >> DMA_HRS_HRS12_SHIFT)
#define DMA_BRD_HRS_HRS12(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS12_SHIFT, DMA_HRS_HRS12_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS13[13] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 13 is not present
 * - 0b1 - A hardware service request for channel 13 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS13 field. */
#define DMA_RD_HRS_HRS13(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS13_MASK) >> DMA_HRS_HRS13_SHIFT)
#define DMA_BRD_HRS_HRS13(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS13_SHIFT, DMA_HRS_HRS13_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS14[14] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 14 is not present
 * - 0b1 - A hardware service request for channel 14 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS14 field. */
#define DMA_RD_HRS_HRS14(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS14_MASK) >> DMA_HRS_HRS14_SHIFT)
#define DMA_BRD_HRS_HRS14(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS14_SHIFT, DMA_HRS_HRS14_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS15[15] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 15 is not present
 * - 0b1 - A hardware service request for channel 15 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS15 field. */
#define DMA_RD_HRS_HRS15(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS15_MASK) >> DMA_HRS_HRS15_SHIFT)
#define DMA_BRD_HRS_HRS15(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS15_SHIFT, DMA_HRS_HRS15_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS16[16] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 16 is not present
 * - 0b1 - A hardware service request for channel 16 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS16 field. */
#define DMA_RD_HRS_HRS16(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS16_MASK) >> DMA_HRS_HRS16_SHIFT)
#define DMA_BRD_HRS_HRS16(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS16_SHIFT, DMA_HRS_HRS16_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS17[17] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 17 is not present
 * - 0b1 - A hardware service request for channel 17 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS17 field. */
#define DMA_RD_HRS_HRS17(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS17_MASK) >> DMA_HRS_HRS17_SHIFT)
#define DMA_BRD_HRS_HRS17(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS17_SHIFT, DMA_HRS_HRS17_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS18[18] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 18 is not present
 * - 0b1 - A hardware service request for channel 18 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS18 field. */
#define DMA_RD_HRS_HRS18(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS18_MASK) >> DMA_HRS_HRS18_SHIFT)
#define DMA_BRD_HRS_HRS18(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS18_SHIFT, DMA_HRS_HRS18_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS19[19] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 19 is not present
 * - 0b1 - A hardware service request for channel 19 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS19 field. */
#define DMA_RD_HRS_HRS19(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS19_MASK) >> DMA_HRS_HRS19_SHIFT)
#define DMA_BRD_HRS_HRS19(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS19_SHIFT, DMA_HRS_HRS19_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS20[20] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 20 is not present
 * - 0b1 - A hardware service request for channel 20 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS20 field. */
#define DMA_RD_HRS_HRS20(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS20_MASK) >> DMA_HRS_HRS20_SHIFT)
#define DMA_BRD_HRS_HRS20(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS20_SHIFT, DMA_HRS_HRS20_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS21[21] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 21 is not present
 * - 0b1 - A hardware service request for channel 21 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS21 field. */
#define DMA_RD_HRS_HRS21(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS21_MASK) >> DMA_HRS_HRS21_SHIFT)
#define DMA_BRD_HRS_HRS21(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS21_SHIFT, DMA_HRS_HRS21_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS22[22] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 22 is not present
 * - 0b1 - A hardware service request for channel 22 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS22 field. */
#define DMA_RD_HRS_HRS22(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS22_MASK) >> DMA_HRS_HRS22_SHIFT)
#define DMA_BRD_HRS_HRS22(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS22_SHIFT, DMA_HRS_HRS22_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS23[23] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 23 is not present
 * - 0b1 - A hardware service request for channel 23 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS23 field. */
#define DMA_RD_HRS_HRS23(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS23_MASK) >> DMA_HRS_HRS23_SHIFT)
#define DMA_BRD_HRS_HRS23(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS23_SHIFT, DMA_HRS_HRS23_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS24[24] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 24 is not present
 * - 0b1 - A hardware service request for channel 24 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS24 field. */
#define DMA_RD_HRS_HRS24(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS24_MASK) >> DMA_HRS_HRS24_SHIFT)
#define DMA_BRD_HRS_HRS24(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS24_SHIFT, DMA_HRS_HRS24_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS25[25] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 25 is not present
 * - 0b1 - A hardware service request for channel 25 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS25 field. */
#define DMA_RD_HRS_HRS25(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS25_MASK) >> DMA_HRS_HRS25_SHIFT)
#define DMA_BRD_HRS_HRS25(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS25_SHIFT, DMA_HRS_HRS25_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS26[26] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 26 is not present
 * - 0b1 - A hardware service request for channel 26 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS26 field. */
#define DMA_RD_HRS_HRS26(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS26_MASK) >> DMA_HRS_HRS26_SHIFT)
#define DMA_BRD_HRS_HRS26(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS26_SHIFT, DMA_HRS_HRS26_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS27[27] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 27 is not present
 * - 0b1 - A hardware service request for channel 27 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS27 field. */
#define DMA_RD_HRS_HRS27(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS27_MASK) >> DMA_HRS_HRS27_SHIFT)
#define DMA_BRD_HRS_HRS27(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS27_SHIFT, DMA_HRS_HRS27_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS28[28] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 28 is not present
 * - 0b1 - A hardware service request for channel 28 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS28 field. */
#define DMA_RD_HRS_HRS28(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS28_MASK) >> DMA_HRS_HRS28_SHIFT)
#define DMA_BRD_HRS_HRS28(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS28_SHIFT, DMA_HRS_HRS28_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS29[29] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 29 is not preset
 * - 0b1 - A hardware service request for channel 29 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS29 field. */
#define DMA_RD_HRS_HRS29(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS29_MASK) >> DMA_HRS_HRS29_SHIFT)
#define DMA_BRD_HRS_HRS29(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS29_SHIFT, DMA_HRS_HRS29_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS30[30] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 30 is not present
 * - 0b1 - A hardware service request for for channel 30 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS30 field. */
#define DMA_RD_HRS_HRS30(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS30_MASK) >> DMA_HRS_HRS30_SHIFT)
#define DMA_BRD_HRS_HRS30(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS30_SHIFT, DMA_HRS_HRS30_WIDTH))
/*@}*/

/*!
 * @name Register DMA_HRS, field HRS31[31] (RO)
 *
 * The HRS bit for its respective channel remains asserted for the period when a
 * Hardware Request is Present on the Channel. After the Request is completed
 * and Channel is free, the HRS bit is automatically cleared by hardware.
 *
 * Values:
 * - 0b0 - A hardware service request for channel 31 is not present
 * - 0b1 - A hardware service request for channel 31 is present
 */
/*@{*/
/*! @brief Read current value of the DMA_HRS_HRS31 field. */
#define DMA_RD_HRS_HRS31(base) ((DMA_HRS_REG(base) & DMA_HRS_HRS31_MASK) >> DMA_HRS_HRS31_SHIFT)
#define DMA_BRD_HRS_HRS31(base) (BME_UBFX32(&DMA_HRS_REG(base), DMA_HRS_HRS31_SHIFT, DMA_HRS_HRS31_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_EARS - Enable Asynchronous Request in Stop Register
 ******************************************************************************/

/*!
 * @brief DMA_EARS - Enable Asynchronous Request in Stop Register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire DMA_EARS register
 */
/*@{*/
#define DMA_RD_EARS(base)        (DMA_EARS_REG(base))
#define DMA_WR_EARS(base, value) (DMA_EARS_REG(base) = (value))
#define DMA_RMW_EARS(base, mask, value) (DMA_WR_EARS(base, (DMA_RD_EARS(base) & ~(mask)) | (value)))
#define DMA_SET_EARS(base, value) (BME_OR32(&DMA_EARS_REG(base), (uint32_t)(value)))
#define DMA_CLR_EARS(base, value) (BME_AND32(&DMA_EARS_REG(base), (uint32_t)(~(value))))
#define DMA_TOG_EARS(base, value) (BME_XOR32(&DMA_EARS_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_EARS bitfields
 */

/*!
 * @name Register DMA_EARS, field EDREQ_0[0] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 0.
 * - 0b1 - Enable asynchronous DMA request for channel 0.
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_0 field. */
#define DMA_RD_EARS_EDREQ_0(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_0_MASK) >> DMA_EARS_EDREQ_0_SHIFT)
#define DMA_BRD_EARS_EDREQ_0(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_0_SHIFT, DMA_EARS_EDREQ_0_WIDTH))

/*! @brief Set the EDREQ_0 field to a new value. */
#define DMA_WR_EARS_EDREQ_0(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_0_MASK, DMA_EARS_EDREQ_0(value)))
#define DMA_BWR_EARS_EDREQ_0(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_0_SHIFT), DMA_EARS_EDREQ_0_SHIFT, DMA_EARS_EDREQ_0_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_1[1] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 1
 * - 0b1 - Enable asynchronous DMA request for channel 1.
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_1 field. */
#define DMA_RD_EARS_EDREQ_1(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_1_MASK) >> DMA_EARS_EDREQ_1_SHIFT)
#define DMA_BRD_EARS_EDREQ_1(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_1_SHIFT, DMA_EARS_EDREQ_1_WIDTH))

/*! @brief Set the EDREQ_1 field to a new value. */
#define DMA_WR_EARS_EDREQ_1(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_1_MASK, DMA_EARS_EDREQ_1(value)))
#define DMA_BWR_EARS_EDREQ_1(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_1_SHIFT), DMA_EARS_EDREQ_1_SHIFT, DMA_EARS_EDREQ_1_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_2[2] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 2.
 * - 0b1 - Enable asynchronous DMA request for channel 2.
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_2 field. */
#define DMA_RD_EARS_EDREQ_2(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_2_MASK) >> DMA_EARS_EDREQ_2_SHIFT)
#define DMA_BRD_EARS_EDREQ_2(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_2_SHIFT, DMA_EARS_EDREQ_2_WIDTH))

/*! @brief Set the EDREQ_2 field to a new value. */
#define DMA_WR_EARS_EDREQ_2(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_2_MASK, DMA_EARS_EDREQ_2(value)))
#define DMA_BWR_EARS_EDREQ_2(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_2_SHIFT), DMA_EARS_EDREQ_2_SHIFT, DMA_EARS_EDREQ_2_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_3[3] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 3.
 * - 0b1 - Enable asynchronous DMA request for channel 3.
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_3 field. */
#define DMA_RD_EARS_EDREQ_3(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_3_MASK) >> DMA_EARS_EDREQ_3_SHIFT)
#define DMA_BRD_EARS_EDREQ_3(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_3_SHIFT, DMA_EARS_EDREQ_3_WIDTH))

/*! @brief Set the EDREQ_3 field to a new value. */
#define DMA_WR_EARS_EDREQ_3(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_3_MASK, DMA_EARS_EDREQ_3(value)))
#define DMA_BWR_EARS_EDREQ_3(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_3_SHIFT), DMA_EARS_EDREQ_3_SHIFT, DMA_EARS_EDREQ_3_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_4[4] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 4.
 * - 0b1 - Enable asynchronous DMA request for channel 4.
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_4 field. */
#define DMA_RD_EARS_EDREQ_4(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_4_MASK) >> DMA_EARS_EDREQ_4_SHIFT)
#define DMA_BRD_EARS_EDREQ_4(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_4_SHIFT, DMA_EARS_EDREQ_4_WIDTH))

/*! @brief Set the EDREQ_4 field to a new value. */
#define DMA_WR_EARS_EDREQ_4(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_4_MASK, DMA_EARS_EDREQ_4(value)))
#define DMA_BWR_EARS_EDREQ_4(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_4_SHIFT), DMA_EARS_EDREQ_4_SHIFT, DMA_EARS_EDREQ_4_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_5[5] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 5.
 * - 0b1 - Enable asynchronous DMA request for channel 5.
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_5 field. */
#define DMA_RD_EARS_EDREQ_5(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_5_MASK) >> DMA_EARS_EDREQ_5_SHIFT)
#define DMA_BRD_EARS_EDREQ_5(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_5_SHIFT, DMA_EARS_EDREQ_5_WIDTH))

/*! @brief Set the EDREQ_5 field to a new value. */
#define DMA_WR_EARS_EDREQ_5(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_5_MASK, DMA_EARS_EDREQ_5(value)))
#define DMA_BWR_EARS_EDREQ_5(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_5_SHIFT), DMA_EARS_EDREQ_5_SHIFT, DMA_EARS_EDREQ_5_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_6[6] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 6.
 * - 0b1 - Enable asynchronous DMA request for channel 6.
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_6 field. */
#define DMA_RD_EARS_EDREQ_6(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_6_MASK) >> DMA_EARS_EDREQ_6_SHIFT)
#define DMA_BRD_EARS_EDREQ_6(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_6_SHIFT, DMA_EARS_EDREQ_6_WIDTH))

/*! @brief Set the EDREQ_6 field to a new value. */
#define DMA_WR_EARS_EDREQ_6(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_6_MASK, DMA_EARS_EDREQ_6(value)))
#define DMA_BWR_EARS_EDREQ_6(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_6_SHIFT), DMA_EARS_EDREQ_6_SHIFT, DMA_EARS_EDREQ_6_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_7[7] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 7.
 * - 0b1 - Enable asynchronous DMA request for channel 7.
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_7 field. */
#define DMA_RD_EARS_EDREQ_7(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_7_MASK) >> DMA_EARS_EDREQ_7_SHIFT)
#define DMA_BRD_EARS_EDREQ_7(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_7_SHIFT, DMA_EARS_EDREQ_7_WIDTH))

/*! @brief Set the EDREQ_7 field to a new value. */
#define DMA_WR_EARS_EDREQ_7(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_7_MASK, DMA_EARS_EDREQ_7(value)))
#define DMA_BWR_EARS_EDREQ_7(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_7_SHIFT), DMA_EARS_EDREQ_7_SHIFT, DMA_EARS_EDREQ_7_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_8[8] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 8.
 * - 0b1 - Enable asynchronous DMA request for channel 8.
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_8 field. */
#define DMA_RD_EARS_EDREQ_8(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_8_MASK) >> DMA_EARS_EDREQ_8_SHIFT)
#define DMA_BRD_EARS_EDREQ_8(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_8_SHIFT, DMA_EARS_EDREQ_8_WIDTH))

/*! @brief Set the EDREQ_8 field to a new value. */
#define DMA_WR_EARS_EDREQ_8(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_8_MASK, DMA_EARS_EDREQ_8(value)))
#define DMA_BWR_EARS_EDREQ_8(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_8_SHIFT), DMA_EARS_EDREQ_8_SHIFT, DMA_EARS_EDREQ_8_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_9[9] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 9.
 * - 0b1 - Enable asynchronous DMA request for channel 9.
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_9 field. */
#define DMA_RD_EARS_EDREQ_9(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_9_MASK) >> DMA_EARS_EDREQ_9_SHIFT)
#define DMA_BRD_EARS_EDREQ_9(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_9_SHIFT, DMA_EARS_EDREQ_9_WIDTH))

/*! @brief Set the EDREQ_9 field to a new value. */
#define DMA_WR_EARS_EDREQ_9(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_9_MASK, DMA_EARS_EDREQ_9(value)))
#define DMA_BWR_EARS_EDREQ_9(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_9_SHIFT), DMA_EARS_EDREQ_9_SHIFT, DMA_EARS_EDREQ_9_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_10[10] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 10.
 * - 0b1 - Enable asynchronous DMA request for channel 10.
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_10 field. */
#define DMA_RD_EARS_EDREQ_10(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_10_MASK) >> DMA_EARS_EDREQ_10_SHIFT)
#define DMA_BRD_EARS_EDREQ_10(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_10_SHIFT, DMA_EARS_EDREQ_10_WIDTH))

/*! @brief Set the EDREQ_10 field to a new value. */
#define DMA_WR_EARS_EDREQ_10(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_10_MASK, DMA_EARS_EDREQ_10(value)))
#define DMA_BWR_EARS_EDREQ_10(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_10_SHIFT), DMA_EARS_EDREQ_10_SHIFT, DMA_EARS_EDREQ_10_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_11[11] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 11.
 * - 0b1 - Enable asynchronous DMA request for channel 11.
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_11 field. */
#define DMA_RD_EARS_EDREQ_11(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_11_MASK) >> DMA_EARS_EDREQ_11_SHIFT)
#define DMA_BRD_EARS_EDREQ_11(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_11_SHIFT, DMA_EARS_EDREQ_11_WIDTH))

/*! @brief Set the EDREQ_11 field to a new value. */
#define DMA_WR_EARS_EDREQ_11(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_11_MASK, DMA_EARS_EDREQ_11(value)))
#define DMA_BWR_EARS_EDREQ_11(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_11_SHIFT), DMA_EARS_EDREQ_11_SHIFT, DMA_EARS_EDREQ_11_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_12[12] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 12.
 * - 0b1 - Enable asynchronous DMA request for channel 12.
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_12 field. */
#define DMA_RD_EARS_EDREQ_12(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_12_MASK) >> DMA_EARS_EDREQ_12_SHIFT)
#define DMA_BRD_EARS_EDREQ_12(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_12_SHIFT, DMA_EARS_EDREQ_12_WIDTH))

/*! @brief Set the EDREQ_12 field to a new value. */
#define DMA_WR_EARS_EDREQ_12(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_12_MASK, DMA_EARS_EDREQ_12(value)))
#define DMA_BWR_EARS_EDREQ_12(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_12_SHIFT), DMA_EARS_EDREQ_12_SHIFT, DMA_EARS_EDREQ_12_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_13[13] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 13.
 * - 0b1 - Enable asynchronous DMA request for channel 13.
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_13 field. */
#define DMA_RD_EARS_EDREQ_13(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_13_MASK) >> DMA_EARS_EDREQ_13_SHIFT)
#define DMA_BRD_EARS_EDREQ_13(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_13_SHIFT, DMA_EARS_EDREQ_13_WIDTH))

/*! @brief Set the EDREQ_13 field to a new value. */
#define DMA_WR_EARS_EDREQ_13(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_13_MASK, DMA_EARS_EDREQ_13(value)))
#define DMA_BWR_EARS_EDREQ_13(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_13_SHIFT), DMA_EARS_EDREQ_13_SHIFT, DMA_EARS_EDREQ_13_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_14[14] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 14.
 * - 0b1 - Enable asynchronous DMA request for channel 14.
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_14 field. */
#define DMA_RD_EARS_EDREQ_14(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_14_MASK) >> DMA_EARS_EDREQ_14_SHIFT)
#define DMA_BRD_EARS_EDREQ_14(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_14_SHIFT, DMA_EARS_EDREQ_14_WIDTH))

/*! @brief Set the EDREQ_14 field to a new value. */
#define DMA_WR_EARS_EDREQ_14(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_14_MASK, DMA_EARS_EDREQ_14(value)))
#define DMA_BWR_EARS_EDREQ_14(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_14_SHIFT), DMA_EARS_EDREQ_14_SHIFT, DMA_EARS_EDREQ_14_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_15[15] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 15.
 * - 0b1 - Enable asynchronous DMA request for channel 15.
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_15 field. */
#define DMA_RD_EARS_EDREQ_15(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_15_MASK) >> DMA_EARS_EDREQ_15_SHIFT)
#define DMA_BRD_EARS_EDREQ_15(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_15_SHIFT, DMA_EARS_EDREQ_15_WIDTH))

/*! @brief Set the EDREQ_15 field to a new value. */
#define DMA_WR_EARS_EDREQ_15(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_15_MASK, DMA_EARS_EDREQ_15(value)))
#define DMA_BWR_EARS_EDREQ_15(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_15_SHIFT), DMA_EARS_EDREQ_15_SHIFT, DMA_EARS_EDREQ_15_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_16[16] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 16
 * - 0b1 - Enable asynchronous DMA request for channel 16
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_16 field. */
#define DMA_RD_EARS_EDREQ_16(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_16_MASK) >> DMA_EARS_EDREQ_16_SHIFT)
#define DMA_BRD_EARS_EDREQ_16(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_16_SHIFT, DMA_EARS_EDREQ_16_WIDTH))

/*! @brief Set the EDREQ_16 field to a new value. */
#define DMA_WR_EARS_EDREQ_16(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_16_MASK, DMA_EARS_EDREQ_16(value)))
#define DMA_BWR_EARS_EDREQ_16(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_16_SHIFT), DMA_EARS_EDREQ_16_SHIFT, DMA_EARS_EDREQ_16_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_17[17] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 17
 * - 0b1 - Enable asynchronous DMA request for channel 17
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_17 field. */
#define DMA_RD_EARS_EDREQ_17(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_17_MASK) >> DMA_EARS_EDREQ_17_SHIFT)
#define DMA_BRD_EARS_EDREQ_17(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_17_SHIFT, DMA_EARS_EDREQ_17_WIDTH))

/*! @brief Set the EDREQ_17 field to a new value. */
#define DMA_WR_EARS_EDREQ_17(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_17_MASK, DMA_EARS_EDREQ_17(value)))
#define DMA_BWR_EARS_EDREQ_17(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_17_SHIFT), DMA_EARS_EDREQ_17_SHIFT, DMA_EARS_EDREQ_17_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_18[18] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 18
 * - 0b1 - Enable asynchronous DMA request for channel 18
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_18 field. */
#define DMA_RD_EARS_EDREQ_18(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_18_MASK) >> DMA_EARS_EDREQ_18_SHIFT)
#define DMA_BRD_EARS_EDREQ_18(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_18_SHIFT, DMA_EARS_EDREQ_18_WIDTH))

/*! @brief Set the EDREQ_18 field to a new value. */
#define DMA_WR_EARS_EDREQ_18(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_18_MASK, DMA_EARS_EDREQ_18(value)))
#define DMA_BWR_EARS_EDREQ_18(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_18_SHIFT), DMA_EARS_EDREQ_18_SHIFT, DMA_EARS_EDREQ_18_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_19[19] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 19
 * - 0b1 - Enable asynchronous DMA request for channel 19
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_19 field. */
#define DMA_RD_EARS_EDREQ_19(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_19_MASK) >> DMA_EARS_EDREQ_19_SHIFT)
#define DMA_BRD_EARS_EDREQ_19(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_19_SHIFT, DMA_EARS_EDREQ_19_WIDTH))

/*! @brief Set the EDREQ_19 field to a new value. */
#define DMA_WR_EARS_EDREQ_19(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_19_MASK, DMA_EARS_EDREQ_19(value)))
#define DMA_BWR_EARS_EDREQ_19(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_19_SHIFT), DMA_EARS_EDREQ_19_SHIFT, DMA_EARS_EDREQ_19_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_20[20] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 20
 * - 0b1 - Enable asynchronous DMA request for channel 20
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_20 field. */
#define DMA_RD_EARS_EDREQ_20(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_20_MASK) >> DMA_EARS_EDREQ_20_SHIFT)
#define DMA_BRD_EARS_EDREQ_20(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_20_SHIFT, DMA_EARS_EDREQ_20_WIDTH))

/*! @brief Set the EDREQ_20 field to a new value. */
#define DMA_WR_EARS_EDREQ_20(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_20_MASK, DMA_EARS_EDREQ_20(value)))
#define DMA_BWR_EARS_EDREQ_20(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_20_SHIFT), DMA_EARS_EDREQ_20_SHIFT, DMA_EARS_EDREQ_20_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_21[21] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 21
 * - 0b1 - Enable asynchronous DMA request for channel 21
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_21 field. */
#define DMA_RD_EARS_EDREQ_21(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_21_MASK) >> DMA_EARS_EDREQ_21_SHIFT)
#define DMA_BRD_EARS_EDREQ_21(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_21_SHIFT, DMA_EARS_EDREQ_21_WIDTH))

/*! @brief Set the EDREQ_21 field to a new value. */
#define DMA_WR_EARS_EDREQ_21(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_21_MASK, DMA_EARS_EDREQ_21(value)))
#define DMA_BWR_EARS_EDREQ_21(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_21_SHIFT), DMA_EARS_EDREQ_21_SHIFT, DMA_EARS_EDREQ_21_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_22[22] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 22
 * - 0b1 - Enable asynchronous DMA request for channel 22
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_22 field. */
#define DMA_RD_EARS_EDREQ_22(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_22_MASK) >> DMA_EARS_EDREQ_22_SHIFT)
#define DMA_BRD_EARS_EDREQ_22(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_22_SHIFT, DMA_EARS_EDREQ_22_WIDTH))

/*! @brief Set the EDREQ_22 field to a new value. */
#define DMA_WR_EARS_EDREQ_22(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_22_MASK, DMA_EARS_EDREQ_22(value)))
#define DMA_BWR_EARS_EDREQ_22(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_22_SHIFT), DMA_EARS_EDREQ_22_SHIFT, DMA_EARS_EDREQ_22_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_23[23] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 23
 * - 0b1 - Enable asynchronous DMA request for channel 23
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_23 field. */
#define DMA_RD_EARS_EDREQ_23(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_23_MASK) >> DMA_EARS_EDREQ_23_SHIFT)
#define DMA_BRD_EARS_EDREQ_23(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_23_SHIFT, DMA_EARS_EDREQ_23_WIDTH))

/*! @brief Set the EDREQ_23 field to a new value. */
#define DMA_WR_EARS_EDREQ_23(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_23_MASK, DMA_EARS_EDREQ_23(value)))
#define DMA_BWR_EARS_EDREQ_23(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_23_SHIFT), DMA_EARS_EDREQ_23_SHIFT, DMA_EARS_EDREQ_23_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_24[24] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 24
 * - 0b1 - Enable asynchronous DMA request for channel 24
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_24 field. */
#define DMA_RD_EARS_EDREQ_24(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_24_MASK) >> DMA_EARS_EDREQ_24_SHIFT)
#define DMA_BRD_EARS_EDREQ_24(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_24_SHIFT, DMA_EARS_EDREQ_24_WIDTH))

/*! @brief Set the EDREQ_24 field to a new value. */
#define DMA_WR_EARS_EDREQ_24(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_24_MASK, DMA_EARS_EDREQ_24(value)))
#define DMA_BWR_EARS_EDREQ_24(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_24_SHIFT), DMA_EARS_EDREQ_24_SHIFT, DMA_EARS_EDREQ_24_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_25[25] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 25
 * - 0b1 - Enable asynchronous DMA request for channel 25
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_25 field. */
#define DMA_RD_EARS_EDREQ_25(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_25_MASK) >> DMA_EARS_EDREQ_25_SHIFT)
#define DMA_BRD_EARS_EDREQ_25(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_25_SHIFT, DMA_EARS_EDREQ_25_WIDTH))

/*! @brief Set the EDREQ_25 field to a new value. */
#define DMA_WR_EARS_EDREQ_25(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_25_MASK, DMA_EARS_EDREQ_25(value)))
#define DMA_BWR_EARS_EDREQ_25(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_25_SHIFT), DMA_EARS_EDREQ_25_SHIFT, DMA_EARS_EDREQ_25_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_26[26] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 26
 * - 0b1 - Enable asynchronous DMA request for channel 26
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_26 field. */
#define DMA_RD_EARS_EDREQ_26(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_26_MASK) >> DMA_EARS_EDREQ_26_SHIFT)
#define DMA_BRD_EARS_EDREQ_26(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_26_SHIFT, DMA_EARS_EDREQ_26_WIDTH))

/*! @brief Set the EDREQ_26 field to a new value. */
#define DMA_WR_EARS_EDREQ_26(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_26_MASK, DMA_EARS_EDREQ_26(value)))
#define DMA_BWR_EARS_EDREQ_26(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_26_SHIFT), DMA_EARS_EDREQ_26_SHIFT, DMA_EARS_EDREQ_26_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_27[27] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 27
 * - 0b1 - Enable asynchronous DMA request for channel 27
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_27 field. */
#define DMA_RD_EARS_EDREQ_27(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_27_MASK) >> DMA_EARS_EDREQ_27_SHIFT)
#define DMA_BRD_EARS_EDREQ_27(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_27_SHIFT, DMA_EARS_EDREQ_27_WIDTH))

/*! @brief Set the EDREQ_27 field to a new value. */
#define DMA_WR_EARS_EDREQ_27(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_27_MASK, DMA_EARS_EDREQ_27(value)))
#define DMA_BWR_EARS_EDREQ_27(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_27_SHIFT), DMA_EARS_EDREQ_27_SHIFT, DMA_EARS_EDREQ_27_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_28[28] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 28
 * - 0b1 - Enable asynchronous DMA request for channel 28
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_28 field. */
#define DMA_RD_EARS_EDREQ_28(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_28_MASK) >> DMA_EARS_EDREQ_28_SHIFT)
#define DMA_BRD_EARS_EDREQ_28(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_28_SHIFT, DMA_EARS_EDREQ_28_WIDTH))

/*! @brief Set the EDREQ_28 field to a new value. */
#define DMA_WR_EARS_EDREQ_28(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_28_MASK, DMA_EARS_EDREQ_28(value)))
#define DMA_BWR_EARS_EDREQ_28(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_28_SHIFT), DMA_EARS_EDREQ_28_SHIFT, DMA_EARS_EDREQ_28_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_29[29] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 29
 * - 0b1 - Enable asynchronous DMA request for channel 29
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_29 field. */
#define DMA_RD_EARS_EDREQ_29(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_29_MASK) >> DMA_EARS_EDREQ_29_SHIFT)
#define DMA_BRD_EARS_EDREQ_29(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_29_SHIFT, DMA_EARS_EDREQ_29_WIDTH))

/*! @brief Set the EDREQ_29 field to a new value. */
#define DMA_WR_EARS_EDREQ_29(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_29_MASK, DMA_EARS_EDREQ_29(value)))
#define DMA_BWR_EARS_EDREQ_29(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_29_SHIFT), DMA_EARS_EDREQ_29_SHIFT, DMA_EARS_EDREQ_29_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_30[30] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 30
 * - 0b1 - Enable asynchronous DMA request for channel 30
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_30 field. */
#define DMA_RD_EARS_EDREQ_30(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_30_MASK) >> DMA_EARS_EDREQ_30_SHIFT)
#define DMA_BRD_EARS_EDREQ_30(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_30_SHIFT, DMA_EARS_EDREQ_30_WIDTH))

/*! @brief Set the EDREQ_30 field to a new value. */
#define DMA_WR_EARS_EDREQ_30(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_30_MASK, DMA_EARS_EDREQ_30(value)))
#define DMA_BWR_EARS_EDREQ_30(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_30_SHIFT), DMA_EARS_EDREQ_30_SHIFT, DMA_EARS_EDREQ_30_WIDTH))
/*@}*/

/*!
 * @name Register DMA_EARS, field EDREQ_31[31] (RW)
 *
 * Values:
 * - 0b0 - Disable asynchronous DMA request for channel 31
 * - 0b1 - Enable asynchronous DMA request for channel 31
 */
/*@{*/
/*! @brief Read current value of the DMA_EARS_EDREQ_31 field. */
#define DMA_RD_EARS_EDREQ_31(base) ((DMA_EARS_REG(base) & DMA_EARS_EDREQ_31_MASK) >> DMA_EARS_EDREQ_31_SHIFT)
#define DMA_BRD_EARS_EDREQ_31(base) (BME_UBFX32(&DMA_EARS_REG(base), DMA_EARS_EDREQ_31_SHIFT, DMA_EARS_EDREQ_31_WIDTH))

/*! @brief Set the EDREQ_31 field to a new value. */
#define DMA_WR_EARS_EDREQ_31(base, value) (DMA_RMW_EARS(base, DMA_EARS_EDREQ_31_MASK, DMA_EARS_EDREQ_31(value)))
#define DMA_BWR_EARS_EDREQ_31(base, value) (BME_BFI32(&DMA_EARS_REG(base), ((uint32_t)(value) << DMA_EARS_EDREQ_31_SHIFT), DMA_EARS_EDREQ_31_SHIFT, DMA_EARS_EDREQ_31_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI3 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI3 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI3 register
 */
/*@{*/
#define DMA_RD_DCHPRI3(base)     (DMA_DCHPRI3_REG(base))
#define DMA_WR_DCHPRI3(base, value) (DMA_DCHPRI3_REG(base) = (value))
#define DMA_RMW_DCHPRI3(base, mask, value) (DMA_WR_DCHPRI3(base, (DMA_RD_DCHPRI3(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI3(base, value) (BME_OR8(&DMA_DCHPRI3_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI3(base, value) (BME_AND8(&DMA_DCHPRI3_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI3(base, value) (BME_XOR8(&DMA_DCHPRI3_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI3 bitfields
 */

/*!
 * @name Register DMA_DCHPRI3, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI3_CHPRI field. */
#define DMA_RD_DCHPRI3_CHPRI(base) ((DMA_DCHPRI3_REG(base) & DMA_DCHPRI3_CHPRI_MASK) >> DMA_DCHPRI3_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI3_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI3_REG(base), DMA_DCHPRI3_CHPRI_SHIFT, DMA_DCHPRI3_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI3_CHPRI(base, value) (DMA_RMW_DCHPRI3(base, DMA_DCHPRI3_CHPRI_MASK, DMA_DCHPRI3_CHPRI(value)))
#define DMA_BWR_DCHPRI3_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI3_REG(base), ((uint8_t)(value) << DMA_DCHPRI3_CHPRI_SHIFT), DMA_DCHPRI3_CHPRI_SHIFT, DMA_DCHPRI3_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI3, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI3_GRPPRI field. */
#define DMA_RD_DCHPRI3_GRPPRI(base) ((DMA_DCHPRI3_REG(base) & DMA_DCHPRI3_GRPPRI_MASK) >> DMA_DCHPRI3_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI3_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI3_REG(base), DMA_DCHPRI3_GRPPRI_SHIFT, DMA_DCHPRI3_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI3, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI3_DPA field. */
#define DMA_RD_DCHPRI3_DPA(base) ((DMA_DCHPRI3_REG(base) & DMA_DCHPRI3_DPA_MASK) >> DMA_DCHPRI3_DPA_SHIFT)
#define DMA_BRD_DCHPRI3_DPA(base) (BME_UBFX8(&DMA_DCHPRI3_REG(base), DMA_DCHPRI3_DPA_SHIFT, DMA_DCHPRI3_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI3_DPA(base, value) (DMA_RMW_DCHPRI3(base, DMA_DCHPRI3_DPA_MASK, DMA_DCHPRI3_DPA(value)))
#define DMA_BWR_DCHPRI3_DPA(base, value) (BME_BFI8(&DMA_DCHPRI3_REG(base), ((uint8_t)(value) << DMA_DCHPRI3_DPA_SHIFT), DMA_DCHPRI3_DPA_SHIFT, DMA_DCHPRI3_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI3, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI3_ECP field. */
#define DMA_RD_DCHPRI3_ECP(base) ((DMA_DCHPRI3_REG(base) & DMA_DCHPRI3_ECP_MASK) >> DMA_DCHPRI3_ECP_SHIFT)
#define DMA_BRD_DCHPRI3_ECP(base) (BME_UBFX8(&DMA_DCHPRI3_REG(base), DMA_DCHPRI3_ECP_SHIFT, DMA_DCHPRI3_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI3_ECP(base, value) (DMA_RMW_DCHPRI3(base, DMA_DCHPRI3_ECP_MASK, DMA_DCHPRI3_ECP(value)))
#define DMA_BWR_DCHPRI3_ECP(base, value) (BME_BFI8(&DMA_DCHPRI3_REG(base), ((uint8_t)(value) << DMA_DCHPRI3_ECP_SHIFT), DMA_DCHPRI3_ECP_SHIFT, DMA_DCHPRI3_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI2 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI2 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI2 register
 */
/*@{*/
#define DMA_RD_DCHPRI2(base)     (DMA_DCHPRI2_REG(base))
#define DMA_WR_DCHPRI2(base, value) (DMA_DCHPRI2_REG(base) = (value))
#define DMA_RMW_DCHPRI2(base, mask, value) (DMA_WR_DCHPRI2(base, (DMA_RD_DCHPRI2(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI2(base, value) (BME_OR8(&DMA_DCHPRI2_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI2(base, value) (BME_AND8(&DMA_DCHPRI2_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI2(base, value) (BME_XOR8(&DMA_DCHPRI2_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI2 bitfields
 */

/*!
 * @name Register DMA_DCHPRI2, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI2_CHPRI field. */
#define DMA_RD_DCHPRI2_CHPRI(base) ((DMA_DCHPRI2_REG(base) & DMA_DCHPRI2_CHPRI_MASK) >> DMA_DCHPRI2_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI2_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI2_REG(base), DMA_DCHPRI2_CHPRI_SHIFT, DMA_DCHPRI2_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI2_CHPRI(base, value) (DMA_RMW_DCHPRI2(base, DMA_DCHPRI2_CHPRI_MASK, DMA_DCHPRI2_CHPRI(value)))
#define DMA_BWR_DCHPRI2_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI2_REG(base), ((uint8_t)(value) << DMA_DCHPRI2_CHPRI_SHIFT), DMA_DCHPRI2_CHPRI_SHIFT, DMA_DCHPRI2_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI2, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI2_GRPPRI field. */
#define DMA_RD_DCHPRI2_GRPPRI(base) ((DMA_DCHPRI2_REG(base) & DMA_DCHPRI2_GRPPRI_MASK) >> DMA_DCHPRI2_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI2_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI2_REG(base), DMA_DCHPRI2_GRPPRI_SHIFT, DMA_DCHPRI2_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI2, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI2_DPA field. */
#define DMA_RD_DCHPRI2_DPA(base) ((DMA_DCHPRI2_REG(base) & DMA_DCHPRI2_DPA_MASK) >> DMA_DCHPRI2_DPA_SHIFT)
#define DMA_BRD_DCHPRI2_DPA(base) (BME_UBFX8(&DMA_DCHPRI2_REG(base), DMA_DCHPRI2_DPA_SHIFT, DMA_DCHPRI2_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI2_DPA(base, value) (DMA_RMW_DCHPRI2(base, DMA_DCHPRI2_DPA_MASK, DMA_DCHPRI2_DPA(value)))
#define DMA_BWR_DCHPRI2_DPA(base, value) (BME_BFI8(&DMA_DCHPRI2_REG(base), ((uint8_t)(value) << DMA_DCHPRI2_DPA_SHIFT), DMA_DCHPRI2_DPA_SHIFT, DMA_DCHPRI2_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI2, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI2_ECP field. */
#define DMA_RD_DCHPRI2_ECP(base) ((DMA_DCHPRI2_REG(base) & DMA_DCHPRI2_ECP_MASK) >> DMA_DCHPRI2_ECP_SHIFT)
#define DMA_BRD_DCHPRI2_ECP(base) (BME_UBFX8(&DMA_DCHPRI2_REG(base), DMA_DCHPRI2_ECP_SHIFT, DMA_DCHPRI2_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI2_ECP(base, value) (DMA_RMW_DCHPRI2(base, DMA_DCHPRI2_ECP_MASK, DMA_DCHPRI2_ECP(value)))
#define DMA_BWR_DCHPRI2_ECP(base, value) (BME_BFI8(&DMA_DCHPRI2_REG(base), ((uint8_t)(value) << DMA_DCHPRI2_ECP_SHIFT), DMA_DCHPRI2_ECP_SHIFT, DMA_DCHPRI2_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI1 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI1 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI1 register
 */
/*@{*/
#define DMA_RD_DCHPRI1(base)     (DMA_DCHPRI1_REG(base))
#define DMA_WR_DCHPRI1(base, value) (DMA_DCHPRI1_REG(base) = (value))
#define DMA_RMW_DCHPRI1(base, mask, value) (DMA_WR_DCHPRI1(base, (DMA_RD_DCHPRI1(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI1(base, value) (BME_OR8(&DMA_DCHPRI1_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI1(base, value) (BME_AND8(&DMA_DCHPRI1_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI1(base, value) (BME_XOR8(&DMA_DCHPRI1_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI1 bitfields
 */

/*!
 * @name Register DMA_DCHPRI1, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI1_CHPRI field. */
#define DMA_RD_DCHPRI1_CHPRI(base) ((DMA_DCHPRI1_REG(base) & DMA_DCHPRI1_CHPRI_MASK) >> DMA_DCHPRI1_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI1_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI1_REG(base), DMA_DCHPRI1_CHPRI_SHIFT, DMA_DCHPRI1_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI1_CHPRI(base, value) (DMA_RMW_DCHPRI1(base, DMA_DCHPRI1_CHPRI_MASK, DMA_DCHPRI1_CHPRI(value)))
#define DMA_BWR_DCHPRI1_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI1_REG(base), ((uint8_t)(value) << DMA_DCHPRI1_CHPRI_SHIFT), DMA_DCHPRI1_CHPRI_SHIFT, DMA_DCHPRI1_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI1, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI1_GRPPRI field. */
#define DMA_RD_DCHPRI1_GRPPRI(base) ((DMA_DCHPRI1_REG(base) & DMA_DCHPRI1_GRPPRI_MASK) >> DMA_DCHPRI1_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI1_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI1_REG(base), DMA_DCHPRI1_GRPPRI_SHIFT, DMA_DCHPRI1_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI1, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI1_DPA field. */
#define DMA_RD_DCHPRI1_DPA(base) ((DMA_DCHPRI1_REG(base) & DMA_DCHPRI1_DPA_MASK) >> DMA_DCHPRI1_DPA_SHIFT)
#define DMA_BRD_DCHPRI1_DPA(base) (BME_UBFX8(&DMA_DCHPRI1_REG(base), DMA_DCHPRI1_DPA_SHIFT, DMA_DCHPRI1_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI1_DPA(base, value) (DMA_RMW_DCHPRI1(base, DMA_DCHPRI1_DPA_MASK, DMA_DCHPRI1_DPA(value)))
#define DMA_BWR_DCHPRI1_DPA(base, value) (BME_BFI8(&DMA_DCHPRI1_REG(base), ((uint8_t)(value) << DMA_DCHPRI1_DPA_SHIFT), DMA_DCHPRI1_DPA_SHIFT, DMA_DCHPRI1_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI1, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI1_ECP field. */
#define DMA_RD_DCHPRI1_ECP(base) ((DMA_DCHPRI1_REG(base) & DMA_DCHPRI1_ECP_MASK) >> DMA_DCHPRI1_ECP_SHIFT)
#define DMA_BRD_DCHPRI1_ECP(base) (BME_UBFX8(&DMA_DCHPRI1_REG(base), DMA_DCHPRI1_ECP_SHIFT, DMA_DCHPRI1_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI1_ECP(base, value) (DMA_RMW_DCHPRI1(base, DMA_DCHPRI1_ECP_MASK, DMA_DCHPRI1_ECP(value)))
#define DMA_BWR_DCHPRI1_ECP(base, value) (BME_BFI8(&DMA_DCHPRI1_REG(base), ((uint8_t)(value) << DMA_DCHPRI1_ECP_SHIFT), DMA_DCHPRI1_ECP_SHIFT, DMA_DCHPRI1_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI0 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI0 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI0 register
 */
/*@{*/
#define DMA_RD_DCHPRI0(base)     (DMA_DCHPRI0_REG(base))
#define DMA_WR_DCHPRI0(base, value) (DMA_DCHPRI0_REG(base) = (value))
#define DMA_RMW_DCHPRI0(base, mask, value) (DMA_WR_DCHPRI0(base, (DMA_RD_DCHPRI0(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI0(base, value) (BME_OR8(&DMA_DCHPRI0_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI0(base, value) (BME_AND8(&DMA_DCHPRI0_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI0(base, value) (BME_XOR8(&DMA_DCHPRI0_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI0 bitfields
 */

/*!
 * @name Register DMA_DCHPRI0, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI0_CHPRI field. */
#define DMA_RD_DCHPRI0_CHPRI(base) ((DMA_DCHPRI0_REG(base) & DMA_DCHPRI0_CHPRI_MASK) >> DMA_DCHPRI0_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI0_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI0_REG(base), DMA_DCHPRI0_CHPRI_SHIFT, DMA_DCHPRI0_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI0_CHPRI(base, value) (DMA_RMW_DCHPRI0(base, DMA_DCHPRI0_CHPRI_MASK, DMA_DCHPRI0_CHPRI(value)))
#define DMA_BWR_DCHPRI0_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI0_REG(base), ((uint8_t)(value) << DMA_DCHPRI0_CHPRI_SHIFT), DMA_DCHPRI0_CHPRI_SHIFT, DMA_DCHPRI0_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI0, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI0_GRPPRI field. */
#define DMA_RD_DCHPRI0_GRPPRI(base) ((DMA_DCHPRI0_REG(base) & DMA_DCHPRI0_GRPPRI_MASK) >> DMA_DCHPRI0_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI0_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI0_REG(base), DMA_DCHPRI0_GRPPRI_SHIFT, DMA_DCHPRI0_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI0, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI0_DPA field. */
#define DMA_RD_DCHPRI0_DPA(base) ((DMA_DCHPRI0_REG(base) & DMA_DCHPRI0_DPA_MASK) >> DMA_DCHPRI0_DPA_SHIFT)
#define DMA_BRD_DCHPRI0_DPA(base) (BME_UBFX8(&DMA_DCHPRI0_REG(base), DMA_DCHPRI0_DPA_SHIFT, DMA_DCHPRI0_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI0_DPA(base, value) (DMA_RMW_DCHPRI0(base, DMA_DCHPRI0_DPA_MASK, DMA_DCHPRI0_DPA(value)))
#define DMA_BWR_DCHPRI0_DPA(base, value) (BME_BFI8(&DMA_DCHPRI0_REG(base), ((uint8_t)(value) << DMA_DCHPRI0_DPA_SHIFT), DMA_DCHPRI0_DPA_SHIFT, DMA_DCHPRI0_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI0, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI0_ECP field. */
#define DMA_RD_DCHPRI0_ECP(base) ((DMA_DCHPRI0_REG(base) & DMA_DCHPRI0_ECP_MASK) >> DMA_DCHPRI0_ECP_SHIFT)
#define DMA_BRD_DCHPRI0_ECP(base) (BME_UBFX8(&DMA_DCHPRI0_REG(base), DMA_DCHPRI0_ECP_SHIFT, DMA_DCHPRI0_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI0_ECP(base, value) (DMA_RMW_DCHPRI0(base, DMA_DCHPRI0_ECP_MASK, DMA_DCHPRI0_ECP(value)))
#define DMA_BWR_DCHPRI0_ECP(base, value) (BME_BFI8(&DMA_DCHPRI0_REG(base), ((uint8_t)(value) << DMA_DCHPRI0_ECP_SHIFT), DMA_DCHPRI0_ECP_SHIFT, DMA_DCHPRI0_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI7 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI7 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI7 register
 */
/*@{*/
#define DMA_RD_DCHPRI7(base)     (DMA_DCHPRI7_REG(base))
#define DMA_WR_DCHPRI7(base, value) (DMA_DCHPRI7_REG(base) = (value))
#define DMA_RMW_DCHPRI7(base, mask, value) (DMA_WR_DCHPRI7(base, (DMA_RD_DCHPRI7(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI7(base, value) (BME_OR8(&DMA_DCHPRI7_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI7(base, value) (BME_AND8(&DMA_DCHPRI7_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI7(base, value) (BME_XOR8(&DMA_DCHPRI7_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI7 bitfields
 */

/*!
 * @name Register DMA_DCHPRI7, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI7_CHPRI field. */
#define DMA_RD_DCHPRI7_CHPRI(base) ((DMA_DCHPRI7_REG(base) & DMA_DCHPRI7_CHPRI_MASK) >> DMA_DCHPRI7_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI7_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI7_REG(base), DMA_DCHPRI7_CHPRI_SHIFT, DMA_DCHPRI7_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI7_CHPRI(base, value) (DMA_RMW_DCHPRI7(base, DMA_DCHPRI7_CHPRI_MASK, DMA_DCHPRI7_CHPRI(value)))
#define DMA_BWR_DCHPRI7_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI7_REG(base), ((uint8_t)(value) << DMA_DCHPRI7_CHPRI_SHIFT), DMA_DCHPRI7_CHPRI_SHIFT, DMA_DCHPRI7_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI7, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI7_GRPPRI field. */
#define DMA_RD_DCHPRI7_GRPPRI(base) ((DMA_DCHPRI7_REG(base) & DMA_DCHPRI7_GRPPRI_MASK) >> DMA_DCHPRI7_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI7_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI7_REG(base), DMA_DCHPRI7_GRPPRI_SHIFT, DMA_DCHPRI7_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI7, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI7_DPA field. */
#define DMA_RD_DCHPRI7_DPA(base) ((DMA_DCHPRI7_REG(base) & DMA_DCHPRI7_DPA_MASK) >> DMA_DCHPRI7_DPA_SHIFT)
#define DMA_BRD_DCHPRI7_DPA(base) (BME_UBFX8(&DMA_DCHPRI7_REG(base), DMA_DCHPRI7_DPA_SHIFT, DMA_DCHPRI7_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI7_DPA(base, value) (DMA_RMW_DCHPRI7(base, DMA_DCHPRI7_DPA_MASK, DMA_DCHPRI7_DPA(value)))
#define DMA_BWR_DCHPRI7_DPA(base, value) (BME_BFI8(&DMA_DCHPRI7_REG(base), ((uint8_t)(value) << DMA_DCHPRI7_DPA_SHIFT), DMA_DCHPRI7_DPA_SHIFT, DMA_DCHPRI7_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI7, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI7_ECP field. */
#define DMA_RD_DCHPRI7_ECP(base) ((DMA_DCHPRI7_REG(base) & DMA_DCHPRI7_ECP_MASK) >> DMA_DCHPRI7_ECP_SHIFT)
#define DMA_BRD_DCHPRI7_ECP(base) (BME_UBFX8(&DMA_DCHPRI7_REG(base), DMA_DCHPRI7_ECP_SHIFT, DMA_DCHPRI7_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI7_ECP(base, value) (DMA_RMW_DCHPRI7(base, DMA_DCHPRI7_ECP_MASK, DMA_DCHPRI7_ECP(value)))
#define DMA_BWR_DCHPRI7_ECP(base, value) (BME_BFI8(&DMA_DCHPRI7_REG(base), ((uint8_t)(value) << DMA_DCHPRI7_ECP_SHIFT), DMA_DCHPRI7_ECP_SHIFT, DMA_DCHPRI7_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI6 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI6 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI6 register
 */
/*@{*/
#define DMA_RD_DCHPRI6(base)     (DMA_DCHPRI6_REG(base))
#define DMA_WR_DCHPRI6(base, value) (DMA_DCHPRI6_REG(base) = (value))
#define DMA_RMW_DCHPRI6(base, mask, value) (DMA_WR_DCHPRI6(base, (DMA_RD_DCHPRI6(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI6(base, value) (BME_OR8(&DMA_DCHPRI6_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI6(base, value) (BME_AND8(&DMA_DCHPRI6_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI6(base, value) (BME_XOR8(&DMA_DCHPRI6_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI6 bitfields
 */

/*!
 * @name Register DMA_DCHPRI6, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI6_CHPRI field. */
#define DMA_RD_DCHPRI6_CHPRI(base) ((DMA_DCHPRI6_REG(base) & DMA_DCHPRI6_CHPRI_MASK) >> DMA_DCHPRI6_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI6_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI6_REG(base), DMA_DCHPRI6_CHPRI_SHIFT, DMA_DCHPRI6_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI6_CHPRI(base, value) (DMA_RMW_DCHPRI6(base, DMA_DCHPRI6_CHPRI_MASK, DMA_DCHPRI6_CHPRI(value)))
#define DMA_BWR_DCHPRI6_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI6_REG(base), ((uint8_t)(value) << DMA_DCHPRI6_CHPRI_SHIFT), DMA_DCHPRI6_CHPRI_SHIFT, DMA_DCHPRI6_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI6, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI6_GRPPRI field. */
#define DMA_RD_DCHPRI6_GRPPRI(base) ((DMA_DCHPRI6_REG(base) & DMA_DCHPRI6_GRPPRI_MASK) >> DMA_DCHPRI6_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI6_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI6_REG(base), DMA_DCHPRI6_GRPPRI_SHIFT, DMA_DCHPRI6_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI6, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI6_DPA field. */
#define DMA_RD_DCHPRI6_DPA(base) ((DMA_DCHPRI6_REG(base) & DMA_DCHPRI6_DPA_MASK) >> DMA_DCHPRI6_DPA_SHIFT)
#define DMA_BRD_DCHPRI6_DPA(base) (BME_UBFX8(&DMA_DCHPRI6_REG(base), DMA_DCHPRI6_DPA_SHIFT, DMA_DCHPRI6_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI6_DPA(base, value) (DMA_RMW_DCHPRI6(base, DMA_DCHPRI6_DPA_MASK, DMA_DCHPRI6_DPA(value)))
#define DMA_BWR_DCHPRI6_DPA(base, value) (BME_BFI8(&DMA_DCHPRI6_REG(base), ((uint8_t)(value) << DMA_DCHPRI6_DPA_SHIFT), DMA_DCHPRI6_DPA_SHIFT, DMA_DCHPRI6_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI6, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI6_ECP field. */
#define DMA_RD_DCHPRI6_ECP(base) ((DMA_DCHPRI6_REG(base) & DMA_DCHPRI6_ECP_MASK) >> DMA_DCHPRI6_ECP_SHIFT)
#define DMA_BRD_DCHPRI6_ECP(base) (BME_UBFX8(&DMA_DCHPRI6_REG(base), DMA_DCHPRI6_ECP_SHIFT, DMA_DCHPRI6_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI6_ECP(base, value) (DMA_RMW_DCHPRI6(base, DMA_DCHPRI6_ECP_MASK, DMA_DCHPRI6_ECP(value)))
#define DMA_BWR_DCHPRI6_ECP(base, value) (BME_BFI8(&DMA_DCHPRI6_REG(base), ((uint8_t)(value) << DMA_DCHPRI6_ECP_SHIFT), DMA_DCHPRI6_ECP_SHIFT, DMA_DCHPRI6_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI5 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI5 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI5 register
 */
/*@{*/
#define DMA_RD_DCHPRI5(base)     (DMA_DCHPRI5_REG(base))
#define DMA_WR_DCHPRI5(base, value) (DMA_DCHPRI5_REG(base) = (value))
#define DMA_RMW_DCHPRI5(base, mask, value) (DMA_WR_DCHPRI5(base, (DMA_RD_DCHPRI5(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI5(base, value) (BME_OR8(&DMA_DCHPRI5_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI5(base, value) (BME_AND8(&DMA_DCHPRI5_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI5(base, value) (BME_XOR8(&DMA_DCHPRI5_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI5 bitfields
 */

/*!
 * @name Register DMA_DCHPRI5, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI5_CHPRI field. */
#define DMA_RD_DCHPRI5_CHPRI(base) ((DMA_DCHPRI5_REG(base) & DMA_DCHPRI5_CHPRI_MASK) >> DMA_DCHPRI5_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI5_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI5_REG(base), DMA_DCHPRI5_CHPRI_SHIFT, DMA_DCHPRI5_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI5_CHPRI(base, value) (DMA_RMW_DCHPRI5(base, DMA_DCHPRI5_CHPRI_MASK, DMA_DCHPRI5_CHPRI(value)))
#define DMA_BWR_DCHPRI5_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI5_REG(base), ((uint8_t)(value) << DMA_DCHPRI5_CHPRI_SHIFT), DMA_DCHPRI5_CHPRI_SHIFT, DMA_DCHPRI5_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI5, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI5_GRPPRI field. */
#define DMA_RD_DCHPRI5_GRPPRI(base) ((DMA_DCHPRI5_REG(base) & DMA_DCHPRI5_GRPPRI_MASK) >> DMA_DCHPRI5_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI5_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI5_REG(base), DMA_DCHPRI5_GRPPRI_SHIFT, DMA_DCHPRI5_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI5, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI5_DPA field. */
#define DMA_RD_DCHPRI5_DPA(base) ((DMA_DCHPRI5_REG(base) & DMA_DCHPRI5_DPA_MASK) >> DMA_DCHPRI5_DPA_SHIFT)
#define DMA_BRD_DCHPRI5_DPA(base) (BME_UBFX8(&DMA_DCHPRI5_REG(base), DMA_DCHPRI5_DPA_SHIFT, DMA_DCHPRI5_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI5_DPA(base, value) (DMA_RMW_DCHPRI5(base, DMA_DCHPRI5_DPA_MASK, DMA_DCHPRI5_DPA(value)))
#define DMA_BWR_DCHPRI5_DPA(base, value) (BME_BFI8(&DMA_DCHPRI5_REG(base), ((uint8_t)(value) << DMA_DCHPRI5_DPA_SHIFT), DMA_DCHPRI5_DPA_SHIFT, DMA_DCHPRI5_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI5, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI5_ECP field. */
#define DMA_RD_DCHPRI5_ECP(base) ((DMA_DCHPRI5_REG(base) & DMA_DCHPRI5_ECP_MASK) >> DMA_DCHPRI5_ECP_SHIFT)
#define DMA_BRD_DCHPRI5_ECP(base) (BME_UBFX8(&DMA_DCHPRI5_REG(base), DMA_DCHPRI5_ECP_SHIFT, DMA_DCHPRI5_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI5_ECP(base, value) (DMA_RMW_DCHPRI5(base, DMA_DCHPRI5_ECP_MASK, DMA_DCHPRI5_ECP(value)))
#define DMA_BWR_DCHPRI5_ECP(base, value) (BME_BFI8(&DMA_DCHPRI5_REG(base), ((uint8_t)(value) << DMA_DCHPRI5_ECP_SHIFT), DMA_DCHPRI5_ECP_SHIFT, DMA_DCHPRI5_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI4 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI4 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI4 register
 */
/*@{*/
#define DMA_RD_DCHPRI4(base)     (DMA_DCHPRI4_REG(base))
#define DMA_WR_DCHPRI4(base, value) (DMA_DCHPRI4_REG(base) = (value))
#define DMA_RMW_DCHPRI4(base, mask, value) (DMA_WR_DCHPRI4(base, (DMA_RD_DCHPRI4(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI4(base, value) (BME_OR8(&DMA_DCHPRI4_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI4(base, value) (BME_AND8(&DMA_DCHPRI4_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI4(base, value) (BME_XOR8(&DMA_DCHPRI4_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI4 bitfields
 */

/*!
 * @name Register DMA_DCHPRI4, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI4_CHPRI field. */
#define DMA_RD_DCHPRI4_CHPRI(base) ((DMA_DCHPRI4_REG(base) & DMA_DCHPRI4_CHPRI_MASK) >> DMA_DCHPRI4_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI4_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI4_REG(base), DMA_DCHPRI4_CHPRI_SHIFT, DMA_DCHPRI4_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI4_CHPRI(base, value) (DMA_RMW_DCHPRI4(base, DMA_DCHPRI4_CHPRI_MASK, DMA_DCHPRI4_CHPRI(value)))
#define DMA_BWR_DCHPRI4_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI4_REG(base), ((uint8_t)(value) << DMA_DCHPRI4_CHPRI_SHIFT), DMA_DCHPRI4_CHPRI_SHIFT, DMA_DCHPRI4_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI4, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI4_GRPPRI field. */
#define DMA_RD_DCHPRI4_GRPPRI(base) ((DMA_DCHPRI4_REG(base) & DMA_DCHPRI4_GRPPRI_MASK) >> DMA_DCHPRI4_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI4_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI4_REG(base), DMA_DCHPRI4_GRPPRI_SHIFT, DMA_DCHPRI4_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI4, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI4_DPA field. */
#define DMA_RD_DCHPRI4_DPA(base) ((DMA_DCHPRI4_REG(base) & DMA_DCHPRI4_DPA_MASK) >> DMA_DCHPRI4_DPA_SHIFT)
#define DMA_BRD_DCHPRI4_DPA(base) (BME_UBFX8(&DMA_DCHPRI4_REG(base), DMA_DCHPRI4_DPA_SHIFT, DMA_DCHPRI4_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI4_DPA(base, value) (DMA_RMW_DCHPRI4(base, DMA_DCHPRI4_DPA_MASK, DMA_DCHPRI4_DPA(value)))
#define DMA_BWR_DCHPRI4_DPA(base, value) (BME_BFI8(&DMA_DCHPRI4_REG(base), ((uint8_t)(value) << DMA_DCHPRI4_DPA_SHIFT), DMA_DCHPRI4_DPA_SHIFT, DMA_DCHPRI4_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI4, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI4_ECP field. */
#define DMA_RD_DCHPRI4_ECP(base) ((DMA_DCHPRI4_REG(base) & DMA_DCHPRI4_ECP_MASK) >> DMA_DCHPRI4_ECP_SHIFT)
#define DMA_BRD_DCHPRI4_ECP(base) (BME_UBFX8(&DMA_DCHPRI4_REG(base), DMA_DCHPRI4_ECP_SHIFT, DMA_DCHPRI4_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI4_ECP(base, value) (DMA_RMW_DCHPRI4(base, DMA_DCHPRI4_ECP_MASK, DMA_DCHPRI4_ECP(value)))
#define DMA_BWR_DCHPRI4_ECP(base, value) (BME_BFI8(&DMA_DCHPRI4_REG(base), ((uint8_t)(value) << DMA_DCHPRI4_ECP_SHIFT), DMA_DCHPRI4_ECP_SHIFT, DMA_DCHPRI4_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI11 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI11 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI11 register
 */
/*@{*/
#define DMA_RD_DCHPRI11(base)    (DMA_DCHPRI11_REG(base))
#define DMA_WR_DCHPRI11(base, value) (DMA_DCHPRI11_REG(base) = (value))
#define DMA_RMW_DCHPRI11(base, mask, value) (DMA_WR_DCHPRI11(base, (DMA_RD_DCHPRI11(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI11(base, value) (BME_OR8(&DMA_DCHPRI11_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI11(base, value) (BME_AND8(&DMA_DCHPRI11_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI11(base, value) (BME_XOR8(&DMA_DCHPRI11_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI11 bitfields
 */

/*!
 * @name Register DMA_DCHPRI11, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI11_CHPRI field. */
#define DMA_RD_DCHPRI11_CHPRI(base) ((DMA_DCHPRI11_REG(base) & DMA_DCHPRI11_CHPRI_MASK) >> DMA_DCHPRI11_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI11_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI11_REG(base), DMA_DCHPRI11_CHPRI_SHIFT, DMA_DCHPRI11_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI11_CHPRI(base, value) (DMA_RMW_DCHPRI11(base, DMA_DCHPRI11_CHPRI_MASK, DMA_DCHPRI11_CHPRI(value)))
#define DMA_BWR_DCHPRI11_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI11_REG(base), ((uint8_t)(value) << DMA_DCHPRI11_CHPRI_SHIFT), DMA_DCHPRI11_CHPRI_SHIFT, DMA_DCHPRI11_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI11, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI11_GRPPRI field. */
#define DMA_RD_DCHPRI11_GRPPRI(base) ((DMA_DCHPRI11_REG(base) & DMA_DCHPRI11_GRPPRI_MASK) >> DMA_DCHPRI11_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI11_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI11_REG(base), DMA_DCHPRI11_GRPPRI_SHIFT, DMA_DCHPRI11_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI11, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI11_DPA field. */
#define DMA_RD_DCHPRI11_DPA(base) ((DMA_DCHPRI11_REG(base) & DMA_DCHPRI11_DPA_MASK) >> DMA_DCHPRI11_DPA_SHIFT)
#define DMA_BRD_DCHPRI11_DPA(base) (BME_UBFX8(&DMA_DCHPRI11_REG(base), DMA_DCHPRI11_DPA_SHIFT, DMA_DCHPRI11_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI11_DPA(base, value) (DMA_RMW_DCHPRI11(base, DMA_DCHPRI11_DPA_MASK, DMA_DCHPRI11_DPA(value)))
#define DMA_BWR_DCHPRI11_DPA(base, value) (BME_BFI8(&DMA_DCHPRI11_REG(base), ((uint8_t)(value) << DMA_DCHPRI11_DPA_SHIFT), DMA_DCHPRI11_DPA_SHIFT, DMA_DCHPRI11_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI11, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI11_ECP field. */
#define DMA_RD_DCHPRI11_ECP(base) ((DMA_DCHPRI11_REG(base) & DMA_DCHPRI11_ECP_MASK) >> DMA_DCHPRI11_ECP_SHIFT)
#define DMA_BRD_DCHPRI11_ECP(base) (BME_UBFX8(&DMA_DCHPRI11_REG(base), DMA_DCHPRI11_ECP_SHIFT, DMA_DCHPRI11_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI11_ECP(base, value) (DMA_RMW_DCHPRI11(base, DMA_DCHPRI11_ECP_MASK, DMA_DCHPRI11_ECP(value)))
#define DMA_BWR_DCHPRI11_ECP(base, value) (BME_BFI8(&DMA_DCHPRI11_REG(base), ((uint8_t)(value) << DMA_DCHPRI11_ECP_SHIFT), DMA_DCHPRI11_ECP_SHIFT, DMA_DCHPRI11_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI10 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI10 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI10 register
 */
/*@{*/
#define DMA_RD_DCHPRI10(base)    (DMA_DCHPRI10_REG(base))
#define DMA_WR_DCHPRI10(base, value) (DMA_DCHPRI10_REG(base) = (value))
#define DMA_RMW_DCHPRI10(base, mask, value) (DMA_WR_DCHPRI10(base, (DMA_RD_DCHPRI10(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI10(base, value) (BME_OR8(&DMA_DCHPRI10_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI10(base, value) (BME_AND8(&DMA_DCHPRI10_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI10(base, value) (BME_XOR8(&DMA_DCHPRI10_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI10 bitfields
 */

/*!
 * @name Register DMA_DCHPRI10, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI10_CHPRI field. */
#define DMA_RD_DCHPRI10_CHPRI(base) ((DMA_DCHPRI10_REG(base) & DMA_DCHPRI10_CHPRI_MASK) >> DMA_DCHPRI10_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI10_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI10_REG(base), DMA_DCHPRI10_CHPRI_SHIFT, DMA_DCHPRI10_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI10_CHPRI(base, value) (DMA_RMW_DCHPRI10(base, DMA_DCHPRI10_CHPRI_MASK, DMA_DCHPRI10_CHPRI(value)))
#define DMA_BWR_DCHPRI10_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI10_REG(base), ((uint8_t)(value) << DMA_DCHPRI10_CHPRI_SHIFT), DMA_DCHPRI10_CHPRI_SHIFT, DMA_DCHPRI10_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI10, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI10_GRPPRI field. */
#define DMA_RD_DCHPRI10_GRPPRI(base) ((DMA_DCHPRI10_REG(base) & DMA_DCHPRI10_GRPPRI_MASK) >> DMA_DCHPRI10_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI10_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI10_REG(base), DMA_DCHPRI10_GRPPRI_SHIFT, DMA_DCHPRI10_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI10, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI10_DPA field. */
#define DMA_RD_DCHPRI10_DPA(base) ((DMA_DCHPRI10_REG(base) & DMA_DCHPRI10_DPA_MASK) >> DMA_DCHPRI10_DPA_SHIFT)
#define DMA_BRD_DCHPRI10_DPA(base) (BME_UBFX8(&DMA_DCHPRI10_REG(base), DMA_DCHPRI10_DPA_SHIFT, DMA_DCHPRI10_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI10_DPA(base, value) (DMA_RMW_DCHPRI10(base, DMA_DCHPRI10_DPA_MASK, DMA_DCHPRI10_DPA(value)))
#define DMA_BWR_DCHPRI10_DPA(base, value) (BME_BFI8(&DMA_DCHPRI10_REG(base), ((uint8_t)(value) << DMA_DCHPRI10_DPA_SHIFT), DMA_DCHPRI10_DPA_SHIFT, DMA_DCHPRI10_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI10, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI10_ECP field. */
#define DMA_RD_DCHPRI10_ECP(base) ((DMA_DCHPRI10_REG(base) & DMA_DCHPRI10_ECP_MASK) >> DMA_DCHPRI10_ECP_SHIFT)
#define DMA_BRD_DCHPRI10_ECP(base) (BME_UBFX8(&DMA_DCHPRI10_REG(base), DMA_DCHPRI10_ECP_SHIFT, DMA_DCHPRI10_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI10_ECP(base, value) (DMA_RMW_DCHPRI10(base, DMA_DCHPRI10_ECP_MASK, DMA_DCHPRI10_ECP(value)))
#define DMA_BWR_DCHPRI10_ECP(base, value) (BME_BFI8(&DMA_DCHPRI10_REG(base), ((uint8_t)(value) << DMA_DCHPRI10_ECP_SHIFT), DMA_DCHPRI10_ECP_SHIFT, DMA_DCHPRI10_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI9 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI9 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI9 register
 */
/*@{*/
#define DMA_RD_DCHPRI9(base)     (DMA_DCHPRI9_REG(base))
#define DMA_WR_DCHPRI9(base, value) (DMA_DCHPRI9_REG(base) = (value))
#define DMA_RMW_DCHPRI9(base, mask, value) (DMA_WR_DCHPRI9(base, (DMA_RD_DCHPRI9(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI9(base, value) (BME_OR8(&DMA_DCHPRI9_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI9(base, value) (BME_AND8(&DMA_DCHPRI9_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI9(base, value) (BME_XOR8(&DMA_DCHPRI9_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI9 bitfields
 */

/*!
 * @name Register DMA_DCHPRI9, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI9_CHPRI field. */
#define DMA_RD_DCHPRI9_CHPRI(base) ((DMA_DCHPRI9_REG(base) & DMA_DCHPRI9_CHPRI_MASK) >> DMA_DCHPRI9_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI9_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI9_REG(base), DMA_DCHPRI9_CHPRI_SHIFT, DMA_DCHPRI9_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI9_CHPRI(base, value) (DMA_RMW_DCHPRI9(base, DMA_DCHPRI9_CHPRI_MASK, DMA_DCHPRI9_CHPRI(value)))
#define DMA_BWR_DCHPRI9_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI9_REG(base), ((uint8_t)(value) << DMA_DCHPRI9_CHPRI_SHIFT), DMA_DCHPRI9_CHPRI_SHIFT, DMA_DCHPRI9_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI9, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI9_GRPPRI field. */
#define DMA_RD_DCHPRI9_GRPPRI(base) ((DMA_DCHPRI9_REG(base) & DMA_DCHPRI9_GRPPRI_MASK) >> DMA_DCHPRI9_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI9_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI9_REG(base), DMA_DCHPRI9_GRPPRI_SHIFT, DMA_DCHPRI9_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI9, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI9_DPA field. */
#define DMA_RD_DCHPRI9_DPA(base) ((DMA_DCHPRI9_REG(base) & DMA_DCHPRI9_DPA_MASK) >> DMA_DCHPRI9_DPA_SHIFT)
#define DMA_BRD_DCHPRI9_DPA(base) (BME_UBFX8(&DMA_DCHPRI9_REG(base), DMA_DCHPRI9_DPA_SHIFT, DMA_DCHPRI9_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI9_DPA(base, value) (DMA_RMW_DCHPRI9(base, DMA_DCHPRI9_DPA_MASK, DMA_DCHPRI9_DPA(value)))
#define DMA_BWR_DCHPRI9_DPA(base, value) (BME_BFI8(&DMA_DCHPRI9_REG(base), ((uint8_t)(value) << DMA_DCHPRI9_DPA_SHIFT), DMA_DCHPRI9_DPA_SHIFT, DMA_DCHPRI9_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI9, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI9_ECP field. */
#define DMA_RD_DCHPRI9_ECP(base) ((DMA_DCHPRI9_REG(base) & DMA_DCHPRI9_ECP_MASK) >> DMA_DCHPRI9_ECP_SHIFT)
#define DMA_BRD_DCHPRI9_ECP(base) (BME_UBFX8(&DMA_DCHPRI9_REG(base), DMA_DCHPRI9_ECP_SHIFT, DMA_DCHPRI9_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI9_ECP(base, value) (DMA_RMW_DCHPRI9(base, DMA_DCHPRI9_ECP_MASK, DMA_DCHPRI9_ECP(value)))
#define DMA_BWR_DCHPRI9_ECP(base, value) (BME_BFI8(&DMA_DCHPRI9_REG(base), ((uint8_t)(value) << DMA_DCHPRI9_ECP_SHIFT), DMA_DCHPRI9_ECP_SHIFT, DMA_DCHPRI9_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI8 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI8 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI8 register
 */
/*@{*/
#define DMA_RD_DCHPRI8(base)     (DMA_DCHPRI8_REG(base))
#define DMA_WR_DCHPRI8(base, value) (DMA_DCHPRI8_REG(base) = (value))
#define DMA_RMW_DCHPRI8(base, mask, value) (DMA_WR_DCHPRI8(base, (DMA_RD_DCHPRI8(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI8(base, value) (BME_OR8(&DMA_DCHPRI8_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI8(base, value) (BME_AND8(&DMA_DCHPRI8_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI8(base, value) (BME_XOR8(&DMA_DCHPRI8_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI8 bitfields
 */

/*!
 * @name Register DMA_DCHPRI8, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI8_CHPRI field. */
#define DMA_RD_DCHPRI8_CHPRI(base) ((DMA_DCHPRI8_REG(base) & DMA_DCHPRI8_CHPRI_MASK) >> DMA_DCHPRI8_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI8_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI8_REG(base), DMA_DCHPRI8_CHPRI_SHIFT, DMA_DCHPRI8_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI8_CHPRI(base, value) (DMA_RMW_DCHPRI8(base, DMA_DCHPRI8_CHPRI_MASK, DMA_DCHPRI8_CHPRI(value)))
#define DMA_BWR_DCHPRI8_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI8_REG(base), ((uint8_t)(value) << DMA_DCHPRI8_CHPRI_SHIFT), DMA_DCHPRI8_CHPRI_SHIFT, DMA_DCHPRI8_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI8, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI8_GRPPRI field. */
#define DMA_RD_DCHPRI8_GRPPRI(base) ((DMA_DCHPRI8_REG(base) & DMA_DCHPRI8_GRPPRI_MASK) >> DMA_DCHPRI8_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI8_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI8_REG(base), DMA_DCHPRI8_GRPPRI_SHIFT, DMA_DCHPRI8_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI8, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI8_DPA field. */
#define DMA_RD_DCHPRI8_DPA(base) ((DMA_DCHPRI8_REG(base) & DMA_DCHPRI8_DPA_MASK) >> DMA_DCHPRI8_DPA_SHIFT)
#define DMA_BRD_DCHPRI8_DPA(base) (BME_UBFX8(&DMA_DCHPRI8_REG(base), DMA_DCHPRI8_DPA_SHIFT, DMA_DCHPRI8_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI8_DPA(base, value) (DMA_RMW_DCHPRI8(base, DMA_DCHPRI8_DPA_MASK, DMA_DCHPRI8_DPA(value)))
#define DMA_BWR_DCHPRI8_DPA(base, value) (BME_BFI8(&DMA_DCHPRI8_REG(base), ((uint8_t)(value) << DMA_DCHPRI8_DPA_SHIFT), DMA_DCHPRI8_DPA_SHIFT, DMA_DCHPRI8_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI8, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI8_ECP field. */
#define DMA_RD_DCHPRI8_ECP(base) ((DMA_DCHPRI8_REG(base) & DMA_DCHPRI8_ECP_MASK) >> DMA_DCHPRI8_ECP_SHIFT)
#define DMA_BRD_DCHPRI8_ECP(base) (BME_UBFX8(&DMA_DCHPRI8_REG(base), DMA_DCHPRI8_ECP_SHIFT, DMA_DCHPRI8_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI8_ECP(base, value) (DMA_RMW_DCHPRI8(base, DMA_DCHPRI8_ECP_MASK, DMA_DCHPRI8_ECP(value)))
#define DMA_BWR_DCHPRI8_ECP(base, value) (BME_BFI8(&DMA_DCHPRI8_REG(base), ((uint8_t)(value) << DMA_DCHPRI8_ECP_SHIFT), DMA_DCHPRI8_ECP_SHIFT, DMA_DCHPRI8_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI15 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI15 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI15 register
 */
/*@{*/
#define DMA_RD_DCHPRI15(base)    (DMA_DCHPRI15_REG(base))
#define DMA_WR_DCHPRI15(base, value) (DMA_DCHPRI15_REG(base) = (value))
#define DMA_RMW_DCHPRI15(base, mask, value) (DMA_WR_DCHPRI15(base, (DMA_RD_DCHPRI15(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI15(base, value) (BME_OR8(&DMA_DCHPRI15_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI15(base, value) (BME_AND8(&DMA_DCHPRI15_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI15(base, value) (BME_XOR8(&DMA_DCHPRI15_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI15 bitfields
 */

/*!
 * @name Register DMA_DCHPRI15, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI15_CHPRI field. */
#define DMA_RD_DCHPRI15_CHPRI(base) ((DMA_DCHPRI15_REG(base) & DMA_DCHPRI15_CHPRI_MASK) >> DMA_DCHPRI15_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI15_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI15_REG(base), DMA_DCHPRI15_CHPRI_SHIFT, DMA_DCHPRI15_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI15_CHPRI(base, value) (DMA_RMW_DCHPRI15(base, DMA_DCHPRI15_CHPRI_MASK, DMA_DCHPRI15_CHPRI(value)))
#define DMA_BWR_DCHPRI15_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI15_REG(base), ((uint8_t)(value) << DMA_DCHPRI15_CHPRI_SHIFT), DMA_DCHPRI15_CHPRI_SHIFT, DMA_DCHPRI15_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI15, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI15_GRPPRI field. */
#define DMA_RD_DCHPRI15_GRPPRI(base) ((DMA_DCHPRI15_REG(base) & DMA_DCHPRI15_GRPPRI_MASK) >> DMA_DCHPRI15_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI15_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI15_REG(base), DMA_DCHPRI15_GRPPRI_SHIFT, DMA_DCHPRI15_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI15, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI15_DPA field. */
#define DMA_RD_DCHPRI15_DPA(base) ((DMA_DCHPRI15_REG(base) & DMA_DCHPRI15_DPA_MASK) >> DMA_DCHPRI15_DPA_SHIFT)
#define DMA_BRD_DCHPRI15_DPA(base) (BME_UBFX8(&DMA_DCHPRI15_REG(base), DMA_DCHPRI15_DPA_SHIFT, DMA_DCHPRI15_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI15_DPA(base, value) (DMA_RMW_DCHPRI15(base, DMA_DCHPRI15_DPA_MASK, DMA_DCHPRI15_DPA(value)))
#define DMA_BWR_DCHPRI15_DPA(base, value) (BME_BFI8(&DMA_DCHPRI15_REG(base), ((uint8_t)(value) << DMA_DCHPRI15_DPA_SHIFT), DMA_DCHPRI15_DPA_SHIFT, DMA_DCHPRI15_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI15, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI15_ECP field. */
#define DMA_RD_DCHPRI15_ECP(base) ((DMA_DCHPRI15_REG(base) & DMA_DCHPRI15_ECP_MASK) >> DMA_DCHPRI15_ECP_SHIFT)
#define DMA_BRD_DCHPRI15_ECP(base) (BME_UBFX8(&DMA_DCHPRI15_REG(base), DMA_DCHPRI15_ECP_SHIFT, DMA_DCHPRI15_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI15_ECP(base, value) (DMA_RMW_DCHPRI15(base, DMA_DCHPRI15_ECP_MASK, DMA_DCHPRI15_ECP(value)))
#define DMA_BWR_DCHPRI15_ECP(base, value) (BME_BFI8(&DMA_DCHPRI15_REG(base), ((uint8_t)(value) << DMA_DCHPRI15_ECP_SHIFT), DMA_DCHPRI15_ECP_SHIFT, DMA_DCHPRI15_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI14 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI14 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI14 register
 */
/*@{*/
#define DMA_RD_DCHPRI14(base)    (DMA_DCHPRI14_REG(base))
#define DMA_WR_DCHPRI14(base, value) (DMA_DCHPRI14_REG(base) = (value))
#define DMA_RMW_DCHPRI14(base, mask, value) (DMA_WR_DCHPRI14(base, (DMA_RD_DCHPRI14(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI14(base, value) (BME_OR8(&DMA_DCHPRI14_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI14(base, value) (BME_AND8(&DMA_DCHPRI14_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI14(base, value) (BME_XOR8(&DMA_DCHPRI14_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI14 bitfields
 */

/*!
 * @name Register DMA_DCHPRI14, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI14_CHPRI field. */
#define DMA_RD_DCHPRI14_CHPRI(base) ((DMA_DCHPRI14_REG(base) & DMA_DCHPRI14_CHPRI_MASK) >> DMA_DCHPRI14_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI14_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI14_REG(base), DMA_DCHPRI14_CHPRI_SHIFT, DMA_DCHPRI14_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI14_CHPRI(base, value) (DMA_RMW_DCHPRI14(base, DMA_DCHPRI14_CHPRI_MASK, DMA_DCHPRI14_CHPRI(value)))
#define DMA_BWR_DCHPRI14_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI14_REG(base), ((uint8_t)(value) << DMA_DCHPRI14_CHPRI_SHIFT), DMA_DCHPRI14_CHPRI_SHIFT, DMA_DCHPRI14_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI14, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI14_GRPPRI field. */
#define DMA_RD_DCHPRI14_GRPPRI(base) ((DMA_DCHPRI14_REG(base) & DMA_DCHPRI14_GRPPRI_MASK) >> DMA_DCHPRI14_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI14_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI14_REG(base), DMA_DCHPRI14_GRPPRI_SHIFT, DMA_DCHPRI14_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI14, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI14_DPA field. */
#define DMA_RD_DCHPRI14_DPA(base) ((DMA_DCHPRI14_REG(base) & DMA_DCHPRI14_DPA_MASK) >> DMA_DCHPRI14_DPA_SHIFT)
#define DMA_BRD_DCHPRI14_DPA(base) (BME_UBFX8(&DMA_DCHPRI14_REG(base), DMA_DCHPRI14_DPA_SHIFT, DMA_DCHPRI14_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI14_DPA(base, value) (DMA_RMW_DCHPRI14(base, DMA_DCHPRI14_DPA_MASK, DMA_DCHPRI14_DPA(value)))
#define DMA_BWR_DCHPRI14_DPA(base, value) (BME_BFI8(&DMA_DCHPRI14_REG(base), ((uint8_t)(value) << DMA_DCHPRI14_DPA_SHIFT), DMA_DCHPRI14_DPA_SHIFT, DMA_DCHPRI14_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI14, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI14_ECP field. */
#define DMA_RD_DCHPRI14_ECP(base) ((DMA_DCHPRI14_REG(base) & DMA_DCHPRI14_ECP_MASK) >> DMA_DCHPRI14_ECP_SHIFT)
#define DMA_BRD_DCHPRI14_ECP(base) (BME_UBFX8(&DMA_DCHPRI14_REG(base), DMA_DCHPRI14_ECP_SHIFT, DMA_DCHPRI14_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI14_ECP(base, value) (DMA_RMW_DCHPRI14(base, DMA_DCHPRI14_ECP_MASK, DMA_DCHPRI14_ECP(value)))
#define DMA_BWR_DCHPRI14_ECP(base, value) (BME_BFI8(&DMA_DCHPRI14_REG(base), ((uint8_t)(value) << DMA_DCHPRI14_ECP_SHIFT), DMA_DCHPRI14_ECP_SHIFT, DMA_DCHPRI14_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI13 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI13 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI13 register
 */
/*@{*/
#define DMA_RD_DCHPRI13(base)    (DMA_DCHPRI13_REG(base))
#define DMA_WR_DCHPRI13(base, value) (DMA_DCHPRI13_REG(base) = (value))
#define DMA_RMW_DCHPRI13(base, mask, value) (DMA_WR_DCHPRI13(base, (DMA_RD_DCHPRI13(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI13(base, value) (BME_OR8(&DMA_DCHPRI13_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI13(base, value) (BME_AND8(&DMA_DCHPRI13_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI13(base, value) (BME_XOR8(&DMA_DCHPRI13_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI13 bitfields
 */

/*!
 * @name Register DMA_DCHPRI13, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI13_CHPRI field. */
#define DMA_RD_DCHPRI13_CHPRI(base) ((DMA_DCHPRI13_REG(base) & DMA_DCHPRI13_CHPRI_MASK) >> DMA_DCHPRI13_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI13_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI13_REG(base), DMA_DCHPRI13_CHPRI_SHIFT, DMA_DCHPRI13_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI13_CHPRI(base, value) (DMA_RMW_DCHPRI13(base, DMA_DCHPRI13_CHPRI_MASK, DMA_DCHPRI13_CHPRI(value)))
#define DMA_BWR_DCHPRI13_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI13_REG(base), ((uint8_t)(value) << DMA_DCHPRI13_CHPRI_SHIFT), DMA_DCHPRI13_CHPRI_SHIFT, DMA_DCHPRI13_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI13, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI13_GRPPRI field. */
#define DMA_RD_DCHPRI13_GRPPRI(base) ((DMA_DCHPRI13_REG(base) & DMA_DCHPRI13_GRPPRI_MASK) >> DMA_DCHPRI13_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI13_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI13_REG(base), DMA_DCHPRI13_GRPPRI_SHIFT, DMA_DCHPRI13_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI13, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI13_DPA field. */
#define DMA_RD_DCHPRI13_DPA(base) ((DMA_DCHPRI13_REG(base) & DMA_DCHPRI13_DPA_MASK) >> DMA_DCHPRI13_DPA_SHIFT)
#define DMA_BRD_DCHPRI13_DPA(base) (BME_UBFX8(&DMA_DCHPRI13_REG(base), DMA_DCHPRI13_DPA_SHIFT, DMA_DCHPRI13_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI13_DPA(base, value) (DMA_RMW_DCHPRI13(base, DMA_DCHPRI13_DPA_MASK, DMA_DCHPRI13_DPA(value)))
#define DMA_BWR_DCHPRI13_DPA(base, value) (BME_BFI8(&DMA_DCHPRI13_REG(base), ((uint8_t)(value) << DMA_DCHPRI13_DPA_SHIFT), DMA_DCHPRI13_DPA_SHIFT, DMA_DCHPRI13_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI13, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI13_ECP field. */
#define DMA_RD_DCHPRI13_ECP(base) ((DMA_DCHPRI13_REG(base) & DMA_DCHPRI13_ECP_MASK) >> DMA_DCHPRI13_ECP_SHIFT)
#define DMA_BRD_DCHPRI13_ECP(base) (BME_UBFX8(&DMA_DCHPRI13_REG(base), DMA_DCHPRI13_ECP_SHIFT, DMA_DCHPRI13_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI13_ECP(base, value) (DMA_RMW_DCHPRI13(base, DMA_DCHPRI13_ECP_MASK, DMA_DCHPRI13_ECP(value)))
#define DMA_BWR_DCHPRI13_ECP(base, value) (BME_BFI8(&DMA_DCHPRI13_REG(base), ((uint8_t)(value) << DMA_DCHPRI13_ECP_SHIFT), DMA_DCHPRI13_ECP_SHIFT, DMA_DCHPRI13_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI12 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI12 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI12 register
 */
/*@{*/
#define DMA_RD_DCHPRI12(base)    (DMA_DCHPRI12_REG(base))
#define DMA_WR_DCHPRI12(base, value) (DMA_DCHPRI12_REG(base) = (value))
#define DMA_RMW_DCHPRI12(base, mask, value) (DMA_WR_DCHPRI12(base, (DMA_RD_DCHPRI12(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI12(base, value) (BME_OR8(&DMA_DCHPRI12_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI12(base, value) (BME_AND8(&DMA_DCHPRI12_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI12(base, value) (BME_XOR8(&DMA_DCHPRI12_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI12 bitfields
 */

/*!
 * @name Register DMA_DCHPRI12, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI12_CHPRI field. */
#define DMA_RD_DCHPRI12_CHPRI(base) ((DMA_DCHPRI12_REG(base) & DMA_DCHPRI12_CHPRI_MASK) >> DMA_DCHPRI12_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI12_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI12_REG(base), DMA_DCHPRI12_CHPRI_SHIFT, DMA_DCHPRI12_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI12_CHPRI(base, value) (DMA_RMW_DCHPRI12(base, DMA_DCHPRI12_CHPRI_MASK, DMA_DCHPRI12_CHPRI(value)))
#define DMA_BWR_DCHPRI12_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI12_REG(base), ((uint8_t)(value) << DMA_DCHPRI12_CHPRI_SHIFT), DMA_DCHPRI12_CHPRI_SHIFT, DMA_DCHPRI12_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI12, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI12_GRPPRI field. */
#define DMA_RD_DCHPRI12_GRPPRI(base) ((DMA_DCHPRI12_REG(base) & DMA_DCHPRI12_GRPPRI_MASK) >> DMA_DCHPRI12_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI12_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI12_REG(base), DMA_DCHPRI12_GRPPRI_SHIFT, DMA_DCHPRI12_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI12, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI12_DPA field. */
#define DMA_RD_DCHPRI12_DPA(base) ((DMA_DCHPRI12_REG(base) & DMA_DCHPRI12_DPA_MASK) >> DMA_DCHPRI12_DPA_SHIFT)
#define DMA_BRD_DCHPRI12_DPA(base) (BME_UBFX8(&DMA_DCHPRI12_REG(base), DMA_DCHPRI12_DPA_SHIFT, DMA_DCHPRI12_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI12_DPA(base, value) (DMA_RMW_DCHPRI12(base, DMA_DCHPRI12_DPA_MASK, DMA_DCHPRI12_DPA(value)))
#define DMA_BWR_DCHPRI12_DPA(base, value) (BME_BFI8(&DMA_DCHPRI12_REG(base), ((uint8_t)(value) << DMA_DCHPRI12_DPA_SHIFT), DMA_DCHPRI12_DPA_SHIFT, DMA_DCHPRI12_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI12, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI12_ECP field. */
#define DMA_RD_DCHPRI12_ECP(base) ((DMA_DCHPRI12_REG(base) & DMA_DCHPRI12_ECP_MASK) >> DMA_DCHPRI12_ECP_SHIFT)
#define DMA_BRD_DCHPRI12_ECP(base) (BME_UBFX8(&DMA_DCHPRI12_REG(base), DMA_DCHPRI12_ECP_SHIFT, DMA_DCHPRI12_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI12_ECP(base, value) (DMA_RMW_DCHPRI12(base, DMA_DCHPRI12_ECP_MASK, DMA_DCHPRI12_ECP(value)))
#define DMA_BWR_DCHPRI12_ECP(base, value) (BME_BFI8(&DMA_DCHPRI12_REG(base), ((uint8_t)(value) << DMA_DCHPRI12_ECP_SHIFT), DMA_DCHPRI12_ECP_SHIFT, DMA_DCHPRI12_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI19 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI19 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI19 register
 */
/*@{*/
#define DMA_RD_DCHPRI19(base)    (DMA_DCHPRI19_REG(base))
#define DMA_WR_DCHPRI19(base, value) (DMA_DCHPRI19_REG(base) = (value))
#define DMA_RMW_DCHPRI19(base, mask, value) (DMA_WR_DCHPRI19(base, (DMA_RD_DCHPRI19(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI19(base, value) (BME_OR8(&DMA_DCHPRI19_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI19(base, value) (BME_AND8(&DMA_DCHPRI19_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI19(base, value) (BME_XOR8(&DMA_DCHPRI19_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI19 bitfields
 */

/*!
 * @name Register DMA_DCHPRI19, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI19_CHPRI field. */
#define DMA_RD_DCHPRI19_CHPRI(base) ((DMA_DCHPRI19_REG(base) & DMA_DCHPRI19_CHPRI_MASK) >> DMA_DCHPRI19_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI19_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI19_REG(base), DMA_DCHPRI19_CHPRI_SHIFT, DMA_DCHPRI19_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI19_CHPRI(base, value) (DMA_RMW_DCHPRI19(base, DMA_DCHPRI19_CHPRI_MASK, DMA_DCHPRI19_CHPRI(value)))
#define DMA_BWR_DCHPRI19_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI19_REG(base), ((uint8_t)(value) << DMA_DCHPRI19_CHPRI_SHIFT), DMA_DCHPRI19_CHPRI_SHIFT, DMA_DCHPRI19_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI19, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI19_GRPPRI field. */
#define DMA_RD_DCHPRI19_GRPPRI(base) ((DMA_DCHPRI19_REG(base) & DMA_DCHPRI19_GRPPRI_MASK) >> DMA_DCHPRI19_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI19_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI19_REG(base), DMA_DCHPRI19_GRPPRI_SHIFT, DMA_DCHPRI19_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI19, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI19_DPA field. */
#define DMA_RD_DCHPRI19_DPA(base) ((DMA_DCHPRI19_REG(base) & DMA_DCHPRI19_DPA_MASK) >> DMA_DCHPRI19_DPA_SHIFT)
#define DMA_BRD_DCHPRI19_DPA(base) (BME_UBFX8(&DMA_DCHPRI19_REG(base), DMA_DCHPRI19_DPA_SHIFT, DMA_DCHPRI19_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI19_DPA(base, value) (DMA_RMW_DCHPRI19(base, DMA_DCHPRI19_DPA_MASK, DMA_DCHPRI19_DPA(value)))
#define DMA_BWR_DCHPRI19_DPA(base, value) (BME_BFI8(&DMA_DCHPRI19_REG(base), ((uint8_t)(value) << DMA_DCHPRI19_DPA_SHIFT), DMA_DCHPRI19_DPA_SHIFT, DMA_DCHPRI19_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI19, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI19_ECP field. */
#define DMA_RD_DCHPRI19_ECP(base) ((DMA_DCHPRI19_REG(base) & DMA_DCHPRI19_ECP_MASK) >> DMA_DCHPRI19_ECP_SHIFT)
#define DMA_BRD_DCHPRI19_ECP(base) (BME_UBFX8(&DMA_DCHPRI19_REG(base), DMA_DCHPRI19_ECP_SHIFT, DMA_DCHPRI19_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI19_ECP(base, value) (DMA_RMW_DCHPRI19(base, DMA_DCHPRI19_ECP_MASK, DMA_DCHPRI19_ECP(value)))
#define DMA_BWR_DCHPRI19_ECP(base, value) (BME_BFI8(&DMA_DCHPRI19_REG(base), ((uint8_t)(value) << DMA_DCHPRI19_ECP_SHIFT), DMA_DCHPRI19_ECP_SHIFT, DMA_DCHPRI19_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI18 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI18 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI18 register
 */
/*@{*/
#define DMA_RD_DCHPRI18(base)    (DMA_DCHPRI18_REG(base))
#define DMA_WR_DCHPRI18(base, value) (DMA_DCHPRI18_REG(base) = (value))
#define DMA_RMW_DCHPRI18(base, mask, value) (DMA_WR_DCHPRI18(base, (DMA_RD_DCHPRI18(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI18(base, value) (BME_OR8(&DMA_DCHPRI18_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI18(base, value) (BME_AND8(&DMA_DCHPRI18_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI18(base, value) (BME_XOR8(&DMA_DCHPRI18_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI18 bitfields
 */

/*!
 * @name Register DMA_DCHPRI18, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI18_CHPRI field. */
#define DMA_RD_DCHPRI18_CHPRI(base) ((DMA_DCHPRI18_REG(base) & DMA_DCHPRI18_CHPRI_MASK) >> DMA_DCHPRI18_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI18_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI18_REG(base), DMA_DCHPRI18_CHPRI_SHIFT, DMA_DCHPRI18_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI18_CHPRI(base, value) (DMA_RMW_DCHPRI18(base, DMA_DCHPRI18_CHPRI_MASK, DMA_DCHPRI18_CHPRI(value)))
#define DMA_BWR_DCHPRI18_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI18_REG(base), ((uint8_t)(value) << DMA_DCHPRI18_CHPRI_SHIFT), DMA_DCHPRI18_CHPRI_SHIFT, DMA_DCHPRI18_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI18, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI18_GRPPRI field. */
#define DMA_RD_DCHPRI18_GRPPRI(base) ((DMA_DCHPRI18_REG(base) & DMA_DCHPRI18_GRPPRI_MASK) >> DMA_DCHPRI18_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI18_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI18_REG(base), DMA_DCHPRI18_GRPPRI_SHIFT, DMA_DCHPRI18_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI18, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI18_DPA field. */
#define DMA_RD_DCHPRI18_DPA(base) ((DMA_DCHPRI18_REG(base) & DMA_DCHPRI18_DPA_MASK) >> DMA_DCHPRI18_DPA_SHIFT)
#define DMA_BRD_DCHPRI18_DPA(base) (BME_UBFX8(&DMA_DCHPRI18_REG(base), DMA_DCHPRI18_DPA_SHIFT, DMA_DCHPRI18_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI18_DPA(base, value) (DMA_RMW_DCHPRI18(base, DMA_DCHPRI18_DPA_MASK, DMA_DCHPRI18_DPA(value)))
#define DMA_BWR_DCHPRI18_DPA(base, value) (BME_BFI8(&DMA_DCHPRI18_REG(base), ((uint8_t)(value) << DMA_DCHPRI18_DPA_SHIFT), DMA_DCHPRI18_DPA_SHIFT, DMA_DCHPRI18_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI18, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI18_ECP field. */
#define DMA_RD_DCHPRI18_ECP(base) ((DMA_DCHPRI18_REG(base) & DMA_DCHPRI18_ECP_MASK) >> DMA_DCHPRI18_ECP_SHIFT)
#define DMA_BRD_DCHPRI18_ECP(base) (BME_UBFX8(&DMA_DCHPRI18_REG(base), DMA_DCHPRI18_ECP_SHIFT, DMA_DCHPRI18_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI18_ECP(base, value) (DMA_RMW_DCHPRI18(base, DMA_DCHPRI18_ECP_MASK, DMA_DCHPRI18_ECP(value)))
#define DMA_BWR_DCHPRI18_ECP(base, value) (BME_BFI8(&DMA_DCHPRI18_REG(base), ((uint8_t)(value) << DMA_DCHPRI18_ECP_SHIFT), DMA_DCHPRI18_ECP_SHIFT, DMA_DCHPRI18_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI17 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI17 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI17 register
 */
/*@{*/
#define DMA_RD_DCHPRI17(base)    (DMA_DCHPRI17_REG(base))
#define DMA_WR_DCHPRI17(base, value) (DMA_DCHPRI17_REG(base) = (value))
#define DMA_RMW_DCHPRI17(base, mask, value) (DMA_WR_DCHPRI17(base, (DMA_RD_DCHPRI17(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI17(base, value) (BME_OR8(&DMA_DCHPRI17_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI17(base, value) (BME_AND8(&DMA_DCHPRI17_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI17(base, value) (BME_XOR8(&DMA_DCHPRI17_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI17 bitfields
 */

/*!
 * @name Register DMA_DCHPRI17, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI17_CHPRI field. */
#define DMA_RD_DCHPRI17_CHPRI(base) ((DMA_DCHPRI17_REG(base) & DMA_DCHPRI17_CHPRI_MASK) >> DMA_DCHPRI17_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI17_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI17_REG(base), DMA_DCHPRI17_CHPRI_SHIFT, DMA_DCHPRI17_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI17_CHPRI(base, value) (DMA_RMW_DCHPRI17(base, DMA_DCHPRI17_CHPRI_MASK, DMA_DCHPRI17_CHPRI(value)))
#define DMA_BWR_DCHPRI17_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI17_REG(base), ((uint8_t)(value) << DMA_DCHPRI17_CHPRI_SHIFT), DMA_DCHPRI17_CHPRI_SHIFT, DMA_DCHPRI17_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI17, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI17_GRPPRI field. */
#define DMA_RD_DCHPRI17_GRPPRI(base) ((DMA_DCHPRI17_REG(base) & DMA_DCHPRI17_GRPPRI_MASK) >> DMA_DCHPRI17_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI17_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI17_REG(base), DMA_DCHPRI17_GRPPRI_SHIFT, DMA_DCHPRI17_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI17, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI17_DPA field. */
#define DMA_RD_DCHPRI17_DPA(base) ((DMA_DCHPRI17_REG(base) & DMA_DCHPRI17_DPA_MASK) >> DMA_DCHPRI17_DPA_SHIFT)
#define DMA_BRD_DCHPRI17_DPA(base) (BME_UBFX8(&DMA_DCHPRI17_REG(base), DMA_DCHPRI17_DPA_SHIFT, DMA_DCHPRI17_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI17_DPA(base, value) (DMA_RMW_DCHPRI17(base, DMA_DCHPRI17_DPA_MASK, DMA_DCHPRI17_DPA(value)))
#define DMA_BWR_DCHPRI17_DPA(base, value) (BME_BFI8(&DMA_DCHPRI17_REG(base), ((uint8_t)(value) << DMA_DCHPRI17_DPA_SHIFT), DMA_DCHPRI17_DPA_SHIFT, DMA_DCHPRI17_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI17, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI17_ECP field. */
#define DMA_RD_DCHPRI17_ECP(base) ((DMA_DCHPRI17_REG(base) & DMA_DCHPRI17_ECP_MASK) >> DMA_DCHPRI17_ECP_SHIFT)
#define DMA_BRD_DCHPRI17_ECP(base) (BME_UBFX8(&DMA_DCHPRI17_REG(base), DMA_DCHPRI17_ECP_SHIFT, DMA_DCHPRI17_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI17_ECP(base, value) (DMA_RMW_DCHPRI17(base, DMA_DCHPRI17_ECP_MASK, DMA_DCHPRI17_ECP(value)))
#define DMA_BWR_DCHPRI17_ECP(base, value) (BME_BFI8(&DMA_DCHPRI17_REG(base), ((uint8_t)(value) << DMA_DCHPRI17_ECP_SHIFT), DMA_DCHPRI17_ECP_SHIFT, DMA_DCHPRI17_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI16 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI16 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI16 register
 */
/*@{*/
#define DMA_RD_DCHPRI16(base)    (DMA_DCHPRI16_REG(base))
#define DMA_WR_DCHPRI16(base, value) (DMA_DCHPRI16_REG(base) = (value))
#define DMA_RMW_DCHPRI16(base, mask, value) (DMA_WR_DCHPRI16(base, (DMA_RD_DCHPRI16(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI16(base, value) (BME_OR8(&DMA_DCHPRI16_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI16(base, value) (BME_AND8(&DMA_DCHPRI16_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI16(base, value) (BME_XOR8(&DMA_DCHPRI16_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI16 bitfields
 */

/*!
 * @name Register DMA_DCHPRI16, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI16_CHPRI field. */
#define DMA_RD_DCHPRI16_CHPRI(base) ((DMA_DCHPRI16_REG(base) & DMA_DCHPRI16_CHPRI_MASK) >> DMA_DCHPRI16_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI16_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI16_REG(base), DMA_DCHPRI16_CHPRI_SHIFT, DMA_DCHPRI16_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI16_CHPRI(base, value) (DMA_RMW_DCHPRI16(base, DMA_DCHPRI16_CHPRI_MASK, DMA_DCHPRI16_CHPRI(value)))
#define DMA_BWR_DCHPRI16_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI16_REG(base), ((uint8_t)(value) << DMA_DCHPRI16_CHPRI_SHIFT), DMA_DCHPRI16_CHPRI_SHIFT, DMA_DCHPRI16_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI16, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI16_GRPPRI field. */
#define DMA_RD_DCHPRI16_GRPPRI(base) ((DMA_DCHPRI16_REG(base) & DMA_DCHPRI16_GRPPRI_MASK) >> DMA_DCHPRI16_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI16_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI16_REG(base), DMA_DCHPRI16_GRPPRI_SHIFT, DMA_DCHPRI16_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI16, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI16_DPA field. */
#define DMA_RD_DCHPRI16_DPA(base) ((DMA_DCHPRI16_REG(base) & DMA_DCHPRI16_DPA_MASK) >> DMA_DCHPRI16_DPA_SHIFT)
#define DMA_BRD_DCHPRI16_DPA(base) (BME_UBFX8(&DMA_DCHPRI16_REG(base), DMA_DCHPRI16_DPA_SHIFT, DMA_DCHPRI16_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI16_DPA(base, value) (DMA_RMW_DCHPRI16(base, DMA_DCHPRI16_DPA_MASK, DMA_DCHPRI16_DPA(value)))
#define DMA_BWR_DCHPRI16_DPA(base, value) (BME_BFI8(&DMA_DCHPRI16_REG(base), ((uint8_t)(value) << DMA_DCHPRI16_DPA_SHIFT), DMA_DCHPRI16_DPA_SHIFT, DMA_DCHPRI16_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI16, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI16_ECP field. */
#define DMA_RD_DCHPRI16_ECP(base) ((DMA_DCHPRI16_REG(base) & DMA_DCHPRI16_ECP_MASK) >> DMA_DCHPRI16_ECP_SHIFT)
#define DMA_BRD_DCHPRI16_ECP(base) (BME_UBFX8(&DMA_DCHPRI16_REG(base), DMA_DCHPRI16_ECP_SHIFT, DMA_DCHPRI16_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI16_ECP(base, value) (DMA_RMW_DCHPRI16(base, DMA_DCHPRI16_ECP_MASK, DMA_DCHPRI16_ECP(value)))
#define DMA_BWR_DCHPRI16_ECP(base, value) (BME_BFI8(&DMA_DCHPRI16_REG(base), ((uint8_t)(value) << DMA_DCHPRI16_ECP_SHIFT), DMA_DCHPRI16_ECP_SHIFT, DMA_DCHPRI16_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI23 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI23 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI23 register
 */
/*@{*/
#define DMA_RD_DCHPRI23(base)    (DMA_DCHPRI23_REG(base))
#define DMA_WR_DCHPRI23(base, value) (DMA_DCHPRI23_REG(base) = (value))
#define DMA_RMW_DCHPRI23(base, mask, value) (DMA_WR_DCHPRI23(base, (DMA_RD_DCHPRI23(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI23(base, value) (BME_OR8(&DMA_DCHPRI23_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI23(base, value) (BME_AND8(&DMA_DCHPRI23_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI23(base, value) (BME_XOR8(&DMA_DCHPRI23_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI23 bitfields
 */

/*!
 * @name Register DMA_DCHPRI23, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI23_CHPRI field. */
#define DMA_RD_DCHPRI23_CHPRI(base) ((DMA_DCHPRI23_REG(base) & DMA_DCHPRI23_CHPRI_MASK) >> DMA_DCHPRI23_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI23_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI23_REG(base), DMA_DCHPRI23_CHPRI_SHIFT, DMA_DCHPRI23_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI23_CHPRI(base, value) (DMA_RMW_DCHPRI23(base, DMA_DCHPRI23_CHPRI_MASK, DMA_DCHPRI23_CHPRI(value)))
#define DMA_BWR_DCHPRI23_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI23_REG(base), ((uint8_t)(value) << DMA_DCHPRI23_CHPRI_SHIFT), DMA_DCHPRI23_CHPRI_SHIFT, DMA_DCHPRI23_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI23, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI23_GRPPRI field. */
#define DMA_RD_DCHPRI23_GRPPRI(base) ((DMA_DCHPRI23_REG(base) & DMA_DCHPRI23_GRPPRI_MASK) >> DMA_DCHPRI23_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI23_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI23_REG(base), DMA_DCHPRI23_GRPPRI_SHIFT, DMA_DCHPRI23_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI23, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI23_DPA field. */
#define DMA_RD_DCHPRI23_DPA(base) ((DMA_DCHPRI23_REG(base) & DMA_DCHPRI23_DPA_MASK) >> DMA_DCHPRI23_DPA_SHIFT)
#define DMA_BRD_DCHPRI23_DPA(base) (BME_UBFX8(&DMA_DCHPRI23_REG(base), DMA_DCHPRI23_DPA_SHIFT, DMA_DCHPRI23_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI23_DPA(base, value) (DMA_RMW_DCHPRI23(base, DMA_DCHPRI23_DPA_MASK, DMA_DCHPRI23_DPA(value)))
#define DMA_BWR_DCHPRI23_DPA(base, value) (BME_BFI8(&DMA_DCHPRI23_REG(base), ((uint8_t)(value) << DMA_DCHPRI23_DPA_SHIFT), DMA_DCHPRI23_DPA_SHIFT, DMA_DCHPRI23_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI23, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI23_ECP field. */
#define DMA_RD_DCHPRI23_ECP(base) ((DMA_DCHPRI23_REG(base) & DMA_DCHPRI23_ECP_MASK) >> DMA_DCHPRI23_ECP_SHIFT)
#define DMA_BRD_DCHPRI23_ECP(base) (BME_UBFX8(&DMA_DCHPRI23_REG(base), DMA_DCHPRI23_ECP_SHIFT, DMA_DCHPRI23_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI23_ECP(base, value) (DMA_RMW_DCHPRI23(base, DMA_DCHPRI23_ECP_MASK, DMA_DCHPRI23_ECP(value)))
#define DMA_BWR_DCHPRI23_ECP(base, value) (BME_BFI8(&DMA_DCHPRI23_REG(base), ((uint8_t)(value) << DMA_DCHPRI23_ECP_SHIFT), DMA_DCHPRI23_ECP_SHIFT, DMA_DCHPRI23_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI22 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI22 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI22 register
 */
/*@{*/
#define DMA_RD_DCHPRI22(base)    (DMA_DCHPRI22_REG(base))
#define DMA_WR_DCHPRI22(base, value) (DMA_DCHPRI22_REG(base) = (value))
#define DMA_RMW_DCHPRI22(base, mask, value) (DMA_WR_DCHPRI22(base, (DMA_RD_DCHPRI22(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI22(base, value) (BME_OR8(&DMA_DCHPRI22_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI22(base, value) (BME_AND8(&DMA_DCHPRI22_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI22(base, value) (BME_XOR8(&DMA_DCHPRI22_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI22 bitfields
 */

/*!
 * @name Register DMA_DCHPRI22, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI22_CHPRI field. */
#define DMA_RD_DCHPRI22_CHPRI(base) ((DMA_DCHPRI22_REG(base) & DMA_DCHPRI22_CHPRI_MASK) >> DMA_DCHPRI22_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI22_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI22_REG(base), DMA_DCHPRI22_CHPRI_SHIFT, DMA_DCHPRI22_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI22_CHPRI(base, value) (DMA_RMW_DCHPRI22(base, DMA_DCHPRI22_CHPRI_MASK, DMA_DCHPRI22_CHPRI(value)))
#define DMA_BWR_DCHPRI22_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI22_REG(base), ((uint8_t)(value) << DMA_DCHPRI22_CHPRI_SHIFT), DMA_DCHPRI22_CHPRI_SHIFT, DMA_DCHPRI22_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI22, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI22_GRPPRI field. */
#define DMA_RD_DCHPRI22_GRPPRI(base) ((DMA_DCHPRI22_REG(base) & DMA_DCHPRI22_GRPPRI_MASK) >> DMA_DCHPRI22_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI22_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI22_REG(base), DMA_DCHPRI22_GRPPRI_SHIFT, DMA_DCHPRI22_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI22, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI22_DPA field. */
#define DMA_RD_DCHPRI22_DPA(base) ((DMA_DCHPRI22_REG(base) & DMA_DCHPRI22_DPA_MASK) >> DMA_DCHPRI22_DPA_SHIFT)
#define DMA_BRD_DCHPRI22_DPA(base) (BME_UBFX8(&DMA_DCHPRI22_REG(base), DMA_DCHPRI22_DPA_SHIFT, DMA_DCHPRI22_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI22_DPA(base, value) (DMA_RMW_DCHPRI22(base, DMA_DCHPRI22_DPA_MASK, DMA_DCHPRI22_DPA(value)))
#define DMA_BWR_DCHPRI22_DPA(base, value) (BME_BFI8(&DMA_DCHPRI22_REG(base), ((uint8_t)(value) << DMA_DCHPRI22_DPA_SHIFT), DMA_DCHPRI22_DPA_SHIFT, DMA_DCHPRI22_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI22, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI22_ECP field. */
#define DMA_RD_DCHPRI22_ECP(base) ((DMA_DCHPRI22_REG(base) & DMA_DCHPRI22_ECP_MASK) >> DMA_DCHPRI22_ECP_SHIFT)
#define DMA_BRD_DCHPRI22_ECP(base) (BME_UBFX8(&DMA_DCHPRI22_REG(base), DMA_DCHPRI22_ECP_SHIFT, DMA_DCHPRI22_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI22_ECP(base, value) (DMA_RMW_DCHPRI22(base, DMA_DCHPRI22_ECP_MASK, DMA_DCHPRI22_ECP(value)))
#define DMA_BWR_DCHPRI22_ECP(base, value) (BME_BFI8(&DMA_DCHPRI22_REG(base), ((uint8_t)(value) << DMA_DCHPRI22_ECP_SHIFT), DMA_DCHPRI22_ECP_SHIFT, DMA_DCHPRI22_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI21 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI21 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI21 register
 */
/*@{*/
#define DMA_RD_DCHPRI21(base)    (DMA_DCHPRI21_REG(base))
#define DMA_WR_DCHPRI21(base, value) (DMA_DCHPRI21_REG(base) = (value))
#define DMA_RMW_DCHPRI21(base, mask, value) (DMA_WR_DCHPRI21(base, (DMA_RD_DCHPRI21(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI21(base, value) (BME_OR8(&DMA_DCHPRI21_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI21(base, value) (BME_AND8(&DMA_DCHPRI21_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI21(base, value) (BME_XOR8(&DMA_DCHPRI21_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI21 bitfields
 */

/*!
 * @name Register DMA_DCHPRI21, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI21_CHPRI field. */
#define DMA_RD_DCHPRI21_CHPRI(base) ((DMA_DCHPRI21_REG(base) & DMA_DCHPRI21_CHPRI_MASK) >> DMA_DCHPRI21_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI21_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI21_REG(base), DMA_DCHPRI21_CHPRI_SHIFT, DMA_DCHPRI21_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI21_CHPRI(base, value) (DMA_RMW_DCHPRI21(base, DMA_DCHPRI21_CHPRI_MASK, DMA_DCHPRI21_CHPRI(value)))
#define DMA_BWR_DCHPRI21_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI21_REG(base), ((uint8_t)(value) << DMA_DCHPRI21_CHPRI_SHIFT), DMA_DCHPRI21_CHPRI_SHIFT, DMA_DCHPRI21_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI21, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI21_GRPPRI field. */
#define DMA_RD_DCHPRI21_GRPPRI(base) ((DMA_DCHPRI21_REG(base) & DMA_DCHPRI21_GRPPRI_MASK) >> DMA_DCHPRI21_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI21_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI21_REG(base), DMA_DCHPRI21_GRPPRI_SHIFT, DMA_DCHPRI21_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI21, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI21_DPA field. */
#define DMA_RD_DCHPRI21_DPA(base) ((DMA_DCHPRI21_REG(base) & DMA_DCHPRI21_DPA_MASK) >> DMA_DCHPRI21_DPA_SHIFT)
#define DMA_BRD_DCHPRI21_DPA(base) (BME_UBFX8(&DMA_DCHPRI21_REG(base), DMA_DCHPRI21_DPA_SHIFT, DMA_DCHPRI21_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI21_DPA(base, value) (DMA_RMW_DCHPRI21(base, DMA_DCHPRI21_DPA_MASK, DMA_DCHPRI21_DPA(value)))
#define DMA_BWR_DCHPRI21_DPA(base, value) (BME_BFI8(&DMA_DCHPRI21_REG(base), ((uint8_t)(value) << DMA_DCHPRI21_DPA_SHIFT), DMA_DCHPRI21_DPA_SHIFT, DMA_DCHPRI21_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI21, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI21_ECP field. */
#define DMA_RD_DCHPRI21_ECP(base) ((DMA_DCHPRI21_REG(base) & DMA_DCHPRI21_ECP_MASK) >> DMA_DCHPRI21_ECP_SHIFT)
#define DMA_BRD_DCHPRI21_ECP(base) (BME_UBFX8(&DMA_DCHPRI21_REG(base), DMA_DCHPRI21_ECP_SHIFT, DMA_DCHPRI21_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI21_ECP(base, value) (DMA_RMW_DCHPRI21(base, DMA_DCHPRI21_ECP_MASK, DMA_DCHPRI21_ECP(value)))
#define DMA_BWR_DCHPRI21_ECP(base, value) (BME_BFI8(&DMA_DCHPRI21_REG(base), ((uint8_t)(value) << DMA_DCHPRI21_ECP_SHIFT), DMA_DCHPRI21_ECP_SHIFT, DMA_DCHPRI21_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI20 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI20 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI20 register
 */
/*@{*/
#define DMA_RD_DCHPRI20(base)    (DMA_DCHPRI20_REG(base))
#define DMA_WR_DCHPRI20(base, value) (DMA_DCHPRI20_REG(base) = (value))
#define DMA_RMW_DCHPRI20(base, mask, value) (DMA_WR_DCHPRI20(base, (DMA_RD_DCHPRI20(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI20(base, value) (BME_OR8(&DMA_DCHPRI20_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI20(base, value) (BME_AND8(&DMA_DCHPRI20_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI20(base, value) (BME_XOR8(&DMA_DCHPRI20_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI20 bitfields
 */

/*!
 * @name Register DMA_DCHPRI20, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI20_CHPRI field. */
#define DMA_RD_DCHPRI20_CHPRI(base) ((DMA_DCHPRI20_REG(base) & DMA_DCHPRI20_CHPRI_MASK) >> DMA_DCHPRI20_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI20_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI20_REG(base), DMA_DCHPRI20_CHPRI_SHIFT, DMA_DCHPRI20_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI20_CHPRI(base, value) (DMA_RMW_DCHPRI20(base, DMA_DCHPRI20_CHPRI_MASK, DMA_DCHPRI20_CHPRI(value)))
#define DMA_BWR_DCHPRI20_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI20_REG(base), ((uint8_t)(value) << DMA_DCHPRI20_CHPRI_SHIFT), DMA_DCHPRI20_CHPRI_SHIFT, DMA_DCHPRI20_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI20, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI20_GRPPRI field. */
#define DMA_RD_DCHPRI20_GRPPRI(base) ((DMA_DCHPRI20_REG(base) & DMA_DCHPRI20_GRPPRI_MASK) >> DMA_DCHPRI20_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI20_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI20_REG(base), DMA_DCHPRI20_GRPPRI_SHIFT, DMA_DCHPRI20_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI20, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI20_DPA field. */
#define DMA_RD_DCHPRI20_DPA(base) ((DMA_DCHPRI20_REG(base) & DMA_DCHPRI20_DPA_MASK) >> DMA_DCHPRI20_DPA_SHIFT)
#define DMA_BRD_DCHPRI20_DPA(base) (BME_UBFX8(&DMA_DCHPRI20_REG(base), DMA_DCHPRI20_DPA_SHIFT, DMA_DCHPRI20_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI20_DPA(base, value) (DMA_RMW_DCHPRI20(base, DMA_DCHPRI20_DPA_MASK, DMA_DCHPRI20_DPA(value)))
#define DMA_BWR_DCHPRI20_DPA(base, value) (BME_BFI8(&DMA_DCHPRI20_REG(base), ((uint8_t)(value) << DMA_DCHPRI20_DPA_SHIFT), DMA_DCHPRI20_DPA_SHIFT, DMA_DCHPRI20_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI20, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI20_ECP field. */
#define DMA_RD_DCHPRI20_ECP(base) ((DMA_DCHPRI20_REG(base) & DMA_DCHPRI20_ECP_MASK) >> DMA_DCHPRI20_ECP_SHIFT)
#define DMA_BRD_DCHPRI20_ECP(base) (BME_UBFX8(&DMA_DCHPRI20_REG(base), DMA_DCHPRI20_ECP_SHIFT, DMA_DCHPRI20_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI20_ECP(base, value) (DMA_RMW_DCHPRI20(base, DMA_DCHPRI20_ECP_MASK, DMA_DCHPRI20_ECP(value)))
#define DMA_BWR_DCHPRI20_ECP(base, value) (BME_BFI8(&DMA_DCHPRI20_REG(base), ((uint8_t)(value) << DMA_DCHPRI20_ECP_SHIFT), DMA_DCHPRI20_ECP_SHIFT, DMA_DCHPRI20_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI27 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI27 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI27 register
 */
/*@{*/
#define DMA_RD_DCHPRI27(base)    (DMA_DCHPRI27_REG(base))
#define DMA_WR_DCHPRI27(base, value) (DMA_DCHPRI27_REG(base) = (value))
#define DMA_RMW_DCHPRI27(base, mask, value) (DMA_WR_DCHPRI27(base, (DMA_RD_DCHPRI27(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI27(base, value) (BME_OR8(&DMA_DCHPRI27_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI27(base, value) (BME_AND8(&DMA_DCHPRI27_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI27(base, value) (BME_XOR8(&DMA_DCHPRI27_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI27 bitfields
 */

/*!
 * @name Register DMA_DCHPRI27, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI27_CHPRI field. */
#define DMA_RD_DCHPRI27_CHPRI(base) ((DMA_DCHPRI27_REG(base) & DMA_DCHPRI27_CHPRI_MASK) >> DMA_DCHPRI27_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI27_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI27_REG(base), DMA_DCHPRI27_CHPRI_SHIFT, DMA_DCHPRI27_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI27_CHPRI(base, value) (DMA_RMW_DCHPRI27(base, DMA_DCHPRI27_CHPRI_MASK, DMA_DCHPRI27_CHPRI(value)))
#define DMA_BWR_DCHPRI27_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI27_REG(base), ((uint8_t)(value) << DMA_DCHPRI27_CHPRI_SHIFT), DMA_DCHPRI27_CHPRI_SHIFT, DMA_DCHPRI27_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI27, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI27_GRPPRI field. */
#define DMA_RD_DCHPRI27_GRPPRI(base) ((DMA_DCHPRI27_REG(base) & DMA_DCHPRI27_GRPPRI_MASK) >> DMA_DCHPRI27_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI27_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI27_REG(base), DMA_DCHPRI27_GRPPRI_SHIFT, DMA_DCHPRI27_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI27, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI27_DPA field. */
#define DMA_RD_DCHPRI27_DPA(base) ((DMA_DCHPRI27_REG(base) & DMA_DCHPRI27_DPA_MASK) >> DMA_DCHPRI27_DPA_SHIFT)
#define DMA_BRD_DCHPRI27_DPA(base) (BME_UBFX8(&DMA_DCHPRI27_REG(base), DMA_DCHPRI27_DPA_SHIFT, DMA_DCHPRI27_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI27_DPA(base, value) (DMA_RMW_DCHPRI27(base, DMA_DCHPRI27_DPA_MASK, DMA_DCHPRI27_DPA(value)))
#define DMA_BWR_DCHPRI27_DPA(base, value) (BME_BFI8(&DMA_DCHPRI27_REG(base), ((uint8_t)(value) << DMA_DCHPRI27_DPA_SHIFT), DMA_DCHPRI27_DPA_SHIFT, DMA_DCHPRI27_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI27, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI27_ECP field. */
#define DMA_RD_DCHPRI27_ECP(base) ((DMA_DCHPRI27_REG(base) & DMA_DCHPRI27_ECP_MASK) >> DMA_DCHPRI27_ECP_SHIFT)
#define DMA_BRD_DCHPRI27_ECP(base) (BME_UBFX8(&DMA_DCHPRI27_REG(base), DMA_DCHPRI27_ECP_SHIFT, DMA_DCHPRI27_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI27_ECP(base, value) (DMA_RMW_DCHPRI27(base, DMA_DCHPRI27_ECP_MASK, DMA_DCHPRI27_ECP(value)))
#define DMA_BWR_DCHPRI27_ECP(base, value) (BME_BFI8(&DMA_DCHPRI27_REG(base), ((uint8_t)(value) << DMA_DCHPRI27_ECP_SHIFT), DMA_DCHPRI27_ECP_SHIFT, DMA_DCHPRI27_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI26 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI26 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI26 register
 */
/*@{*/
#define DMA_RD_DCHPRI26(base)    (DMA_DCHPRI26_REG(base))
#define DMA_WR_DCHPRI26(base, value) (DMA_DCHPRI26_REG(base) = (value))
#define DMA_RMW_DCHPRI26(base, mask, value) (DMA_WR_DCHPRI26(base, (DMA_RD_DCHPRI26(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI26(base, value) (BME_OR8(&DMA_DCHPRI26_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI26(base, value) (BME_AND8(&DMA_DCHPRI26_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI26(base, value) (BME_XOR8(&DMA_DCHPRI26_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI26 bitfields
 */

/*!
 * @name Register DMA_DCHPRI26, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI26_CHPRI field. */
#define DMA_RD_DCHPRI26_CHPRI(base) ((DMA_DCHPRI26_REG(base) & DMA_DCHPRI26_CHPRI_MASK) >> DMA_DCHPRI26_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI26_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI26_REG(base), DMA_DCHPRI26_CHPRI_SHIFT, DMA_DCHPRI26_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI26_CHPRI(base, value) (DMA_RMW_DCHPRI26(base, DMA_DCHPRI26_CHPRI_MASK, DMA_DCHPRI26_CHPRI(value)))
#define DMA_BWR_DCHPRI26_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI26_REG(base), ((uint8_t)(value) << DMA_DCHPRI26_CHPRI_SHIFT), DMA_DCHPRI26_CHPRI_SHIFT, DMA_DCHPRI26_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI26, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI26_GRPPRI field. */
#define DMA_RD_DCHPRI26_GRPPRI(base) ((DMA_DCHPRI26_REG(base) & DMA_DCHPRI26_GRPPRI_MASK) >> DMA_DCHPRI26_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI26_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI26_REG(base), DMA_DCHPRI26_GRPPRI_SHIFT, DMA_DCHPRI26_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI26, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI26_DPA field. */
#define DMA_RD_DCHPRI26_DPA(base) ((DMA_DCHPRI26_REG(base) & DMA_DCHPRI26_DPA_MASK) >> DMA_DCHPRI26_DPA_SHIFT)
#define DMA_BRD_DCHPRI26_DPA(base) (BME_UBFX8(&DMA_DCHPRI26_REG(base), DMA_DCHPRI26_DPA_SHIFT, DMA_DCHPRI26_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI26_DPA(base, value) (DMA_RMW_DCHPRI26(base, DMA_DCHPRI26_DPA_MASK, DMA_DCHPRI26_DPA(value)))
#define DMA_BWR_DCHPRI26_DPA(base, value) (BME_BFI8(&DMA_DCHPRI26_REG(base), ((uint8_t)(value) << DMA_DCHPRI26_DPA_SHIFT), DMA_DCHPRI26_DPA_SHIFT, DMA_DCHPRI26_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI26, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI26_ECP field. */
#define DMA_RD_DCHPRI26_ECP(base) ((DMA_DCHPRI26_REG(base) & DMA_DCHPRI26_ECP_MASK) >> DMA_DCHPRI26_ECP_SHIFT)
#define DMA_BRD_DCHPRI26_ECP(base) (BME_UBFX8(&DMA_DCHPRI26_REG(base), DMA_DCHPRI26_ECP_SHIFT, DMA_DCHPRI26_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI26_ECP(base, value) (DMA_RMW_DCHPRI26(base, DMA_DCHPRI26_ECP_MASK, DMA_DCHPRI26_ECP(value)))
#define DMA_BWR_DCHPRI26_ECP(base, value) (BME_BFI8(&DMA_DCHPRI26_REG(base), ((uint8_t)(value) << DMA_DCHPRI26_ECP_SHIFT), DMA_DCHPRI26_ECP_SHIFT, DMA_DCHPRI26_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI25 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI25 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI25 register
 */
/*@{*/
#define DMA_RD_DCHPRI25(base)    (DMA_DCHPRI25_REG(base))
#define DMA_WR_DCHPRI25(base, value) (DMA_DCHPRI25_REG(base) = (value))
#define DMA_RMW_DCHPRI25(base, mask, value) (DMA_WR_DCHPRI25(base, (DMA_RD_DCHPRI25(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI25(base, value) (BME_OR8(&DMA_DCHPRI25_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI25(base, value) (BME_AND8(&DMA_DCHPRI25_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI25(base, value) (BME_XOR8(&DMA_DCHPRI25_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI25 bitfields
 */

/*!
 * @name Register DMA_DCHPRI25, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI25_CHPRI field. */
#define DMA_RD_DCHPRI25_CHPRI(base) ((DMA_DCHPRI25_REG(base) & DMA_DCHPRI25_CHPRI_MASK) >> DMA_DCHPRI25_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI25_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI25_REG(base), DMA_DCHPRI25_CHPRI_SHIFT, DMA_DCHPRI25_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI25_CHPRI(base, value) (DMA_RMW_DCHPRI25(base, DMA_DCHPRI25_CHPRI_MASK, DMA_DCHPRI25_CHPRI(value)))
#define DMA_BWR_DCHPRI25_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI25_REG(base), ((uint8_t)(value) << DMA_DCHPRI25_CHPRI_SHIFT), DMA_DCHPRI25_CHPRI_SHIFT, DMA_DCHPRI25_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI25, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI25_GRPPRI field. */
#define DMA_RD_DCHPRI25_GRPPRI(base) ((DMA_DCHPRI25_REG(base) & DMA_DCHPRI25_GRPPRI_MASK) >> DMA_DCHPRI25_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI25_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI25_REG(base), DMA_DCHPRI25_GRPPRI_SHIFT, DMA_DCHPRI25_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI25, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI25_DPA field. */
#define DMA_RD_DCHPRI25_DPA(base) ((DMA_DCHPRI25_REG(base) & DMA_DCHPRI25_DPA_MASK) >> DMA_DCHPRI25_DPA_SHIFT)
#define DMA_BRD_DCHPRI25_DPA(base) (BME_UBFX8(&DMA_DCHPRI25_REG(base), DMA_DCHPRI25_DPA_SHIFT, DMA_DCHPRI25_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI25_DPA(base, value) (DMA_RMW_DCHPRI25(base, DMA_DCHPRI25_DPA_MASK, DMA_DCHPRI25_DPA(value)))
#define DMA_BWR_DCHPRI25_DPA(base, value) (BME_BFI8(&DMA_DCHPRI25_REG(base), ((uint8_t)(value) << DMA_DCHPRI25_DPA_SHIFT), DMA_DCHPRI25_DPA_SHIFT, DMA_DCHPRI25_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI25, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI25_ECP field. */
#define DMA_RD_DCHPRI25_ECP(base) ((DMA_DCHPRI25_REG(base) & DMA_DCHPRI25_ECP_MASK) >> DMA_DCHPRI25_ECP_SHIFT)
#define DMA_BRD_DCHPRI25_ECP(base) (BME_UBFX8(&DMA_DCHPRI25_REG(base), DMA_DCHPRI25_ECP_SHIFT, DMA_DCHPRI25_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI25_ECP(base, value) (DMA_RMW_DCHPRI25(base, DMA_DCHPRI25_ECP_MASK, DMA_DCHPRI25_ECP(value)))
#define DMA_BWR_DCHPRI25_ECP(base, value) (BME_BFI8(&DMA_DCHPRI25_REG(base), ((uint8_t)(value) << DMA_DCHPRI25_ECP_SHIFT), DMA_DCHPRI25_ECP_SHIFT, DMA_DCHPRI25_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI24 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI24 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI24 register
 */
/*@{*/
#define DMA_RD_DCHPRI24(base)    (DMA_DCHPRI24_REG(base))
#define DMA_WR_DCHPRI24(base, value) (DMA_DCHPRI24_REG(base) = (value))
#define DMA_RMW_DCHPRI24(base, mask, value) (DMA_WR_DCHPRI24(base, (DMA_RD_DCHPRI24(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI24(base, value) (BME_OR8(&DMA_DCHPRI24_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI24(base, value) (BME_AND8(&DMA_DCHPRI24_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI24(base, value) (BME_XOR8(&DMA_DCHPRI24_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI24 bitfields
 */

/*!
 * @name Register DMA_DCHPRI24, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI24_CHPRI field. */
#define DMA_RD_DCHPRI24_CHPRI(base) ((DMA_DCHPRI24_REG(base) & DMA_DCHPRI24_CHPRI_MASK) >> DMA_DCHPRI24_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI24_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI24_REG(base), DMA_DCHPRI24_CHPRI_SHIFT, DMA_DCHPRI24_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI24_CHPRI(base, value) (DMA_RMW_DCHPRI24(base, DMA_DCHPRI24_CHPRI_MASK, DMA_DCHPRI24_CHPRI(value)))
#define DMA_BWR_DCHPRI24_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI24_REG(base), ((uint8_t)(value) << DMA_DCHPRI24_CHPRI_SHIFT), DMA_DCHPRI24_CHPRI_SHIFT, DMA_DCHPRI24_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI24, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI24_GRPPRI field. */
#define DMA_RD_DCHPRI24_GRPPRI(base) ((DMA_DCHPRI24_REG(base) & DMA_DCHPRI24_GRPPRI_MASK) >> DMA_DCHPRI24_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI24_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI24_REG(base), DMA_DCHPRI24_GRPPRI_SHIFT, DMA_DCHPRI24_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI24, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI24_DPA field. */
#define DMA_RD_DCHPRI24_DPA(base) ((DMA_DCHPRI24_REG(base) & DMA_DCHPRI24_DPA_MASK) >> DMA_DCHPRI24_DPA_SHIFT)
#define DMA_BRD_DCHPRI24_DPA(base) (BME_UBFX8(&DMA_DCHPRI24_REG(base), DMA_DCHPRI24_DPA_SHIFT, DMA_DCHPRI24_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI24_DPA(base, value) (DMA_RMW_DCHPRI24(base, DMA_DCHPRI24_DPA_MASK, DMA_DCHPRI24_DPA(value)))
#define DMA_BWR_DCHPRI24_DPA(base, value) (BME_BFI8(&DMA_DCHPRI24_REG(base), ((uint8_t)(value) << DMA_DCHPRI24_DPA_SHIFT), DMA_DCHPRI24_DPA_SHIFT, DMA_DCHPRI24_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI24, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI24_ECP field. */
#define DMA_RD_DCHPRI24_ECP(base) ((DMA_DCHPRI24_REG(base) & DMA_DCHPRI24_ECP_MASK) >> DMA_DCHPRI24_ECP_SHIFT)
#define DMA_BRD_DCHPRI24_ECP(base) (BME_UBFX8(&DMA_DCHPRI24_REG(base), DMA_DCHPRI24_ECP_SHIFT, DMA_DCHPRI24_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI24_ECP(base, value) (DMA_RMW_DCHPRI24(base, DMA_DCHPRI24_ECP_MASK, DMA_DCHPRI24_ECP(value)))
#define DMA_BWR_DCHPRI24_ECP(base, value) (BME_BFI8(&DMA_DCHPRI24_REG(base), ((uint8_t)(value) << DMA_DCHPRI24_ECP_SHIFT), DMA_DCHPRI24_ECP_SHIFT, DMA_DCHPRI24_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI31 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI31 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI31 register
 */
/*@{*/
#define DMA_RD_DCHPRI31(base)    (DMA_DCHPRI31_REG(base))
#define DMA_WR_DCHPRI31(base, value) (DMA_DCHPRI31_REG(base) = (value))
#define DMA_RMW_DCHPRI31(base, mask, value) (DMA_WR_DCHPRI31(base, (DMA_RD_DCHPRI31(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI31(base, value) (BME_OR8(&DMA_DCHPRI31_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI31(base, value) (BME_AND8(&DMA_DCHPRI31_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI31(base, value) (BME_XOR8(&DMA_DCHPRI31_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI31 bitfields
 */

/*!
 * @name Register DMA_DCHPRI31, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI31_CHPRI field. */
#define DMA_RD_DCHPRI31_CHPRI(base) ((DMA_DCHPRI31_REG(base) & DMA_DCHPRI31_CHPRI_MASK) >> DMA_DCHPRI31_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI31_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI31_REG(base), DMA_DCHPRI31_CHPRI_SHIFT, DMA_DCHPRI31_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI31_CHPRI(base, value) (DMA_RMW_DCHPRI31(base, DMA_DCHPRI31_CHPRI_MASK, DMA_DCHPRI31_CHPRI(value)))
#define DMA_BWR_DCHPRI31_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI31_REG(base), ((uint8_t)(value) << DMA_DCHPRI31_CHPRI_SHIFT), DMA_DCHPRI31_CHPRI_SHIFT, DMA_DCHPRI31_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI31, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI31_GRPPRI field. */
#define DMA_RD_DCHPRI31_GRPPRI(base) ((DMA_DCHPRI31_REG(base) & DMA_DCHPRI31_GRPPRI_MASK) >> DMA_DCHPRI31_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI31_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI31_REG(base), DMA_DCHPRI31_GRPPRI_SHIFT, DMA_DCHPRI31_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI31, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI31_DPA field. */
#define DMA_RD_DCHPRI31_DPA(base) ((DMA_DCHPRI31_REG(base) & DMA_DCHPRI31_DPA_MASK) >> DMA_DCHPRI31_DPA_SHIFT)
#define DMA_BRD_DCHPRI31_DPA(base) (BME_UBFX8(&DMA_DCHPRI31_REG(base), DMA_DCHPRI31_DPA_SHIFT, DMA_DCHPRI31_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI31_DPA(base, value) (DMA_RMW_DCHPRI31(base, DMA_DCHPRI31_DPA_MASK, DMA_DCHPRI31_DPA(value)))
#define DMA_BWR_DCHPRI31_DPA(base, value) (BME_BFI8(&DMA_DCHPRI31_REG(base), ((uint8_t)(value) << DMA_DCHPRI31_DPA_SHIFT), DMA_DCHPRI31_DPA_SHIFT, DMA_DCHPRI31_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI31, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI31_ECP field. */
#define DMA_RD_DCHPRI31_ECP(base) ((DMA_DCHPRI31_REG(base) & DMA_DCHPRI31_ECP_MASK) >> DMA_DCHPRI31_ECP_SHIFT)
#define DMA_BRD_DCHPRI31_ECP(base) (BME_UBFX8(&DMA_DCHPRI31_REG(base), DMA_DCHPRI31_ECP_SHIFT, DMA_DCHPRI31_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI31_ECP(base, value) (DMA_RMW_DCHPRI31(base, DMA_DCHPRI31_ECP_MASK, DMA_DCHPRI31_ECP(value)))
#define DMA_BWR_DCHPRI31_ECP(base, value) (BME_BFI8(&DMA_DCHPRI31_REG(base), ((uint8_t)(value) << DMA_DCHPRI31_ECP_SHIFT), DMA_DCHPRI31_ECP_SHIFT, DMA_DCHPRI31_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI30 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI30 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI30 register
 */
/*@{*/
#define DMA_RD_DCHPRI30(base)    (DMA_DCHPRI30_REG(base))
#define DMA_WR_DCHPRI30(base, value) (DMA_DCHPRI30_REG(base) = (value))
#define DMA_RMW_DCHPRI30(base, mask, value) (DMA_WR_DCHPRI30(base, (DMA_RD_DCHPRI30(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI30(base, value) (BME_OR8(&DMA_DCHPRI30_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI30(base, value) (BME_AND8(&DMA_DCHPRI30_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI30(base, value) (BME_XOR8(&DMA_DCHPRI30_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI30 bitfields
 */

/*!
 * @name Register DMA_DCHPRI30, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI30_CHPRI field. */
#define DMA_RD_DCHPRI30_CHPRI(base) ((DMA_DCHPRI30_REG(base) & DMA_DCHPRI30_CHPRI_MASK) >> DMA_DCHPRI30_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI30_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI30_REG(base), DMA_DCHPRI30_CHPRI_SHIFT, DMA_DCHPRI30_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI30_CHPRI(base, value) (DMA_RMW_DCHPRI30(base, DMA_DCHPRI30_CHPRI_MASK, DMA_DCHPRI30_CHPRI(value)))
#define DMA_BWR_DCHPRI30_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI30_REG(base), ((uint8_t)(value) << DMA_DCHPRI30_CHPRI_SHIFT), DMA_DCHPRI30_CHPRI_SHIFT, DMA_DCHPRI30_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI30, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI30_GRPPRI field. */
#define DMA_RD_DCHPRI30_GRPPRI(base) ((DMA_DCHPRI30_REG(base) & DMA_DCHPRI30_GRPPRI_MASK) >> DMA_DCHPRI30_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI30_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI30_REG(base), DMA_DCHPRI30_GRPPRI_SHIFT, DMA_DCHPRI30_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI30, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI30_DPA field. */
#define DMA_RD_DCHPRI30_DPA(base) ((DMA_DCHPRI30_REG(base) & DMA_DCHPRI30_DPA_MASK) >> DMA_DCHPRI30_DPA_SHIFT)
#define DMA_BRD_DCHPRI30_DPA(base) (BME_UBFX8(&DMA_DCHPRI30_REG(base), DMA_DCHPRI30_DPA_SHIFT, DMA_DCHPRI30_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI30_DPA(base, value) (DMA_RMW_DCHPRI30(base, DMA_DCHPRI30_DPA_MASK, DMA_DCHPRI30_DPA(value)))
#define DMA_BWR_DCHPRI30_DPA(base, value) (BME_BFI8(&DMA_DCHPRI30_REG(base), ((uint8_t)(value) << DMA_DCHPRI30_DPA_SHIFT), DMA_DCHPRI30_DPA_SHIFT, DMA_DCHPRI30_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI30, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI30_ECP field. */
#define DMA_RD_DCHPRI30_ECP(base) ((DMA_DCHPRI30_REG(base) & DMA_DCHPRI30_ECP_MASK) >> DMA_DCHPRI30_ECP_SHIFT)
#define DMA_BRD_DCHPRI30_ECP(base) (BME_UBFX8(&DMA_DCHPRI30_REG(base), DMA_DCHPRI30_ECP_SHIFT, DMA_DCHPRI30_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI30_ECP(base, value) (DMA_RMW_DCHPRI30(base, DMA_DCHPRI30_ECP_MASK, DMA_DCHPRI30_ECP(value)))
#define DMA_BWR_DCHPRI30_ECP(base, value) (BME_BFI8(&DMA_DCHPRI30_REG(base), ((uint8_t)(value) << DMA_DCHPRI30_ECP_SHIFT), DMA_DCHPRI30_ECP_SHIFT, DMA_DCHPRI30_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI29 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI29 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI29 register
 */
/*@{*/
#define DMA_RD_DCHPRI29(base)    (DMA_DCHPRI29_REG(base))
#define DMA_WR_DCHPRI29(base, value) (DMA_DCHPRI29_REG(base) = (value))
#define DMA_RMW_DCHPRI29(base, mask, value) (DMA_WR_DCHPRI29(base, (DMA_RD_DCHPRI29(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI29(base, value) (BME_OR8(&DMA_DCHPRI29_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI29(base, value) (BME_AND8(&DMA_DCHPRI29_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI29(base, value) (BME_XOR8(&DMA_DCHPRI29_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI29 bitfields
 */

/*!
 * @name Register DMA_DCHPRI29, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI29_CHPRI field. */
#define DMA_RD_DCHPRI29_CHPRI(base) ((DMA_DCHPRI29_REG(base) & DMA_DCHPRI29_CHPRI_MASK) >> DMA_DCHPRI29_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI29_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI29_REG(base), DMA_DCHPRI29_CHPRI_SHIFT, DMA_DCHPRI29_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI29_CHPRI(base, value) (DMA_RMW_DCHPRI29(base, DMA_DCHPRI29_CHPRI_MASK, DMA_DCHPRI29_CHPRI(value)))
#define DMA_BWR_DCHPRI29_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI29_REG(base), ((uint8_t)(value) << DMA_DCHPRI29_CHPRI_SHIFT), DMA_DCHPRI29_CHPRI_SHIFT, DMA_DCHPRI29_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI29, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI29_GRPPRI field. */
#define DMA_RD_DCHPRI29_GRPPRI(base) ((DMA_DCHPRI29_REG(base) & DMA_DCHPRI29_GRPPRI_MASK) >> DMA_DCHPRI29_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI29_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI29_REG(base), DMA_DCHPRI29_GRPPRI_SHIFT, DMA_DCHPRI29_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI29, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI29_DPA field. */
#define DMA_RD_DCHPRI29_DPA(base) ((DMA_DCHPRI29_REG(base) & DMA_DCHPRI29_DPA_MASK) >> DMA_DCHPRI29_DPA_SHIFT)
#define DMA_BRD_DCHPRI29_DPA(base) (BME_UBFX8(&DMA_DCHPRI29_REG(base), DMA_DCHPRI29_DPA_SHIFT, DMA_DCHPRI29_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI29_DPA(base, value) (DMA_RMW_DCHPRI29(base, DMA_DCHPRI29_DPA_MASK, DMA_DCHPRI29_DPA(value)))
#define DMA_BWR_DCHPRI29_DPA(base, value) (BME_BFI8(&DMA_DCHPRI29_REG(base), ((uint8_t)(value) << DMA_DCHPRI29_DPA_SHIFT), DMA_DCHPRI29_DPA_SHIFT, DMA_DCHPRI29_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI29, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI29_ECP field. */
#define DMA_RD_DCHPRI29_ECP(base) ((DMA_DCHPRI29_REG(base) & DMA_DCHPRI29_ECP_MASK) >> DMA_DCHPRI29_ECP_SHIFT)
#define DMA_BRD_DCHPRI29_ECP(base) (BME_UBFX8(&DMA_DCHPRI29_REG(base), DMA_DCHPRI29_ECP_SHIFT, DMA_DCHPRI29_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI29_ECP(base, value) (DMA_RMW_DCHPRI29(base, DMA_DCHPRI29_ECP_MASK, DMA_DCHPRI29_ECP(value)))
#define DMA_BWR_DCHPRI29_ECP(base, value) (BME_BFI8(&DMA_DCHPRI29_REG(base), ((uint8_t)(value) << DMA_DCHPRI29_ECP_SHIFT), DMA_DCHPRI29_ECP_SHIFT, DMA_DCHPRI29_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DCHPRI28 - Channel n Priority Register
 ******************************************************************************/

/*!
 * @brief DMA_DCHPRI28 - Channel n Priority Register (RW)
 *
 * Reset value: 0x00U
 *
 * When fixed-priority channel arbitration is enabled (CR[ERCA] = 0), the
 * contents of these registers define the unique priorities associated with each
 * channel within a group. The channel priorities are evaluated by numeric value; for
 * example, 0 is the lowest priority, 1 is the next higher priority, then 2, 3,
 * etc. Software must program the channel priorities with unique values; otherwise,
 * a configuration error is reported. The range of the priority value is limited
 * to the values of 0 through 15. When read, the GRPPRI bits of the DCHPRIn
 * register reflect the current priority level of the group of channels in which the
 * corresponding channel resides. GRPPRI bits are not affected by writes to the
 * DCHPRIn registers. The group priority is assigned in the DMA control register.
 */
/*!
 * @name Constants and macros for entire DMA_DCHPRI28 register
 */
/*@{*/
#define DMA_RD_DCHPRI28(base)    (DMA_DCHPRI28_REG(base))
#define DMA_WR_DCHPRI28(base, value) (DMA_DCHPRI28_REG(base) = (value))
#define DMA_RMW_DCHPRI28(base, mask, value) (DMA_WR_DCHPRI28(base, (DMA_RD_DCHPRI28(base) & ~(mask)) | (value)))
#define DMA_SET_DCHPRI28(base, value) (BME_OR8(&DMA_DCHPRI28_REG(base), (uint8_t)(value)))
#define DMA_CLR_DCHPRI28(base, value) (BME_AND8(&DMA_DCHPRI28_REG(base), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRI28(base, value) (BME_XOR8(&DMA_DCHPRI28_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_DCHPRI28 bitfields
 */

/*!
 * @name Register DMA_DCHPRI28, field CHPRI[3:0] (RW)
 *
 * Channel priority when fixed-priority arbitration is enabled Reset value for
 * the group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] = 0b01111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI28_CHPRI field. */
#define DMA_RD_DCHPRI28_CHPRI(base) ((DMA_DCHPRI28_REG(base) & DMA_DCHPRI28_CHPRI_MASK) >> DMA_DCHPRI28_CHPRI_SHIFT)
#define DMA_BRD_DCHPRI28_CHPRI(base) (BME_UBFX8(&DMA_DCHPRI28_REG(base), DMA_DCHPRI28_CHPRI_SHIFT, DMA_DCHPRI28_CHPRI_WIDTH))

/*! @brief Set the CHPRI field to a new value. */
#define DMA_WR_DCHPRI28_CHPRI(base, value) (DMA_RMW_DCHPRI28(base, DMA_DCHPRI28_CHPRI_MASK, DMA_DCHPRI28_CHPRI(value)))
#define DMA_BWR_DCHPRI28_CHPRI(base, value) (BME_BFI8(&DMA_DCHPRI28_REG(base), ((uint8_t)(value) << DMA_DCHPRI28_CHPRI_SHIFT), DMA_DCHPRI28_CHPRI_SHIFT, DMA_DCHPRI28_CHPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI28, field GRPPRI[5:4] (RO)
 *
 * Group priority assigned to this channel group when fixed-priority arbitration
 * is enabled. This field is read-only; writes are ignored. Reset value for the
 * group and channel priority fields, GRPPRI and CHPRI, is equal to the
 * corresponding channel number for each priority register, that is, DCHPRI31[GRPPRI] =
 * 0b01 and DCHPRI31[CHPRI] equals 0b1111.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI28_GRPPRI field. */
#define DMA_RD_DCHPRI28_GRPPRI(base) ((DMA_DCHPRI28_REG(base) & DMA_DCHPRI28_GRPPRI_MASK) >> DMA_DCHPRI28_GRPPRI_SHIFT)
#define DMA_BRD_DCHPRI28_GRPPRI(base) (BME_UBFX8(&DMA_DCHPRI28_REG(base), DMA_DCHPRI28_GRPPRI_SHIFT, DMA_DCHPRI28_GRPPRI_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI28, field DPA[6] (RW)
 *
 * Values:
 * - 0b0 - Channel n can suspend a lower priority channel.
 * - 0b1 - Channel n cannot suspend any channel, regardless of channel priority.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI28_DPA field. */
#define DMA_RD_DCHPRI28_DPA(base) ((DMA_DCHPRI28_REG(base) & DMA_DCHPRI28_DPA_MASK) >> DMA_DCHPRI28_DPA_SHIFT)
#define DMA_BRD_DCHPRI28_DPA(base) (BME_UBFX8(&DMA_DCHPRI28_REG(base), DMA_DCHPRI28_DPA_SHIFT, DMA_DCHPRI28_DPA_WIDTH))

/*! @brief Set the DPA field to a new value. */
#define DMA_WR_DCHPRI28_DPA(base, value) (DMA_RMW_DCHPRI28(base, DMA_DCHPRI28_DPA_MASK, DMA_DCHPRI28_DPA(value)))
#define DMA_BWR_DCHPRI28_DPA(base, value) (BME_BFI8(&DMA_DCHPRI28_REG(base), ((uint8_t)(value) << DMA_DCHPRI28_DPA_SHIFT), DMA_DCHPRI28_DPA_SHIFT, DMA_DCHPRI28_DPA_WIDTH))
/*@}*/

/*!
 * @name Register DMA_DCHPRI28, field ECP[7] (RW)
 *
 * Values:
 * - 0b0 - Channel n cannot be suspended by a higher priority channel's service
 *     request.
 * - 0b1 - Channel n can be temporarily suspended by the service request of a
 *     higher priority channel.
 */
/*@{*/
/*! @brief Read current value of the DMA_DCHPRI28_ECP field. */
#define DMA_RD_DCHPRI28_ECP(base) ((DMA_DCHPRI28_REG(base) & DMA_DCHPRI28_ECP_MASK) >> DMA_DCHPRI28_ECP_SHIFT)
#define DMA_BRD_DCHPRI28_ECP(base) (BME_UBFX8(&DMA_DCHPRI28_REG(base), DMA_DCHPRI28_ECP_SHIFT, DMA_DCHPRI28_ECP_WIDTH))

/*! @brief Set the ECP field to a new value. */
#define DMA_WR_DCHPRI28_ECP(base, value) (DMA_RMW_DCHPRI28(base, DMA_DCHPRI28_ECP_MASK, DMA_DCHPRI28_ECP(value)))
#define DMA_BWR_DCHPRI28_ECP(base, value) (BME_BFI8(&DMA_DCHPRI28_REG(base), ((uint8_t)(value) << DMA_DCHPRI28_ECP_SHIFT), DMA_DCHPRI28_ECP_SHIFT, DMA_DCHPRI28_ECP_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_SADDR - TCD Source Address
 ******************************************************************************/

/*!
 * @brief DMA_SADDR - TCD Source Address (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire DMA_SADDR register
 */
/*@{*/
#define DMA_RD_SADDR(base, index) (DMA_SADDR_REG(base, index))
#define DMA_WR_SADDR(base, index, value) (DMA_SADDR_REG(base, index) = (value))
#define DMA_RMW_SADDR(base, index, mask, value) (DMA_WR_SADDR(base, index, (DMA_RD_SADDR(base, index) & ~(mask)) | (value)))
#define DMA_SET_SADDR(base, index, value) (BME_OR32(&DMA_SADDR_REG(base, index), (uint32_t)(value)))
#define DMA_CLR_SADDR(base, index, value) (BME_AND32(&DMA_SADDR_REG(base, index), (uint32_t)(~(value))))
#define DMA_TOG_SADDR(base, index, value) (BME_XOR32(&DMA_SADDR_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * DMA_SOFF - TCD Signed Source Address Offset
 ******************************************************************************/

/*!
 * @brief DMA_SOFF - TCD Signed Source Address Offset (RW)
 *
 * Reset value: 0x0000U
 */
/*!
 * @name Constants and macros for entire DMA_SOFF register
 */
/*@{*/
#define DMA_RD_SOFF(base, index) (DMA_SOFF_REG(base, index))
#define DMA_WR_SOFF(base, index, value) (DMA_SOFF_REG(base, index) = (value))
#define DMA_RMW_SOFF(base, index, mask, value) (DMA_WR_SOFF(base, index, (DMA_RD_SOFF(base, index) & ~(mask)) | (value)))
#define DMA_SET_SOFF(base, index, value) (BME_OR16(&DMA_SOFF_REG(base, index), (uint16_t)(value)))
#define DMA_CLR_SOFF(base, index, value) (BME_AND16(&DMA_SOFF_REG(base, index), (uint16_t)(~(value))))
#define DMA_TOG_SOFF(base, index, value) (BME_XOR16(&DMA_SOFF_REG(base, index), (uint16_t)(value)))
/*@}*/

/*******************************************************************************
 * DMA_ATTR - TCD Transfer Attributes
 ******************************************************************************/

/*!
 * @brief DMA_ATTR - TCD Transfer Attributes (RW)
 *
 * Reset value: 0x0000U
 */
/*!
 * @name Constants and macros for entire DMA_ATTR register
 */
/*@{*/
#define DMA_RD_ATTR(base, index) (DMA_ATTR_REG(base, index))
#define DMA_WR_ATTR(base, index, value) (DMA_ATTR_REG(base, index) = (value))
#define DMA_RMW_ATTR(base, index, mask, value) (DMA_WR_ATTR(base, index, (DMA_RD_ATTR(base, index) & ~(mask)) | (value)))
#define DMA_SET_ATTR(base, index, value) (BME_OR16(&DMA_ATTR_REG(base, index), (uint16_t)(value)))
#define DMA_CLR_ATTR(base, index, value) (BME_AND16(&DMA_ATTR_REG(base, index), (uint16_t)(~(value))))
#define DMA_TOG_ATTR(base, index, value) (BME_XOR16(&DMA_ATTR_REG(base, index), (uint16_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_ATTR bitfields
 */

/*!
 * @name Register DMA_ATTR, field DSIZE[2:0] (RW)
 *
 * See the SSIZE definition
 */
/*@{*/
/*! @brief Read current value of the DMA_ATTR_DSIZE field. */
#define DMA_RD_ATTR_DSIZE(base, index) ((DMA_ATTR_REG(base, index) & DMA_ATTR_DSIZE_MASK) >> DMA_ATTR_DSIZE_SHIFT)
#define DMA_BRD_ATTR_DSIZE(base, index) (BME_UBFX16(&DMA_ATTR_REG(base, index), DMA_ATTR_DSIZE_SHIFT, DMA_ATTR_DSIZE_WIDTH))

/*! @brief Set the DSIZE field to a new value. */
#define DMA_WR_ATTR_DSIZE(base, index, value) (DMA_RMW_ATTR(base, index, DMA_ATTR_DSIZE_MASK, DMA_ATTR_DSIZE(value)))
#define DMA_BWR_ATTR_DSIZE(base, index, value) (BME_BFI16(&DMA_ATTR_REG(base, index), ((uint16_t)(value) << DMA_ATTR_DSIZE_SHIFT), DMA_ATTR_DSIZE_SHIFT, DMA_ATTR_DSIZE_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ATTR, field DMOD[7:3] (RW)
 *
 * See the SMOD definition
 */
/*@{*/
/*! @brief Read current value of the DMA_ATTR_DMOD field. */
#define DMA_RD_ATTR_DMOD(base, index) ((DMA_ATTR_REG(base, index) & DMA_ATTR_DMOD_MASK) >> DMA_ATTR_DMOD_SHIFT)
#define DMA_BRD_ATTR_DMOD(base, index) (BME_UBFX16(&DMA_ATTR_REG(base, index), DMA_ATTR_DMOD_SHIFT, DMA_ATTR_DMOD_WIDTH))

/*! @brief Set the DMOD field to a new value. */
#define DMA_WR_ATTR_DMOD(base, index, value) (DMA_RMW_ATTR(base, index, DMA_ATTR_DMOD_MASK, DMA_ATTR_DMOD(value)))
#define DMA_BWR_ATTR_DMOD(base, index, value) (BME_BFI16(&DMA_ATTR_REG(base, index), ((uint16_t)(value) << DMA_ATTR_DMOD_SHIFT), DMA_ATTR_DMOD_SHIFT, DMA_ATTR_DMOD_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ATTR, field SSIZE[10:8] (RW)
 *
 * Using a Reserved value causes a configuration error.
 *
 * Values:
 * - 0b000 - 8-bit
 * - 0b001 - 16-bit
 * - 0b010 - 32-bit
 * - 0b011 - Reserved
 * - 0b100 - 16-byte burst
 * - 0b101 - 32-byte burst
 * - 0b110 - Reserved
 * - 0b111 - Reserved
 */
/*@{*/
/*! @brief Read current value of the DMA_ATTR_SSIZE field. */
#define DMA_RD_ATTR_SSIZE(base, index) ((DMA_ATTR_REG(base, index) & DMA_ATTR_SSIZE_MASK) >> DMA_ATTR_SSIZE_SHIFT)
#define DMA_BRD_ATTR_SSIZE(base, index) (BME_UBFX16(&DMA_ATTR_REG(base, index), DMA_ATTR_SSIZE_SHIFT, DMA_ATTR_SSIZE_WIDTH))

/*! @brief Set the SSIZE field to a new value. */
#define DMA_WR_ATTR_SSIZE(base, index, value) (DMA_RMW_ATTR(base, index, DMA_ATTR_SSIZE_MASK, DMA_ATTR_SSIZE(value)))
#define DMA_BWR_ATTR_SSIZE(base, index, value) (BME_BFI16(&DMA_ATTR_REG(base, index), ((uint16_t)(value) << DMA_ATTR_SSIZE_SHIFT), DMA_ATTR_SSIZE_SHIFT, DMA_ATTR_SSIZE_WIDTH))
/*@}*/

/*!
 * @name Register DMA_ATTR, field SMOD[15:11] (RW)
 *
 * Values:
 * - 0b00000 - Source address modulo feature is disabled
 */
/*@{*/
/*! @brief Read current value of the DMA_ATTR_SMOD field. */
#define DMA_RD_ATTR_SMOD(base, index) ((DMA_ATTR_REG(base, index) & DMA_ATTR_SMOD_MASK) >> DMA_ATTR_SMOD_SHIFT)
#define DMA_BRD_ATTR_SMOD(base, index) (BME_UBFX16(&DMA_ATTR_REG(base, index), DMA_ATTR_SMOD_SHIFT, DMA_ATTR_SMOD_WIDTH))

/*! @brief Set the SMOD field to a new value. */
#define DMA_WR_ATTR_SMOD(base, index, value) (DMA_RMW_ATTR(base, index, DMA_ATTR_SMOD_MASK, DMA_ATTR_SMOD(value)))
#define DMA_BWR_ATTR_SMOD(base, index, value) (BME_BFI16(&DMA_ATTR_REG(base, index), ((uint16_t)(value) << DMA_ATTR_SMOD_SHIFT), DMA_ATTR_SMOD_SHIFT, DMA_ATTR_SMOD_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_NBYTES_MLOFFYES - TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)
 ******************************************************************************/

/*!
 * @brief DMA_NBYTES_MLOFFYES - TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled) (RW)
 *
 * Reset value: 0x00000000U
 *
 * One of three registers (this register, TCD_NBYTES_MLNO, or
 * TCD_NBYTES_MLOFFNO), defines the number of bytes to transfer per request. Which register to use
 * depends on whether minor loop mapping is disabled, enabled but not used for
 * this channel, or enabled and used. TCD word 2 is defined as follows if: Minor
 * loop mapping is enabled (CR[EMLM] = 1) and Minor loop offset is enabled (SMLOE
 * or DMLOE = 1) If minor loop mapping is enabled and SMLOE and DMLOE are cleared,
 * then refer to the TCD_NBYTES_MLOFFNO register description. If minor loop
 * mapping is disabled, then refer to the TCD_NBYTES_MLNO register description.
 */
/*!
 * @name Constants and macros for entire DMA_NBYTES_MLOFFYES register
 */
/*@{*/
#define DMA_RD_NBYTES_MLOFFYES(base, index) (DMA_NBYTES_MLOFFYES_REG(base, index))
#define DMA_WR_NBYTES_MLOFFYES(base, index, value) (DMA_NBYTES_MLOFFYES_REG(base, index) = (value))
#define DMA_RMW_NBYTES_MLOFFYES(base, index, mask, value) (DMA_WR_NBYTES_MLOFFYES(base, index, (DMA_RD_NBYTES_MLOFFYES(base, index) & ~(mask)) | (value)))
#define DMA_SET_NBYTES_MLOFFYES(base, index, value) (BME_OR32(&DMA_NBYTES_MLOFFYES_REG(base, index), (uint32_t)(value)))
#define DMA_CLR_NBYTES_MLOFFYES(base, index, value) (BME_AND32(&DMA_NBYTES_MLOFFYES_REG(base, index), (uint32_t)(~(value))))
#define DMA_TOG_NBYTES_MLOFFYES(base, index, value) (BME_XOR32(&DMA_NBYTES_MLOFFYES_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_NBYTES_MLOFFYES bitfields
 */

/*!
 * @name Register DMA_NBYTES_MLOFFYES, field NBYTES[9:0] (RW)
 *
 * Number of bytes to be transferred in each service request of the channel. As
 * a channel activates, the appropriate TCD contents load into the eDMA engine,
 * and the appropriate reads and writes perform until the minor byte transfer
 * count has transferred. This is an indivisible operation and cannot be halted. It
 * can, however, be stalled by using the bandwidth control field, or via
 * preemption. After the minor count is exhausted, the SADDR and DADDR values are written
 * back into the TCD memory, the major iteration count is decremented and
 * restored to the TCD memory. If the major iteration count is completed, additional
 * processing is performed.
 */
/*@{*/
/*! @brief Read current value of the DMA_NBYTES_MLOFFYES_NBYTES field. */
#define DMA_RD_NBYTES_MLOFFYES_NBYTES(base, index) ((DMA_NBYTES_MLOFFYES_REG(base, index) & DMA_NBYTES_MLOFFYES_NBYTES_MASK) >> DMA_NBYTES_MLOFFYES_NBYTES_SHIFT)
#define DMA_BRD_NBYTES_MLOFFYES_NBYTES(base, index) (DMA_RD_NBYTES_MLOFFYES_NBYTES(base, index))

/*! @brief Set the NBYTES field to a new value. */
#define DMA_WR_NBYTES_MLOFFYES_NBYTES(base, index, value) (DMA_RMW_NBYTES_MLOFFYES(base, index, DMA_NBYTES_MLOFFYES_NBYTES_MASK, DMA_NBYTES_MLOFFYES_NBYTES(value)))
#define DMA_BWR_NBYTES_MLOFFYES_NBYTES(base, index, value) (DMA_WR_NBYTES_MLOFFYES_NBYTES(base, index, value))
/*@}*/

/*!
 * @name Register DMA_NBYTES_MLOFFYES, field MLOFF[29:10] (RW)
 */
/*@{*/
/*! @brief Read current value of the DMA_NBYTES_MLOFFYES_MLOFF field. */
#define DMA_RD_NBYTES_MLOFFYES_MLOFF(base, index) ((DMA_NBYTES_MLOFFYES_REG(base, index) & DMA_NBYTES_MLOFFYES_MLOFF_MASK) >> DMA_NBYTES_MLOFFYES_MLOFF_SHIFT)
#define DMA_BRD_NBYTES_MLOFFYES_MLOFF(base, index) (DMA_RD_NBYTES_MLOFFYES_MLOFF(base, index))

/*! @brief Set the MLOFF field to a new value. */
#define DMA_WR_NBYTES_MLOFFYES_MLOFF(base, index, value) (DMA_RMW_NBYTES_MLOFFYES(base, index, DMA_NBYTES_MLOFFYES_MLOFF_MASK, DMA_NBYTES_MLOFFYES_MLOFF(value)))
#define DMA_BWR_NBYTES_MLOFFYES_MLOFF(base, index, value) (DMA_WR_NBYTES_MLOFFYES_MLOFF(base, index, value))
/*@}*/

/*!
 * @name Register DMA_NBYTES_MLOFFYES, field DMLOE[30] (RW)
 *
 * Selects whether the minor loop offset is applied to the destination address
 * upon minor loop completion.
 *
 * Values:
 * - 0b0 - The minor loop offset is not applied to the DADDR
 * - 0b1 - The minor loop offset is applied to the DADDR
 */
/*@{*/
/*! @brief Read current value of the DMA_NBYTES_MLOFFYES_DMLOE field. */
#define DMA_RD_NBYTES_MLOFFYES_DMLOE(base, index) ((DMA_NBYTES_MLOFFYES_REG(base, index) & DMA_NBYTES_MLOFFYES_DMLOE_MASK) >> DMA_NBYTES_MLOFFYES_DMLOE_SHIFT)
#define DMA_BRD_NBYTES_MLOFFYES_DMLOE(base, index) (BME_UBFX32(&DMA_NBYTES_MLOFFYES_REG(base, index), DMA_NBYTES_MLOFFYES_DMLOE_SHIFT, DMA_NBYTES_MLOFFYES_DMLOE_WIDTH))

/*! @brief Set the DMLOE field to a new value. */
#define DMA_WR_NBYTES_MLOFFYES_DMLOE(base, index, value) (DMA_RMW_NBYTES_MLOFFYES(base, index, DMA_NBYTES_MLOFFYES_DMLOE_MASK, DMA_NBYTES_MLOFFYES_DMLOE(value)))
#define DMA_BWR_NBYTES_MLOFFYES_DMLOE(base, index, value) (BME_BFI32(&DMA_NBYTES_MLOFFYES_REG(base, index), ((uint32_t)(value) << DMA_NBYTES_MLOFFYES_DMLOE_SHIFT), DMA_NBYTES_MLOFFYES_DMLOE_SHIFT, DMA_NBYTES_MLOFFYES_DMLOE_WIDTH))
/*@}*/

/*!
 * @name Register DMA_NBYTES_MLOFFYES, field SMLOE[31] (RW)
 *
 * Selects whether the minor loop offset is applied to the source address upon
 * minor loop completion.
 *
 * Values:
 * - 0b0 - The minor loop offset is not applied to the SADDR
 * - 0b1 - The minor loop offset is applied to the SADDR
 */
/*@{*/
/*! @brief Read current value of the DMA_NBYTES_MLOFFYES_SMLOE field. */
#define DMA_RD_NBYTES_MLOFFYES_SMLOE(base, index) ((DMA_NBYTES_MLOFFYES_REG(base, index) & DMA_NBYTES_MLOFFYES_SMLOE_MASK) >> DMA_NBYTES_MLOFFYES_SMLOE_SHIFT)
#define DMA_BRD_NBYTES_MLOFFYES_SMLOE(base, index) (BME_UBFX32(&DMA_NBYTES_MLOFFYES_REG(base, index), DMA_NBYTES_MLOFFYES_SMLOE_SHIFT, DMA_NBYTES_MLOFFYES_SMLOE_WIDTH))

/*! @brief Set the SMLOE field to a new value. */
#define DMA_WR_NBYTES_MLOFFYES_SMLOE(base, index, value) (DMA_RMW_NBYTES_MLOFFYES(base, index, DMA_NBYTES_MLOFFYES_SMLOE_MASK, DMA_NBYTES_MLOFFYES_SMLOE(value)))
#define DMA_BWR_NBYTES_MLOFFYES_SMLOE(base, index, value) (BME_BFI32(&DMA_NBYTES_MLOFFYES_REG(base, index), ((uint32_t)(value) << DMA_NBYTES_MLOFFYES_SMLOE_SHIFT), DMA_NBYTES_MLOFFYES_SMLOE_SHIFT, DMA_NBYTES_MLOFFYES_SMLOE_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_NBYTES_MLOFFNO - TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)
 ******************************************************************************/

/*!
 * @brief DMA_NBYTES_MLOFFNO - TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled) (RW)
 *
 * Reset value: 0x00000000U
 *
 * One of three registers (this register, TCD_NBYTES_MLNO, or
 * TCD_NBYTES_MLOFFYES), defines the number of bytes to transfer per request. Which register to use
 * depends on whether minor loop mapping is disabled, enabled but not used for
 * this channel, or enabled and used. TCD word 2 is defined as follows if: Minor
 * loop mapping is enabled (CR[EMLM] = 1) and SMLOE = 0 and DMLOE = 0 If minor
 * loop mapping is enabled and SMLOE or DMLOE is set, then refer to the
 * TCD_NBYTES_MLOFFYES register description. If minor loop mapping is disabled, then refer to
 * the TCD_NBYTES_MLNO register description.
 */
/*!
 * @name Constants and macros for entire DMA_NBYTES_MLOFFNO register
 */
/*@{*/
#define DMA_RD_NBYTES_MLOFFNO(base, index) (DMA_NBYTES_MLOFFNO_REG(base, index))
#define DMA_WR_NBYTES_MLOFFNO(base, index, value) (DMA_NBYTES_MLOFFNO_REG(base, index) = (value))
#define DMA_RMW_NBYTES_MLOFFNO(base, index, mask, value) (DMA_WR_NBYTES_MLOFFNO(base, index, (DMA_RD_NBYTES_MLOFFNO(base, index) & ~(mask)) | (value)))
#define DMA_SET_NBYTES_MLOFFNO(base, index, value) (BME_OR32(&DMA_NBYTES_MLOFFNO_REG(base, index), (uint32_t)(value)))
#define DMA_CLR_NBYTES_MLOFFNO(base, index, value) (BME_AND32(&DMA_NBYTES_MLOFFNO_REG(base, index), (uint32_t)(~(value))))
#define DMA_TOG_NBYTES_MLOFFNO(base, index, value) (BME_XOR32(&DMA_NBYTES_MLOFFNO_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_NBYTES_MLOFFNO bitfields
 */

/*!
 * @name Register DMA_NBYTES_MLOFFNO, field NBYTES[29:0] (RW)
 *
 * Number of bytes to be transferred in each service request of the channel. As
 * a channel activates, the appropriate TCD contents load into the eDMA engine,
 * and the appropriate reads and writes perform until the minor byte transfer
 * count has transferred. This is an indivisible operation and cannot be halted. It
 * can, however, be stalled by using the bandwidth control field, or via
 * preemption. After the minor count is exhausted, the SADDR and DADDR values are written
 * back into the TCD memory, the major iteration count is decremented and
 * restored to the TCD memory. If the major iteration count is completed, additional
 * processing is performed.
 */
/*@{*/
/*! @brief Read current value of the DMA_NBYTES_MLOFFNO_NBYTES field. */
#define DMA_RD_NBYTES_MLOFFNO_NBYTES(base, index) ((DMA_NBYTES_MLOFFNO_REG(base, index) & DMA_NBYTES_MLOFFNO_NBYTES_MASK) >> DMA_NBYTES_MLOFFNO_NBYTES_SHIFT)
#define DMA_BRD_NBYTES_MLOFFNO_NBYTES(base, index) (DMA_RD_NBYTES_MLOFFNO_NBYTES(base, index))

/*! @brief Set the NBYTES field to a new value. */
#define DMA_WR_NBYTES_MLOFFNO_NBYTES(base, index, value) (DMA_RMW_NBYTES_MLOFFNO(base, index, DMA_NBYTES_MLOFFNO_NBYTES_MASK, DMA_NBYTES_MLOFFNO_NBYTES(value)))
#define DMA_BWR_NBYTES_MLOFFNO_NBYTES(base, index, value) (DMA_WR_NBYTES_MLOFFNO_NBYTES(base, index, value))
/*@}*/

/*!
 * @name Register DMA_NBYTES_MLOFFNO, field DMLOE[30] (RW)
 *
 * Selects whether the minor loop offset is applied to the destination address
 * upon minor loop completion.
 *
 * Values:
 * - 0b0 - The minor loop offset is not applied to the DADDR
 * - 0b1 - The minor loop offset is applied to the DADDR
 */
/*@{*/
/*! @brief Read current value of the DMA_NBYTES_MLOFFNO_DMLOE field. */
#define DMA_RD_NBYTES_MLOFFNO_DMLOE(base, index) ((DMA_NBYTES_MLOFFNO_REG(base, index) & DMA_NBYTES_MLOFFNO_DMLOE_MASK) >> DMA_NBYTES_MLOFFNO_DMLOE_SHIFT)
#define DMA_BRD_NBYTES_MLOFFNO_DMLOE(base, index) (BME_UBFX32(&DMA_NBYTES_MLOFFNO_REG(base, index), DMA_NBYTES_MLOFFNO_DMLOE_SHIFT, DMA_NBYTES_MLOFFNO_DMLOE_WIDTH))

/*! @brief Set the DMLOE field to a new value. */
#define DMA_WR_NBYTES_MLOFFNO_DMLOE(base, index, value) (DMA_RMW_NBYTES_MLOFFNO(base, index, DMA_NBYTES_MLOFFNO_DMLOE_MASK, DMA_NBYTES_MLOFFNO_DMLOE(value)))
#define DMA_BWR_NBYTES_MLOFFNO_DMLOE(base, index, value) (BME_BFI32(&DMA_NBYTES_MLOFFNO_REG(base, index), ((uint32_t)(value) << DMA_NBYTES_MLOFFNO_DMLOE_SHIFT), DMA_NBYTES_MLOFFNO_DMLOE_SHIFT, DMA_NBYTES_MLOFFNO_DMLOE_WIDTH))
/*@}*/

/*!
 * @name Register DMA_NBYTES_MLOFFNO, field SMLOE[31] (RW)
 *
 * Selects whether the minor loop offset is applied to the source address upon
 * minor loop completion.
 *
 * Values:
 * - 0b0 - The minor loop offset is not applied to the SADDR
 * - 0b1 - The minor loop offset is applied to the SADDR
 */
/*@{*/
/*! @brief Read current value of the DMA_NBYTES_MLOFFNO_SMLOE field. */
#define DMA_RD_NBYTES_MLOFFNO_SMLOE(base, index) ((DMA_NBYTES_MLOFFNO_REG(base, index) & DMA_NBYTES_MLOFFNO_SMLOE_MASK) >> DMA_NBYTES_MLOFFNO_SMLOE_SHIFT)
#define DMA_BRD_NBYTES_MLOFFNO_SMLOE(base, index) (BME_UBFX32(&DMA_NBYTES_MLOFFNO_REG(base, index), DMA_NBYTES_MLOFFNO_SMLOE_SHIFT, DMA_NBYTES_MLOFFNO_SMLOE_WIDTH))

/*! @brief Set the SMLOE field to a new value. */
#define DMA_WR_NBYTES_MLOFFNO_SMLOE(base, index, value) (DMA_RMW_NBYTES_MLOFFNO(base, index, DMA_NBYTES_MLOFFNO_SMLOE_MASK, DMA_NBYTES_MLOFFNO_SMLOE(value)))
#define DMA_BWR_NBYTES_MLOFFNO_SMLOE(base, index, value) (BME_BFI32(&DMA_NBYTES_MLOFFNO_REG(base, index), ((uint32_t)(value) << DMA_NBYTES_MLOFFNO_SMLOE_SHIFT), DMA_NBYTES_MLOFFNO_SMLOE_SHIFT, DMA_NBYTES_MLOFFNO_SMLOE_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_NBYTES_MLNO - TCD Minor Byte Count (Minor Loop Mapping Disabled)
 ******************************************************************************/

/*!
 * @brief DMA_NBYTES_MLNO - TCD Minor Byte Count (Minor Loop Mapping Disabled) (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register, or one of the next two registers (TCD_NBYTES_MLOFFNO,
 * TCD_NBYTES_MLOFFYES), defines the number of bytes to transfer per request. Which
 * register to use depends on whether minor loop mapping is disabled, enabled but not
 * used for this channel, or enabled and used. TCD word 2 is defined as follows
 * if: Minor loop mapping is disabled (CR[EMLM] = 0) If minor loop mapping is
 * enabled, see the TCD_NBYTES_MLOFFNO and TCD_NBYTES_MLOFFYES register descriptions
 * for the definition of TCD word 2.
 */
/*!
 * @name Constants and macros for entire DMA_NBYTES_MLNO register
 */
/*@{*/
#define DMA_RD_NBYTES_MLNO(base, index) (DMA_NBYTES_MLNO_REG(base, index))
#define DMA_WR_NBYTES_MLNO(base, index, value) (DMA_NBYTES_MLNO_REG(base, index) = (value))
#define DMA_RMW_NBYTES_MLNO(base, index, mask, value) (DMA_WR_NBYTES_MLNO(base, index, (DMA_RD_NBYTES_MLNO(base, index) & ~(mask)) | (value)))
#define DMA_SET_NBYTES_MLNO(base, index, value) (BME_OR32(&DMA_NBYTES_MLNO_REG(base, index), (uint32_t)(value)))
#define DMA_CLR_NBYTES_MLNO(base, index, value) (BME_AND32(&DMA_NBYTES_MLNO_REG(base, index), (uint32_t)(~(value))))
#define DMA_TOG_NBYTES_MLNO(base, index, value) (BME_XOR32(&DMA_NBYTES_MLNO_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * DMA_SLAST - TCD Last Source Address Adjustment
 ******************************************************************************/

/*!
 * @brief DMA_SLAST - TCD Last Source Address Adjustment (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire DMA_SLAST register
 */
/*@{*/
#define DMA_RD_SLAST(base, index) (DMA_SLAST_REG(base, index))
#define DMA_WR_SLAST(base, index, value) (DMA_SLAST_REG(base, index) = (value))
#define DMA_RMW_SLAST(base, index, mask, value) (DMA_WR_SLAST(base, index, (DMA_RD_SLAST(base, index) & ~(mask)) | (value)))
#define DMA_SET_SLAST(base, index, value) (BME_OR32(&DMA_SLAST_REG(base, index), (uint32_t)(value)))
#define DMA_CLR_SLAST(base, index, value) (BME_AND32(&DMA_SLAST_REG(base, index), (uint32_t)(~(value))))
#define DMA_TOG_SLAST(base, index, value) (BME_XOR32(&DMA_SLAST_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * DMA_DADDR - TCD Destination Address
 ******************************************************************************/

/*!
 * @brief DMA_DADDR - TCD Destination Address (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire DMA_DADDR register
 */
/*@{*/
#define DMA_RD_DADDR(base, index) (DMA_DADDR_REG(base, index))
#define DMA_WR_DADDR(base, index, value) (DMA_DADDR_REG(base, index) = (value))
#define DMA_RMW_DADDR(base, index, mask, value) (DMA_WR_DADDR(base, index, (DMA_RD_DADDR(base, index) & ~(mask)) | (value)))
#define DMA_SET_DADDR(base, index, value) (BME_OR32(&DMA_DADDR_REG(base, index), (uint32_t)(value)))
#define DMA_CLR_DADDR(base, index, value) (BME_AND32(&DMA_DADDR_REG(base, index), (uint32_t)(~(value))))
#define DMA_TOG_DADDR(base, index, value) (BME_XOR32(&DMA_DADDR_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * DMA_DOFF - TCD Signed Destination Address Offset
 ******************************************************************************/

/*!
 * @brief DMA_DOFF - TCD Signed Destination Address Offset (RW)
 *
 * Reset value: 0x0000U
 */
/*!
 * @name Constants and macros for entire DMA_DOFF register
 */
/*@{*/
#define DMA_RD_DOFF(base, index) (DMA_DOFF_REG(base, index))
#define DMA_WR_DOFF(base, index, value) (DMA_DOFF_REG(base, index) = (value))
#define DMA_RMW_DOFF(base, index, mask, value) (DMA_WR_DOFF(base, index, (DMA_RD_DOFF(base, index) & ~(mask)) | (value)))
#define DMA_SET_DOFF(base, index, value) (BME_OR16(&DMA_DOFF_REG(base, index), (uint16_t)(value)))
#define DMA_CLR_DOFF(base, index, value) (BME_AND16(&DMA_DOFF_REG(base, index), (uint16_t)(~(value))))
#define DMA_TOG_DOFF(base, index, value) (BME_XOR16(&DMA_DOFF_REG(base, index), (uint16_t)(value)))
/*@}*/

/*******************************************************************************
 * DMA_CITER_ELINKNO - TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)
 ******************************************************************************/

/*!
 * @brief DMA_CITER_ELINKNO - TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled) (RW)
 *
 * Reset value: 0x0000U
 *
 * If TCDn_CITER[ELINK] is cleared, the TCDn_CITER register is defined as
 * follows.
 */
/*!
 * @name Constants and macros for entire DMA_CITER_ELINKNO register
 */
/*@{*/
#define DMA_RD_CITER_ELINKNO(base, index) (DMA_CITER_ELINKNO_REG(base, index))
#define DMA_WR_CITER_ELINKNO(base, index, value) (DMA_CITER_ELINKNO_REG(base, index) = (value))
#define DMA_RMW_CITER_ELINKNO(base, index, mask, value) (DMA_WR_CITER_ELINKNO(base, index, (DMA_RD_CITER_ELINKNO(base, index) & ~(mask)) | (value)))
#define DMA_SET_CITER_ELINKNO(base, index, value) (BME_OR16(&DMA_CITER_ELINKNO_REG(base, index), (uint16_t)(value)))
#define DMA_CLR_CITER_ELINKNO(base, index, value) (BME_AND16(&DMA_CITER_ELINKNO_REG(base, index), (uint16_t)(~(value))))
#define DMA_TOG_CITER_ELINKNO(base, index, value) (BME_XOR16(&DMA_CITER_ELINKNO_REG(base, index), (uint16_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_CITER_ELINKNO bitfields
 */

/*!
 * @name Register DMA_CITER_ELINKNO, field CITER[14:0] (RW)
 *
 * This 9-bit (ELINK = 1) or 15-bit (ELINK = 0) count represents the current
 * major loop count for the channel. It is decremented each time the minor loop is
 * completed and updated in the transfer control descriptor memory. After the
 * major iteration count is exhausted, the channel performs a number of operations,
 * for example, final source and destination address calculations, optionally
 * generating an interrupt to signal channel completion before reloading the CITER
 * field from the Beginning Iteration Count (BITER) field. When the CITER field is
 * initially loaded by software, it must be set to the same value as that
 * contained in the BITER field. If the channel is configured to execute a single
 * service request, the initial values of BITER and CITER should be 0x0001.
 */
/*@{*/
/*! @brief Read current value of the DMA_CITER_ELINKNO_CITER field. */
#define DMA_RD_CITER_ELINKNO_CITER(base, index) ((DMA_CITER_ELINKNO_REG(base, index) & DMA_CITER_ELINKNO_CITER_MASK) >> DMA_CITER_ELINKNO_CITER_SHIFT)
#define DMA_BRD_CITER_ELINKNO_CITER(base, index) (DMA_RD_CITER_ELINKNO_CITER(base, index))

/*! @brief Set the CITER field to a new value. */
#define DMA_WR_CITER_ELINKNO_CITER(base, index, value) (DMA_RMW_CITER_ELINKNO(base, index, DMA_CITER_ELINKNO_CITER_MASK, DMA_CITER_ELINKNO_CITER(value)))
#define DMA_BWR_CITER_ELINKNO_CITER(base, index, value) (DMA_WR_CITER_ELINKNO_CITER(base, index, value))
/*@}*/

/*!
 * @name Register DMA_CITER_ELINKNO, field ELINK[15] (RW)
 *
 * As the channel completes the minor loop, this flag enables linking to another
 * channel, defined by the LINKCH field. The link target channel initiates a
 * channel service request via an internal mechanism that sets the TCDn_CSR[START]
 * bit of the specified channel. If channel linking is disabled, the CITER value
 * is extended to 15 bits in place of a link channel number. If the major loop is
 * exhausted, this link mechanism is suppressed in favor of the MAJORELINK
 * channel linking. This bit must be equal to the BITER[ELINK] bit; otherwise, a
 * configuration error is reported.
 *
 * Values:
 * - 0b0 - The channel-to-channel linking is disabled
 * - 0b1 - The channel-to-channel linking is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_CITER_ELINKNO_ELINK field. */
#define DMA_RD_CITER_ELINKNO_ELINK(base, index) ((DMA_CITER_ELINKNO_REG(base, index) & DMA_CITER_ELINKNO_ELINK_MASK) >> DMA_CITER_ELINKNO_ELINK_SHIFT)
#define DMA_BRD_CITER_ELINKNO_ELINK(base, index) (BME_UBFX16(&DMA_CITER_ELINKNO_REG(base, index), DMA_CITER_ELINKNO_ELINK_SHIFT, DMA_CITER_ELINKNO_ELINK_WIDTH))

/*! @brief Set the ELINK field to a new value. */
#define DMA_WR_CITER_ELINKNO_ELINK(base, index, value) (DMA_RMW_CITER_ELINKNO(base, index, DMA_CITER_ELINKNO_ELINK_MASK, DMA_CITER_ELINKNO_ELINK(value)))
#define DMA_BWR_CITER_ELINKNO_ELINK(base, index, value) (BME_BFI16(&DMA_CITER_ELINKNO_REG(base, index), ((uint16_t)(value) << DMA_CITER_ELINKNO_ELINK_SHIFT), DMA_CITER_ELINKNO_ELINK_SHIFT, DMA_CITER_ELINKNO_ELINK_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_CITER_ELINKYES - TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)
 ******************************************************************************/

/*!
 * @brief DMA_CITER_ELINKYES - TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled) (RW)
 *
 * Reset value: 0x0000U
 *
 * If TCDn_CITER[ELINK] is set, the TCDn_CITER register is defined as follows.
 */
/*!
 * @name Constants and macros for entire DMA_CITER_ELINKYES register
 */
/*@{*/
#define DMA_RD_CITER_ELINKYES(base, index) (DMA_CITER_ELINKYES_REG(base, index))
#define DMA_WR_CITER_ELINKYES(base, index, value) (DMA_CITER_ELINKYES_REG(base, index) = (value))
#define DMA_RMW_CITER_ELINKYES(base, index, mask, value) (DMA_WR_CITER_ELINKYES(base, index, (DMA_RD_CITER_ELINKYES(base, index) & ~(mask)) | (value)))
#define DMA_SET_CITER_ELINKYES(base, index, value) (BME_OR16(&DMA_CITER_ELINKYES_REG(base, index), (uint16_t)(value)))
#define DMA_CLR_CITER_ELINKYES(base, index, value) (BME_AND16(&DMA_CITER_ELINKYES_REG(base, index), (uint16_t)(~(value))))
#define DMA_TOG_CITER_ELINKYES(base, index, value) (BME_XOR16(&DMA_CITER_ELINKYES_REG(base, index), (uint16_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_CITER_ELINKYES bitfields
 */

/*!
 * @name Register DMA_CITER_ELINKYES, field CITER[8:0] (RW)
 *
 * This 9-bit (ELINK = 1) or 15-bit (ELINK = 0) count represents the current
 * major loop count for the channel. It is decremented each time the minor loop is
 * completed and updated in the transfer control descriptor memory. After the
 * major iteration count is exhausted, the channel performs a number of operations,
 * for example, final source and destination address calculations, optionally
 * generating an interrupt to signal channel completion before reloading the CITER
 * field from the Beginning Iteration Count (BITER) field. When the CITER field is
 * initially loaded by software, it must be set to the same value as that
 * contained in the BITER field. If the channel is configured to execute a single
 * service request, the initial values of BITER and CITER should be 0x0001.
 */
/*@{*/
/*! @brief Read current value of the DMA_CITER_ELINKYES_CITER field. */
#define DMA_RD_CITER_ELINKYES_CITER(base, index) ((DMA_CITER_ELINKYES_REG(base, index) & DMA_CITER_ELINKYES_CITER_MASK) >> DMA_CITER_ELINKYES_CITER_SHIFT)
#define DMA_BRD_CITER_ELINKYES_CITER(base, index) (DMA_RD_CITER_ELINKYES_CITER(base, index))

/*! @brief Set the CITER field to a new value. */
#define DMA_WR_CITER_ELINKYES_CITER(base, index, value) (DMA_RMW_CITER_ELINKYES(base, index, DMA_CITER_ELINKYES_CITER_MASK, DMA_CITER_ELINKYES_CITER(value)))
#define DMA_BWR_CITER_ELINKYES_CITER(base, index, value) (DMA_WR_CITER_ELINKYES_CITER(base, index, value))
/*@}*/

/*!
 * @name Register DMA_CITER_ELINKYES, field LINKCH[13:9] (RW)
 *
 * If channel-to-channel linking is enabled (ELINK = 1), then after the minor
 * loop is exhausted, the eDMA engine initiates a channel service request to the
 * channel defined by this field by setting that channel's TCDn_CSR[START] bit.
 */
/*@{*/
/*! @brief Read current value of the DMA_CITER_ELINKYES_LINKCH field. */
#define DMA_RD_CITER_ELINKYES_LINKCH(base, index) ((DMA_CITER_ELINKYES_REG(base, index) & DMA_CITER_ELINKYES_LINKCH_MASK) >> DMA_CITER_ELINKYES_LINKCH_SHIFT)
#define DMA_BRD_CITER_ELINKYES_LINKCH(base, index) (BME_UBFX16(&DMA_CITER_ELINKYES_REG(base, index), DMA_CITER_ELINKYES_LINKCH_SHIFT, DMA_CITER_ELINKYES_LINKCH_WIDTH))

/*! @brief Set the LINKCH field to a new value. */
#define DMA_WR_CITER_ELINKYES_LINKCH(base, index, value) (DMA_RMW_CITER_ELINKYES(base, index, DMA_CITER_ELINKYES_LINKCH_MASK, DMA_CITER_ELINKYES_LINKCH(value)))
#define DMA_BWR_CITER_ELINKYES_LINKCH(base, index, value) (BME_BFI16(&DMA_CITER_ELINKYES_REG(base, index), ((uint16_t)(value) << DMA_CITER_ELINKYES_LINKCH_SHIFT), DMA_CITER_ELINKYES_LINKCH_SHIFT, DMA_CITER_ELINKYES_LINKCH_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CITER_ELINKYES, field ELINK[15] (RW)
 *
 * As the channel completes the minor loop, this flag enables linking to another
 * channel, defined by the LINKCH field. The link target channel initiates a
 * channel service request via an internal mechanism that sets the TCDn_CSR[START]
 * bit of the specified channel. If channel linking is disabled, the CITER value
 * is extended to 15 bits in place of a link channel number. If the major loop is
 * exhausted, this link mechanism is suppressed in favor of the MAJORELINK
 * channel linking. This bit must be equal to the BITER[ELINK] bit; otherwise, a
 * configuration error is reported.
 *
 * Values:
 * - 0b0 - The channel-to-channel linking is disabled
 * - 0b1 - The channel-to-channel linking is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_CITER_ELINKYES_ELINK field. */
#define DMA_RD_CITER_ELINKYES_ELINK(base, index) ((DMA_CITER_ELINKYES_REG(base, index) & DMA_CITER_ELINKYES_ELINK_MASK) >> DMA_CITER_ELINKYES_ELINK_SHIFT)
#define DMA_BRD_CITER_ELINKYES_ELINK(base, index) (BME_UBFX16(&DMA_CITER_ELINKYES_REG(base, index), DMA_CITER_ELINKYES_ELINK_SHIFT, DMA_CITER_ELINKYES_ELINK_WIDTH))

/*! @brief Set the ELINK field to a new value. */
#define DMA_WR_CITER_ELINKYES_ELINK(base, index, value) (DMA_RMW_CITER_ELINKYES(base, index, DMA_CITER_ELINKYES_ELINK_MASK, DMA_CITER_ELINKYES_ELINK(value)))
#define DMA_BWR_CITER_ELINKYES_ELINK(base, index, value) (BME_BFI16(&DMA_CITER_ELINKYES_REG(base, index), ((uint16_t)(value) << DMA_CITER_ELINKYES_ELINK_SHIFT), DMA_CITER_ELINKYES_ELINK_SHIFT, DMA_CITER_ELINKYES_ELINK_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_DLAST_SGA - TCD Last Destination Address Adjustment/Scatter Gather Address
 ******************************************************************************/

/*!
 * @brief DMA_DLAST_SGA - TCD Last Destination Address Adjustment/Scatter Gather Address (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire DMA_DLAST_SGA register
 */
/*@{*/
#define DMA_RD_DLAST_SGA(base, index) (DMA_DLAST_SGA_REG(base, index))
#define DMA_WR_DLAST_SGA(base, index, value) (DMA_DLAST_SGA_REG(base, index) = (value))
#define DMA_RMW_DLAST_SGA(base, index, mask, value) (DMA_WR_DLAST_SGA(base, index, (DMA_RD_DLAST_SGA(base, index) & ~(mask)) | (value)))
#define DMA_SET_DLAST_SGA(base, index, value) (BME_OR32(&DMA_DLAST_SGA_REG(base, index), (uint32_t)(value)))
#define DMA_CLR_DLAST_SGA(base, index, value) (BME_AND32(&DMA_DLAST_SGA_REG(base, index), (uint32_t)(~(value))))
#define DMA_TOG_DLAST_SGA(base, index, value) (BME_XOR32(&DMA_DLAST_SGA_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * DMA_CSR - TCD Control and Status
 ******************************************************************************/

/*!
 * @brief DMA_CSR - TCD Control and Status (RW)
 *
 * Reset value: 0x0000U
 */
/*!
 * @name Constants and macros for entire DMA_CSR register
 */
/*@{*/
#define DMA_RD_CSR(base, index)  (DMA_CSR_REG(base, index))
#define DMA_WR_CSR(base, index, value) (DMA_CSR_REG(base, index) = (value))
#define DMA_RMW_CSR(base, index, mask, value) (DMA_WR_CSR(base, index, (DMA_RD_CSR(base, index) & ~(mask)) | (value)))
#define DMA_SET_CSR(base, index, value) (BME_OR16(&DMA_CSR_REG(base, index), (uint16_t)(value)))
#define DMA_CLR_CSR(base, index, value) (BME_AND16(&DMA_CSR_REG(base, index), (uint16_t)(~(value))))
#define DMA_TOG_CSR(base, index, value) (BME_XOR16(&DMA_CSR_REG(base, index), (uint16_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_CSR bitfields
 */

/*!
 * @name Register DMA_CSR, field START[0] (RW)
 *
 * If this flag is set, the channel is requesting service. The eDMA hardware
 * automatically clears this flag after the channel begins execution.
 *
 * Values:
 * - 0b0 - The channel is not explicitly started.
 * - 0b1 - The channel is explicitly started via a software initiated service
 *     request.
 */
/*@{*/
/*! @brief Read current value of the DMA_CSR_START field. */
#define DMA_RD_CSR_START(base, index) ((DMA_CSR_REG(base, index) & DMA_CSR_START_MASK) >> DMA_CSR_START_SHIFT)
#define DMA_BRD_CSR_START(base, index) (BME_UBFX16(&DMA_CSR_REG(base, index), DMA_CSR_START_SHIFT, DMA_CSR_START_WIDTH))

/*! @brief Set the START field to a new value. */
#define DMA_WR_CSR_START(base, index, value) (DMA_RMW_CSR(base, index, DMA_CSR_START_MASK, DMA_CSR_START(value)))
#define DMA_BWR_CSR_START(base, index, value) (BME_BFI16(&DMA_CSR_REG(base, index), ((uint16_t)(value) << DMA_CSR_START_SHIFT), DMA_CSR_START_SHIFT, DMA_CSR_START_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CSR, field INTMAJOR[1] (RW)
 *
 * If this flag is set, the channel generates an interrupt request by setting
 * the appropriate bit in the INT when the current major iteration count reaches
 * zero.
 *
 * Values:
 * - 0b0 - The end-of-major loop interrupt is disabled.
 * - 0b1 - The end-of-major loop interrupt is enabled.
 */
/*@{*/
/*! @brief Read current value of the DMA_CSR_INTMAJOR field. */
#define DMA_RD_CSR_INTMAJOR(base, index) ((DMA_CSR_REG(base, index) & DMA_CSR_INTMAJOR_MASK) >> DMA_CSR_INTMAJOR_SHIFT)
#define DMA_BRD_CSR_INTMAJOR(base, index) (BME_UBFX16(&DMA_CSR_REG(base, index), DMA_CSR_INTMAJOR_SHIFT, DMA_CSR_INTMAJOR_WIDTH))

/*! @brief Set the INTMAJOR field to a new value. */
#define DMA_WR_CSR_INTMAJOR(base, index, value) (DMA_RMW_CSR(base, index, DMA_CSR_INTMAJOR_MASK, DMA_CSR_INTMAJOR(value)))
#define DMA_BWR_CSR_INTMAJOR(base, index, value) (BME_BFI16(&DMA_CSR_REG(base, index), ((uint16_t)(value) << DMA_CSR_INTMAJOR_SHIFT), DMA_CSR_INTMAJOR_SHIFT, DMA_CSR_INTMAJOR_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CSR, field INTHALF[2] (RW)
 *
 * If this flag is set, the channel generates an interrupt request by setting
 * the appropriate bit in the INT register when the current major iteration count
 * reaches the halfway point. Specifically, the comparison performed by the eDMA
 * engine is (CITER == (BITER >> 1)). This halfway point interrupt request is
 * provided to support double-buffered, also known as ping-pong, schemes or other
 * types of data movement where the processor needs an early indication of the
 * transfer's progress. If BITER = 1, do not use INTHALF. Use INTMAJOR instead.
 *
 * Values:
 * - 0b0 - The half-point interrupt is disabled.
 * - 0b1 - The half-point interrupt is enabled.
 */
/*@{*/
/*! @brief Read current value of the DMA_CSR_INTHALF field. */
#define DMA_RD_CSR_INTHALF(base, index) ((DMA_CSR_REG(base, index) & DMA_CSR_INTHALF_MASK) >> DMA_CSR_INTHALF_SHIFT)
#define DMA_BRD_CSR_INTHALF(base, index) (BME_UBFX16(&DMA_CSR_REG(base, index), DMA_CSR_INTHALF_SHIFT, DMA_CSR_INTHALF_WIDTH))

/*! @brief Set the INTHALF field to a new value. */
#define DMA_WR_CSR_INTHALF(base, index, value) (DMA_RMW_CSR(base, index, DMA_CSR_INTHALF_MASK, DMA_CSR_INTHALF(value)))
#define DMA_BWR_CSR_INTHALF(base, index, value) (BME_BFI16(&DMA_CSR_REG(base, index), ((uint16_t)(value) << DMA_CSR_INTHALF_SHIFT), DMA_CSR_INTHALF_SHIFT, DMA_CSR_INTHALF_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CSR, field DREQ[3] (RW)
 *
 * If this flag is set, the eDMA hardware automatically clears the corresponding
 * ERQ bit when the current major iteration count reaches zero.
 *
 * Values:
 * - 0b0 - The channel's ERQ bit is not affected.
 * - 0b1 - The channel's ERQ bit is cleared when the major loop is complete.
 */
/*@{*/
/*! @brief Read current value of the DMA_CSR_DREQ field. */
#define DMA_RD_CSR_DREQ(base, index) ((DMA_CSR_REG(base, index) & DMA_CSR_DREQ_MASK) >> DMA_CSR_DREQ_SHIFT)
#define DMA_BRD_CSR_DREQ(base, index) (BME_UBFX16(&DMA_CSR_REG(base, index), DMA_CSR_DREQ_SHIFT, DMA_CSR_DREQ_WIDTH))

/*! @brief Set the DREQ field to a new value. */
#define DMA_WR_CSR_DREQ(base, index, value) (DMA_RMW_CSR(base, index, DMA_CSR_DREQ_MASK, DMA_CSR_DREQ(value)))
#define DMA_BWR_CSR_DREQ(base, index, value) (BME_BFI16(&DMA_CSR_REG(base, index), ((uint16_t)(value) << DMA_CSR_DREQ_SHIFT), DMA_CSR_DREQ_SHIFT, DMA_CSR_DREQ_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CSR, field ESG[4] (RW)
 *
 * As the channel completes the major loop, this flag enables scatter/gather
 * processing in the current channel. If enabled, the eDMA engine uses DLASTSGA as a
 * memory pointer to a 0-modulo-32 address containing a 32-byte data structure
 * loaded as the transfer control descriptor into the local memory. To support the
 * dynamic scatter/gather coherency model, this field is forced to zero when
 * written to while the TCDn_CSR[DONE] bit is set.
 *
 * Values:
 * - 0b0 - The current channel's TCD is normal format.
 * - 0b1 - The current channel's TCD specifies a scatter gather format. The
 *     DLASTSGA field provides a memory pointer to the next TCD to be loaded into
 *     this channel after the major loop completes its execution.
 */
/*@{*/
/*! @brief Read current value of the DMA_CSR_ESG field. */
#define DMA_RD_CSR_ESG(base, index) ((DMA_CSR_REG(base, index) & DMA_CSR_ESG_MASK) >> DMA_CSR_ESG_SHIFT)
#define DMA_BRD_CSR_ESG(base, index) (BME_UBFX16(&DMA_CSR_REG(base, index), DMA_CSR_ESG_SHIFT, DMA_CSR_ESG_WIDTH))

/*! @brief Set the ESG field to a new value. */
#define DMA_WR_CSR_ESG(base, index, value) (DMA_RMW_CSR(base, index, DMA_CSR_ESG_MASK, DMA_CSR_ESG(value)))
#define DMA_BWR_CSR_ESG(base, index, value) (BME_BFI16(&DMA_CSR_REG(base, index), ((uint16_t)(value) << DMA_CSR_ESG_SHIFT), DMA_CSR_ESG_SHIFT, DMA_CSR_ESG_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CSR, field MAJORELINK[5] (RW)
 *
 * As the channel completes the major loop, this flag enables the linking to
 * another channel, defined by MAJORLINKCH. The link target channel initiates a
 * channel service request via an internal mechanism that sets the TCDn_CSR[START]
 * bit of the specified channel. To support the dynamic linking coherency model,
 * this field is forced to zero when written to while the TCDn_CSR[DONE] bit is set.
 *
 * Values:
 * - 0b0 - The channel-to-channel linking is disabled.
 * - 0b1 - The channel-to-channel linking is enabled.
 */
/*@{*/
/*! @brief Read current value of the DMA_CSR_MAJORELINK field. */
#define DMA_RD_CSR_MAJORELINK(base, index) ((DMA_CSR_REG(base, index) & DMA_CSR_MAJORELINK_MASK) >> DMA_CSR_MAJORELINK_SHIFT)
#define DMA_BRD_CSR_MAJORELINK(base, index) (BME_UBFX16(&DMA_CSR_REG(base, index), DMA_CSR_MAJORELINK_SHIFT, DMA_CSR_MAJORELINK_WIDTH))

/*! @brief Set the MAJORELINK field to a new value. */
#define DMA_WR_CSR_MAJORELINK(base, index, value) (DMA_RMW_CSR(base, index, DMA_CSR_MAJORELINK_MASK, DMA_CSR_MAJORELINK(value)))
#define DMA_BWR_CSR_MAJORELINK(base, index, value) (BME_BFI16(&DMA_CSR_REG(base, index), ((uint16_t)(value) << DMA_CSR_MAJORELINK_SHIFT), DMA_CSR_MAJORELINK_SHIFT, DMA_CSR_MAJORELINK_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CSR, field ACTIVE[6] (RW)
 *
 * This flag signals the channel is currently in execution. It is set when
 * channel service begins, and is cleared by the eDMA as the minor loop completes or
 * when any error condition is detected.
 */
/*@{*/
/*! @brief Read current value of the DMA_CSR_ACTIVE field. */
#define DMA_RD_CSR_ACTIVE(base, index) ((DMA_CSR_REG(base, index) & DMA_CSR_ACTIVE_MASK) >> DMA_CSR_ACTIVE_SHIFT)
#define DMA_BRD_CSR_ACTIVE(base, index) (BME_UBFX16(&DMA_CSR_REG(base, index), DMA_CSR_ACTIVE_SHIFT, DMA_CSR_ACTIVE_WIDTH))

/*! @brief Set the ACTIVE field to a new value. */
#define DMA_WR_CSR_ACTIVE(base, index, value) (DMA_RMW_CSR(base, index, DMA_CSR_ACTIVE_MASK, DMA_CSR_ACTIVE(value)))
#define DMA_BWR_CSR_ACTIVE(base, index, value) (BME_BFI16(&DMA_CSR_REG(base, index), ((uint16_t)(value) << DMA_CSR_ACTIVE_SHIFT), DMA_CSR_ACTIVE_SHIFT, DMA_CSR_ACTIVE_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CSR, field DONE[7] (RW)
 *
 * This flag indicates the eDMA has completed the major loop. The eDMA engine
 * sets it as the CITER count reaches zero. The software clears it, or the hardware
 * when the channel is activated. This bit must be cleared to write the
 * MAJORELINK or ESG bits.
 */
/*@{*/
/*! @brief Read current value of the DMA_CSR_DONE field. */
#define DMA_RD_CSR_DONE(base, index) ((DMA_CSR_REG(base, index) & DMA_CSR_DONE_MASK) >> DMA_CSR_DONE_SHIFT)
#define DMA_BRD_CSR_DONE(base, index) (BME_UBFX16(&DMA_CSR_REG(base, index), DMA_CSR_DONE_SHIFT, DMA_CSR_DONE_WIDTH))

/*! @brief Set the DONE field to a new value. */
#define DMA_WR_CSR_DONE(base, index, value) (DMA_RMW_CSR(base, index, DMA_CSR_DONE_MASK, DMA_CSR_DONE(value)))
#define DMA_BWR_CSR_DONE(base, index, value) (BME_BFI16(&DMA_CSR_REG(base, index), ((uint16_t)(value) << DMA_CSR_DONE_SHIFT), DMA_CSR_DONE_SHIFT, DMA_CSR_DONE_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CSR, field MAJORLINKCH[12:8] (RW)
 *
 * If (MAJORELINK = 0) then: No channel-to-channel linking, or chaining, is
 * performed after the major loop counter is exhausted. Otherwise: After the major
 * loop counter is exhausted, the eDMA engine initiates a channel service request
 * at the channel defined by this field by setting that channel's TCDn_CSR[START]
 * bit.
 */
/*@{*/
/*! @brief Read current value of the DMA_CSR_MAJORLINKCH field. */
#define DMA_RD_CSR_MAJORLINKCH(base, index) ((DMA_CSR_REG(base, index) & DMA_CSR_MAJORLINKCH_MASK) >> DMA_CSR_MAJORLINKCH_SHIFT)
#define DMA_BRD_CSR_MAJORLINKCH(base, index) (BME_UBFX16(&DMA_CSR_REG(base, index), DMA_CSR_MAJORLINKCH_SHIFT, DMA_CSR_MAJORLINKCH_WIDTH))

/*! @brief Set the MAJORLINKCH field to a new value. */
#define DMA_WR_CSR_MAJORLINKCH(base, index, value) (DMA_RMW_CSR(base, index, DMA_CSR_MAJORLINKCH_MASK, DMA_CSR_MAJORLINKCH(value)))
#define DMA_BWR_CSR_MAJORLINKCH(base, index, value) (BME_BFI16(&DMA_CSR_REG(base, index), ((uint16_t)(value) << DMA_CSR_MAJORLINKCH_SHIFT), DMA_CSR_MAJORLINKCH_SHIFT, DMA_CSR_MAJORLINKCH_WIDTH))
/*@}*/

/*!
 * @name Register DMA_CSR, field BWC[15:14] (RW)
 *
 * Throttles the amount of bus bandwidth consumed by the eDMA. Generally, as the
 * eDMA processes the minor loop, it continuously generates read/write sequences
 * until the minor count is exhausted. This field forces the eDMA to stall after
 * the completion of each read/write access to control the bus request bandwidth
 * seen by the crossbar switch. If the source and destination sizes are equal,
 * this field is ignored between the first and second transfers and after the last
 * write of each minor loop. This behavior is a side effect of reducing start-up
 * latency.
 *
 * Values:
 * - 0b00 - No eDMA engine stalls.
 * - 0b01 - Reserved
 * - 0b10 - eDMA engine stalls for 4 cycles after each R/W.
 * - 0b11 - eDMA engine stalls for 8 cycles after each R/W.
 */
/*@{*/
/*! @brief Read current value of the DMA_CSR_BWC field. */
#define DMA_RD_CSR_BWC(base, index) ((DMA_CSR_REG(base, index) & DMA_CSR_BWC_MASK) >> DMA_CSR_BWC_SHIFT)
#define DMA_BRD_CSR_BWC(base, index) (BME_UBFX16(&DMA_CSR_REG(base, index), DMA_CSR_BWC_SHIFT, DMA_CSR_BWC_WIDTH))

/*! @brief Set the BWC field to a new value. */
#define DMA_WR_CSR_BWC(base, index, value) (DMA_RMW_CSR(base, index, DMA_CSR_BWC_MASK, DMA_CSR_BWC(value)))
#define DMA_BWR_CSR_BWC(base, index, value) (BME_BFI16(&DMA_CSR_REG(base, index), ((uint16_t)(value) << DMA_CSR_BWC_SHIFT), DMA_CSR_BWC_SHIFT, DMA_CSR_BWC_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_BITER_ELINKNO - TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)
 ******************************************************************************/

/*!
 * @brief DMA_BITER_ELINKNO - TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled) (RW)
 *
 * Reset value: 0x0000U
 *
 * If the TCDn_BITER[ELINK] bit is cleared, the TCDn_BITER register is defined
 * as follows.
 */
/*!
 * @name Constants and macros for entire DMA_BITER_ELINKNO register
 */
/*@{*/
#define DMA_RD_BITER_ELINKNO(base, index) (DMA_BITER_ELINKNO_REG(base, index))
#define DMA_WR_BITER_ELINKNO(base, index, value) (DMA_BITER_ELINKNO_REG(base, index) = (value))
#define DMA_RMW_BITER_ELINKNO(base, index, mask, value) (DMA_WR_BITER_ELINKNO(base, index, (DMA_RD_BITER_ELINKNO(base, index) & ~(mask)) | (value)))
#define DMA_SET_BITER_ELINKNO(base, index, value) (BME_OR16(&DMA_BITER_ELINKNO_REG(base, index), (uint16_t)(value)))
#define DMA_CLR_BITER_ELINKNO(base, index, value) (BME_AND16(&DMA_BITER_ELINKNO_REG(base, index), (uint16_t)(~(value))))
#define DMA_TOG_BITER_ELINKNO(base, index, value) (BME_XOR16(&DMA_BITER_ELINKNO_REG(base, index), (uint16_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_BITER_ELINKNO bitfields
 */

/*!
 * @name Register DMA_BITER_ELINKNO, field BITER[14:0] (RW)
 *
 * As the transfer control descriptor is first loaded by software, this 9-bit
 * (ELINK = 1) or 15-bit (ELINK = 0) field must be equal to the value in the CITER
 * field. As the major iteration count is exhausted, the contents of this field
 * are reloaded into the CITER field. When the software loads the TCD, this field
 * must be set equal to the corresponding CITER field; otherwise, a configuration
 * error is reported. As the major iteration count is exhausted, the contents of
 * this field is reloaded into the CITER field. If the channel is configured to
 * execute a single service request, the initial values of BITER and CITER should
 * be 0x0001.
 */
/*@{*/
/*! @brief Read current value of the DMA_BITER_ELINKNO_BITER field. */
#define DMA_RD_BITER_ELINKNO_BITER(base, index) ((DMA_BITER_ELINKNO_REG(base, index) & DMA_BITER_ELINKNO_BITER_MASK) >> DMA_BITER_ELINKNO_BITER_SHIFT)
#define DMA_BRD_BITER_ELINKNO_BITER(base, index) (DMA_RD_BITER_ELINKNO_BITER(base, index))

/*! @brief Set the BITER field to a new value. */
#define DMA_WR_BITER_ELINKNO_BITER(base, index, value) (DMA_RMW_BITER_ELINKNO(base, index, DMA_BITER_ELINKNO_BITER_MASK, DMA_BITER_ELINKNO_BITER(value)))
#define DMA_BWR_BITER_ELINKNO_BITER(base, index, value) (DMA_WR_BITER_ELINKNO_BITER(base, index, value))
/*@}*/

/*!
 * @name Register DMA_BITER_ELINKNO, field ELINK[15] (RW)
 *
 * As the channel completes the minor loop, this flag enables the linking to
 * another channel, defined by BITER[LINKCH]. The link target channel initiates a
 * channel service request via an internal mechanism that sets the TCDn_CSR[START]
 * bit of the specified channel. If channel linking is disabled, the BITER value
 * extends to 15 bits in place of a link channel number. If the major loop is
 * exhausted, this link mechanism is suppressed in favor of the MAJORELINK channel
 * linking. When the software loads the TCD, this field must be set equal to the
 * corresponding CITER field; otherwise, a configuration error is reported. As the
 * major iteration count is exhausted, the contents of this field are reloaded
 * into the CITER field.
 *
 * Values:
 * - 0b0 - The channel-to-channel linking is disabled
 * - 0b1 - The channel-to-channel linking is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_BITER_ELINKNO_ELINK field. */
#define DMA_RD_BITER_ELINKNO_ELINK(base, index) ((DMA_BITER_ELINKNO_REG(base, index) & DMA_BITER_ELINKNO_ELINK_MASK) >> DMA_BITER_ELINKNO_ELINK_SHIFT)
#define DMA_BRD_BITER_ELINKNO_ELINK(base, index) (BME_UBFX16(&DMA_BITER_ELINKNO_REG(base, index), DMA_BITER_ELINKNO_ELINK_SHIFT, DMA_BITER_ELINKNO_ELINK_WIDTH))

/*! @brief Set the ELINK field to a new value. */
#define DMA_WR_BITER_ELINKNO_ELINK(base, index, value) (DMA_RMW_BITER_ELINKNO(base, index, DMA_BITER_ELINKNO_ELINK_MASK, DMA_BITER_ELINKNO_ELINK(value)))
#define DMA_BWR_BITER_ELINKNO_ELINK(base, index, value) (BME_BFI16(&DMA_BITER_ELINKNO_REG(base, index), ((uint16_t)(value) << DMA_BITER_ELINKNO_ELINK_SHIFT), DMA_BITER_ELINKNO_ELINK_SHIFT, DMA_BITER_ELINKNO_ELINK_WIDTH))
/*@}*/

/*******************************************************************************
 * DMA_BITER_ELINKYES - TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)
 ******************************************************************************/

/*!
 * @brief DMA_BITER_ELINKYES - TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled) (RW)
 *
 * Reset value: 0x0000U
 *
 * If the TCDn_BITER[ELINK] bit is set, the TCDn_BITER register is defined as
 * follows.
 */
/*!
 * @name Constants and macros for entire DMA_BITER_ELINKYES register
 */
/*@{*/
#define DMA_RD_BITER_ELINKYES(base, index) (DMA_BITER_ELINKYES_REG(base, index))
#define DMA_WR_BITER_ELINKYES(base, index, value) (DMA_BITER_ELINKYES_REG(base, index) = (value))
#define DMA_RMW_BITER_ELINKYES(base, index, mask, value) (DMA_WR_BITER_ELINKYES(base, index, (DMA_RD_BITER_ELINKYES(base, index) & ~(mask)) | (value)))
#define DMA_SET_BITER_ELINKYES(base, index, value) (BME_OR16(&DMA_BITER_ELINKYES_REG(base, index), (uint16_t)(value)))
#define DMA_CLR_BITER_ELINKYES(base, index, value) (BME_AND16(&DMA_BITER_ELINKYES_REG(base, index), (uint16_t)(~(value))))
#define DMA_TOG_BITER_ELINKYES(base, index, value) (BME_XOR16(&DMA_BITER_ELINKYES_REG(base, index), (uint16_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMA_BITER_ELINKYES bitfields
 */

/*!
 * @name Register DMA_BITER_ELINKYES, field BITER[8:0] (RW)
 *
 * As the transfer control descriptor is first loaded by software, this 9-bit
 * (ELINK = 1) or 15-bit (ELINK = 0) field must be equal to the value in the CITER
 * field. As the major iteration count is exhausted, the contents of this field
 * are reloaded into the CITER field. When the software loads the TCD, this field
 * must be set equal to the corresponding CITER field; otherwise, a configuration
 * error is reported. As the major iteration count is exhausted, the contents of
 * this field are reloaded into the CITER field. If the channel is configured to
 * execute a single service request, the initial values of BITER and CITER
 * should be 0x0001.
 */
/*@{*/
/*! @brief Read current value of the DMA_BITER_ELINKYES_BITER field. */
#define DMA_RD_BITER_ELINKYES_BITER(base, index) ((DMA_BITER_ELINKYES_REG(base, index) & DMA_BITER_ELINKYES_BITER_MASK) >> DMA_BITER_ELINKYES_BITER_SHIFT)
#define DMA_BRD_BITER_ELINKYES_BITER(base, index) (DMA_RD_BITER_ELINKYES_BITER(base, index))

/*! @brief Set the BITER field to a new value. */
#define DMA_WR_BITER_ELINKYES_BITER(base, index, value) (DMA_RMW_BITER_ELINKYES(base, index, DMA_BITER_ELINKYES_BITER_MASK, DMA_BITER_ELINKYES_BITER(value)))
#define DMA_BWR_BITER_ELINKYES_BITER(base, index, value) (DMA_WR_BITER_ELINKYES_BITER(base, index, value))
/*@}*/

/*!
 * @name Register DMA_BITER_ELINKYES, field LINKCH[13:9] (RW)
 *
 * If channel-to-channel linking is enabled (ELINK = 1), then after the minor
 * loop is exhausted, the eDMA engine initiates a channel service request at the
 * channel defined by this field by setting that channel's TCDn_CSR[START] bit.
 * When the software loads the TCD, this field must be set equal to the
 * corresponding CITER field; otherwise, a configuration error is reported. As the major
 * iteration count is exhausted, the contents of this field are reloaded into the
 * CITER field.
 */
/*@{*/
/*! @brief Read current value of the DMA_BITER_ELINKYES_LINKCH field. */
#define DMA_RD_BITER_ELINKYES_LINKCH(base, index) ((DMA_BITER_ELINKYES_REG(base, index) & DMA_BITER_ELINKYES_LINKCH_MASK) >> DMA_BITER_ELINKYES_LINKCH_SHIFT)
#define DMA_BRD_BITER_ELINKYES_LINKCH(base, index) (BME_UBFX16(&DMA_BITER_ELINKYES_REG(base, index), DMA_BITER_ELINKYES_LINKCH_SHIFT, DMA_BITER_ELINKYES_LINKCH_WIDTH))

/*! @brief Set the LINKCH field to a new value. */
#define DMA_WR_BITER_ELINKYES_LINKCH(base, index, value) (DMA_RMW_BITER_ELINKYES(base, index, DMA_BITER_ELINKYES_LINKCH_MASK, DMA_BITER_ELINKYES_LINKCH(value)))
#define DMA_BWR_BITER_ELINKYES_LINKCH(base, index, value) (BME_BFI16(&DMA_BITER_ELINKYES_REG(base, index), ((uint16_t)(value) << DMA_BITER_ELINKYES_LINKCH_SHIFT), DMA_BITER_ELINKYES_LINKCH_SHIFT, DMA_BITER_ELINKYES_LINKCH_WIDTH))
/*@}*/

/*!
 * @name Register DMA_BITER_ELINKYES, field ELINK[15] (RW)
 *
 * As the channel completes the minor loop, this flag enables the linking to
 * another channel, defined by BITER[LINKCH]. The link target channel initiates a
 * channel service request via an internal mechanism that sets the TCDn_CSR[START]
 * bit of the specified channel. If channel linking disables, the BITER value
 * extends to 15 bits in place of a link channel number. If the major loop is
 * exhausted, this link mechanism is suppressed in favor of the MAJORELINK channel
 * linking. When the software loads the TCD, this field must be set equal to the
 * corresponding CITER field; otherwise, a configuration error is reported. As the
 * major iteration count is exhausted, the contents of this field are reloaded into
 * the CITER field.
 *
 * Values:
 * - 0b0 - The channel-to-channel linking is disabled
 * - 0b1 - The channel-to-channel linking is enabled
 */
/*@{*/
/*! @brief Read current value of the DMA_BITER_ELINKYES_ELINK field. */
#define DMA_RD_BITER_ELINKYES_ELINK(base, index) ((DMA_BITER_ELINKYES_REG(base, index) & DMA_BITER_ELINKYES_ELINK_MASK) >> DMA_BITER_ELINKYES_ELINK_SHIFT)
#define DMA_BRD_BITER_ELINKYES_ELINK(base, index) (BME_UBFX16(&DMA_BITER_ELINKYES_REG(base, index), DMA_BITER_ELINKYES_ELINK_SHIFT, DMA_BITER_ELINKYES_ELINK_WIDTH))

/*! @brief Set the ELINK field to a new value. */
#define DMA_WR_BITER_ELINKYES_ELINK(base, index, value) (DMA_RMW_BITER_ELINKYES(base, index, DMA_BITER_ELINKYES_ELINK_MASK, DMA_BITER_ELINKYES_ELINK(value)))
#define DMA_BWR_BITER_ELINKYES_ELINK(base, index, value) (BME_BFI16(&DMA_BITER_ELINKYES_REG(base, index), ((uint16_t)(value) << DMA_BITER_ELINKYES_ELINK_SHIFT), DMA_BITER_ELINKYES_ELINK_SHIFT, DMA_BITER_ELINKYES_ELINK_WIDTH))
/*@}*/

/* Register macros for indexed access to DMA channel priority registers */
/*
 * Constants and macros for entire DMA_DCHPRIn register
 */
#define DMA_DCHPRIn_INDEX(channel)          (((channel) & ~0x03U) | (3 - ((channel) & 0x03U)))
#define DMA_DCHPRIn_REG(base, index)        (((volatile uint8_t *)&DMA_DCHPRI3_REG(base))[DMA_DCHPRIn_INDEX(index)])
#define DMA_RD_DCHPRIn(base, index)         (DMA_DCHPRIn_REG((base), (index)))
#define DMA_WR_DCHPRIn(base, index, value)  (DMA_DCHPRIn_REG((base), (index)) = (value))
#define DMA_SET_DCHPRIn(base, index, value) (BME_OR8(&DMA_DCHPRIn_REG((base), (index)), (uint8_t)(value)))
#define DMA_CLR_DCHPRIn(base, index, value) (BME_AND8(&DMA_DCHPRIn_REG((base), (index)), (uint8_t)(~(value))))
#define DMA_TOG_DCHPRIn(base, index, value) (BME_XOR8(&DMA_DCHPRIn_REG((base), (index)), (uint8_t)(value)))

/*
 * Register DMA_DCHPRIn, bit field CHPRI
 */
/* Read current value of the CHPRI bit field. */
#define DMA_RD_DCHPRIn_CHPRI(base, index) ((DMA_DCHPRIn_REG((base), (index)) & DMA_DCHPRI0_CHPRI_MASK) >> DMA_DCHPRI0_CHPRI_SHIFT)
#define DMA_BRD_DCHPRIn_CHPRI(base, index) (BME_UBFX8(&DMA_DCHPRIn_REG((base), (index)), DMA_DCHPRI0_CHPRI_SHIFT, DMA_DCHPRI0_CHPRI_WIDTH))

/* Set the CHPRI bit field to a new value. */
#define DMA_WR_DCHPRIn_CHPRI(base, index, value) (DMA_WR_DCHPRIn((base), (index), (DMA_RD_DCHPRIn((base), (index)) & ~DMA_DCHPRI0_CHPRI_MASK) | DMA_DCHPRI0_CHPRI(value)))
#define DMA_BWR_DCHPRIn_CHPRI(base, index, value) (BME_BFI8(&DMA_DCHPRIn_REG((base), (index)), ((uint8_t)(value) << DMA_DCHPRI0_CHPRI_SHIFT), DMA_DCHPRI0_CHPRI_SHIFT, DMA_DCHPRI0_CHPRI_WIDTH))

/*
 * Register DMA_DCHPRIn, bit field DPA
 */
/* Read current value of the DPA bit field. */
#define DMA_RD_DCHPRIn_DPA(base, index) ((DMA_DCHPRIn_REG((base), (index)) & DMA_DCHPRI0_DPA_MASK) >> DMA_DCHPRI0_DPA_SHIFT)
#define DMA_BRD_DCHPRIn_DPA(base, index) (BME_UBFX8(&DMA_DCHPRIn_REG((base), (index)), DMA_DCHPRI0_DPA_SHIFT, DMA_DCHPRI0_DPA_WIDTH))

/* Set the DPA bit field to a new value. */
#define DMA_WR_DCHPRIn_DPA(base, index, value) (DMA_WR_DCHPRIn((base), (index), (DMA_RD_DCHPRIn((base), (index)) & ~DMA_DCHPRI0_DPA_MASK) | DMA_DCHPRI0_DPA(value)))
#define DMA_BWR_DCHPRIn_DPA(base, index, value) (BME_BFI8(&DMA_DCHPRIn_REG((base), (index)), ((uint8_t)(value) << DMA_DCHPRI0_DPA_SHIFT), DMA_DCHPRI0_DPA_SHIFT, DMA_DCHPRI0_DPA_WIDTH))

/*
 * Register DMA_DCHPRIn, bit field ECP
 */
/* Read current value of the ECP bit field. */
#define DMA_RD_DCHPRIn_ECP(base, index) ((DMA_DCHPRIn_REG((base), (index)) & DMA_DCHPRI0_ECP_MASK) >> DMA_DCHPRI0_ECP_SHIFT)
#define DMA_BRD_DCHPRIn_ECP(base, index) (BME_UBFX8(&DMA_DCHPRIn_REG((base), (index)), DMA_DCHPRI0_ECP_SHIFT, DMA_DCHPRI0_ECP_WIDTH))

/* Set the ECP bit field to a new value. */
#define DMA_WR_DCHPRIn_ECP(base, index, value) (DMA_WR_DCHPRIn((base), (index), (DMA_RD_DCHPRIn((base), (index)) & ~DMA_DCHPRI0_ECP_MASK) | DMA_DCHPRI0_ECP(value)))
#define DMA_BWR_DCHPRIn_ECP(base, index, value) (BME_BFI8(&DMA_DCHPRIn_REG((base), (index)), ((uint8_t)(value) << DMA_DCHPRI0_ECP_SHIFT), DMA_DCHPRI0_ECP_SHIFT, DMA_DCHPRI0_ECP_WIDTH))

/*
 * MK82F25615 DMAMUX
 *
 * DMA channel multiplexor
 *
 * Registers defined in this header file:
 * - DMAMUX_CHCFG - Channel Configuration register
 */

#define DMAMUX_INSTANCE_COUNT (1U) /*!< Number of instances of the DMAMUX module. */
#define DMAMUX_IDX (0U) /*!< Instance number for DMAMUX. */

/*******************************************************************************
 * DMAMUX_CHCFG - Channel Configuration register
 ******************************************************************************/

/*!
 * @brief DMAMUX_CHCFG - Channel Configuration register (RW)
 *
 * Reset value: 0x00U
 *
 * Each of the DMA channels can be independently enabled/disabled and associated
 * with one of the DMA slots (peripheral slots or always-on slots) in the
 * system. Setting multiple CHCFG registers with the same source value will result in
 * unpredictable behavior. This is true, even if a channel is disabled (ENBL==0).
 * Before changing the trigger or source settings, a DMA channel must be disabled
 * via CHCFGn[ENBL].
 */
/*!
 * @name Constants and macros for entire DMAMUX_CHCFG register
 */
/*@{*/
#define DMAMUX_RD_CHCFG(base, index) (DMAMUX_CHCFG_REG(base, index))
#define DMAMUX_WR_CHCFG(base, index, value) (DMAMUX_CHCFG_REG(base, index) = (value))
#define DMAMUX_RMW_CHCFG(base, index, mask, value) (DMAMUX_WR_CHCFG(base, index, (DMAMUX_RD_CHCFG(base, index) & ~(mask)) | (value)))
#define DMAMUX_SET_CHCFG(base, index, value) (BME_OR8(&DMAMUX_CHCFG_REG(base, index), (uint8_t)(value)))
#define DMAMUX_CLR_CHCFG(base, index, value) (BME_AND8(&DMAMUX_CHCFG_REG(base, index), (uint8_t)(~(value))))
#define DMAMUX_TOG_CHCFG(base, index, value) (BME_XOR8(&DMAMUX_CHCFG_REG(base, index), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual DMAMUX_CHCFG bitfields
 */

/*!
 * @name Register DMAMUX_CHCFG, field SOURCE[5:0] (RW)
 *
 * Specifies which DMA source, if any, is routed to a particular DMA channel.
 * See the chip-specific DMAMUX information for details about the peripherals and
 * their slot numbers.
 */
/*@{*/
/*! @brief Read current value of the DMAMUX_CHCFG_SOURCE field. */
#define DMAMUX_RD_CHCFG_SOURCE(base, index) ((DMAMUX_CHCFG_REG(base, index) & DMAMUX_CHCFG_SOURCE_MASK) >> DMAMUX_CHCFG_SOURCE_SHIFT)
#define DMAMUX_BRD_CHCFG_SOURCE(base, index) (BME_UBFX8(&DMAMUX_CHCFG_REG(base, index), DMAMUX_CHCFG_SOURCE_SHIFT, DMAMUX_CHCFG_SOURCE_WIDTH))

/*! @brief Set the SOURCE field to a new value. */
#define DMAMUX_WR_CHCFG_SOURCE(base, index, value) (DMAMUX_RMW_CHCFG(base, index, DMAMUX_CHCFG_SOURCE_MASK, DMAMUX_CHCFG_SOURCE(value)))
#define DMAMUX_BWR_CHCFG_SOURCE(base, index, value) (BME_BFI8(&DMAMUX_CHCFG_REG(base, index), ((uint8_t)(value) << DMAMUX_CHCFG_SOURCE_SHIFT), DMAMUX_CHCFG_SOURCE_SHIFT, DMAMUX_CHCFG_SOURCE_WIDTH))
/*@}*/

/*!
 * @name Register DMAMUX_CHCFG, field TRIG[6] (RW)
 *
 * Enables the periodic trigger capability for the triggered DMA channel.
 *
 * Values:
 * - 0b0 - Triggering is disabled. If triggering is disabled and ENBL is set,
 *     the DMA Channel will simply route the specified source to the DMA channel.
 *     (Normal mode)
 * - 0b1 - Triggering is enabled. If triggering is enabled and ENBL is set, the
 *     DMAMUX is in Periodic Trigger mode.
 */
/*@{*/
/*! @brief Read current value of the DMAMUX_CHCFG_TRIG field. */
#define DMAMUX_RD_CHCFG_TRIG(base, index) ((DMAMUX_CHCFG_REG(base, index) & DMAMUX_CHCFG_TRIG_MASK) >> DMAMUX_CHCFG_TRIG_SHIFT)
#define DMAMUX_BRD_CHCFG_TRIG(base, index) (BME_UBFX8(&DMAMUX_CHCFG_REG(base, index), DMAMUX_CHCFG_TRIG_SHIFT, DMAMUX_CHCFG_TRIG_WIDTH))

/*! @brief Set the TRIG field to a new value. */
#define DMAMUX_WR_CHCFG_TRIG(base, index, value) (DMAMUX_RMW_CHCFG(base, index, DMAMUX_CHCFG_TRIG_MASK, DMAMUX_CHCFG_TRIG(value)))
#define DMAMUX_BWR_CHCFG_TRIG(base, index, value) (BME_BFI8(&DMAMUX_CHCFG_REG(base, index), ((uint8_t)(value) << DMAMUX_CHCFG_TRIG_SHIFT), DMAMUX_CHCFG_TRIG_SHIFT, DMAMUX_CHCFG_TRIG_WIDTH))
/*@}*/

/*!
 * @name Register DMAMUX_CHCFG, field ENBL[7] (RW)
 *
 * Enables the DMA channel.
 *
 * Values:
 * - 0b0 - DMA channel is disabled. This mode is primarily used during
 *     configuration of the DMAMux. The DMA has separate channel enables/disables, which
 *     should be used to disable or reconfigure a DMA channel.
 * - 0b1 - DMA channel is enabled
 */
/*@{*/
/*! @brief Read current value of the DMAMUX_CHCFG_ENBL field. */
#define DMAMUX_RD_CHCFG_ENBL(base, index) ((DMAMUX_CHCFG_REG(base, index) & DMAMUX_CHCFG_ENBL_MASK) >> DMAMUX_CHCFG_ENBL_SHIFT)
#define DMAMUX_BRD_CHCFG_ENBL(base, index) (BME_UBFX8(&DMAMUX_CHCFG_REG(base, index), DMAMUX_CHCFG_ENBL_SHIFT, DMAMUX_CHCFG_ENBL_WIDTH))

/*! @brief Set the ENBL field to a new value. */
#define DMAMUX_WR_CHCFG_ENBL(base, index, value) (DMAMUX_RMW_CHCFG(base, index, DMAMUX_CHCFG_ENBL_MASK, DMAMUX_CHCFG_ENBL(value)))
#define DMAMUX_BWR_CHCFG_ENBL(base, index, value) (BME_BFI8(&DMAMUX_CHCFG_REG(base, index), ((uint8_t)(value) << DMAMUX_CHCFG_ENBL_SHIFT), DMAMUX_CHCFG_ENBL_SHIFT, DMAMUX_CHCFG_ENBL_WIDTH))
/*@}*/

/*
 * MK82F25615 EMVSIM
 *
 * EMVSIM
 *
 * Registers defined in this header file:
 * - EMVSIM_VER_ID - Version ID Register
 * - EMVSIM_PARAM - Parameter Register
 * - EMVSIM_CLKCFG - Clock Configuration Register
 * - EMVSIM_DIVISOR - Baud Rate Divisor Register
 * - EMVSIM_CTRL - Control Register
 * - EMVSIM_INT_MASK - Interrupt Mask Register
 * - EMVSIM_RX_THD - Receiver Threshold Register
 * - EMVSIM_TX_THD - Transmitter Threshold Register
 * - EMVSIM_RX_STATUS - Receive Status Register
 * - EMVSIM_TX_STATUS - Transmitter Status Register
 * - EMVSIM_PCSR - Port Control and Status Register
 * - EMVSIM_RX_BUF - Receive Data Read Buffer
 * - EMVSIM_TX_BUF - Transmit Data Buffer
 * - EMVSIM_TX_GETU - Transmitter Guard ETU Value Register
 * - EMVSIM_CWT_VAL - Character Wait Time Value Register
 * - EMVSIM_BWT_VAL - Block Wait Time Value Register
 * - EMVSIM_BGT_VAL - Block Guard Time Value Register
 * - EMVSIM_GPCNT0_VAL - General Purpose Counter 0 Timeout Value Register
 * - EMVSIM_GPCNT1_VAL - General Purpose Counter 1 Timeout Value
 */

#define EMVSIM_INSTANCE_COUNT (2U) /*!< Number of instances of the EMVSIM module. */
#define EMVSIM0_IDX (0U) /*!< Instance number for EMVSIM0. */
#define EMVSIM1_IDX (1U) /*!< Instance number for EMVSIM1. */

/*******************************************************************************
 * EMVSIM_VER_ID - Version ID Register
 ******************************************************************************/

/*!
 * @brief EMVSIM_VER_ID - Version ID Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * Version ID for the IP. It corresponds to the version of IP being used.
 */
/*!
 * @name Constants and macros for entire EMVSIM_VER_ID register
 */
/*@{*/
#define EMVSIM_RD_VER_ID(base)   (EMVSIM_VER_ID_REG(base))
/*@}*/

/*******************************************************************************
 * EMVSIM_PARAM - Parameter Register
 ******************************************************************************/

/*!
 * @brief EMVSIM_PARAM - Parameter Register (RO)
 *
 * Reset value: 0x00001010U
 *
 * This register provides details on the parameter settings that were used while
 * including this module in the chip.
 */
/*!
 * @name Constants and macros for entire EMVSIM_PARAM register
 */
/*@{*/
#define EMVSIM_RD_PARAM(base)    (EMVSIM_PARAM_REG(base))
/*@}*/

/*
 * Constants & macros for individual EMVSIM_PARAM bitfields
 */

/*!
 * @name Register EMVSIM_PARAM, field RX_FIFO_DEPTH[7:0] (RO)
 *
 * Value of parameter for Receive FIFO Depth (in Bytes)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_PARAM_RX_FIFO_DEPTH field. */
#define EMVSIM_RD_PARAM_RX_FIFO_DEPTH(base) ((EMVSIM_PARAM_REG(base) & EMVSIM_PARAM_RX_FIFO_DEPTH_MASK) >> EMVSIM_PARAM_RX_FIFO_DEPTH_SHIFT)
#define EMVSIM_BRD_PARAM_RX_FIFO_DEPTH(base) (BME_UBFX32(&EMVSIM_PARAM_REG(base), EMVSIM_PARAM_RX_FIFO_DEPTH_SHIFT, EMVSIM_PARAM_RX_FIFO_DEPTH_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_PARAM, field TX_FIFO_DEPTH[15:8] (RO)
 *
 * Value of parameter for Transmit FIFO Depth (in Bytes)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_PARAM_TX_FIFO_DEPTH field. */
#define EMVSIM_RD_PARAM_TX_FIFO_DEPTH(base) ((EMVSIM_PARAM_REG(base) & EMVSIM_PARAM_TX_FIFO_DEPTH_MASK) >> EMVSIM_PARAM_TX_FIFO_DEPTH_SHIFT)
#define EMVSIM_BRD_PARAM_TX_FIFO_DEPTH(base) (BME_UBFX32(&EMVSIM_PARAM_REG(base), EMVSIM_PARAM_TX_FIFO_DEPTH_SHIFT, EMVSIM_PARAM_TX_FIFO_DEPTH_WIDTH))
/*@}*/

/*******************************************************************************
 * EMVSIM_CLKCFG - Clock Configuration Register
 ******************************************************************************/

/*!
 * @brief EMVSIM_CLKCFG - Clock Configuration Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register provides configuration details to enable the right clock
 * frequency of clocks used by EMV SIM module.
 */
/*!
 * @name Constants and macros for entire EMVSIM_CLKCFG register
 */
/*@{*/
#define EMVSIM_RD_CLKCFG(base)   (EMVSIM_CLKCFG_REG(base))
#define EMVSIM_WR_CLKCFG(base, value) (EMVSIM_CLKCFG_REG(base) = (value))
#define EMVSIM_RMW_CLKCFG(base, mask, value) (EMVSIM_WR_CLKCFG(base, (EMVSIM_RD_CLKCFG(base) & ~(mask)) | (value)))
#define EMVSIM_SET_CLKCFG(base, value) (BME_OR32(&EMVSIM_CLKCFG_REG(base), (uint32_t)(value)))
#define EMVSIM_CLR_CLKCFG(base, value) (BME_AND32(&EMVSIM_CLKCFG_REG(base), (uint32_t)(~(value))))
#define EMVSIM_TOG_CLKCFG(base, value) (BME_XOR32(&EMVSIM_CLKCFG_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual EMVSIM_CLKCFG bitfields
 */

/*!
 * @name Register EMVSIM_CLKCFG, field CLK_PRSC[7:0] (RW)
 *
 * The value written to this register will determine the desired card clock
 * frequency. The Card Clock frequency is the EMV SIM Protocol (or logic) clock
 * divided by this prescaler value. The prescaler value should be updated only when
 * card clock is disabled and transmitter and receiver are not operational.
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_CLKCFG_CLK_PRSC field. */
#define EMVSIM_RD_CLKCFG_CLK_PRSC(base) ((EMVSIM_CLKCFG_REG(base) & EMVSIM_CLKCFG_CLK_PRSC_MASK) >> EMVSIM_CLKCFG_CLK_PRSC_SHIFT)
#define EMVSIM_BRD_CLKCFG_CLK_PRSC(base) (BME_UBFX32(&EMVSIM_CLKCFG_REG(base), EMVSIM_CLKCFG_CLK_PRSC_SHIFT, EMVSIM_CLKCFG_CLK_PRSC_WIDTH))

/*! @brief Set the CLK_PRSC field to a new value. */
#define EMVSIM_WR_CLKCFG_CLK_PRSC(base, value) (EMVSIM_RMW_CLKCFG(base, EMVSIM_CLKCFG_CLK_PRSC_MASK, EMVSIM_CLKCFG_CLK_PRSC(value)))
#define EMVSIM_BWR_CLKCFG_CLK_PRSC(base, value) (BME_BFI32(&EMVSIM_CLKCFG_REG(base), ((uint32_t)(value) << EMVSIM_CLKCFG_CLK_PRSC_SHIFT), EMVSIM_CLKCFG_CLK_PRSC_SHIFT, EMVSIM_CLKCFG_CLK_PRSC_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_CLKCFG, field GPCNT1_CLK_SEL[9:8] (RW)
 *
 * Selects which clock source is used by EMV SIM Module general purpose counter
 * 1. The only way to reset the counter is to set these bits to zero. The counter
 * will begin counting as soon as the clock input is selected and the clocks are
 * active. These input clocks are enabled through other register bits of the EMV
 * SIM module (KILL_CLOCK, RCV_EN, and XMT_EN). Counter is active while RCV_EN
 * or XMT_EN are set.
 *
 * Values:
 * - 0b00 - Disabled / Reset (default)
 * - 0b01 - Card Clock
 * - 0b10 - Receive Clock
 * - 0b11 - ETU Clock (transmit clock)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_CLKCFG_GPCNT1_CLK_SEL field. */
#define EMVSIM_RD_CLKCFG_GPCNT1_CLK_SEL(base) ((EMVSIM_CLKCFG_REG(base) & EMVSIM_CLKCFG_GPCNT1_CLK_SEL_MASK) >> EMVSIM_CLKCFG_GPCNT1_CLK_SEL_SHIFT)
#define EMVSIM_BRD_CLKCFG_GPCNT1_CLK_SEL(base) (BME_UBFX32(&EMVSIM_CLKCFG_REG(base), EMVSIM_CLKCFG_GPCNT1_CLK_SEL_SHIFT, EMVSIM_CLKCFG_GPCNT1_CLK_SEL_WIDTH))

/*! @brief Set the GPCNT1_CLK_SEL field to a new value. */
#define EMVSIM_WR_CLKCFG_GPCNT1_CLK_SEL(base, value) (EMVSIM_RMW_CLKCFG(base, EMVSIM_CLKCFG_GPCNT1_CLK_SEL_MASK, EMVSIM_CLKCFG_GPCNT1_CLK_SEL(value)))
#define EMVSIM_BWR_CLKCFG_GPCNT1_CLK_SEL(base, value) (BME_BFI32(&EMVSIM_CLKCFG_REG(base), ((uint32_t)(value) << EMVSIM_CLKCFG_GPCNT1_CLK_SEL_SHIFT), EMVSIM_CLKCFG_GPCNT1_CLK_SEL_SHIFT, EMVSIM_CLKCFG_GPCNT1_CLK_SEL_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_CLKCFG, field GPCNT0_CLK_SEL[11:10] (RW)
 *
 * Selects which clock source is used by EMV SIM Module general purpose counter
 * 0. The only way to reset the counter is to set these bits to zero. The counter
 * will begin counting as soon as the clock input is selected and the clocks are
 * active. These input clocks are enabled through other register bits of the EMV
 * SIM module (KILL_CLOCK, RCV_EN, and XMT_EN). Counter is active while RCV_EN
 * or XMT_EN are set.
 *
 * Values:
 * - 0b00 - Disabled / Reset (default)
 * - 0b01 - Card Clock
 * - 0b10 - Receive Clock
 * - 0b11 - ETU Clock (transmit clock)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_CLKCFG_GPCNT0_CLK_SEL field. */
#define EMVSIM_RD_CLKCFG_GPCNT0_CLK_SEL(base) ((EMVSIM_CLKCFG_REG(base) & EMVSIM_CLKCFG_GPCNT0_CLK_SEL_MASK) >> EMVSIM_CLKCFG_GPCNT0_CLK_SEL_SHIFT)
#define EMVSIM_BRD_CLKCFG_GPCNT0_CLK_SEL(base) (BME_UBFX32(&EMVSIM_CLKCFG_REG(base), EMVSIM_CLKCFG_GPCNT0_CLK_SEL_SHIFT, EMVSIM_CLKCFG_GPCNT0_CLK_SEL_WIDTH))

/*! @brief Set the GPCNT0_CLK_SEL field to a new value. */
#define EMVSIM_WR_CLKCFG_GPCNT0_CLK_SEL(base, value) (EMVSIM_RMW_CLKCFG(base, EMVSIM_CLKCFG_GPCNT0_CLK_SEL_MASK, EMVSIM_CLKCFG_GPCNT0_CLK_SEL(value)))
#define EMVSIM_BWR_CLKCFG_GPCNT0_CLK_SEL(base, value) (BME_BFI32(&EMVSIM_CLKCFG_REG(base), ((uint32_t)(value) << EMVSIM_CLKCFG_GPCNT0_CLK_SEL_SHIFT), EMVSIM_CLKCFG_GPCNT0_CLK_SEL_SHIFT, EMVSIM_CLKCFG_GPCNT0_CLK_SEL_WIDTH))
/*@}*/

/*******************************************************************************
 * EMVSIM_DIVISOR - Baud Rate Divisor Register
 ******************************************************************************/

/*!
 * @brief EMVSIM_DIVISOR - Baud Rate Divisor Register (RW)
 *
 * Reset value: 0x00000174U
 *
 * This regiter configures the divisor value to generate the baud clock which
 * will drive the card clock and also generate the transmit and receive clocks and
 * respective ETUs.
 */
/*!
 * @name Constants and macros for entire EMVSIM_DIVISOR register
 */
/*@{*/
#define EMVSIM_RD_DIVISOR(base)  (EMVSIM_DIVISOR_REG(base))
#define EMVSIM_WR_DIVISOR(base, value) (EMVSIM_DIVISOR_REG(base) = (value))
#define EMVSIM_RMW_DIVISOR(base, mask, value) (EMVSIM_WR_DIVISOR(base, (EMVSIM_RD_DIVISOR(base) & ~(mask)) | (value)))
#define EMVSIM_SET_DIVISOR(base, value) (BME_OR32(&EMVSIM_DIVISOR_REG(base), (uint32_t)(value)))
#define EMVSIM_CLR_DIVISOR(base, value) (BME_AND32(&EMVSIM_DIVISOR_REG(base), (uint32_t)(~(value))))
#define EMVSIM_TOG_DIVISOR(base, value) (BME_XOR32(&EMVSIM_DIVISOR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual EMVSIM_DIVISOR bitfields
 */

/*!
 * @name Register EMVSIM_DIVISOR, field DIVISOR_VALUE[8:0] (RW)
 *
 * The value written to this register will be used to generate the ETU bit
 * period that will be used by the transmitter and receiver. The divisor value is the
 * integer result of F/D value; where F and D are the clock rate conversion
 * integer and baud rate adjustment integer, respectively, that required for the
 * desired operation. The value in this register can be changed when no transaction is
 * active with the smart card. When programming this field, the fractional part
 * of F/D should be rounded off the nearest integer.
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_DIVISOR_DIVISOR_VALUE field. */
#define EMVSIM_RD_DIVISOR_DIVISOR_VALUE(base) ((EMVSIM_DIVISOR_REG(base) & EMVSIM_DIVISOR_DIVISOR_VALUE_MASK) >> EMVSIM_DIVISOR_DIVISOR_VALUE_SHIFT)
#define EMVSIM_BRD_DIVISOR_DIVISOR_VALUE(base) (EMVSIM_RD_DIVISOR_DIVISOR_VALUE(base))

/*! @brief Set the DIVISOR_VALUE field to a new value. */
#define EMVSIM_WR_DIVISOR_DIVISOR_VALUE(base, value) (EMVSIM_RMW_DIVISOR(base, EMVSIM_DIVISOR_DIVISOR_VALUE_MASK, EMVSIM_DIVISOR_DIVISOR_VALUE(value)))
#define EMVSIM_BWR_DIVISOR_DIVISOR_VALUE(base, value) (EMVSIM_WR_DIVISOR_DIVISOR_VALUE(base, value))
/*@}*/

/*******************************************************************************
 * EMVSIM_CTRL - Control Register
 ******************************************************************************/

/*!
 * @brief EMVSIM_CTRL - Control Register (RW)
 *
 * Reset value: 0x01000006U
 */
/*!
 * @name Constants and macros for entire EMVSIM_CTRL register
 */
/*@{*/
#define EMVSIM_RD_CTRL(base)     (EMVSIM_CTRL_REG(base))
#define EMVSIM_WR_CTRL(base, value) (EMVSIM_CTRL_REG(base) = (value))
#define EMVSIM_RMW_CTRL(base, mask, value) (EMVSIM_WR_CTRL(base, (EMVSIM_RD_CTRL(base) & ~(mask)) | (value)))
#define EMVSIM_SET_CTRL(base, value) (BME_OR32(&EMVSIM_CTRL_REG(base), (uint32_t)(value)))
#define EMVSIM_CLR_CTRL(base, value) (BME_AND32(&EMVSIM_CTRL_REG(base), (uint32_t)(~(value))))
#define EMVSIM_TOG_CTRL(base, value) (BME_XOR32(&EMVSIM_CTRL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual EMVSIM_CTRL bitfields
 */

/*!
 * @name Register EMVSIM_CTRL, field IC[0] (RW)
 *
 * Used to configure the EMV SIM to use either inverse convention or direct
 * convention for its data format. The IC bit can be controlled by software, but it
 * is normally set by hardware as a result of the interpretation of the initial
 * character when in ICM mode.
 *
 * Values:
 * - 0b0 - Direction convention transfers enabled (default)
 * - 0b1 - Inverse convention transfers enabled
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_CTRL_IC field. */
#define EMVSIM_RD_CTRL_IC(base) ((EMVSIM_CTRL_REG(base) & EMVSIM_CTRL_IC_MASK) >> EMVSIM_CTRL_IC_SHIFT)
#define EMVSIM_BRD_CTRL_IC(base) (BME_UBFX32(&EMVSIM_CTRL_REG(base), EMVSIM_CTRL_IC_SHIFT, EMVSIM_CTRL_IC_WIDTH))

/*! @brief Set the IC field to a new value. */
#define EMVSIM_WR_CTRL_IC(base, value) (EMVSIM_RMW_CTRL(base, EMVSIM_CTRL_IC_MASK, EMVSIM_CTRL_IC(value)))
#define EMVSIM_BWR_CTRL_IC(base, value) (BME_BFI32(&EMVSIM_CTRL_REG(base), ((uint32_t)(value) << EMVSIM_CTRL_IC_SHIFT), EMVSIM_CTRL_IC_SHIFT, EMVSIM_CTRL_IC_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_CTRL, field ICM[1] (RW)
 *
 * Enables initial character mode. Will be automatically cleared by hardware
 * once a valid initial character is received.
 *
 * Values:
 * - 0b0 - Initial Character Mode disabled
 * - 0b1 - Initial Character Mode enabled (default)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_CTRL_ICM field. */
#define EMVSIM_RD_CTRL_ICM(base) ((EMVSIM_CTRL_REG(base) & EMVSIM_CTRL_ICM_MASK) >> EMVSIM_CTRL_ICM_SHIFT)
#define EMVSIM_BRD_CTRL_ICM(base) (BME_UBFX32(&EMVSIM_CTRL_REG(base), EMVSIM_CTRL_ICM_SHIFT, EMVSIM_CTRL_ICM_WIDTH))

/*! @brief Set the ICM field to a new value. */
#define EMVSIM_WR_CTRL_ICM(base, value) (EMVSIM_RMW_CTRL(base, EMVSIM_CTRL_ICM_MASK, EMVSIM_CTRL_ICM(value)))
#define EMVSIM_BWR_CTRL_ICM(base, value) (BME_BFI32(&EMVSIM_CTRL_REG(base), ((uint32_t)(value) << EMVSIM_CTRL_ICM_SHIFT), EMVSIM_CTRL_ICM_SHIFT, EMVSIM_CTRL_ICM_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_CTRL, field ANACK[2] (RW)
 *
 * Enables NACK generation for parity errors in receieved messages or when
 * invalid initial characters are received in ICM mode.
 *
 * Values:
 * - 0b0 - NACK generation on errors disabled
 * - 0b1 - NACK generation on errors enabled (default)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_CTRL_ANACK field. */
#define EMVSIM_RD_CTRL_ANACK(base) ((EMVSIM_CTRL_REG(base) & EMVSIM_CTRL_ANACK_MASK) >> EMVSIM_CTRL_ANACK_SHIFT)
#define EMVSIM_BRD_CTRL_ANACK(base) (BME_UBFX32(&EMVSIM_CTRL_REG(base), EMVSIM_CTRL_ANACK_SHIFT, EMVSIM_CTRL_ANACK_WIDTH))

/*! @brief Set the ANACK field to a new value. */
#define EMVSIM_WR_CTRL_ANACK(base, value) (EMVSIM_RMW_CTRL(base, EMVSIM_CTRL_ANACK_MASK, EMVSIM_CTRL_ANACK(value)))
#define EMVSIM_BWR_CTRL_ANACK(base, value) (BME_BFI32(&EMVSIM_CTRL_REG(base), ((uint32_t)(value) << EMVSIM_CTRL_ANACK_SHIFT), EMVSIM_CTRL_ANACK_SHIFT, EMVSIM_CTRL_ANACK_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_CTRL, field ONACK[3] (RW)
 *
 * Enables NACK generation when Rx FIFO is full and another message is ready for
 * writing into the FIFO.
 *
 * Values:
 * - 0b0 - NACK generation on overrun is disabled (default)
 * - 0b1 - NACK generation on overrun is enabled
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_CTRL_ONACK field. */
#define EMVSIM_RD_CTRL_ONACK(base) ((EMVSIM_CTRL_REG(base) & EMVSIM_CTRL_ONACK_MASK) >> EMVSIM_CTRL_ONACK_SHIFT)
#define EMVSIM_BRD_CTRL_ONACK(base) (BME_UBFX32(&EMVSIM_CTRL_REG(base), EMVSIM_CTRL_ONACK_SHIFT, EMVSIM_CTRL_ONACK_WIDTH))

/*! @brief Set the ONACK field to a new value. */
#define EMVSIM_WR_CTRL_ONACK(base, value) (EMVSIM_RMW_CTRL(base, EMVSIM_CTRL_ONACK_MASK, EMVSIM_CTRL_ONACK(value)))
#define EMVSIM_BWR_CTRL_ONACK(base, value) (BME_BFI32(&EMVSIM_CTRL_REG(base), ((uint32_t)(value) << EMVSIM_CTRL_ONACK_SHIFT), EMVSIM_CTRL_ONACK_SHIFT, EMVSIM_CTRL_ONACK_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_CTRL, field FLSH_RX[8] (WORZ)
 *
 * This bit operates as an EMV SIM receiver reset. The transmit portion of the
 * EMV SIM module is not affected. This bits clears automatically and always reads
 * 0.
 *
 * Values:
 * - 0b0 - EMV SIM Receiver normal operation (default)
 * - 0b1 - EMV SIM Receiver held in Reset
 */
/*@{*/
/*! @brief Set the FLSH_RX field to a new value. */
#define EMVSIM_WR_CTRL_FLSH_RX(base, value) (EMVSIM_RMW_CTRL(base, EMVSIM_CTRL_FLSH_RX_MASK, EMVSIM_CTRL_FLSH_RX(value)))
#define EMVSIM_BWR_CTRL_FLSH_RX(base, value) (BME_BFI32(&EMVSIM_CTRL_REG(base), ((uint32_t)(value) << EMVSIM_CTRL_FLSH_RX_SHIFT), EMVSIM_CTRL_FLSH_RX_SHIFT, EMVSIM_CTRL_FLSH_RX_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_CTRL, field FLSH_TX[9] (WORZ)
 *
 * This bit operates as an EMV SIM transmitter reset. The receive portion of the
 * EMV SIM module is not affected. This bit clears automatically and always
 * reads 0.
 *
 * Values:
 * - 0b0 - EMV SIM Transmitter normal operation (default)
 * - 0b1 - EMV SIM Transmitter held in Reset
 */
/*@{*/
/*! @brief Set the FLSH_TX field to a new value. */
#define EMVSIM_WR_CTRL_FLSH_TX(base, value) (EMVSIM_RMW_CTRL(base, EMVSIM_CTRL_FLSH_TX_MASK, EMVSIM_CTRL_FLSH_TX(value)))
#define EMVSIM_BWR_CTRL_FLSH_TX(base, value) (BME_BFI32(&EMVSIM_CTRL_REG(base), ((uint32_t)(value) << EMVSIM_CTRL_FLSH_TX_SHIFT), EMVSIM_CTRL_FLSH_TX_SHIFT, EMVSIM_CTRL_FLSH_TX_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_CTRL, field SW_RST[10] (WORZ)
 *
 * Used to reset the entire EMV SIM module. This acts the same as a hardware
 * reset for the EMV SIM module. This bit is self-clearing and always reads 0. Note:
 * Software should allow a minimum of 4 Protocol clock cycles before attempting
 * to access the EMV SIM module after a software reset.
 *
 * Values:
 * - 0b0 - EMV SIM Normal operation (default)
 * - 0b1 - EMV SIM held in Reset
 */
/*@{*/
/*! @brief Set the SW_RST field to a new value. */
#define EMVSIM_WR_CTRL_SW_RST(base, value) (EMVSIM_RMW_CTRL(base, EMVSIM_CTRL_SW_RST_MASK, EMVSIM_CTRL_SW_RST(value)))
#define EMVSIM_BWR_CTRL_SW_RST(base, value) (BME_BFI32(&EMVSIM_CTRL_REG(base), ((uint32_t)(value) << EMVSIM_CTRL_SW_RST_SHIFT), EMVSIM_CTRL_SW_RST_SHIFT, EMVSIM_CTRL_SW_RST_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_CTRL, field KILL_CLOCKS[11] (RW)
 *
 * Used to enable/disable the clock input to the EMV SIM module. This bit will
 * gate all clocks including the Smart Card clock regardless of the state of the
 * STOP bit described above. Note: This bit will have no effect on the register
 * read write clock. Only EMV SIM logic clock is gated.
 *
 * Values:
 * - 0b0 - EMV SIM input clock enabled (default)
 * - 0b1 - EMV SIM input clock is disabled
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_CTRL_KILL_CLOCKS field. */
#define EMVSIM_RD_CTRL_KILL_CLOCKS(base) ((EMVSIM_CTRL_REG(base) & EMVSIM_CTRL_KILL_CLOCKS_MASK) >> EMVSIM_CTRL_KILL_CLOCKS_SHIFT)
#define EMVSIM_BRD_CTRL_KILL_CLOCKS(base) (BME_UBFX32(&EMVSIM_CTRL_REG(base), EMVSIM_CTRL_KILL_CLOCKS_SHIFT, EMVSIM_CTRL_KILL_CLOCKS_WIDTH))

/*! @brief Set the KILL_CLOCKS field to a new value. */
#define EMVSIM_WR_CTRL_KILL_CLOCKS(base, value) (EMVSIM_RMW_CTRL(base, EMVSIM_CTRL_KILL_CLOCKS_MASK, EMVSIM_CTRL_KILL_CLOCKS(value)))
#define EMVSIM_BWR_CTRL_KILL_CLOCKS(base, value) (BME_BFI32(&EMVSIM_CTRL_REG(base), ((uint32_t)(value) << EMVSIM_CTRL_KILL_CLOCKS_SHIFT), EMVSIM_CTRL_KILL_CLOCKS_SHIFT, EMVSIM_CTRL_KILL_CLOCKS_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_CTRL, field DOZE_EN[12] (RW)
 *
 * Used to configure the operation of the EMV SIM module when a processor DOZE
 * instruction is executed.
 *
 * Values:
 * - 0b0 - DOZE instruction will gate all internal EMV SIM clocks as well as the
 *     Smart Card clock when the transmit FIFO is empty (default)
 * - 0b1 - DOZE instruction has no effect on EMV SIM module
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_CTRL_DOZE_EN field. */
#define EMVSIM_RD_CTRL_DOZE_EN(base) ((EMVSIM_CTRL_REG(base) & EMVSIM_CTRL_DOZE_EN_MASK) >> EMVSIM_CTRL_DOZE_EN_SHIFT)
#define EMVSIM_BRD_CTRL_DOZE_EN(base) (BME_UBFX32(&EMVSIM_CTRL_REG(base), EMVSIM_CTRL_DOZE_EN_SHIFT, EMVSIM_CTRL_DOZE_EN_WIDTH))

/*! @brief Set the DOZE_EN field to a new value. */
#define EMVSIM_WR_CTRL_DOZE_EN(base, value) (EMVSIM_RMW_CTRL(base, EMVSIM_CTRL_DOZE_EN_MASK, EMVSIM_CTRL_DOZE_EN(value)))
#define EMVSIM_BWR_CTRL_DOZE_EN(base, value) (BME_BFI32(&EMVSIM_CTRL_REG(base), ((uint32_t)(value) << EMVSIM_CTRL_DOZE_EN_SHIFT), EMVSIM_CTRL_DOZE_EN_SHIFT, EMVSIM_CTRL_DOZE_EN_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_CTRL, field STOP_EN[13] (RW)
 *
 * Used to configure the operation of the EMV SIM module when a processor STOP
 * instruction is executed. This bit is added to provide support for Smart Cards
 * that do not allow the Smart Card clock to be stopped while power is applied.
 * Note: To enable Card Clock in STOP mode, both STOP_EN and DOZE_EN should be set
 * to 1.
 *
 * Values:
 * - 0b0 - STOP instruction shuts down all EMV SIM clocks (default)
 * - 0b1 - STOP instruction shuts down all clocks except for the Smart Card
 *     Clock (SCK) (clock provided to Smart Card)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_CTRL_STOP_EN field. */
#define EMVSIM_RD_CTRL_STOP_EN(base) ((EMVSIM_CTRL_REG(base) & EMVSIM_CTRL_STOP_EN_MASK) >> EMVSIM_CTRL_STOP_EN_SHIFT)
#define EMVSIM_BRD_CTRL_STOP_EN(base) (BME_UBFX32(&EMVSIM_CTRL_REG(base), EMVSIM_CTRL_STOP_EN_SHIFT, EMVSIM_CTRL_STOP_EN_WIDTH))

/*! @brief Set the STOP_EN field to a new value. */
#define EMVSIM_WR_CTRL_STOP_EN(base, value) (EMVSIM_RMW_CTRL(base, EMVSIM_CTRL_STOP_EN_MASK, EMVSIM_CTRL_STOP_EN(value)))
#define EMVSIM_BWR_CTRL_STOP_EN(base, value) (BME_BFI32(&EMVSIM_CTRL_REG(base), ((uint32_t)(value) << EMVSIM_CTRL_STOP_EN_SHIFT), EMVSIM_CTRL_STOP_EN_SHIFT, EMVSIM_CTRL_STOP_EN_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_CTRL, field RCV_EN[16] (RW)
 *
 * Used to enable/disable the EMV SIM receiver block. Once the transmitter has
 * completed its operation, the software must enable the receiver using this bit.
 * It can be set to 0 during the auto power down sequence.
 *
 * Values:
 * - 0b0 - EMV SIM Receiver disabled (default)
 * - 0b1 - EMV SIM Receiver enabled
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_CTRL_RCV_EN field. */
#define EMVSIM_RD_CTRL_RCV_EN(base) ((EMVSIM_CTRL_REG(base) & EMVSIM_CTRL_RCV_EN_MASK) >> EMVSIM_CTRL_RCV_EN_SHIFT)
#define EMVSIM_BRD_CTRL_RCV_EN(base) (BME_UBFX32(&EMVSIM_CTRL_REG(base), EMVSIM_CTRL_RCV_EN_SHIFT, EMVSIM_CTRL_RCV_EN_WIDTH))

/*! @brief Set the RCV_EN field to a new value. */
#define EMVSIM_WR_CTRL_RCV_EN(base, value) (EMVSIM_RMW_CTRL(base, EMVSIM_CTRL_RCV_EN_MASK, EMVSIM_CTRL_RCV_EN(value)))
#define EMVSIM_BWR_CTRL_RCV_EN(base, value) (BME_BFI32(&EMVSIM_CTRL_REG(base), ((uint32_t)(value) << EMVSIM_CTRL_RCV_EN_SHIFT), EMVSIM_CTRL_RCV_EN_SHIFT, EMVSIM_CTRL_RCV_EN_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_CTRL, field XMT_EN[17] (RW)
 *
 * Used to enable/disable the EMV SIM transmitter block. It can be set to 0
 * during the auto power down sequence. Note: Setting this bit (transition from 0 to
 * 1) will reset the CRC and LRC values.
 *
 * Values:
 * - 0b0 - EMV SIM Transmitter disabled (default)
 * - 0b1 - EMV SIM Transmitter enabled
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_CTRL_XMT_EN field. */
#define EMVSIM_RD_CTRL_XMT_EN(base) ((EMVSIM_CTRL_REG(base) & EMVSIM_CTRL_XMT_EN_MASK) >> EMVSIM_CTRL_XMT_EN_SHIFT)
#define EMVSIM_BRD_CTRL_XMT_EN(base) (BME_UBFX32(&EMVSIM_CTRL_REG(base), EMVSIM_CTRL_XMT_EN_SHIFT, EMVSIM_CTRL_XMT_EN_WIDTH))

/*! @brief Set the XMT_EN field to a new value. */
#define EMVSIM_WR_CTRL_XMT_EN(base, value) (EMVSIM_RMW_CTRL(base, EMVSIM_CTRL_XMT_EN_MASK, EMVSIM_CTRL_XMT_EN(value)))
#define EMVSIM_BWR_CTRL_XMT_EN(base, value) (BME_BFI32(&EMVSIM_CTRL_REG(base), ((uint32_t)(value) << EMVSIM_CTRL_XMT_EN_SHIFT), EMVSIM_CTRL_XMT_EN_SHIFT, EMVSIM_CTRL_XMT_EN_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_CTRL, field RCVR_11[18] (RW)
 *
 * Used to configure the EMV SIM module receiver for 11 ETU operation (that is,
 * 1 Stop bit). This bit is provided for support of T=1 cards.
 *
 * Values:
 * - 0b0 - Receiver configured for 12 ETU operation mode (default)
 * - 0b1 - Receiver configured for 11 ETU operation mode
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_CTRL_RCVR_11 field. */
#define EMVSIM_RD_CTRL_RCVR_11(base) ((EMVSIM_CTRL_REG(base) & EMVSIM_CTRL_RCVR_11_MASK) >> EMVSIM_CTRL_RCVR_11_SHIFT)
#define EMVSIM_BRD_CTRL_RCVR_11(base) (BME_UBFX32(&EMVSIM_CTRL_REG(base), EMVSIM_CTRL_RCVR_11_SHIFT, EMVSIM_CTRL_RCVR_11_WIDTH))

/*! @brief Set the RCVR_11 field to a new value. */
#define EMVSIM_WR_CTRL_RCVR_11(base, value) (EMVSIM_RMW_CTRL(base, EMVSIM_CTRL_RCVR_11_MASK, EMVSIM_CTRL_RCVR_11(value)))
#define EMVSIM_BWR_CTRL_RCVR_11(base, value) (BME_BFI32(&EMVSIM_CTRL_REG(base), ((uint32_t)(value) << EMVSIM_CTRL_RCVR_11_SHIFT), EMVSIM_CTRL_RCVR_11_SHIFT, EMVSIM_CTRL_RCVR_11_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_CTRL, field RX_DMA_EN[19] (RW)
 *
 * Enables assertion of DMA read request when Receive FIFO reaches the
 * programmed data threshold value. Request is held asserted till all the programmed
 * threshold bytes are read out. Receiver Data Interrupt will not be generated when
 * this bit is asserted.
 *
 * Values:
 * - 0b0 - No DMA Read Request asserted for Receiver (default)
 * - 0b1 - DMA Read Request asserted for Receiver
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_CTRL_RX_DMA_EN field. */
#define EMVSIM_RD_CTRL_RX_DMA_EN(base) ((EMVSIM_CTRL_REG(base) & EMVSIM_CTRL_RX_DMA_EN_MASK) >> EMVSIM_CTRL_RX_DMA_EN_SHIFT)
#define EMVSIM_BRD_CTRL_RX_DMA_EN(base) (BME_UBFX32(&EMVSIM_CTRL_REG(base), EMVSIM_CTRL_RX_DMA_EN_SHIFT, EMVSIM_CTRL_RX_DMA_EN_WIDTH))

/*! @brief Set the RX_DMA_EN field to a new value. */
#define EMVSIM_WR_CTRL_RX_DMA_EN(base, value) (EMVSIM_RMW_CTRL(base, EMVSIM_CTRL_RX_DMA_EN_MASK, EMVSIM_CTRL_RX_DMA_EN(value)))
#define EMVSIM_BWR_CTRL_RX_DMA_EN(base, value) (BME_BFI32(&EMVSIM_CTRL_REG(base), ((uint32_t)(value) << EMVSIM_CTRL_RX_DMA_EN_SHIFT), EMVSIM_CTRL_RX_DMA_EN_SHIFT, EMVSIM_CTRL_RX_DMA_EN_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_CTRL, field TX_DMA_EN[20] (RW)
 *
 * Enables assertion of DMA write request when Transmit FIFO is empty. Request
 * is held asserted till Transmit FIFO reaches the programmed data threshold
 * value. Transmit Data Threshold Interrupt will not be generated when this bit is
 * asserted.
 *
 * Values:
 * - 0b0 - No DMA Write Request asserted for Transmitter (default)
 * - 0b1 - DMA Write Request asserted for Transmitter
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_CTRL_TX_DMA_EN field. */
#define EMVSIM_RD_CTRL_TX_DMA_EN(base) ((EMVSIM_CTRL_REG(base) & EMVSIM_CTRL_TX_DMA_EN_MASK) >> EMVSIM_CTRL_TX_DMA_EN_SHIFT)
#define EMVSIM_BRD_CTRL_TX_DMA_EN(base) (BME_UBFX32(&EMVSIM_CTRL_REG(base), EMVSIM_CTRL_TX_DMA_EN_SHIFT, EMVSIM_CTRL_TX_DMA_EN_WIDTH))

/*! @brief Set the TX_DMA_EN field to a new value. */
#define EMVSIM_WR_CTRL_TX_DMA_EN(base, value) (EMVSIM_RMW_CTRL(base, EMVSIM_CTRL_TX_DMA_EN_MASK, EMVSIM_CTRL_TX_DMA_EN(value)))
#define EMVSIM_BWR_CTRL_TX_DMA_EN(base, value) (BME_BFI32(&EMVSIM_CTRL_REG(base), ((uint32_t)(value) << EMVSIM_CTRL_TX_DMA_EN_SHIFT), EMVSIM_CTRL_TX_DMA_EN_SHIFT, EMVSIM_CTRL_TX_DMA_EN_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_CTRL, field INV_CRC_VAL[24] (RW)
 *
 * This bit control whether the bits within the CRC Output value will be
 * inverted (1's complement) or not. For CCITT CRC calculation, this bit should be set
 * to '1'. For any other CRC using same polynomial, this bit can be set
 * accordingly.
 *
 * Values:
 * - 0b0 - Bits in CRC Output value will not be inverted.
 * - 0b1 - Bits in CRC Output value will be inverted. (default)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_CTRL_INV_CRC_VAL field. */
#define EMVSIM_RD_CTRL_INV_CRC_VAL(base) ((EMVSIM_CTRL_REG(base) & EMVSIM_CTRL_INV_CRC_VAL_MASK) >> EMVSIM_CTRL_INV_CRC_VAL_SHIFT)
#define EMVSIM_BRD_CTRL_INV_CRC_VAL(base) (BME_UBFX32(&EMVSIM_CTRL_REG(base), EMVSIM_CTRL_INV_CRC_VAL_SHIFT, EMVSIM_CTRL_INV_CRC_VAL_WIDTH))

/*! @brief Set the INV_CRC_VAL field to a new value. */
#define EMVSIM_WR_CTRL_INV_CRC_VAL(base, value) (EMVSIM_RMW_CTRL(base, EMVSIM_CTRL_INV_CRC_VAL_MASK, EMVSIM_CTRL_INV_CRC_VAL(value)))
#define EMVSIM_BWR_CTRL_INV_CRC_VAL(base, value) (BME_BFI32(&EMVSIM_CTRL_REG(base), ((uint32_t)(value) << EMVSIM_CTRL_INV_CRC_VAL_SHIFT), EMVSIM_CTRL_INV_CRC_VAL_SHIFT, EMVSIM_CTRL_INV_CRC_VAL_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_CTRL, field CRC_OUT_FLIP[25] (RW)
 *
 * This bit control whether the bits in the CRC output bytes will be reversed or
 * not. When set to '1', the bits within the two bytes for CRC Output will
 * change from 15:0 to {8:15,0:7}. For CCITT CRC calculation, this bit should be set
 * to '1'. For any other CRC using same polynomial, this bit can be set
 * accordingly.
 *
 * Values:
 * - 0b0 - Bits within the CRC output bytes will not be reversed i.e. 15:0 will
 *     remain 15:0 (default)
 * - 0b1 - Bits within the CRC output bytes will be reversed i.e. 15:0 will
 *     become {8:15,0:7}
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_CTRL_CRC_OUT_FLIP field. */
#define EMVSIM_RD_CTRL_CRC_OUT_FLIP(base) ((EMVSIM_CTRL_REG(base) & EMVSIM_CTRL_CRC_OUT_FLIP_MASK) >> EMVSIM_CTRL_CRC_OUT_FLIP_SHIFT)
#define EMVSIM_BRD_CTRL_CRC_OUT_FLIP(base) (BME_UBFX32(&EMVSIM_CTRL_REG(base), EMVSIM_CTRL_CRC_OUT_FLIP_SHIFT, EMVSIM_CTRL_CRC_OUT_FLIP_WIDTH))

/*! @brief Set the CRC_OUT_FLIP field to a new value. */
#define EMVSIM_WR_CTRL_CRC_OUT_FLIP(base, value) (EMVSIM_RMW_CTRL(base, EMVSIM_CTRL_CRC_OUT_FLIP_MASK, EMVSIM_CTRL_CRC_OUT_FLIP(value)))
#define EMVSIM_BWR_CTRL_CRC_OUT_FLIP(base, value) (BME_BFI32(&EMVSIM_CTRL_REG(base), ((uint32_t)(value) << EMVSIM_CTRL_CRC_OUT_FLIP_SHIFT), EMVSIM_CTRL_CRC_OUT_FLIP_SHIFT, EMVSIM_CTRL_CRC_OUT_FLIP_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_CTRL, field CRC_IN_FLIP[26] (RW)
 *
 * This bit control whether the bits in the CRC input byte will be reversed
 * before CRC calculation or not. When set to '1', the bits within the input byte for
 * CRC will change from 7:0 to 0:7. For CCITT CRC calculation, this bit should
 * be set to '1'. For any other CRC using same polynomial, this bit can be set
 * accordingly.
 *
 * Values:
 * - 0b0 - Bits in the input byte will not be reversed (i.e. 7:0 will remain
 *     7:0) before the CRC calculation (default)
 * - 0b1 - Bits in the input byte will be reversed (i.e. 7:0 will become 0:7)
 *     before CRC calculation
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_CTRL_CRC_IN_FLIP field. */
#define EMVSIM_RD_CTRL_CRC_IN_FLIP(base) ((EMVSIM_CTRL_REG(base) & EMVSIM_CTRL_CRC_IN_FLIP_MASK) >> EMVSIM_CTRL_CRC_IN_FLIP_SHIFT)
#define EMVSIM_BRD_CTRL_CRC_IN_FLIP(base) (BME_UBFX32(&EMVSIM_CTRL_REG(base), EMVSIM_CTRL_CRC_IN_FLIP_SHIFT, EMVSIM_CTRL_CRC_IN_FLIP_WIDTH))

/*! @brief Set the CRC_IN_FLIP field to a new value. */
#define EMVSIM_WR_CTRL_CRC_IN_FLIP(base, value) (EMVSIM_RMW_CTRL(base, EMVSIM_CTRL_CRC_IN_FLIP_MASK, EMVSIM_CTRL_CRC_IN_FLIP(value)))
#define EMVSIM_BWR_CTRL_CRC_IN_FLIP(base, value) (BME_BFI32(&EMVSIM_CTRL_REG(base), ((uint32_t)(value) << EMVSIM_CTRL_CRC_IN_FLIP_SHIFT), EMVSIM_CTRL_CRC_IN_FLIP_SHIFT, EMVSIM_CTRL_CRC_IN_FLIP_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_CTRL, field CWT_EN[27] (RW)
 *
 * Enables the character wait time counter. Clearing this bit resets the counter
 * to zero.
 *
 * Values:
 * - 0b0 - Character Wait time Counter is disabled (default)
 * - 0b1 - Character Wait time counter is enabled
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_CTRL_CWT_EN field. */
#define EMVSIM_RD_CTRL_CWT_EN(base) ((EMVSIM_CTRL_REG(base) & EMVSIM_CTRL_CWT_EN_MASK) >> EMVSIM_CTRL_CWT_EN_SHIFT)
#define EMVSIM_BRD_CTRL_CWT_EN(base) (BME_UBFX32(&EMVSIM_CTRL_REG(base), EMVSIM_CTRL_CWT_EN_SHIFT, EMVSIM_CTRL_CWT_EN_WIDTH))

/*! @brief Set the CWT_EN field to a new value. */
#define EMVSIM_WR_CTRL_CWT_EN(base, value) (EMVSIM_RMW_CTRL(base, EMVSIM_CTRL_CWT_EN_MASK, EMVSIM_CTRL_CWT_EN(value)))
#define EMVSIM_BWR_CTRL_CWT_EN(base, value) (BME_BFI32(&EMVSIM_CTRL_REG(base), ((uint32_t)(value) << EMVSIM_CTRL_CWT_EN_SHIFT), EMVSIM_CTRL_CWT_EN_SHIFT, EMVSIM_CTRL_CWT_EN_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_CTRL, field LRC_EN[28] (RW)
 *
 * This bit enables the calculation of the 8-bit LRC value for both receiver and
 * transmitter. The result of the calculation is continuously compared to zero
 * and reflected in the LRC_OK bit in the RX_STATUS register. Clearing this bit
 * resets the current LRC value in the EMV SIM hardware.
 *
 * Values:
 * - 0b0 - 8-bit Linear Redundancy Checking disabled (default)
 * - 0b1 - 8-bit Linear Redundancy Checking enabled
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_CTRL_LRC_EN field. */
#define EMVSIM_RD_CTRL_LRC_EN(base) ((EMVSIM_CTRL_REG(base) & EMVSIM_CTRL_LRC_EN_MASK) >> EMVSIM_CTRL_LRC_EN_SHIFT)
#define EMVSIM_BRD_CTRL_LRC_EN(base) (BME_UBFX32(&EMVSIM_CTRL_REG(base), EMVSIM_CTRL_LRC_EN_SHIFT, EMVSIM_CTRL_LRC_EN_WIDTH))

/*! @brief Set the LRC_EN field to a new value. */
#define EMVSIM_WR_CTRL_LRC_EN(base, value) (EMVSIM_RMW_CTRL(base, EMVSIM_CTRL_LRC_EN_MASK, EMVSIM_CTRL_LRC_EN(value)))
#define EMVSIM_BWR_CTRL_LRC_EN(base, value) (BME_BFI32(&EMVSIM_CTRL_REG(base), ((uint32_t)(value) << EMVSIM_CTRL_LRC_EN_SHIFT), EMVSIM_CTRL_LRC_EN_SHIFT, EMVSIM_CTRL_LRC_EN_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_CTRL, field CRC_EN[29] (RW)
 *
 * This bit enables the calculation of the 16-bit CRC value for both receiver
 * and transmitter. The result of the calculation is continuously compared to the
 * expected remainder and reflected in the CRC_OK bit in the RX_STATUS register.
 * Clearing this bit resets the current CRC residual value in the EMV SIM hardware.
 *
 * Values:
 * - 0b0 - 16-bit Cyclic Redundancy Checking disabled (default)
 * - 0b1 - 16-bit Cyclic Redundancy Checking enabled
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_CTRL_CRC_EN field. */
#define EMVSIM_RD_CTRL_CRC_EN(base) ((EMVSIM_CTRL_REG(base) & EMVSIM_CTRL_CRC_EN_MASK) >> EMVSIM_CTRL_CRC_EN_SHIFT)
#define EMVSIM_BRD_CTRL_CRC_EN(base) (BME_UBFX32(&EMVSIM_CTRL_REG(base), EMVSIM_CTRL_CRC_EN_SHIFT, EMVSIM_CTRL_CRC_EN_WIDTH))

/*! @brief Set the CRC_EN field to a new value. */
#define EMVSIM_WR_CTRL_CRC_EN(base, value) (EMVSIM_RMW_CTRL(base, EMVSIM_CTRL_CRC_EN_MASK, EMVSIM_CTRL_CRC_EN(value)))
#define EMVSIM_BWR_CTRL_CRC_EN(base, value) (BME_BFI32(&EMVSIM_CTRL_REG(base), ((uint32_t)(value) << EMVSIM_CTRL_CRC_EN_SHIFT), EMVSIM_CTRL_CRC_EN_SHIFT, EMVSIM_CTRL_CRC_EN_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_CTRL, field XMT_CRC_LRC[30] (RW)
 *
 * This bit specifies whether or not to transmit the redundancy checking data
 * (LRC or CRC) at the end of a transmission (that is, when the FIFO becomes empty).
 *
 * Values:
 * - 0b0 - No CRC or LRC value is transmitted (default)
 * - 0b1 - Transmit LRC or CRC info when FIFO empties (whichever is enabled)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_CTRL_XMT_CRC_LRC field. */
#define EMVSIM_RD_CTRL_XMT_CRC_LRC(base) ((EMVSIM_CTRL_REG(base) & EMVSIM_CTRL_XMT_CRC_LRC_MASK) >> EMVSIM_CTRL_XMT_CRC_LRC_SHIFT)
#define EMVSIM_BRD_CTRL_XMT_CRC_LRC(base) (BME_UBFX32(&EMVSIM_CTRL_REG(base), EMVSIM_CTRL_XMT_CRC_LRC_SHIFT, EMVSIM_CTRL_XMT_CRC_LRC_WIDTH))

/*! @brief Set the XMT_CRC_LRC field to a new value. */
#define EMVSIM_WR_CTRL_XMT_CRC_LRC(base, value) (EMVSIM_RMW_CTRL(base, EMVSIM_CTRL_XMT_CRC_LRC_MASK, EMVSIM_CTRL_XMT_CRC_LRC(value)))
#define EMVSIM_BWR_CTRL_XMT_CRC_LRC(base, value) (BME_BFI32(&EMVSIM_CTRL_REG(base), ((uint32_t)(value) << EMVSIM_CTRL_XMT_CRC_LRC_SHIFT), EMVSIM_CTRL_XMT_CRC_LRC_SHIFT, EMVSIM_CTRL_XMT_CRC_LRC_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_CTRL, field BWT_EN[31] (RW)
 *
 * Writing a '1' to this bit will enable the BWT and BGT functions. The BWT and
 * BGT functions can then be individually selected using the interrupt mask.
 *
 * Values:
 * - 0b0 - Disable BWT, BGT Counters (default)
 * - 0b1 - Enable BWT, BGT Counters
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_CTRL_BWT_EN field. */
#define EMVSIM_RD_CTRL_BWT_EN(base) ((EMVSIM_CTRL_REG(base) & EMVSIM_CTRL_BWT_EN_MASK) >> EMVSIM_CTRL_BWT_EN_SHIFT)
#define EMVSIM_BRD_CTRL_BWT_EN(base) (BME_UBFX32(&EMVSIM_CTRL_REG(base), EMVSIM_CTRL_BWT_EN_SHIFT, EMVSIM_CTRL_BWT_EN_WIDTH))

/*! @brief Set the BWT_EN field to a new value. */
#define EMVSIM_WR_CTRL_BWT_EN(base, value) (EMVSIM_RMW_CTRL(base, EMVSIM_CTRL_BWT_EN_MASK, EMVSIM_CTRL_BWT_EN(value)))
#define EMVSIM_BWR_CTRL_BWT_EN(base, value) (BME_BFI32(&EMVSIM_CTRL_REG(base), ((uint32_t)(value) << EMVSIM_CTRL_BWT_EN_SHIFT), EMVSIM_CTRL_BWT_EN_SHIFT, EMVSIM_CTRL_BWT_EN_WIDTH))
/*@}*/

/*******************************************************************************
 * EMVSIM_INT_MASK - Interrupt Mask Register
 ******************************************************************************/

/*!
 * @brief EMVSIM_INT_MASK - Interrupt Mask Register (RW)
 *
 * Reset value: 0x0000FFFFU
 */
/*!
 * @name Constants and macros for entire EMVSIM_INT_MASK register
 */
/*@{*/
#define EMVSIM_RD_INT_MASK(base) (EMVSIM_INT_MASK_REG(base))
#define EMVSIM_WR_INT_MASK(base, value) (EMVSIM_INT_MASK_REG(base) = (value))
#define EMVSIM_RMW_INT_MASK(base, mask, value) (EMVSIM_WR_INT_MASK(base, (EMVSIM_RD_INT_MASK(base) & ~(mask)) | (value)))
#define EMVSIM_SET_INT_MASK(base, value) (BME_OR32(&EMVSIM_INT_MASK_REG(base), (uint32_t)(value)))
#define EMVSIM_CLR_INT_MASK(base, value) (BME_AND32(&EMVSIM_INT_MASK_REG(base), (uint32_t)(~(value))))
#define EMVSIM_TOG_INT_MASK(base, value) (BME_XOR32(&EMVSIM_INT_MASK_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual EMVSIM_INT_MASK bitfields
 */

/*!
 * @name Register EMVSIM_INT_MASK, field RDT_IM[0] (RW)
 *
 * Used to enable/disable the ability of the RDTF flag in the RX_STATUS register
 * to generate EMV SIM interrupts.
 *
 * Values:
 * - 0b0 - RDTF interrupt enabled
 * - 0b1 - RDTF interrupt masked (default)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_INT_MASK_RDT_IM field. */
#define EMVSIM_RD_INT_MASK_RDT_IM(base) ((EMVSIM_INT_MASK_REG(base) & EMVSIM_INT_MASK_RDT_IM_MASK) >> EMVSIM_INT_MASK_RDT_IM_SHIFT)
#define EMVSIM_BRD_INT_MASK_RDT_IM(base) (BME_UBFX32(&EMVSIM_INT_MASK_REG(base), EMVSIM_INT_MASK_RDT_IM_SHIFT, EMVSIM_INT_MASK_RDT_IM_WIDTH))

/*! @brief Set the RDT_IM field to a new value. */
#define EMVSIM_WR_INT_MASK_RDT_IM(base, value) (EMVSIM_RMW_INT_MASK(base, EMVSIM_INT_MASK_RDT_IM_MASK, EMVSIM_INT_MASK_RDT_IM(value)))
#define EMVSIM_BWR_INT_MASK_RDT_IM(base, value) (BME_BFI32(&EMVSIM_INT_MASK_REG(base), ((uint32_t)(value) << EMVSIM_INT_MASK_RDT_IM_SHIFT), EMVSIM_INT_MASK_RDT_IM_SHIFT, EMVSIM_INT_MASK_RDT_IM_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_INT_MASK, field TC_IM[1] (RW)
 *
 * Used to enable/disable the ability of the TCF flag in the TX_STATUS register
 * to generate EMV SIM interrupts.
 *
 * Values:
 * - 0b0 - TCF interrupt enabled
 * - 0b1 - TCF interrupt masked (default)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_INT_MASK_TC_IM field. */
#define EMVSIM_RD_INT_MASK_TC_IM(base) ((EMVSIM_INT_MASK_REG(base) & EMVSIM_INT_MASK_TC_IM_MASK) >> EMVSIM_INT_MASK_TC_IM_SHIFT)
#define EMVSIM_BRD_INT_MASK_TC_IM(base) (BME_UBFX32(&EMVSIM_INT_MASK_REG(base), EMVSIM_INT_MASK_TC_IM_SHIFT, EMVSIM_INT_MASK_TC_IM_WIDTH))

/*! @brief Set the TC_IM field to a new value. */
#define EMVSIM_WR_INT_MASK_TC_IM(base, value) (EMVSIM_RMW_INT_MASK(base, EMVSIM_INT_MASK_TC_IM_MASK, EMVSIM_INT_MASK_TC_IM(value)))
#define EMVSIM_BWR_INT_MASK_TC_IM(base, value) (BME_BFI32(&EMVSIM_INT_MASK_REG(base), ((uint32_t)(value) << EMVSIM_INT_MASK_TC_IM_SHIFT), EMVSIM_INT_MASK_TC_IM_SHIFT, EMVSIM_INT_MASK_TC_IM_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_INT_MASK, field RFO_IM[2] (RW)
 *
 * Used to enable/disable the ability of the RFO flag in the RX_STATUS register
 * to generate EMV SIM interrupts.
 *
 * Values:
 * - 0b0 - RFO interrupt enabled
 * - 0b1 - RFO interrupt masked (default)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_INT_MASK_RFO_IM field. */
#define EMVSIM_RD_INT_MASK_RFO_IM(base) ((EMVSIM_INT_MASK_REG(base) & EMVSIM_INT_MASK_RFO_IM_MASK) >> EMVSIM_INT_MASK_RFO_IM_SHIFT)
#define EMVSIM_BRD_INT_MASK_RFO_IM(base) (BME_UBFX32(&EMVSIM_INT_MASK_REG(base), EMVSIM_INT_MASK_RFO_IM_SHIFT, EMVSIM_INT_MASK_RFO_IM_WIDTH))

/*! @brief Set the RFO_IM field to a new value. */
#define EMVSIM_WR_INT_MASK_RFO_IM(base, value) (EMVSIM_RMW_INT_MASK(base, EMVSIM_INT_MASK_RFO_IM_MASK, EMVSIM_INT_MASK_RFO_IM(value)))
#define EMVSIM_BWR_INT_MASK_RFO_IM(base, value) (BME_BFI32(&EMVSIM_INT_MASK_REG(base), ((uint32_t)(value) << EMVSIM_INT_MASK_RFO_IM_SHIFT), EMVSIM_INT_MASK_RFO_IM_SHIFT, EMVSIM_INT_MASK_RFO_IM_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_INT_MASK, field ETC_IM[3] (RW)
 *
 * Used to enable/disable the ability of the ETC flag in the TX_STATUS register
 * to generate EMV SIM interrupts.
 *
 * Values:
 * - 0b0 - ETC interrupt enabled
 * - 0b1 - ETC interrupt masked (default)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_INT_MASK_ETC_IM field. */
#define EMVSIM_RD_INT_MASK_ETC_IM(base) ((EMVSIM_INT_MASK_REG(base) & EMVSIM_INT_MASK_ETC_IM_MASK) >> EMVSIM_INT_MASK_ETC_IM_SHIFT)
#define EMVSIM_BRD_INT_MASK_ETC_IM(base) (BME_UBFX32(&EMVSIM_INT_MASK_REG(base), EMVSIM_INT_MASK_ETC_IM_SHIFT, EMVSIM_INT_MASK_ETC_IM_WIDTH))

/*! @brief Set the ETC_IM field to a new value. */
#define EMVSIM_WR_INT_MASK_ETC_IM(base, value) (EMVSIM_RMW_INT_MASK(base, EMVSIM_INT_MASK_ETC_IM_MASK, EMVSIM_INT_MASK_ETC_IM(value)))
#define EMVSIM_BWR_INT_MASK_ETC_IM(base, value) (BME_BFI32(&EMVSIM_INT_MASK_REG(base), ((uint32_t)(value) << EMVSIM_INT_MASK_ETC_IM_SHIFT), EMVSIM_INT_MASK_ETC_IM_SHIFT, EMVSIM_INT_MASK_ETC_IM_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_INT_MASK, field TFE_IM[4] (RW)
 *
 * Used to enable/disable the ability of the TFE flag in the TX_STATUS register
 * to generate EMV SIM interrupts.
 *
 * Values:
 * - 0b0 - TFE interrupt enabled
 * - 0b1 - TFE interrupt masked (default)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_INT_MASK_TFE_IM field. */
#define EMVSIM_RD_INT_MASK_TFE_IM(base) ((EMVSIM_INT_MASK_REG(base) & EMVSIM_INT_MASK_TFE_IM_MASK) >> EMVSIM_INT_MASK_TFE_IM_SHIFT)
#define EMVSIM_BRD_INT_MASK_TFE_IM(base) (BME_UBFX32(&EMVSIM_INT_MASK_REG(base), EMVSIM_INT_MASK_TFE_IM_SHIFT, EMVSIM_INT_MASK_TFE_IM_WIDTH))

/*! @brief Set the TFE_IM field to a new value. */
#define EMVSIM_WR_INT_MASK_TFE_IM(base, value) (EMVSIM_RMW_INT_MASK(base, EMVSIM_INT_MASK_TFE_IM_MASK, EMVSIM_INT_MASK_TFE_IM(value)))
#define EMVSIM_BWR_INT_MASK_TFE_IM(base, value) (BME_BFI32(&EMVSIM_INT_MASK_REG(base), ((uint32_t)(value) << EMVSIM_INT_MASK_TFE_IM_SHIFT), EMVSIM_INT_MASK_TFE_IM_SHIFT, EMVSIM_INT_MASK_TFE_IM_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_INT_MASK, field TNACK_IM[5] (RW)
 *
 * Used to enable/disable the ability of the TNTE flag in the TX_STATUS register
 * to generate EMV SIM interrupts.
 *
 * Values:
 * - 0b0 - TNTE interrupt enabled
 * - 0b1 - TNTE interrupt masked (default)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_INT_MASK_TNACK_IM field. */
#define EMVSIM_RD_INT_MASK_TNACK_IM(base) ((EMVSIM_INT_MASK_REG(base) & EMVSIM_INT_MASK_TNACK_IM_MASK) >> EMVSIM_INT_MASK_TNACK_IM_SHIFT)
#define EMVSIM_BRD_INT_MASK_TNACK_IM(base) (BME_UBFX32(&EMVSIM_INT_MASK_REG(base), EMVSIM_INT_MASK_TNACK_IM_SHIFT, EMVSIM_INT_MASK_TNACK_IM_WIDTH))

/*! @brief Set the TNACK_IM field to a new value. */
#define EMVSIM_WR_INT_MASK_TNACK_IM(base, value) (EMVSIM_RMW_INT_MASK(base, EMVSIM_INT_MASK_TNACK_IM_MASK, EMVSIM_INT_MASK_TNACK_IM(value)))
#define EMVSIM_BWR_INT_MASK_TNACK_IM(base, value) (BME_BFI32(&EMVSIM_INT_MASK_REG(base), ((uint32_t)(value) << EMVSIM_INT_MASK_TNACK_IM_SHIFT), EMVSIM_INT_MASK_TNACK_IM_SHIFT, EMVSIM_INT_MASK_TNACK_IM_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_INT_MASK, field TFF_IM[6] (RW)
 *
 * Used to enable/disable the ability of the TFF flag in the TX_STATUS register
 * to generate EMV SIM interrupts.
 *
 * Values:
 * - 0b0 - TFF interrupt enabled
 * - 0b1 - TFF interrupt masked (default)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_INT_MASK_TFF_IM field. */
#define EMVSIM_RD_INT_MASK_TFF_IM(base) ((EMVSIM_INT_MASK_REG(base) & EMVSIM_INT_MASK_TFF_IM_MASK) >> EMVSIM_INT_MASK_TFF_IM_SHIFT)
#define EMVSIM_BRD_INT_MASK_TFF_IM(base) (BME_UBFX32(&EMVSIM_INT_MASK_REG(base), EMVSIM_INT_MASK_TFF_IM_SHIFT, EMVSIM_INT_MASK_TFF_IM_WIDTH))

/*! @brief Set the TFF_IM field to a new value. */
#define EMVSIM_WR_INT_MASK_TFF_IM(base, value) (EMVSIM_RMW_INT_MASK(base, EMVSIM_INT_MASK_TFF_IM_MASK, EMVSIM_INT_MASK_TFF_IM(value)))
#define EMVSIM_BWR_INT_MASK_TFF_IM(base, value) (BME_BFI32(&EMVSIM_INT_MASK_REG(base), ((uint32_t)(value) << EMVSIM_INT_MASK_TFF_IM_SHIFT), EMVSIM_INT_MASK_TFF_IM_SHIFT, EMVSIM_INT_MASK_TFF_IM_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_INT_MASK, field TDT_IM[7] (RW)
 *
 * Used to enable/disable the ability of the TDTF flag in the TX_STATUS register
 * to generate EMV SIM interrupts.
 *
 * Values:
 * - 0b0 - TDTF interrupt enabled
 * - 0b1 - TDTF interrupt masked (default)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_INT_MASK_TDT_IM field. */
#define EMVSIM_RD_INT_MASK_TDT_IM(base) ((EMVSIM_INT_MASK_REG(base) & EMVSIM_INT_MASK_TDT_IM_MASK) >> EMVSIM_INT_MASK_TDT_IM_SHIFT)
#define EMVSIM_BRD_INT_MASK_TDT_IM(base) (BME_UBFX32(&EMVSIM_INT_MASK_REG(base), EMVSIM_INT_MASK_TDT_IM_SHIFT, EMVSIM_INT_MASK_TDT_IM_WIDTH))

/*! @brief Set the TDT_IM field to a new value. */
#define EMVSIM_WR_INT_MASK_TDT_IM(base, value) (EMVSIM_RMW_INT_MASK(base, EMVSIM_INT_MASK_TDT_IM_MASK, EMVSIM_INT_MASK_TDT_IM(value)))
#define EMVSIM_BWR_INT_MASK_TDT_IM(base, value) (BME_BFI32(&EMVSIM_INT_MASK_REG(base), ((uint32_t)(value) << EMVSIM_INT_MASK_TDT_IM_SHIFT), EMVSIM_INT_MASK_TDT_IM_SHIFT, EMVSIM_INT_MASK_TDT_IM_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_INT_MASK, field GPCNT0_IM[8] (RW)
 *
 * Used to enable/disable the ability of the GPCNT0_TO flag in the TX_STATUS
 * register to generate EMV SIM interrupts.
 *
 * Values:
 * - 0b0 - GPCNT0_TO interrupt enabled
 * - 0b1 - GPCNT0_TO interrupt masked (default)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_INT_MASK_GPCNT0_IM field. */
#define EMVSIM_RD_INT_MASK_GPCNT0_IM(base) ((EMVSIM_INT_MASK_REG(base) & EMVSIM_INT_MASK_GPCNT0_IM_MASK) >> EMVSIM_INT_MASK_GPCNT0_IM_SHIFT)
#define EMVSIM_BRD_INT_MASK_GPCNT0_IM(base) (BME_UBFX32(&EMVSIM_INT_MASK_REG(base), EMVSIM_INT_MASK_GPCNT0_IM_SHIFT, EMVSIM_INT_MASK_GPCNT0_IM_WIDTH))

/*! @brief Set the GPCNT0_IM field to a new value. */
#define EMVSIM_WR_INT_MASK_GPCNT0_IM(base, value) (EMVSIM_RMW_INT_MASK(base, EMVSIM_INT_MASK_GPCNT0_IM_MASK, EMVSIM_INT_MASK_GPCNT0_IM(value)))
#define EMVSIM_BWR_INT_MASK_GPCNT0_IM(base, value) (BME_BFI32(&EMVSIM_INT_MASK_REG(base), ((uint32_t)(value) << EMVSIM_INT_MASK_GPCNT0_IM_SHIFT), EMVSIM_INT_MASK_GPCNT0_IM_SHIFT, EMVSIM_INT_MASK_GPCNT0_IM_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_INT_MASK, field CWT_ERR_IM[9] (RW)
 *
 * Used to enable/disable the ability of the CWT_ERR flag in the RX_STATUS
 * register to generate EMV SIM interrupts.
 *
 * Values:
 * - 0b0 - CWT_ERR interrupt enabled
 * - 0b1 - CWT_ERR interrupt masked (default)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_INT_MASK_CWT_ERR_IM field. */
#define EMVSIM_RD_INT_MASK_CWT_ERR_IM(base) ((EMVSIM_INT_MASK_REG(base) & EMVSIM_INT_MASK_CWT_ERR_IM_MASK) >> EMVSIM_INT_MASK_CWT_ERR_IM_SHIFT)
#define EMVSIM_BRD_INT_MASK_CWT_ERR_IM(base) (BME_UBFX32(&EMVSIM_INT_MASK_REG(base), EMVSIM_INT_MASK_CWT_ERR_IM_SHIFT, EMVSIM_INT_MASK_CWT_ERR_IM_WIDTH))

/*! @brief Set the CWT_ERR_IM field to a new value. */
#define EMVSIM_WR_INT_MASK_CWT_ERR_IM(base, value) (EMVSIM_RMW_INT_MASK(base, EMVSIM_INT_MASK_CWT_ERR_IM_MASK, EMVSIM_INT_MASK_CWT_ERR_IM(value)))
#define EMVSIM_BWR_INT_MASK_CWT_ERR_IM(base, value) (BME_BFI32(&EMVSIM_INT_MASK_REG(base), ((uint32_t)(value) << EMVSIM_INT_MASK_CWT_ERR_IM_SHIFT), EMVSIM_INT_MASK_CWT_ERR_IM_SHIFT, EMVSIM_INT_MASK_CWT_ERR_IM_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_INT_MASK, field RNACK_IM[10] (RW)
 *
 * Used to enable/disable the ability of the RTE flag in the RX_STATUS register
 * to generate EMV SIM interrupts.
 *
 * Values:
 * - 0b0 - RTE interrupt enabled
 * - 0b1 - RTE interrupt masked (default)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_INT_MASK_RNACK_IM field. */
#define EMVSIM_RD_INT_MASK_RNACK_IM(base) ((EMVSIM_INT_MASK_REG(base) & EMVSIM_INT_MASK_RNACK_IM_MASK) >> EMVSIM_INT_MASK_RNACK_IM_SHIFT)
#define EMVSIM_BRD_INT_MASK_RNACK_IM(base) (BME_UBFX32(&EMVSIM_INT_MASK_REG(base), EMVSIM_INT_MASK_RNACK_IM_SHIFT, EMVSIM_INT_MASK_RNACK_IM_WIDTH))

/*! @brief Set the RNACK_IM field to a new value. */
#define EMVSIM_WR_INT_MASK_RNACK_IM(base, value) (EMVSIM_RMW_INT_MASK(base, EMVSIM_INT_MASK_RNACK_IM_MASK, EMVSIM_INT_MASK_RNACK_IM(value)))
#define EMVSIM_BWR_INT_MASK_RNACK_IM(base, value) (BME_BFI32(&EMVSIM_INT_MASK_REG(base), ((uint32_t)(value) << EMVSIM_INT_MASK_RNACK_IM_SHIFT), EMVSIM_INT_MASK_RNACK_IM_SHIFT, EMVSIM_INT_MASK_RNACK_IM_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_INT_MASK, field BWT_ERR_IM[11] (RW)
 *
 * Used to enable/disable the ability of the BWT_ERR flag in the RX_STATUS
 * register to generate EMV SIM interrupts.
 *
 * Values:
 * - 0b0 - BWT_ERR interrupt enabled
 * - 0b1 - BWT_ERR interrupt masked (default)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_INT_MASK_BWT_ERR_IM field. */
#define EMVSIM_RD_INT_MASK_BWT_ERR_IM(base) ((EMVSIM_INT_MASK_REG(base) & EMVSIM_INT_MASK_BWT_ERR_IM_MASK) >> EMVSIM_INT_MASK_BWT_ERR_IM_SHIFT)
#define EMVSIM_BRD_INT_MASK_BWT_ERR_IM(base) (BME_UBFX32(&EMVSIM_INT_MASK_REG(base), EMVSIM_INT_MASK_BWT_ERR_IM_SHIFT, EMVSIM_INT_MASK_BWT_ERR_IM_WIDTH))

/*! @brief Set the BWT_ERR_IM field to a new value. */
#define EMVSIM_WR_INT_MASK_BWT_ERR_IM(base, value) (EMVSIM_RMW_INT_MASK(base, EMVSIM_INT_MASK_BWT_ERR_IM_MASK, EMVSIM_INT_MASK_BWT_ERR_IM(value)))
#define EMVSIM_BWR_INT_MASK_BWT_ERR_IM(base, value) (BME_BFI32(&EMVSIM_INT_MASK_REG(base), ((uint32_t)(value) << EMVSIM_INT_MASK_BWT_ERR_IM_SHIFT), EMVSIM_INT_MASK_BWT_ERR_IM_SHIFT, EMVSIM_INT_MASK_BWT_ERR_IM_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_INT_MASK, field BGT_ERR_IM[12] (RW)
 *
 * Used to enable/disable the ability of the BGT_ERR flag in the RX_STATUS
 * register to generate EMV SIM interrupts.
 *
 * Values:
 * - 0b0 - BGT_ERR interrupt enabled
 * - 0b1 - BGT_ERR interrupt masked (default)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_INT_MASK_BGT_ERR_IM field. */
#define EMVSIM_RD_INT_MASK_BGT_ERR_IM(base) ((EMVSIM_INT_MASK_REG(base) & EMVSIM_INT_MASK_BGT_ERR_IM_MASK) >> EMVSIM_INT_MASK_BGT_ERR_IM_SHIFT)
#define EMVSIM_BRD_INT_MASK_BGT_ERR_IM(base) (BME_UBFX32(&EMVSIM_INT_MASK_REG(base), EMVSIM_INT_MASK_BGT_ERR_IM_SHIFT, EMVSIM_INT_MASK_BGT_ERR_IM_WIDTH))

/*! @brief Set the BGT_ERR_IM field to a new value. */
#define EMVSIM_WR_INT_MASK_BGT_ERR_IM(base, value) (EMVSIM_RMW_INT_MASK(base, EMVSIM_INT_MASK_BGT_ERR_IM_MASK, EMVSIM_INT_MASK_BGT_ERR_IM(value)))
#define EMVSIM_BWR_INT_MASK_BGT_ERR_IM(base, value) (BME_BFI32(&EMVSIM_INT_MASK_REG(base), ((uint32_t)(value) << EMVSIM_INT_MASK_BGT_ERR_IM_SHIFT), EMVSIM_INT_MASK_BGT_ERR_IM_SHIFT, EMVSIM_INT_MASK_BGT_ERR_IM_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_INT_MASK, field GPCNT1_IM[13] (RW)
 *
 * Used to enable/disable the ability of the GPCNT1_TO flag in the TX_STATUS
 * register to generate EMV SIM interrupts.
 *
 * Values:
 * - 0b0 - GPCNT1_TO interrupt enabled
 * - 0b1 - GPCNT1_TO interrupt masked (default)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_INT_MASK_GPCNT1_IM field. */
#define EMVSIM_RD_INT_MASK_GPCNT1_IM(base) ((EMVSIM_INT_MASK_REG(base) & EMVSIM_INT_MASK_GPCNT1_IM_MASK) >> EMVSIM_INT_MASK_GPCNT1_IM_SHIFT)
#define EMVSIM_BRD_INT_MASK_GPCNT1_IM(base) (BME_UBFX32(&EMVSIM_INT_MASK_REG(base), EMVSIM_INT_MASK_GPCNT1_IM_SHIFT, EMVSIM_INT_MASK_GPCNT1_IM_WIDTH))

/*! @brief Set the GPCNT1_IM field to a new value. */
#define EMVSIM_WR_INT_MASK_GPCNT1_IM(base, value) (EMVSIM_RMW_INT_MASK(base, EMVSIM_INT_MASK_GPCNT1_IM_MASK, EMVSIM_INT_MASK_GPCNT1_IM(value)))
#define EMVSIM_BWR_INT_MASK_GPCNT1_IM(base, value) (BME_BFI32(&EMVSIM_INT_MASK_REG(base), ((uint32_t)(value) << EMVSIM_INT_MASK_GPCNT1_IM_SHIFT), EMVSIM_INT_MASK_GPCNT1_IM_SHIFT, EMVSIM_INT_MASK_GPCNT1_IM_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_INT_MASK, field RX_DATA_IM[14] (RW)
 *
 * Used to enable/disable the ability of the RX_DATA flag in the RX_STATUS
 * register to generate EMV SIM interrupts.
 *
 * Values:
 * - 0b0 - RX_DATA interrupt enabled
 * - 0b1 - RX_DATA interrupt masked (default)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_INT_MASK_RX_DATA_IM field. */
#define EMVSIM_RD_INT_MASK_RX_DATA_IM(base) ((EMVSIM_INT_MASK_REG(base) & EMVSIM_INT_MASK_RX_DATA_IM_MASK) >> EMVSIM_INT_MASK_RX_DATA_IM_SHIFT)
#define EMVSIM_BRD_INT_MASK_RX_DATA_IM(base) (BME_UBFX32(&EMVSIM_INT_MASK_REG(base), EMVSIM_INT_MASK_RX_DATA_IM_SHIFT, EMVSIM_INT_MASK_RX_DATA_IM_WIDTH))

/*! @brief Set the RX_DATA_IM field to a new value. */
#define EMVSIM_WR_INT_MASK_RX_DATA_IM(base, value) (EMVSIM_RMW_INT_MASK(base, EMVSIM_INT_MASK_RX_DATA_IM_MASK, EMVSIM_INT_MASK_RX_DATA_IM(value)))
#define EMVSIM_BWR_INT_MASK_RX_DATA_IM(base, value) (BME_BFI32(&EMVSIM_INT_MASK_REG(base), ((uint32_t)(value) << EMVSIM_INT_MASK_RX_DATA_IM_SHIFT), EMVSIM_INT_MASK_RX_DATA_IM_SHIFT, EMVSIM_INT_MASK_RX_DATA_IM_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_INT_MASK, field PEF_IM[15] (RW)
 *
 * Used to enable/disable the ability of the PEF flag in the RX_STATUS register
 * to generate EMV SIM interrupts.
 *
 * Values:
 * - 0b0 - PEF interrupt enabled
 * - 0b1 - PEF interrupt masked (default)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_INT_MASK_PEF_IM field. */
#define EMVSIM_RD_INT_MASK_PEF_IM(base) ((EMVSIM_INT_MASK_REG(base) & EMVSIM_INT_MASK_PEF_IM_MASK) >> EMVSIM_INT_MASK_PEF_IM_SHIFT)
#define EMVSIM_BRD_INT_MASK_PEF_IM(base) (BME_UBFX32(&EMVSIM_INT_MASK_REG(base), EMVSIM_INT_MASK_PEF_IM_SHIFT, EMVSIM_INT_MASK_PEF_IM_WIDTH))

/*! @brief Set the PEF_IM field to a new value. */
#define EMVSIM_WR_INT_MASK_PEF_IM(base, value) (EMVSIM_RMW_INT_MASK(base, EMVSIM_INT_MASK_PEF_IM_MASK, EMVSIM_INT_MASK_PEF_IM(value)))
#define EMVSIM_BWR_INT_MASK_PEF_IM(base, value) (BME_BFI32(&EMVSIM_INT_MASK_REG(base), ((uint32_t)(value) << EMVSIM_INT_MASK_PEF_IM_SHIFT), EMVSIM_INT_MASK_PEF_IM_SHIFT, EMVSIM_INT_MASK_PEF_IM_WIDTH))
/*@}*/

/*******************************************************************************
 * EMVSIM_RX_THD - Receiver Threshold Register
 ******************************************************************************/

/*!
 * @brief EMVSIM_RX_THD - Receiver Threshold Register (RW)
 *
 * Reset value: 0x00000001U
 */
/*!
 * @name Constants and macros for entire EMVSIM_RX_THD register
 */
/*@{*/
#define EMVSIM_RD_RX_THD(base)   (EMVSIM_RX_THD_REG(base))
#define EMVSIM_WR_RX_THD(base, value) (EMVSIM_RX_THD_REG(base) = (value))
#define EMVSIM_RMW_RX_THD(base, mask, value) (EMVSIM_WR_RX_THD(base, (EMVSIM_RD_RX_THD(base) & ~(mask)) | (value)))
#define EMVSIM_SET_RX_THD(base, value) (BME_OR32(&EMVSIM_RX_THD_REG(base), (uint32_t)(value)))
#define EMVSIM_CLR_RX_THD(base, value) (BME_AND32(&EMVSIM_RX_THD_REG(base), (uint32_t)(~(value))))
#define EMVSIM_TOG_RX_THD(base, value) (BME_XOR32(&EMVSIM_RX_THD_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual EMVSIM_RX_THD bitfields
 */

/*!
 * @name Register EMVSIM_RX_THD, field RDT[3:0] (RW)
 *
 * Determines the number of bytes that must exist in the Receive FIFO to trigger
 * the receive data threshold interrupt flag (RDTF). Value must not exceed the
 * total bytes that can be stored in the Receive FIFO.
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_RX_THD_RDT field. */
#define EMVSIM_RD_RX_THD_RDT(base) ((EMVSIM_RX_THD_REG(base) & EMVSIM_RX_THD_RDT_MASK) >> EMVSIM_RX_THD_RDT_SHIFT)
#define EMVSIM_BRD_RX_THD_RDT(base) (BME_UBFX32(&EMVSIM_RX_THD_REG(base), EMVSIM_RX_THD_RDT_SHIFT, EMVSIM_RX_THD_RDT_WIDTH))

/*! @brief Set the RDT field to a new value. */
#define EMVSIM_WR_RX_THD_RDT(base, value) (EMVSIM_RMW_RX_THD(base, EMVSIM_RX_THD_RDT_MASK, EMVSIM_RX_THD_RDT(value)))
#define EMVSIM_BWR_RX_THD_RDT(base, value) (BME_BFI32(&EMVSIM_RX_THD_REG(base), ((uint32_t)(value) << EMVSIM_RX_THD_RDT_SHIFT), EMVSIM_RX_THD_RDT_SHIFT, EMVSIM_RX_THD_RDT_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_RX_THD, field RNCK_THD[11:8] (RW)
 *
 * Used to specify the number of consecutive NACK's transmitted by the EMV SIM
 * module, for a given character, before the receive threshold error (RTE) flag is
 * triggered. A value of 0 indicates that RTE is never set. When a valid
 * character is received by the EMV SIM, the internal counter keeping track of the NACK
 * count resets to zero for the subsequent byte being received. If the ANACK bit
 * is clear in the CNTL register, RNCK_THD has no effect.
 *
 * Values:
 * - 0b0000 - Zero Threshold. RTE will not be set
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_RX_THD_RNCK_THD field. */
#define EMVSIM_RD_RX_THD_RNCK_THD(base) ((EMVSIM_RX_THD_REG(base) & EMVSIM_RX_THD_RNCK_THD_MASK) >> EMVSIM_RX_THD_RNCK_THD_SHIFT)
#define EMVSIM_BRD_RX_THD_RNCK_THD(base) (BME_UBFX32(&EMVSIM_RX_THD_REG(base), EMVSIM_RX_THD_RNCK_THD_SHIFT, EMVSIM_RX_THD_RNCK_THD_WIDTH))

/*! @brief Set the RNCK_THD field to a new value. */
#define EMVSIM_WR_RX_THD_RNCK_THD(base, value) (EMVSIM_RMW_RX_THD(base, EMVSIM_RX_THD_RNCK_THD_MASK, EMVSIM_RX_THD_RNCK_THD(value)))
#define EMVSIM_BWR_RX_THD_RNCK_THD(base, value) (BME_BFI32(&EMVSIM_RX_THD_REG(base), ((uint32_t)(value) << EMVSIM_RX_THD_RNCK_THD_SHIFT), EMVSIM_RX_THD_RNCK_THD_SHIFT, EMVSIM_RX_THD_RNCK_THD_WIDTH))
/*@}*/

/*******************************************************************************
 * EMVSIM_TX_THD - Transmitter Threshold Register
 ******************************************************************************/

/*!
 * @brief EMVSIM_TX_THD - Transmitter Threshold Register (RW)
 *
 * Reset value: 0x0000000FU
 */
/*!
 * @name Constants and macros for entire EMVSIM_TX_THD register
 */
/*@{*/
#define EMVSIM_RD_TX_THD(base)   (EMVSIM_TX_THD_REG(base))
#define EMVSIM_WR_TX_THD(base, value) (EMVSIM_TX_THD_REG(base) = (value))
#define EMVSIM_RMW_TX_THD(base, mask, value) (EMVSIM_WR_TX_THD(base, (EMVSIM_RD_TX_THD(base) & ~(mask)) | (value)))
#define EMVSIM_SET_TX_THD(base, value) (BME_OR32(&EMVSIM_TX_THD_REG(base), (uint32_t)(value)))
#define EMVSIM_CLR_TX_THD(base, value) (BME_AND32(&EMVSIM_TX_THD_REG(base), (uint32_t)(~(value))))
#define EMVSIM_TOG_TX_THD(base, value) (BME_XOR32(&EMVSIM_TX_THD_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual EMVSIM_TX_THD bitfields
 */

/*!
 * @name Register EMVSIM_TX_THD, field TDT[3:0] (RW)
 *
 * Used to set the threshold value for the Transmit FIFO at which the TDTF bit
 * in the TX_STATUS register will be set. When the number of bytes in the Transmit
 * FIFO is less than or equal to TDT[3:0], TDTF will be set.
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_TX_THD_TDT field. */
#define EMVSIM_RD_TX_THD_TDT(base) ((EMVSIM_TX_THD_REG(base) & EMVSIM_TX_THD_TDT_MASK) >> EMVSIM_TX_THD_TDT_SHIFT)
#define EMVSIM_BRD_TX_THD_TDT(base) (BME_UBFX32(&EMVSIM_TX_THD_REG(base), EMVSIM_TX_THD_TDT_SHIFT, EMVSIM_TX_THD_TDT_WIDTH))

/*! @brief Set the TDT field to a new value. */
#define EMVSIM_WR_TX_THD_TDT(base, value) (EMVSIM_RMW_TX_THD(base, EMVSIM_TX_THD_TDT_MASK, EMVSIM_TX_THD_TDT(value)))
#define EMVSIM_BWR_TX_THD_TDT(base, value) (BME_BFI32(&EMVSIM_TX_THD_REG(base), ((uint32_t)(value) << EMVSIM_TX_THD_TDT_SHIFT), EMVSIM_TX_THD_TDT_SHIFT, EMVSIM_TX_THD_TDT_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_TX_THD, field TNCK_THD[11:8] (RW)
 *
 * Used to set the NACK threshold for the transmitter. Once the threshold number
 * set by TNCK_THD has been reached for the current byte being transmitted, the
 * error flag TNTE in the TX_STATUS register will be set. Setting of TNTE causes
 * the remaining transmissions queued in the transmit FIFO to be aborted and no
 * more transmissions to occur until software clears TNTE. To trigger TNTE, a
 * given byte being transmitted must reach the TNCK_THD threshold itself. Transmit
 * NACKs accumulated on one byte are not carried over to the next.
 *
 * Values:
 * - 0b0000 - TNTE will never be set; retransmission after NACK reception is
 *     disabled.
 * - 0b0001 - TNTE will be set after 1 nack is received; 0 retransmissions
 *     occurs.
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_TX_THD_TNCK_THD field. */
#define EMVSIM_RD_TX_THD_TNCK_THD(base) ((EMVSIM_TX_THD_REG(base) & EMVSIM_TX_THD_TNCK_THD_MASK) >> EMVSIM_TX_THD_TNCK_THD_SHIFT)
#define EMVSIM_BRD_TX_THD_TNCK_THD(base) (BME_UBFX32(&EMVSIM_TX_THD_REG(base), EMVSIM_TX_THD_TNCK_THD_SHIFT, EMVSIM_TX_THD_TNCK_THD_WIDTH))

/*! @brief Set the TNCK_THD field to a new value. */
#define EMVSIM_WR_TX_THD_TNCK_THD(base, value) (EMVSIM_RMW_TX_THD(base, EMVSIM_TX_THD_TNCK_THD_MASK, EMVSIM_TX_THD_TNCK_THD(value)))
#define EMVSIM_BWR_TX_THD_TNCK_THD(base, value) (BME_BFI32(&EMVSIM_TX_THD_REG(base), ((uint32_t)(value) << EMVSIM_TX_THD_TNCK_THD_SHIFT), EMVSIM_TX_THD_TNCK_THD_SHIFT, EMVSIM_TX_THD_TNCK_THD_WIDTH))
/*@}*/

/*******************************************************************************
 * EMVSIM_RX_STATUS - Receive Status Register
 ******************************************************************************/

/*!
 * @brief EMVSIM_RX_STATUS - Receive Status Register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire EMVSIM_RX_STATUS register
 */
/*@{*/
#define EMVSIM_RD_RX_STATUS(base) (EMVSIM_RX_STATUS_REG(base))
#define EMVSIM_WR_RX_STATUS(base, value) (EMVSIM_RX_STATUS_REG(base) = (value))
#define EMVSIM_RMW_RX_STATUS(base, mask, value) (EMVSIM_WR_RX_STATUS(base, (EMVSIM_RD_RX_STATUS(base) & ~(mask)) | (value)))
#define EMVSIM_SET_RX_STATUS(base, value) (BME_OR32(&EMVSIM_RX_STATUS_REG(base), (uint32_t)(value)))
#define EMVSIM_CLR_RX_STATUS(base, value) (BME_AND32(&EMVSIM_RX_STATUS_REG(base), (uint32_t)(~(value))))
#define EMVSIM_TOG_RX_STATUS(base, value) (BME_XOR32(&EMVSIM_RX_STATUS_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual EMVSIM_RX_STATUS bitfields
 */

/*!
 * @name Register EMVSIM_RX_STATUS, field RFO[0] (W1C)
 *
 * Used to indicate that the EMV SIM was unable to store received data due to
 * already unread bytes in the FIFO (FIFO full or almost full). It does not
 * necessarily indicate that data has been lost. If the ONACK control bit in the CNTL
 * register is set, there will be a NACK pulse generated on bytes that would
 * otherwise cause a loss of data due to a full FIFO. These bytes should be
 * retransmitted by the Smart Card which implies that no data has actually been lost. In
 * this case, the RFO flag is just an indicator that this situation has occurred
 * which may be helpful in system debug. For the case where ONACK is not set, a set
 * RFO flag does indicate a loss of data since all bytes received with the OEF
 * flag set will indeed be lost (including the byte that caused the bit to be set).
 * The RFO flag will cause an interrupt if the RFO_IM bit in the INT_MASK
 * register. The RFO flag is a write-one-to-clear bit.
 *
 * Values:
 * - 0b0 - No overrun error has occurred (default)
 * - 0b1 - A byte was received when the received FIFO was already full
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_RX_STATUS_RFO field. */
#define EMVSIM_RD_RX_STATUS_RFO(base) ((EMVSIM_RX_STATUS_REG(base) & EMVSIM_RX_STATUS_RFO_MASK) >> EMVSIM_RX_STATUS_RFO_SHIFT)
#define EMVSIM_BRD_RX_STATUS_RFO(base) (BME_UBFX32(&EMVSIM_RX_STATUS_REG(base), EMVSIM_RX_STATUS_RFO_SHIFT, EMVSIM_RX_STATUS_RFO_WIDTH))

/*! @brief Set the RFO field to a new value. */
#define EMVSIM_WR_RX_STATUS_RFO(base, value) (EMVSIM_RMW_RX_STATUS(base, (EMVSIM_RX_STATUS_RFO_MASK | EMVSIM_RX_STATUS_RX_DATA_MASK | EMVSIM_RX_STATUS_CWT_ERR_MASK | EMVSIM_RX_STATUS_RTE_MASK | EMVSIM_RX_STATUS_BWT_ERR_MASK | EMVSIM_RX_STATUS_BGT_ERR_MASK | EMVSIM_RX_STATUS_PEF_MASK | EMVSIM_RX_STATUS_FEF_MASK), EMVSIM_RX_STATUS_RFO(value)))
#define EMVSIM_BWR_RX_STATUS_RFO(base, value) (BME_BFI32(&EMVSIM_RX_STATUS_REG(base), ((uint32_t)(value) << EMVSIM_RX_STATUS_RFO_SHIFT), EMVSIM_RX_STATUS_RFO_SHIFT, EMVSIM_RX_STATUS_RFO_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_RX_STATUS, field RX_DATA[4] (W1C)
 *
 * Interrupt asserted when a new data byte is received and entered into the
 * Receive FIFO.
 *
 * Values:
 * - 0b0 - No new byte is received
 * - 0b1 - New byte is received ans stored in Receive FIFO
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_RX_STATUS_RX_DATA field. */
#define EMVSIM_RD_RX_STATUS_RX_DATA(base) ((EMVSIM_RX_STATUS_REG(base) & EMVSIM_RX_STATUS_RX_DATA_MASK) >> EMVSIM_RX_STATUS_RX_DATA_SHIFT)
#define EMVSIM_BRD_RX_STATUS_RX_DATA(base) (BME_UBFX32(&EMVSIM_RX_STATUS_REG(base), EMVSIM_RX_STATUS_RX_DATA_SHIFT, EMVSIM_RX_STATUS_RX_DATA_WIDTH))

/*! @brief Set the RX_DATA field to a new value. */
#define EMVSIM_WR_RX_STATUS_RX_DATA(base, value) (EMVSIM_RMW_RX_STATUS(base, (EMVSIM_RX_STATUS_RX_DATA_MASK | EMVSIM_RX_STATUS_RFO_MASK | EMVSIM_RX_STATUS_CWT_ERR_MASK | EMVSIM_RX_STATUS_RTE_MASK | EMVSIM_RX_STATUS_BWT_ERR_MASK | EMVSIM_RX_STATUS_BGT_ERR_MASK | EMVSIM_RX_STATUS_PEF_MASK | EMVSIM_RX_STATUS_FEF_MASK), EMVSIM_RX_STATUS_RX_DATA(value)))
#define EMVSIM_BWR_RX_STATUS_RX_DATA(base, value) (BME_BFI32(&EMVSIM_RX_STATUS_REG(base), ((uint32_t)(value) << EMVSIM_RX_STATUS_RX_DATA_SHIFT), EMVSIM_RX_STATUS_RX_DATA_SHIFT, EMVSIM_RX_STATUS_RX_DATA_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_RX_STATUS, field RDTF[5] (RO)
 *
 * Interrupt flag asserted when total bytes in the Receive FIFO equal or is
 * greater than the programmed receive threshold RDT[3:0]. The RDTF flag will be set
 * any time the number of unread bytes in the receive FIFO is equal to or greater
 * than the value set by RDT[3:0]. The flag can be cleared by reading enough
 * bytes out of the receive FIFO so as to bring the number of bytes left in the FIFO
 * below the RDT[3:0] level. Another way to clear the flag is to set the
 * RDT[3:0] level higher than the number of unread bytes currently in the FIFO. The RDTF
 * flag will create an interrupt if the RDT_IM bit in the INT_MASK register is
 * cleared.
 *
 * Values:
 * - 0b0 - Number of unread bytes in receive FIFO less than the value set by
 *     RDT[3:0] (default).
 * - 0b1 - Number of unread bytes in receive FIFO greater or than equal to value
 *     set by RDT[3:0].
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_RX_STATUS_RDTF field. */
#define EMVSIM_RD_RX_STATUS_RDTF(base) ((EMVSIM_RX_STATUS_REG(base) & EMVSIM_RX_STATUS_RDTF_MASK) >> EMVSIM_RX_STATUS_RDTF_SHIFT)
#define EMVSIM_BRD_RX_STATUS_RDTF(base) (BME_UBFX32(&EMVSIM_RX_STATUS_REG(base), EMVSIM_RX_STATUS_RDTF_SHIFT, EMVSIM_RX_STATUS_RDTF_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_RX_STATUS, field LRC_OK[6] (RO)
 *
 * Used to indicate when the calculated 8-bit LRC value is correct for the
 * current input data stream. The value is calculated across all received characters
 * from the point the LRC_EN bit is set in the CTRL register. The current LRC
 * residual can be reset by three mechanisms: Clear LRC_EN bit in CTRL register Set
 * XMT_EN bit in ENABLE register Automatically by hardware when ETC flag is set at
 * the end of a transmission.
 *
 * Values:
 * - 0b0 - Current LRC value does not match remainder.
 * - 0b1 - Current calculated LRC value matches the expected result (i.e. zero).
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_RX_STATUS_LRC_OK field. */
#define EMVSIM_RD_RX_STATUS_LRC_OK(base) ((EMVSIM_RX_STATUS_REG(base) & EMVSIM_RX_STATUS_LRC_OK_MASK) >> EMVSIM_RX_STATUS_LRC_OK_SHIFT)
#define EMVSIM_BRD_RX_STATUS_LRC_OK(base) (BME_UBFX32(&EMVSIM_RX_STATUS_REG(base), EMVSIM_RX_STATUS_LRC_OK_SHIFT, EMVSIM_RX_STATUS_LRC_OK_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_RX_STATUS, field CRC_OK[7] (RO)
 *
 * Used to indicate when the calculated 16-bit CRC value matches the expected
 * value for the current input data stream. The value is calculated across all
 * received characters from the point the CRC_EN bit is set in the CTRL register. The
 * current CRC residual can be reset by three mechanisms: Clear CRC_EN bit in
 * CTRL register Set XMT_EN bit in ENABLE register Automatically by hardware when
 * ETC flag is set at the end of a transmission.
 *
 * Values:
 * - 0b0 - Current CRC value does not match remainder.
 * - 0b1 - Current calculated CRC value matches the expected result.
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_RX_STATUS_CRC_OK field. */
#define EMVSIM_RD_RX_STATUS_CRC_OK(base) ((EMVSIM_RX_STATUS_REG(base) & EMVSIM_RX_STATUS_CRC_OK_MASK) >> EMVSIM_RX_STATUS_CRC_OK_SHIFT)
#define EMVSIM_BRD_RX_STATUS_CRC_OK(base) (BME_UBFX32(&EMVSIM_RX_STATUS_REG(base), EMVSIM_RX_STATUS_CRC_OK_SHIFT, EMVSIM_RX_STATUS_CRC_OK_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_RX_STATUS, field CWT_ERR[8] (W1C)
 *
 * Used to indicate when the time between received characters is equal to or
 * greater than the value programmed in the CHAR_WAIT register.
 *
 * Values:
 * - 0b0 - No CWT violation has occurred (default).
 * - 0b1 - Time between two consecutive characters has exceeded the value in
 *     CHAR_WAIT.
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_RX_STATUS_CWT_ERR field. */
#define EMVSIM_RD_RX_STATUS_CWT_ERR(base) ((EMVSIM_RX_STATUS_REG(base) & EMVSIM_RX_STATUS_CWT_ERR_MASK) >> EMVSIM_RX_STATUS_CWT_ERR_SHIFT)
#define EMVSIM_BRD_RX_STATUS_CWT_ERR(base) (BME_UBFX32(&EMVSIM_RX_STATUS_REG(base), EMVSIM_RX_STATUS_CWT_ERR_SHIFT, EMVSIM_RX_STATUS_CWT_ERR_WIDTH))

/*! @brief Set the CWT_ERR field to a new value. */
#define EMVSIM_WR_RX_STATUS_CWT_ERR(base, value) (EMVSIM_RMW_RX_STATUS(base, (EMVSIM_RX_STATUS_CWT_ERR_MASK | EMVSIM_RX_STATUS_RFO_MASK | EMVSIM_RX_STATUS_RX_DATA_MASK | EMVSIM_RX_STATUS_RTE_MASK | EMVSIM_RX_STATUS_BWT_ERR_MASK | EMVSIM_RX_STATUS_BGT_ERR_MASK | EMVSIM_RX_STATUS_PEF_MASK | EMVSIM_RX_STATUS_FEF_MASK), EMVSIM_RX_STATUS_CWT_ERR(value)))
#define EMVSIM_BWR_RX_STATUS_CWT_ERR(base, value) (BME_BFI32(&EMVSIM_RX_STATUS_REG(base), ((uint32_t)(value) << EMVSIM_RX_STATUS_CWT_ERR_SHIFT), EMVSIM_RX_STATUS_CWT_ERR_SHIFT, EMVSIM_RX_STATUS_CWT_ERR_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_RX_STATUS, field RTE[9] (W1C)
 *
 * Used to indicate whether the number of consecutive NACK's generated by the
 * EMV SIM module in response to receive parity errors, for the byte being
 * received, equals the value programmed in the RTH[3:0] in the RX_THRESHOLD register.
 * This bit will never set unless the ANACK bit is set in the CNTL register. The
 * SAPDx bit in the CNTL resister must be set to enable the threshold error to
 * trigger the auto power down sequence. RTE is a write once to clear bit. Clearing
 * this bit also resets the internal counter for consecutive NACK's being
 * transmitted for a given byte.
 *
 * Values:
 * - 0b0 - Number of NACKs generated by the receiver is less than the value
 *     programmed in RTH[3:0]
 * - 0b1 - Number of NACKs generated by the receiver is equal to the value
 *     programmed in RTH[3:0]
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_RX_STATUS_RTE field. */
#define EMVSIM_RD_RX_STATUS_RTE(base) ((EMVSIM_RX_STATUS_REG(base) & EMVSIM_RX_STATUS_RTE_MASK) >> EMVSIM_RX_STATUS_RTE_SHIFT)
#define EMVSIM_BRD_RX_STATUS_RTE(base) (BME_UBFX32(&EMVSIM_RX_STATUS_REG(base), EMVSIM_RX_STATUS_RTE_SHIFT, EMVSIM_RX_STATUS_RTE_WIDTH))

/*! @brief Set the RTE field to a new value. */
#define EMVSIM_WR_RX_STATUS_RTE(base, value) (EMVSIM_RMW_RX_STATUS(base, (EMVSIM_RX_STATUS_RTE_MASK | EMVSIM_RX_STATUS_RFO_MASK | EMVSIM_RX_STATUS_RX_DATA_MASK | EMVSIM_RX_STATUS_CWT_ERR_MASK | EMVSIM_RX_STATUS_BWT_ERR_MASK | EMVSIM_RX_STATUS_BGT_ERR_MASK | EMVSIM_RX_STATUS_PEF_MASK | EMVSIM_RX_STATUS_FEF_MASK), EMVSIM_RX_STATUS_RTE(value)))
#define EMVSIM_BWR_RX_STATUS_RTE(base, value) (BME_BFI32(&EMVSIM_RX_STATUS_REG(base), ((uint32_t)(value) << EMVSIM_RX_STATUS_RTE_SHIFT), EMVSIM_RX_STATUS_RTE_SHIFT, EMVSIM_RX_STATUS_RTE_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_RX_STATUS, field BWT_ERR[10] (W1C)
 *
 * Used to indicate if the block wait time has been exceeded. The threshold is
 * set by the block wait time registers.
 *
 * Values:
 * - 0b0 - Block wait time not exceeded
 * - 0b1 - Block wait time was exceeded
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_RX_STATUS_BWT_ERR field. */
#define EMVSIM_RD_RX_STATUS_BWT_ERR(base) ((EMVSIM_RX_STATUS_REG(base) & EMVSIM_RX_STATUS_BWT_ERR_MASK) >> EMVSIM_RX_STATUS_BWT_ERR_SHIFT)
#define EMVSIM_BRD_RX_STATUS_BWT_ERR(base) (BME_UBFX32(&EMVSIM_RX_STATUS_REG(base), EMVSIM_RX_STATUS_BWT_ERR_SHIFT, EMVSIM_RX_STATUS_BWT_ERR_WIDTH))

/*! @brief Set the BWT_ERR field to a new value. */
#define EMVSIM_WR_RX_STATUS_BWT_ERR(base, value) (EMVSIM_RMW_RX_STATUS(base, (EMVSIM_RX_STATUS_BWT_ERR_MASK | EMVSIM_RX_STATUS_RFO_MASK | EMVSIM_RX_STATUS_RX_DATA_MASK | EMVSIM_RX_STATUS_CWT_ERR_MASK | EMVSIM_RX_STATUS_RTE_MASK | EMVSIM_RX_STATUS_BGT_ERR_MASK | EMVSIM_RX_STATUS_PEF_MASK | EMVSIM_RX_STATUS_FEF_MASK), EMVSIM_RX_STATUS_BWT_ERR(value)))
#define EMVSIM_BWR_RX_STATUS_BWT_ERR(base, value) (BME_BFI32(&EMVSIM_RX_STATUS_REG(base), ((uint32_t)(value) << EMVSIM_RX_STATUS_BWT_ERR_SHIFT), EMVSIM_RX_STATUS_BWT_ERR_SHIFT, EMVSIM_RX_STATUS_BWT_ERR_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_RX_STATUS, field BGT_ERR[11] (W1C)
 *
 * Used to indicate if the block guard time was too small. The threshold is set
 * by the block guard time register.
 *
 * Values:
 * - 0b0 - Block guard time was sufficient
 * - 0b1 - Block guard time was too small
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_RX_STATUS_BGT_ERR field. */
#define EMVSIM_RD_RX_STATUS_BGT_ERR(base) ((EMVSIM_RX_STATUS_REG(base) & EMVSIM_RX_STATUS_BGT_ERR_MASK) >> EMVSIM_RX_STATUS_BGT_ERR_SHIFT)
#define EMVSIM_BRD_RX_STATUS_BGT_ERR(base) (BME_UBFX32(&EMVSIM_RX_STATUS_REG(base), EMVSIM_RX_STATUS_BGT_ERR_SHIFT, EMVSIM_RX_STATUS_BGT_ERR_WIDTH))

/*! @brief Set the BGT_ERR field to a new value. */
#define EMVSIM_WR_RX_STATUS_BGT_ERR(base, value) (EMVSIM_RMW_RX_STATUS(base, (EMVSIM_RX_STATUS_BGT_ERR_MASK | EMVSIM_RX_STATUS_RFO_MASK | EMVSIM_RX_STATUS_RX_DATA_MASK | EMVSIM_RX_STATUS_CWT_ERR_MASK | EMVSIM_RX_STATUS_RTE_MASK | EMVSIM_RX_STATUS_BWT_ERR_MASK | EMVSIM_RX_STATUS_PEF_MASK | EMVSIM_RX_STATUS_FEF_MASK), EMVSIM_RX_STATUS_BGT_ERR(value)))
#define EMVSIM_BWR_RX_STATUS_BGT_ERR(base, value) (BME_BFI32(&EMVSIM_RX_STATUS_REG(base), ((uint32_t)(value) << EMVSIM_RX_STATUS_BGT_ERR_SHIFT), EMVSIM_RX_STATUS_BGT_ERR_SHIFT, EMVSIM_RX_STATUS_BGT_ERR_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_RX_STATUS, field PEF[12] (W1C)
 *
 * Used to indicate if a received byte had a parity error or not. A parity error
 * will cause transmission of NACK if ANACK bit is set in CTRL register and PEF
 * bit will not be asserted. When ANACK is not set, PEF will be asserted. This
 * bit will also not assert when ICM bit is set; however parity is checked in ICM =
 * 1 mode. It is simply an indication that a parity error has occured.
 *
 * Values:
 * - 0b0 - No parity error detected
 * - 0b1 - Parity error detected
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_RX_STATUS_PEF field. */
#define EMVSIM_RD_RX_STATUS_PEF(base) ((EMVSIM_RX_STATUS_REG(base) & EMVSIM_RX_STATUS_PEF_MASK) >> EMVSIM_RX_STATUS_PEF_SHIFT)
#define EMVSIM_BRD_RX_STATUS_PEF(base) (BME_UBFX32(&EMVSIM_RX_STATUS_REG(base), EMVSIM_RX_STATUS_PEF_SHIFT, EMVSIM_RX_STATUS_PEF_WIDTH))

/*! @brief Set the PEF field to a new value. */
#define EMVSIM_WR_RX_STATUS_PEF(base, value) (EMVSIM_RMW_RX_STATUS(base, (EMVSIM_RX_STATUS_PEF_MASK | EMVSIM_RX_STATUS_RFO_MASK | EMVSIM_RX_STATUS_RX_DATA_MASK | EMVSIM_RX_STATUS_CWT_ERR_MASK | EMVSIM_RX_STATUS_RTE_MASK | EMVSIM_RX_STATUS_BWT_ERR_MASK | EMVSIM_RX_STATUS_BGT_ERR_MASK | EMVSIM_RX_STATUS_FEF_MASK), EMVSIM_RX_STATUS_PEF(value)))
#define EMVSIM_BWR_RX_STATUS_PEF(base, value) (BME_BFI32(&EMVSIM_RX_STATUS_REG(base), ((uint32_t)(value) << EMVSIM_RX_STATUS_PEF_SHIFT), EMVSIM_RX_STATUS_PEF_SHIFT, EMVSIM_RX_STATUS_PEF_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_RX_STATUS, field FEF[13] (W1C)
 *
 * Used to indicate if the current received byte did not have proper STOP bits.
 * This will not cause a NACK transmission. This bit will not cause an interrupt
 * assertion. It is simply an indication that a framing error has occured.
 *
 * Values:
 * - 0b0 - No frame error detected
 * - 0b1 - Frame error detected
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_RX_STATUS_FEF field. */
#define EMVSIM_RD_RX_STATUS_FEF(base) ((EMVSIM_RX_STATUS_REG(base) & EMVSIM_RX_STATUS_FEF_MASK) >> EMVSIM_RX_STATUS_FEF_SHIFT)
#define EMVSIM_BRD_RX_STATUS_FEF(base) (BME_UBFX32(&EMVSIM_RX_STATUS_REG(base), EMVSIM_RX_STATUS_FEF_SHIFT, EMVSIM_RX_STATUS_FEF_WIDTH))

/*! @brief Set the FEF field to a new value. */
#define EMVSIM_WR_RX_STATUS_FEF(base, value) (EMVSIM_RMW_RX_STATUS(base, (EMVSIM_RX_STATUS_FEF_MASK | EMVSIM_RX_STATUS_RFO_MASK | EMVSIM_RX_STATUS_RX_DATA_MASK | EMVSIM_RX_STATUS_CWT_ERR_MASK | EMVSIM_RX_STATUS_RTE_MASK | EMVSIM_RX_STATUS_BWT_ERR_MASK | EMVSIM_RX_STATUS_BGT_ERR_MASK | EMVSIM_RX_STATUS_PEF_MASK), EMVSIM_RX_STATUS_FEF(value)))
#define EMVSIM_BWR_RX_STATUS_FEF(base, value) (BME_BFI32(&EMVSIM_RX_STATUS_REG(base), ((uint32_t)(value) << EMVSIM_RX_STATUS_FEF_SHIFT), EMVSIM_RX_STATUS_FEF_SHIFT, EMVSIM_RX_STATUS_FEF_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_RX_STATUS, field RX_WPTR[19:16] (RO)
 *
 * Value of write pointer of Receive FIFO
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_RX_STATUS_RX_WPTR field. */
#define EMVSIM_RD_RX_STATUS_RX_WPTR(base) ((EMVSIM_RX_STATUS_REG(base) & EMVSIM_RX_STATUS_RX_WPTR_MASK) >> EMVSIM_RX_STATUS_RX_WPTR_SHIFT)
#define EMVSIM_BRD_RX_STATUS_RX_WPTR(base) (BME_UBFX32(&EMVSIM_RX_STATUS_REG(base), EMVSIM_RX_STATUS_RX_WPTR_SHIFT, EMVSIM_RX_STATUS_RX_WPTR_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_RX_STATUS, field RX_CNT[28:24] (RO)
 *
 * These bits indicate the number of bytes stored in the receive FIFO.
 *
 * Values:
 * - 0b00000 - FIFO is emtpy
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_RX_STATUS_RX_CNT field. */
#define EMVSIM_RD_RX_STATUS_RX_CNT(base) ((EMVSIM_RX_STATUS_REG(base) & EMVSIM_RX_STATUS_RX_CNT_MASK) >> EMVSIM_RX_STATUS_RX_CNT_SHIFT)
#define EMVSIM_BRD_RX_STATUS_RX_CNT(base) (BME_UBFX32(&EMVSIM_RX_STATUS_REG(base), EMVSIM_RX_STATUS_RX_CNT_SHIFT, EMVSIM_RX_STATUS_RX_CNT_WIDTH))
/*@}*/

/*******************************************************************************
 * EMVSIM_TX_STATUS - Transmitter Status Register
 ******************************************************************************/

/*!
 * @brief EMVSIM_TX_STATUS - Transmitter Status Register (RW)
 *
 * Reset value: 0x000000B8U
 */
/*!
 * @name Constants and macros for entire EMVSIM_TX_STATUS register
 */
/*@{*/
#define EMVSIM_RD_TX_STATUS(base) (EMVSIM_TX_STATUS_REG(base))
#define EMVSIM_WR_TX_STATUS(base, value) (EMVSIM_TX_STATUS_REG(base) = (value))
#define EMVSIM_RMW_TX_STATUS(base, mask, value) (EMVSIM_WR_TX_STATUS(base, (EMVSIM_RD_TX_STATUS(base) & ~(mask)) | (value)))
#define EMVSIM_SET_TX_STATUS(base, value) (BME_OR32(&EMVSIM_TX_STATUS_REG(base), (uint32_t)(value)))
#define EMVSIM_CLR_TX_STATUS(base, value) (BME_AND32(&EMVSIM_TX_STATUS_REG(base), (uint32_t)(~(value))))
#define EMVSIM_TOG_TX_STATUS(base, value) (BME_XOR32(&EMVSIM_TX_STATUS_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual EMVSIM_TX_STATUS bitfields
 */

/*!
 * @name Register EMVSIM_TX_STATUS, field TNTE[0] (W1C)
 *
 * Used to indicate the transmit NACK threshold has been reached. When TNTE is
 * high, no further transmissions will be done until the TNTE flag is cleared. Any
 * data transmissions still pending in the transmit FIFO will be aborted, and
 * the TC, ETC, and TFE flags will be set. The TNTE flag will create an interrupt
 * if TNACK_IM in the INT_MASK register is low. The TNTE bit is a
 * write-one-to-clear bit.
 *
 * Values:
 * - 0b0 - Transmit NACK threshold has not been reached (default)
 * - 0b1 - Transmit NACK threshold reached; transmitter frozen
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_TX_STATUS_TNTE field. */
#define EMVSIM_RD_TX_STATUS_TNTE(base) ((EMVSIM_TX_STATUS_REG(base) & EMVSIM_TX_STATUS_TNTE_MASK) >> EMVSIM_TX_STATUS_TNTE_SHIFT)
#define EMVSIM_BRD_TX_STATUS_TNTE(base) (BME_UBFX32(&EMVSIM_TX_STATUS_REG(base), EMVSIM_TX_STATUS_TNTE_SHIFT, EMVSIM_TX_STATUS_TNTE_WIDTH))

/*! @brief Set the TNTE field to a new value. */
#define EMVSIM_WR_TX_STATUS_TNTE(base, value) (EMVSIM_RMW_TX_STATUS(base, (EMVSIM_TX_STATUS_TNTE_MASK | EMVSIM_TX_STATUS_TFE_MASK | EMVSIM_TX_STATUS_ETCF_MASK | EMVSIM_TX_STATUS_TCF_MASK | EMVSIM_TX_STATUS_TFF_MASK | EMVSIM_TX_STATUS_GPCNT0_TO_MASK | EMVSIM_TX_STATUS_GPCNT1_TO_MASK), EMVSIM_TX_STATUS_TNTE(value)))
#define EMVSIM_BWR_TX_STATUS_TNTE(base, value) (BME_BFI32(&EMVSIM_TX_STATUS_REG(base), ((uint32_t)(value) << EMVSIM_TX_STATUS_TNTE_SHIFT), EMVSIM_TX_STATUS_TNTE_SHIFT, EMVSIM_TX_STATUS_TNTE_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_TX_STATUS, field TFE[3] (W1C)
 *
 * Used to indicate that the EMV SIM transmit FIFO has been emptied. This bit
 * will be set when the last byte in the transmit FIFO has been transferred out of
 * the EMV SIM transmitter to the Smart Card successfully. TFE will also be set
 * when the TNTE flag is set. The TFE flag will create an interrupt if TFE_IM in
 * the INT_MASK register is low. The TFE bit is a write-one-to-clear bit.
 *
 * Values:
 * - 0b0 - Transmit FIFO is not empty
 * - 0b1 - Transmit FIFO is empty (default)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_TX_STATUS_TFE field. */
#define EMVSIM_RD_TX_STATUS_TFE(base) ((EMVSIM_TX_STATUS_REG(base) & EMVSIM_TX_STATUS_TFE_MASK) >> EMVSIM_TX_STATUS_TFE_SHIFT)
#define EMVSIM_BRD_TX_STATUS_TFE(base) (BME_UBFX32(&EMVSIM_TX_STATUS_REG(base), EMVSIM_TX_STATUS_TFE_SHIFT, EMVSIM_TX_STATUS_TFE_WIDTH))

/*! @brief Set the TFE field to a new value. */
#define EMVSIM_WR_TX_STATUS_TFE(base, value) (EMVSIM_RMW_TX_STATUS(base, (EMVSIM_TX_STATUS_TFE_MASK | EMVSIM_TX_STATUS_TNTE_MASK | EMVSIM_TX_STATUS_ETCF_MASK | EMVSIM_TX_STATUS_TCF_MASK | EMVSIM_TX_STATUS_TFF_MASK | EMVSIM_TX_STATUS_GPCNT0_TO_MASK | EMVSIM_TX_STATUS_GPCNT1_TO_MASK), EMVSIM_TX_STATUS_TFE(value)))
#define EMVSIM_BWR_TX_STATUS_TFE(base, value) (BME_BFI32(&EMVSIM_TX_STATUS_REG(base), ((uint32_t)(value) << EMVSIM_TX_STATUS_TFE_SHIFT), EMVSIM_TX_STATUS_TFE_SHIFT, EMVSIM_TX_STATUS_TFE_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_TX_STATUS, field ETCF[4] (W1C)
 *
 * Used to indicate that the EMV SIM transmitter has finished sending the last
 * byte in transmit FIFO (if XMT_CRC_LRC = 0) or finished sending the LRC or CRC
 * byte (if XMT_CRC_LRC = 1). This bit differs from the TC bit in that it is set
 * before the guard time of the last byte has elapsed. The ETC flag will create an
 * interrupt if ETC_IM in the INT_MASK register is low. The ETC bit is a
 * write-one-to-clear bit.
 *
 * Values:
 * - 0b0 - Transmit pending or in progress
 * - 0b1 - Transmit complete (default)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_TX_STATUS_ETCF field. */
#define EMVSIM_RD_TX_STATUS_ETCF(base) ((EMVSIM_TX_STATUS_REG(base) & EMVSIM_TX_STATUS_ETCF_MASK) >> EMVSIM_TX_STATUS_ETCF_SHIFT)
#define EMVSIM_BRD_TX_STATUS_ETCF(base) (BME_UBFX32(&EMVSIM_TX_STATUS_REG(base), EMVSIM_TX_STATUS_ETCF_SHIFT, EMVSIM_TX_STATUS_ETCF_WIDTH))

/*! @brief Set the ETCF field to a new value. */
#define EMVSIM_WR_TX_STATUS_ETCF(base, value) (EMVSIM_RMW_TX_STATUS(base, (EMVSIM_TX_STATUS_ETCF_MASK | EMVSIM_TX_STATUS_TNTE_MASK | EMVSIM_TX_STATUS_TFE_MASK | EMVSIM_TX_STATUS_TCF_MASK | EMVSIM_TX_STATUS_TFF_MASK | EMVSIM_TX_STATUS_GPCNT0_TO_MASK | EMVSIM_TX_STATUS_GPCNT1_TO_MASK), EMVSIM_TX_STATUS_ETCF(value)))
#define EMVSIM_BWR_TX_STATUS_ETCF(base, value) (BME_BFI32(&EMVSIM_TX_STATUS_REG(base), ((uint32_t)(value) << EMVSIM_TX_STATUS_ETCF_SHIFT), EMVSIM_TX_STATUS_ETCF_SHIFT, EMVSIM_TX_STATUS_ETCF_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_TX_STATUS, field TCF[5] (W1C)
 *
 * Used to indicate whether the EMV SIM transmitter is ready for a new
 * transmission. The TC flag becomes set when the guard time has expired after the last
 * byte in the transmit FIFO (if XMT_CRC_LRC = 0) or the LRC or CRC byte (if
 * XMT_CRC_LRC bit = 1) has been transmitted. The TC flag will create an interrupt if
 * TC_IM in the INT_MASK register is low. The TC bit is a write-one-to-clear bit.
 *
 * Values:
 * - 0b0 - Transmit pending or in progress
 * - 0b1 - Transmit complete (default)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_TX_STATUS_TCF field. */
#define EMVSIM_RD_TX_STATUS_TCF(base) ((EMVSIM_TX_STATUS_REG(base) & EMVSIM_TX_STATUS_TCF_MASK) >> EMVSIM_TX_STATUS_TCF_SHIFT)
#define EMVSIM_BRD_TX_STATUS_TCF(base) (BME_UBFX32(&EMVSIM_TX_STATUS_REG(base), EMVSIM_TX_STATUS_TCF_SHIFT, EMVSIM_TX_STATUS_TCF_WIDTH))

/*! @brief Set the TCF field to a new value. */
#define EMVSIM_WR_TX_STATUS_TCF(base, value) (EMVSIM_RMW_TX_STATUS(base, (EMVSIM_TX_STATUS_TCF_MASK | EMVSIM_TX_STATUS_TNTE_MASK | EMVSIM_TX_STATUS_TFE_MASK | EMVSIM_TX_STATUS_ETCF_MASK | EMVSIM_TX_STATUS_TFF_MASK | EMVSIM_TX_STATUS_GPCNT0_TO_MASK | EMVSIM_TX_STATUS_GPCNT1_TO_MASK), EMVSIM_TX_STATUS_TCF(value)))
#define EMVSIM_BWR_TX_STATUS_TCF(base, value) (BME_BFI32(&EMVSIM_TX_STATUS_REG(base), ((uint32_t)(value) << EMVSIM_TX_STATUS_TCF_SHIFT), EMVSIM_TX_STATUS_TCF_SHIFT, EMVSIM_TX_STATUS_TCF_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_TX_STATUS, field TFF[6] (W1C)
 *
 * Used to indicate when the Transmit FIFO has been written with maximum number
 * of bytes that it can store. Subsequent writes may get ignored. The TFF bit can
 * only be cleared by writing 1 to this bit or setting the FLUSH_XMT or
 * SOFT_RESET bit in the RESET_CNTL register.
 *
 * Values:
 * - 0b0 - Transmit FIFO Full condition has not occurred (default)
 * - 0b1 - A Transmit FIFO Full condition has occurred
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_TX_STATUS_TFF field. */
#define EMVSIM_RD_TX_STATUS_TFF(base) ((EMVSIM_TX_STATUS_REG(base) & EMVSIM_TX_STATUS_TFF_MASK) >> EMVSIM_TX_STATUS_TFF_SHIFT)
#define EMVSIM_BRD_TX_STATUS_TFF(base) (BME_UBFX32(&EMVSIM_TX_STATUS_REG(base), EMVSIM_TX_STATUS_TFF_SHIFT, EMVSIM_TX_STATUS_TFF_WIDTH))

/*! @brief Set the TFF field to a new value. */
#define EMVSIM_WR_TX_STATUS_TFF(base, value) (EMVSIM_RMW_TX_STATUS(base, (EMVSIM_TX_STATUS_TFF_MASK | EMVSIM_TX_STATUS_TNTE_MASK | EMVSIM_TX_STATUS_TFE_MASK | EMVSIM_TX_STATUS_ETCF_MASK | EMVSIM_TX_STATUS_TCF_MASK | EMVSIM_TX_STATUS_GPCNT0_TO_MASK | EMVSIM_TX_STATUS_GPCNT1_TO_MASK), EMVSIM_TX_STATUS_TFF(value)))
#define EMVSIM_BWR_TX_STATUS_TFF(base, value) (BME_BFI32(&EMVSIM_TX_STATUS_REG(base), ((uint32_t)(value) << EMVSIM_TX_STATUS_TFF_SHIFT), EMVSIM_TX_STATUS_TFF_SHIFT, EMVSIM_TX_STATUS_TFF_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_TX_STATUS, field TDTF[7] (RO)
 *
 * Interrupt flag asserted when total bytes in the Transmit FIFO is less than or
 * equal to the programmed transmit data threshold TDT[3:0]. The TDTF flag will
 * be set any time the number of bytes in the transmit FIFO is less than or equal
 * to the value set by TDT[3:0]. The flag can be cleared by writing enough bytes
 * into the transmit FIFO so as to take the number of bytes in the FIFO above
 * the TDT[3:0] level. Another way to clear the flag is to set the TDT[3:0] level
 * lower than the number of bytes currently in the FIFO. The TDTF flag will create
 * an interrupt if the TDT_IM bit in the INT_MASK register is cleared.
 *
 * Values:
 * - 0b0 - Number of bytes in FIFO is greater than TDT[3:0], or bit has been
 *     cleared
 * - 0b1 - Number of bytes in FIFO is less than or equal to TDT[3:0] (default)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_TX_STATUS_TDTF field. */
#define EMVSIM_RD_TX_STATUS_TDTF(base) ((EMVSIM_TX_STATUS_REG(base) & EMVSIM_TX_STATUS_TDTF_MASK) >> EMVSIM_TX_STATUS_TDTF_SHIFT)
#define EMVSIM_BRD_TX_STATUS_TDTF(base) (BME_UBFX32(&EMVSIM_TX_STATUS_REG(base), EMVSIM_TX_STATUS_TDTF_SHIFT, EMVSIM_TX_STATUS_TDTF_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_TX_STATUS, field GPCNT0_TO[8] (W1C)
 *
 * Used to indicate when the General Purpose Counter 0 has reached the
 * GPCNT0_VAL value in the GPCNT_VAL register.
 *
 * Values:
 * - 0b0 - GPCNT0_VAL time not reached, or bit has been cleared. (default)
 * - 0b1 - General Purpose counter has reached the GPCNT0_VAL value
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_TX_STATUS_GPCNT0_TO field. */
#define EMVSIM_RD_TX_STATUS_GPCNT0_TO(base) ((EMVSIM_TX_STATUS_REG(base) & EMVSIM_TX_STATUS_GPCNT0_TO_MASK) >> EMVSIM_TX_STATUS_GPCNT0_TO_SHIFT)
#define EMVSIM_BRD_TX_STATUS_GPCNT0_TO(base) (BME_UBFX32(&EMVSIM_TX_STATUS_REG(base), EMVSIM_TX_STATUS_GPCNT0_TO_SHIFT, EMVSIM_TX_STATUS_GPCNT0_TO_WIDTH))

/*! @brief Set the GPCNT0_TO field to a new value. */
#define EMVSIM_WR_TX_STATUS_GPCNT0_TO(base, value) (EMVSIM_RMW_TX_STATUS(base, (EMVSIM_TX_STATUS_GPCNT0_TO_MASK | EMVSIM_TX_STATUS_TNTE_MASK | EMVSIM_TX_STATUS_TFE_MASK | EMVSIM_TX_STATUS_ETCF_MASK | EMVSIM_TX_STATUS_TCF_MASK | EMVSIM_TX_STATUS_TFF_MASK | EMVSIM_TX_STATUS_GPCNT1_TO_MASK), EMVSIM_TX_STATUS_GPCNT0_TO(value)))
#define EMVSIM_BWR_TX_STATUS_GPCNT0_TO(base, value) (BME_BFI32(&EMVSIM_TX_STATUS_REG(base), ((uint32_t)(value) << EMVSIM_TX_STATUS_GPCNT0_TO_SHIFT), EMVSIM_TX_STATUS_GPCNT0_TO_SHIFT, EMVSIM_TX_STATUS_GPCNT0_TO_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_TX_STATUS, field GPCNT1_TO[9] (W1C)
 *
 * Used to indicate when the General Purpose Counter 1 has reached the
 * GPCNT1_VAL value in the GPCNT_VAL register.
 *
 * Values:
 * - 0b0 - GPCNT1_VAL time not reached, or bit has been cleared. (default)
 * - 0b1 - General Purpose counter has reached the GPCNT1_VAL value
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_TX_STATUS_GPCNT1_TO field. */
#define EMVSIM_RD_TX_STATUS_GPCNT1_TO(base) ((EMVSIM_TX_STATUS_REG(base) & EMVSIM_TX_STATUS_GPCNT1_TO_MASK) >> EMVSIM_TX_STATUS_GPCNT1_TO_SHIFT)
#define EMVSIM_BRD_TX_STATUS_GPCNT1_TO(base) (BME_UBFX32(&EMVSIM_TX_STATUS_REG(base), EMVSIM_TX_STATUS_GPCNT1_TO_SHIFT, EMVSIM_TX_STATUS_GPCNT1_TO_WIDTH))

/*! @brief Set the GPCNT1_TO field to a new value. */
#define EMVSIM_WR_TX_STATUS_GPCNT1_TO(base, value) (EMVSIM_RMW_TX_STATUS(base, (EMVSIM_TX_STATUS_GPCNT1_TO_MASK | EMVSIM_TX_STATUS_TNTE_MASK | EMVSIM_TX_STATUS_TFE_MASK | EMVSIM_TX_STATUS_ETCF_MASK | EMVSIM_TX_STATUS_TCF_MASK | EMVSIM_TX_STATUS_TFF_MASK | EMVSIM_TX_STATUS_GPCNT0_TO_MASK), EMVSIM_TX_STATUS_GPCNT1_TO(value)))
#define EMVSIM_BWR_TX_STATUS_GPCNT1_TO(base, value) (BME_BFI32(&EMVSIM_TX_STATUS_REG(base), ((uint32_t)(value) << EMVSIM_TX_STATUS_GPCNT1_TO_SHIFT), EMVSIM_TX_STATUS_GPCNT1_TO_SHIFT, EMVSIM_TX_STATUS_GPCNT1_TO_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_TX_STATUS, field TX_RPTR[19:16] (RO)
 *
 * Value of the read pointer of transmit FIFO.
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_TX_STATUS_TX_RPTR field. */
#define EMVSIM_RD_TX_STATUS_TX_RPTR(base) ((EMVSIM_TX_STATUS_REG(base) & EMVSIM_TX_STATUS_TX_RPTR_MASK) >> EMVSIM_TX_STATUS_TX_RPTR_SHIFT)
#define EMVSIM_BRD_TX_STATUS_TX_RPTR(base) (BME_UBFX32(&EMVSIM_TX_STATUS_REG(base), EMVSIM_TX_STATUS_TX_RPTR_SHIFT, EMVSIM_TX_STATUS_TX_RPTR_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_TX_STATUS, field TX_CNT[28:24] (RO)
 *
 * These bits indicate the number of bytes stored in the transmit FIFO.
 *
 * Values:
 * - 0b00000 - FIFO is emtpy
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_TX_STATUS_TX_CNT field. */
#define EMVSIM_RD_TX_STATUS_TX_CNT(base) ((EMVSIM_TX_STATUS_REG(base) & EMVSIM_TX_STATUS_TX_CNT_MASK) >> EMVSIM_TX_STATUS_TX_CNT_SHIFT)
#define EMVSIM_BRD_TX_STATUS_TX_CNT(base) (BME_UBFX32(&EMVSIM_TX_STATUS_REG(base), EMVSIM_TX_STATUS_TX_CNT_SHIFT, EMVSIM_TX_STATUS_TX_CNT_WIDTH))
/*@}*/

/*******************************************************************************
 * EMVSIM_PCSR - Port Control and Status Register
 ******************************************************************************/

/*!
 * @brief EMVSIM_PCSR - Port Control and Status Register (RW)
 *
 * Reset value: 0x01000000U
 */
/*!
 * @name Constants and macros for entire EMVSIM_PCSR register
 */
/*@{*/
#define EMVSIM_RD_PCSR(base)     (EMVSIM_PCSR_REG(base))
#define EMVSIM_WR_PCSR(base, value) (EMVSIM_PCSR_REG(base) = (value))
#define EMVSIM_RMW_PCSR(base, mask, value) (EMVSIM_WR_PCSR(base, (EMVSIM_RD_PCSR(base) & ~(mask)) | (value)))
#define EMVSIM_SET_PCSR(base, value) (BME_OR32(&EMVSIM_PCSR_REG(base), (uint32_t)(value)))
#define EMVSIM_CLR_PCSR(base, value) (BME_AND32(&EMVSIM_PCSR_REG(base), (uint32_t)(~(value))))
#define EMVSIM_TOG_PCSR(base, value) (BME_XOR32(&EMVSIM_PCSR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual EMVSIM_PCSR bitfields
 */

/*!
 * @name Register EMVSIM_PCSR, field SAPD[0] (RW)
 *
 * Used to enable/disable the auto power down feature. This bit must be set
 * prior to the auto power conditions are met. This bit will be return to 0 at the
 * end of the auto power down sequence. This bit controls the auto power down
 * function which can be initiated by: Setting the SPD bit in this register by
 * software Assertion of the RTE bit in the RX_STATUS register Assertion of the SPDIF
 * bit when the interrupt is used for detecting card removal Manual Power Down via
 * software by writing to the SCEN, SRST, and VCC_EN can still be carried out
 * irrespective of the value of this bit.
 *
 * Values:
 * - 0b0 - Auto power down disabled (default)
 * - 0b1 - Auto power down enabled
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_PCSR_SAPD field. */
#define EMVSIM_RD_PCSR_SAPD(base) ((EMVSIM_PCSR_REG(base) & EMVSIM_PCSR_SAPD_MASK) >> EMVSIM_PCSR_SAPD_SHIFT)
#define EMVSIM_BRD_PCSR_SAPD(base) (BME_UBFX32(&EMVSIM_PCSR_REG(base), EMVSIM_PCSR_SAPD_SHIFT, EMVSIM_PCSR_SAPD_WIDTH))

/*! @brief Set the SAPD field to a new value. */
#define EMVSIM_WR_PCSR_SAPD(base, value) (EMVSIM_RMW_PCSR(base, (EMVSIM_PCSR_SAPD_MASK | EMVSIM_PCSR_SPDIF_MASK), EMVSIM_PCSR_SAPD(value)))
#define EMVSIM_BWR_PCSR_SAPD(base, value) (BME_BFI32(&EMVSIM_PCSR_REG(base), ((uint32_t)(value) << EMVSIM_PCSR_SAPD_SHIFT), EMVSIM_PCSR_SAPD_SHIFT, EMVSIM_PCSR_SAPD_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_PCSR, field SVCC_EN[1] (RW)
 *
 * Used to control the state of the SVEN pin on Smart Card port. The SVEN pin
 * controls the Smart Card Vcc enable in the power management chip. It can be
 * forced low by hardware during the auto power down sequence. This bit is XORed with
 * the VCCENP bit to control the polarity of the SVEN output pad.
 *
 * Values:
 * - 0b0 - Smart Card Voltage disabled (default)
 * - 0b1 - Smart Card Voltage enabled
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_PCSR_SVCC_EN field. */
#define EMVSIM_RD_PCSR_SVCC_EN(base) ((EMVSIM_PCSR_REG(base) & EMVSIM_PCSR_SVCC_EN_MASK) >> EMVSIM_PCSR_SVCC_EN_SHIFT)
#define EMVSIM_BRD_PCSR_SVCC_EN(base) (BME_UBFX32(&EMVSIM_PCSR_REG(base), EMVSIM_PCSR_SVCC_EN_SHIFT, EMVSIM_PCSR_SVCC_EN_WIDTH))

/*! @brief Set the SVCC_EN field to a new value. */
#define EMVSIM_WR_PCSR_SVCC_EN(base, value) (EMVSIM_RMW_PCSR(base, (EMVSIM_PCSR_SVCC_EN_MASK | EMVSIM_PCSR_SPDIF_MASK), EMVSIM_PCSR_SVCC_EN(value)))
#define EMVSIM_BWR_PCSR_SVCC_EN(base, value) (BME_BFI32(&EMVSIM_PCSR_REG(base), ((uint32_t)(value) << EMVSIM_PCSR_SVCC_EN_SHIFT), EMVSIM_PCSR_SVCC_EN_SHIFT, EMVSIM_PCSR_SVCC_EN_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_PCSR, field VCCENP[2] (RW)
 *
 * Used to control the polarity of the SVEN output pad via the SVCC_EN bit. When
 * set to '1', this bit will invert the value of SVCC_EN bit of this register
 * and output to SVEN output pad of device.
 *
 * Values:
 * - 0b0 - VCC_EN is active high. Polarity of SVCC_EN is unchanged.
 * - 0b1 - VCC_EN is active low. Polarity of SVCC_EN is inverted.
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_PCSR_VCCENP field. */
#define EMVSIM_RD_PCSR_VCCENP(base) ((EMVSIM_PCSR_REG(base) & EMVSIM_PCSR_VCCENP_MASK) >> EMVSIM_PCSR_VCCENP_SHIFT)
#define EMVSIM_BRD_PCSR_VCCENP(base) (BME_UBFX32(&EMVSIM_PCSR_REG(base), EMVSIM_PCSR_VCCENP_SHIFT, EMVSIM_PCSR_VCCENP_WIDTH))

/*! @brief Set the VCCENP field to a new value. */
#define EMVSIM_WR_PCSR_VCCENP(base, value) (EMVSIM_RMW_PCSR(base, (EMVSIM_PCSR_VCCENP_MASK | EMVSIM_PCSR_SPDIF_MASK), EMVSIM_PCSR_VCCENP(value)))
#define EMVSIM_BWR_PCSR_VCCENP(base, value) (BME_BFI32(&EMVSIM_PCSR_REG(base), ((uint32_t)(value) << EMVSIM_PCSR_VCCENP_SHIFT), EMVSIM_PCSR_VCCENP_SHIFT, EMVSIM_PCSR_VCCENP_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_PCSR, field SRST[3] (RW)
 *
 * Used to control state of reset line to the Smart Card. It can be forced low
 * by hardware during the auto power down sequence. Smart Card reset signals are
 * active low.
 *
 * Values:
 * - 0b0 - Smart Card Reset is asserted (default)
 * - 0b1 - Smart Card Reset is de-asserted
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_PCSR_SRST field. */
#define EMVSIM_RD_PCSR_SRST(base) ((EMVSIM_PCSR_REG(base) & EMVSIM_PCSR_SRST_MASK) >> EMVSIM_PCSR_SRST_SHIFT)
#define EMVSIM_BRD_PCSR_SRST(base) (BME_UBFX32(&EMVSIM_PCSR_REG(base), EMVSIM_PCSR_SRST_SHIFT, EMVSIM_PCSR_SRST_WIDTH))

/*! @brief Set the SRST field to a new value. */
#define EMVSIM_WR_PCSR_SRST(base, value) (EMVSIM_RMW_PCSR(base, (EMVSIM_PCSR_SRST_MASK | EMVSIM_PCSR_SPDIF_MASK), EMVSIM_PCSR_SRST(value)))
#define EMVSIM_BWR_PCSR_SRST(base, value) (BME_BFI32(&EMVSIM_PCSR_REG(base), ((uint32_t)(value) << EMVSIM_PCSR_SRST_SHIFT), EMVSIM_PCSR_SRST_SHIFT, EMVSIM_PCSR_SRST_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_PCSR, field SCEN[4] (RW)
 *
 * Used to enable/disable the clock to the Smart Card. It can be forced low by
 * hardware during the auto power down sequence.
 *
 * Values:
 * - 0b0 - Smart Card Clock Disabled
 * - 0b1 - Smart Card Clock Enabled
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_PCSR_SCEN field. */
#define EMVSIM_RD_PCSR_SCEN(base) ((EMVSIM_PCSR_REG(base) & EMVSIM_PCSR_SCEN_MASK) >> EMVSIM_PCSR_SCEN_SHIFT)
#define EMVSIM_BRD_PCSR_SCEN(base) (BME_UBFX32(&EMVSIM_PCSR_REG(base), EMVSIM_PCSR_SCEN_SHIFT, EMVSIM_PCSR_SCEN_WIDTH))

/*! @brief Set the SCEN field to a new value. */
#define EMVSIM_WR_PCSR_SCEN(base, value) (EMVSIM_RMW_PCSR(base, (EMVSIM_PCSR_SCEN_MASK | EMVSIM_PCSR_SPDIF_MASK), EMVSIM_PCSR_SCEN(value)))
#define EMVSIM_BWR_PCSR_SCEN(base, value) (BME_BFI32(&EMVSIM_PCSR_REG(base), ((uint32_t)(value) << EMVSIM_PCSR_SCEN_SHIFT), EMVSIM_PCSR_SCEN_SHIFT, EMVSIM_PCSR_SCEN_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_PCSR, field SCSP[5] (RW)
 *
 * Used to control the polarity of the idle EMV SIM clock when the clock is
 * disabled by SCEN.
 *
 * Values:
 * - 0b0 - Clock is logic 0 when stopped by SCEN
 * - 0b1 - Clock is logic 1 when stopped by SCEN
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_PCSR_SCSP field. */
#define EMVSIM_RD_PCSR_SCSP(base) ((EMVSIM_PCSR_REG(base) & EMVSIM_PCSR_SCSP_MASK) >> EMVSIM_PCSR_SCSP_SHIFT)
#define EMVSIM_BRD_PCSR_SCSP(base) (BME_UBFX32(&EMVSIM_PCSR_REG(base), EMVSIM_PCSR_SCSP_SHIFT, EMVSIM_PCSR_SCSP_WIDTH))

/*! @brief Set the SCSP field to a new value. */
#define EMVSIM_WR_PCSR_SCSP(base, value) (EMVSIM_RMW_PCSR(base, (EMVSIM_PCSR_SCSP_MASK | EMVSIM_PCSR_SPDIF_MASK), EMVSIM_PCSR_SCSP(value)))
#define EMVSIM_BWR_PCSR_SCSP(base, value) (BME_BFI32(&EMVSIM_PCSR_REG(base), ((uint32_t)(value) << EMVSIM_PCSR_SCSP_SHIFT), EMVSIM_PCSR_SCSP_SHIFT, EMVSIM_PCSR_SCSP_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_PCSR, field SPD[7] (RW)
 *
 * Writing a '1' to this location will start the autopower down sequence
 * provided the auto power down feature is enabled by writing '1' to SAPD bit of this
 * register. The SPD bit will autoclear when power down is complete.
 *
 * Values:
 * - 0b0 - No effect (default)
 * - 0b1 - Start Auto Powerdown or Power Down is in progress
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_PCSR_SPD field. */
#define EMVSIM_RD_PCSR_SPD(base) ((EMVSIM_PCSR_REG(base) & EMVSIM_PCSR_SPD_MASK) >> EMVSIM_PCSR_SPD_SHIFT)
#define EMVSIM_BRD_PCSR_SPD(base) (BME_UBFX32(&EMVSIM_PCSR_REG(base), EMVSIM_PCSR_SPD_SHIFT, EMVSIM_PCSR_SPD_WIDTH))

/*! @brief Set the SPD field to a new value. */
#define EMVSIM_WR_PCSR_SPD(base, value) (EMVSIM_RMW_PCSR(base, (EMVSIM_PCSR_SPD_MASK | EMVSIM_PCSR_SPDIF_MASK), EMVSIM_PCSR_SPD(value)))
#define EMVSIM_BWR_PCSR_SPD(base, value) (BME_BFI32(&EMVSIM_PCSR_REG(base), ((uint32_t)(value) << EMVSIM_PCSR_SPD_SHIFT), EMVSIM_PCSR_SPD_SHIFT, EMVSIM_PCSR_SPD_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_PCSR, field SPDIM[24] (RW)
 *
 * Interrupt mask for the presence detect interrupt flag (SPDIF).
 *
 * Values:
 * - 0b0 - SIM presence detect interrupt is enabled
 * - 0b1 - SIM presence detect interrupt is masked (default)
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_PCSR_SPDIM field. */
#define EMVSIM_RD_PCSR_SPDIM(base) ((EMVSIM_PCSR_REG(base) & EMVSIM_PCSR_SPDIM_MASK) >> EMVSIM_PCSR_SPDIM_SHIFT)
#define EMVSIM_BRD_PCSR_SPDIM(base) (BME_UBFX32(&EMVSIM_PCSR_REG(base), EMVSIM_PCSR_SPDIM_SHIFT, EMVSIM_PCSR_SPDIM_WIDTH))

/*! @brief Set the SPDIM field to a new value. */
#define EMVSIM_WR_PCSR_SPDIM(base, value) (EMVSIM_RMW_PCSR(base, (EMVSIM_PCSR_SPDIM_MASK | EMVSIM_PCSR_SPDIF_MASK), EMVSIM_PCSR_SPDIM(value)))
#define EMVSIM_BWR_PCSR_SPDIM(base, value) (BME_BFI32(&EMVSIM_PCSR_REG(base), ((uint32_t)(value) << EMVSIM_PCSR_SPDIM_SHIFT), EMVSIM_PCSR_SPDIM_SHIFT, EMVSIM_PCSR_SPDIM_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_PCSR, field SPDIF[25] (W1C)
 *
 * Status flag to indicate that an insertion or removal of a Smart Card has been
 * detected on port. Can create an interrupt to the MCU if SPDIM is low and/or
 * initiate the auto power down sequence if SAPD bit is '1'. Write a '1' to this
 * bit to clear.
 *
 * Values:
 * - 0b0 - No insertion or removal of Smart Card detected on Port (default)
 * - 0b1 - Insertion or removal of Smart Card detected on Port
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_PCSR_SPDIF field. */
#define EMVSIM_RD_PCSR_SPDIF(base) ((EMVSIM_PCSR_REG(base) & EMVSIM_PCSR_SPDIF_MASK) >> EMVSIM_PCSR_SPDIF_SHIFT)
#define EMVSIM_BRD_PCSR_SPDIF(base) (BME_UBFX32(&EMVSIM_PCSR_REG(base), EMVSIM_PCSR_SPDIF_SHIFT, EMVSIM_PCSR_SPDIF_WIDTH))

/*! @brief Set the SPDIF field to a new value. */
#define EMVSIM_WR_PCSR_SPDIF(base, value) (EMVSIM_RMW_PCSR(base, EMVSIM_PCSR_SPDIF_MASK, EMVSIM_PCSR_SPDIF(value)))
#define EMVSIM_BWR_PCSR_SPDIF(base, value) (BME_BFI32(&EMVSIM_PCSR_REG(base), ((uint32_t)(value) << EMVSIM_PCSR_SPDIF_SHIFT), EMVSIM_PCSR_SPDIF_SHIFT, EMVSIM_PCSR_SPDIF_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_PCSR, field SPDP[26] (RO)
 *
 * This bit reflects the state of the Smart Card Presence Detect pin. It is not
 * a latched register bit, but instead a synchronized version of the state of the
 * pin itself.
 *
 * Values:
 * - 0b0 - SIM Presence Detect pin is logic low
 * - 0b1 - SIM Presence Detectpin is logic high
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_PCSR_SPDP field. */
#define EMVSIM_RD_PCSR_SPDP(base) ((EMVSIM_PCSR_REG(base) & EMVSIM_PCSR_SPDP_MASK) >> EMVSIM_PCSR_SPDP_SHIFT)
#define EMVSIM_BRD_PCSR_SPDP(base) (BME_UBFX32(&EMVSIM_PCSR_REG(base), EMVSIM_PCSR_SPDP_SHIFT, EMVSIM_PCSR_SPDP_WIDTH))
/*@}*/

/*!
 * @name Register EMVSIM_PCSR, field SPDES[27] (RW)
 *
 * Controls which edge of the Smart Card Presence Detect pin is used to detect
 * the presence of the Smart Card.
 *
 * Values:
 * - 0b0 - Falling edge on the pin (default)
 * - 0b1 - Rising edge on the pin
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_PCSR_SPDES field. */
#define EMVSIM_RD_PCSR_SPDES(base) ((EMVSIM_PCSR_REG(base) & EMVSIM_PCSR_SPDES_MASK) >> EMVSIM_PCSR_SPDES_SHIFT)
#define EMVSIM_BRD_PCSR_SPDES(base) (BME_UBFX32(&EMVSIM_PCSR_REG(base), EMVSIM_PCSR_SPDES_SHIFT, EMVSIM_PCSR_SPDES_WIDTH))

/*! @brief Set the SPDES field to a new value. */
#define EMVSIM_WR_PCSR_SPDES(base, value) (EMVSIM_RMW_PCSR(base, (EMVSIM_PCSR_SPDES_MASK | EMVSIM_PCSR_SPDIF_MASK), EMVSIM_PCSR_SPDES(value)))
#define EMVSIM_BWR_PCSR_SPDES(base, value) (BME_BFI32(&EMVSIM_PCSR_REG(base), ((uint32_t)(value) << EMVSIM_PCSR_SPDES_SHIFT), EMVSIM_PCSR_SPDES_SHIFT, EMVSIM_PCSR_SPDES_WIDTH))
/*@}*/

/*******************************************************************************
 * EMVSIM_RX_BUF - Receive Data Read Buffer
 ******************************************************************************/

/*!
 * @brief EMVSIM_RX_BUF - Receive Data Read Buffer (RO)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire EMVSIM_RX_BUF register
 */
/*@{*/
#define EMVSIM_RD_RX_BUF(base)   (EMVSIM_RX_BUF_REG(base))
/*@}*/

/*
 * Constants & macros for individual EMVSIM_RX_BUF bitfields
 */

/*!
 * @name Register EMVSIM_RX_BUF, field RX_BYTE[7:0] (RO)
 *
 * Provides the byte value from the top of the receive FIFO. Each read access to
 * this register will increment the read pointer of the Receive FIFO.
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_RX_BUF_RX_BYTE field. */
#define EMVSIM_RD_RX_BUF_RX_BYTE(base) ((EMVSIM_RX_BUF_REG(base) & EMVSIM_RX_BUF_RX_BYTE_MASK) >> EMVSIM_RX_BUF_RX_BYTE_SHIFT)
#define EMVSIM_BRD_RX_BUF_RX_BYTE(base) (BME_UBFX32(&EMVSIM_RX_BUF_REG(base), EMVSIM_RX_BUF_RX_BYTE_SHIFT, EMVSIM_RX_BUF_RX_BYTE_WIDTH))
/*@}*/

/*******************************************************************************
 * EMVSIM_TX_BUF - Transmit Data Buffer
 ******************************************************************************/

/*!
 * @brief EMVSIM_TX_BUF - Transmit Data Buffer (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire EMVSIM_TX_BUF register
 */
/*@{*/
#define EMVSIM_RD_TX_BUF(base)   (EMVSIM_TX_BUF_REG(base))
#define EMVSIM_WR_TX_BUF(base, value) (EMVSIM_TX_BUF_REG(base) = (value))
#define EMVSIM_RMW_TX_BUF(base, mask, value) (EMVSIM_WR_TX_BUF(base, (EMVSIM_RD_TX_BUF(base) & ~(mask)) | (value)))
#define EMVSIM_SET_TX_BUF(base, value) (BME_OR32(&EMVSIM_TX_BUF_REG(base), (uint32_t)(value)))
#define EMVSIM_CLR_TX_BUF(base, value) (BME_AND32(&EMVSIM_TX_BUF_REG(base), (uint32_t)(~(value))))
#define EMVSIM_TOG_TX_BUF(base, value) (BME_XOR32(&EMVSIM_TX_BUF_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual EMVSIM_TX_BUF bitfields
 */

/*!
 * @name Register EMVSIM_TX_BUF, field TX_BYTE[7:0] (WORZ)
 *
 * Write to this register to fill the transmit FIFO with the bytes to be
 * transmitted. The Tx FIFO can be written to only when the transmitter is enabled.
 * Writing to this register while transmitter is disabled will lead to ignoring of
 * all write accesses to this register. Reads to this register will return zeros.
 * Writing more data to the transmit FIFO than it can hold, will cause a Transmit
 * FIFO Full (TFF) error.
 */
/*@{*/
/*! @brief Set the TX_BYTE field to a new value. */
#define EMVSIM_WR_TX_BUF_TX_BYTE(base, value) (EMVSIM_RMW_TX_BUF(base, EMVSIM_TX_BUF_TX_BYTE_MASK, EMVSIM_TX_BUF_TX_BYTE(value)))
#define EMVSIM_BWR_TX_BUF_TX_BYTE(base, value) (BME_BFI32(&EMVSIM_TX_BUF_REG(base), ((uint32_t)(value) << EMVSIM_TX_BUF_TX_BYTE_SHIFT), EMVSIM_TX_BUF_TX_BYTE_SHIFT, EMVSIM_TX_BUF_TX_BYTE_WIDTH))
/*@}*/

/*******************************************************************************
 * EMVSIM_TX_GETU - Transmitter Guard ETU Value Register
 ******************************************************************************/

/*!
 * @brief EMVSIM_TX_GETU - Transmitter Guard ETU Value Register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire EMVSIM_TX_GETU register
 */
/*@{*/
#define EMVSIM_RD_TX_GETU(base)  (EMVSIM_TX_GETU_REG(base))
#define EMVSIM_WR_TX_GETU(base, value) (EMVSIM_TX_GETU_REG(base) = (value))
#define EMVSIM_RMW_TX_GETU(base, mask, value) (EMVSIM_WR_TX_GETU(base, (EMVSIM_RD_TX_GETU(base) & ~(mask)) | (value)))
#define EMVSIM_SET_TX_GETU(base, value) (BME_OR32(&EMVSIM_TX_GETU_REG(base), (uint32_t)(value)))
#define EMVSIM_CLR_TX_GETU(base, value) (BME_AND32(&EMVSIM_TX_GETU_REG(base), (uint32_t)(~(value))))
#define EMVSIM_TOG_TX_GETU(base, value) (BME_XOR32(&EMVSIM_TX_GETU_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual EMVSIM_TX_GETU bitfields
 */

/*!
 * @name Register EMVSIM_TX_GETU, field GETU[7:0] (RW)
 *
 * Used to control the number of additional Elementary Time Units (ETUs)
 * inserted between bytes transmitted by the EMV SIM transmitter. An ETU is equivalent
 * to one bit time at the given baud rate (for example, the length of a START
 * bit). The guard time has no effect on the EMV SIM receiver. A value of 0x00
 * inserts no additional ETUs, while a value of 0xFE inserts 254 additional ETUs. A
 * value of 0xFF subtracts one ETU by reducing the number of STOP bits from two to
 * one.
 *
 * Values:
 * - 0b00000000 - no additional ETUs inserted (default)
 * - 0b00000001 - 1 additional ETU inserted
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_TX_GETU_GETU field. */
#define EMVSIM_RD_TX_GETU_GETU(base) ((EMVSIM_TX_GETU_REG(base) & EMVSIM_TX_GETU_GETU_MASK) >> EMVSIM_TX_GETU_GETU_SHIFT)
#define EMVSIM_BRD_TX_GETU_GETU(base) (BME_UBFX32(&EMVSIM_TX_GETU_REG(base), EMVSIM_TX_GETU_GETU_SHIFT, EMVSIM_TX_GETU_GETU_WIDTH))

/*! @brief Set the GETU field to a new value. */
#define EMVSIM_WR_TX_GETU_GETU(base, value) (EMVSIM_RMW_TX_GETU(base, EMVSIM_TX_GETU_GETU_MASK, EMVSIM_TX_GETU_GETU(value)))
#define EMVSIM_BWR_TX_GETU_GETU(base, value) (BME_BFI32(&EMVSIM_TX_GETU_REG(base), ((uint32_t)(value) << EMVSIM_TX_GETU_GETU_SHIFT), EMVSIM_TX_GETU_GETU_SHIFT, EMVSIM_TX_GETU_GETU_WIDTH))
/*@}*/

/*******************************************************************************
 * EMVSIM_CWT_VAL - Character Wait Time Value Register
 ******************************************************************************/

/*!
 * @brief EMVSIM_CWT_VAL - Character Wait Time Value Register (RW)
 *
 * Reset value: 0x0000FFFFU
 */
/*!
 * @name Constants and macros for entire EMVSIM_CWT_VAL register
 */
/*@{*/
#define EMVSIM_RD_CWT_VAL(base)  (EMVSIM_CWT_VAL_REG(base))
#define EMVSIM_WR_CWT_VAL(base, value) (EMVSIM_CWT_VAL_REG(base) = (value))
#define EMVSIM_RMW_CWT_VAL(base, mask, value) (EMVSIM_WR_CWT_VAL(base, (EMVSIM_RD_CWT_VAL(base) & ~(mask)) | (value)))
#define EMVSIM_SET_CWT_VAL(base, value) (BME_OR32(&EMVSIM_CWT_VAL_REG(base), (uint32_t)(value)))
#define EMVSIM_CLR_CWT_VAL(base, value) (BME_AND32(&EMVSIM_CWT_VAL_REG(base), (uint32_t)(~(value))))
#define EMVSIM_TOG_CWT_VAL(base, value) (BME_XOR32(&EMVSIM_CWT_VAL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual EMVSIM_CWT_VAL bitfields
 */

/*!
 * @name Register EMVSIM_CWT_VAL, field CWT[15:0] (RW)
 *
 * The value written to this register will specify the number of ETU times
 * allowed between characters. Default is 0xFFFF
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_CWT_VAL_CWT field. */
#define EMVSIM_RD_CWT_VAL_CWT(base) ((EMVSIM_CWT_VAL_REG(base) & EMVSIM_CWT_VAL_CWT_MASK) >> EMVSIM_CWT_VAL_CWT_SHIFT)
#define EMVSIM_BRD_CWT_VAL_CWT(base) (EMVSIM_RD_CWT_VAL_CWT(base))

/*! @brief Set the CWT field to a new value. */
#define EMVSIM_WR_CWT_VAL_CWT(base, value) (EMVSIM_RMW_CWT_VAL(base, EMVSIM_CWT_VAL_CWT_MASK, EMVSIM_CWT_VAL_CWT(value)))
#define EMVSIM_BWR_CWT_VAL_CWT(base, value) (EMVSIM_WR_CWT_VAL_CWT(base, value))
/*@}*/

/*******************************************************************************
 * EMVSIM_BWT_VAL - Block Wait Time Value Register
 ******************************************************************************/

/*!
 * @brief EMVSIM_BWT_VAL - Block Wait Time Value Register (RW)
 *
 * Reset value: 0xFFFFFFFFU
 */
/*!
 * @name Constants and macros for entire EMVSIM_BWT_VAL register
 */
/*@{*/
#define EMVSIM_RD_BWT_VAL(base)  (EMVSIM_BWT_VAL_REG(base))
#define EMVSIM_WR_BWT_VAL(base, value) (EMVSIM_BWT_VAL_REG(base) = (value))
#define EMVSIM_RMW_BWT_VAL(base, mask, value) (EMVSIM_WR_BWT_VAL(base, (EMVSIM_RD_BWT_VAL(base) & ~(mask)) | (value)))
#define EMVSIM_SET_BWT_VAL(base, value) (BME_OR32(&EMVSIM_BWT_VAL_REG(base), (uint32_t)(value)))
#define EMVSIM_CLR_BWT_VAL(base, value) (BME_AND32(&EMVSIM_BWT_VAL_REG(base), (uint32_t)(~(value))))
#define EMVSIM_TOG_BWT_VAL(base, value) (BME_XOR32(&EMVSIM_BWT_VAL_REG(base), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * EMVSIM_BGT_VAL - Block Guard Time Value Register
 ******************************************************************************/

/*!
 * @brief EMVSIM_BGT_VAL - Block Guard Time Value Register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire EMVSIM_BGT_VAL register
 */
/*@{*/
#define EMVSIM_RD_BGT_VAL(base)  (EMVSIM_BGT_VAL_REG(base))
#define EMVSIM_WR_BGT_VAL(base, value) (EMVSIM_BGT_VAL_REG(base) = (value))
#define EMVSIM_RMW_BGT_VAL(base, mask, value) (EMVSIM_WR_BGT_VAL(base, (EMVSIM_RD_BGT_VAL(base) & ~(mask)) | (value)))
#define EMVSIM_SET_BGT_VAL(base, value) (BME_OR32(&EMVSIM_BGT_VAL_REG(base), (uint32_t)(value)))
#define EMVSIM_CLR_BGT_VAL(base, value) (BME_AND32(&EMVSIM_BGT_VAL_REG(base), (uint32_t)(~(value))))
#define EMVSIM_TOG_BGT_VAL(base, value) (BME_XOR32(&EMVSIM_BGT_VAL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual EMVSIM_BGT_VAL bitfields
 */

/*!
 * @name Register EMVSIM_BGT_VAL, field BGT[15:0] (RW)
 *
 * The value in this register is the block guard time. Time from START bit of
 * last byte sent from the EMV SIM module to the START bit of the first byte sent
 * from the SmartCard must be greater than this value. If it is not, then the BGT
 * flag will be set.
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_BGT_VAL_BGT field. */
#define EMVSIM_RD_BGT_VAL_BGT(base) ((EMVSIM_BGT_VAL_REG(base) & EMVSIM_BGT_VAL_BGT_MASK) >> EMVSIM_BGT_VAL_BGT_SHIFT)
#define EMVSIM_BRD_BGT_VAL_BGT(base) (EMVSIM_RD_BGT_VAL_BGT(base))

/*! @brief Set the BGT field to a new value. */
#define EMVSIM_WR_BGT_VAL_BGT(base, value) (EMVSIM_RMW_BGT_VAL(base, EMVSIM_BGT_VAL_BGT_MASK, EMVSIM_BGT_VAL_BGT(value)))
#define EMVSIM_BWR_BGT_VAL_BGT(base, value) (EMVSIM_WR_BGT_VAL_BGT(base, value))
/*@}*/

/*******************************************************************************
 * EMVSIM_GPCNT0_VAL - General Purpose Counter 0 Timeout Value Register
 ******************************************************************************/

/*!
 * @brief EMVSIM_GPCNT0_VAL - General Purpose Counter 0 Timeout Value Register (RW)
 *
 * Reset value: 0x0000FFFFU
 */
/*!
 * @name Constants and macros for entire EMVSIM_GPCNT0_VAL register
 */
/*@{*/
#define EMVSIM_RD_GPCNT0_VAL(base) (EMVSIM_GPCNT0_VAL_REG(base))
#define EMVSIM_WR_GPCNT0_VAL(base, value) (EMVSIM_GPCNT0_VAL_REG(base) = (value))
#define EMVSIM_RMW_GPCNT0_VAL(base, mask, value) (EMVSIM_WR_GPCNT0_VAL(base, (EMVSIM_RD_GPCNT0_VAL(base) & ~(mask)) | (value)))
#define EMVSIM_SET_GPCNT0_VAL(base, value) (BME_OR32(&EMVSIM_GPCNT0_VAL_REG(base), (uint32_t)(value)))
#define EMVSIM_CLR_GPCNT0_VAL(base, value) (BME_AND32(&EMVSIM_GPCNT0_VAL_REG(base), (uint32_t)(~(value))))
#define EMVSIM_TOG_GPCNT0_VAL(base, value) (BME_XOR32(&EMVSIM_GPCNT0_VAL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual EMVSIM_GPCNT0_VAL bitfields
 */

/*!
 * @name Register EMVSIM_GPCNT0_VAL, field GPCNT0[15:0] (RW)
 *
 * The value written to this register will be used to compare to the general
 * purpose counter 0 in the EMV SIM module. Once the General purpose counter reaches
 * this value, the GPCNT0 flag in the TX_STATUS register will be set. This
 * counter is intended to be used for any events that must be monitored for duration
 * based on the card clock, receiver sample rate, or ETU rate (transmit clock).
 * Example: ATR arrival time and ATR duration.
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_GPCNT0_VAL_GPCNT0 field. */
#define EMVSIM_RD_GPCNT0_VAL_GPCNT0(base) ((EMVSIM_GPCNT0_VAL_REG(base) & EMVSIM_GPCNT0_VAL_GPCNT0_MASK) >> EMVSIM_GPCNT0_VAL_GPCNT0_SHIFT)
#define EMVSIM_BRD_GPCNT0_VAL_GPCNT0(base) (EMVSIM_RD_GPCNT0_VAL_GPCNT0(base))

/*! @brief Set the GPCNT0 field to a new value. */
#define EMVSIM_WR_GPCNT0_VAL_GPCNT0(base, value) (EMVSIM_RMW_GPCNT0_VAL(base, EMVSIM_GPCNT0_VAL_GPCNT0_MASK, EMVSIM_GPCNT0_VAL_GPCNT0(value)))
#define EMVSIM_BWR_GPCNT0_VAL_GPCNT0(base, value) (EMVSIM_WR_GPCNT0_VAL_GPCNT0(base, value))
/*@}*/

/*******************************************************************************
 * EMVSIM_GPCNT1_VAL - General Purpose Counter 1 Timeout Value
 ******************************************************************************/

/*!
 * @brief EMVSIM_GPCNT1_VAL - General Purpose Counter 1 Timeout Value (RW)
 *
 * Reset value: 0x0000FFFFU
 */
/*!
 * @name Constants and macros for entire EMVSIM_GPCNT1_VAL register
 */
/*@{*/
#define EMVSIM_RD_GPCNT1_VAL(base) (EMVSIM_GPCNT1_VAL_REG(base))
#define EMVSIM_WR_GPCNT1_VAL(base, value) (EMVSIM_GPCNT1_VAL_REG(base) = (value))
#define EMVSIM_RMW_GPCNT1_VAL(base, mask, value) (EMVSIM_WR_GPCNT1_VAL(base, (EMVSIM_RD_GPCNT1_VAL(base) & ~(mask)) | (value)))
#define EMVSIM_SET_GPCNT1_VAL(base, value) (BME_OR32(&EMVSIM_GPCNT1_VAL_REG(base), (uint32_t)(value)))
#define EMVSIM_CLR_GPCNT1_VAL(base, value) (BME_AND32(&EMVSIM_GPCNT1_VAL_REG(base), (uint32_t)(~(value))))
#define EMVSIM_TOG_GPCNT1_VAL(base, value) (BME_XOR32(&EMVSIM_GPCNT1_VAL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual EMVSIM_GPCNT1_VAL bitfields
 */

/*!
 * @name Register EMVSIM_GPCNT1_VAL, field GPCNT1[15:0] (RW)
 *
 * The value written to this register will be used to compare to the general
 * purpose counter in the EMV SIM module. Once the General purpose counter reaches
 * this value, the GPCNT1 flag in the XMT_STATUS register will be set. This
 * counter is intended to be used for any events that must be monitored for duration
 * based on the card clock, receiver sample rate, or ETU rate (transmit clock).
 * Example: ATR arrival time and ATR duration.
 */
/*@{*/
/*! @brief Read current value of the EMVSIM_GPCNT1_VAL_GPCNT1 field. */
#define EMVSIM_RD_GPCNT1_VAL_GPCNT1(base) ((EMVSIM_GPCNT1_VAL_REG(base) & EMVSIM_GPCNT1_VAL_GPCNT1_MASK) >> EMVSIM_GPCNT1_VAL_GPCNT1_SHIFT)
#define EMVSIM_BRD_GPCNT1_VAL_GPCNT1(base) (EMVSIM_RD_GPCNT1_VAL_GPCNT1(base))

/*! @brief Set the GPCNT1 field to a new value. */
#define EMVSIM_WR_GPCNT1_VAL_GPCNT1(base, value) (EMVSIM_RMW_GPCNT1_VAL(base, EMVSIM_GPCNT1_VAL_GPCNT1_MASK, EMVSIM_GPCNT1_VAL_GPCNT1(value)))
#define EMVSIM_BWR_GPCNT1_VAL_GPCNT1(base, value) (EMVSIM_WR_GPCNT1_VAL_GPCNT1(base, value))
/*@}*/

/*
 * MK82F25615 EWM
 *
 * External Watchdog Monitor
 *
 * Registers defined in this header file:
 * - EWM_CTRL - Control Register
 * - EWM_SERV - Service Register
 * - EWM_CMPL - Compare Low Register
 * - EWM_CMPH - Compare High Register
 * - EWM_CLKCTRL - Clock Control Register
 * - EWM_CLKPRESCALER - Clock Prescaler Register
 */

#define EWM_INSTANCE_COUNT (1U) /*!< Number of instances of the EWM module. */
#define EWM_IDX (0U) /*!< Instance number for EWM. */

/*******************************************************************************
 * EWM_CTRL - Control Register
 ******************************************************************************/

/*!
 * @brief EWM_CTRL - Control Register (RW)
 *
 * Reset value: 0x00U
 *
 * The CTRL register is cleared by any reset. INEN, ASSIN and EWMEN bits can be
 * written once after a CPU reset. Modifying these bits more than once, generates
 * a bus transfer error.
 */
/*!
 * @name Constants and macros for entire EWM_CTRL register
 */
/*@{*/
#define EWM_RD_CTRL(base)        (EWM_CTRL_REG(base))
#define EWM_WR_CTRL(base, value) (EWM_CTRL_REG(base) = (value))
#define EWM_RMW_CTRL(base, mask, value) (EWM_WR_CTRL(base, (EWM_RD_CTRL(base) & ~(mask)) | (value)))
#define EWM_SET_CTRL(base, value) (BME_OR8(&EWM_CTRL_REG(base), (uint8_t)(value)))
#define EWM_CLR_CTRL(base, value) (BME_AND8(&EWM_CTRL_REG(base), (uint8_t)(~(value))))
#define EWM_TOG_CTRL(base, value) (BME_XOR8(&EWM_CTRL_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual EWM_CTRL bitfields
 */

/*!
 * @name Register EWM_CTRL, field EWMEN[0] (RW)
 *
 * This bit when set, enables the EWM module. This resets the EWM counter to
 * zero and deasserts the EWM_out signal. Clearing EWMEN bit disables the EWM, and
 * therefore it cannot be enabled until a reset occurs, due to the write-once
 * nature of this bit.
 */
/*@{*/
/*! @brief Read current value of the EWM_CTRL_EWMEN field. */
#define EWM_RD_CTRL_EWMEN(base) ((EWM_CTRL_REG(base) & EWM_CTRL_EWMEN_MASK) >> EWM_CTRL_EWMEN_SHIFT)
#define EWM_BRD_CTRL_EWMEN(base) (BME_UBFX8(&EWM_CTRL_REG(base), EWM_CTRL_EWMEN_SHIFT, EWM_CTRL_EWMEN_WIDTH))

/*! @brief Set the EWMEN field to a new value. */
#define EWM_WR_CTRL_EWMEN(base, value) (EWM_RMW_CTRL(base, EWM_CTRL_EWMEN_MASK, EWM_CTRL_EWMEN(value)))
#define EWM_BWR_CTRL_EWMEN(base, value) (BME_BFI8(&EWM_CTRL_REG(base), ((uint8_t)(value) << EWM_CTRL_EWMEN_SHIFT), EWM_CTRL_EWMEN_SHIFT, EWM_CTRL_EWMEN_WIDTH))
/*@}*/

/*!
 * @name Register EWM_CTRL, field ASSIN[1] (RW)
 *
 * Default assert state of the EWM_in signal is logic zero. Setting ASSIN bit
 * inverts the assert state to a logic one.
 */
/*@{*/
/*! @brief Read current value of the EWM_CTRL_ASSIN field. */
#define EWM_RD_CTRL_ASSIN(base) ((EWM_CTRL_REG(base) & EWM_CTRL_ASSIN_MASK) >> EWM_CTRL_ASSIN_SHIFT)
#define EWM_BRD_CTRL_ASSIN(base) (BME_UBFX8(&EWM_CTRL_REG(base), EWM_CTRL_ASSIN_SHIFT, EWM_CTRL_ASSIN_WIDTH))

/*! @brief Set the ASSIN field to a new value. */
#define EWM_WR_CTRL_ASSIN(base, value) (EWM_RMW_CTRL(base, EWM_CTRL_ASSIN_MASK, EWM_CTRL_ASSIN(value)))
#define EWM_BWR_CTRL_ASSIN(base, value) (BME_BFI8(&EWM_CTRL_REG(base), ((uint8_t)(value) << EWM_CTRL_ASSIN_SHIFT), EWM_CTRL_ASSIN_SHIFT, EWM_CTRL_ASSIN_WIDTH))
/*@}*/

/*!
 * @name Register EWM_CTRL, field INEN[2] (RW)
 *
 * This bit when set, enables the EWM_in port.
 */
/*@{*/
/*! @brief Read current value of the EWM_CTRL_INEN field. */
#define EWM_RD_CTRL_INEN(base) ((EWM_CTRL_REG(base) & EWM_CTRL_INEN_MASK) >> EWM_CTRL_INEN_SHIFT)
#define EWM_BRD_CTRL_INEN(base) (BME_UBFX8(&EWM_CTRL_REG(base), EWM_CTRL_INEN_SHIFT, EWM_CTRL_INEN_WIDTH))

/*! @brief Set the INEN field to a new value. */
#define EWM_WR_CTRL_INEN(base, value) (EWM_RMW_CTRL(base, EWM_CTRL_INEN_MASK, EWM_CTRL_INEN(value)))
#define EWM_BWR_CTRL_INEN(base, value) (BME_BFI8(&EWM_CTRL_REG(base), ((uint8_t)(value) << EWM_CTRL_INEN_SHIFT), EWM_CTRL_INEN_SHIFT, EWM_CTRL_INEN_WIDTH))
/*@}*/

/*!
 * @name Register EWM_CTRL, field INTEN[3] (RW)
 *
 * This bit when set and EWM_out is asserted, an interrupt request is generated.
 * To de-assert interrupt request, user should clear this bit by writing 0.
 */
/*@{*/
/*! @brief Read current value of the EWM_CTRL_INTEN field. */
#define EWM_RD_CTRL_INTEN(base) ((EWM_CTRL_REG(base) & EWM_CTRL_INTEN_MASK) >> EWM_CTRL_INTEN_SHIFT)
#define EWM_BRD_CTRL_INTEN(base) (BME_UBFX8(&EWM_CTRL_REG(base), EWM_CTRL_INTEN_SHIFT, EWM_CTRL_INTEN_WIDTH))

/*! @brief Set the INTEN field to a new value. */
#define EWM_WR_CTRL_INTEN(base, value) (EWM_RMW_CTRL(base, EWM_CTRL_INTEN_MASK, EWM_CTRL_INTEN(value)))
#define EWM_BWR_CTRL_INTEN(base, value) (BME_BFI8(&EWM_CTRL_REG(base), ((uint8_t)(value) << EWM_CTRL_INTEN_SHIFT), EWM_CTRL_INTEN_SHIFT, EWM_CTRL_INTEN_WIDTH))
/*@}*/

/*******************************************************************************
 * EWM_SERV - Service Register
 ******************************************************************************/

/*!
 * @brief EWM_SERV - Service Register (WORZ)
 *
 * Reset value: 0x00U
 *
 * The SERV register provides the interface from the CPU to the EWM module. It
 * is write-only and reads of this register return zero.
 */
/*!
 * @name Constants and macros for entire EWM_SERV register
 */
/*@{*/
#define EWM_RD_SERV(base)        (EWM_SERV_REG(base))
#define EWM_WR_SERV(base, value) (EWM_SERV_REG(base) = (value))
#define EWM_RMW_SERV(base, mask, value) (EWM_WR_SERV(base, (EWM_RD_SERV(base) & ~(mask)) | (value)))
/*@}*/

/*******************************************************************************
 * EWM_CMPL - Compare Low Register
 ******************************************************************************/

/*!
 * @brief EWM_CMPL - Compare Low Register (RW)
 *
 * Reset value: 0x00U
 *
 * The CMPL register is reset to zero after a CPU reset. This provides no
 * minimum time for the CPU to service the EWM counter. This register can be written
 * only once after a CPU reset. Writing this register more than once generates a
 * bus transfer error.
 */
/*!
 * @name Constants and macros for entire EWM_CMPL register
 */
/*@{*/
#define EWM_RD_CMPL(base)        (EWM_CMPL_REG(base))
#define EWM_WR_CMPL(base, value) (EWM_CMPL_REG(base) = (value))
#define EWM_RMW_CMPL(base, mask, value) (EWM_WR_CMPL(base, (EWM_RD_CMPL(base) & ~(mask)) | (value)))
#define EWM_SET_CMPL(base, value) (BME_OR8(&EWM_CMPL_REG(base), (uint8_t)(value)))
#define EWM_CLR_CMPL(base, value) (BME_AND8(&EWM_CMPL_REG(base), (uint8_t)(~(value))))
#define EWM_TOG_CMPL(base, value) (BME_XOR8(&EWM_CMPL_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * EWM_CMPH - Compare High Register
 ******************************************************************************/

/*!
 * @brief EWM_CMPH - Compare High Register (RW)
 *
 * Reset value: 0xFFU
 *
 * The CMPH register is reset to 0xFF after a CPU reset. This provides a maximum
 * of 256 clocks time, for the CPU to service the EWM counter. This register can
 * be written only once after a CPU reset. Writing this register more than once
 * generates a bus transfer error. The valid values for CMPH are up to 0xFE
 * because the EWM counter never expires when CMPH = 0xFF. The expiration happens only
 * if EWM counter is greater than CMPH.
 */
/*!
 * @name Constants and macros for entire EWM_CMPH register
 */
/*@{*/
#define EWM_RD_CMPH(base)        (EWM_CMPH_REG(base))
#define EWM_WR_CMPH(base, value) (EWM_CMPH_REG(base) = (value))
#define EWM_RMW_CMPH(base, mask, value) (EWM_WR_CMPH(base, (EWM_RD_CMPH(base) & ~(mask)) | (value)))
#define EWM_SET_CMPH(base, value) (BME_OR8(&EWM_CMPH_REG(base), (uint8_t)(value)))
#define EWM_CLR_CMPH(base, value) (BME_AND8(&EWM_CMPH_REG(base), (uint8_t)(~(value))))
#define EWM_TOG_CMPH(base, value) (BME_XOR8(&EWM_CMPH_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * EWM_CLKCTRL - Clock Control Register
 ******************************************************************************/

/*!
 * @brief EWM_CLKCTRL - Clock Control Register (RW)
 *
 * Reset value: 0x00U
 *
 * This CLKCTRL register is reset to 0x00 after a CPU reset. This register can
 * be written only once after a CPU reset. Writing this register more than once
 * generates a bus transfer error. User should select the required low power clock
 * before enabling the EWM.
 */
/*!
 * @name Constants and macros for entire EWM_CLKCTRL register
 */
/*@{*/
#define EWM_RD_CLKCTRL(base)     (EWM_CLKCTRL_REG(base))
#define EWM_WR_CLKCTRL(base, value) (EWM_CLKCTRL_REG(base) = (value))
#define EWM_RMW_CLKCTRL(base, mask, value) (EWM_WR_CLKCTRL(base, (EWM_RD_CLKCTRL(base) & ~(mask)) | (value)))
#define EWM_SET_CLKCTRL(base, value) (BME_OR8(&EWM_CLKCTRL_REG(base), (uint8_t)(value)))
#define EWM_CLR_CLKCTRL(base, value) (BME_AND8(&EWM_CLKCTRL_REG(base), (uint8_t)(~(value))))
#define EWM_TOG_CLKCTRL(base, value) (BME_XOR8(&EWM_CLKCTRL_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual EWM_CLKCTRL bitfields
 */

/*!
 * @name Register EWM_CLKCTRL, field CLKSEL[1:0] (RW)
 *
 * EWM has 4 possible low power clock sources for running EWM counter. One of
 * the clock source can be selected by writing into this field. 00 - lpo_clk[0]
 * will be selected for running EWM counter. 01 - lpo_clk[1] will be selected for
 * running EWM counter. 10 - lpo_clk[2] will be selected for running EWM counter.
 * 11 - lpo_clk[3] will be selected for running EWM counter.
 */
/*@{*/
/*! @brief Read current value of the EWM_CLKCTRL_CLKSEL field. */
#define EWM_RD_CLKCTRL_CLKSEL(base) ((EWM_CLKCTRL_REG(base) & EWM_CLKCTRL_CLKSEL_MASK) >> EWM_CLKCTRL_CLKSEL_SHIFT)
#define EWM_BRD_CLKCTRL_CLKSEL(base) (BME_UBFX8(&EWM_CLKCTRL_REG(base), EWM_CLKCTRL_CLKSEL_SHIFT, EWM_CLKCTRL_CLKSEL_WIDTH))

/*! @brief Set the CLKSEL field to a new value. */
#define EWM_WR_CLKCTRL_CLKSEL(base, value) (EWM_RMW_CLKCTRL(base, EWM_CLKCTRL_CLKSEL_MASK, EWM_CLKCTRL_CLKSEL(value)))
#define EWM_BWR_CLKCTRL_CLKSEL(base, value) (BME_BFI8(&EWM_CLKCTRL_REG(base), ((uint8_t)(value) << EWM_CLKCTRL_CLKSEL_SHIFT), EWM_CLKCTRL_CLKSEL_SHIFT, EWM_CLKCTRL_CLKSEL_WIDTH))
/*@}*/

/*******************************************************************************
 * EWM_CLKPRESCALER - Clock Prescaler Register
 ******************************************************************************/

/*!
 * @brief EWM_CLKPRESCALER - Clock Prescaler Register (RW)
 *
 * Reset value: 0x00U
 *
 * This CLKPRESCALER register is reset to 0x00 after a CPU reset. This register
 * can be written only once after a CPU reset. Writing this register more than
 * once generates a bus transfer error. Write the required prescaler value before
 * enabling the EWM. The implementation of this register is chip-specific. See the
 * Chip Configuration details.
 */
/*!
 * @name Constants and macros for entire EWM_CLKPRESCALER register
 */
/*@{*/
#define EWM_RD_CLKPRESCALER(base) (EWM_CLKPRESCALER_REG(base))
#define EWM_WR_CLKPRESCALER(base, value) (EWM_CLKPRESCALER_REG(base) = (value))
#define EWM_RMW_CLKPRESCALER(base, mask, value) (EWM_WR_CLKPRESCALER(base, (EWM_RD_CLKPRESCALER(base) & ~(mask)) | (value)))
#define EWM_SET_CLKPRESCALER(base, value) (BME_OR8(&EWM_CLKPRESCALER_REG(base), (uint8_t)(value)))
#define EWM_CLR_CLKPRESCALER(base, value) (BME_AND8(&EWM_CLKPRESCALER_REG(base), (uint8_t)(~(value))))
#define EWM_TOG_CLKPRESCALER(base, value) (BME_XOR8(&EWM_CLKPRESCALER_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * MK82F25615 FB
 *
 * FlexBus external bus interface
 *
 * Registers defined in this header file:
 * - FB_CSAR - Chip Select Address Register
 * - FB_CSMR - Chip Select Mask Register
 * - FB_CSCR - Chip Select Control Register
 * - FB_CSPMCR - Chip Select port Multiplexing Control Register
 */

#define FB_INSTANCE_COUNT (1U) /*!< Number of instances of the FB module. */
#define FB_IDX (0U) /*!< Instance number for FB. */

/*******************************************************************************
 * FB_CSAR - Chip Select Address Register
 ******************************************************************************/

/*!
 * @brief FB_CSAR - Chip Select Address Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * Specifies the associated chip-select's base address.
 */
/*!
 * @name Constants and macros for entire FB_CSAR register
 */
/*@{*/
#define FB_RD_CSAR(base, index)  (FB_CSAR_REG(base, index))
#define FB_WR_CSAR(base, index, value) (FB_CSAR_REG(base, index) = (value))
#define FB_RMW_CSAR(base, index, mask, value) (FB_WR_CSAR(base, index, (FB_RD_CSAR(base, index) & ~(mask)) | (value)))
#define FB_SET_CSAR(base, index, value) (BME_OR32(&FB_CSAR_REG(base, index), (uint32_t)(value)))
#define FB_CLR_CSAR(base, index, value) (BME_AND32(&FB_CSAR_REG(base, index), (uint32_t)(~(value))))
#define FB_TOG_CSAR(base, index, value) (BME_XOR32(&FB_CSAR_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FB_CSAR bitfields
 */

/*!
 * @name Register FB_CSAR, field BA[31:16] (RW)
 *
 * Defines the base address for memory dedicated to the associated chip-select.
 * BA is compared to bits 31-16 on the internal address bus to determine if the
 * associated chip-select's memory is being accessed. Because the FlexBus module
 * is one of the slaves connected to the crossbar switch, it is only accessible
 * within a certain memory range. See the chip memory map for the applicable
 * FlexBus "expansion" address range for which the chip-selects can be active. Set the
 * CSARn and CSMRn registers appropriately before accessing this region.
 */
/*@{*/
/*! @brief Read current value of the FB_CSAR_BA field. */
#define FB_RD_CSAR_BA(base, index) ((FB_CSAR_REG(base, index) & FB_CSAR_BA_MASK) >> FB_CSAR_BA_SHIFT)
#define FB_BRD_CSAR_BA(base, index) (FB_RD_CSAR_BA(base, index))

/*! @brief Set the BA field to a new value. */
#define FB_WR_CSAR_BA(base, index, value) (FB_RMW_CSAR(base, index, FB_CSAR_BA_MASK, FB_CSAR_BA(value)))
#define FB_BWR_CSAR_BA(base, index, value) (FB_WR_CSAR_BA(base, index, value))
/*@}*/

/*******************************************************************************
 * FB_CSMR - Chip Select Mask Register
 ******************************************************************************/

/*!
 * @brief FB_CSMR - Chip Select Mask Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * Specifies the address mask and allowable access types for the associated
 * chip-select.
 */
/*!
 * @name Constants and macros for entire FB_CSMR register
 */
/*@{*/
#define FB_RD_CSMR(base, index)  (FB_CSMR_REG(base, index))
#define FB_WR_CSMR(base, index, value) (FB_CSMR_REG(base, index) = (value))
#define FB_RMW_CSMR(base, index, mask, value) (FB_WR_CSMR(base, index, (FB_RD_CSMR(base, index) & ~(mask)) | (value)))
#define FB_SET_CSMR(base, index, value) (BME_OR32(&FB_CSMR_REG(base, index), (uint32_t)(value)))
#define FB_CLR_CSMR(base, index, value) (BME_AND32(&FB_CSMR_REG(base, index), (uint32_t)(~(value))))
#define FB_TOG_CSMR(base, index, value) (BME_XOR32(&FB_CSMR_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FB_CSMR bitfields
 */

/*!
 * @name Register FB_CSMR, field V[0] (RW)
 *
 * Specifies whether the corresponding CSAR, CSMR, and CSCR contents are valid.
 * Programmed chip-selects do not assert until the V bit is 1b (except for
 * FB_CS0, which acts as the global chip-select). At reset, FB_CS0 will fire for any
 * access to the FlexBus memory region. CSMR0[V] must be set as part of the chip
 * select initialization sequence to allow other chip selects to function as
 * programmed.
 *
 * Values:
 * - 0b0 - Chip-select is invalid.
 * - 0b1 - Chip-select is valid.
 */
/*@{*/
/*! @brief Read current value of the FB_CSMR_V field. */
#define FB_RD_CSMR_V(base, index) ((FB_CSMR_REG(base, index) & FB_CSMR_V_MASK) >> FB_CSMR_V_SHIFT)
#define FB_BRD_CSMR_V(base, index) (BME_UBFX32(&FB_CSMR_REG(base, index), FB_CSMR_V_SHIFT, FB_CSMR_V_WIDTH))

/*! @brief Set the V field to a new value. */
#define FB_WR_CSMR_V(base, index, value) (FB_RMW_CSMR(base, index, FB_CSMR_V_MASK, FB_CSMR_V(value)))
#define FB_BWR_CSMR_V(base, index, value) (BME_BFI32(&FB_CSMR_REG(base, index), ((uint32_t)(value) << FB_CSMR_V_SHIFT), FB_CSMR_V_SHIFT, FB_CSMR_V_WIDTH))
/*@}*/

/*!
 * @name Register FB_CSMR, field WP[8] (RW)
 *
 * Controls write accesses to the address range in the corresponding CSAR.
 *
 * Values:
 * - 0b0 - Write accesses are allowed.
 * - 0b1 - Write accesses are not allowed. Attempting to write to the range of
 *     addresses for which the WP bit is set results in a bus error termination of
 *     the internal cycle and no external cycle.
 */
/*@{*/
/*! @brief Read current value of the FB_CSMR_WP field. */
#define FB_RD_CSMR_WP(base, index) ((FB_CSMR_REG(base, index) & FB_CSMR_WP_MASK) >> FB_CSMR_WP_SHIFT)
#define FB_BRD_CSMR_WP(base, index) (BME_UBFX32(&FB_CSMR_REG(base, index), FB_CSMR_WP_SHIFT, FB_CSMR_WP_WIDTH))

/*! @brief Set the WP field to a new value. */
#define FB_WR_CSMR_WP(base, index, value) (FB_RMW_CSMR(base, index, FB_CSMR_WP_MASK, FB_CSMR_WP(value)))
#define FB_BWR_CSMR_WP(base, index, value) (BME_BFI32(&FB_CSMR_REG(base, index), ((uint32_t)(value) << FB_CSMR_WP_SHIFT), FB_CSMR_WP_SHIFT, FB_CSMR_WP_WIDTH))
/*@}*/

/*!
 * @name Register FB_CSMR, field BAM[31:16] (RW)
 *
 * Defines the associated chip-select's block size by masking address bits.
 *
 * Values:
 * - 0b0000000000000000 - The corresponding address bit in CSAR is used in the
 *     chip-select decode.
 * - 0b0000000000000001 - The corresponding address bit in CSAR is a don't care
 *     in the chip-select decode.
 */
/*@{*/
/*! @brief Read current value of the FB_CSMR_BAM field. */
#define FB_RD_CSMR_BAM(base, index) ((FB_CSMR_REG(base, index) & FB_CSMR_BAM_MASK) >> FB_CSMR_BAM_SHIFT)
#define FB_BRD_CSMR_BAM(base, index) (FB_RD_CSMR_BAM(base, index))

/*! @brief Set the BAM field to a new value. */
#define FB_WR_CSMR_BAM(base, index, value) (FB_RMW_CSMR(base, index, FB_CSMR_BAM_MASK, FB_CSMR_BAM(value)))
#define FB_BWR_CSMR_BAM(base, index, value) (FB_WR_CSMR_BAM(base, index, value))
/*@}*/

/*******************************************************************************
 * FB_CSCR - Chip Select Control Register
 ******************************************************************************/

/*!
 * @brief FB_CSCR - Chip Select Control Register (RW)
 *
 * Reset value: 0x003FFC00U
 *
 * Controls the auto-acknowledge, address setup and hold times, port size, burst
 * capability, and number of wait states for the associated chip select. To
 * support the global chip-select (FB_CS0), the CSCR0 reset values differ from the
 * other CSCRs. The reset value of CSCR0 is as follows: Bits 31-24 are 0b Bit 23-3
 * are chip-dependent Bits 3-0 are 0b See the chip configuration details for your
 * particular chip for information on the exact CSCR0 reset value.
 */
/*!
 * @name Constants and macros for entire FB_CSCR register
 */
/*@{*/
#define FB_RD_CSCR(base, index)  (FB_CSCR_REG(base, index))
#define FB_WR_CSCR(base, index, value) (FB_CSCR_REG(base, index) = (value))
#define FB_RMW_CSCR(base, index, mask, value) (FB_WR_CSCR(base, index, (FB_RD_CSCR(base, index) & ~(mask)) | (value)))
#define FB_SET_CSCR(base, index, value) (BME_OR32(&FB_CSCR_REG(base, index), (uint32_t)(value)))
#define FB_CLR_CSCR(base, index, value) (BME_AND32(&FB_CSCR_REG(base, index), (uint32_t)(~(value))))
#define FB_TOG_CSCR(base, index, value) (BME_XOR32(&FB_CSCR_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FB_CSCR bitfields
 */

/*!
 * @name Register FB_CSCR, field BSTW[3] (RW)
 *
 * Specifies whether burst writes are enabled for memory associated with each
 * chip select.
 *
 * Values:
 * - 0b0 - Disabled. Data exceeding the specified port size is broken into
 *     individual, port-sized, non-burst writes. For example, a 32-bit write to an
 *     8-bit port takes four byte writes.
 * - 0b1 - Enabled. Enables burst write of data larger than the specified port
 *     size, including 32-bit writes to 8- and 16-bit ports, 16-bit writes to
 *     8-bit ports, and line writes to 8-, 16-, and 32-bit ports.
 */
/*@{*/
/*! @brief Read current value of the FB_CSCR_BSTW field. */
#define FB_RD_CSCR_BSTW(base, index) ((FB_CSCR_REG(base, index) & FB_CSCR_BSTW_MASK) >> FB_CSCR_BSTW_SHIFT)
#define FB_BRD_CSCR_BSTW(base, index) (BME_UBFX32(&FB_CSCR_REG(base, index), FB_CSCR_BSTW_SHIFT, FB_CSCR_BSTW_WIDTH))

/*! @brief Set the BSTW field to a new value. */
#define FB_WR_CSCR_BSTW(base, index, value) (FB_RMW_CSCR(base, index, FB_CSCR_BSTW_MASK, FB_CSCR_BSTW(value)))
#define FB_BWR_CSCR_BSTW(base, index, value) (BME_BFI32(&FB_CSCR_REG(base, index), ((uint32_t)(value) << FB_CSCR_BSTW_SHIFT), FB_CSCR_BSTW_SHIFT, FB_CSCR_BSTW_WIDTH))
/*@}*/

/*!
 * @name Register FB_CSCR, field BSTR[4] (RW)
 *
 * Specifies whether burst reads are enabled for memory associated with each
 * chip select.
 *
 * Values:
 * - 0b0 - Disabled. Data exceeding the specified port size is broken into
 *     individual, port-sized, non-burst reads. For example, a 32-bit read from an
 *     8-bit port is broken into four 8-bit reads.
 * - 0b1 - Enabled. Enables data burst reads larger than the specified port
 *     size, including 32-bit reads from 8- and 16-bit ports, 16-bit reads from 8-bit
 *     ports, and line reads from 8-, 16-, and 32-bit ports.
 */
/*@{*/
/*! @brief Read current value of the FB_CSCR_BSTR field. */
#define FB_RD_CSCR_BSTR(base, index) ((FB_CSCR_REG(base, index) & FB_CSCR_BSTR_MASK) >> FB_CSCR_BSTR_SHIFT)
#define FB_BRD_CSCR_BSTR(base, index) (BME_UBFX32(&FB_CSCR_REG(base, index), FB_CSCR_BSTR_SHIFT, FB_CSCR_BSTR_WIDTH))

/*! @brief Set the BSTR field to a new value. */
#define FB_WR_CSCR_BSTR(base, index, value) (FB_RMW_CSCR(base, index, FB_CSCR_BSTR_MASK, FB_CSCR_BSTR(value)))
#define FB_BWR_CSCR_BSTR(base, index, value) (BME_BFI32(&FB_CSCR_REG(base, index), ((uint32_t)(value) << FB_CSCR_BSTR_SHIFT), FB_CSCR_BSTR_SHIFT, FB_CSCR_BSTR_WIDTH))
/*@}*/

/*!
 * @name Register FB_CSCR, field BEM[5] (RW)
 *
 * Specifies whether the corresponding FB_BE is asserted for read accesses.
 * Certain memories have byte enables that must be asserted during reads and writes.
 * Write 1b to the BEM bit in the relevant CSCR to provide the appropriate mode
 * of byte enable support for these SRAMs.
 *
 * Values:
 * - 0b0 - FB_BE is asserted for data write only.
 * - 0b1 - FB_BE is asserted for data read and write accesses.
 */
/*@{*/
/*! @brief Read current value of the FB_CSCR_BEM field. */
#define FB_RD_CSCR_BEM(base, index) ((FB_CSCR_REG(base, index) & FB_CSCR_BEM_MASK) >> FB_CSCR_BEM_SHIFT)
#define FB_BRD_CSCR_BEM(base, index) (BME_UBFX32(&FB_CSCR_REG(base, index), FB_CSCR_BEM_SHIFT, FB_CSCR_BEM_WIDTH))

/*! @brief Set the BEM field to a new value. */
#define FB_WR_CSCR_BEM(base, index, value) (FB_RMW_CSCR(base, index, FB_CSCR_BEM_MASK, FB_CSCR_BEM(value)))
#define FB_BWR_CSCR_BEM(base, index, value) (BME_BFI32(&FB_CSCR_REG(base, index), ((uint32_t)(value) << FB_CSCR_BEM_SHIFT), FB_CSCR_BEM_SHIFT, FB_CSCR_BEM_WIDTH))
/*@}*/

/*!
 * @name Register FB_CSCR, field PS[7:6] (RW)
 *
 * Specifies the data port width of the associated chip-select, and determines
 * where data is driven during write cycles and where data is sampled during read
 * cycles.
 *
 * Values:
 * - 0b00 - 32-bit port size. Valid data is sampled and driven on FB_D[31:0].
 * - 0b01 - 8-bit port size. Valid data is sampled and driven on FB_D[31:24]
 *     when BLS is 0b, or FB_D[7:0] when BLS is 1b.
 */
/*@{*/
/*! @brief Read current value of the FB_CSCR_PS field. */
#define FB_RD_CSCR_PS(base, index) ((FB_CSCR_REG(base, index) & FB_CSCR_PS_MASK) >> FB_CSCR_PS_SHIFT)
#define FB_BRD_CSCR_PS(base, index) (BME_UBFX32(&FB_CSCR_REG(base, index), FB_CSCR_PS_SHIFT, FB_CSCR_PS_WIDTH))

/*! @brief Set the PS field to a new value. */
#define FB_WR_CSCR_PS(base, index, value) (FB_RMW_CSCR(base, index, FB_CSCR_PS_MASK, FB_CSCR_PS(value)))
#define FB_BWR_CSCR_PS(base, index, value) (BME_BFI32(&FB_CSCR_REG(base, index), ((uint32_t)(value) << FB_CSCR_PS_SHIFT), FB_CSCR_PS_SHIFT, FB_CSCR_PS_WIDTH))
/*@}*/

/*!
 * @name Register FB_CSCR, field AA[8] (RW)
 *
 * Asserts the internal transfer acknowledge for accesses specified by the
 * chip-select address. If AA is 1b for a corresponding FB_CSn and the external system
 * asserts an external FB_TA before the wait-state countdown asserts the
 * internal FB_TA, the cycle is terminated. Burst cycles increment the address bus
 * between each internal termination. This field must be 1b if CSPMCR disables FB_TA.
 *
 * Values:
 * - 0b0 - Disabled. No internal transfer acknowledge is asserted and the cycle
 *     is terminated externally.
 * - 0b1 - Enabled. Internal transfer acknowledge is asserted as specified by WS.
 */
/*@{*/
/*! @brief Read current value of the FB_CSCR_AA field. */
#define FB_RD_CSCR_AA(base, index) ((FB_CSCR_REG(base, index) & FB_CSCR_AA_MASK) >> FB_CSCR_AA_SHIFT)
#define FB_BRD_CSCR_AA(base, index) (BME_UBFX32(&FB_CSCR_REG(base, index), FB_CSCR_AA_SHIFT, FB_CSCR_AA_WIDTH))

/*! @brief Set the AA field to a new value. */
#define FB_WR_CSCR_AA(base, index, value) (FB_RMW_CSCR(base, index, FB_CSCR_AA_MASK, FB_CSCR_AA(value)))
#define FB_BWR_CSCR_AA(base, index, value) (BME_BFI32(&FB_CSCR_REG(base, index), ((uint32_t)(value) << FB_CSCR_AA_SHIFT), FB_CSCR_AA_SHIFT, FB_CSCR_AA_WIDTH))
/*@}*/

/*!
 * @name Register FB_CSCR, field BLS[9] (RW)
 *
 * Specifies if data on FB_AD appears left-aligned or right-aligned during the
 * data phase of a FlexBus access.
 *
 * Values:
 * - 0b0 - Not shifted. Data is left-aligned on FB_AD.
 * - 0b1 - Shifted. Data is right-aligned on FB_AD.
 */
/*@{*/
/*! @brief Read current value of the FB_CSCR_BLS field. */
#define FB_RD_CSCR_BLS(base, index) ((FB_CSCR_REG(base, index) & FB_CSCR_BLS_MASK) >> FB_CSCR_BLS_SHIFT)
#define FB_BRD_CSCR_BLS(base, index) (BME_UBFX32(&FB_CSCR_REG(base, index), FB_CSCR_BLS_SHIFT, FB_CSCR_BLS_WIDTH))

/*! @brief Set the BLS field to a new value. */
#define FB_WR_CSCR_BLS(base, index, value) (FB_RMW_CSCR(base, index, FB_CSCR_BLS_MASK, FB_CSCR_BLS(value)))
#define FB_BWR_CSCR_BLS(base, index, value) (BME_BFI32(&FB_CSCR_REG(base, index), ((uint32_t)(value) << FB_CSCR_BLS_SHIFT), FB_CSCR_BLS_SHIFT, FB_CSCR_BLS_WIDTH))
/*@}*/

/*!
 * @name Register FB_CSCR, field WS[15:10] (RW)
 *
 * Specifies the number of wait states inserted after FlexBus asserts the
 * associated chip-select and before an internal transfer acknowledge is generated (WS
 * = 00h inserts 0 wait states, ..., WS = 3Fh inserts 63 wait states).
 */
/*@{*/
/*! @brief Read current value of the FB_CSCR_WS field. */
#define FB_RD_CSCR_WS(base, index) ((FB_CSCR_REG(base, index) & FB_CSCR_WS_MASK) >> FB_CSCR_WS_SHIFT)
#define FB_BRD_CSCR_WS(base, index) (BME_UBFX32(&FB_CSCR_REG(base, index), FB_CSCR_WS_SHIFT, FB_CSCR_WS_WIDTH))

/*! @brief Set the WS field to a new value. */
#define FB_WR_CSCR_WS(base, index, value) (FB_RMW_CSCR(base, index, FB_CSCR_WS_MASK, FB_CSCR_WS(value)))
#define FB_BWR_CSCR_WS(base, index, value) (BME_BFI32(&FB_CSCR_REG(base, index), ((uint32_t)(value) << FB_CSCR_WS_SHIFT), FB_CSCR_WS_SHIFT, FB_CSCR_WS_WIDTH))
/*@}*/

/*!
 * @name Register FB_CSCR, field WRAH[17:16] (RW)
 *
 * Controls the address, data, and attribute hold time after the termination of
 * a write cycle that hits in the associated chip-select's address space. The
 * hold time applies only at the end of a transfer. Therefore, during a burst
 * transfer or a transfer to a port size smaller than the transfer size, the hold time
 * is only added after the last bus cycle.
 *
 * Values:
 * - 0b00 - 1 cycle (default for all but FB_CS0 )
 * - 0b01 - 2 cycles
 * - 0b10 - 3 cycles
 * - 0b11 - 4 cycles (default for FB_CS0 )
 */
/*@{*/
/*! @brief Read current value of the FB_CSCR_WRAH field. */
#define FB_RD_CSCR_WRAH(base, index) ((FB_CSCR_REG(base, index) & FB_CSCR_WRAH_MASK) >> FB_CSCR_WRAH_SHIFT)
#define FB_BRD_CSCR_WRAH(base, index) (BME_UBFX32(&FB_CSCR_REG(base, index), FB_CSCR_WRAH_SHIFT, FB_CSCR_WRAH_WIDTH))

/*! @brief Set the WRAH field to a new value. */
#define FB_WR_CSCR_WRAH(base, index, value) (FB_RMW_CSCR(base, index, FB_CSCR_WRAH_MASK, FB_CSCR_WRAH(value)))
#define FB_BWR_CSCR_WRAH(base, index, value) (BME_BFI32(&FB_CSCR_REG(base, index), ((uint32_t)(value) << FB_CSCR_WRAH_SHIFT), FB_CSCR_WRAH_SHIFT, FB_CSCR_WRAH_WIDTH))
/*@}*/

/*!
 * @name Register FB_CSCR, field RDAH[19:18] (RW)
 *
 * Controls the address and attribute hold time after the termination during a
 * read cycle that hits in the associated chip-select's address space. The hold
 * time applies only at the end of a transfer. Therefore, during a burst transfer
 * or a transfer to a port size smaller than the transfer size, the hold time is
 * only added after the last bus cycle. The number of cycles the address and
 * attributes are held after FB_CSn deassertion depends on the value of the AA bit.
 *
 * Values:
 * - 0b00 - When AA is 1b, 1 cycle. When AA is 0b, 0 cycles.
 * - 0b01 - When AA is 1b, 2 cycles. When AA is 0b, 1 cycle.
 * - 0b10 - When AA is 1b, 3 cycles. When AA is 0b, 2 cycles.
 * - 0b11 - When AA is 1b, 4 cycles. When AA is 0b, 3 cycles.
 */
/*@{*/
/*! @brief Read current value of the FB_CSCR_RDAH field. */
#define FB_RD_CSCR_RDAH(base, index) ((FB_CSCR_REG(base, index) & FB_CSCR_RDAH_MASK) >> FB_CSCR_RDAH_SHIFT)
#define FB_BRD_CSCR_RDAH(base, index) (BME_UBFX32(&FB_CSCR_REG(base, index), FB_CSCR_RDAH_SHIFT, FB_CSCR_RDAH_WIDTH))

/*! @brief Set the RDAH field to a new value. */
#define FB_WR_CSCR_RDAH(base, index, value) (FB_RMW_CSCR(base, index, FB_CSCR_RDAH_MASK, FB_CSCR_RDAH(value)))
#define FB_BWR_CSCR_RDAH(base, index, value) (BME_BFI32(&FB_CSCR_REG(base, index), ((uint32_t)(value) << FB_CSCR_RDAH_SHIFT), FB_CSCR_RDAH_SHIFT, FB_CSCR_RDAH_WIDTH))
/*@}*/

/*!
 * @name Register FB_CSCR, field ASET[21:20] (RW)
 *
 * Controls when the chip-select is asserted with respect to assertion of a
 * valid address and attributes.
 *
 * Values:
 * - 0b00 - Assert FB_CSn on the first rising clock edge after the address is
 *     asserted (default for all but FB_CS0 ).
 * - 0b01 - Assert FB_CSn on the second rising clock edge after the address is
 *     asserted.
 * - 0b10 - Assert FB_CSn on the third rising clock edge after the address is
 *     asserted.
 * - 0b11 - Assert FB_CSn on the fourth rising clock edge after the address is
 *     asserted (default for FB_CS0 ).
 */
/*@{*/
/*! @brief Read current value of the FB_CSCR_ASET field. */
#define FB_RD_CSCR_ASET(base, index) ((FB_CSCR_REG(base, index) & FB_CSCR_ASET_MASK) >> FB_CSCR_ASET_SHIFT)
#define FB_BRD_CSCR_ASET(base, index) (BME_UBFX32(&FB_CSCR_REG(base, index), FB_CSCR_ASET_SHIFT, FB_CSCR_ASET_WIDTH))

/*! @brief Set the ASET field to a new value. */
#define FB_WR_CSCR_ASET(base, index, value) (FB_RMW_CSCR(base, index, FB_CSCR_ASET_MASK, FB_CSCR_ASET(value)))
#define FB_BWR_CSCR_ASET(base, index, value) (BME_BFI32(&FB_CSCR_REG(base, index), ((uint32_t)(value) << FB_CSCR_ASET_SHIFT), FB_CSCR_ASET_SHIFT, FB_CSCR_ASET_WIDTH))
/*@}*/

/*!
 * @name Register FB_CSCR, field EXTS[22] (RW)
 *
 * Extended Transfer Start/Extended Address Latch Enable Controls how long FB_TS
 * /FB_ALE is asserted.
 *
 * Values:
 * - 0b0 - Disabled. FB_TS /FB_ALE asserts for one bus clock cycle.
 * - 0b1 - Enabled. FB_TS /FB_ALE remains asserted until the first positive
 *     clock edge after FB_CSn asserts.
 */
/*@{*/
/*! @brief Read current value of the FB_CSCR_EXTS field. */
#define FB_RD_CSCR_EXTS(base, index) ((FB_CSCR_REG(base, index) & FB_CSCR_EXTS_MASK) >> FB_CSCR_EXTS_SHIFT)
#define FB_BRD_CSCR_EXTS(base, index) (BME_UBFX32(&FB_CSCR_REG(base, index), FB_CSCR_EXTS_SHIFT, FB_CSCR_EXTS_WIDTH))

/*! @brief Set the EXTS field to a new value. */
#define FB_WR_CSCR_EXTS(base, index, value) (FB_RMW_CSCR(base, index, FB_CSCR_EXTS_MASK, FB_CSCR_EXTS(value)))
#define FB_BWR_CSCR_EXTS(base, index, value) (BME_BFI32(&FB_CSCR_REG(base, index), ((uint32_t)(value) << FB_CSCR_EXTS_SHIFT), FB_CSCR_EXTS_SHIFT, FB_CSCR_EXTS_WIDTH))
/*@}*/

/*!
 * @name Register FB_CSCR, field SWSEN[23] (RW)
 *
 * Values:
 * - 0b0 - Disabled. A number of wait states (specified by WS) are inserted
 *     before an internal transfer acknowledge is generated for all transfers.
 * - 0b1 - Enabled. A number of wait states (specified by SWS) are inserted
 *     before an internal transfer acknowledge is generated for burst transfer
 *     secondary terminations.
 */
/*@{*/
/*! @brief Read current value of the FB_CSCR_SWSEN field. */
#define FB_RD_CSCR_SWSEN(base, index) ((FB_CSCR_REG(base, index) & FB_CSCR_SWSEN_MASK) >> FB_CSCR_SWSEN_SHIFT)
#define FB_BRD_CSCR_SWSEN(base, index) (BME_UBFX32(&FB_CSCR_REG(base, index), FB_CSCR_SWSEN_SHIFT, FB_CSCR_SWSEN_WIDTH))

/*! @brief Set the SWSEN field to a new value. */
#define FB_WR_CSCR_SWSEN(base, index, value) (FB_RMW_CSCR(base, index, FB_CSCR_SWSEN_MASK, FB_CSCR_SWSEN(value)))
#define FB_BWR_CSCR_SWSEN(base, index, value) (BME_BFI32(&FB_CSCR_REG(base, index), ((uint32_t)(value) << FB_CSCR_SWSEN_SHIFT), FB_CSCR_SWSEN_SHIFT, FB_CSCR_SWSEN_WIDTH))
/*@}*/

/*!
 * @name Register FB_CSCR, field SWS[31:26] (RW)
 *
 * Used only when the SWSEN bit is 1b. Specifies the number of wait states
 * inserted before an internal transfer acknowledge is generated for a burst transfer
 * (except for the first termination, which is controlled by WS).
 */
/*@{*/
/*! @brief Read current value of the FB_CSCR_SWS field. */
#define FB_RD_CSCR_SWS(base, index) ((FB_CSCR_REG(base, index) & FB_CSCR_SWS_MASK) >> FB_CSCR_SWS_SHIFT)
#define FB_BRD_CSCR_SWS(base, index) (BME_UBFX32(&FB_CSCR_REG(base, index), FB_CSCR_SWS_SHIFT, FB_CSCR_SWS_WIDTH))

/*! @brief Set the SWS field to a new value. */
#define FB_WR_CSCR_SWS(base, index, value) (FB_RMW_CSCR(base, index, FB_CSCR_SWS_MASK, FB_CSCR_SWS(value)))
#define FB_BWR_CSCR_SWS(base, index, value) (BME_BFI32(&FB_CSCR_REG(base, index), ((uint32_t)(value) << FB_CSCR_SWS_SHIFT), FB_CSCR_SWS_SHIFT, FB_CSCR_SWS_WIDTH))
/*@}*/

/*******************************************************************************
 * FB_CSPMCR - Chip Select port Multiplexing Control Register
 ******************************************************************************/

/*!
 * @brief FB_CSPMCR - Chip Select port Multiplexing Control Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * Controls the multiplexing of the FlexBus signals. A bus error occurs when you
 * do any of the following: Write to a reserved address Write to a reserved
 * field in this register, or Access this register using a size other than 32 bits.
 */
/*!
 * @name Constants and macros for entire FB_CSPMCR register
 */
/*@{*/
#define FB_RD_CSPMCR(base)       (FB_CSPMCR_REG(base))
#define FB_WR_CSPMCR(base, value) (FB_CSPMCR_REG(base) = (value))
#define FB_RMW_CSPMCR(base, mask, value) (FB_WR_CSPMCR(base, (FB_RD_CSPMCR(base) & ~(mask)) | (value)))
#define FB_SET_CSPMCR(base, value) (BME_OR32(&FB_CSPMCR_REG(base), (uint32_t)(value)))
#define FB_CLR_CSPMCR(base, value) (BME_AND32(&FB_CSPMCR_REG(base), (uint32_t)(~(value))))
#define FB_TOG_CSPMCR(base, value) (BME_XOR32(&FB_CSPMCR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FB_CSPMCR bitfields
 */

/*!
 * @name Register FB_CSPMCR, field GROUP5[15:12] (RW)
 *
 * Controls the multiplexing of the FB_TA , FB_CS3 , and FB_BE_7_0 signals. When
 * GROUP5 is not 0000b, you must write 1b to the CSCR[AA] bit. Otherwise, the
 * bus hangs during a transfer.
 *
 * Values:
 * - 0b0000 - FB_TA
 * - 0b0001 - FB_CS3 . You must also write 1b to CSCR[AA].
 * - 0b0010 - FB_BE_7_0 . You must also write 1b to CSCR[AA].
 */
/*@{*/
/*! @brief Read current value of the FB_CSPMCR_GROUP5 field. */
#define FB_RD_CSPMCR_GROUP5(base) ((FB_CSPMCR_REG(base) & FB_CSPMCR_GROUP5_MASK) >> FB_CSPMCR_GROUP5_SHIFT)
#define FB_BRD_CSPMCR_GROUP5(base) (BME_UBFX32(&FB_CSPMCR_REG(base), FB_CSPMCR_GROUP5_SHIFT, FB_CSPMCR_GROUP5_WIDTH))

/*! @brief Set the GROUP5 field to a new value. */
#define FB_WR_CSPMCR_GROUP5(base, value) (FB_RMW_CSPMCR(base, FB_CSPMCR_GROUP5_MASK, FB_CSPMCR_GROUP5(value)))
#define FB_BWR_CSPMCR_GROUP5(base, value) (BME_BFI32(&FB_CSPMCR_REG(base), ((uint32_t)(value) << FB_CSPMCR_GROUP5_SHIFT), FB_CSPMCR_GROUP5_SHIFT, FB_CSPMCR_GROUP5_WIDTH))
/*@}*/

/*!
 * @name Register FB_CSPMCR, field GROUP4[19:16] (RW)
 *
 * Controls the multiplexing of the FB_TBST , FB_CS2 , and FB_BE_15_8 signals.
 *
 * Values:
 * - 0b0000 - FB_TBST
 * - 0b0001 - FB_CS2
 * - 0b0010 - FB_BE_15_8
 */
/*@{*/
/*! @brief Read current value of the FB_CSPMCR_GROUP4 field. */
#define FB_RD_CSPMCR_GROUP4(base) ((FB_CSPMCR_REG(base) & FB_CSPMCR_GROUP4_MASK) >> FB_CSPMCR_GROUP4_SHIFT)
#define FB_BRD_CSPMCR_GROUP4(base) (BME_UBFX32(&FB_CSPMCR_REG(base), FB_CSPMCR_GROUP4_SHIFT, FB_CSPMCR_GROUP4_WIDTH))

/*! @brief Set the GROUP4 field to a new value. */
#define FB_WR_CSPMCR_GROUP4(base, value) (FB_RMW_CSPMCR(base, FB_CSPMCR_GROUP4_MASK, FB_CSPMCR_GROUP4(value)))
#define FB_BWR_CSPMCR_GROUP4(base, value) (BME_BFI32(&FB_CSPMCR_REG(base), ((uint32_t)(value) << FB_CSPMCR_GROUP4_SHIFT), FB_CSPMCR_GROUP4_SHIFT, FB_CSPMCR_GROUP4_WIDTH))
/*@}*/

/*!
 * @name Register FB_CSPMCR, field GROUP3[23:20] (RW)
 *
 * Controls the multiplexing of the FB_CS5 , FB_TSIZ1, and FB_BE_23_16 signals.
 *
 * Values:
 * - 0b0000 - FB_CS5
 * - 0b0001 - FB_TSIZ1
 * - 0b0010 - FB_BE_23_16
 */
/*@{*/
/*! @brief Read current value of the FB_CSPMCR_GROUP3 field. */
#define FB_RD_CSPMCR_GROUP3(base) ((FB_CSPMCR_REG(base) & FB_CSPMCR_GROUP3_MASK) >> FB_CSPMCR_GROUP3_SHIFT)
#define FB_BRD_CSPMCR_GROUP3(base) (BME_UBFX32(&FB_CSPMCR_REG(base), FB_CSPMCR_GROUP3_SHIFT, FB_CSPMCR_GROUP3_WIDTH))

/*! @brief Set the GROUP3 field to a new value. */
#define FB_WR_CSPMCR_GROUP3(base, value) (FB_RMW_CSPMCR(base, FB_CSPMCR_GROUP3_MASK, FB_CSPMCR_GROUP3(value)))
#define FB_BWR_CSPMCR_GROUP3(base, value) (BME_BFI32(&FB_CSPMCR_REG(base), ((uint32_t)(value) << FB_CSPMCR_GROUP3_SHIFT), FB_CSPMCR_GROUP3_SHIFT, FB_CSPMCR_GROUP3_WIDTH))
/*@}*/

/*!
 * @name Register FB_CSPMCR, field GROUP2[27:24] (RW)
 *
 * Controls the multiplexing of the FB_CS4 , FB_TSIZ0, and FB_BE_31_24 signals.
 *
 * Values:
 * - 0b0000 - FB_CS4
 * - 0b0001 - FB_TSIZ0
 * - 0b0010 - FB_BE_31_24
 */
/*@{*/
/*! @brief Read current value of the FB_CSPMCR_GROUP2 field. */
#define FB_RD_CSPMCR_GROUP2(base) ((FB_CSPMCR_REG(base) & FB_CSPMCR_GROUP2_MASK) >> FB_CSPMCR_GROUP2_SHIFT)
#define FB_BRD_CSPMCR_GROUP2(base) (BME_UBFX32(&FB_CSPMCR_REG(base), FB_CSPMCR_GROUP2_SHIFT, FB_CSPMCR_GROUP2_WIDTH))

/*! @brief Set the GROUP2 field to a new value. */
#define FB_WR_CSPMCR_GROUP2(base, value) (FB_RMW_CSPMCR(base, FB_CSPMCR_GROUP2_MASK, FB_CSPMCR_GROUP2(value)))
#define FB_BWR_CSPMCR_GROUP2(base, value) (BME_BFI32(&FB_CSPMCR_REG(base), ((uint32_t)(value) << FB_CSPMCR_GROUP2_SHIFT), FB_CSPMCR_GROUP2_SHIFT, FB_CSPMCR_GROUP2_WIDTH))
/*@}*/

/*!
 * @name Register FB_CSPMCR, field GROUP1[31:28] (RW)
 *
 * Controls the multiplexing of the FB_ALE, FB_CS1 , and FB_TS signals.
 *
 * Values:
 * - 0b0000 - FB_ALE
 * - 0b0001 - FB_CS1
 * - 0b0010 - FB_TS
 */
/*@{*/
/*! @brief Read current value of the FB_CSPMCR_GROUP1 field. */
#define FB_RD_CSPMCR_GROUP1(base) ((FB_CSPMCR_REG(base) & FB_CSPMCR_GROUP1_MASK) >> FB_CSPMCR_GROUP1_SHIFT)
#define FB_BRD_CSPMCR_GROUP1(base) (BME_UBFX32(&FB_CSPMCR_REG(base), FB_CSPMCR_GROUP1_SHIFT, FB_CSPMCR_GROUP1_WIDTH))

/*! @brief Set the GROUP1 field to a new value. */
#define FB_WR_CSPMCR_GROUP1(base, value) (FB_RMW_CSPMCR(base, FB_CSPMCR_GROUP1_MASK, FB_CSPMCR_GROUP1(value)))
#define FB_BWR_CSPMCR_GROUP1(base, value) (BME_BFI32(&FB_CSPMCR_REG(base), ((uint32_t)(value) << FB_CSPMCR_GROUP1_SHIFT), FB_CSPMCR_GROUP1_SHIFT, FB_CSPMCR_GROUP1_WIDTH))
/*@}*/

/*
 * MK82F25615 FLEXIO
 *
 * The FLEXIO Memory Map/Register Definition can be found here.
 *
 * Registers defined in this header file:
 * - FLEXIO_VERID - Version ID Register
 * - FLEXIO_PARAM - Parameter Register
 * - FLEXIO_CTRL - FlexIO Control Register
 * - FLEXIO_PIN - Pin State Register
 * - FLEXIO_SHIFTSTAT - Shifter Status Register
 * - FLEXIO_SHIFTERR - Shifter Error Register
 * - FLEXIO_TIMSTAT - Timer Status Register
 * - FLEXIO_SHIFTSIEN - Shifter Status Interrupt Enable
 * - FLEXIO_SHIFTEIEN - Shifter Error Interrupt Enable
 * - FLEXIO_TIMIEN - Timer Interrupt Enable Register
 * - FLEXIO_SHIFTSDEN - Shifter Status DMA Enable
 * - FLEXIO_SHIFTSTATE - Shifter State Register
 * - FLEXIO_SHIFTCTL - Shifter Control N Register
 * - FLEXIO_SHIFTCFG - Shifter Configuration N Register
 * - FLEXIO_SHIFTBUF - Shifter Buffer N Register
 * - FLEXIO_SHIFTBUFBIS - Shifter Buffer N Bit Swapped Register
 * - FLEXIO_SHIFTBUFBYS - Shifter Buffer N Byte Swapped Register
 * - FLEXIO_SHIFTBUFBBS - Shifter Buffer N Bit Byte Swapped Register
 * - FLEXIO_TIMCTL - Timer Control N Register
 * - FLEXIO_TIMCFG - Timer Configuration N Register
 * - FLEXIO_TIMCMP - Timer Compare N Register
 * - FLEXIO_SHIFTBUFNBS - Shifter Buffer N Nibble Byte Swapped Register
 * - FLEXIO_SHIFTBUFHWS - Shifter Buffer N Half Word Swapped Register
 * - FLEXIO_SHIFTBUFNIS - Shifter Buffer N Nibble Swapped Register
 */

#define FLEXIO_INSTANCE_COUNT (1U) /*!< Number of instances of the FLEXIO module. */
#define FLEXIO0_IDX (0U) /*!< Instance number for FLEXIO0. */

/*******************************************************************************
 * FLEXIO_VERID - Version ID Register
 ******************************************************************************/

/*!
 * @brief FLEXIO_VERID - Version ID Register (RO)
 *
 * Reset value: 0x01010001U
 *
 * .
 */
/*!
 * @name Constants and macros for entire FLEXIO_VERID register
 */
/*@{*/
#define FLEXIO_RD_VERID(base)    (FLEXIO_VERID_REG(base))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_VERID bitfields
 */

/*!
 * @name Register FLEXIO_VERID, field FEATURE[15:0] (RO)
 *
 * This read only field returns the feature set number.
 *
 * Values:
 * - 0b0000000000000000 - Standard features implemented.
 * - 0b0000000000000001 - Supports state, logic and parallel modes.
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_VERID_FEATURE field. */
#define FLEXIO_RD_VERID_FEATURE(base) ((FLEXIO_VERID_REG(base) & FLEXIO_VERID_FEATURE_MASK) >> FLEXIO_VERID_FEATURE_SHIFT)
#define FLEXIO_BRD_VERID_FEATURE(base) (FLEXIO_RD_VERID_FEATURE(base))
/*@}*/

/*!
 * @name Register FLEXIO_VERID, field MINOR[23:16] (RO)
 *
 * This read only field returns the minor version number for the module
 * specification.
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_VERID_MINOR field. */
#define FLEXIO_RD_VERID_MINOR(base) ((FLEXIO_VERID_REG(base) & FLEXIO_VERID_MINOR_MASK) >> FLEXIO_VERID_MINOR_SHIFT)
#define FLEXIO_BRD_VERID_MINOR(base) (BME_UBFX32(&FLEXIO_VERID_REG(base), FLEXIO_VERID_MINOR_SHIFT, FLEXIO_VERID_MINOR_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_VERID, field MAJOR[31:24] (RO)
 *
 * This read only field returns the major version number for the module
 * specification.
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_VERID_MAJOR field. */
#define FLEXIO_RD_VERID_MAJOR(base) ((FLEXIO_VERID_REG(base) & FLEXIO_VERID_MAJOR_MASK) >> FLEXIO_VERID_MAJOR_SHIFT)
#define FLEXIO_BRD_VERID_MAJOR(base) (BME_UBFX32(&FLEXIO_VERID_REG(base), FLEXIO_VERID_MAJOR_SHIFT, FLEXIO_VERID_MAJOR_WIDTH))
/*@}*/

/*******************************************************************************
 * FLEXIO_PARAM - Parameter Register
 ******************************************************************************/

/*!
 * @brief FLEXIO_PARAM - Parameter Register (RO)
 *
 * Reset value: 0x10200808U
 *
 * .
 */
/*!
 * @name Constants and macros for entire FLEXIO_PARAM register
 */
/*@{*/
#define FLEXIO_RD_PARAM(base)    (FLEXIO_PARAM_REG(base))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_PARAM bitfields
 */

/*!
 * @name Register FLEXIO_PARAM, field SHIFTER[7:0] (RO)
 *
 * Number of Shifters implemented.
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_PARAM_SHIFTER field. */
#define FLEXIO_RD_PARAM_SHIFTER(base) ((FLEXIO_PARAM_REG(base) & FLEXIO_PARAM_SHIFTER_MASK) >> FLEXIO_PARAM_SHIFTER_SHIFT)
#define FLEXIO_BRD_PARAM_SHIFTER(base) (BME_UBFX32(&FLEXIO_PARAM_REG(base), FLEXIO_PARAM_SHIFTER_SHIFT, FLEXIO_PARAM_SHIFTER_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_PARAM, field TIMER[15:8] (RO)
 *
 * Number of Timers implemented.
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_PARAM_TIMER field. */
#define FLEXIO_RD_PARAM_TIMER(base) ((FLEXIO_PARAM_REG(base) & FLEXIO_PARAM_TIMER_MASK) >> FLEXIO_PARAM_TIMER_SHIFT)
#define FLEXIO_BRD_PARAM_TIMER(base) (BME_UBFX32(&FLEXIO_PARAM_REG(base), FLEXIO_PARAM_TIMER_SHIFT, FLEXIO_PARAM_TIMER_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_PARAM, field PIN[23:16] (RO)
 *
 * Number of Pins implemented.
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_PARAM_PIN field. */
#define FLEXIO_RD_PARAM_PIN(base) ((FLEXIO_PARAM_REG(base) & FLEXIO_PARAM_PIN_MASK) >> FLEXIO_PARAM_PIN_SHIFT)
#define FLEXIO_BRD_PARAM_PIN(base) (BME_UBFX32(&FLEXIO_PARAM_REG(base), FLEXIO_PARAM_PIN_SHIFT, FLEXIO_PARAM_PIN_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_PARAM, field TRIGGER[31:24] (RO)
 *
 * Number of external triggers implemented.
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_PARAM_TRIGGER field. */
#define FLEXIO_RD_PARAM_TRIGGER(base) ((FLEXIO_PARAM_REG(base) & FLEXIO_PARAM_TRIGGER_MASK) >> FLEXIO_PARAM_TRIGGER_SHIFT)
#define FLEXIO_BRD_PARAM_TRIGGER(base) (BME_UBFX32(&FLEXIO_PARAM_REG(base), FLEXIO_PARAM_TRIGGER_SHIFT, FLEXIO_PARAM_TRIGGER_WIDTH))
/*@}*/

/*******************************************************************************
 * FLEXIO_CTRL - FlexIO Control Register
 ******************************************************************************/

/*!
 * @brief FLEXIO_CTRL - FlexIO Control Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
/*!
 * @name Constants and macros for entire FLEXIO_CTRL register
 */
/*@{*/
#define FLEXIO_RD_CTRL(base)     (FLEXIO_CTRL_REG(base))
#define FLEXIO_WR_CTRL(base, value) (FLEXIO_CTRL_REG(base) = (value))
#define FLEXIO_RMW_CTRL(base, mask, value) (FLEXIO_WR_CTRL(base, (FLEXIO_RD_CTRL(base) & ~(mask)) | (value)))
#define FLEXIO_SET_CTRL(base, value) (BME_OR32(&FLEXIO_CTRL_REG(base), (uint32_t)(value)))
#define FLEXIO_CLR_CTRL(base, value) (BME_AND32(&FLEXIO_CTRL_REG(base), (uint32_t)(~(value))))
#define FLEXIO_TOG_CTRL(base, value) (BME_XOR32(&FLEXIO_CTRL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_CTRL bitfields
 */

/*!
 * @name Register FLEXIO_CTRL, field FLEXEN[0] (RW)
 *
 * Values:
 * - 0b0 - FlexIO module is disabled.
 * - 0b1 - FlexIO module is enabled.
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_CTRL_FLEXEN field. */
#define FLEXIO_RD_CTRL_FLEXEN(base) ((FLEXIO_CTRL_REG(base) & FLEXIO_CTRL_FLEXEN_MASK) >> FLEXIO_CTRL_FLEXEN_SHIFT)
#define FLEXIO_BRD_CTRL_FLEXEN(base) (BME_UBFX32(&FLEXIO_CTRL_REG(base), FLEXIO_CTRL_FLEXEN_SHIFT, FLEXIO_CTRL_FLEXEN_WIDTH))

/*! @brief Set the FLEXEN field to a new value. */
#define FLEXIO_WR_CTRL_FLEXEN(base, value) (FLEXIO_RMW_CTRL(base, FLEXIO_CTRL_FLEXEN_MASK, FLEXIO_CTRL_FLEXEN(value)))
#define FLEXIO_BWR_CTRL_FLEXEN(base, value) (BME_BFI32(&FLEXIO_CTRL_REG(base), ((uint32_t)(value) << FLEXIO_CTRL_FLEXEN_SHIFT), FLEXIO_CTRL_FLEXEN_SHIFT, FLEXIO_CTRL_FLEXEN_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_CTRL, field SWRST[1] (RW)
 *
 * The FlexIO Control Register is not affected by the software reset, all other
 * logic in the FlexIO is affected by the software reset and register accesses
 * are ignored until this bit is cleared. This register bit will remain set until
 * cleared by software, and the reset has cleared in the FlexIO clock domain.
 *
 * Values:
 * - 0b0 - Software reset is disabled
 * - 0b1 - Software reset is enabled, all FlexIO registers except the Control
 *     Register are reset.
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_CTRL_SWRST field. */
#define FLEXIO_RD_CTRL_SWRST(base) ((FLEXIO_CTRL_REG(base) & FLEXIO_CTRL_SWRST_MASK) >> FLEXIO_CTRL_SWRST_SHIFT)
#define FLEXIO_BRD_CTRL_SWRST(base) (BME_UBFX32(&FLEXIO_CTRL_REG(base), FLEXIO_CTRL_SWRST_SHIFT, FLEXIO_CTRL_SWRST_WIDTH))

/*! @brief Set the SWRST field to a new value. */
#define FLEXIO_WR_CTRL_SWRST(base, value) (FLEXIO_RMW_CTRL(base, FLEXIO_CTRL_SWRST_MASK, FLEXIO_CTRL_SWRST(value)))
#define FLEXIO_BWR_CTRL_SWRST(base, value) (BME_BFI32(&FLEXIO_CTRL_REG(base), ((uint32_t)(value) << FLEXIO_CTRL_SWRST_SHIFT), FLEXIO_CTRL_SWRST_SHIFT, FLEXIO_CTRL_SWRST_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_CTRL, field FASTACC[2] (RW)
 *
 * Enables fast register accesses to FlexIO registers, but requires the FlexIO
 * clock to be at least twice the frequency of the bus clock.
 *
 * Values:
 * - 0b0 - Configures for normal register accesses to FlexIO
 * - 0b1 - Configures for fast register accesses to FlexIO
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_CTRL_FASTACC field. */
#define FLEXIO_RD_CTRL_FASTACC(base) ((FLEXIO_CTRL_REG(base) & FLEXIO_CTRL_FASTACC_MASK) >> FLEXIO_CTRL_FASTACC_SHIFT)
#define FLEXIO_BRD_CTRL_FASTACC(base) (BME_UBFX32(&FLEXIO_CTRL_REG(base), FLEXIO_CTRL_FASTACC_SHIFT, FLEXIO_CTRL_FASTACC_WIDTH))

/*! @brief Set the FASTACC field to a new value. */
#define FLEXIO_WR_CTRL_FASTACC(base, value) (FLEXIO_RMW_CTRL(base, FLEXIO_CTRL_FASTACC_MASK, FLEXIO_CTRL_FASTACC(value)))
#define FLEXIO_BWR_CTRL_FASTACC(base, value) (BME_BFI32(&FLEXIO_CTRL_REG(base), ((uint32_t)(value) << FLEXIO_CTRL_FASTACC_SHIFT), FLEXIO_CTRL_FASTACC_SHIFT, FLEXIO_CTRL_FASTACC_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_CTRL, field DBGE[30] (RW)
 *
 * Enables FlexIO operation in Debug mode.
 *
 * Values:
 * - 0b0 - FlexIO is disabled in debug modes.
 * - 0b1 - FlexIO is enabled in debug modes
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_CTRL_DBGE field. */
#define FLEXIO_RD_CTRL_DBGE(base) ((FLEXIO_CTRL_REG(base) & FLEXIO_CTRL_DBGE_MASK) >> FLEXIO_CTRL_DBGE_SHIFT)
#define FLEXIO_BRD_CTRL_DBGE(base) (BME_UBFX32(&FLEXIO_CTRL_REG(base), FLEXIO_CTRL_DBGE_SHIFT, FLEXIO_CTRL_DBGE_WIDTH))

/*! @brief Set the DBGE field to a new value. */
#define FLEXIO_WR_CTRL_DBGE(base, value) (FLEXIO_RMW_CTRL(base, FLEXIO_CTRL_DBGE_MASK, FLEXIO_CTRL_DBGE(value)))
#define FLEXIO_BWR_CTRL_DBGE(base, value) (BME_BFI32(&FLEXIO_CTRL_REG(base), ((uint32_t)(value) << FLEXIO_CTRL_DBGE_SHIFT), FLEXIO_CTRL_DBGE_SHIFT, FLEXIO_CTRL_DBGE_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_CTRL, field DOZEN[31] (RW)
 *
 * Disables FlexIO operation in Doze modes. This field is ignored and the FlexIO
 * always disabled in low-leakage stop modes.
 *
 * Values:
 * - 0b0 - FlexIO enabled in Doze modes.
 * - 0b1 - FlexIO disabled in Doze modes.
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_CTRL_DOZEN field. */
#define FLEXIO_RD_CTRL_DOZEN(base) ((FLEXIO_CTRL_REG(base) & FLEXIO_CTRL_DOZEN_MASK) >> FLEXIO_CTRL_DOZEN_SHIFT)
#define FLEXIO_BRD_CTRL_DOZEN(base) (BME_UBFX32(&FLEXIO_CTRL_REG(base), FLEXIO_CTRL_DOZEN_SHIFT, FLEXIO_CTRL_DOZEN_WIDTH))

/*! @brief Set the DOZEN field to a new value. */
#define FLEXIO_WR_CTRL_DOZEN(base, value) (FLEXIO_RMW_CTRL(base, FLEXIO_CTRL_DOZEN_MASK, FLEXIO_CTRL_DOZEN(value)))
#define FLEXIO_BWR_CTRL_DOZEN(base, value) (BME_BFI32(&FLEXIO_CTRL_REG(base), ((uint32_t)(value) << FLEXIO_CTRL_DOZEN_SHIFT), FLEXIO_CTRL_DOZEN_SHIFT, FLEXIO_CTRL_DOZEN_WIDTH))
/*@}*/

/*******************************************************************************
 * FLEXIO_PIN - Pin State Register
 ******************************************************************************/

/*!
 * @brief FLEXIO_PIN - Pin State Register (RO)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire FLEXIO_PIN register
 */
/*@{*/
#define FLEXIO_RD_PIN(base)      (FLEXIO_PIN_REG(base))
/*@}*/

/*******************************************************************************
 * FLEXIO_SHIFTSTAT - Shifter Status Register
 ******************************************************************************/

/*!
 * @brief FLEXIO_SHIFTSTAT - Shifter Status Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
/*!
 * @name Constants and macros for entire FLEXIO_SHIFTSTAT register
 */
/*@{*/
#define FLEXIO_RD_SHIFTSTAT(base) (FLEXIO_SHIFTSTAT_REG(base))
#define FLEXIO_WR_SHIFTSTAT(base, value) (FLEXIO_SHIFTSTAT_REG(base) = (value))
#define FLEXIO_RMW_SHIFTSTAT(base, mask, value) (FLEXIO_WR_SHIFTSTAT(base, (FLEXIO_RD_SHIFTSTAT(base) & ~(mask)) | (value)))
#define FLEXIO_SET_SHIFTSTAT(base, value) (BME_OR32(&FLEXIO_SHIFTSTAT_REG(base), (uint32_t)(value)))
#define FLEXIO_CLR_SHIFTSTAT(base, value) (BME_AND32(&FLEXIO_SHIFTSTAT_REG(base), (uint32_t)(~(value))))
#define FLEXIO_TOG_SHIFTSTAT(base, value) (BME_XOR32(&FLEXIO_SHIFTSTAT_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_SHIFTSTAT bitfields
 */

/*!
 * @name Register FLEXIO_SHIFTSTAT, field SSF[7:0] (W1C)
 *
 * The shifter status flag is updated when one of the following events occurs:
 * For SMOD=Receive, the status flag is set when SHIFTBUF has been loaded with
 * data from Shifter (SHIFTBUF is full), and the status flag is cleared when
 * SHIFTBUF register is read. For SMOD=Transmit, the status flag is set when SHIFTBUF
 * data has been transferred to the Shifter (SHIFTBUF is empty) or when initially
 * configured for SMOD=Transmit, and the status flag is cleared when the SHIFTBUF
 * register is written. For SMOD=Match Store, the status flag is set when a match
 * has occured between SHIFTBUF and Shifter, and the status flag is cleared when
 * the SHIFTBUF register is read. For SMOD=Match Continuous, returns the current
 * match result between the SHIFTBUF and Shifter. For SMOD=State, the status
 * flag for a shifter will set when it is selected by the current state pointer. For
 * SMOD=Logic, returns the current value of the programmable logic block output.
 * The status flag can also be cleared by writing a logic one to the flag for
 * all modes except Match Continuous/State /Logic.
 *
 * Values:
 * - 0b00000000 - Status flag is clear
 * - 0b00000001 - Status flag is set
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_SHIFTSTAT_SSF field. */
#define FLEXIO_RD_SHIFTSTAT_SSF(base) ((FLEXIO_SHIFTSTAT_REG(base) & FLEXIO_SHIFTSTAT_SSF_MASK) >> FLEXIO_SHIFTSTAT_SSF_SHIFT)
#define FLEXIO_BRD_SHIFTSTAT_SSF(base) (BME_UBFX32(&FLEXIO_SHIFTSTAT_REG(base), FLEXIO_SHIFTSTAT_SSF_SHIFT, FLEXIO_SHIFTSTAT_SSF_WIDTH))

/*! @brief Set the SSF field to a new value. */
#define FLEXIO_WR_SHIFTSTAT_SSF(base, value) (FLEXIO_RMW_SHIFTSTAT(base, FLEXIO_SHIFTSTAT_SSF_MASK, FLEXIO_SHIFTSTAT_SSF(value)))
#define FLEXIO_BWR_SHIFTSTAT_SSF(base, value) (BME_BFI32(&FLEXIO_SHIFTSTAT_REG(base), ((uint32_t)(value) << FLEXIO_SHIFTSTAT_SSF_SHIFT), FLEXIO_SHIFTSTAT_SSF_SHIFT, FLEXIO_SHIFTSTAT_SSF_WIDTH))
/*@}*/

/*******************************************************************************
 * FLEXIO_SHIFTERR - Shifter Error Register
 ******************************************************************************/

/*!
 * @brief FLEXIO_SHIFTERR - Shifter Error Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
/*!
 * @name Constants and macros for entire FLEXIO_SHIFTERR register
 */
/*@{*/
#define FLEXIO_RD_SHIFTERR(base) (FLEXIO_SHIFTERR_REG(base))
#define FLEXIO_WR_SHIFTERR(base, value) (FLEXIO_SHIFTERR_REG(base) = (value))
#define FLEXIO_RMW_SHIFTERR(base, mask, value) (FLEXIO_WR_SHIFTERR(base, (FLEXIO_RD_SHIFTERR(base) & ~(mask)) | (value)))
#define FLEXIO_SET_SHIFTERR(base, value) (BME_OR32(&FLEXIO_SHIFTERR_REG(base), (uint32_t)(value)))
#define FLEXIO_CLR_SHIFTERR(base, value) (BME_AND32(&FLEXIO_SHIFTERR_REG(base), (uint32_t)(~(value))))
#define FLEXIO_TOG_SHIFTERR(base, value) (BME_XOR32(&FLEXIO_SHIFTERR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_SHIFTERR bitfields
 */

/*!
 * @name Register FLEXIO_SHIFTERR, field SEF[7:0] (W1C)
 *
 * The shifter error flag is set when one of the following events occurs: For
 * SMOD=Receive, indicates Shifter was ready to store new data into SHIFTBUF before
 * the previous data was read from SHIFTBUF (SHIFTBUF Overrun), or indicates
 * that the received start or stop bit does not match the expected value. For
 * SMOD=Transmit, indicates Shifter was ready to load new data from SHIFTBUF before new
 * data had been written into SHIFTBUF (SHIFTBUF Underrun). For SMOD=Match
 * Store, indicates a match event occured before the previous match data was read from
 * SHIFTBUF (SHIFTBUF Overrun). For SMOD=Match Continuous, the error flag is set
 * when a match has occured between SHIFTBUF and Shifter. For SMOD=Logic, the
 * error flag is set when the output of the programmable logic block has asserted.
 * Can be cleared by writing logic one to the flag. For SMOD=Match Continuous,
 * can also be cleared when the SHIFTBUF register is read.
 *
 * Values:
 * - 0b00000000 - Shifter Error Flag is clear
 * - 0b00000001 - Shifter Error Flag is set
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_SHIFTERR_SEF field. */
#define FLEXIO_RD_SHIFTERR_SEF(base) ((FLEXIO_SHIFTERR_REG(base) & FLEXIO_SHIFTERR_SEF_MASK) >> FLEXIO_SHIFTERR_SEF_SHIFT)
#define FLEXIO_BRD_SHIFTERR_SEF(base) (BME_UBFX32(&FLEXIO_SHIFTERR_REG(base), FLEXIO_SHIFTERR_SEF_SHIFT, FLEXIO_SHIFTERR_SEF_WIDTH))

/*! @brief Set the SEF field to a new value. */
#define FLEXIO_WR_SHIFTERR_SEF(base, value) (FLEXIO_RMW_SHIFTERR(base, FLEXIO_SHIFTERR_SEF_MASK, FLEXIO_SHIFTERR_SEF(value)))
#define FLEXIO_BWR_SHIFTERR_SEF(base, value) (BME_BFI32(&FLEXIO_SHIFTERR_REG(base), ((uint32_t)(value) << FLEXIO_SHIFTERR_SEF_SHIFT), FLEXIO_SHIFTERR_SEF_SHIFT, FLEXIO_SHIFTERR_SEF_WIDTH))
/*@}*/

/*******************************************************************************
 * FLEXIO_TIMSTAT - Timer Status Register
 ******************************************************************************/

/*!
 * @brief FLEXIO_TIMSTAT - Timer Status Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
/*!
 * @name Constants and macros for entire FLEXIO_TIMSTAT register
 */
/*@{*/
#define FLEXIO_RD_TIMSTAT(base)  (FLEXIO_TIMSTAT_REG(base))
#define FLEXIO_WR_TIMSTAT(base, value) (FLEXIO_TIMSTAT_REG(base) = (value))
#define FLEXIO_RMW_TIMSTAT(base, mask, value) (FLEXIO_WR_TIMSTAT(base, (FLEXIO_RD_TIMSTAT(base) & ~(mask)) | (value)))
#define FLEXIO_SET_TIMSTAT(base, value) (BME_OR32(&FLEXIO_TIMSTAT_REG(base), (uint32_t)(value)))
#define FLEXIO_CLR_TIMSTAT(base, value) (BME_AND32(&FLEXIO_TIMSTAT_REG(base), (uint32_t)(~(value))))
#define FLEXIO_TOG_TIMSTAT(base, value) (BME_XOR32(&FLEXIO_TIMSTAT_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_TIMSTAT bitfields
 */

/*!
 * @name Register FLEXIO_TIMSTAT, field TSF[7:0] (W1C)
 *
 * The timer status flag sets depending on the timer mode, and can be cleared by
 * writing logic one to the flag. In 8-bit counter mode, the timer status flag
 * is set when the upper 8-bit counter equals zero and decrements, this also
 * causes the counter to reload with the value in the compare register. In 8-bit PWM
 * mode, the timer status flag is set when the upper 8-bit counter equals zero and
 * decrements, this also causes the counter to reload with the value in the
 * compare register.. In 16-bit counter mode, the timer status flag is set when the
 * 16-bit counter equals zero and decrements, this also causes the counter to
 * reload with the value in the compare register..
 *
 * Values:
 * - 0b00000000 - Timer Status Flag is clear
 * - 0b00000001 - Timer Status Flag is set
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_TIMSTAT_TSF field. */
#define FLEXIO_RD_TIMSTAT_TSF(base) ((FLEXIO_TIMSTAT_REG(base) & FLEXIO_TIMSTAT_TSF_MASK) >> FLEXIO_TIMSTAT_TSF_SHIFT)
#define FLEXIO_BRD_TIMSTAT_TSF(base) (BME_UBFX32(&FLEXIO_TIMSTAT_REG(base), FLEXIO_TIMSTAT_TSF_SHIFT, FLEXIO_TIMSTAT_TSF_WIDTH))

/*! @brief Set the TSF field to a new value. */
#define FLEXIO_WR_TIMSTAT_TSF(base, value) (FLEXIO_RMW_TIMSTAT(base, FLEXIO_TIMSTAT_TSF_MASK, FLEXIO_TIMSTAT_TSF(value)))
#define FLEXIO_BWR_TIMSTAT_TSF(base, value) (BME_BFI32(&FLEXIO_TIMSTAT_REG(base), ((uint32_t)(value) << FLEXIO_TIMSTAT_TSF_SHIFT), FLEXIO_TIMSTAT_TSF_SHIFT, FLEXIO_TIMSTAT_TSF_WIDTH))
/*@}*/

/*******************************************************************************
 * FLEXIO_SHIFTSIEN - Shifter Status Interrupt Enable
 ******************************************************************************/

/*!
 * @brief FLEXIO_SHIFTSIEN - Shifter Status Interrupt Enable (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
/*!
 * @name Constants and macros for entire FLEXIO_SHIFTSIEN register
 */
/*@{*/
#define FLEXIO_RD_SHIFTSIEN(base) (FLEXIO_SHIFTSIEN_REG(base))
#define FLEXIO_WR_SHIFTSIEN(base, value) (FLEXIO_SHIFTSIEN_REG(base) = (value))
#define FLEXIO_RMW_SHIFTSIEN(base, mask, value) (FLEXIO_WR_SHIFTSIEN(base, (FLEXIO_RD_SHIFTSIEN(base) & ~(mask)) | (value)))
#define FLEXIO_SET_SHIFTSIEN(base, value) (BME_OR32(&FLEXIO_SHIFTSIEN_REG(base), (uint32_t)(value)))
#define FLEXIO_CLR_SHIFTSIEN(base, value) (BME_AND32(&FLEXIO_SHIFTSIEN_REG(base), (uint32_t)(~(value))))
#define FLEXIO_TOG_SHIFTSIEN(base, value) (BME_XOR32(&FLEXIO_SHIFTSIEN_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_SHIFTSIEN bitfields
 */

/*!
 * @name Register FLEXIO_SHIFTSIEN, field SSIE[7:0] (RW)
 *
 * Enables interrupt generation when corresponding SSF is set.
 *
 * Values:
 * - 0b00000000 - Shifter Status Flag interrupt disabled
 * - 0b00000001 - Shifter Status Flag interrupt enabled
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_SHIFTSIEN_SSIE field. */
#define FLEXIO_RD_SHIFTSIEN_SSIE(base) ((FLEXIO_SHIFTSIEN_REG(base) & FLEXIO_SHIFTSIEN_SSIE_MASK) >> FLEXIO_SHIFTSIEN_SSIE_SHIFT)
#define FLEXIO_BRD_SHIFTSIEN_SSIE(base) (BME_UBFX32(&FLEXIO_SHIFTSIEN_REG(base), FLEXIO_SHIFTSIEN_SSIE_SHIFT, FLEXIO_SHIFTSIEN_SSIE_WIDTH))

/*! @brief Set the SSIE field to a new value. */
#define FLEXIO_WR_SHIFTSIEN_SSIE(base, value) (FLEXIO_RMW_SHIFTSIEN(base, FLEXIO_SHIFTSIEN_SSIE_MASK, FLEXIO_SHIFTSIEN_SSIE(value)))
#define FLEXIO_BWR_SHIFTSIEN_SSIE(base, value) (BME_BFI32(&FLEXIO_SHIFTSIEN_REG(base), ((uint32_t)(value) << FLEXIO_SHIFTSIEN_SSIE_SHIFT), FLEXIO_SHIFTSIEN_SSIE_SHIFT, FLEXIO_SHIFTSIEN_SSIE_WIDTH))
/*@}*/

/*******************************************************************************
 * FLEXIO_SHIFTEIEN - Shifter Error Interrupt Enable
 ******************************************************************************/

/*!
 * @brief FLEXIO_SHIFTEIEN - Shifter Error Interrupt Enable (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
/*!
 * @name Constants and macros for entire FLEXIO_SHIFTEIEN register
 */
/*@{*/
#define FLEXIO_RD_SHIFTEIEN(base) (FLEXIO_SHIFTEIEN_REG(base))
#define FLEXIO_WR_SHIFTEIEN(base, value) (FLEXIO_SHIFTEIEN_REG(base) = (value))
#define FLEXIO_RMW_SHIFTEIEN(base, mask, value) (FLEXIO_WR_SHIFTEIEN(base, (FLEXIO_RD_SHIFTEIEN(base) & ~(mask)) | (value)))
#define FLEXIO_SET_SHIFTEIEN(base, value) (BME_OR32(&FLEXIO_SHIFTEIEN_REG(base), (uint32_t)(value)))
#define FLEXIO_CLR_SHIFTEIEN(base, value) (BME_AND32(&FLEXIO_SHIFTEIEN_REG(base), (uint32_t)(~(value))))
#define FLEXIO_TOG_SHIFTEIEN(base, value) (BME_XOR32(&FLEXIO_SHIFTEIEN_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_SHIFTEIEN bitfields
 */

/*!
 * @name Register FLEXIO_SHIFTEIEN, field SEIE[7:0] (RW)
 *
 * Enables interrupt generation when corresponding SEF is set.
 *
 * Values:
 * - 0b00000000 - Shifter Error Flag interrupt disabled
 * - 0b00000001 - Shifter Error Flag interrupt enabled
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_SHIFTEIEN_SEIE field. */
#define FLEXIO_RD_SHIFTEIEN_SEIE(base) ((FLEXIO_SHIFTEIEN_REG(base) & FLEXIO_SHIFTEIEN_SEIE_MASK) >> FLEXIO_SHIFTEIEN_SEIE_SHIFT)
#define FLEXIO_BRD_SHIFTEIEN_SEIE(base) (BME_UBFX32(&FLEXIO_SHIFTEIEN_REG(base), FLEXIO_SHIFTEIEN_SEIE_SHIFT, FLEXIO_SHIFTEIEN_SEIE_WIDTH))

/*! @brief Set the SEIE field to a new value. */
#define FLEXIO_WR_SHIFTEIEN_SEIE(base, value) (FLEXIO_RMW_SHIFTEIEN(base, FLEXIO_SHIFTEIEN_SEIE_MASK, FLEXIO_SHIFTEIEN_SEIE(value)))
#define FLEXIO_BWR_SHIFTEIEN_SEIE(base, value) (BME_BFI32(&FLEXIO_SHIFTEIEN_REG(base), ((uint32_t)(value) << FLEXIO_SHIFTEIEN_SEIE_SHIFT), FLEXIO_SHIFTEIEN_SEIE_SHIFT, FLEXIO_SHIFTEIEN_SEIE_WIDTH))
/*@}*/

/*******************************************************************************
 * FLEXIO_TIMIEN - Timer Interrupt Enable Register
 ******************************************************************************/

/*!
 * @brief FLEXIO_TIMIEN - Timer Interrupt Enable Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
/*!
 * @name Constants and macros for entire FLEXIO_TIMIEN register
 */
/*@{*/
#define FLEXIO_RD_TIMIEN(base)   (FLEXIO_TIMIEN_REG(base))
#define FLEXIO_WR_TIMIEN(base, value) (FLEXIO_TIMIEN_REG(base) = (value))
#define FLEXIO_RMW_TIMIEN(base, mask, value) (FLEXIO_WR_TIMIEN(base, (FLEXIO_RD_TIMIEN(base) & ~(mask)) | (value)))
#define FLEXIO_SET_TIMIEN(base, value) (BME_OR32(&FLEXIO_TIMIEN_REG(base), (uint32_t)(value)))
#define FLEXIO_CLR_TIMIEN(base, value) (BME_AND32(&FLEXIO_TIMIEN_REG(base), (uint32_t)(~(value))))
#define FLEXIO_TOG_TIMIEN(base, value) (BME_XOR32(&FLEXIO_TIMIEN_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_TIMIEN bitfields
 */

/*!
 * @name Register FLEXIO_TIMIEN, field TEIE[7:0] (RW)
 *
 * Enables interrupt generation when corresponding TSF is set.
 *
 * Values:
 * - 0b00000000 - Timer Status Flag interrupt is disabled
 * - 0b00000001 - Timer Status Flag interrupt is enabled
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_TIMIEN_TEIE field. */
#define FLEXIO_RD_TIMIEN_TEIE(base) ((FLEXIO_TIMIEN_REG(base) & FLEXIO_TIMIEN_TEIE_MASK) >> FLEXIO_TIMIEN_TEIE_SHIFT)
#define FLEXIO_BRD_TIMIEN_TEIE(base) (BME_UBFX32(&FLEXIO_TIMIEN_REG(base), FLEXIO_TIMIEN_TEIE_SHIFT, FLEXIO_TIMIEN_TEIE_WIDTH))

/*! @brief Set the TEIE field to a new value. */
#define FLEXIO_WR_TIMIEN_TEIE(base, value) (FLEXIO_RMW_TIMIEN(base, FLEXIO_TIMIEN_TEIE_MASK, FLEXIO_TIMIEN_TEIE(value)))
#define FLEXIO_BWR_TIMIEN_TEIE(base, value) (BME_BFI32(&FLEXIO_TIMIEN_REG(base), ((uint32_t)(value) << FLEXIO_TIMIEN_TEIE_SHIFT), FLEXIO_TIMIEN_TEIE_SHIFT, FLEXIO_TIMIEN_TEIE_WIDTH))
/*@}*/

/*******************************************************************************
 * FLEXIO_SHIFTSDEN - Shifter Status DMA Enable
 ******************************************************************************/

/*!
 * @brief FLEXIO_SHIFTSDEN - Shifter Status DMA Enable (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
/*!
 * @name Constants and macros for entire FLEXIO_SHIFTSDEN register
 */
/*@{*/
#define FLEXIO_RD_SHIFTSDEN(base) (FLEXIO_SHIFTSDEN_REG(base))
#define FLEXIO_WR_SHIFTSDEN(base, value) (FLEXIO_SHIFTSDEN_REG(base) = (value))
#define FLEXIO_RMW_SHIFTSDEN(base, mask, value) (FLEXIO_WR_SHIFTSDEN(base, (FLEXIO_RD_SHIFTSDEN(base) & ~(mask)) | (value)))
#define FLEXIO_SET_SHIFTSDEN(base, value) (BME_OR32(&FLEXIO_SHIFTSDEN_REG(base), (uint32_t)(value)))
#define FLEXIO_CLR_SHIFTSDEN(base, value) (BME_AND32(&FLEXIO_SHIFTSDEN_REG(base), (uint32_t)(~(value))))
#define FLEXIO_TOG_SHIFTSDEN(base, value) (BME_XOR32(&FLEXIO_SHIFTSDEN_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_SHIFTSDEN bitfields
 */

/*!
 * @name Register FLEXIO_SHIFTSDEN, field SSDE[7:0] (RW)
 *
 * Enables DMA request generation when corresponding SSF is set.
 *
 * Values:
 * - 0b00000000 - Shifter Status Flag DMA request is disabled
 * - 0b00000001 - Shifter Status Flag DMA request is enabled
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_SHIFTSDEN_SSDE field. */
#define FLEXIO_RD_SHIFTSDEN_SSDE(base) ((FLEXIO_SHIFTSDEN_REG(base) & FLEXIO_SHIFTSDEN_SSDE_MASK) >> FLEXIO_SHIFTSDEN_SSDE_SHIFT)
#define FLEXIO_BRD_SHIFTSDEN_SSDE(base) (BME_UBFX32(&FLEXIO_SHIFTSDEN_REG(base), FLEXIO_SHIFTSDEN_SSDE_SHIFT, FLEXIO_SHIFTSDEN_SSDE_WIDTH))

/*! @brief Set the SSDE field to a new value. */
#define FLEXIO_WR_SHIFTSDEN_SSDE(base, value) (FLEXIO_RMW_SHIFTSDEN(base, FLEXIO_SHIFTSDEN_SSDE_MASK, FLEXIO_SHIFTSDEN_SSDE(value)))
#define FLEXIO_BWR_SHIFTSDEN_SSDE(base, value) (BME_BFI32(&FLEXIO_SHIFTSDEN_REG(base), ((uint32_t)(value) << FLEXIO_SHIFTSDEN_SSDE_SHIFT), FLEXIO_SHIFTSDEN_SSDE_SHIFT, FLEXIO_SHIFTSDEN_SSDE_WIDTH))
/*@}*/

/*******************************************************************************
 * FLEXIO_SHIFTSTATE - Shifter State Register
 ******************************************************************************/

/*!
 * @brief FLEXIO_SHIFTSTATE - Shifter State Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
/*!
 * @name Constants and macros for entire FLEXIO_SHIFTSTATE register
 */
/*@{*/
#define FLEXIO_RD_SHIFTSTATE(base) (FLEXIO_SHIFTSTATE_REG(base))
#define FLEXIO_WR_SHIFTSTATE(base, value) (FLEXIO_SHIFTSTATE_REG(base) = (value))
#define FLEXIO_RMW_SHIFTSTATE(base, mask, value) (FLEXIO_WR_SHIFTSTATE(base, (FLEXIO_RD_SHIFTSTATE(base) & ~(mask)) | (value)))
#define FLEXIO_SET_SHIFTSTATE(base, value) (BME_OR32(&FLEXIO_SHIFTSTATE_REG(base), (uint32_t)(value)))
#define FLEXIO_CLR_SHIFTSTATE(base, value) (BME_AND32(&FLEXIO_SHIFTSTATE_REG(base), (uint32_t)(~(value))))
#define FLEXIO_TOG_SHIFTSTATE(base, value) (BME_XOR32(&FLEXIO_SHIFTSTATE_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_SHIFTSTATE bitfields
 */

/*!
 * @name Register FLEXIO_SHIFTSTATE, field STATE[2:0] (RW)
 *
 * The current state field maintains a pointer to keep track of the current
 * Shifter (configured for State mode) enabled to drive outputs and compute the next
 * state. See 'State Mode' section for more detail.
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_SHIFTSTATE_STATE field. */
#define FLEXIO_RD_SHIFTSTATE_STATE(base) ((FLEXIO_SHIFTSTATE_REG(base) & FLEXIO_SHIFTSTATE_STATE_MASK) >> FLEXIO_SHIFTSTATE_STATE_SHIFT)
#define FLEXIO_BRD_SHIFTSTATE_STATE(base) (BME_UBFX32(&FLEXIO_SHIFTSTATE_REG(base), FLEXIO_SHIFTSTATE_STATE_SHIFT, FLEXIO_SHIFTSTATE_STATE_WIDTH))

/*! @brief Set the STATE field to a new value. */
#define FLEXIO_WR_SHIFTSTATE_STATE(base, value) (FLEXIO_RMW_SHIFTSTATE(base, FLEXIO_SHIFTSTATE_STATE_MASK, FLEXIO_SHIFTSTATE_STATE(value)))
#define FLEXIO_BWR_SHIFTSTATE_STATE(base, value) (BME_BFI32(&FLEXIO_SHIFTSTATE_REG(base), ((uint32_t)(value) << FLEXIO_SHIFTSTATE_STATE_SHIFT), FLEXIO_SHIFTSTATE_STATE_SHIFT, FLEXIO_SHIFTSTATE_STATE_WIDTH))
/*@}*/

/*******************************************************************************
 * FLEXIO_SHIFTCTL - Shifter Control N Register
 ******************************************************************************/

/*!
 * @brief FLEXIO_SHIFTCTL - Shifter Control N Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
/*!
 * @name Constants and macros for entire FLEXIO_SHIFTCTL register
 */
/*@{*/
#define FLEXIO_RD_SHIFTCTL(base, index) (FLEXIO_SHIFTCTL_REG(base, index))
#define FLEXIO_WR_SHIFTCTL(base, index, value) (FLEXIO_SHIFTCTL_REG(base, index) = (value))
#define FLEXIO_RMW_SHIFTCTL(base, index, mask, value) (FLEXIO_WR_SHIFTCTL(base, index, (FLEXIO_RD_SHIFTCTL(base, index) & ~(mask)) | (value)))
#define FLEXIO_SET_SHIFTCTL(base, index, value) (BME_OR32(&FLEXIO_SHIFTCTL_REG(base, index), (uint32_t)(value)))
#define FLEXIO_CLR_SHIFTCTL(base, index, value) (BME_AND32(&FLEXIO_SHIFTCTL_REG(base, index), (uint32_t)(~(value))))
#define FLEXIO_TOG_SHIFTCTL(base, index, value) (BME_XOR32(&FLEXIO_SHIFTCTL_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_SHIFTCTL bitfields
 */

/*!
 * @name Register FLEXIO_SHIFTCTL, field SMOD[2:0] (RW)
 *
 * Configures the mode of the Shifter.
 *
 * Values:
 * - 0b000 - Disabled.
 * - 0b001 - Receive mode. Captures the current Shifter content into the
 *     SHIFTBUF on expiration of the Timer.
 * - 0b010 - Transmit mode. Load SHIFTBUF contents into the Shifter on
 *     expiration of the Timer.
 * - 0b011 - Reserved.
 * - 0b100 - Match Store mode. Shifter data is compared to SHIFTBUF content on
 *     expiration of the Timer.
 * - 0b101 - Match Continuous mode. Shifter data is continuously compared to
 *     SHIFTBUF contents.
 * - 0b110 - State mode. SHIFTBUF contents are used for storing programmable
 *     state attributes.
 * - 0b111 - Logic mode. SHIFTBUF contents are used for implementing
 *     programmable logic look up table.
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_SHIFTCTL_SMOD field. */
#define FLEXIO_RD_SHIFTCTL_SMOD(base, index) ((FLEXIO_SHIFTCTL_REG(base, index) & FLEXIO_SHIFTCTL_SMOD_MASK) >> FLEXIO_SHIFTCTL_SMOD_SHIFT)
#define FLEXIO_BRD_SHIFTCTL_SMOD(base, index) (BME_UBFX32(&FLEXIO_SHIFTCTL_REG(base, index), FLEXIO_SHIFTCTL_SMOD_SHIFT, FLEXIO_SHIFTCTL_SMOD_WIDTH))

/*! @brief Set the SMOD field to a new value. */
#define FLEXIO_WR_SHIFTCTL_SMOD(base, index, value) (FLEXIO_RMW_SHIFTCTL(base, index, FLEXIO_SHIFTCTL_SMOD_MASK, FLEXIO_SHIFTCTL_SMOD(value)))
#define FLEXIO_BWR_SHIFTCTL_SMOD(base, index, value) (BME_BFI32(&FLEXIO_SHIFTCTL_REG(base, index), ((uint32_t)(value) << FLEXIO_SHIFTCTL_SMOD_SHIFT), FLEXIO_SHIFTCTL_SMOD_SHIFT, FLEXIO_SHIFTCTL_SMOD_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_SHIFTCTL, field PINPOL[7] (RW)
 *
 * Values:
 * - 0b0 - Pin is active high
 * - 0b1 - Pin is active low
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_SHIFTCTL_PINPOL field. */
#define FLEXIO_RD_SHIFTCTL_PINPOL(base, index) ((FLEXIO_SHIFTCTL_REG(base, index) & FLEXIO_SHIFTCTL_PINPOL_MASK) >> FLEXIO_SHIFTCTL_PINPOL_SHIFT)
#define FLEXIO_BRD_SHIFTCTL_PINPOL(base, index) (BME_UBFX32(&FLEXIO_SHIFTCTL_REG(base, index), FLEXIO_SHIFTCTL_PINPOL_SHIFT, FLEXIO_SHIFTCTL_PINPOL_WIDTH))

/*! @brief Set the PINPOL field to a new value. */
#define FLEXIO_WR_SHIFTCTL_PINPOL(base, index, value) (FLEXIO_RMW_SHIFTCTL(base, index, FLEXIO_SHIFTCTL_PINPOL_MASK, FLEXIO_SHIFTCTL_PINPOL(value)))
#define FLEXIO_BWR_SHIFTCTL_PINPOL(base, index, value) (BME_BFI32(&FLEXIO_SHIFTCTL_REG(base, index), ((uint32_t)(value) << FLEXIO_SHIFTCTL_PINPOL_SHIFT), FLEXIO_SHIFTCTL_PINPOL_SHIFT, FLEXIO_SHIFTCTL_PINPOL_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_SHIFTCTL, field PINSEL[12:8] (RW)
 *
 * Selects which pin is used by the Shifter input or output.
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_SHIFTCTL_PINSEL field. */
#define FLEXIO_RD_SHIFTCTL_PINSEL(base, index) ((FLEXIO_SHIFTCTL_REG(base, index) & FLEXIO_SHIFTCTL_PINSEL_MASK) >> FLEXIO_SHIFTCTL_PINSEL_SHIFT)
#define FLEXIO_BRD_SHIFTCTL_PINSEL(base, index) (BME_UBFX32(&FLEXIO_SHIFTCTL_REG(base, index), FLEXIO_SHIFTCTL_PINSEL_SHIFT, FLEXIO_SHIFTCTL_PINSEL_WIDTH))

/*! @brief Set the PINSEL field to a new value. */
#define FLEXIO_WR_SHIFTCTL_PINSEL(base, index, value) (FLEXIO_RMW_SHIFTCTL(base, index, FLEXIO_SHIFTCTL_PINSEL_MASK, FLEXIO_SHIFTCTL_PINSEL(value)))
#define FLEXIO_BWR_SHIFTCTL_PINSEL(base, index, value) (BME_BFI32(&FLEXIO_SHIFTCTL_REG(base, index), ((uint32_t)(value) << FLEXIO_SHIFTCTL_PINSEL_SHIFT), FLEXIO_SHIFTCTL_PINSEL_SHIFT, FLEXIO_SHIFTCTL_PINSEL_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_SHIFTCTL, field PINCFG[17:16] (RW)
 *
 * Values:
 * - 0b00 - Shifter pin output disabled
 * - 0b01 - Shifter pin open drain or bidirectional output enable
 * - 0b10 - Shifter pin bidirectional output data
 * - 0b11 - Shifter pin output
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_SHIFTCTL_PINCFG field. */
#define FLEXIO_RD_SHIFTCTL_PINCFG(base, index) ((FLEXIO_SHIFTCTL_REG(base, index) & FLEXIO_SHIFTCTL_PINCFG_MASK) >> FLEXIO_SHIFTCTL_PINCFG_SHIFT)
#define FLEXIO_BRD_SHIFTCTL_PINCFG(base, index) (BME_UBFX32(&FLEXIO_SHIFTCTL_REG(base, index), FLEXIO_SHIFTCTL_PINCFG_SHIFT, FLEXIO_SHIFTCTL_PINCFG_WIDTH))

/*! @brief Set the PINCFG field to a new value. */
#define FLEXIO_WR_SHIFTCTL_PINCFG(base, index, value) (FLEXIO_RMW_SHIFTCTL(base, index, FLEXIO_SHIFTCTL_PINCFG_MASK, FLEXIO_SHIFTCTL_PINCFG(value)))
#define FLEXIO_BWR_SHIFTCTL_PINCFG(base, index, value) (BME_BFI32(&FLEXIO_SHIFTCTL_REG(base, index), ((uint32_t)(value) << FLEXIO_SHIFTCTL_PINCFG_SHIFT), FLEXIO_SHIFTCTL_PINCFG_SHIFT, FLEXIO_SHIFTCTL_PINCFG_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_SHIFTCTL, field TIMPOL[23] (RW)
 *
 * Values:
 * - 0b0 - Shift on posedge of Shift clock
 * - 0b1 - Shift on negedge of Shift clock
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_SHIFTCTL_TIMPOL field. */
#define FLEXIO_RD_SHIFTCTL_TIMPOL(base, index) ((FLEXIO_SHIFTCTL_REG(base, index) & FLEXIO_SHIFTCTL_TIMPOL_MASK) >> FLEXIO_SHIFTCTL_TIMPOL_SHIFT)
#define FLEXIO_BRD_SHIFTCTL_TIMPOL(base, index) (BME_UBFX32(&FLEXIO_SHIFTCTL_REG(base, index), FLEXIO_SHIFTCTL_TIMPOL_SHIFT, FLEXIO_SHIFTCTL_TIMPOL_WIDTH))

/*! @brief Set the TIMPOL field to a new value. */
#define FLEXIO_WR_SHIFTCTL_TIMPOL(base, index, value) (FLEXIO_RMW_SHIFTCTL(base, index, FLEXIO_SHIFTCTL_TIMPOL_MASK, FLEXIO_SHIFTCTL_TIMPOL(value)))
#define FLEXIO_BWR_SHIFTCTL_TIMPOL(base, index, value) (BME_BFI32(&FLEXIO_SHIFTCTL_REG(base, index), ((uint32_t)(value) << FLEXIO_SHIFTCTL_TIMPOL_SHIFT), FLEXIO_SHIFTCTL_TIMPOL_SHIFT, FLEXIO_SHIFTCTL_TIMPOL_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_SHIFTCTL, field TIMSEL[26:24] (RW)
 *
 * Selects which Timer is used for controlling the logic/shift register and
 * generating the Shift clock.
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_SHIFTCTL_TIMSEL field. */
#define FLEXIO_RD_SHIFTCTL_TIMSEL(base, index) ((FLEXIO_SHIFTCTL_REG(base, index) & FLEXIO_SHIFTCTL_TIMSEL_MASK) >> FLEXIO_SHIFTCTL_TIMSEL_SHIFT)
#define FLEXIO_BRD_SHIFTCTL_TIMSEL(base, index) (BME_UBFX32(&FLEXIO_SHIFTCTL_REG(base, index), FLEXIO_SHIFTCTL_TIMSEL_SHIFT, FLEXIO_SHIFTCTL_TIMSEL_WIDTH))

/*! @brief Set the TIMSEL field to a new value. */
#define FLEXIO_WR_SHIFTCTL_TIMSEL(base, index, value) (FLEXIO_RMW_SHIFTCTL(base, index, FLEXIO_SHIFTCTL_TIMSEL_MASK, FLEXIO_SHIFTCTL_TIMSEL(value)))
#define FLEXIO_BWR_SHIFTCTL_TIMSEL(base, index, value) (BME_BFI32(&FLEXIO_SHIFTCTL_REG(base, index), ((uint32_t)(value) << FLEXIO_SHIFTCTL_TIMSEL_SHIFT), FLEXIO_SHIFTCTL_TIMSEL_SHIFT, FLEXIO_SHIFTCTL_TIMSEL_WIDTH))
/*@}*/

/*******************************************************************************
 * FLEXIO_SHIFTCFG - Shifter Configuration N Register
 ******************************************************************************/

/*!
 * @brief FLEXIO_SHIFTCFG - Shifter Configuration N Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
/*!
 * @name Constants and macros for entire FLEXIO_SHIFTCFG register
 */
/*@{*/
#define FLEXIO_RD_SHIFTCFG(base, index) (FLEXIO_SHIFTCFG_REG(base, index))
#define FLEXIO_WR_SHIFTCFG(base, index, value) (FLEXIO_SHIFTCFG_REG(base, index) = (value))
#define FLEXIO_RMW_SHIFTCFG(base, index, mask, value) (FLEXIO_WR_SHIFTCFG(base, index, (FLEXIO_RD_SHIFTCFG(base, index) & ~(mask)) | (value)))
#define FLEXIO_SET_SHIFTCFG(base, index, value) (BME_OR32(&FLEXIO_SHIFTCFG_REG(base, index), (uint32_t)(value)))
#define FLEXIO_CLR_SHIFTCFG(base, index, value) (BME_AND32(&FLEXIO_SHIFTCFG_REG(base, index), (uint32_t)(~(value))))
#define FLEXIO_TOG_SHIFTCFG(base, index, value) (BME_XOR32(&FLEXIO_SHIFTCFG_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_SHIFTCFG bitfields
 */

/*!
 * @name Register FLEXIO_SHIFTCFG, field SSTART[1:0] (RW)
 *
 * For SMOD=Transmit, this field allows automatic start bit insertion if the
 * selected timer has also enabled a start bit. For SMOD=Receive or Match Store,
 * this field allows automatic start bit checking if the selected timer has also
 * enabled a start bit. For SMOD=State, this field is used to disable state outputs.
 * See 'State Mode' section for more detail. For SMOD=Logic, this field is used
 * to mask logic pin inputs. See 'Logic Mode' section for more detail.
 *
 * Values:
 * - 0b00 - Start bit disabled for transmitter/receiver/match store, transmitter
 *     loads data on enable
 * - 0b01 - Start bit disabled for transmitter/receiver/match store, transmitter
 *     loads data on first shift
 * - 0b10 - Transmitter outputs start bit value 0 before loading data on first
 *     shift, receiver/match store sets error flag if start bit is not 0
 * - 0b11 - Transmitter outputs start bit value 1 before loading data on first
 *     shift, receiver/match store sets error flag if start bit is not 1
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_SHIFTCFG_SSTART field. */
#define FLEXIO_RD_SHIFTCFG_SSTART(base, index) ((FLEXIO_SHIFTCFG_REG(base, index) & FLEXIO_SHIFTCFG_SSTART_MASK) >> FLEXIO_SHIFTCFG_SSTART_SHIFT)
#define FLEXIO_BRD_SHIFTCFG_SSTART(base, index) (BME_UBFX32(&FLEXIO_SHIFTCFG_REG(base, index), FLEXIO_SHIFTCFG_SSTART_SHIFT, FLEXIO_SHIFTCFG_SSTART_WIDTH))

/*! @brief Set the SSTART field to a new value. */
#define FLEXIO_WR_SHIFTCFG_SSTART(base, index, value) (FLEXIO_RMW_SHIFTCFG(base, index, FLEXIO_SHIFTCFG_SSTART_MASK, FLEXIO_SHIFTCFG_SSTART(value)))
#define FLEXIO_BWR_SHIFTCFG_SSTART(base, index, value) (BME_BFI32(&FLEXIO_SHIFTCFG_REG(base, index), ((uint32_t)(value) << FLEXIO_SHIFTCFG_SSTART_SHIFT), FLEXIO_SHIFTCFG_SSTART_SHIFT, FLEXIO_SHIFTCFG_SSTART_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_SHIFTCFG, field SSTOP[5:4] (RW)
 *
 * For SMOD=Transmit, this field allows automatic stop bit insertion if the
 * selected timer has also enabled a stop bit. For SMOD=Receive or Match Store, this
 * field allows automatic stop bit checking if the selected timer has also
 * enabled a stop bit. For SMOD=State, this field is used to disable state outputs. See
 * 'State Mode' section for more detail. For SMOD=Logic, this field is used to
 * mask logic pin inputs. See 'Logic Mode' section for more detail.
 *
 * Values:
 * - 0b00 - Stop bit disabled for transmitter/receiver/match store
 * - 0b01 - Reserved for transmitter/receiver/match store
 * - 0b10 - Transmitter outputs stop bit value 0 on store, receiver/match store
 *     sets error flag if stop bit is not 0
 * - 0b11 - Transmitter outputs stop bit value 1 on store, receiver/match store
 *     sets error flag if stop bit is not 1
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_SHIFTCFG_SSTOP field. */
#define FLEXIO_RD_SHIFTCFG_SSTOP(base, index) ((FLEXIO_SHIFTCFG_REG(base, index) & FLEXIO_SHIFTCFG_SSTOP_MASK) >> FLEXIO_SHIFTCFG_SSTOP_SHIFT)
#define FLEXIO_BRD_SHIFTCFG_SSTOP(base, index) (BME_UBFX32(&FLEXIO_SHIFTCFG_REG(base, index), FLEXIO_SHIFTCFG_SSTOP_SHIFT, FLEXIO_SHIFTCFG_SSTOP_WIDTH))

/*! @brief Set the SSTOP field to a new value. */
#define FLEXIO_WR_SHIFTCFG_SSTOP(base, index, value) (FLEXIO_RMW_SHIFTCFG(base, index, FLEXIO_SHIFTCFG_SSTOP_MASK, FLEXIO_SHIFTCFG_SSTOP(value)))
#define FLEXIO_BWR_SHIFTCFG_SSTOP(base, index, value) (BME_BFI32(&FLEXIO_SHIFTCFG_REG(base, index), ((uint32_t)(value) << FLEXIO_SHIFTCFG_SSTOP_SHIFT), FLEXIO_SHIFTCFG_SSTOP_SHIFT, FLEXIO_SHIFTCFG_SSTOP_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_SHIFTCFG, field INSRC[8] (RW)
 *
 * Selects the input source for the shifter.
 *
 * Values:
 * - 0b0 - Pin
 * - 0b1 - Shifter N+1 Output
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_SHIFTCFG_INSRC field. */
#define FLEXIO_RD_SHIFTCFG_INSRC(base, index) ((FLEXIO_SHIFTCFG_REG(base, index) & FLEXIO_SHIFTCFG_INSRC_MASK) >> FLEXIO_SHIFTCFG_INSRC_SHIFT)
#define FLEXIO_BRD_SHIFTCFG_INSRC(base, index) (BME_UBFX32(&FLEXIO_SHIFTCFG_REG(base, index), FLEXIO_SHIFTCFG_INSRC_SHIFT, FLEXIO_SHIFTCFG_INSRC_WIDTH))

/*! @brief Set the INSRC field to a new value. */
#define FLEXIO_WR_SHIFTCFG_INSRC(base, index, value) (FLEXIO_RMW_SHIFTCFG(base, index, FLEXIO_SHIFTCFG_INSRC_MASK, FLEXIO_SHIFTCFG_INSRC(value)))
#define FLEXIO_BWR_SHIFTCFG_INSRC(base, index, value) (BME_BFI32(&FLEXIO_SHIFTCFG_REG(base, index), ((uint32_t)(value) << FLEXIO_SHIFTCFG_INSRC_SHIFT), FLEXIO_SHIFTCFG_INSRC_SHIFT, FLEXIO_SHIFTCFG_INSRC_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_SHIFTCFG, field PWIDTH[20:16] (RW)
 *
 * For all Shifters, this register field configures the number of bits to be
 * shifted on each Shift clock as follows: 1-bit shift for PWIDTH=0 4-bit shift for
 * PWIDTH=1...3 8-bit shift for PWIDTH=4...7 16-bit shift for PWIDTH=8...15
 * 32-bit shift for PWIDTH=16...31 For Shifters which support parallel transmit
 * (SHIFTER0, SHIFTER4) or parallel receive (SHIFTER3, SHIFTER7), this register field,
 * together with PSEL, also selects the pins to be driven or sampled on each
 * Shift clock as follows: FXIO_D[PSEL+PWIDTH]:FXIO_D[PSEL] For SMOD=State, this
 * field is used to disable state outputs. See 'State Mode' section for more detail.
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_SHIFTCFG_PWIDTH field. */
#define FLEXIO_RD_SHIFTCFG_PWIDTH(base, index) ((FLEXIO_SHIFTCFG_REG(base, index) & FLEXIO_SHIFTCFG_PWIDTH_MASK) >> FLEXIO_SHIFTCFG_PWIDTH_SHIFT)
#define FLEXIO_BRD_SHIFTCFG_PWIDTH(base, index) (BME_UBFX32(&FLEXIO_SHIFTCFG_REG(base, index), FLEXIO_SHIFTCFG_PWIDTH_SHIFT, FLEXIO_SHIFTCFG_PWIDTH_WIDTH))

/*! @brief Set the PWIDTH field to a new value. */
#define FLEXIO_WR_SHIFTCFG_PWIDTH(base, index, value) (FLEXIO_RMW_SHIFTCFG(base, index, FLEXIO_SHIFTCFG_PWIDTH_MASK, FLEXIO_SHIFTCFG_PWIDTH(value)))
#define FLEXIO_BWR_SHIFTCFG_PWIDTH(base, index, value) (BME_BFI32(&FLEXIO_SHIFTCFG_REG(base, index), ((uint32_t)(value) << FLEXIO_SHIFTCFG_PWIDTH_SHIFT), FLEXIO_SHIFTCFG_PWIDTH_SHIFT, FLEXIO_SHIFTCFG_PWIDTH_WIDTH))
/*@}*/

/*******************************************************************************
 * FLEXIO_SHIFTBUF - Shifter Buffer N Register
 ******************************************************************************/

/*!
 * @brief FLEXIO_SHIFTBUF - Shifter Buffer N Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
/*!
 * @name Constants and macros for entire FLEXIO_SHIFTBUF register
 */
/*@{*/
#define FLEXIO_RD_SHIFTBUF(base, index) (FLEXIO_SHIFTBUF_REG(base, index))
#define FLEXIO_WR_SHIFTBUF(base, index, value) (FLEXIO_SHIFTBUF_REG(base, index) = (value))
#define FLEXIO_RMW_SHIFTBUF(base, index, mask, value) (FLEXIO_WR_SHIFTBUF(base, index, (FLEXIO_RD_SHIFTBUF(base, index) & ~(mask)) | (value)))
#define FLEXIO_SET_SHIFTBUF(base, index, value) (BME_OR32(&FLEXIO_SHIFTBUF_REG(base, index), (uint32_t)(value)))
#define FLEXIO_CLR_SHIFTBUF(base, index, value) (BME_AND32(&FLEXIO_SHIFTBUF_REG(base, index), (uint32_t)(~(value))))
#define FLEXIO_TOG_SHIFTBUF(base, index, value) (BME_XOR32(&FLEXIO_SHIFTBUF_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * FLEXIO_SHIFTBUFBIS - Shifter Buffer N Bit Swapped Register
 ******************************************************************************/

/*!
 * @brief FLEXIO_SHIFTBUFBIS - Shifter Buffer N Bit Swapped Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
/*!
 * @name Constants and macros for entire FLEXIO_SHIFTBUFBIS register
 */
/*@{*/
#define FLEXIO_RD_SHIFTBUFBIS(base, index) (FLEXIO_SHIFTBUFBIS_REG(base, index))
#define FLEXIO_WR_SHIFTBUFBIS(base, index, value) (FLEXIO_SHIFTBUFBIS_REG(base, index) = (value))
#define FLEXIO_RMW_SHIFTBUFBIS(base, index, mask, value) (FLEXIO_WR_SHIFTBUFBIS(base, index, (FLEXIO_RD_SHIFTBUFBIS(base, index) & ~(mask)) | (value)))
#define FLEXIO_SET_SHIFTBUFBIS(base, index, value) (BME_OR32(&FLEXIO_SHIFTBUFBIS_REG(base, index), (uint32_t)(value)))
#define FLEXIO_CLR_SHIFTBUFBIS(base, index, value) (BME_AND32(&FLEXIO_SHIFTBUFBIS_REG(base, index), (uint32_t)(~(value))))
#define FLEXIO_TOG_SHIFTBUFBIS(base, index, value) (BME_XOR32(&FLEXIO_SHIFTBUFBIS_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * FLEXIO_SHIFTBUFBYS - Shifter Buffer N Byte Swapped Register
 ******************************************************************************/

/*!
 * @brief FLEXIO_SHIFTBUFBYS - Shifter Buffer N Byte Swapped Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
/*!
 * @name Constants and macros for entire FLEXIO_SHIFTBUFBYS register
 */
/*@{*/
#define FLEXIO_RD_SHIFTBUFBYS(base, index) (FLEXIO_SHIFTBUFBYS_REG(base, index))
#define FLEXIO_WR_SHIFTBUFBYS(base, index, value) (FLEXIO_SHIFTBUFBYS_REG(base, index) = (value))
#define FLEXIO_RMW_SHIFTBUFBYS(base, index, mask, value) (FLEXIO_WR_SHIFTBUFBYS(base, index, (FLEXIO_RD_SHIFTBUFBYS(base, index) & ~(mask)) | (value)))
#define FLEXIO_SET_SHIFTBUFBYS(base, index, value) (BME_OR32(&FLEXIO_SHIFTBUFBYS_REG(base, index), (uint32_t)(value)))
#define FLEXIO_CLR_SHIFTBUFBYS(base, index, value) (BME_AND32(&FLEXIO_SHIFTBUFBYS_REG(base, index), (uint32_t)(~(value))))
#define FLEXIO_TOG_SHIFTBUFBYS(base, index, value) (BME_XOR32(&FLEXIO_SHIFTBUFBYS_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * FLEXIO_SHIFTBUFBBS - Shifter Buffer N Bit Byte Swapped Register
 ******************************************************************************/

/*!
 * @brief FLEXIO_SHIFTBUFBBS - Shifter Buffer N Bit Byte Swapped Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
/*!
 * @name Constants and macros for entire FLEXIO_SHIFTBUFBBS register
 */
/*@{*/
#define FLEXIO_RD_SHIFTBUFBBS(base, index) (FLEXIO_SHIFTBUFBBS_REG(base, index))
#define FLEXIO_WR_SHIFTBUFBBS(base, index, value) (FLEXIO_SHIFTBUFBBS_REG(base, index) = (value))
#define FLEXIO_RMW_SHIFTBUFBBS(base, index, mask, value) (FLEXIO_WR_SHIFTBUFBBS(base, index, (FLEXIO_RD_SHIFTBUFBBS(base, index) & ~(mask)) | (value)))
#define FLEXIO_SET_SHIFTBUFBBS(base, index, value) (BME_OR32(&FLEXIO_SHIFTBUFBBS_REG(base, index), (uint32_t)(value)))
#define FLEXIO_CLR_SHIFTBUFBBS(base, index, value) (BME_AND32(&FLEXIO_SHIFTBUFBBS_REG(base, index), (uint32_t)(~(value))))
#define FLEXIO_TOG_SHIFTBUFBBS(base, index, value) (BME_XOR32(&FLEXIO_SHIFTBUFBBS_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * FLEXIO_TIMCTL - Timer Control N Register
 ******************************************************************************/

/*!
 * @brief FLEXIO_TIMCTL - Timer Control N Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
/*!
 * @name Constants and macros for entire FLEXIO_TIMCTL register
 */
/*@{*/
#define FLEXIO_RD_TIMCTL(base, index) (FLEXIO_TIMCTL_REG(base, index))
#define FLEXIO_WR_TIMCTL(base, index, value) (FLEXIO_TIMCTL_REG(base, index) = (value))
#define FLEXIO_RMW_TIMCTL(base, index, mask, value) (FLEXIO_WR_TIMCTL(base, index, (FLEXIO_RD_TIMCTL(base, index) & ~(mask)) | (value)))
#define FLEXIO_SET_TIMCTL(base, index, value) (BME_OR32(&FLEXIO_TIMCTL_REG(base, index), (uint32_t)(value)))
#define FLEXIO_CLR_TIMCTL(base, index, value) (BME_AND32(&FLEXIO_TIMCTL_REG(base, index), (uint32_t)(~(value))))
#define FLEXIO_TOG_TIMCTL(base, index, value) (BME_XOR32(&FLEXIO_TIMCTL_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_TIMCTL bitfields
 */

/*!
 * @name Register FLEXIO_TIMCTL, field TIMOD[1:0] (RW)
 *
 * In 8-bit counter mode, the lower 8-bits of the counter and compare register
 * are used to configure the baud rate of the timer shift clock and the upper
 * 8-bits are used to configure the shifter bit count. In 8-bit PWM mode, the lower
 * 8-bits of the counter and compare register are used to configure the high
 * period of the timer shift clock and the upper 8-bits are used to configure the low
 * period of the timer shift clock. The shifter bit count is configured using
 * another timer or external signal. In 16-bit counter mode, the full 16-bits of the
 * counter and compare register are used to configure either the baud rate of
 * the shift clock or the shifter bit count.
 *
 * Values:
 * - 0b00 - Timer Disabled.
 * - 0b01 - Dual 8-bit counters baud/bit mode.
 * - 0b10 - Dual 8-bit counters PWM mode.
 * - 0b11 - Single 16-bit counter mode.
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_TIMCTL_TIMOD field. */
#define FLEXIO_RD_TIMCTL_TIMOD(base, index) ((FLEXIO_TIMCTL_REG(base, index) & FLEXIO_TIMCTL_TIMOD_MASK) >> FLEXIO_TIMCTL_TIMOD_SHIFT)
#define FLEXIO_BRD_TIMCTL_TIMOD(base, index) (BME_UBFX32(&FLEXIO_TIMCTL_REG(base, index), FLEXIO_TIMCTL_TIMOD_SHIFT, FLEXIO_TIMCTL_TIMOD_WIDTH))

/*! @brief Set the TIMOD field to a new value. */
#define FLEXIO_WR_TIMCTL_TIMOD(base, index, value) (FLEXIO_RMW_TIMCTL(base, index, FLEXIO_TIMCTL_TIMOD_MASK, FLEXIO_TIMCTL_TIMOD(value)))
#define FLEXIO_BWR_TIMCTL_TIMOD(base, index, value) (BME_BFI32(&FLEXIO_TIMCTL_REG(base, index), ((uint32_t)(value) << FLEXIO_TIMCTL_TIMOD_SHIFT), FLEXIO_TIMCTL_TIMOD_SHIFT, FLEXIO_TIMCTL_TIMOD_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_TIMCTL, field PINPOL[7] (RW)
 *
 * Values:
 * - 0b0 - Pin is active high
 * - 0b1 - Pin is active low
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_TIMCTL_PINPOL field. */
#define FLEXIO_RD_TIMCTL_PINPOL(base, index) ((FLEXIO_TIMCTL_REG(base, index) & FLEXIO_TIMCTL_PINPOL_MASK) >> FLEXIO_TIMCTL_PINPOL_SHIFT)
#define FLEXIO_BRD_TIMCTL_PINPOL(base, index) (BME_UBFX32(&FLEXIO_TIMCTL_REG(base, index), FLEXIO_TIMCTL_PINPOL_SHIFT, FLEXIO_TIMCTL_PINPOL_WIDTH))

/*! @brief Set the PINPOL field to a new value. */
#define FLEXIO_WR_TIMCTL_PINPOL(base, index, value) (FLEXIO_RMW_TIMCTL(base, index, FLEXIO_TIMCTL_PINPOL_MASK, FLEXIO_TIMCTL_PINPOL(value)))
#define FLEXIO_BWR_TIMCTL_PINPOL(base, index, value) (BME_BFI32(&FLEXIO_TIMCTL_REG(base, index), ((uint32_t)(value) << FLEXIO_TIMCTL_PINPOL_SHIFT), FLEXIO_TIMCTL_PINPOL_SHIFT, FLEXIO_TIMCTL_PINPOL_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_TIMCTL, field PINSEL[12:8] (RW)
 *
 * Selects which pin is used by the Timer input or output.
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_TIMCTL_PINSEL field. */
#define FLEXIO_RD_TIMCTL_PINSEL(base, index) ((FLEXIO_TIMCTL_REG(base, index) & FLEXIO_TIMCTL_PINSEL_MASK) >> FLEXIO_TIMCTL_PINSEL_SHIFT)
#define FLEXIO_BRD_TIMCTL_PINSEL(base, index) (BME_UBFX32(&FLEXIO_TIMCTL_REG(base, index), FLEXIO_TIMCTL_PINSEL_SHIFT, FLEXIO_TIMCTL_PINSEL_WIDTH))

/*! @brief Set the PINSEL field to a new value. */
#define FLEXIO_WR_TIMCTL_PINSEL(base, index, value) (FLEXIO_RMW_TIMCTL(base, index, FLEXIO_TIMCTL_PINSEL_MASK, FLEXIO_TIMCTL_PINSEL(value)))
#define FLEXIO_BWR_TIMCTL_PINSEL(base, index, value) (BME_BFI32(&FLEXIO_TIMCTL_REG(base, index), ((uint32_t)(value) << FLEXIO_TIMCTL_PINSEL_SHIFT), FLEXIO_TIMCTL_PINSEL_SHIFT, FLEXIO_TIMCTL_PINSEL_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_TIMCTL, field PINCFG[17:16] (RW)
 *
 * Values:
 * - 0b00 - Timer pin output disabled
 * - 0b01 - Timer pin open drain or bidirectional output enable
 * - 0b10 - Timer pin bidirectional output data
 * - 0b11 - Timer pin output
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_TIMCTL_PINCFG field. */
#define FLEXIO_RD_TIMCTL_PINCFG(base, index) ((FLEXIO_TIMCTL_REG(base, index) & FLEXIO_TIMCTL_PINCFG_MASK) >> FLEXIO_TIMCTL_PINCFG_SHIFT)
#define FLEXIO_BRD_TIMCTL_PINCFG(base, index) (BME_UBFX32(&FLEXIO_TIMCTL_REG(base, index), FLEXIO_TIMCTL_PINCFG_SHIFT, FLEXIO_TIMCTL_PINCFG_WIDTH))

/*! @brief Set the PINCFG field to a new value. */
#define FLEXIO_WR_TIMCTL_PINCFG(base, index, value) (FLEXIO_RMW_TIMCTL(base, index, FLEXIO_TIMCTL_PINCFG_MASK, FLEXIO_TIMCTL_PINCFG(value)))
#define FLEXIO_BWR_TIMCTL_PINCFG(base, index, value) (BME_BFI32(&FLEXIO_TIMCTL_REG(base, index), ((uint32_t)(value) << FLEXIO_TIMCTL_PINCFG_SHIFT), FLEXIO_TIMCTL_PINCFG_SHIFT, FLEXIO_TIMCTL_PINCFG_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_TIMCTL, field TRGSRC[22] (RW)
 *
 * Values:
 * - 0b0 - External trigger selected
 * - 0b1 - Internal trigger selected
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_TIMCTL_TRGSRC field. */
#define FLEXIO_RD_TIMCTL_TRGSRC(base, index) ((FLEXIO_TIMCTL_REG(base, index) & FLEXIO_TIMCTL_TRGSRC_MASK) >> FLEXIO_TIMCTL_TRGSRC_SHIFT)
#define FLEXIO_BRD_TIMCTL_TRGSRC(base, index) (BME_UBFX32(&FLEXIO_TIMCTL_REG(base, index), FLEXIO_TIMCTL_TRGSRC_SHIFT, FLEXIO_TIMCTL_TRGSRC_WIDTH))

/*! @brief Set the TRGSRC field to a new value. */
#define FLEXIO_WR_TIMCTL_TRGSRC(base, index, value) (FLEXIO_RMW_TIMCTL(base, index, FLEXIO_TIMCTL_TRGSRC_MASK, FLEXIO_TIMCTL_TRGSRC(value)))
#define FLEXIO_BWR_TIMCTL_TRGSRC(base, index, value) (BME_BFI32(&FLEXIO_TIMCTL_REG(base, index), ((uint32_t)(value) << FLEXIO_TIMCTL_TRGSRC_SHIFT), FLEXIO_TIMCTL_TRGSRC_SHIFT, FLEXIO_TIMCTL_TRGSRC_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_TIMCTL, field TRGPOL[23] (RW)
 *
 * Values:
 * - 0b0 - Trigger active high
 * - 0b1 - Trigger active low
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_TIMCTL_TRGPOL field. */
#define FLEXIO_RD_TIMCTL_TRGPOL(base, index) ((FLEXIO_TIMCTL_REG(base, index) & FLEXIO_TIMCTL_TRGPOL_MASK) >> FLEXIO_TIMCTL_TRGPOL_SHIFT)
#define FLEXIO_BRD_TIMCTL_TRGPOL(base, index) (BME_UBFX32(&FLEXIO_TIMCTL_REG(base, index), FLEXIO_TIMCTL_TRGPOL_SHIFT, FLEXIO_TIMCTL_TRGPOL_WIDTH))

/*! @brief Set the TRGPOL field to a new value. */
#define FLEXIO_WR_TIMCTL_TRGPOL(base, index, value) (FLEXIO_RMW_TIMCTL(base, index, FLEXIO_TIMCTL_TRGPOL_MASK, FLEXIO_TIMCTL_TRGPOL(value)))
#define FLEXIO_BWR_TIMCTL_TRGPOL(base, index, value) (BME_BFI32(&FLEXIO_TIMCTL_REG(base, index), ((uint32_t)(value) << FLEXIO_TIMCTL_TRGPOL_SHIFT), FLEXIO_TIMCTL_TRGPOL_SHIFT, FLEXIO_TIMCTL_TRGPOL_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_TIMCTL, field TRGSEL[29:24] (RW)
 *
 * The valid values for TRGSEL will depend on the FLEXIO_PARAM register. When
 * TRGSRC = 1, the valid values for N will depend on PIN, TIMER, SHIFTER fields in
 * the FLEXIO_PARAM register. When TRGSRC = 0, the valid values for N will depend
 * on TRIGGER field in FLEXIO_PARAM register. Refer to the chip configuration
 * section for external trigger selection. The internal trigger selection is
 * configured as follows:
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_TIMCTL_TRGSEL field. */
#define FLEXIO_RD_TIMCTL_TRGSEL(base, index) ((FLEXIO_TIMCTL_REG(base, index) & FLEXIO_TIMCTL_TRGSEL_MASK) >> FLEXIO_TIMCTL_TRGSEL_SHIFT)
#define FLEXIO_BRD_TIMCTL_TRGSEL(base, index) (BME_UBFX32(&FLEXIO_TIMCTL_REG(base, index), FLEXIO_TIMCTL_TRGSEL_SHIFT, FLEXIO_TIMCTL_TRGSEL_WIDTH))

/*! @brief Set the TRGSEL field to a new value. */
#define FLEXIO_WR_TIMCTL_TRGSEL(base, index, value) (FLEXIO_RMW_TIMCTL(base, index, FLEXIO_TIMCTL_TRGSEL_MASK, FLEXIO_TIMCTL_TRGSEL(value)))
#define FLEXIO_BWR_TIMCTL_TRGSEL(base, index, value) (BME_BFI32(&FLEXIO_TIMCTL_REG(base, index), ((uint32_t)(value) << FLEXIO_TIMCTL_TRGSEL_SHIFT), FLEXIO_TIMCTL_TRGSEL_SHIFT, FLEXIO_TIMCTL_TRGSEL_WIDTH))
/*@}*/

/*******************************************************************************
 * FLEXIO_TIMCFG - Timer Configuration N Register
 ******************************************************************************/

/*!
 * @brief FLEXIO_TIMCFG - Timer Configuration N Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The options to enable or disable the timer using the Timer N-1 enable or
 * disable are reserved when N is evenly divisible by 4 (eg: Timer 0).
 */
/*!
 * @name Constants and macros for entire FLEXIO_TIMCFG register
 */
/*@{*/
#define FLEXIO_RD_TIMCFG(base, index) (FLEXIO_TIMCFG_REG(base, index))
#define FLEXIO_WR_TIMCFG(base, index, value) (FLEXIO_TIMCFG_REG(base, index) = (value))
#define FLEXIO_RMW_TIMCFG(base, index, mask, value) (FLEXIO_WR_TIMCFG(base, index, (FLEXIO_RD_TIMCFG(base, index) & ~(mask)) | (value)))
#define FLEXIO_SET_TIMCFG(base, index, value) (BME_OR32(&FLEXIO_TIMCFG_REG(base, index), (uint32_t)(value)))
#define FLEXIO_CLR_TIMCFG(base, index, value) (BME_AND32(&FLEXIO_TIMCFG_REG(base, index), (uint32_t)(~(value))))
#define FLEXIO_TOG_TIMCFG(base, index, value) (BME_XOR32(&FLEXIO_TIMCFG_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_TIMCFG bitfields
 */

/*!
 * @name Register FLEXIO_TIMCFG, field TSTART[1] (RW)
 *
 * When start bit is enabled, configured shifters will output the contents of
 * the start bit when the timer is enabled and the timer counter will reload from
 * the compare register on the first rising edge of the shift clock.
 *
 * Values:
 * - 0b0 - Start bit disabled
 * - 0b1 - Start bit enabled
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_TIMCFG_TSTART field. */
#define FLEXIO_RD_TIMCFG_TSTART(base, index) ((FLEXIO_TIMCFG_REG(base, index) & FLEXIO_TIMCFG_TSTART_MASK) >> FLEXIO_TIMCFG_TSTART_SHIFT)
#define FLEXIO_BRD_TIMCFG_TSTART(base, index) (BME_UBFX32(&FLEXIO_TIMCFG_REG(base, index), FLEXIO_TIMCFG_TSTART_SHIFT, FLEXIO_TIMCFG_TSTART_WIDTH))

/*! @brief Set the TSTART field to a new value. */
#define FLEXIO_WR_TIMCFG_TSTART(base, index, value) (FLEXIO_RMW_TIMCFG(base, index, FLEXIO_TIMCFG_TSTART_MASK, FLEXIO_TIMCFG_TSTART(value)))
#define FLEXIO_BWR_TIMCFG_TSTART(base, index, value) (BME_BFI32(&FLEXIO_TIMCFG_REG(base, index), ((uint32_t)(value) << FLEXIO_TIMCFG_TSTART_SHIFT), FLEXIO_TIMCFG_TSTART_SHIFT, FLEXIO_TIMCFG_TSTART_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_TIMCFG, field TSTOP[5:4] (RW)
 *
 * The stop bit can be added on a timer compare (between each word) or on a
 * timer disable. When stop bit is enabled, configured shifters will output the
 * contents of the stop bit when the timer is disabled. When stop bit is enabled on
 * timer disable, the timer remains disabled until the next rising edge of the
 * shift clock. If configured for both timer compare and timer disable, only one stop
 * bit is inserted on timer disable.
 *
 * Values:
 * - 0b00 - Stop bit disabled
 * - 0b01 - Stop bit is enabled on timer compare
 * - 0b10 - Stop bit is enabled on timer disable
 * - 0b11 - Stop bit is enabled on timer compare and timer disable
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_TIMCFG_TSTOP field. */
#define FLEXIO_RD_TIMCFG_TSTOP(base, index) ((FLEXIO_TIMCFG_REG(base, index) & FLEXIO_TIMCFG_TSTOP_MASK) >> FLEXIO_TIMCFG_TSTOP_SHIFT)
#define FLEXIO_BRD_TIMCFG_TSTOP(base, index) (BME_UBFX32(&FLEXIO_TIMCFG_REG(base, index), FLEXIO_TIMCFG_TSTOP_SHIFT, FLEXIO_TIMCFG_TSTOP_WIDTH))

/*! @brief Set the TSTOP field to a new value. */
#define FLEXIO_WR_TIMCFG_TSTOP(base, index, value) (FLEXIO_RMW_TIMCFG(base, index, FLEXIO_TIMCFG_TSTOP_MASK, FLEXIO_TIMCFG_TSTOP(value)))
#define FLEXIO_BWR_TIMCFG_TSTOP(base, index, value) (BME_BFI32(&FLEXIO_TIMCFG_REG(base, index), ((uint32_t)(value) << FLEXIO_TIMCFG_TSTOP_SHIFT), FLEXIO_TIMCFG_TSTOP_SHIFT, FLEXIO_TIMCFG_TSTOP_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_TIMCFG, field TIMENA[10:8] (RW)
 *
 * Configures the condition that causes the Timer to be enabled and start
 * decrementing.
 *
 * Values:
 * - 0b000 - Timer always enabled
 * - 0b001 - Timer enabled on Timer N-1 enable
 * - 0b010 - Timer enabled on Trigger high
 * - 0b011 - Timer enabled on Trigger high and Pin high
 * - 0b100 - Timer enabled on Pin rising edge
 * - 0b101 - Timer enabled on Pin rising edge and Trigger high
 * - 0b110 - Timer enabled on Trigger rising edge
 * - 0b111 - Timer enabled on Trigger rising or falling edge
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_TIMCFG_TIMENA field. */
#define FLEXIO_RD_TIMCFG_TIMENA(base, index) ((FLEXIO_TIMCFG_REG(base, index) & FLEXIO_TIMCFG_TIMENA_MASK) >> FLEXIO_TIMCFG_TIMENA_SHIFT)
#define FLEXIO_BRD_TIMCFG_TIMENA(base, index) (BME_UBFX32(&FLEXIO_TIMCFG_REG(base, index), FLEXIO_TIMCFG_TIMENA_SHIFT, FLEXIO_TIMCFG_TIMENA_WIDTH))

/*! @brief Set the TIMENA field to a new value. */
#define FLEXIO_WR_TIMCFG_TIMENA(base, index, value) (FLEXIO_RMW_TIMCFG(base, index, FLEXIO_TIMCFG_TIMENA_MASK, FLEXIO_TIMCFG_TIMENA(value)))
#define FLEXIO_BWR_TIMCFG_TIMENA(base, index, value) (BME_BFI32(&FLEXIO_TIMCFG_REG(base, index), ((uint32_t)(value) << FLEXIO_TIMCFG_TIMENA_SHIFT), FLEXIO_TIMCFG_TIMENA_SHIFT, FLEXIO_TIMCFG_TIMENA_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_TIMCFG, field TIMDIS[14:12] (RW)
 *
 * Configures the condition that causes the Timer to be disabled and stop
 * decrementing.
 *
 * Values:
 * - 0b000 - Timer never disabled
 * - 0b001 - Timer disabled on Timer N-1 disable
 * - 0b010 - Timer disabled on Timer compare
 * - 0b011 - Timer disabled on Timer compare and Trigger Low
 * - 0b100 - Timer disabled on Pin rising or falling edge
 * - 0b101 - Timer disabled on Pin rising or falling edge provided Trigger is
 *     high
 * - 0b110 - Timer disabled on Trigger falling edge
 * - 0b111 - Reserved
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_TIMCFG_TIMDIS field. */
#define FLEXIO_RD_TIMCFG_TIMDIS(base, index) ((FLEXIO_TIMCFG_REG(base, index) & FLEXIO_TIMCFG_TIMDIS_MASK) >> FLEXIO_TIMCFG_TIMDIS_SHIFT)
#define FLEXIO_BRD_TIMCFG_TIMDIS(base, index) (BME_UBFX32(&FLEXIO_TIMCFG_REG(base, index), FLEXIO_TIMCFG_TIMDIS_SHIFT, FLEXIO_TIMCFG_TIMDIS_WIDTH))

/*! @brief Set the TIMDIS field to a new value. */
#define FLEXIO_WR_TIMCFG_TIMDIS(base, index, value) (FLEXIO_RMW_TIMCFG(base, index, FLEXIO_TIMCFG_TIMDIS_MASK, FLEXIO_TIMCFG_TIMDIS(value)))
#define FLEXIO_BWR_TIMCFG_TIMDIS(base, index, value) (BME_BFI32(&FLEXIO_TIMCFG_REG(base, index), ((uint32_t)(value) << FLEXIO_TIMCFG_TIMDIS_SHIFT), FLEXIO_TIMCFG_TIMDIS_SHIFT, FLEXIO_TIMCFG_TIMDIS_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_TIMCFG, field TIMRST[18:16] (RW)
 *
 * Configures the condition that causes the timer counter (and optionally the
 * timer output) to be reset. In 8-bit counter mode, the timer reset will only
 * reset the lower 8-bits that configure the baud rate. In all other modes, the timer
 * reset will reset the full 16-bits of the counter.
 *
 * Values:
 * - 0b000 - Timer never reset
 * - 0b001 - Reserved
 * - 0b010 - Timer reset on Timer Pin equal to Timer Output
 * - 0b011 - Timer reset on Timer Trigger equal to Timer Output
 * - 0b100 - Timer reset on Timer Pin rising edge
 * - 0b101 - Reserved
 * - 0b110 - Timer reset on Trigger rising edge
 * - 0b111 - Timer reset on Trigger rising or falling edge
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_TIMCFG_TIMRST field. */
#define FLEXIO_RD_TIMCFG_TIMRST(base, index) ((FLEXIO_TIMCFG_REG(base, index) & FLEXIO_TIMCFG_TIMRST_MASK) >> FLEXIO_TIMCFG_TIMRST_SHIFT)
#define FLEXIO_BRD_TIMCFG_TIMRST(base, index) (BME_UBFX32(&FLEXIO_TIMCFG_REG(base, index), FLEXIO_TIMCFG_TIMRST_SHIFT, FLEXIO_TIMCFG_TIMRST_WIDTH))

/*! @brief Set the TIMRST field to a new value. */
#define FLEXIO_WR_TIMCFG_TIMRST(base, index, value) (FLEXIO_RMW_TIMCFG(base, index, FLEXIO_TIMCFG_TIMRST_MASK, FLEXIO_TIMCFG_TIMRST(value)))
#define FLEXIO_BWR_TIMCFG_TIMRST(base, index, value) (BME_BFI32(&FLEXIO_TIMCFG_REG(base, index), ((uint32_t)(value) << FLEXIO_TIMCFG_TIMRST_SHIFT), FLEXIO_TIMCFG_TIMRST_SHIFT, FLEXIO_TIMCFG_TIMRST_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_TIMCFG, field TIMDEC[21:20] (RW)
 *
 * Configures the source of the Timer decrement and the source of the Shift
 * clock.
 *
 * Values:
 * - 0b00 - Decrement counter on FlexIO clock, Shift clock equals Timer output.
 * - 0b01 - Decrement counter on Trigger input (both edges), Shift clock equals
 *     Timer output.
 * - 0b10 - Decrement counter on Pin input (both edges), Shift clock equals Pin
 *     input.
 * - 0b11 - Decrement counter on Trigger input (both edges), Shift clock equals
 *     Trigger input.
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_TIMCFG_TIMDEC field. */
#define FLEXIO_RD_TIMCFG_TIMDEC(base, index) ((FLEXIO_TIMCFG_REG(base, index) & FLEXIO_TIMCFG_TIMDEC_MASK) >> FLEXIO_TIMCFG_TIMDEC_SHIFT)
#define FLEXIO_BRD_TIMCFG_TIMDEC(base, index) (BME_UBFX32(&FLEXIO_TIMCFG_REG(base, index), FLEXIO_TIMCFG_TIMDEC_SHIFT, FLEXIO_TIMCFG_TIMDEC_WIDTH))

/*! @brief Set the TIMDEC field to a new value. */
#define FLEXIO_WR_TIMCFG_TIMDEC(base, index, value) (FLEXIO_RMW_TIMCFG(base, index, FLEXIO_TIMCFG_TIMDEC_MASK, FLEXIO_TIMCFG_TIMDEC(value)))
#define FLEXIO_BWR_TIMCFG_TIMDEC(base, index, value) (BME_BFI32(&FLEXIO_TIMCFG_REG(base, index), ((uint32_t)(value) << FLEXIO_TIMCFG_TIMDEC_SHIFT), FLEXIO_TIMCFG_TIMDEC_SHIFT, FLEXIO_TIMCFG_TIMDEC_WIDTH))
/*@}*/

/*!
 * @name Register FLEXIO_TIMCFG, field TIMOUT[25:24] (RW)
 *
 * Configures the initial state of the Timer Output and whether it is affected
 * by the Timer reset.
 *
 * Values:
 * - 0b00 - Timer output is logic one when enabled and is not affected by timer
 *     reset
 * - 0b01 - Timer output is logic zero when enabled and is not affected by timer
 *     reset
 * - 0b10 - Timer output is logic one when enabled and on timer reset
 * - 0b11 - Timer output is logic zero when enabled and on timer reset
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_TIMCFG_TIMOUT field. */
#define FLEXIO_RD_TIMCFG_TIMOUT(base, index) ((FLEXIO_TIMCFG_REG(base, index) & FLEXIO_TIMCFG_TIMOUT_MASK) >> FLEXIO_TIMCFG_TIMOUT_SHIFT)
#define FLEXIO_BRD_TIMCFG_TIMOUT(base, index) (BME_UBFX32(&FLEXIO_TIMCFG_REG(base, index), FLEXIO_TIMCFG_TIMOUT_SHIFT, FLEXIO_TIMCFG_TIMOUT_WIDTH))

/*! @brief Set the TIMOUT field to a new value. */
#define FLEXIO_WR_TIMCFG_TIMOUT(base, index, value) (FLEXIO_RMW_TIMCFG(base, index, FLEXIO_TIMCFG_TIMOUT_MASK, FLEXIO_TIMCFG_TIMOUT(value)))
#define FLEXIO_BWR_TIMCFG_TIMOUT(base, index, value) (BME_BFI32(&FLEXIO_TIMCFG_REG(base, index), ((uint32_t)(value) << FLEXIO_TIMCFG_TIMOUT_SHIFT), FLEXIO_TIMCFG_TIMOUT_SHIFT, FLEXIO_TIMCFG_TIMOUT_WIDTH))
/*@}*/

/*******************************************************************************
 * FLEXIO_TIMCMP - Timer Compare N Register
 ******************************************************************************/

/*!
 * @brief FLEXIO_TIMCMP - Timer Compare N Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
/*!
 * @name Constants and macros for entire FLEXIO_TIMCMP register
 */
/*@{*/
#define FLEXIO_RD_TIMCMP(base, index) (FLEXIO_TIMCMP_REG(base, index))
#define FLEXIO_WR_TIMCMP(base, index, value) (FLEXIO_TIMCMP_REG(base, index) = (value))
#define FLEXIO_RMW_TIMCMP(base, index, mask, value) (FLEXIO_WR_TIMCMP(base, index, (FLEXIO_RD_TIMCMP(base, index) & ~(mask)) | (value)))
#define FLEXIO_SET_TIMCMP(base, index, value) (BME_OR32(&FLEXIO_TIMCMP_REG(base, index), (uint32_t)(value)))
#define FLEXIO_CLR_TIMCMP(base, index, value) (BME_AND32(&FLEXIO_TIMCMP_REG(base, index), (uint32_t)(~(value))))
#define FLEXIO_TOG_TIMCMP(base, index, value) (BME_XOR32(&FLEXIO_TIMCMP_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_TIMCMP bitfields
 */

/*!
 * @name Register FLEXIO_TIMCMP, field CMP[15:0] (RW)
 *
 * The timer compare value is loaded into the timer counter when the timer is
 * first enabled, when the timer is reset and when the timer decrements down to
 * zero. In dual 8-bit counters baud/bit mode, the lower 8-bits configures the baud
 * rate divider equal to (CMP[7:0] + 1) * 2. The upper 8-bits configure the
 * number of bits in each word equal to (CMP[15:8] + 1) / 2. In dual 8-bit counters
 * PWM mode, the lower 8-bits configure the high period of the output to (CMP[7:0]
 * + 1) and the upper 8-bits configure the low period of the output to (CMP[15:8]
 * + 1). In 16-bit counter mode, the compare value can be used to generate the
 * baud rate divider (if shift clock source is timer output) to equal (CMP[15:0] +
 * 1) * 2. When the shift clock source is a pin or trigger input, the compare
 * register is used to set the number of bits in each word equal to (CMP[15:0] + 1)
 * / 2.
 */
/*@{*/
/*! @brief Read current value of the FLEXIO_TIMCMP_CMP field. */
#define FLEXIO_RD_TIMCMP_CMP(base, index) ((FLEXIO_TIMCMP_REG(base, index) & FLEXIO_TIMCMP_CMP_MASK) >> FLEXIO_TIMCMP_CMP_SHIFT)
#define FLEXIO_BRD_TIMCMP_CMP(base, index) (FLEXIO_RD_TIMCMP_CMP(base, index))

/*! @brief Set the CMP field to a new value. */
#define FLEXIO_WR_TIMCMP_CMP(base, index, value) (FLEXIO_RMW_TIMCMP(base, index, FLEXIO_TIMCMP_CMP_MASK, FLEXIO_TIMCMP_CMP(value)))
#define FLEXIO_BWR_TIMCMP_CMP(base, index, value) (FLEXIO_WR_TIMCMP_CMP(base, index, value))
/*@}*/

/*******************************************************************************
 * FLEXIO_SHIFTBUFNBS - Shifter Buffer N Nibble Byte Swapped Register
 ******************************************************************************/

/*!
 * @brief FLEXIO_SHIFTBUFNBS - Shifter Buffer N Nibble Byte Swapped Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
/*!
 * @name Constants and macros for entire FLEXIO_SHIFTBUFNBS register
 */
/*@{*/
#define FLEXIO_RD_SHIFTBUFNBS(base, index) (FLEXIO_SHIFTBUFNBS_REG(base, index))
#define FLEXIO_WR_SHIFTBUFNBS(base, index, value) (FLEXIO_SHIFTBUFNBS_REG(base, index) = (value))
#define FLEXIO_RMW_SHIFTBUFNBS(base, index, mask, value) (FLEXIO_WR_SHIFTBUFNBS(base, index, (FLEXIO_RD_SHIFTBUFNBS(base, index) & ~(mask)) | (value)))
#define FLEXIO_SET_SHIFTBUFNBS(base, index, value) (BME_OR32(&FLEXIO_SHIFTBUFNBS_REG(base, index), (uint32_t)(value)))
#define FLEXIO_CLR_SHIFTBUFNBS(base, index, value) (BME_AND32(&FLEXIO_SHIFTBUFNBS_REG(base, index), (uint32_t)(~(value))))
#define FLEXIO_TOG_SHIFTBUFNBS(base, index, value) (BME_XOR32(&FLEXIO_SHIFTBUFNBS_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * FLEXIO_SHIFTBUFHWS - Shifter Buffer N Half Word Swapped Register
 ******************************************************************************/

/*!
 * @brief FLEXIO_SHIFTBUFHWS - Shifter Buffer N Half Word Swapped Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
/*!
 * @name Constants and macros for entire FLEXIO_SHIFTBUFHWS register
 */
/*@{*/
#define FLEXIO_RD_SHIFTBUFHWS(base, index) (FLEXIO_SHIFTBUFHWS_REG(base, index))
#define FLEXIO_WR_SHIFTBUFHWS(base, index, value) (FLEXIO_SHIFTBUFHWS_REG(base, index) = (value))
#define FLEXIO_RMW_SHIFTBUFHWS(base, index, mask, value) (FLEXIO_WR_SHIFTBUFHWS(base, index, (FLEXIO_RD_SHIFTBUFHWS(base, index) & ~(mask)) | (value)))
#define FLEXIO_SET_SHIFTBUFHWS(base, index, value) (BME_OR32(&FLEXIO_SHIFTBUFHWS_REG(base, index), (uint32_t)(value)))
#define FLEXIO_CLR_SHIFTBUFHWS(base, index, value) (BME_AND32(&FLEXIO_SHIFTBUFHWS_REG(base, index), (uint32_t)(~(value))))
#define FLEXIO_TOG_SHIFTBUFHWS(base, index, value) (BME_XOR32(&FLEXIO_SHIFTBUFHWS_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * FLEXIO_SHIFTBUFNIS - Shifter Buffer N Nibble Swapped Register
 ******************************************************************************/

/*!
 * @brief FLEXIO_SHIFTBUFNIS - Shifter Buffer N Nibble Swapped Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
/*!
 * @name Constants and macros for entire FLEXIO_SHIFTBUFNIS register
 */
/*@{*/
#define FLEXIO_RD_SHIFTBUFNIS(base, index) (FLEXIO_SHIFTBUFNIS_REG(base, index))
#define FLEXIO_WR_SHIFTBUFNIS(base, index, value) (FLEXIO_SHIFTBUFNIS_REG(base, index) = (value))
#define FLEXIO_RMW_SHIFTBUFNIS(base, index, mask, value) (FLEXIO_WR_SHIFTBUFNIS(base, index, (FLEXIO_RD_SHIFTBUFNIS(base, index) & ~(mask)) | (value)))
#define FLEXIO_SET_SHIFTBUFNIS(base, index, value) (BME_OR32(&FLEXIO_SHIFTBUFNIS_REG(base, index), (uint32_t)(value)))
#define FLEXIO_CLR_SHIFTBUFNIS(base, index, value) (BME_AND32(&FLEXIO_SHIFTBUFNIS_REG(base, index), (uint32_t)(~(value))))
#define FLEXIO_TOG_SHIFTBUFNIS(base, index, value) (BME_XOR32(&FLEXIO_SHIFTBUFNIS_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * MK82F25615 FMC
 *
 * Flash Memory Controller
 *
 * Registers defined in this header file:
 * - FMC_PFAPR - Flash Access Protection Register
 * - FMC_PFB0CR - Flash Bank 0 Control Register
 * - FMC_RESERVED - Reserved
 * - FMC_TAGVDW0S - Cache Tag Storage
 * - FMC_TAGVDW1S - Cache Tag Storage
 * - FMC_TAGVDW2S - Cache Tag Storage
 * - FMC_TAGVDW3S - Cache Tag Storage
 * - FMC_DATA_UM - Cache Data Storage (uppermost word)
 * - FMC_DATA_MU - Cache Data Storage (mid-upper word)
 * - FMC_DATA_ML - Cache Data Storage (mid-lower word)
 * - FMC_DATA_LM - Cache Data Storage (lowermost word)
 */

#define FMC_INSTANCE_COUNT (1U) /*!< Number of instances of the FMC module. */
#define FMC_IDX (0U) /*!< Instance number for FMC. */

/*******************************************************************************
 * FMC_PFAPR - Flash Access Protection Register
 ******************************************************************************/

/*!
 * @brief FMC_PFAPR - Flash Access Protection Register (RW)
 *
 * Reset value: 0x0000003FU
 */
/*!
 * @name Constants and macros for entire FMC_PFAPR register
 */
/*@{*/
#define FMC_RD_PFAPR(base)       (FMC_PFAPR_REG(base))
#define FMC_WR_PFAPR(base, value) (FMC_PFAPR_REG(base) = (value))
#define FMC_RMW_PFAPR(base, mask, value) (FMC_WR_PFAPR(base, (FMC_RD_PFAPR(base) & ~(mask)) | (value)))
#define FMC_SET_PFAPR(base, value) (BME_OR32(&FMC_PFAPR_REG(base), (uint32_t)(value)))
#define FMC_CLR_PFAPR(base, value) (BME_AND32(&FMC_PFAPR_REG(base), (uint32_t)(~(value))))
#define FMC_TOG_PFAPR(base, value) (BME_XOR32(&FMC_PFAPR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FMC_PFAPR bitfields
 */

/*!
 * @name Register FMC_PFAPR, field M0AP[1:0] (RW)
 *
 * This field controls whether read and write access to the flash is allowed,
 * based on the logical master number of the requesting crossbar switch master.
 *
 * Values:
 * - 0b00 - No access may be performed by this master
 * - 0b01 - Only read accesses may be performed by this master
 * - 0b10 - Only write accesses may be performed by this master
 * - 0b11 - Both read and write accesses may be performed by this master
 */
/*@{*/
/*! @brief Read current value of the FMC_PFAPR_M0AP field. */
#define FMC_RD_PFAPR_M0AP(base) ((FMC_PFAPR_REG(base) & FMC_PFAPR_M0AP_MASK) >> FMC_PFAPR_M0AP_SHIFT)
#define FMC_BRD_PFAPR_M0AP(base) (BME_UBFX32(&FMC_PFAPR_REG(base), FMC_PFAPR_M0AP_SHIFT, FMC_PFAPR_M0AP_WIDTH))

/*! @brief Set the M0AP field to a new value. */
#define FMC_WR_PFAPR_M0AP(base, value) (FMC_RMW_PFAPR(base, FMC_PFAPR_M0AP_MASK, FMC_PFAPR_M0AP(value)))
#define FMC_BWR_PFAPR_M0AP(base, value) (BME_BFI32(&FMC_PFAPR_REG(base), ((uint32_t)(value) << FMC_PFAPR_M0AP_SHIFT), FMC_PFAPR_M0AP_SHIFT, FMC_PFAPR_M0AP_WIDTH))
/*@}*/

/*!
 * @name Register FMC_PFAPR, field M1AP[3:2] (RW)
 *
 * This field controls whether read and write access to the flash is allowed,
 * based on the logical master number of the requesting crossbar switch master.
 *
 * Values:
 * - 0b00 - No access may be performed by this master
 * - 0b01 - Only read accesses may be performed by this master
 * - 0b10 - Only write accesses may be performed by this master
 * - 0b11 - Both read and write accesses may be performed by this master
 */
/*@{*/
/*! @brief Read current value of the FMC_PFAPR_M1AP field. */
#define FMC_RD_PFAPR_M1AP(base) ((FMC_PFAPR_REG(base) & FMC_PFAPR_M1AP_MASK) >> FMC_PFAPR_M1AP_SHIFT)
#define FMC_BRD_PFAPR_M1AP(base) (BME_UBFX32(&FMC_PFAPR_REG(base), FMC_PFAPR_M1AP_SHIFT, FMC_PFAPR_M1AP_WIDTH))

/*! @brief Set the M1AP field to a new value. */
#define FMC_WR_PFAPR_M1AP(base, value) (FMC_RMW_PFAPR(base, FMC_PFAPR_M1AP_MASK, FMC_PFAPR_M1AP(value)))
#define FMC_BWR_PFAPR_M1AP(base, value) (BME_BFI32(&FMC_PFAPR_REG(base), ((uint32_t)(value) << FMC_PFAPR_M1AP_SHIFT), FMC_PFAPR_M1AP_SHIFT, FMC_PFAPR_M1AP_WIDTH))
/*@}*/

/*!
 * @name Register FMC_PFAPR, field M2AP[5:4] (RW)
 *
 * This field controls whether read and write access to the flash is allowed,
 * based on the logical master number of the requesting crossbar switch master.
 *
 * Values:
 * - 0b00 - No access may be performed by this master
 * - 0b01 - Only read accesses may be performed by this master
 * - 0b10 - Only write accesses may be performed by this master
 * - 0b11 - Both read and write accesses may be performed by this master
 */
/*@{*/
/*! @brief Read current value of the FMC_PFAPR_M2AP field. */
#define FMC_RD_PFAPR_M2AP(base) ((FMC_PFAPR_REG(base) & FMC_PFAPR_M2AP_MASK) >> FMC_PFAPR_M2AP_SHIFT)
#define FMC_BRD_PFAPR_M2AP(base) (BME_UBFX32(&FMC_PFAPR_REG(base), FMC_PFAPR_M2AP_SHIFT, FMC_PFAPR_M2AP_WIDTH))

/*! @brief Set the M2AP field to a new value. */
#define FMC_WR_PFAPR_M2AP(base, value) (FMC_RMW_PFAPR(base, FMC_PFAPR_M2AP_MASK, FMC_PFAPR_M2AP(value)))
#define FMC_BWR_PFAPR_M2AP(base, value) (BME_BFI32(&FMC_PFAPR_REG(base), ((uint32_t)(value) << FMC_PFAPR_M2AP_SHIFT), FMC_PFAPR_M2AP_SHIFT, FMC_PFAPR_M2AP_WIDTH))
/*@}*/

/*!
 * @name Register FMC_PFAPR, field M3AP[7:6] (RW)
 *
 * This field controls whether read and write access to the flash is allowed,
 * based on the logical master number of the requesting crossbar switch master.
 *
 * Values:
 * - 0b00 - No access may be performed by this master
 * - 0b01 - Only read accesses may be performed by this master
 * - 0b10 - Only write accesses may be performed by this master
 * - 0b11 - Both read and write accesses may be performed by this master
 */
/*@{*/
/*! @brief Read current value of the FMC_PFAPR_M3AP field. */
#define FMC_RD_PFAPR_M3AP(base) ((FMC_PFAPR_REG(base) & FMC_PFAPR_M3AP_MASK) >> FMC_PFAPR_M3AP_SHIFT)
#define FMC_BRD_PFAPR_M3AP(base) (BME_UBFX32(&FMC_PFAPR_REG(base), FMC_PFAPR_M3AP_SHIFT, FMC_PFAPR_M3AP_WIDTH))

/*! @brief Set the M3AP field to a new value. */
#define FMC_WR_PFAPR_M3AP(base, value) (FMC_RMW_PFAPR(base, FMC_PFAPR_M3AP_MASK, FMC_PFAPR_M3AP(value)))
#define FMC_BWR_PFAPR_M3AP(base, value) (BME_BFI32(&FMC_PFAPR_REG(base), ((uint32_t)(value) << FMC_PFAPR_M3AP_SHIFT), FMC_PFAPR_M3AP_SHIFT, FMC_PFAPR_M3AP_WIDTH))
/*@}*/

/*!
 * @name Register FMC_PFAPR, field M4AP[9:8] (RW)
 *
 * This field controls whether read and write access to the flash is allowed,
 * based on the logical master number of the requesting crossbar switch master.
 *
 * Values:
 * - 0b00 - No access may be performed by this master
 * - 0b01 - Only read accesses may be performed by this master
 * - 0b10 - Only write accesses may be performed by this master
 * - 0b11 - Both read and write accesses may be performed by this master
 */
/*@{*/
/*! @brief Read current value of the FMC_PFAPR_M4AP field. */
#define FMC_RD_PFAPR_M4AP(base) ((FMC_PFAPR_REG(base) & FMC_PFAPR_M4AP_MASK) >> FMC_PFAPR_M4AP_SHIFT)
#define FMC_BRD_PFAPR_M4AP(base) (BME_UBFX32(&FMC_PFAPR_REG(base), FMC_PFAPR_M4AP_SHIFT, FMC_PFAPR_M4AP_WIDTH))

/*! @brief Set the M4AP field to a new value. */
#define FMC_WR_PFAPR_M4AP(base, value) (FMC_RMW_PFAPR(base, FMC_PFAPR_M4AP_MASK, FMC_PFAPR_M4AP(value)))
#define FMC_BWR_PFAPR_M4AP(base, value) (BME_BFI32(&FMC_PFAPR_REG(base), ((uint32_t)(value) << FMC_PFAPR_M4AP_SHIFT), FMC_PFAPR_M4AP_SHIFT, FMC_PFAPR_M4AP_WIDTH))
/*@}*/

/*!
 * @name Register FMC_PFAPR, field M0PFD[16] (RW)
 *
 * These bits control whether prefetching is enabled, based on the logical
 * number of the requesting crossbar switch master. This field is further qualified by
 * the PFBnCR[BxDPE,BxIPE] bits.
 *
 * Values:
 * - 0b0 - Prefetching for this master is enabled.
 * - 0b1 - Prefetching for this master is disabled.
 */
/*@{*/
/*! @brief Read current value of the FMC_PFAPR_M0PFD field. */
#define FMC_RD_PFAPR_M0PFD(base) ((FMC_PFAPR_REG(base) & FMC_PFAPR_M0PFD_MASK) >> FMC_PFAPR_M0PFD_SHIFT)
#define FMC_BRD_PFAPR_M0PFD(base) (BME_UBFX32(&FMC_PFAPR_REG(base), FMC_PFAPR_M0PFD_SHIFT, FMC_PFAPR_M0PFD_WIDTH))

/*! @brief Set the M0PFD field to a new value. */
#define FMC_WR_PFAPR_M0PFD(base, value) (FMC_RMW_PFAPR(base, FMC_PFAPR_M0PFD_MASK, FMC_PFAPR_M0PFD(value)))
#define FMC_BWR_PFAPR_M0PFD(base, value) (BME_BFI32(&FMC_PFAPR_REG(base), ((uint32_t)(value) << FMC_PFAPR_M0PFD_SHIFT), FMC_PFAPR_M0PFD_SHIFT, FMC_PFAPR_M0PFD_WIDTH))
/*@}*/

/*!
 * @name Register FMC_PFAPR, field M1PFD[17] (RW)
 *
 * These bits control whether prefetching is enabled, based on the logical
 * number of the requesting crossbar switch master. This field is further qualified by
 * the PFBnCR[BxDPE,BxIPE] bits.
 *
 * Values:
 * - 0b0 - Prefetching for this master is enabled.
 * - 0b1 - Prefetching for this master is disabled.
 */
/*@{*/
/*! @brief Read current value of the FMC_PFAPR_M1PFD field. */
#define FMC_RD_PFAPR_M1PFD(base) ((FMC_PFAPR_REG(base) & FMC_PFAPR_M1PFD_MASK) >> FMC_PFAPR_M1PFD_SHIFT)
#define FMC_BRD_PFAPR_M1PFD(base) (BME_UBFX32(&FMC_PFAPR_REG(base), FMC_PFAPR_M1PFD_SHIFT, FMC_PFAPR_M1PFD_WIDTH))

/*! @brief Set the M1PFD field to a new value. */
#define FMC_WR_PFAPR_M1PFD(base, value) (FMC_RMW_PFAPR(base, FMC_PFAPR_M1PFD_MASK, FMC_PFAPR_M1PFD(value)))
#define FMC_BWR_PFAPR_M1PFD(base, value) (BME_BFI32(&FMC_PFAPR_REG(base), ((uint32_t)(value) << FMC_PFAPR_M1PFD_SHIFT), FMC_PFAPR_M1PFD_SHIFT, FMC_PFAPR_M1PFD_WIDTH))
/*@}*/

/*!
 * @name Register FMC_PFAPR, field M2PFD[18] (RW)
 *
 * These bits control whether prefetching is enabled, based on the logical
 * number of the requesting crossbar switch master. This field is further qualified by
 * the PFBnCR[BxDPE,BxIPE] bits.
 *
 * Values:
 * - 0b0 - Prefetching for this master is enabled.
 * - 0b1 - Prefetching for this master is disabled.
 */
/*@{*/
/*! @brief Read current value of the FMC_PFAPR_M2PFD field. */
#define FMC_RD_PFAPR_M2PFD(base) ((FMC_PFAPR_REG(base) & FMC_PFAPR_M2PFD_MASK) >> FMC_PFAPR_M2PFD_SHIFT)
#define FMC_BRD_PFAPR_M2PFD(base) (BME_UBFX32(&FMC_PFAPR_REG(base), FMC_PFAPR_M2PFD_SHIFT, FMC_PFAPR_M2PFD_WIDTH))

/*! @brief Set the M2PFD field to a new value. */
#define FMC_WR_PFAPR_M2PFD(base, value) (FMC_RMW_PFAPR(base, FMC_PFAPR_M2PFD_MASK, FMC_PFAPR_M2PFD(value)))
#define FMC_BWR_PFAPR_M2PFD(base, value) (BME_BFI32(&FMC_PFAPR_REG(base), ((uint32_t)(value) << FMC_PFAPR_M2PFD_SHIFT), FMC_PFAPR_M2PFD_SHIFT, FMC_PFAPR_M2PFD_WIDTH))
/*@}*/

/*!
 * @name Register FMC_PFAPR, field M3PFD[19] (RW)
 *
 * These bits control whether prefetching is enabled, based on the logical
 * number of the requesting crossbar switch master. This field is further qualified by
 * the PFBnCR[BxDPE,BxIPE] bits.
 *
 * Values:
 * - 0b0 - Prefetching for this master is enabled.
 * - 0b1 - Prefetching for this master is disabled.
 */
/*@{*/
/*! @brief Read current value of the FMC_PFAPR_M3PFD field. */
#define FMC_RD_PFAPR_M3PFD(base) ((FMC_PFAPR_REG(base) & FMC_PFAPR_M3PFD_MASK) >> FMC_PFAPR_M3PFD_SHIFT)
#define FMC_BRD_PFAPR_M3PFD(base) (BME_UBFX32(&FMC_PFAPR_REG(base), FMC_PFAPR_M3PFD_SHIFT, FMC_PFAPR_M3PFD_WIDTH))

/*! @brief Set the M3PFD field to a new value. */
#define FMC_WR_PFAPR_M3PFD(base, value) (FMC_RMW_PFAPR(base, FMC_PFAPR_M3PFD_MASK, FMC_PFAPR_M3PFD(value)))
#define FMC_BWR_PFAPR_M3PFD(base, value) (BME_BFI32(&FMC_PFAPR_REG(base), ((uint32_t)(value) << FMC_PFAPR_M3PFD_SHIFT), FMC_PFAPR_M3PFD_SHIFT, FMC_PFAPR_M3PFD_WIDTH))
/*@}*/

/*!
 * @name Register FMC_PFAPR, field M4PFD[20] (RW)
 *
 * These bits control whether prefetching is enabled, based on the logical
 * number of the requesting crossbar switch master. This field is further qualified by
 * the PFBnCR[BxDPE,BxIPE] bits.
 *
 * Values:
 * - 0b0 - Prefetching for this master is enabled.
 * - 0b1 - Prefetching for this master is disabled.
 */
/*@{*/
/*! @brief Read current value of the FMC_PFAPR_M4PFD field. */
#define FMC_RD_PFAPR_M4PFD(base) ((FMC_PFAPR_REG(base) & FMC_PFAPR_M4PFD_MASK) >> FMC_PFAPR_M4PFD_SHIFT)
#define FMC_BRD_PFAPR_M4PFD(base) (BME_UBFX32(&FMC_PFAPR_REG(base), FMC_PFAPR_M4PFD_SHIFT, FMC_PFAPR_M4PFD_WIDTH))

/*! @brief Set the M4PFD field to a new value. */
#define FMC_WR_PFAPR_M4PFD(base, value) (FMC_RMW_PFAPR(base, FMC_PFAPR_M4PFD_MASK, FMC_PFAPR_M4PFD(value)))
#define FMC_BWR_PFAPR_M4PFD(base, value) (BME_BFI32(&FMC_PFAPR_REG(base), ((uint32_t)(value) << FMC_PFAPR_M4PFD_SHIFT), FMC_PFAPR_M4PFD_SHIFT, FMC_PFAPR_M4PFD_WIDTH))
/*@}*/

/*******************************************************************************
 * FMC_PFB0CR - Flash Bank 0 Control Register
 ******************************************************************************/

/*!
 * @brief FMC_PFB0CR - Flash Bank 0 Control Register (RW)
 *
 * Reset value: 0x3004001FU
 */
/*!
 * @name Constants and macros for entire FMC_PFB0CR register
 */
/*@{*/
#define FMC_RD_PFB0CR(base)      (FMC_PFB0CR_REG(base))
#define FMC_WR_PFB0CR(base, value) (FMC_PFB0CR_REG(base) = (value))
#define FMC_RMW_PFB0CR(base, mask, value) (FMC_WR_PFB0CR(base, (FMC_RD_PFB0CR(base) & ~(mask)) | (value)))
#define FMC_SET_PFB0CR(base, value) (BME_OR32(&FMC_PFB0CR_REG(base), (uint32_t)(value)))
#define FMC_CLR_PFB0CR(base, value) (BME_AND32(&FMC_PFB0CR_REG(base), (uint32_t)(~(value))))
#define FMC_TOG_PFB0CR(base, value) (BME_XOR32(&FMC_PFB0CR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FMC_PFB0CR bitfields
 */

/*!
 * @name Register FMC_PFB0CR, field B0SEBE[0] (RW)
 *
 * This bit controls whether the single entry page buffer is enabled in response
 * to flash read accesses. A high-to-low transition of this enable forces the
 * page buffer to be invalidated.
 *
 * Values:
 * - 0b0 - Single entry buffer is disabled.
 * - 0b1 - Single entry buffer is enabled.
 */
/*@{*/
/*! @brief Read current value of the FMC_PFB0CR_B0SEBE field. */
#define FMC_RD_PFB0CR_B0SEBE(base) ((FMC_PFB0CR_REG(base) & FMC_PFB0CR_B0SEBE_MASK) >> FMC_PFB0CR_B0SEBE_SHIFT)
#define FMC_BRD_PFB0CR_B0SEBE(base) (BME_UBFX32(&FMC_PFB0CR_REG(base), FMC_PFB0CR_B0SEBE_SHIFT, FMC_PFB0CR_B0SEBE_WIDTH))

/*! @brief Set the B0SEBE field to a new value. */
#define FMC_WR_PFB0CR_B0SEBE(base, value) (FMC_RMW_PFB0CR(base, FMC_PFB0CR_B0SEBE_MASK, FMC_PFB0CR_B0SEBE(value)))
#define FMC_BWR_PFB0CR_B0SEBE(base, value) (BME_BFI32(&FMC_PFB0CR_REG(base), ((uint32_t)(value) << FMC_PFB0CR_B0SEBE_SHIFT), FMC_PFB0CR_B0SEBE_SHIFT, FMC_PFB0CR_B0SEBE_WIDTH))
/*@}*/

/*!
 * @name Register FMC_PFB0CR, field B0IPE[1] (RW)
 *
 * This bit controls whether prefetches (or speculative accesses) are initiated
 * in response to instruction fetches.
 *
 * Values:
 * - 0b0 - Do not prefetch in response to instruction fetches.
 * - 0b1 - Enable prefetches in response to instruction fetches.
 */
/*@{*/
/*! @brief Read current value of the FMC_PFB0CR_B0IPE field. */
#define FMC_RD_PFB0CR_B0IPE(base) ((FMC_PFB0CR_REG(base) & FMC_PFB0CR_B0IPE_MASK) >> FMC_PFB0CR_B0IPE_SHIFT)
#define FMC_BRD_PFB0CR_B0IPE(base) (BME_UBFX32(&FMC_PFB0CR_REG(base), FMC_PFB0CR_B0IPE_SHIFT, FMC_PFB0CR_B0IPE_WIDTH))

/*! @brief Set the B0IPE field to a new value. */
#define FMC_WR_PFB0CR_B0IPE(base, value) (FMC_RMW_PFB0CR(base, FMC_PFB0CR_B0IPE_MASK, FMC_PFB0CR_B0IPE(value)))
#define FMC_BWR_PFB0CR_B0IPE(base, value) (BME_BFI32(&FMC_PFB0CR_REG(base), ((uint32_t)(value) << FMC_PFB0CR_B0IPE_SHIFT), FMC_PFB0CR_B0IPE_SHIFT, FMC_PFB0CR_B0IPE_WIDTH))
/*@}*/

/*!
 * @name Register FMC_PFB0CR, field B0DPE[2] (RW)
 *
 * This bit controls whether prefetches (or speculative accesses) are initiated
 * in response to data references.
 *
 * Values:
 * - 0b0 - Do not prefetch in response to data references.
 * - 0b1 - Enable prefetches in response to data references.
 */
/*@{*/
/*! @brief Read current value of the FMC_PFB0CR_B0DPE field. */
#define FMC_RD_PFB0CR_B0DPE(base) ((FMC_PFB0CR_REG(base) & FMC_PFB0CR_B0DPE_MASK) >> FMC_PFB0CR_B0DPE_SHIFT)
#define FMC_BRD_PFB0CR_B0DPE(base) (BME_UBFX32(&FMC_PFB0CR_REG(base), FMC_PFB0CR_B0DPE_SHIFT, FMC_PFB0CR_B0DPE_WIDTH))

/*! @brief Set the B0DPE field to a new value. */
#define FMC_WR_PFB0CR_B0DPE(base, value) (FMC_RMW_PFB0CR(base, FMC_PFB0CR_B0DPE_MASK, FMC_PFB0CR_B0DPE(value)))
#define FMC_BWR_PFB0CR_B0DPE(base, value) (BME_BFI32(&FMC_PFB0CR_REG(base), ((uint32_t)(value) << FMC_PFB0CR_B0DPE_SHIFT), FMC_PFB0CR_B0DPE_SHIFT, FMC_PFB0CR_B0DPE_WIDTH))
/*@}*/

/*!
 * @name Register FMC_PFB0CR, field B0ICE[3] (RW)
 *
 * This bit controls whether instruction fetches are loaded into the cache.
 *
 * Values:
 * - 0b0 - Do not cache instruction fetches.
 * - 0b1 - Cache instruction fetches.
 */
/*@{*/
/*! @brief Read current value of the FMC_PFB0CR_B0ICE field. */
#define FMC_RD_PFB0CR_B0ICE(base) ((FMC_PFB0CR_REG(base) & FMC_PFB0CR_B0ICE_MASK) >> FMC_PFB0CR_B0ICE_SHIFT)
#define FMC_BRD_PFB0CR_B0ICE(base) (BME_UBFX32(&FMC_PFB0CR_REG(base), FMC_PFB0CR_B0ICE_SHIFT, FMC_PFB0CR_B0ICE_WIDTH))

/*! @brief Set the B0ICE field to a new value. */
#define FMC_WR_PFB0CR_B0ICE(base, value) (FMC_RMW_PFB0CR(base, FMC_PFB0CR_B0ICE_MASK, FMC_PFB0CR_B0ICE(value)))
#define FMC_BWR_PFB0CR_B0ICE(base, value) (BME_BFI32(&FMC_PFB0CR_REG(base), ((uint32_t)(value) << FMC_PFB0CR_B0ICE_SHIFT), FMC_PFB0CR_B0ICE_SHIFT, FMC_PFB0CR_B0ICE_WIDTH))
/*@}*/

/*!
 * @name Register FMC_PFB0CR, field B0DCE[4] (RW)
 *
 * This bit controls whether data references are loaded into the cache.
 *
 * Values:
 * - 0b0 - Do not cache data references.
 * - 0b1 - Cache data references.
 */
/*@{*/
/*! @brief Read current value of the FMC_PFB0CR_B0DCE field. */
#define FMC_RD_PFB0CR_B0DCE(base) ((FMC_PFB0CR_REG(base) & FMC_PFB0CR_B0DCE_MASK) >> FMC_PFB0CR_B0DCE_SHIFT)
#define FMC_BRD_PFB0CR_B0DCE(base) (BME_UBFX32(&FMC_PFB0CR_REG(base), FMC_PFB0CR_B0DCE_SHIFT, FMC_PFB0CR_B0DCE_WIDTH))

/*! @brief Set the B0DCE field to a new value. */
#define FMC_WR_PFB0CR_B0DCE(base, value) (FMC_RMW_PFB0CR(base, FMC_PFB0CR_B0DCE_MASK, FMC_PFB0CR_B0DCE(value)))
#define FMC_BWR_PFB0CR_B0DCE(base, value) (BME_BFI32(&FMC_PFB0CR_REG(base), ((uint32_t)(value) << FMC_PFB0CR_B0DCE_SHIFT), FMC_PFB0CR_B0DCE_SHIFT, FMC_PFB0CR_B0DCE_WIDTH))
/*@}*/

/*!
 * @name Register FMC_PFB0CR, field CRC[7:5] (RW)
 *
 * This 3-bit field defines the replacement algorithm for accesses that are
 * cached.
 *
 * Values:
 * - 0b000 - LRU replacement algorithm per set across all four ways
 * - 0b001 - Reserved
 * - 0b010 - Independent LRU with ways [0-1] for ifetches, [2-3] for data
 * - 0b011 - Independent LRU with ways [0-2] for ifetches, [3] for data
 * - 0b1xx - Reserved
 */
/*@{*/
/*! @brief Read current value of the FMC_PFB0CR_CRC field. */
#define FMC_RD_PFB0CR_CRC(base) ((FMC_PFB0CR_REG(base) & FMC_PFB0CR_CRC_MASK) >> FMC_PFB0CR_CRC_SHIFT)
#define FMC_BRD_PFB0CR_CRC(base) (BME_UBFX32(&FMC_PFB0CR_REG(base), FMC_PFB0CR_CRC_SHIFT, FMC_PFB0CR_CRC_WIDTH))

/*! @brief Set the CRC field to a new value. */
#define FMC_WR_PFB0CR_CRC(base, value) (FMC_RMW_PFB0CR(base, FMC_PFB0CR_CRC_MASK, FMC_PFB0CR_CRC(value)))
#define FMC_BWR_PFB0CR_CRC(base, value) (BME_BFI32(&FMC_PFB0CR_REG(base), ((uint32_t)(value) << FMC_PFB0CR_CRC_SHIFT), FMC_PFB0CR_CRC_SHIFT, FMC_PFB0CR_CRC_WIDTH))
/*@}*/

/*!
 * @name Register FMC_PFB0CR, field B0MW[18:17] (RO)
 *
 * This read-only field defines the width of the bank 0 memory.
 *
 * Values:
 * - 0b00 - 32 bits
 * - 0b01 - 64 bits
 * - 0b10 - 128 bits
 * - 0b11 - Reserved
 */
/*@{*/
/*! @brief Read current value of the FMC_PFB0CR_B0MW field. */
#define FMC_RD_PFB0CR_B0MW(base) ((FMC_PFB0CR_REG(base) & FMC_PFB0CR_B0MW_MASK) >> FMC_PFB0CR_B0MW_SHIFT)
#define FMC_BRD_PFB0CR_B0MW(base) (BME_UBFX32(&FMC_PFB0CR_REG(base), FMC_PFB0CR_B0MW_SHIFT, FMC_PFB0CR_B0MW_WIDTH))
/*@}*/

/*!
 * @name Register FMC_PFB0CR, field S_B_INV[19] (WORZ)
 *
 * This bit determines if the FMC's prefetch speculation buffer and the single
 * entry page buffer are to be invalidated (cleared). When this bit is written,
 * the speculation buffer and single entry buffer are immediately cleared. This bit
 * always reads as zero.
 *
 * Values:
 * - 0b0 - Speculation buffer and single entry buffer are not affected.
 * - 0b1 - Invalidate (clear) speculation buffer and single entry buffer.
 */
/*@{*/
/*! @brief Set the S_B_INV field to a new value. */
#define FMC_WR_PFB0CR_S_B_INV(base, value) (FMC_RMW_PFB0CR(base, FMC_PFB0CR_S_B_INV_MASK, FMC_PFB0CR_S_B_INV(value)))
#define FMC_BWR_PFB0CR_S_B_INV(base, value) (BME_BFI32(&FMC_PFB0CR_REG(base), ((uint32_t)(value) << FMC_PFB0CR_S_B_INV_SHIFT), FMC_PFB0CR_S_B_INV_SHIFT, FMC_PFB0CR_S_B_INV_WIDTH))
/*@}*/

/*!
 * @name Register FMC_PFB0CR, field CINV_WAY[23:20] (WORZ)
 *
 * These bits determine if the given cache way is to be invalidated (cleared).
 * When a bit within this field is written, the corresponding cache way is
 * immediately invalidated: the way's tag, data, and valid contents are cleared. This
 * field always reads as zero. Cache invalidation takes precedence over locking.
 * The cache is invalidated by system reset. System software is required to
 * maintain memory coherency when any segment of the flash memory is programmed or
 * erased. Accordingly, cache invalidations must occur after a programming or erase
 * event is completed and before the new memory image is accessed. The bit setting
 * definitions are for each bit in the field.
 *
 * Values:
 * - 0b0000 - No cache way invalidation for the corresponding cache
 * - 0b0001 - Invalidate cache way for the corresponding cache: clear the tag,
 *     data, and vld bits of ways selected
 */
/*@{*/
/*! @brief Set the CINV_WAY field to a new value. */
#define FMC_WR_PFB0CR_CINV_WAY(base, value) (FMC_RMW_PFB0CR(base, FMC_PFB0CR_CINV_WAY_MASK, FMC_PFB0CR_CINV_WAY(value)))
#define FMC_BWR_PFB0CR_CINV_WAY(base, value) (BME_BFI32(&FMC_PFB0CR_REG(base), ((uint32_t)(value) << FMC_PFB0CR_CINV_WAY_SHIFT), FMC_PFB0CR_CINV_WAY_SHIFT, FMC_PFB0CR_CINV_WAY_WIDTH))
/*@}*/

/*!
 * @name Register FMC_PFB0CR, field CLCK_WAY[27:24] (RW)
 *
 * These bits determine if the given cache way is locked such that its contents
 * will not be displaced by future misses. The bit setting definitions are for
 * each bit in the field.
 *
 * Values:
 * - 0b0000 - Cache way is unlocked and may be displaced
 * - 0b0001 - Cache way is locked and its contents are not displaced
 */
/*@{*/
/*! @brief Read current value of the FMC_PFB0CR_CLCK_WAY field. */
#define FMC_RD_PFB0CR_CLCK_WAY(base) ((FMC_PFB0CR_REG(base) & FMC_PFB0CR_CLCK_WAY_MASK) >> FMC_PFB0CR_CLCK_WAY_SHIFT)
#define FMC_BRD_PFB0CR_CLCK_WAY(base) (BME_UBFX32(&FMC_PFB0CR_REG(base), FMC_PFB0CR_CLCK_WAY_SHIFT, FMC_PFB0CR_CLCK_WAY_WIDTH))

/*! @brief Set the CLCK_WAY field to a new value. */
#define FMC_WR_PFB0CR_CLCK_WAY(base, value) (FMC_RMW_PFB0CR(base, FMC_PFB0CR_CLCK_WAY_MASK, FMC_PFB0CR_CLCK_WAY(value)))
#define FMC_BWR_PFB0CR_CLCK_WAY(base, value) (BME_BFI32(&FMC_PFB0CR_REG(base), ((uint32_t)(value) << FMC_PFB0CR_CLCK_WAY_SHIFT), FMC_PFB0CR_CLCK_WAY_SHIFT, FMC_PFB0CR_CLCK_WAY_WIDTH))
/*@}*/

/*!
 * @name Register FMC_PFB0CR, field B0RWSC[31:28] (RO)
 *
 * This read-only field defines the number of wait states required to access the
 * bank 0 flash memory. The relationship between the read access time of the
 * flash array (expressed in system clock cycles) and RWSC is defined as: Access
 * time of flash array [system clocks] = RWSC + 1 The FMC automatically calculates
 * this value based on the ratio of the system clock speed to the flash clock
 * speed. For example, when this ratio is 4:1, the field's value is 3h.
 */
/*@{*/
/*! @brief Read current value of the FMC_PFB0CR_B0RWSC field. */
#define FMC_RD_PFB0CR_B0RWSC(base) ((FMC_PFB0CR_REG(base) & FMC_PFB0CR_B0RWSC_MASK) >> FMC_PFB0CR_B0RWSC_SHIFT)
#define FMC_BRD_PFB0CR_B0RWSC(base) (BME_UBFX32(&FMC_PFB0CR_REG(base), FMC_PFB0CR_B0RWSC_SHIFT, FMC_PFB0CR_B0RWSC_WIDTH))
/*@}*/

/*******************************************************************************
 * FMC_RESERVED - Reserved
 ******************************************************************************/

/*!
 * @brief FMC_RESERVED - Reserved (RO)
 *
 * Reset value: 0x30000000U
 *
 * This register address is reserved.
 */
/*!
 * @name Constants and macros for entire FMC_RESERVED register
 */
/*@{*/
#define FMC_RD_RESERVED(base)    (FMC_RESERVED_REG(base))
/*@}*/

/*******************************************************************************
 * FMC_TAGVDW0S - Cache Tag Storage
 ******************************************************************************/

/*!
 * @brief FMC_TAGVDW0S - Cache Tag Storage (RW)
 *
 * Reset value: 0x00000000U
 *
 * The 128-entry cache is a 4-way, set-associative cache with 4 sets. The ways
 * are numbered 0-3 and the sets are numbered 0-3. In TAGVDWxSy, x denotes the
 * way, and y denotes the set. This section represents tag/vld information for all
 * sets (n=0-3) in way 0.
 */
/*!
 * @name Constants and macros for entire FMC_TAGVDW0S register
 */
/*@{*/
#define FMC_RD_TAGVDW0S(base, index) (FMC_TAGVDW0S_REG(base, index))
#define FMC_WR_TAGVDW0S(base, index, value) (FMC_TAGVDW0S_REG(base, index) = (value))
#define FMC_RMW_TAGVDW0S(base, index, mask, value) (FMC_WR_TAGVDW0S(base, index, (FMC_RD_TAGVDW0S(base, index) & ~(mask)) | (value)))
#define FMC_SET_TAGVDW0S(base, index, value) (BME_OR32(&FMC_TAGVDW0S_REG(base, index), (uint32_t)(value)))
#define FMC_CLR_TAGVDW0S(base, index, value) (BME_AND32(&FMC_TAGVDW0S_REG(base, index), (uint32_t)(~(value))))
#define FMC_TOG_TAGVDW0S(base, index, value) (BME_XOR32(&FMC_TAGVDW0S_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FMC_TAGVDW0S bitfields
 */

/*!
 * @name Register FMC_TAGVDW0S, field valid[0] (RW)
 */
/*@{*/
/*! @brief Read current value of the FMC_TAGVDW0S_valid field. */
#define FMC_RD_TAGVDW0S_valid(base, index) ((FMC_TAGVDW0S_REG(base, index) & FMC_TAGVDW0S_valid_MASK) >> FMC_TAGVDW0S_valid_SHIFT)
#define FMC_BRD_TAGVDW0S_valid(base, index) (BME_UBFX32(&FMC_TAGVDW0S_REG(base, index), FMC_TAGVDW0S_valid_SHIFT, FMC_TAGVDW0S_valid_WIDTH))

/*! @brief Set the valid field to a new value. */
#define FMC_WR_TAGVDW0S_valid(base, index, value) (FMC_RMW_TAGVDW0S(base, index, FMC_TAGVDW0S_valid_MASK, FMC_TAGVDW0S_valid(value)))
#define FMC_BWR_TAGVDW0S_valid(base, index, value) (BME_BFI32(&FMC_TAGVDW0S_REG(base, index), ((uint32_t)(value) << FMC_TAGVDW0S_valid_SHIFT), FMC_TAGVDW0S_valid_SHIFT, FMC_TAGVDW0S_valid_WIDTH))
/*@}*/

/*!
 * @name Register FMC_TAGVDW0S, field cache_tag[19:6] (RW)
 */
/*@{*/
/*! @brief Read current value of the FMC_TAGVDW0S_cache_tag field. */
#define FMC_RD_TAGVDW0S_cache_tag(base, index) ((FMC_TAGVDW0S_REG(base, index) & FMC_TAGVDW0S_cache_tag_MASK) >> FMC_TAGVDW0S_cache_tag_SHIFT)
#define FMC_BRD_TAGVDW0S_cache_tag(base, index) (FMC_RD_TAGVDW0S_cache_tag(base, index))

/*! @brief Set the cache_tag field to a new value. */
#define FMC_WR_TAGVDW0S_cache_tag(base, index, value) (FMC_RMW_TAGVDW0S(base, index, FMC_TAGVDW0S_cache_tag_MASK, FMC_TAGVDW0S_cache_tag(value)))
#define FMC_BWR_TAGVDW0S_cache_tag(base, index, value) (FMC_WR_TAGVDW0S_cache_tag(base, index, value))
/*@}*/

/*******************************************************************************
 * FMC_TAGVDW1S - Cache Tag Storage
 ******************************************************************************/

/*!
 * @brief FMC_TAGVDW1S - Cache Tag Storage (RW)
 *
 * Reset value: 0x00000000U
 *
 * The 128-entry cache is a 4-way, set-associative cache with 4 sets. The ways
 * are numbered 0-3 and the sets are numbered 0-3. In TAGVDWxSy, x denotes the
 * way, and y denotes the set. This section represents tag/vld information for all
 * sets (n=0-3) in way 1.
 */
/*!
 * @name Constants and macros for entire FMC_TAGVDW1S register
 */
/*@{*/
#define FMC_RD_TAGVDW1S(base, index) (FMC_TAGVDW1S_REG(base, index))
#define FMC_WR_TAGVDW1S(base, index, value) (FMC_TAGVDW1S_REG(base, index) = (value))
#define FMC_RMW_TAGVDW1S(base, index, mask, value) (FMC_WR_TAGVDW1S(base, index, (FMC_RD_TAGVDW1S(base, index) & ~(mask)) | (value)))
#define FMC_SET_TAGVDW1S(base, index, value) (BME_OR32(&FMC_TAGVDW1S_REG(base, index), (uint32_t)(value)))
#define FMC_CLR_TAGVDW1S(base, index, value) (BME_AND32(&FMC_TAGVDW1S_REG(base, index), (uint32_t)(~(value))))
#define FMC_TOG_TAGVDW1S(base, index, value) (BME_XOR32(&FMC_TAGVDW1S_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FMC_TAGVDW1S bitfields
 */

/*!
 * @name Register FMC_TAGVDW1S, field valid[0] (RW)
 */
/*@{*/
/*! @brief Read current value of the FMC_TAGVDW1S_valid field. */
#define FMC_RD_TAGVDW1S_valid(base, index) ((FMC_TAGVDW1S_REG(base, index) & FMC_TAGVDW1S_valid_MASK) >> FMC_TAGVDW1S_valid_SHIFT)
#define FMC_BRD_TAGVDW1S_valid(base, index) (BME_UBFX32(&FMC_TAGVDW1S_REG(base, index), FMC_TAGVDW1S_valid_SHIFT, FMC_TAGVDW1S_valid_WIDTH))

/*! @brief Set the valid field to a new value. */
#define FMC_WR_TAGVDW1S_valid(base, index, value) (FMC_RMW_TAGVDW1S(base, index, FMC_TAGVDW1S_valid_MASK, FMC_TAGVDW1S_valid(value)))
#define FMC_BWR_TAGVDW1S_valid(base, index, value) (BME_BFI32(&FMC_TAGVDW1S_REG(base, index), ((uint32_t)(value) << FMC_TAGVDW1S_valid_SHIFT), FMC_TAGVDW1S_valid_SHIFT, FMC_TAGVDW1S_valid_WIDTH))
/*@}*/

/*!
 * @name Register FMC_TAGVDW1S, field cache_tag[19:6] (RW)
 */
/*@{*/
/*! @brief Read current value of the FMC_TAGVDW1S_cache_tag field. */
#define FMC_RD_TAGVDW1S_cache_tag(base, index) ((FMC_TAGVDW1S_REG(base, index) & FMC_TAGVDW1S_cache_tag_MASK) >> FMC_TAGVDW1S_cache_tag_SHIFT)
#define FMC_BRD_TAGVDW1S_cache_tag(base, index) (FMC_RD_TAGVDW1S_cache_tag(base, index))

/*! @brief Set the cache_tag field to a new value. */
#define FMC_WR_TAGVDW1S_cache_tag(base, index, value) (FMC_RMW_TAGVDW1S(base, index, FMC_TAGVDW1S_cache_tag_MASK, FMC_TAGVDW1S_cache_tag(value)))
#define FMC_BWR_TAGVDW1S_cache_tag(base, index, value) (FMC_WR_TAGVDW1S_cache_tag(base, index, value))
/*@}*/

/*******************************************************************************
 * FMC_TAGVDW2S - Cache Tag Storage
 ******************************************************************************/

/*!
 * @brief FMC_TAGVDW2S - Cache Tag Storage (RW)
 *
 * Reset value: 0x00000000U
 *
 * The 128-entry cache is a 4-way, set-associative cache with 4 sets. The ways
 * are numbered 0-3 and the sets are numbered 0-3. In TAGVDWxSy, x denotes the
 * way, and y denotes the set. This section represents tag/vld information for all
 * sets (n=0-3) in way 2.
 */
/*!
 * @name Constants and macros for entire FMC_TAGVDW2S register
 */
/*@{*/
#define FMC_RD_TAGVDW2S(base, index) (FMC_TAGVDW2S_REG(base, index))
#define FMC_WR_TAGVDW2S(base, index, value) (FMC_TAGVDW2S_REG(base, index) = (value))
#define FMC_RMW_TAGVDW2S(base, index, mask, value) (FMC_WR_TAGVDW2S(base, index, (FMC_RD_TAGVDW2S(base, index) & ~(mask)) | (value)))
#define FMC_SET_TAGVDW2S(base, index, value) (BME_OR32(&FMC_TAGVDW2S_REG(base, index), (uint32_t)(value)))
#define FMC_CLR_TAGVDW2S(base, index, value) (BME_AND32(&FMC_TAGVDW2S_REG(base, index), (uint32_t)(~(value))))
#define FMC_TOG_TAGVDW2S(base, index, value) (BME_XOR32(&FMC_TAGVDW2S_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FMC_TAGVDW2S bitfields
 */

/*!
 * @name Register FMC_TAGVDW2S, field valid[0] (RW)
 */
/*@{*/
/*! @brief Read current value of the FMC_TAGVDW2S_valid field. */
#define FMC_RD_TAGVDW2S_valid(base, index) ((FMC_TAGVDW2S_REG(base, index) & FMC_TAGVDW2S_valid_MASK) >> FMC_TAGVDW2S_valid_SHIFT)
#define FMC_BRD_TAGVDW2S_valid(base, index) (BME_UBFX32(&FMC_TAGVDW2S_REG(base, index), FMC_TAGVDW2S_valid_SHIFT, FMC_TAGVDW2S_valid_WIDTH))

/*! @brief Set the valid field to a new value. */
#define FMC_WR_TAGVDW2S_valid(base, index, value) (FMC_RMW_TAGVDW2S(base, index, FMC_TAGVDW2S_valid_MASK, FMC_TAGVDW2S_valid(value)))
#define FMC_BWR_TAGVDW2S_valid(base, index, value) (BME_BFI32(&FMC_TAGVDW2S_REG(base, index), ((uint32_t)(value) << FMC_TAGVDW2S_valid_SHIFT), FMC_TAGVDW2S_valid_SHIFT, FMC_TAGVDW2S_valid_WIDTH))
/*@}*/

/*!
 * @name Register FMC_TAGVDW2S, field cache_tag[19:6] (RW)
 */
/*@{*/
/*! @brief Read current value of the FMC_TAGVDW2S_cache_tag field. */
#define FMC_RD_TAGVDW2S_cache_tag(base, index) ((FMC_TAGVDW2S_REG(base, index) & FMC_TAGVDW2S_cache_tag_MASK) >> FMC_TAGVDW2S_cache_tag_SHIFT)
#define FMC_BRD_TAGVDW2S_cache_tag(base, index) (FMC_RD_TAGVDW2S_cache_tag(base, index))

/*! @brief Set the cache_tag field to a new value. */
#define FMC_WR_TAGVDW2S_cache_tag(base, index, value) (FMC_RMW_TAGVDW2S(base, index, FMC_TAGVDW2S_cache_tag_MASK, FMC_TAGVDW2S_cache_tag(value)))
#define FMC_BWR_TAGVDW2S_cache_tag(base, index, value) (FMC_WR_TAGVDW2S_cache_tag(base, index, value))
/*@}*/

/*******************************************************************************
 * FMC_TAGVDW3S - Cache Tag Storage
 ******************************************************************************/

/*!
 * @brief FMC_TAGVDW3S - Cache Tag Storage (RW)
 *
 * Reset value: 0x00000000U
 *
 * The 128-entry cache is a 4-way, set-associative cache with 4 sets. The ways
 * are numbered 0-3 and the sets are numbered 0-3. In TAGVDWxSy, x denotes the
 * way, and y denotes the set. This section represents tag/vld information for all
 * sets (n=0-3) in way 3.
 */
/*!
 * @name Constants and macros for entire FMC_TAGVDW3S register
 */
/*@{*/
#define FMC_RD_TAGVDW3S(base, index) (FMC_TAGVDW3S_REG(base, index))
#define FMC_WR_TAGVDW3S(base, index, value) (FMC_TAGVDW3S_REG(base, index) = (value))
#define FMC_RMW_TAGVDW3S(base, index, mask, value) (FMC_WR_TAGVDW3S(base, index, (FMC_RD_TAGVDW3S(base, index) & ~(mask)) | (value)))
#define FMC_SET_TAGVDW3S(base, index, value) (BME_OR32(&FMC_TAGVDW3S_REG(base, index), (uint32_t)(value)))
#define FMC_CLR_TAGVDW3S(base, index, value) (BME_AND32(&FMC_TAGVDW3S_REG(base, index), (uint32_t)(~(value))))
#define FMC_TOG_TAGVDW3S(base, index, value) (BME_XOR32(&FMC_TAGVDW3S_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FMC_TAGVDW3S bitfields
 */

/*!
 * @name Register FMC_TAGVDW3S, field valid[0] (RW)
 */
/*@{*/
/*! @brief Read current value of the FMC_TAGVDW3S_valid field. */
#define FMC_RD_TAGVDW3S_valid(base, index) ((FMC_TAGVDW3S_REG(base, index) & FMC_TAGVDW3S_valid_MASK) >> FMC_TAGVDW3S_valid_SHIFT)
#define FMC_BRD_TAGVDW3S_valid(base, index) (BME_UBFX32(&FMC_TAGVDW3S_REG(base, index), FMC_TAGVDW3S_valid_SHIFT, FMC_TAGVDW3S_valid_WIDTH))

/*! @brief Set the valid field to a new value. */
#define FMC_WR_TAGVDW3S_valid(base, index, value) (FMC_RMW_TAGVDW3S(base, index, FMC_TAGVDW3S_valid_MASK, FMC_TAGVDW3S_valid(value)))
#define FMC_BWR_TAGVDW3S_valid(base, index, value) (BME_BFI32(&FMC_TAGVDW3S_REG(base, index), ((uint32_t)(value) << FMC_TAGVDW3S_valid_SHIFT), FMC_TAGVDW3S_valid_SHIFT, FMC_TAGVDW3S_valid_WIDTH))
/*@}*/

/*!
 * @name Register FMC_TAGVDW3S, field cache_tag[19:6] (RW)
 */
/*@{*/
/*! @brief Read current value of the FMC_TAGVDW3S_cache_tag field. */
#define FMC_RD_TAGVDW3S_cache_tag(base, index) ((FMC_TAGVDW3S_REG(base, index) & FMC_TAGVDW3S_cache_tag_MASK) >> FMC_TAGVDW3S_cache_tag_SHIFT)
#define FMC_BRD_TAGVDW3S_cache_tag(base, index) (FMC_RD_TAGVDW3S_cache_tag(base, index))

/*! @brief Set the cache_tag field to a new value. */
#define FMC_WR_TAGVDW3S_cache_tag(base, index, value) (FMC_RMW_TAGVDW3S(base, index, FMC_TAGVDW3S_cache_tag_MASK, FMC_TAGVDW3S_cache_tag(value)))
#define FMC_BWR_TAGVDW3S_cache_tag(base, index, value) (FMC_WR_TAGVDW3S_cache_tag(base, index, value))
/*@}*/

/*******************************************************************************
 * FMC_DATA_UM - Cache Data Storage (uppermost word)
 ******************************************************************************/

/*!
 * @brief FMC_DATA_UM - Cache Data Storage (uppermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4
 * sets. The ways are numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM,
 * DATAWxSyMU, DATAWxSyML, and DATAWxSyLM, x denotes the way, y denotes the set,
 * and the final two letters identify the word: UM (uppermost), MU (mid-upper),
 * ML (mid-lower), and LM (lowermost). This section represents data for the
 * uppermost word (bits [127:96]) of all 4 sets (n=0-3) in way 0.
 */
/*!
 * @name Constants and macros for entire FMC_DATA_UM register
 */
/*@{*/
#define FMC_RD_DATA_UM(base, index, index2) (FMC_DATA_UM_REG(base, index, index2))
#define FMC_WR_DATA_UM(base, index, index2, value) (FMC_DATA_UM_REG(base, index, index2) = (value))
#define FMC_RMW_DATA_UM(base, index, index2, mask, value) (FMC_WR_DATA_UM(base, index, index2, (FMC_RD_DATA_UM(base, index, index2) & ~(mask)) | (value)))
#define FMC_SET_DATA_UM(base, index, index2, value) (BME_OR32(&FMC_DATA_UM_REG(base, index, index2), (uint32_t)(value)))
#define FMC_CLR_DATA_UM(base, index, index2, value) (BME_AND32(&FMC_DATA_UM_REG(base, index, index2), (uint32_t)(~(value))))
#define FMC_TOG_DATA_UM(base, index, index2, value) (BME_XOR32(&FMC_DATA_UM_REG(base, index, index2), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * FMC_DATA_MU - Cache Data Storage (mid-upper word)
 ******************************************************************************/

/*!
 * @brief FMC_DATA_MU - Cache Data Storage (mid-upper word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4
 * sets. The ways are numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM,
 * DATAWxSyMU, DATAWxSyML, and DATAWxSyLM, x denotes the way, y denotes the set,
 * and the final two letters identify the word: UM (uppermost), MU (mid-upper),
 * ML (mid-lower), and LM (lowermost). This section represents data for the
 * mid-upper word (bits [95:64]) of all 4 sets (n=0-3) in way 0.
 */
/*!
 * @name Constants and macros for entire FMC_DATA_MU register
 */
/*@{*/
#define FMC_RD_DATA_MU(base, index, index2) (FMC_DATA_MU_REG(base, index, index2))
#define FMC_WR_DATA_MU(base, index, index2, value) (FMC_DATA_MU_REG(base, index, index2) = (value))
#define FMC_RMW_DATA_MU(base, index, index2, mask, value) (FMC_WR_DATA_MU(base, index, index2, (FMC_RD_DATA_MU(base, index, index2) & ~(mask)) | (value)))
#define FMC_SET_DATA_MU(base, index, index2, value) (BME_OR32(&FMC_DATA_MU_REG(base, index, index2), (uint32_t)(value)))
#define FMC_CLR_DATA_MU(base, index, index2, value) (BME_AND32(&FMC_DATA_MU_REG(base, index, index2), (uint32_t)(~(value))))
#define FMC_TOG_DATA_MU(base, index, index2, value) (BME_XOR32(&FMC_DATA_MU_REG(base, index, index2), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * FMC_DATA_ML - Cache Data Storage (mid-lower word)
 ******************************************************************************/

/*!
 * @brief FMC_DATA_ML - Cache Data Storage (mid-lower word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4
 * sets. The ways are numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM,
 * DATAWxSyMU, DATAWxSyML, and DATAWxSyLM, x denotes the way, y denotes the set,
 * and the final two letters identify the word: UM (uppermost), MU (mid-upper),
 * ML (mid-lower), and LM (lowermost). This section represents data for the
 * mid-lower word (bits [63:32]) of all 4 sets (n=0-3) in way 0.
 */
/*!
 * @name Constants and macros for entire FMC_DATA_ML register
 */
/*@{*/
#define FMC_RD_DATA_ML(base, index, index2) (FMC_DATA_ML_REG(base, index, index2))
#define FMC_WR_DATA_ML(base, index, index2, value) (FMC_DATA_ML_REG(base, index, index2) = (value))
#define FMC_RMW_DATA_ML(base, index, index2, mask, value) (FMC_WR_DATA_ML(base, index, index2, (FMC_RD_DATA_ML(base, index, index2) & ~(mask)) | (value)))
#define FMC_SET_DATA_ML(base, index, index2, value) (BME_OR32(&FMC_DATA_ML_REG(base, index, index2), (uint32_t)(value)))
#define FMC_CLR_DATA_ML(base, index, index2, value) (BME_AND32(&FMC_DATA_ML_REG(base, index, index2), (uint32_t)(~(value))))
#define FMC_TOG_DATA_ML(base, index, index2, value) (BME_XOR32(&FMC_DATA_ML_REG(base, index, index2), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * FMC_DATA_LM - Cache Data Storage (lowermost word)
 ******************************************************************************/

/*!
 * @brief FMC_DATA_LM - Cache Data Storage (lowermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4
 * sets. The ways are numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM,
 * DATAWxSyMU, DATAWxSyML, and DATAWxSyLM, x denotes the way, y denotes the set,
 * and the final two letters identify the word: UM (uppermost), MU (mid-upper),
 * ML (mid-lower), and LM (lowermost). This section represents data for the
 * lowermost word (bits [31:0]) of all 4 sets (n=0-3) in way 0.
 */
/*!
 * @name Constants and macros for entire FMC_DATA_LM register
 */
/*@{*/
#define FMC_RD_DATA_LM(base, index, index2) (FMC_DATA_LM_REG(base, index, index2))
#define FMC_WR_DATA_LM(base, index, index2, value) (FMC_DATA_LM_REG(base, index, index2) = (value))
#define FMC_RMW_DATA_LM(base, index, index2, mask, value) (FMC_WR_DATA_LM(base, index, index2, (FMC_RD_DATA_LM(base, index, index2) & ~(mask)) | (value)))
#define FMC_SET_DATA_LM(base, index, index2, value) (BME_OR32(&FMC_DATA_LM_REG(base, index, index2), (uint32_t)(value)))
#define FMC_CLR_DATA_LM(base, index, index2, value) (BME_AND32(&FMC_DATA_LM_REG(base, index, index2), (uint32_t)(~(value))))
#define FMC_TOG_DATA_LM(base, index, index2, value) (BME_XOR32(&FMC_DATA_LM_REG(base, index, index2), (uint32_t)(value)))
/*@}*/

/*
 * MK82F25615 FTFA
 *
 * Flash Memory Interface
 *
 * Registers defined in this header file:
 * - FTFA_FSTAT - Flash Status Register
 * - FTFA_FCNFG - Flash Configuration Register
 * - FTFA_FSEC - Flash Security Register
 * - FTFA_FOPT - Flash Option Register
 * - FTFA_FCCOB3 - Flash Common Command Object Registers
 * - FTFA_FCCOB2 - Flash Common Command Object Registers
 * - FTFA_FCCOB1 - Flash Common Command Object Registers
 * - FTFA_FCCOB0 - Flash Common Command Object Registers
 * - FTFA_FCCOB7 - Flash Common Command Object Registers
 * - FTFA_FCCOB6 - Flash Common Command Object Registers
 * - FTFA_FCCOB5 - Flash Common Command Object Registers
 * - FTFA_FCCOB4 - Flash Common Command Object Registers
 * - FTFA_FCCOBB - Flash Common Command Object Registers
 * - FTFA_FCCOBA - Flash Common Command Object Registers
 * - FTFA_FCCOB9 - Flash Common Command Object Registers
 * - FTFA_FCCOB8 - Flash Common Command Object Registers
 * - FTFA_FPROT3 - Program Flash Protection Registers
 * - FTFA_FPROT2 - Program Flash Protection Registers
 * - FTFA_FPROT1 - Program Flash Protection Registers
 * - FTFA_FPROT0 - Program Flash Protection Registers
 * - FTFA_XACCH3 - Execute-only Access Registers
 * - FTFA_XACCH2 - Execute-only Access Registers
 * - FTFA_XACCH1 - Execute-only Access Registers
 * - FTFA_XACCH0 - Execute-only Access Registers
 * - FTFA_XACCL3 - Execute-only Access Registers
 * - FTFA_XACCL2 - Execute-only Access Registers
 * - FTFA_XACCL1 - Execute-only Access Registers
 * - FTFA_XACCL0 - Execute-only Access Registers
 * - FTFA_SACCH3 - Supervisor-only Access Registers
 * - FTFA_SACCH2 - Supervisor-only Access Registers
 * - FTFA_SACCH1 - Supervisor-only Access Registers
 * - FTFA_SACCH0 - Supervisor-only Access Registers
 * - FTFA_SACCL3 - Supervisor-only Access Registers
 * - FTFA_SACCL2 - Supervisor-only Access Registers
 * - FTFA_SACCL1 - Supervisor-only Access Registers
 * - FTFA_SACCL0 - Supervisor-only Access Registers
 * - FTFA_FACSS - Flash Access Segment Size Register
 * - FTFA_FACSN - Flash Access Segment Number Register
 */

#define FTFA_INSTANCE_COUNT (1U) /*!< Number of instances of the FTFA module. */
#define FTFA_IDX (0U) /*!< Instance number for FTFA. */

/*******************************************************************************
 * FTFA_FSTAT - Flash Status Register
 ******************************************************************************/

/*!
 * @brief FTFA_FSTAT - Flash Status Register (RW)
 *
 * Reset value: 0x00U
 *
 * The FSTAT register reports the operational status of the flash memory module.
 * The CCIF, RDCOLERR, ACCERR, and FPVIOL bits are readable and writable. The
 * MGSTAT0 bit is read only. The unassigned bits read 0 and are not writable. When
 * set, the Access Error (ACCERR) and Flash Protection Violation (FPVIOL) bits in
 * this register prevent the launch of any more commands until the flag is
 * cleared (by writing a one to it).
 */
/*!
 * @name Constants and macros for entire FTFA_FSTAT register
 */
/*@{*/
#define FTFA_RD_FSTAT(base)      (FTFA_FSTAT_REG(base))
#define FTFA_WR_FSTAT(base, value) (FTFA_FSTAT_REG(base) = (value))
#define FTFA_RMW_FSTAT(base, mask, value) (FTFA_WR_FSTAT(base, (FTFA_RD_FSTAT(base) & ~(mask)) | (value)))
#define FTFA_SET_FSTAT(base, value) (BME_OR8(&FTFA_FSTAT_REG(base), (uint8_t)(value)))
#define FTFA_CLR_FSTAT(base, value) (BME_AND8(&FTFA_FSTAT_REG(base), (uint8_t)(~(value))))
#define FTFA_TOG_FSTAT(base, value) (BME_XOR8(&FTFA_FSTAT_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTFA_FSTAT bitfields
 */

/*!
 * @name Register FTFA_FSTAT, field MGSTAT0[0] (RO)
 *
 * The MGSTAT0 status flag is set if an error is detected during execution of a
 * flash command or during the flash reset sequence. As a status flag, this field
 * cannot (and need not) be cleared by the user like the other error flags in
 * this register. The value of the MGSTAT0 bit for "command-N" is valid only at the
 * end of the "command-N" execution when CCIF=1 and before the next command has
 * been launched. At some point during the execution of "command-N+1," the
 * previous result is discarded and any previous error is cleared.
 */
/*@{*/
/*! @brief Read current value of the FTFA_FSTAT_MGSTAT0 field. */
#define FTFA_RD_FSTAT_MGSTAT0(base) ((FTFA_FSTAT_REG(base) & FTFA_FSTAT_MGSTAT0_MASK) >> FTFA_FSTAT_MGSTAT0_SHIFT)
#define FTFA_BRD_FSTAT_MGSTAT0(base) (BME_UBFX8(&FTFA_FSTAT_REG(base), FTFA_FSTAT_MGSTAT0_SHIFT, FTFA_FSTAT_MGSTAT0_WIDTH))
/*@}*/

/*!
 * @name Register FTFA_FSTAT, field FPVIOL[4] (W1C)
 *
 * Indicates an attempt was made to program or erase an address in a protected
 * area of program flash memory during a command write sequence . While FPVIOL is
 * set, the CCIF flag cannot be cleared to launch a command. The FPVIOL bit is
 * cleared by writing a 1 to FPVIOL while CCIF is set. Writing a 0 to the FPVIOL
 * bit has no effect.
 *
 * Values:
 * - 0b0 - No protection violation detected
 * - 0b1 - Protection violation detected
 */
/*@{*/
/*! @brief Read current value of the FTFA_FSTAT_FPVIOL field. */
#define FTFA_RD_FSTAT_FPVIOL(base) ((FTFA_FSTAT_REG(base) & FTFA_FSTAT_FPVIOL_MASK) >> FTFA_FSTAT_FPVIOL_SHIFT)
#define FTFA_BRD_FSTAT_FPVIOL(base) (BME_UBFX8(&FTFA_FSTAT_REG(base), FTFA_FSTAT_FPVIOL_SHIFT, FTFA_FSTAT_FPVIOL_WIDTH))

/*! @brief Set the FPVIOL field to a new value. */
#define FTFA_WR_FSTAT_FPVIOL(base, value) (FTFA_RMW_FSTAT(base, (FTFA_FSTAT_FPVIOL_MASK | FTFA_FSTAT_ACCERR_MASK | FTFA_FSTAT_RDCOLERR_MASK | FTFA_FSTAT_CCIF_MASK), FTFA_FSTAT_FPVIOL(value)))
#define FTFA_BWR_FSTAT_FPVIOL(base, value) (BME_BFI8(&FTFA_FSTAT_REG(base), ((uint8_t)(value) << FTFA_FSTAT_FPVIOL_SHIFT), FTFA_FSTAT_FPVIOL_SHIFT, FTFA_FSTAT_FPVIOL_WIDTH))
/*@}*/

/*!
 * @name Register FTFA_FSTAT, field ACCERR[5] (W1C)
 *
 * Indicates an illegal access has occurred to a flash memory resource caused by
 * a violation of the command write sequence or issuing an illegal flash
 * command. While ACCERR is set, the CCIF flag cannot be cleared to launch a command.
 * The ACCERR bit is cleared by writing a 1 to ACCERR while CCIF is set. Writing a
 * 0 to the ACCERR bit has no effect.
 *
 * Values:
 * - 0b0 - No access error detected
 * - 0b1 - Access error detected
 */
/*@{*/
/*! @brief Read current value of the FTFA_FSTAT_ACCERR field. */
#define FTFA_RD_FSTAT_ACCERR(base) ((FTFA_FSTAT_REG(base) & FTFA_FSTAT_ACCERR_MASK) >> FTFA_FSTAT_ACCERR_SHIFT)
#define FTFA_BRD_FSTAT_ACCERR(base) (BME_UBFX8(&FTFA_FSTAT_REG(base), FTFA_FSTAT_ACCERR_SHIFT, FTFA_FSTAT_ACCERR_WIDTH))

/*! @brief Set the ACCERR field to a new value. */
#define FTFA_WR_FSTAT_ACCERR(base, value) (FTFA_RMW_FSTAT(base, (FTFA_FSTAT_ACCERR_MASK | FTFA_FSTAT_FPVIOL_MASK | FTFA_FSTAT_RDCOLERR_MASK | FTFA_FSTAT_CCIF_MASK), FTFA_FSTAT_ACCERR(value)))
#define FTFA_BWR_FSTAT_ACCERR(base, value) (BME_BFI8(&FTFA_FSTAT_REG(base), ((uint8_t)(value) << FTFA_FSTAT_ACCERR_SHIFT), FTFA_FSTAT_ACCERR_SHIFT, FTFA_FSTAT_ACCERR_WIDTH))
/*@}*/

/*!
 * @name Register FTFA_FSTAT, field RDCOLERR[6] (W1C)
 *
 * Indicates that the MCU attempted a read from a flash memory resource that was
 * being manipulated by a flash command (CCIF=0). Any simultaneous access is
 * detected as a collision error by the block arbitration logic. The read data in
 * this case cannot be guaranteed. The RDCOLERR bit is cleared by writing a 1 to
 * it. Writing a 0 to RDCOLERR has no effect.
 *
 * Values:
 * - 0b0 - No collision error detected
 * - 0b1 - Collision error detected
 */
/*@{*/
/*! @brief Read current value of the FTFA_FSTAT_RDCOLERR field. */
#define FTFA_RD_FSTAT_RDCOLERR(base) ((FTFA_FSTAT_REG(base) & FTFA_FSTAT_RDCOLERR_MASK) >> FTFA_FSTAT_RDCOLERR_SHIFT)
#define FTFA_BRD_FSTAT_RDCOLERR(base) (BME_UBFX8(&FTFA_FSTAT_REG(base), FTFA_FSTAT_RDCOLERR_SHIFT, FTFA_FSTAT_RDCOLERR_WIDTH))

/*! @brief Set the RDCOLERR field to a new value. */
#define FTFA_WR_FSTAT_RDCOLERR(base, value) (FTFA_RMW_FSTAT(base, (FTFA_FSTAT_RDCOLERR_MASK | FTFA_FSTAT_FPVIOL_MASK | FTFA_FSTAT_ACCERR_MASK | FTFA_FSTAT_CCIF_MASK), FTFA_FSTAT_RDCOLERR(value)))
#define FTFA_BWR_FSTAT_RDCOLERR(base, value) (BME_BFI8(&FTFA_FSTAT_REG(base), ((uint8_t)(value) << FTFA_FSTAT_RDCOLERR_SHIFT), FTFA_FSTAT_RDCOLERR_SHIFT, FTFA_FSTAT_RDCOLERR_WIDTH))
/*@}*/

/*!
 * @name Register FTFA_FSTAT, field CCIF[7] (W1C)
 *
 * Indicates that a flash command has completed. The CCIF flag is cleared by
 * writing a 1 to CCIF to launch a command, and CCIF stays low until command
 * completion or command violation. CCIF is reset to 0 but is set to 1 by the memory
 * controller at the end of the reset initialization sequence. Depending on how
 * quickly the read occurs after reset release, the user may or may not see the 0
 * hardware reset value.
 *
 * Values:
 * - 0b0 - Flash command in progress
 * - 0b1 - Flash command has completed
 */
/*@{*/
/*! @brief Read current value of the FTFA_FSTAT_CCIF field. */
#define FTFA_RD_FSTAT_CCIF(base) ((FTFA_FSTAT_REG(base) & FTFA_FSTAT_CCIF_MASK) >> FTFA_FSTAT_CCIF_SHIFT)
#define FTFA_BRD_FSTAT_CCIF(base) (BME_UBFX8(&FTFA_FSTAT_REG(base), FTFA_FSTAT_CCIF_SHIFT, FTFA_FSTAT_CCIF_WIDTH))

/*! @brief Set the CCIF field to a new value. */
#define FTFA_WR_FSTAT_CCIF(base, value) (FTFA_RMW_FSTAT(base, (FTFA_FSTAT_CCIF_MASK | FTFA_FSTAT_FPVIOL_MASK | FTFA_FSTAT_ACCERR_MASK | FTFA_FSTAT_RDCOLERR_MASK), FTFA_FSTAT_CCIF(value)))
#define FTFA_BWR_FSTAT_CCIF(base, value) (BME_BFI8(&FTFA_FSTAT_REG(base), ((uint8_t)(value) << FTFA_FSTAT_CCIF_SHIFT), FTFA_FSTAT_CCIF_SHIFT, FTFA_FSTAT_CCIF_WIDTH))
/*@}*/

/*******************************************************************************
 * FTFA_FCNFG - Flash Configuration Register
 ******************************************************************************/

/*!
 * @brief FTFA_FCNFG - Flash Configuration Register (RW)
 *
 * Reset value: 0x00U
 *
 * This register provides information on the current functional state of the
 * flash memory module. The erase control bits (ERSAREQ and ERSSUSP) have write
 * restrictions. The unassigned bits read as noted and are not writable.
 */
/*!
 * @name Constants and macros for entire FTFA_FCNFG register
 */
/*@{*/
#define FTFA_RD_FCNFG(base)      (FTFA_FCNFG_REG(base))
#define FTFA_WR_FCNFG(base, value) (FTFA_FCNFG_REG(base) = (value))
#define FTFA_RMW_FCNFG(base, mask, value) (FTFA_WR_FCNFG(base, (FTFA_RD_FCNFG(base) & ~(mask)) | (value)))
#define FTFA_SET_FCNFG(base, value) (BME_OR8(&FTFA_FCNFG_REG(base), (uint8_t)(value)))
#define FTFA_CLR_FCNFG(base, value) (BME_AND8(&FTFA_FCNFG_REG(base), (uint8_t)(~(value))))
#define FTFA_TOG_FCNFG(base, value) (BME_XOR8(&FTFA_FCNFG_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTFA_FCNFG bitfields
 */

/*!
 * @name Register FTFA_FCNFG, field ERSSUSP[4] (RW)
 *
 * Allows the user to suspend (interrupt) the Erase Flash Sector command while
 * it is executing.
 *
 * Values:
 * - 0b0 - No suspend requested
 * - 0b1 - Suspend the current Erase Flash Sector command execution.
 */
/*@{*/
/*! @brief Read current value of the FTFA_FCNFG_ERSSUSP field. */
#define FTFA_RD_FCNFG_ERSSUSP(base) ((FTFA_FCNFG_REG(base) & FTFA_FCNFG_ERSSUSP_MASK) >> FTFA_FCNFG_ERSSUSP_SHIFT)
#define FTFA_BRD_FCNFG_ERSSUSP(base) (BME_UBFX8(&FTFA_FCNFG_REG(base), FTFA_FCNFG_ERSSUSP_SHIFT, FTFA_FCNFG_ERSSUSP_WIDTH))

/*! @brief Set the ERSSUSP field to a new value. */
#define FTFA_WR_FCNFG_ERSSUSP(base, value) (FTFA_RMW_FCNFG(base, FTFA_FCNFG_ERSSUSP_MASK, FTFA_FCNFG_ERSSUSP(value)))
#define FTFA_BWR_FCNFG_ERSSUSP(base, value) (BME_BFI8(&FTFA_FCNFG_REG(base), ((uint8_t)(value) << FTFA_FCNFG_ERSSUSP_SHIFT), FTFA_FCNFG_ERSSUSP_SHIFT, FTFA_FCNFG_ERSSUSP_WIDTH))
/*@}*/

/*!
 * @name Register FTFA_FCNFG, field ERSAREQ[5] (RO)
 *
 * Issues a request to the memory controller to execute the Erase All Blocks
 * command and release security. ERSAREQ is not directly writable but is under
 * indirect user control. Refer to the device's Chip Configuration details on how to
 * request this command. ERSAREQ sets when an erase all request is triggered
 * external to the flash memory module and CCIF is set (no command is currently being
 * executed). ERSAREQ is cleared by the flash memory module when the operation
 * completes.
 *
 * Values:
 * - 0b0 - No request or request complete
 * - 0b1 - Request to: run the Erase All Blocks command, verify the erased
 *     state, program the security byte in the Flash Configuration Field to the
 *     unsecure state, and release MCU security by setting the FSEC[SEC] field to the
 *     unsecure state.
 */
/*@{*/
/*! @brief Read current value of the FTFA_FCNFG_ERSAREQ field. */
#define FTFA_RD_FCNFG_ERSAREQ(base) ((FTFA_FCNFG_REG(base) & FTFA_FCNFG_ERSAREQ_MASK) >> FTFA_FCNFG_ERSAREQ_SHIFT)
#define FTFA_BRD_FCNFG_ERSAREQ(base) (BME_UBFX8(&FTFA_FCNFG_REG(base), FTFA_FCNFG_ERSAREQ_SHIFT, FTFA_FCNFG_ERSAREQ_WIDTH))
/*@}*/

/*!
 * @name Register FTFA_FCNFG, field RDCOLLIE[6] (RW)
 *
 * Controls interrupt generation when a flash memory read collision error occurs.
 *
 * Values:
 * - 0b0 - Read collision error interrupt disabled
 * - 0b1 - Read collision error interrupt enabled. An interrupt request is
 *     generated whenever a flash memory read collision error is detected (see the
 *     description of FSTAT[RDCOLERR]).
 */
/*@{*/
/*! @brief Read current value of the FTFA_FCNFG_RDCOLLIE field. */
#define FTFA_RD_FCNFG_RDCOLLIE(base) ((FTFA_FCNFG_REG(base) & FTFA_FCNFG_RDCOLLIE_MASK) >> FTFA_FCNFG_RDCOLLIE_SHIFT)
#define FTFA_BRD_FCNFG_RDCOLLIE(base) (BME_UBFX8(&FTFA_FCNFG_REG(base), FTFA_FCNFG_RDCOLLIE_SHIFT, FTFA_FCNFG_RDCOLLIE_WIDTH))

/*! @brief Set the RDCOLLIE field to a new value. */
#define FTFA_WR_FCNFG_RDCOLLIE(base, value) (FTFA_RMW_FCNFG(base, FTFA_FCNFG_RDCOLLIE_MASK, FTFA_FCNFG_RDCOLLIE(value)))
#define FTFA_BWR_FCNFG_RDCOLLIE(base, value) (BME_BFI8(&FTFA_FCNFG_REG(base), ((uint8_t)(value) << FTFA_FCNFG_RDCOLLIE_SHIFT), FTFA_FCNFG_RDCOLLIE_SHIFT, FTFA_FCNFG_RDCOLLIE_WIDTH))
/*@}*/

/*!
 * @name Register FTFA_FCNFG, field CCIE[7] (RW)
 *
 * Controls interrupt generation when a flash command completes.
 *
 * Values:
 * - 0b0 - Command complete interrupt disabled
 * - 0b1 - Command complete interrupt enabled. An interrupt request is generated
 *     whenever the FSTAT[CCIF] flag is set.
 */
/*@{*/
/*! @brief Read current value of the FTFA_FCNFG_CCIE field. */
#define FTFA_RD_FCNFG_CCIE(base) ((FTFA_FCNFG_REG(base) & FTFA_FCNFG_CCIE_MASK) >> FTFA_FCNFG_CCIE_SHIFT)
#define FTFA_BRD_FCNFG_CCIE(base) (BME_UBFX8(&FTFA_FCNFG_REG(base), FTFA_FCNFG_CCIE_SHIFT, FTFA_FCNFG_CCIE_WIDTH))

/*! @brief Set the CCIE field to a new value. */
#define FTFA_WR_FCNFG_CCIE(base, value) (FTFA_RMW_FCNFG(base, FTFA_FCNFG_CCIE_MASK, FTFA_FCNFG_CCIE(value)))
#define FTFA_BWR_FCNFG_CCIE(base, value) (BME_BFI8(&FTFA_FCNFG_REG(base), ((uint8_t)(value) << FTFA_FCNFG_CCIE_SHIFT), FTFA_FCNFG_CCIE_SHIFT, FTFA_FCNFG_CCIE_WIDTH))
/*@}*/

/*******************************************************************************
 * FTFA_FSEC - Flash Security Register
 ******************************************************************************/

/*!
 * @brief FTFA_FSEC - Flash Security Register (RO)
 *
 * Reset value: 0x00U
 *
 * This read-only register holds all bits associated with the security of the
 * MCU and flash memory module. During the reset sequence, the register is loaded
 * with the contents of the flash security byte in the Flash Configuration Field
 * located in program flash memory. The flash basis for the values is signified by
 * X in the reset value.
 */
/*!
 * @name Constants and macros for entire FTFA_FSEC register
 */
/*@{*/
#define FTFA_RD_FSEC(base)       (FTFA_FSEC_REG(base))
/*@}*/

/*
 * Constants & macros for individual FTFA_FSEC bitfields
 */

/*!
 * @name Register FTFA_FSEC, field SEC[1:0] (RO)
 *
 * Defines the security state of the MCU. In the secure state, the MCU limits
 * access to flash memory module resources. The limitations are defined per device
 * and are detailed in the Chip Configuration details. If the flash memory module
 * is unsecured using backdoor key access, SEC is forced to 10b.
 *
 * Values:
 * - 0b00 - MCU security status is secure.
 * - 0b01 - MCU security status is secure.
 * - 0b10 - MCU security status is unsecure. (The standard shipping condition of
 *     the flash memory module is unsecure.)
 * - 0b11 - MCU security status is secure.
 */
/*@{*/
/*! @brief Read current value of the FTFA_FSEC_SEC field. */
#define FTFA_RD_FSEC_SEC(base) ((FTFA_FSEC_REG(base) & FTFA_FSEC_SEC_MASK) >> FTFA_FSEC_SEC_SHIFT)
#define FTFA_BRD_FSEC_SEC(base) (BME_UBFX8(&FTFA_FSEC_REG(base), FTFA_FSEC_SEC_SHIFT, FTFA_FSEC_SEC_WIDTH))
/*@}*/

/*!
 * @name Register FTFA_FSEC, field FSLACC[3:2] (RO)
 *
 * Enables or disables access to the flash memory contents during returned part
 * failure analysis at Freescale. When SEC is secure and FSLACC is denied, access
 * to the program flash contents is denied and any failure analysis performed by
 * Freescale factory test must begin with a full erase to unsecure the part.
 * When access is granted (SEC is unsecure, or SEC is secure and FSLACC is granted),
 * Freescale factory testing has visibility of the current flash contents. The
 * state of the FSLACC bits is only relevant when SEC is set to secure. When SEC
 * is set to unsecure, the FSLACC setting does not matter.
 *
 * Values:
 * - 0b00 - Freescale factory access granted
 * - 0b01 - Freescale factory access denied
 * - 0b10 - Freescale factory access denied
 * - 0b11 - Freescale factory access granted
 */
/*@{*/
/*! @brief Read current value of the FTFA_FSEC_FSLACC field. */
#define FTFA_RD_FSEC_FSLACC(base) ((FTFA_FSEC_REG(base) & FTFA_FSEC_FSLACC_MASK) >> FTFA_FSEC_FSLACC_SHIFT)
#define FTFA_BRD_FSEC_FSLACC(base) (BME_UBFX8(&FTFA_FSEC_REG(base), FTFA_FSEC_FSLACC_SHIFT, FTFA_FSEC_FSLACC_WIDTH))
/*@}*/

/*!
 * @name Register FTFA_FSEC, field MEEN[5:4] (RO)
 *
 * Enables and disables mass erase capability of the flash memory module. The
 * state of this field is relevant only when SEC is set to secure. When SEC is set
 * to unsecure, the MEEN setting does not matter.
 *
 * Values:
 * - 0b00 - Mass erase is enabled
 * - 0b01 - Mass erase is enabled
 * - 0b10 - Mass erase is disabled
 * - 0b11 - Mass erase is enabled
 */
/*@{*/
/*! @brief Read current value of the FTFA_FSEC_MEEN field. */
#define FTFA_RD_FSEC_MEEN(base) ((FTFA_FSEC_REG(base) & FTFA_FSEC_MEEN_MASK) >> FTFA_FSEC_MEEN_SHIFT)
#define FTFA_BRD_FSEC_MEEN(base) (BME_UBFX8(&FTFA_FSEC_REG(base), FTFA_FSEC_MEEN_SHIFT, FTFA_FSEC_MEEN_WIDTH))
/*@}*/

/*!
 * @name Register FTFA_FSEC, field KEYEN[7:6] (RO)
 *
 * Enables or disables backdoor key access to the flash memory module.
 *
 * Values:
 * - 0b00 - Backdoor key access disabled
 * - 0b01 - Backdoor key access disabled (preferred KEYEN state to disable
 *     backdoor key access)
 * - 0b10 - Backdoor key access enabled
 * - 0b11 - Backdoor key access disabled
 */
/*@{*/
/*! @brief Read current value of the FTFA_FSEC_KEYEN field. */
#define FTFA_RD_FSEC_KEYEN(base) ((FTFA_FSEC_REG(base) & FTFA_FSEC_KEYEN_MASK) >> FTFA_FSEC_KEYEN_SHIFT)
#define FTFA_BRD_FSEC_KEYEN(base) (BME_UBFX8(&FTFA_FSEC_REG(base), FTFA_FSEC_KEYEN_SHIFT, FTFA_FSEC_KEYEN_WIDTH))
/*@}*/

/*******************************************************************************
 * FTFA_FOPT - Flash Option Register
 ******************************************************************************/

/*!
 * @brief FTFA_FOPT - Flash Option Register (RO)
 *
 * Reset value: 0x00U
 *
 * The flash option register allows the MCU to customize its operations by
 * examining the state of these read-only bits, which are loaded from NVM at reset.
 * The function of the bits is defined in the device's Chip Configuration details.
 * All bits in the register are read-only . During the reset sequence, the
 * register is loaded from the flash nonvolatile option byte in the Flash Configuration
 * Field located in program flash memory. The flash basis for the values is
 * signified by X in the reset value. However, the register is written to 0xFF if the
 * contents of the flash nonvolatile option byte are 0x00.
 */
/*!
 * @name Constants and macros for entire FTFA_FOPT register
 */
/*@{*/
#define FTFA_RD_FOPT(base)       (FTFA_FOPT_REG(base))
/*@}*/

/*******************************************************************************
 * FTFA_FCCOB3 - Flash Common Command Object Registers
 ******************************************************************************/

/*!
 * @brief FTFA_FCCOB3 - Flash Common Command Object Registers (RW)
 *
 * Reset value: 0x00U
 *
 * The FCCOB register group provides 12 bytes for command codes and parameters.
 * The individual bytes within the set append a 0-B hex identifier to the FCCOB
 * register name: FCCOB0, FCCOB1, ..., FCCOBB.
 */
/*!
 * @name Constants and macros for entire FTFA_FCCOB3 register
 */
/*@{*/
#define FTFA_RD_FCCOB3(base)     (FTFA_FCCOB3_REG(base))
#define FTFA_WR_FCCOB3(base, value) (FTFA_FCCOB3_REG(base) = (value))
#define FTFA_RMW_FCCOB3(base, mask, value) (FTFA_WR_FCCOB3(base, (FTFA_RD_FCCOB3(base) & ~(mask)) | (value)))
#define FTFA_SET_FCCOB3(base, value) (BME_OR8(&FTFA_FCCOB3_REG(base), (uint8_t)(value)))
#define FTFA_CLR_FCCOB3(base, value) (BME_AND8(&FTFA_FCCOB3_REG(base), (uint8_t)(~(value))))
#define FTFA_TOG_FCCOB3(base, value) (BME_XOR8(&FTFA_FCCOB3_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * FTFA_FCCOB2 - Flash Common Command Object Registers
 ******************************************************************************/

/*!
 * @brief FTFA_FCCOB2 - Flash Common Command Object Registers (RW)
 *
 * Reset value: 0x00U
 *
 * The FCCOB register group provides 12 bytes for command codes and parameters.
 * The individual bytes within the set append a 0-B hex identifier to the FCCOB
 * register name: FCCOB0, FCCOB1, ..., FCCOBB.
 */
/*!
 * @name Constants and macros for entire FTFA_FCCOB2 register
 */
/*@{*/
#define FTFA_RD_FCCOB2(base)     (FTFA_FCCOB2_REG(base))
#define FTFA_WR_FCCOB2(base, value) (FTFA_FCCOB2_REG(base) = (value))
#define FTFA_RMW_FCCOB2(base, mask, value) (FTFA_WR_FCCOB2(base, (FTFA_RD_FCCOB2(base) & ~(mask)) | (value)))
#define FTFA_SET_FCCOB2(base, value) (BME_OR8(&FTFA_FCCOB2_REG(base), (uint8_t)(value)))
#define FTFA_CLR_FCCOB2(base, value) (BME_AND8(&FTFA_FCCOB2_REG(base), (uint8_t)(~(value))))
#define FTFA_TOG_FCCOB2(base, value) (BME_XOR8(&FTFA_FCCOB2_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * FTFA_FCCOB1 - Flash Common Command Object Registers
 ******************************************************************************/

/*!
 * @brief FTFA_FCCOB1 - Flash Common Command Object Registers (RW)
 *
 * Reset value: 0x00U
 *
 * The FCCOB register group provides 12 bytes for command codes and parameters.
 * The individual bytes within the set append a 0-B hex identifier to the FCCOB
 * register name: FCCOB0, FCCOB1, ..., FCCOBB.
 */
/*!
 * @name Constants and macros for entire FTFA_FCCOB1 register
 */
/*@{*/
#define FTFA_RD_FCCOB1(base)     (FTFA_FCCOB1_REG(base))
#define FTFA_WR_FCCOB1(base, value) (FTFA_FCCOB1_REG(base) = (value))
#define FTFA_RMW_FCCOB1(base, mask, value) (FTFA_WR_FCCOB1(base, (FTFA_RD_FCCOB1(base) & ~(mask)) | (value)))
#define FTFA_SET_FCCOB1(base, value) (BME_OR8(&FTFA_FCCOB1_REG(base), (uint8_t)(value)))
#define FTFA_CLR_FCCOB1(base, value) (BME_AND8(&FTFA_FCCOB1_REG(base), (uint8_t)(~(value))))
#define FTFA_TOG_FCCOB1(base, value) (BME_XOR8(&FTFA_FCCOB1_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * FTFA_FCCOB0 - Flash Common Command Object Registers
 ******************************************************************************/

/*!
 * @brief FTFA_FCCOB0 - Flash Common Command Object Registers (RW)
 *
 * Reset value: 0x00U
 *
 * The FCCOB register group provides 12 bytes for command codes and parameters.
 * The individual bytes within the set append a 0-B hex identifier to the FCCOB
 * register name: FCCOB0, FCCOB1, ..., FCCOBB.
 */
/*!
 * @name Constants and macros for entire FTFA_FCCOB0 register
 */
/*@{*/
#define FTFA_RD_FCCOB0(base)     (FTFA_FCCOB0_REG(base))
#define FTFA_WR_FCCOB0(base, value) (FTFA_FCCOB0_REG(base) = (value))
#define FTFA_RMW_FCCOB0(base, mask, value) (FTFA_WR_FCCOB0(base, (FTFA_RD_FCCOB0(base) & ~(mask)) | (value)))
#define FTFA_SET_FCCOB0(base, value) (BME_OR8(&FTFA_FCCOB0_REG(base), (uint8_t)(value)))
#define FTFA_CLR_FCCOB0(base, value) (BME_AND8(&FTFA_FCCOB0_REG(base), (uint8_t)(~(value))))
#define FTFA_TOG_FCCOB0(base, value) (BME_XOR8(&FTFA_FCCOB0_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * FTFA_FCCOB7 - Flash Common Command Object Registers
 ******************************************************************************/

/*!
 * @brief FTFA_FCCOB7 - Flash Common Command Object Registers (RW)
 *
 * Reset value: 0x00U
 *
 * The FCCOB register group provides 12 bytes for command codes and parameters.
 * The individual bytes within the set append a 0-B hex identifier to the FCCOB
 * register name: FCCOB0, FCCOB1, ..., FCCOBB.
 */
/*!
 * @name Constants and macros for entire FTFA_FCCOB7 register
 */
/*@{*/
#define FTFA_RD_FCCOB7(base)     (FTFA_FCCOB7_REG(base))
#define FTFA_WR_FCCOB7(base, value) (FTFA_FCCOB7_REG(base) = (value))
#define FTFA_RMW_FCCOB7(base, mask, value) (FTFA_WR_FCCOB7(base, (FTFA_RD_FCCOB7(base) & ~(mask)) | (value)))
#define FTFA_SET_FCCOB7(base, value) (BME_OR8(&FTFA_FCCOB7_REG(base), (uint8_t)(value)))
#define FTFA_CLR_FCCOB7(base, value) (BME_AND8(&FTFA_FCCOB7_REG(base), (uint8_t)(~(value))))
#define FTFA_TOG_FCCOB7(base, value) (BME_XOR8(&FTFA_FCCOB7_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * FTFA_FCCOB6 - Flash Common Command Object Registers
 ******************************************************************************/

/*!
 * @brief FTFA_FCCOB6 - Flash Common Command Object Registers (RW)
 *
 * Reset value: 0x00U
 *
 * The FCCOB register group provides 12 bytes for command codes and parameters.
 * The individual bytes within the set append a 0-B hex identifier to the FCCOB
 * register name: FCCOB0, FCCOB1, ..., FCCOBB.
 */
/*!
 * @name Constants and macros for entire FTFA_FCCOB6 register
 */
/*@{*/
#define FTFA_RD_FCCOB6(base)     (FTFA_FCCOB6_REG(base))
#define FTFA_WR_FCCOB6(base, value) (FTFA_FCCOB6_REG(base) = (value))
#define FTFA_RMW_FCCOB6(base, mask, value) (FTFA_WR_FCCOB6(base, (FTFA_RD_FCCOB6(base) & ~(mask)) | (value)))
#define FTFA_SET_FCCOB6(base, value) (BME_OR8(&FTFA_FCCOB6_REG(base), (uint8_t)(value)))
#define FTFA_CLR_FCCOB6(base, value) (BME_AND8(&FTFA_FCCOB6_REG(base), (uint8_t)(~(value))))
#define FTFA_TOG_FCCOB6(base, value) (BME_XOR8(&FTFA_FCCOB6_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * FTFA_FCCOB5 - Flash Common Command Object Registers
 ******************************************************************************/

/*!
 * @brief FTFA_FCCOB5 - Flash Common Command Object Registers (RW)
 *
 * Reset value: 0x00U
 *
 * The FCCOB register group provides 12 bytes for command codes and parameters.
 * The individual bytes within the set append a 0-B hex identifier to the FCCOB
 * register name: FCCOB0, FCCOB1, ..., FCCOBB.
 */
/*!
 * @name Constants and macros for entire FTFA_FCCOB5 register
 */
/*@{*/
#define FTFA_RD_FCCOB5(base)     (FTFA_FCCOB5_REG(base))
#define FTFA_WR_FCCOB5(base, value) (FTFA_FCCOB5_REG(base) = (value))
#define FTFA_RMW_FCCOB5(base, mask, value) (FTFA_WR_FCCOB5(base, (FTFA_RD_FCCOB5(base) & ~(mask)) | (value)))
#define FTFA_SET_FCCOB5(base, value) (BME_OR8(&FTFA_FCCOB5_REG(base), (uint8_t)(value)))
#define FTFA_CLR_FCCOB5(base, value) (BME_AND8(&FTFA_FCCOB5_REG(base), (uint8_t)(~(value))))
#define FTFA_TOG_FCCOB5(base, value) (BME_XOR8(&FTFA_FCCOB5_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * FTFA_FCCOB4 - Flash Common Command Object Registers
 ******************************************************************************/

/*!
 * @brief FTFA_FCCOB4 - Flash Common Command Object Registers (RW)
 *
 * Reset value: 0x00U
 *
 * The FCCOB register group provides 12 bytes for command codes and parameters.
 * The individual bytes within the set append a 0-B hex identifier to the FCCOB
 * register name: FCCOB0, FCCOB1, ..., FCCOBB.
 */
/*!
 * @name Constants and macros for entire FTFA_FCCOB4 register
 */
/*@{*/
#define FTFA_RD_FCCOB4(base)     (FTFA_FCCOB4_REG(base))
#define FTFA_WR_FCCOB4(base, value) (FTFA_FCCOB4_REG(base) = (value))
#define FTFA_RMW_FCCOB4(base, mask, value) (FTFA_WR_FCCOB4(base, (FTFA_RD_FCCOB4(base) & ~(mask)) | (value)))
#define FTFA_SET_FCCOB4(base, value) (BME_OR8(&FTFA_FCCOB4_REG(base), (uint8_t)(value)))
#define FTFA_CLR_FCCOB4(base, value) (BME_AND8(&FTFA_FCCOB4_REG(base), (uint8_t)(~(value))))
#define FTFA_TOG_FCCOB4(base, value) (BME_XOR8(&FTFA_FCCOB4_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * FTFA_FCCOBB - Flash Common Command Object Registers
 ******************************************************************************/

/*!
 * @brief FTFA_FCCOBB - Flash Common Command Object Registers (RW)
 *
 * Reset value: 0x00U
 *
 * The FCCOB register group provides 12 bytes for command codes and parameters.
 * The individual bytes within the set append a 0-B hex identifier to the FCCOB
 * register name: FCCOB0, FCCOB1, ..., FCCOBB.
 */
/*!
 * @name Constants and macros for entire FTFA_FCCOBB register
 */
/*@{*/
#define FTFA_RD_FCCOBB(base)     (FTFA_FCCOBB_REG(base))
#define FTFA_WR_FCCOBB(base, value) (FTFA_FCCOBB_REG(base) = (value))
#define FTFA_RMW_FCCOBB(base, mask, value) (FTFA_WR_FCCOBB(base, (FTFA_RD_FCCOBB(base) & ~(mask)) | (value)))
#define FTFA_SET_FCCOBB(base, value) (BME_OR8(&FTFA_FCCOBB_REG(base), (uint8_t)(value)))
#define FTFA_CLR_FCCOBB(base, value) (BME_AND8(&FTFA_FCCOBB_REG(base), (uint8_t)(~(value))))
#define FTFA_TOG_FCCOBB(base, value) (BME_XOR8(&FTFA_FCCOBB_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * FTFA_FCCOBA - Flash Common Command Object Registers
 ******************************************************************************/

/*!
 * @brief FTFA_FCCOBA - Flash Common Command Object Registers (RW)
 *
 * Reset value: 0x00U
 *
 * The FCCOB register group provides 12 bytes for command codes and parameters.
 * The individual bytes within the set append a 0-B hex identifier to the FCCOB
 * register name: FCCOB0, FCCOB1, ..., FCCOBB.
 */
/*!
 * @name Constants and macros for entire FTFA_FCCOBA register
 */
/*@{*/
#define FTFA_RD_FCCOBA(base)     (FTFA_FCCOBA_REG(base))
#define FTFA_WR_FCCOBA(base, value) (FTFA_FCCOBA_REG(base) = (value))
#define FTFA_RMW_FCCOBA(base, mask, value) (FTFA_WR_FCCOBA(base, (FTFA_RD_FCCOBA(base) & ~(mask)) | (value)))
#define FTFA_SET_FCCOBA(base, value) (BME_OR8(&FTFA_FCCOBA_REG(base), (uint8_t)(value)))
#define FTFA_CLR_FCCOBA(base, value) (BME_AND8(&FTFA_FCCOBA_REG(base), (uint8_t)(~(value))))
#define FTFA_TOG_FCCOBA(base, value) (BME_XOR8(&FTFA_FCCOBA_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * FTFA_FCCOB9 - Flash Common Command Object Registers
 ******************************************************************************/

/*!
 * @brief FTFA_FCCOB9 - Flash Common Command Object Registers (RW)
 *
 * Reset value: 0x00U
 *
 * The FCCOB register group provides 12 bytes for command codes and parameters.
 * The individual bytes within the set append a 0-B hex identifier to the FCCOB
 * register name: FCCOB0, FCCOB1, ..., FCCOBB.
 */
/*!
 * @name Constants and macros for entire FTFA_FCCOB9 register
 */
/*@{*/
#define FTFA_RD_FCCOB9(base)     (FTFA_FCCOB9_REG(base))
#define FTFA_WR_FCCOB9(base, value) (FTFA_FCCOB9_REG(base) = (value))
#define FTFA_RMW_FCCOB9(base, mask, value) (FTFA_WR_FCCOB9(base, (FTFA_RD_FCCOB9(base) & ~(mask)) | (value)))
#define FTFA_SET_FCCOB9(base, value) (BME_OR8(&FTFA_FCCOB9_REG(base), (uint8_t)(value)))
#define FTFA_CLR_FCCOB9(base, value) (BME_AND8(&FTFA_FCCOB9_REG(base), (uint8_t)(~(value))))
#define FTFA_TOG_FCCOB9(base, value) (BME_XOR8(&FTFA_FCCOB9_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * FTFA_FCCOB8 - Flash Common Command Object Registers
 ******************************************************************************/

/*!
 * @brief FTFA_FCCOB8 - Flash Common Command Object Registers (RW)
 *
 * Reset value: 0x00U
 *
 * The FCCOB register group provides 12 bytes for command codes and parameters.
 * The individual bytes within the set append a 0-B hex identifier to the FCCOB
 * register name: FCCOB0, FCCOB1, ..., FCCOBB.
 */
/*!
 * @name Constants and macros for entire FTFA_FCCOB8 register
 */
/*@{*/
#define FTFA_RD_FCCOB8(base)     (FTFA_FCCOB8_REG(base))
#define FTFA_WR_FCCOB8(base, value) (FTFA_FCCOB8_REG(base) = (value))
#define FTFA_RMW_FCCOB8(base, mask, value) (FTFA_WR_FCCOB8(base, (FTFA_RD_FCCOB8(base) & ~(mask)) | (value)))
#define FTFA_SET_FCCOB8(base, value) (BME_OR8(&FTFA_FCCOB8_REG(base), (uint8_t)(value)))
#define FTFA_CLR_FCCOB8(base, value) (BME_AND8(&FTFA_FCCOB8_REG(base), (uint8_t)(~(value))))
#define FTFA_TOG_FCCOB8(base, value) (BME_XOR8(&FTFA_FCCOB8_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * FTFA_FPROT3 - Program Flash Protection Registers
 ******************************************************************************/

/*!
 * @brief FTFA_FPROT3 - Program Flash Protection Registers (RW)
 *
 * Reset value: 0x00U
 *
 * The FPROT registers define which program flash regions are protected from
 * program and erase operations. Protected flash regions cannot have their content
 * changed; that is, these regions cannot be programmed and cannot be erased by
 * any flash command. Unprotected regions can be changed by program and erase
 * operations. The four FPROT registers allow up to 32 protectable regions. Each bit
 * protects a 1/32 region of the program flash memory except for memory
 * configurations with less than 128 KB of program flash where each assigned bit protects 4
 * KB. For configurations with 96 KB of program flash memory or less, FPROT0 is
 * not used. For configurations with 64 KB of program flash memory or less,
 * FPROT1 is not used. For configurations with 32 KB of program flash memory, FPROT2
 * is not used. The bitfields are defined in each register as follows: Program
 * flash protection register Program flash protection bits FPROT0 PROT[31:24] FPROT1
 * PROT[23:16] FPROT2 PROT[15:8] FPROT3 PROT[7:0] During the reset sequence, the
 * FPROT registers are loaded with the contents of the program flash protection
 * bytes in the Flash Configuration Field as indicated in the following table.
 * Program flash protection register Flash Configuration Field offset address
 * FPROT0 0x000B FPROT1 0x000A FPROT2 0x0009 FPROT3 0x0008 To change the program flash
 * protection that is loaded during the reset sequence, unprotect the sector of
 * program flash memory that contains the Flash Configuration Field. Then,
 * reprogram the program flash protection byte.
 */
/*!
 * @name Constants and macros for entire FTFA_FPROT3 register
 */
/*@{*/
#define FTFA_RD_FPROT3(base)     (FTFA_FPROT3_REG(base))
#define FTFA_WR_FPROT3(base, value) (FTFA_FPROT3_REG(base) = (value))
#define FTFA_RMW_FPROT3(base, mask, value) (FTFA_WR_FPROT3(base, (FTFA_RD_FPROT3(base) & ~(mask)) | (value)))
#define FTFA_SET_FPROT3(base, value) (BME_OR8(&FTFA_FPROT3_REG(base), (uint8_t)(value)))
#define FTFA_CLR_FPROT3(base, value) (BME_AND8(&FTFA_FPROT3_REG(base), (uint8_t)(~(value))))
#define FTFA_TOG_FPROT3(base, value) (BME_XOR8(&FTFA_FPROT3_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * FTFA_FPROT2 - Program Flash Protection Registers
 ******************************************************************************/

/*!
 * @brief FTFA_FPROT2 - Program Flash Protection Registers (RW)
 *
 * Reset value: 0x00U
 *
 * The FPROT registers define which program flash regions are protected from
 * program and erase operations. Protected flash regions cannot have their content
 * changed; that is, these regions cannot be programmed and cannot be erased by
 * any flash command. Unprotected regions can be changed by program and erase
 * operations. The four FPROT registers allow up to 32 protectable regions. Each bit
 * protects a 1/32 region of the program flash memory except for memory
 * configurations with less than 128 KB of program flash where each assigned bit protects 4
 * KB. For configurations with 96 KB of program flash memory or less, FPROT0 is
 * not used. For configurations with 64 KB of program flash memory or less,
 * FPROT1 is not used. For configurations with 32 KB of program flash memory, FPROT2
 * is not used. The bitfields are defined in each register as follows: Program
 * flash protection register Program flash protection bits FPROT0 PROT[31:24] FPROT1
 * PROT[23:16] FPROT2 PROT[15:8] FPROT3 PROT[7:0] During the reset sequence, the
 * FPROT registers are loaded with the contents of the program flash protection
 * bytes in the Flash Configuration Field as indicated in the following table.
 * Program flash protection register Flash Configuration Field offset address
 * FPROT0 0x000B FPROT1 0x000A FPROT2 0x0009 FPROT3 0x0008 To change the program flash
 * protection that is loaded during the reset sequence, unprotect the sector of
 * program flash memory that contains the Flash Configuration Field. Then,
 * reprogram the program flash protection byte.
 */
/*!
 * @name Constants and macros for entire FTFA_FPROT2 register
 */
/*@{*/
#define FTFA_RD_FPROT2(base)     (FTFA_FPROT2_REG(base))
#define FTFA_WR_FPROT2(base, value) (FTFA_FPROT2_REG(base) = (value))
#define FTFA_RMW_FPROT2(base, mask, value) (FTFA_WR_FPROT2(base, (FTFA_RD_FPROT2(base) & ~(mask)) | (value)))
#define FTFA_SET_FPROT2(base, value) (BME_OR8(&FTFA_FPROT2_REG(base), (uint8_t)(value)))
#define FTFA_CLR_FPROT2(base, value) (BME_AND8(&FTFA_FPROT2_REG(base), (uint8_t)(~(value))))
#define FTFA_TOG_FPROT2(base, value) (BME_XOR8(&FTFA_FPROT2_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * FTFA_FPROT1 - Program Flash Protection Registers
 ******************************************************************************/

/*!
 * @brief FTFA_FPROT1 - Program Flash Protection Registers (RW)
 *
 * Reset value: 0x00U
 *
 * The FPROT registers define which program flash regions are protected from
 * program and erase operations. Protected flash regions cannot have their content
 * changed; that is, these regions cannot be programmed and cannot be erased by
 * any flash command. Unprotected regions can be changed by program and erase
 * operations. The four FPROT registers allow up to 32 protectable regions. Each bit
 * protects a 1/32 region of the program flash memory except for memory
 * configurations with less than 128 KB of program flash where each assigned bit protects 4
 * KB. For configurations with 96 KB of program flash memory or less, FPROT0 is
 * not used. For configurations with 64 KB of program flash memory or less,
 * FPROT1 is not used. For configurations with 32 KB of program flash memory, FPROT2
 * is not used. The bitfields are defined in each register as follows: Program
 * flash protection register Program flash protection bits FPROT0 PROT[31:24] FPROT1
 * PROT[23:16] FPROT2 PROT[15:8] FPROT3 PROT[7:0] During the reset sequence, the
 * FPROT registers are loaded with the contents of the program flash protection
 * bytes in the Flash Configuration Field as indicated in the following table.
 * Program flash protection register Flash Configuration Field offset address
 * FPROT0 0x000B FPROT1 0x000A FPROT2 0x0009 FPROT3 0x0008 To change the program flash
 * protection that is loaded during the reset sequence, unprotect the sector of
 * program flash memory that contains the Flash Configuration Field. Then,
 * reprogram the program flash protection byte.
 */
/*!
 * @name Constants and macros for entire FTFA_FPROT1 register
 */
/*@{*/
#define FTFA_RD_FPROT1(base)     (FTFA_FPROT1_REG(base))
#define FTFA_WR_FPROT1(base, value) (FTFA_FPROT1_REG(base) = (value))
#define FTFA_RMW_FPROT1(base, mask, value) (FTFA_WR_FPROT1(base, (FTFA_RD_FPROT1(base) & ~(mask)) | (value)))
#define FTFA_SET_FPROT1(base, value) (BME_OR8(&FTFA_FPROT1_REG(base), (uint8_t)(value)))
#define FTFA_CLR_FPROT1(base, value) (BME_AND8(&FTFA_FPROT1_REG(base), (uint8_t)(~(value))))
#define FTFA_TOG_FPROT1(base, value) (BME_XOR8(&FTFA_FPROT1_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * FTFA_FPROT0 - Program Flash Protection Registers
 ******************************************************************************/

/*!
 * @brief FTFA_FPROT0 - Program Flash Protection Registers (RW)
 *
 * Reset value: 0x00U
 *
 * The FPROT registers define which program flash regions are protected from
 * program and erase operations. Protected flash regions cannot have their content
 * changed; that is, these regions cannot be programmed and cannot be erased by
 * any flash command. Unprotected regions can be changed by program and erase
 * operations. The four FPROT registers allow up to 32 protectable regions. Each bit
 * protects a 1/32 region of the program flash memory except for memory
 * configurations with less than 128 KB of program flash where each assigned bit protects 4
 * KB. For configurations with 96 KB of program flash memory or less, FPROT0 is
 * not used. For configurations with 64 KB of program flash memory or less,
 * FPROT1 is not used. For configurations with 32 KB of program flash memory, FPROT2
 * is not used. The bitfields are defined in each register as follows: Program
 * flash protection register Program flash protection bits FPROT0 PROT[31:24] FPROT1
 * PROT[23:16] FPROT2 PROT[15:8] FPROT3 PROT[7:0] During the reset sequence, the
 * FPROT registers are loaded with the contents of the program flash protection
 * bytes in the Flash Configuration Field as indicated in the following table.
 * Program flash protection register Flash Configuration Field offset address
 * FPROT0 0x000B FPROT1 0x000A FPROT2 0x0009 FPROT3 0x0008 To change the program flash
 * protection that is loaded during the reset sequence, unprotect the sector of
 * program flash memory that contains the Flash Configuration Field. Then,
 * reprogram the program flash protection byte.
 */
/*!
 * @name Constants and macros for entire FTFA_FPROT0 register
 */
/*@{*/
#define FTFA_RD_FPROT0(base)     (FTFA_FPROT0_REG(base))
#define FTFA_WR_FPROT0(base, value) (FTFA_FPROT0_REG(base) = (value))
#define FTFA_RMW_FPROT0(base, mask, value) (FTFA_WR_FPROT0(base, (FTFA_RD_FPROT0(base) & ~(mask)) | (value)))
#define FTFA_SET_FPROT0(base, value) (BME_OR8(&FTFA_FPROT0_REG(base), (uint8_t)(value)))
#define FTFA_CLR_FPROT0(base, value) (BME_AND8(&FTFA_FPROT0_REG(base), (uint8_t)(~(value))))
#define FTFA_TOG_FPROT0(base, value) (BME_XOR8(&FTFA_FPROT0_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * FTFA_XACCH3 - Execute-only Access Registers
 ******************************************************************************/

/*!
 * @brief FTFA_XACCH3 - Execute-only Access Registers (RO)
 *
 * Reset value: 0x00U
 *
 * The XACC registers define which program flash segments are restricted to data
 * read or execute only or both data and instruction fetches. The eight XACC
 * registers allow up to 64 restricted segments of equal memory size. Execute-only
 * access register Program flash execute-only access bits XACCH0 XA[63:56] XACCH1
 * XA[55:48] XACCH2 XA[47:40] XACCH3 XA[39:32] XACCL0 XA[31:24] XACCL1 XA[23:16]
 * XACCL2 XA[15:8] XACCL3 XA[7:0] During the reset sequence, the XACC registers
 * are loaded with the logical AND of Program Flash IFR addresses A and B as
 * indicated in the following table. Execute-only access register Program Flash IFR
 * address A Program Flash IFR address B XACCH0 0xA3 0xAB XACCH1 0xA2 0xAA XACCH2
 * 0xA1 0xA9 XACCH3 0xA0 0xA8 XACCL0 0xA7 0xAF XACCL1 0xA6 0xAE XACCL2 0xA5 0xAD
 * XACCL3 0xA4 0xAC Use the Program Once command to program the execute-only
 * access control fields that are loaded during the reset sequence.
 */
/*!
 * @name Constants and macros for entire FTFA_XACCH3 register
 */
/*@{*/
#define FTFA_RD_XACCH3(base)     (FTFA_XACCH3_REG(base))
/*@}*/

/*******************************************************************************
 * FTFA_XACCH2 - Execute-only Access Registers
 ******************************************************************************/

/*!
 * @brief FTFA_XACCH2 - Execute-only Access Registers (RO)
 *
 * Reset value: 0x00U
 *
 * The XACC registers define which program flash segments are restricted to data
 * read or execute only or both data and instruction fetches. The eight XACC
 * registers allow up to 64 restricted segments of equal memory size. Execute-only
 * access register Program flash execute-only access bits XACCH0 XA[63:56] XACCH1
 * XA[55:48] XACCH2 XA[47:40] XACCH3 XA[39:32] XACCL0 XA[31:24] XACCL1 XA[23:16]
 * XACCL2 XA[15:8] XACCL3 XA[7:0] During the reset sequence, the XACC registers
 * are loaded with the logical AND of Program Flash IFR addresses A and B as
 * indicated in the following table. Execute-only access register Program Flash IFR
 * address A Program Flash IFR address B XACCH0 0xA3 0xAB XACCH1 0xA2 0xAA XACCH2
 * 0xA1 0xA9 XACCH3 0xA0 0xA8 XACCL0 0xA7 0xAF XACCL1 0xA6 0xAE XACCL2 0xA5 0xAD
 * XACCL3 0xA4 0xAC Use the Program Once command to program the execute-only
 * access control fields that are loaded during the reset sequence.
 */
/*!
 * @name Constants and macros for entire FTFA_XACCH2 register
 */
/*@{*/
#define FTFA_RD_XACCH2(base)     (FTFA_XACCH2_REG(base))
/*@}*/

/*******************************************************************************
 * FTFA_XACCH1 - Execute-only Access Registers
 ******************************************************************************/

/*!
 * @brief FTFA_XACCH1 - Execute-only Access Registers (RO)
 *
 * Reset value: 0x00U
 *
 * The XACC registers define which program flash segments are restricted to data
 * read or execute only or both data and instruction fetches. The eight XACC
 * registers allow up to 64 restricted segments of equal memory size. Execute-only
 * access register Program flash execute-only access bits XACCH0 XA[63:56] XACCH1
 * XA[55:48] XACCH2 XA[47:40] XACCH3 XA[39:32] XACCL0 XA[31:24] XACCL1 XA[23:16]
 * XACCL2 XA[15:8] XACCL3 XA[7:0] During the reset sequence, the XACC registers
 * are loaded with the logical AND of Program Flash IFR addresses A and B as
 * indicated in the following table. Execute-only access register Program Flash IFR
 * address A Program Flash IFR address B XACCH0 0xA3 0xAB XACCH1 0xA2 0xAA XACCH2
 * 0xA1 0xA9 XACCH3 0xA0 0xA8 XACCL0 0xA7 0xAF XACCL1 0xA6 0xAE XACCL2 0xA5 0xAD
 * XACCL3 0xA4 0xAC Use the Program Once command to program the execute-only
 * access control fields that are loaded during the reset sequence.
 */
/*!
 * @name Constants and macros for entire FTFA_XACCH1 register
 */
/*@{*/
#define FTFA_RD_XACCH1(base)     (FTFA_XACCH1_REG(base))
/*@}*/

/*******************************************************************************
 * FTFA_XACCH0 - Execute-only Access Registers
 ******************************************************************************/

/*!
 * @brief FTFA_XACCH0 - Execute-only Access Registers (RO)
 *
 * Reset value: 0x00U
 *
 * The XACC registers define which program flash segments are restricted to data
 * read or execute only or both data and instruction fetches. The eight XACC
 * registers allow up to 64 restricted segments of equal memory size. Execute-only
 * access register Program flash execute-only access bits XACCH0 XA[63:56] XACCH1
 * XA[55:48] XACCH2 XA[47:40] XACCH3 XA[39:32] XACCL0 XA[31:24] XACCL1 XA[23:16]
 * XACCL2 XA[15:8] XACCL3 XA[7:0] During the reset sequence, the XACC registers
 * are loaded with the logical AND of Program Flash IFR addresses A and B as
 * indicated in the following table. Execute-only access register Program Flash IFR
 * address A Program Flash IFR address B XACCH0 0xA3 0xAB XACCH1 0xA2 0xAA XACCH2
 * 0xA1 0xA9 XACCH3 0xA0 0xA8 XACCL0 0xA7 0xAF XACCL1 0xA6 0xAE XACCL2 0xA5 0xAD
 * XACCL3 0xA4 0xAC Use the Program Once command to program the execute-only
 * access control fields that are loaded during the reset sequence.
 */
/*!
 * @name Constants and macros for entire FTFA_XACCH0 register
 */
/*@{*/
#define FTFA_RD_XACCH0(base)     (FTFA_XACCH0_REG(base))
/*@}*/

/*******************************************************************************
 * FTFA_XACCL3 - Execute-only Access Registers
 ******************************************************************************/

/*!
 * @brief FTFA_XACCL3 - Execute-only Access Registers (RO)
 *
 * Reset value: 0x00U
 *
 * The XACC registers define which program flash segments are restricted to data
 * read or execute only or both data and instruction fetches. The eight XACC
 * registers allow up to 64 restricted segments of equal memory size. Execute-only
 * access register Program flash execute-only access bits XACCH0 XA[63:56] XACCH1
 * XA[55:48] XACCH2 XA[47:40] XACCH3 XA[39:32] XACCL0 XA[31:24] XACCL1 XA[23:16]
 * XACCL2 XA[15:8] XACCL3 XA[7:0] During the reset sequence, the XACC registers
 * are loaded with the logical AND of Program Flash IFR addresses A and B as
 * indicated in the following table. Execute-only access register Program Flash IFR
 * address A Program Flash IFR address B XACCH0 0xA3 0xAB XACCH1 0xA2 0xAA XACCH2
 * 0xA1 0xA9 XACCH3 0xA0 0xA8 XACCL0 0xA7 0xAF XACCL1 0xA6 0xAE XACCL2 0xA5 0xAD
 * XACCL3 0xA4 0xAC Use the Program Once command to program the execute-only
 * access control fields that are loaded during the reset sequence.
 */
/*!
 * @name Constants and macros for entire FTFA_XACCL3 register
 */
/*@{*/
#define FTFA_RD_XACCL3(base)     (FTFA_XACCL3_REG(base))
/*@}*/

/*******************************************************************************
 * FTFA_XACCL2 - Execute-only Access Registers
 ******************************************************************************/

/*!
 * @brief FTFA_XACCL2 - Execute-only Access Registers (RO)
 *
 * Reset value: 0x00U
 *
 * The XACC registers define which program flash segments are restricted to data
 * read or execute only or both data and instruction fetches. The eight XACC
 * registers allow up to 64 restricted segments of equal memory size. Execute-only
 * access register Program flash execute-only access bits XACCH0 XA[63:56] XACCH1
 * XA[55:48] XACCH2 XA[47:40] XACCH3 XA[39:32] XACCL0 XA[31:24] XACCL1 XA[23:16]
 * XACCL2 XA[15:8] XACCL3 XA[7:0] During the reset sequence, the XACC registers
 * are loaded with the logical AND of Program Flash IFR addresses A and B as
 * indicated in the following table. Execute-only access register Program Flash IFR
 * address A Program Flash IFR address B XACCH0 0xA3 0xAB XACCH1 0xA2 0xAA XACCH2
 * 0xA1 0xA9 XACCH3 0xA0 0xA8 XACCL0 0xA7 0xAF XACCL1 0xA6 0xAE XACCL2 0xA5 0xAD
 * XACCL3 0xA4 0xAC Use the Program Once command to program the execute-only
 * access control fields that are loaded during the reset sequence.
 */
/*!
 * @name Constants and macros for entire FTFA_XACCL2 register
 */
/*@{*/
#define FTFA_RD_XACCL2(base)     (FTFA_XACCL2_REG(base))
/*@}*/

/*******************************************************************************
 * FTFA_XACCL1 - Execute-only Access Registers
 ******************************************************************************/

/*!
 * @brief FTFA_XACCL1 - Execute-only Access Registers (RO)
 *
 * Reset value: 0x00U
 *
 * The XACC registers define which program flash segments are restricted to data
 * read or execute only or both data and instruction fetches. The eight XACC
 * registers allow up to 64 restricted segments of equal memory size. Execute-only
 * access register Program flash execute-only access bits XACCH0 XA[63:56] XACCH1
 * XA[55:48] XACCH2 XA[47:40] XACCH3 XA[39:32] XACCL0 XA[31:24] XACCL1 XA[23:16]
 * XACCL2 XA[15:8] XACCL3 XA[7:0] During the reset sequence, the XACC registers
 * are loaded with the logical AND of Program Flash IFR addresses A and B as
 * indicated in the following table. Execute-only access register Program Flash IFR
 * address A Program Flash IFR address B XACCH0 0xA3 0xAB XACCH1 0xA2 0xAA XACCH2
 * 0xA1 0xA9 XACCH3 0xA0 0xA8 XACCL0 0xA7 0xAF XACCL1 0xA6 0xAE XACCL2 0xA5 0xAD
 * XACCL3 0xA4 0xAC Use the Program Once command to program the execute-only
 * access control fields that are loaded during the reset sequence.
 */
/*!
 * @name Constants and macros for entire FTFA_XACCL1 register
 */
/*@{*/
#define FTFA_RD_XACCL1(base)     (FTFA_XACCL1_REG(base))
/*@}*/

/*******************************************************************************
 * FTFA_XACCL0 - Execute-only Access Registers
 ******************************************************************************/

/*!
 * @brief FTFA_XACCL0 - Execute-only Access Registers (RO)
 *
 * Reset value: 0x00U
 *
 * The XACC registers define which program flash segments are restricted to data
 * read or execute only or both data and instruction fetches. The eight XACC
 * registers allow up to 64 restricted segments of equal memory size. Execute-only
 * access register Program flash execute-only access bits XACCH0 XA[63:56] XACCH1
 * XA[55:48] XACCH2 XA[47:40] XACCH3 XA[39:32] XACCL0 XA[31:24] XACCL1 XA[23:16]
 * XACCL2 XA[15:8] XACCL3 XA[7:0] During the reset sequence, the XACC registers
 * are loaded with the logical AND of Program Flash IFR addresses A and B as
 * indicated in the following table. Execute-only access register Program Flash IFR
 * address A Program Flash IFR address B XACCH0 0xA3 0xAB XACCH1 0xA2 0xAA XACCH2
 * 0xA1 0xA9 XACCH3 0xA0 0xA8 XACCL0 0xA7 0xAF XACCL1 0xA6 0xAE XACCL2 0xA5 0xAD
 * XACCL3 0xA4 0xAC Use the Program Once command to program the execute-only
 * access control fields that are loaded during the reset sequence.
 */
/*!
 * @name Constants and macros for entire FTFA_XACCL0 register
 */
/*@{*/
#define FTFA_RD_XACCL0(base)     (FTFA_XACCL0_REG(base))
/*@}*/

/*******************************************************************************
 * FTFA_SACCH3 - Supervisor-only Access Registers
 ******************************************************************************/

/*!
 * @brief FTFA_SACCH3 - Supervisor-only Access Registers (RO)
 *
 * Reset value: 0x00U
 *
 * The SACC registers define which program flash segments are restricted to
 * supervisor only or user and supervisor access. The eight SACC registers allow up
 * to 64 restricted segments of equal memory size. Supervisor-only access register
 * Program flash supervisor-only access bits SACCH0 SA[63:56] SACCH1 SA[55:48]
 * SACCH2 SA[47:40] SACCH3 SA[39:32] SACCL0 SA[31:24] SACCL1 SA[23:16] SACCL2
 * SA[15:8] SACCL3 SA[7:0] During the reset sequence, the SACC registers are loaded
 * with the logical AND of Program Flash IFR addresses A and B as indicated in the
 * following table. Supervisor-only access register Program Flash IFR address A
 * Program Flash IFR address B SACCH0 0xB3 0xBB SACCH1 0xB2 0xBA SACCH2 0xB1 0xB9
 * SACCH3 0xB0 0xB8 SACCL0 0xB7 0xBF SACCL1 0xB6 0xBE SACCL2 0xB5 0xBD SACCL3
 * 0xB4 0xBC Use the Program Once command to program the supervisor-only access
 * control fields that are loaded during the reset sequence.
 */
/*!
 * @name Constants and macros for entire FTFA_SACCH3 register
 */
/*@{*/
#define FTFA_RD_SACCH3(base)     (FTFA_SACCH3_REG(base))
/*@}*/

/*******************************************************************************
 * FTFA_SACCH2 - Supervisor-only Access Registers
 ******************************************************************************/

/*!
 * @brief FTFA_SACCH2 - Supervisor-only Access Registers (RO)
 *
 * Reset value: 0x00U
 *
 * The SACC registers define which program flash segments are restricted to
 * supervisor only or user and supervisor access. The eight SACC registers allow up
 * to 64 restricted segments of equal memory size. Supervisor-only access register
 * Program flash supervisor-only access bits SACCH0 SA[63:56] SACCH1 SA[55:48]
 * SACCH2 SA[47:40] SACCH3 SA[39:32] SACCL0 SA[31:24] SACCL1 SA[23:16] SACCL2
 * SA[15:8] SACCL3 SA[7:0] During the reset sequence, the SACC registers are loaded
 * with the logical AND of Program Flash IFR addresses A and B as indicated in the
 * following table. Supervisor-only access register Program Flash IFR address A
 * Program Flash IFR address B SACCH0 0xB3 0xBB SACCH1 0xB2 0xBA SACCH2 0xB1 0xB9
 * SACCH3 0xB0 0xB8 SACCL0 0xB7 0xBF SACCL1 0xB6 0xBE SACCL2 0xB5 0xBD SACCL3
 * 0xB4 0xBC Use the Program Once command to program the supervisor-only access
 * control fields that are loaded during the reset sequence.
 */
/*!
 * @name Constants and macros for entire FTFA_SACCH2 register
 */
/*@{*/
#define FTFA_RD_SACCH2(base)     (FTFA_SACCH2_REG(base))
/*@}*/

/*******************************************************************************
 * FTFA_SACCH1 - Supervisor-only Access Registers
 ******************************************************************************/

/*!
 * @brief FTFA_SACCH1 - Supervisor-only Access Registers (RO)
 *
 * Reset value: 0x00U
 *
 * The SACC registers define which program flash segments are restricted to
 * supervisor only or user and supervisor access. The eight SACC registers allow up
 * to 64 restricted segments of equal memory size. Supervisor-only access register
 * Program flash supervisor-only access bits SACCH0 SA[63:56] SACCH1 SA[55:48]
 * SACCH2 SA[47:40] SACCH3 SA[39:32] SACCL0 SA[31:24] SACCL1 SA[23:16] SACCL2
 * SA[15:8] SACCL3 SA[7:0] During the reset sequence, the SACC registers are loaded
 * with the logical AND of Program Flash IFR addresses A and B as indicated in the
 * following table. Supervisor-only access register Program Flash IFR address A
 * Program Flash IFR address B SACCH0 0xB3 0xBB SACCH1 0xB2 0xBA SACCH2 0xB1 0xB9
 * SACCH3 0xB0 0xB8 SACCL0 0xB7 0xBF SACCL1 0xB6 0xBE SACCL2 0xB5 0xBD SACCL3
 * 0xB4 0xBC Use the Program Once command to program the supervisor-only access
 * control fields that are loaded during the reset sequence.
 */
/*!
 * @name Constants and macros for entire FTFA_SACCH1 register
 */
/*@{*/
#define FTFA_RD_SACCH1(base)     (FTFA_SACCH1_REG(base))
/*@}*/

/*******************************************************************************
 * FTFA_SACCH0 - Supervisor-only Access Registers
 ******************************************************************************/

/*!
 * @brief FTFA_SACCH0 - Supervisor-only Access Registers (RO)
 *
 * Reset value: 0x00U
 *
 * The SACC registers define which program flash segments are restricted to
 * supervisor only or user and supervisor access. The eight SACC registers allow up
 * to 64 restricted segments of equal memory size. Supervisor-only access register
 * Program flash supervisor-only access bits SACCH0 SA[63:56] SACCH1 SA[55:48]
 * SACCH2 SA[47:40] SACCH3 SA[39:32] SACCL0 SA[31:24] SACCL1 SA[23:16] SACCL2
 * SA[15:8] SACCL3 SA[7:0] During the reset sequence, the SACC registers are loaded
 * with the logical AND of Program Flash IFR addresses A and B as indicated in the
 * following table. Supervisor-only access register Program Flash IFR address A
 * Program Flash IFR address B SACCH0 0xB3 0xBB SACCH1 0xB2 0xBA SACCH2 0xB1 0xB9
 * SACCH3 0xB0 0xB8 SACCL0 0xB7 0xBF SACCL1 0xB6 0xBE SACCL2 0xB5 0xBD SACCL3
 * 0xB4 0xBC Use the Program Once command to program the supervisor-only access
 * control fields that are loaded during the reset sequence.
 */
/*!
 * @name Constants and macros for entire FTFA_SACCH0 register
 */
/*@{*/
#define FTFA_RD_SACCH0(base)     (FTFA_SACCH0_REG(base))
/*@}*/

/*******************************************************************************
 * FTFA_SACCL3 - Supervisor-only Access Registers
 ******************************************************************************/

/*!
 * @brief FTFA_SACCL3 - Supervisor-only Access Registers (RO)
 *
 * Reset value: 0x00U
 *
 * The SACC registers define which program flash segments are restricted to
 * supervisor only or user and supervisor access. The eight SACC registers allow up
 * to 64 restricted segments of equal memory size. Supervisor-only access register
 * Program flash supervisor-only access bits SACCH0 SA[63:56] SACCH1 SA[55:48]
 * SACCH2 SA[47:40] SACCH3 SA[39:32] SACCL0 SA[31:24] SACCL1 SA[23:16] SACCL2
 * SA[15:8] SACCL3 SA[7:0] During the reset sequence, the SACC registers are loaded
 * with the logical AND of Program Flash IFR addresses A and B as indicated in the
 * following table. Supervisor-only access register Program Flash IFR address A
 * Program Flash IFR address B SACCH0 0xB3 0xBB SACCH1 0xB2 0xBA SACCH2 0xB1 0xB9
 * SACCH3 0xB0 0xB8 SACCL0 0xB7 0xBF SACCL1 0xB6 0xBE SACCL2 0xB5 0xBD SACCL3
 * 0xB4 0xBC Use the Program Once command to program the supervisor-only access
 * control fields that are loaded during the reset sequence.
 */
/*!
 * @name Constants and macros for entire FTFA_SACCL3 register
 */
/*@{*/
#define FTFA_RD_SACCL3(base)     (FTFA_SACCL3_REG(base))
/*@}*/

/*******************************************************************************
 * FTFA_SACCL2 - Supervisor-only Access Registers
 ******************************************************************************/

/*!
 * @brief FTFA_SACCL2 - Supervisor-only Access Registers (RO)
 *
 * Reset value: 0x00U
 *
 * The SACC registers define which program flash segments are restricted to
 * supervisor only or user and supervisor access. The eight SACC registers allow up
 * to 64 restricted segments of equal memory size. Supervisor-only access register
 * Program flash supervisor-only access bits SACCH0 SA[63:56] SACCH1 SA[55:48]
 * SACCH2 SA[47:40] SACCH3 SA[39:32] SACCL0 SA[31:24] SACCL1 SA[23:16] SACCL2
 * SA[15:8] SACCL3 SA[7:0] During the reset sequence, the SACC registers are loaded
 * with the logical AND of Program Flash IFR addresses A and B as indicated in the
 * following table. Supervisor-only access register Program Flash IFR address A
 * Program Flash IFR address B SACCH0 0xB3 0xBB SACCH1 0xB2 0xBA SACCH2 0xB1 0xB9
 * SACCH3 0xB0 0xB8 SACCL0 0xB7 0xBF SACCL1 0xB6 0xBE SACCL2 0xB5 0xBD SACCL3
 * 0xB4 0xBC Use the Program Once command to program the supervisor-only access
 * control fields that are loaded during the reset sequence.
 */
/*!
 * @name Constants and macros for entire FTFA_SACCL2 register
 */
/*@{*/
#define FTFA_RD_SACCL2(base)     (FTFA_SACCL2_REG(base))
/*@}*/

/*******************************************************************************
 * FTFA_SACCL1 - Supervisor-only Access Registers
 ******************************************************************************/

/*!
 * @brief FTFA_SACCL1 - Supervisor-only Access Registers (RO)
 *
 * Reset value: 0x00U
 *
 * The SACC registers define which program flash segments are restricted to
 * supervisor only or user and supervisor access. The eight SACC registers allow up
 * to 64 restricted segments of equal memory size. Supervisor-only access register
 * Program flash supervisor-only access bits SACCH0 SA[63:56] SACCH1 SA[55:48]
 * SACCH2 SA[47:40] SACCH3 SA[39:32] SACCL0 SA[31:24] SACCL1 SA[23:16] SACCL2
 * SA[15:8] SACCL3 SA[7:0] During the reset sequence, the SACC registers are loaded
 * with the logical AND of Program Flash IFR addresses A and B as indicated in the
 * following table. Supervisor-only access register Program Flash IFR address A
 * Program Flash IFR address B SACCH0 0xB3 0xBB SACCH1 0xB2 0xBA SACCH2 0xB1 0xB9
 * SACCH3 0xB0 0xB8 SACCL0 0xB7 0xBF SACCL1 0xB6 0xBE SACCL2 0xB5 0xBD SACCL3
 * 0xB4 0xBC Use the Program Once command to program the supervisor-only access
 * control fields that are loaded during the reset sequence.
 */
/*!
 * @name Constants and macros for entire FTFA_SACCL1 register
 */
/*@{*/
#define FTFA_RD_SACCL1(base)     (FTFA_SACCL1_REG(base))
/*@}*/

/*******************************************************************************
 * FTFA_SACCL0 - Supervisor-only Access Registers
 ******************************************************************************/

/*!
 * @brief FTFA_SACCL0 - Supervisor-only Access Registers (RO)
 *
 * Reset value: 0x00U
 *
 * The SACC registers define which program flash segments are restricted to
 * supervisor only or user and supervisor access. The eight SACC registers allow up
 * to 64 restricted segments of equal memory size. Supervisor-only access register
 * Program flash supervisor-only access bits SACCH0 SA[63:56] SACCH1 SA[55:48]
 * SACCH2 SA[47:40] SACCH3 SA[39:32] SACCL0 SA[31:24] SACCL1 SA[23:16] SACCL2
 * SA[15:8] SACCL3 SA[7:0] During the reset sequence, the SACC registers are loaded
 * with the logical AND of Program Flash IFR addresses A and B as indicated in the
 * following table. Supervisor-only access register Program Flash IFR address A
 * Program Flash IFR address B SACCH0 0xB3 0xBB SACCH1 0xB2 0xBA SACCH2 0xB1 0xB9
 * SACCH3 0xB0 0xB8 SACCL0 0xB7 0xBF SACCL1 0xB6 0xBE SACCL2 0xB5 0xBD SACCL3
 * 0xB4 0xBC Use the Program Once command to program the supervisor-only access
 * control fields that are loaded during the reset sequence.
 */
/*!
 * @name Constants and macros for entire FTFA_SACCL0 register
 */
/*@{*/
#define FTFA_RD_SACCL0(base)     (FTFA_SACCL0_REG(base))
/*@}*/

/*******************************************************************************
 * FTFA_FACSS - Flash Access Segment Size Register
 ******************************************************************************/

/*!
 * @brief FTFA_FACSS - Flash Access Segment Size Register (RO)
 *
 * Reset value: 0x00U
 *
 * The flash access segment size register determines which bits in the address
 * are used to index into the SACC and XACC bitmaps to get the appropriate
 * permission flags. All bits in the register are read-only. The contents of this
 * register are loaded during the reset sequence.
 */
/*!
 * @name Constants and macros for entire FTFA_FACSS register
 */
/*@{*/
#define FTFA_RD_FACSS(base)      (FTFA_FACSS_REG(base))
/*@}*/

/*******************************************************************************
 * FTFA_FACSN - Flash Access Segment Number Register
 ******************************************************************************/

/*!
 * @brief FTFA_FACSN - Flash Access Segment Number Register (RO)
 *
 * Reset value: 0x00U
 *
 * The flash access segment number register provides the number of program flash
 * segments that are available for XACC and SACC permissions. All bits in the
 * register are read-only. The contents of this register are loaded during the
 * reset sequence.
 */
/*!
 * @name Constants and macros for entire FTFA_FACSN register
 */
/*@{*/
#define FTFA_RD_FACSN(base)      (FTFA_FACSN_REG(base))
/*@}*/

/*
 * MK82F25615 FTM
 *
 * FlexTimer Module
 *
 * Registers defined in this header file:
 * - FTM_SC - Status And Control
 * - FTM_CNT - Counter
 * - FTM_MOD - Modulo
 * - FTM_CnSC - Channel (n) Status And Control
 * - FTM_CnV - Channel (n) Value
 * - FTM_CNTIN - Counter Initial Value
 * - FTM_STATUS - Capture And Compare Status
 * - FTM_MODE - Features Mode Selection
 * - FTM_SYNC - Synchronization
 * - FTM_OUTINIT - Initial State For Channels Output
 * - FTM_OUTMASK - Output Mask
 * - FTM_COMBINE - Function For Linked Channels
 * - FTM_DEADTIME - Deadtime Insertion Control
 * - FTM_EXTTRIG - FTM External Trigger
 * - FTM_POL - Channels Polarity
 * - FTM_FMS - Fault Mode Status
 * - FTM_FILTER - Input Capture Filter Control
 * - FTM_FLTCTRL - Fault Control
 * - FTM_QDCTRL - Quadrature Decoder Control And Status
 * - FTM_CONF - Configuration
 * - FTM_FLTPOL - FTM Fault Input Polarity
 * - FTM_SYNCONF - Synchronization Configuration
 * - FTM_INVCTRL - FTM Inverting Control
 * - FTM_SWOCTRL - FTM Software Output Control
 * - FTM_PWMLOAD - FTM PWM Load
 */

#define FTM_INSTANCE_COUNT (4U) /*!< Number of instances of the FTM module. */
#define FTM0_IDX (0U) /*!< Instance number for FTM0. */
#define FTM1_IDX (1U) /*!< Instance number for FTM1. */
#define FTM2_IDX (2U) /*!< Instance number for FTM2. */
#define FTM3_IDX (3U) /*!< Instance number for FTM3. */

/*******************************************************************************
 * FTM_SC - Status And Control
 ******************************************************************************/

/*!
 * @brief FTM_SC - Status And Control (RW)
 *
 * Reset value: 0x00000000U
 *
 * SC contains the overflow status flag and control bits used to configure the
 * interrupt enable, FTM configuration, clock source, and prescaler factor. These
 * controls relate to all channels within this module.
 */
/*!
 * @name Constants and macros for entire FTM_SC register
 */
/*@{*/
#define FTM_RD_SC(base)          (FTM_SC_REG(base))
#define FTM_WR_SC(base, value)   (FTM_SC_REG(base) = (value))
#define FTM_RMW_SC(base, mask, value) (FTM_WR_SC(base, (FTM_RD_SC(base) & ~(mask)) | (value)))
#define FTM_SET_SC(base, value)  (BME_OR32(&FTM_SC_REG(base), (uint32_t)(value)))
#define FTM_CLR_SC(base, value)  (BME_AND32(&FTM_SC_REG(base), (uint32_t)(~(value))))
#define FTM_TOG_SC(base, value)  (BME_XOR32(&FTM_SC_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTM_SC bitfields
 */

/*!
 * @name Register FTM_SC, field PS[2:0] (RW)
 *
 * Selects one of 8 division factors for the clock source selected by CLKS. The
 * new prescaler factor affects the clock source on the next system clock cycle
 * after the new value is updated into the register bits. This field is write
 * protected. It can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b000 - Divide by 1
 * - 0b001 - Divide by 2
 * - 0b010 - Divide by 4
 * - 0b011 - Divide by 8
 * - 0b100 - Divide by 16
 * - 0b101 - Divide by 32
 * - 0b110 - Divide by 64
 * - 0b111 - Divide by 128
 */
/*@{*/
/*! @brief Read current value of the FTM_SC_PS field. */
#define FTM_RD_SC_PS(base)   ((FTM_SC_REG(base) & FTM_SC_PS_MASK) >> FTM_SC_PS_SHIFT)
#define FTM_BRD_SC_PS(base)  (BME_UBFX32(&FTM_SC_REG(base), FTM_SC_PS_SHIFT, FTM_SC_PS_WIDTH))

/*! @brief Set the PS field to a new value. */
#define FTM_WR_SC_PS(base, value) (FTM_RMW_SC(base, FTM_SC_PS_MASK, FTM_SC_PS(value)))
#define FTM_BWR_SC_PS(base, value) (BME_BFI32(&FTM_SC_REG(base), ((uint32_t)(value) << FTM_SC_PS_SHIFT), FTM_SC_PS_SHIFT, FTM_SC_PS_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SC, field CLKS[4:3] (RW)
 *
 * Selects one of the three FTM counter clock sources. This field is write
 * protected. It can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b00 - No clock selected. This in effect disables the FTM counter.
 * - 0b01 - System clock
 * - 0b10 - Fixed frequency clock
 * - 0b11 - External clock
 */
/*@{*/
/*! @brief Read current value of the FTM_SC_CLKS field. */
#define FTM_RD_SC_CLKS(base) ((FTM_SC_REG(base) & FTM_SC_CLKS_MASK) >> FTM_SC_CLKS_SHIFT)
#define FTM_BRD_SC_CLKS(base) (BME_UBFX32(&FTM_SC_REG(base), FTM_SC_CLKS_SHIFT, FTM_SC_CLKS_WIDTH))

/*! @brief Set the CLKS field to a new value. */
#define FTM_WR_SC_CLKS(base, value) (FTM_RMW_SC(base, FTM_SC_CLKS_MASK, FTM_SC_CLKS(value)))
#define FTM_BWR_SC_CLKS(base, value) (BME_BFI32(&FTM_SC_REG(base), ((uint32_t)(value) << FTM_SC_CLKS_SHIFT), FTM_SC_CLKS_SHIFT, FTM_SC_CLKS_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SC, field CPWMS[5] (RW)
 *
 * Selects CPWM mode. This mode configures the FTM to operate in Up-Down
 * Counting mode. This field is write protected. It can be written only when MODE[WPDIS]
 * = 1.
 *
 * Values:
 * - 0b0 - FTM counter operates in Up Counting mode.
 * - 0b1 - FTM counter operates in Up-Down Counting mode.
 */
/*@{*/
/*! @brief Read current value of the FTM_SC_CPWMS field. */
#define FTM_RD_SC_CPWMS(base) ((FTM_SC_REG(base) & FTM_SC_CPWMS_MASK) >> FTM_SC_CPWMS_SHIFT)
#define FTM_BRD_SC_CPWMS(base) (BME_UBFX32(&FTM_SC_REG(base), FTM_SC_CPWMS_SHIFT, FTM_SC_CPWMS_WIDTH))

/*! @brief Set the CPWMS field to a new value. */
#define FTM_WR_SC_CPWMS(base, value) (FTM_RMW_SC(base, FTM_SC_CPWMS_MASK, FTM_SC_CPWMS(value)))
#define FTM_BWR_SC_CPWMS(base, value) (BME_BFI32(&FTM_SC_REG(base), ((uint32_t)(value) << FTM_SC_CPWMS_SHIFT), FTM_SC_CPWMS_SHIFT, FTM_SC_CPWMS_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SC, field TOIE[6] (RW)
 *
 * Enables FTM overflow interrupts.
 *
 * Values:
 * - 0b0 - Disable TOF interrupts. Use software polling.
 * - 0b1 - Enable TOF interrupts. An interrupt is generated when TOF equals one.
 */
/*@{*/
/*! @brief Read current value of the FTM_SC_TOIE field. */
#define FTM_RD_SC_TOIE(base) ((FTM_SC_REG(base) & FTM_SC_TOIE_MASK) >> FTM_SC_TOIE_SHIFT)
#define FTM_BRD_SC_TOIE(base) (BME_UBFX32(&FTM_SC_REG(base), FTM_SC_TOIE_SHIFT, FTM_SC_TOIE_WIDTH))

/*! @brief Set the TOIE field to a new value. */
#define FTM_WR_SC_TOIE(base, value) (FTM_RMW_SC(base, FTM_SC_TOIE_MASK, FTM_SC_TOIE(value)))
#define FTM_BWR_SC_TOIE(base, value) (BME_BFI32(&FTM_SC_REG(base), ((uint32_t)(value) << FTM_SC_TOIE_SHIFT), FTM_SC_TOIE_SHIFT, FTM_SC_TOIE_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SC, field TOF[7] (ROWZ)
 *
 * Set by hardware when the FTM counter passes the value in the MOD register.
 * The TOF bit is cleared by reading the SC register while TOF is set and then
 * writing a 0 to TOF bit. Writing a 1 to TOF has no effect. If another FTM overflow
 * occurs between the read and write operations, the write operation has no
 * effect; therefore, TOF remains set indicating an overflow has occurred. In this
 * case, a TOF interrupt request is not lost due to the clearing sequence for a
 * previous TOF.
 *
 * Values:
 * - 0b0 - FTM counter has not overflowed.
 * - 0b1 - FTM counter has overflowed.
 */
/*@{*/
/*! @brief Read current value of the FTM_SC_TOF field. */
#define FTM_RD_SC_TOF(base)  ((FTM_SC_REG(base) & FTM_SC_TOF_MASK) >> FTM_SC_TOF_SHIFT)
#define FTM_BRD_SC_TOF(base) (BME_UBFX32(&FTM_SC_REG(base), FTM_SC_TOF_SHIFT, FTM_SC_TOF_WIDTH))

/*! @brief Set the TOF field to a new value. */
#define FTM_WR_SC_TOF(base, value) (FTM_RMW_SC(base, FTM_SC_TOF_MASK, FTM_SC_TOF(value)))
#define FTM_BWR_SC_TOF(base, value) (BME_BFI32(&FTM_SC_REG(base), ((uint32_t)(value) << FTM_SC_TOF_SHIFT), FTM_SC_TOF_SHIFT, FTM_SC_TOF_WIDTH))
/*@}*/

/*******************************************************************************
 * FTM_CNT - Counter
 ******************************************************************************/

/*!
 * @brief FTM_CNT - Counter (RW)
 *
 * Reset value: 0x00000000U
 *
 * The CNT register contains the FTM counter value. Reset clears the CNT
 * register. Writing any value to COUNT updates the counter with its initial value,
 * CNTIN. When BDM is active, the FTM counter is frozen. This is the value that you
 * may read.
 */
/*!
 * @name Constants and macros for entire FTM_CNT register
 */
/*@{*/
#define FTM_RD_CNT(base)         (FTM_CNT_REG(base))
#define FTM_WR_CNT(base, value)  (FTM_CNT_REG(base) = (value))
#define FTM_RMW_CNT(base, mask, value) (FTM_WR_CNT(base, (FTM_RD_CNT(base) & ~(mask)) | (value)))
#define FTM_SET_CNT(base, value) (BME_OR32(&FTM_CNT_REG(base), (uint32_t)(value)))
#define FTM_CLR_CNT(base, value) (BME_AND32(&FTM_CNT_REG(base), (uint32_t)(~(value))))
#define FTM_TOG_CNT(base, value) (BME_XOR32(&FTM_CNT_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTM_CNT bitfields
 */

/*!
 * @name Register FTM_CNT, field COUNT[15:0] (RW)
 */
/*@{*/
/*! @brief Read current value of the FTM_CNT_COUNT field. */
#define FTM_RD_CNT_COUNT(base) ((FTM_CNT_REG(base) & FTM_CNT_COUNT_MASK) >> FTM_CNT_COUNT_SHIFT)
#define FTM_BRD_CNT_COUNT(base) (FTM_RD_CNT_COUNT(base))

/*! @brief Set the COUNT field to a new value. */
#define FTM_WR_CNT_COUNT(base, value) (FTM_RMW_CNT(base, FTM_CNT_COUNT_MASK, FTM_CNT_COUNT(value)))
#define FTM_BWR_CNT_COUNT(base, value) (FTM_WR_CNT_COUNT(base, value))
/*@}*/

/*******************************************************************************
 * FTM_MOD - Modulo
 ******************************************************************************/

/*!
 * @brief FTM_MOD - Modulo (RW)
 *
 * Reset value: 0x00000000U
 *
 * The Modulo register contains the modulo value for the FTM counter. After the
 * FTM counter reaches the modulo value, the overflow flag (TOF) becomes set at
 * the next clock, and the next value of FTM counter depends on the selected
 * counting method; see Counter. Writing to the MOD register latches the value into a
 * buffer. The MOD register is updated with the value of its write buffer
 * according to Registers updated from write buffers. If FTMEN = 0, this write coherency
 * mechanism may be manually reset by writing to the SC register whether BDM is
 * active or not. Initialize the FTM counter, by writing to CNT, before writing
 * to the MOD register to avoid confusion about when the first counter overflow
 * will occur.
 */
/*!
 * @name Constants and macros for entire FTM_MOD register
 */
/*@{*/
#define FTM_RD_MOD(base)         (FTM_MOD_REG(base))
#define FTM_WR_MOD(base, value)  (FTM_MOD_REG(base) = (value))
#define FTM_RMW_MOD(base, mask, value) (FTM_WR_MOD(base, (FTM_RD_MOD(base) & ~(mask)) | (value)))
#define FTM_SET_MOD(base, value) (BME_OR32(&FTM_MOD_REG(base), (uint32_t)(value)))
#define FTM_CLR_MOD(base, value) (BME_AND32(&FTM_MOD_REG(base), (uint32_t)(~(value))))
#define FTM_TOG_MOD(base, value) (BME_XOR32(&FTM_MOD_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTM_MOD bitfields
 */

/*!
 * @name Register FTM_MOD, field MOD[15:0] (RW)
 *
 * Modulo Value
 */
/*@{*/
/*! @brief Read current value of the FTM_MOD_MOD field. */
#define FTM_RD_MOD_MOD(base) ((FTM_MOD_REG(base) & FTM_MOD_MOD_MASK) >> FTM_MOD_MOD_SHIFT)
#define FTM_BRD_MOD_MOD(base) (FTM_RD_MOD_MOD(base))

/*! @brief Set the MOD field to a new value. */
#define FTM_WR_MOD_MOD(base, value) (FTM_RMW_MOD(base, FTM_MOD_MOD_MASK, FTM_MOD_MOD(value)))
#define FTM_BWR_MOD_MOD(base, value) (FTM_WR_MOD_MOD(base, value))
/*@}*/

/*******************************************************************************
 * FTM_CnSC - Channel (n) Status And Control
 ******************************************************************************/

/*!
 * @brief FTM_CnSC - Channel (n) Status And Control (RW)
 *
 * Reset value: 0x00000000U
 *
 * CnSC contains the channel-interrupt-status flag and control bits used to
 * configure the interrupt enable, channel configuration, and pin function. Mode,
 * edge, and level selection DECAPEN COMBINE CPWMS MSnB:MSnA ELSnB:ELSnA Mode
 * Configuration X X X XX 00 Pin not used for FTM-revert the channel pin to general
 * purpose I/O or other peripheral control 0 0 0 00 01 Input Capture Capture on
 * Rising Edge Only 10 Capture on Falling Edge Only 11 Capture on Rising or Falling
 * Edge 01 01 Output Compare Toggle Output on match 10 Clear Output on match 11
 * Set Output on match 1X 10 Edge-Aligned PWM High-true pulses (clear Output on
 * match) X1 Low-true pulses (set Output on match) 1 XX 10 Center-Aligned PWM
 * High-true pulses (clear Output on match-up) X1 Low-true pulses (set Output on
 * match-up) 1 0 XX 10 Combine PWM High-true pulses (set on channel (n) match, and
 * clear on channel (n+1) match) X1 Low-true pulses (clear on channel (n) match, and
 * set on channel (n+1) match) 1 0 0 X0 See the following table (). Dual Edge
 * Capture One-Shot Capture mode X1 Continuous Capture mode Dual Edge Capture mode -
 * edge polarity selection ELSnB ELSnA Channel Port Enable Detected Edges 0 0
 * Disabled No edge 0 1 Enabled Rising edge 1 0 Enabled Falling edge 1 1 Enabled
 * Rising and falling edges
 */
/*!
 * @name Constants and macros for entire FTM_CnSC register
 */
/*@{*/
#define FTM_RD_CnSC(base, index) (FTM_CnSC_REG(base, index))
#define FTM_WR_CnSC(base, index, value) (FTM_CnSC_REG(base, index) = (value))
#define FTM_RMW_CnSC(base, index, mask, value) (FTM_WR_CnSC(base, index, (FTM_RD_CnSC(base, index) & ~(mask)) | (value)))
#define FTM_SET_CnSC(base, index, value) (BME_OR32(&FTM_CnSC_REG(base, index), (uint32_t)(value)))
#define FTM_CLR_CnSC(base, index, value) (BME_AND32(&FTM_CnSC_REG(base, index), (uint32_t)(~(value))))
#define FTM_TOG_CnSC(base, index, value) (BME_XOR32(&FTM_CnSC_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTM_CnSC bitfields
 */

/*!
 * @name Register FTM_CnSC, field DMA[0] (RW)
 *
 * Enables DMA transfers for the channel.
 *
 * Values:
 * - 0b0 - Disable DMA transfers.
 * - 0b1 - Enable DMA transfers.
 */
/*@{*/
/*! @brief Read current value of the FTM_CnSC_DMA field. */
#define FTM_RD_CnSC_DMA(base, index) ((FTM_CnSC_REG(base, index) & FTM_CnSC_DMA_MASK) >> FTM_CnSC_DMA_SHIFT)
#define FTM_BRD_CnSC_DMA(base, index) (BME_UBFX32(&FTM_CnSC_REG(base, index), FTM_CnSC_DMA_SHIFT, FTM_CnSC_DMA_WIDTH))

/*! @brief Set the DMA field to a new value. */
#define FTM_WR_CnSC_DMA(base, index, value) (FTM_RMW_CnSC(base, index, FTM_CnSC_DMA_MASK, FTM_CnSC_DMA(value)))
#define FTM_BWR_CnSC_DMA(base, index, value) (BME_BFI32(&FTM_CnSC_REG(base, index), ((uint32_t)(value) << FTM_CnSC_DMA_SHIFT), FTM_CnSC_DMA_SHIFT, FTM_CnSC_DMA_WIDTH))
/*@}*/

/*!
 * @name Register FTM_CnSC, field ICRST[1] (RW)
 *
 * FTM counter reset is driven by the selected event of the channel (n) in the
 * Input Capture mode. This field is write protected. It can be written only when
 * MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - FTM counter is not reset when the selected channel (n) input event is
 *     detected.
 * - 0b1 - FTM counter is reset when the selected channel (n) input event is
 *     detected.
 */
/*@{*/
/*! @brief Read current value of the FTM_CnSC_ICRST field. */
#define FTM_RD_CnSC_ICRST(base, index) ((FTM_CnSC_REG(base, index) & FTM_CnSC_ICRST_MASK) >> FTM_CnSC_ICRST_SHIFT)
#define FTM_BRD_CnSC_ICRST(base, index) (BME_UBFX32(&FTM_CnSC_REG(base, index), FTM_CnSC_ICRST_SHIFT, FTM_CnSC_ICRST_WIDTH))

/*! @brief Set the ICRST field to a new value. */
#define FTM_WR_CnSC_ICRST(base, index, value) (FTM_RMW_CnSC(base, index, FTM_CnSC_ICRST_MASK, FTM_CnSC_ICRST(value)))
#define FTM_BWR_CnSC_ICRST(base, index, value) (BME_BFI32(&FTM_CnSC_REG(base, index), ((uint32_t)(value) << FTM_CnSC_ICRST_SHIFT), FTM_CnSC_ICRST_SHIFT, FTM_CnSC_ICRST_WIDTH))
/*@}*/

/*!
 * @name Register FTM_CnSC, field ELSA[2] (RW)
 *
 * The functionality of ELSB and ELSA depends on the channel mode. See . This
 * field is write protected. It can be written only when MODE[WPDIS] = 1.
 */
/*@{*/
/*! @brief Read current value of the FTM_CnSC_ELSA field. */
#define FTM_RD_CnSC_ELSA(base, index) ((FTM_CnSC_REG(base, index) & FTM_CnSC_ELSA_MASK) >> FTM_CnSC_ELSA_SHIFT)
#define FTM_BRD_CnSC_ELSA(base, index) (BME_UBFX32(&FTM_CnSC_REG(base, index), FTM_CnSC_ELSA_SHIFT, FTM_CnSC_ELSA_WIDTH))

/*! @brief Set the ELSA field to a new value. */
#define FTM_WR_CnSC_ELSA(base, index, value) (FTM_RMW_CnSC(base, index, FTM_CnSC_ELSA_MASK, FTM_CnSC_ELSA(value)))
#define FTM_BWR_CnSC_ELSA(base, index, value) (BME_BFI32(&FTM_CnSC_REG(base, index), ((uint32_t)(value) << FTM_CnSC_ELSA_SHIFT), FTM_CnSC_ELSA_SHIFT, FTM_CnSC_ELSA_WIDTH))
/*@}*/

/*!
 * @name Register FTM_CnSC, field ELSB[3] (RW)
 *
 * The functionality of ELSB and ELSA depends on the channel mode. See . This
 * field is write protected. It can be written only when MODE[WPDIS] = 1.
 */
/*@{*/
/*! @brief Read current value of the FTM_CnSC_ELSB field. */
#define FTM_RD_CnSC_ELSB(base, index) ((FTM_CnSC_REG(base, index) & FTM_CnSC_ELSB_MASK) >> FTM_CnSC_ELSB_SHIFT)
#define FTM_BRD_CnSC_ELSB(base, index) (BME_UBFX32(&FTM_CnSC_REG(base, index), FTM_CnSC_ELSB_SHIFT, FTM_CnSC_ELSB_WIDTH))

/*! @brief Set the ELSB field to a new value. */
#define FTM_WR_CnSC_ELSB(base, index, value) (FTM_RMW_CnSC(base, index, FTM_CnSC_ELSB_MASK, FTM_CnSC_ELSB(value)))
#define FTM_BWR_CnSC_ELSB(base, index, value) (BME_BFI32(&FTM_CnSC_REG(base, index), ((uint32_t)(value) << FTM_CnSC_ELSB_SHIFT), FTM_CnSC_ELSB_SHIFT, FTM_CnSC_ELSB_WIDTH))
/*@}*/

/*!
 * @name Register FTM_CnSC, field MSA[4] (RW)
 *
 * Used for further selections in the channel logic. Its functionality is
 * dependent on the channel mode. See . This field is write protected. It can be
 * written only when MODE[WPDIS] = 1.
 */
/*@{*/
/*! @brief Read current value of the FTM_CnSC_MSA field. */
#define FTM_RD_CnSC_MSA(base, index) ((FTM_CnSC_REG(base, index) & FTM_CnSC_MSA_MASK) >> FTM_CnSC_MSA_SHIFT)
#define FTM_BRD_CnSC_MSA(base, index) (BME_UBFX32(&FTM_CnSC_REG(base, index), FTM_CnSC_MSA_SHIFT, FTM_CnSC_MSA_WIDTH))

/*! @brief Set the MSA field to a new value. */
#define FTM_WR_CnSC_MSA(base, index, value) (FTM_RMW_CnSC(base, index, FTM_CnSC_MSA_MASK, FTM_CnSC_MSA(value)))
#define FTM_BWR_CnSC_MSA(base, index, value) (BME_BFI32(&FTM_CnSC_REG(base, index), ((uint32_t)(value) << FTM_CnSC_MSA_SHIFT), FTM_CnSC_MSA_SHIFT, FTM_CnSC_MSA_WIDTH))
/*@}*/

/*!
 * @name Register FTM_CnSC, field MSB[5] (RW)
 *
 * Used for further selections in the channel logic. Its functionality is
 * dependent on the channel mode. See . This field is write protected. It can be
 * written only when MODE[WPDIS] = 1.
 */
/*@{*/
/*! @brief Read current value of the FTM_CnSC_MSB field. */
#define FTM_RD_CnSC_MSB(base, index) ((FTM_CnSC_REG(base, index) & FTM_CnSC_MSB_MASK) >> FTM_CnSC_MSB_SHIFT)
#define FTM_BRD_CnSC_MSB(base, index) (BME_UBFX32(&FTM_CnSC_REG(base, index), FTM_CnSC_MSB_SHIFT, FTM_CnSC_MSB_WIDTH))

/*! @brief Set the MSB field to a new value. */
#define FTM_WR_CnSC_MSB(base, index, value) (FTM_RMW_CnSC(base, index, FTM_CnSC_MSB_MASK, FTM_CnSC_MSB(value)))
#define FTM_BWR_CnSC_MSB(base, index, value) (BME_BFI32(&FTM_CnSC_REG(base, index), ((uint32_t)(value) << FTM_CnSC_MSB_SHIFT), FTM_CnSC_MSB_SHIFT, FTM_CnSC_MSB_WIDTH))
/*@}*/

/*!
 * @name Register FTM_CnSC, field CHIE[6] (RW)
 *
 * Enables channel interrupts.
 *
 * Values:
 * - 0b0 - Disable channel interrupts. Use software polling.
 * - 0b1 - Enable channel interrupts.
 */
/*@{*/
/*! @brief Read current value of the FTM_CnSC_CHIE field. */
#define FTM_RD_CnSC_CHIE(base, index) ((FTM_CnSC_REG(base, index) & FTM_CnSC_CHIE_MASK) >> FTM_CnSC_CHIE_SHIFT)
#define FTM_BRD_CnSC_CHIE(base, index) (BME_UBFX32(&FTM_CnSC_REG(base, index), FTM_CnSC_CHIE_SHIFT, FTM_CnSC_CHIE_WIDTH))

/*! @brief Set the CHIE field to a new value. */
#define FTM_WR_CnSC_CHIE(base, index, value) (FTM_RMW_CnSC(base, index, FTM_CnSC_CHIE_MASK, FTM_CnSC_CHIE(value)))
#define FTM_BWR_CnSC_CHIE(base, index, value) (BME_BFI32(&FTM_CnSC_REG(base, index), ((uint32_t)(value) << FTM_CnSC_CHIE_SHIFT), FTM_CnSC_CHIE_SHIFT, FTM_CnSC_CHIE_WIDTH))
/*@}*/

/*!
 * @name Register FTM_CnSC, field CHF[7] (ROWZ)
 *
 * Set by hardware when an event occurs on the channel. CHF is cleared by
 * reading the CSC register while CHnF is set and then writing a 0 to the CHF bit.
 * Writing a 1 to CHF has no effect. If another event occurs between the read and
 * write operations, the write operation has no effect; therefore, CHF remains set
 * indicating an event has occurred. In this case a CHF interrupt request is not
 * lost due to the clearing sequence for a previous CHF.
 *
 * Values:
 * - 0b0 - No channel event has occurred.
 * - 0b1 - A channel event has occurred.
 */
/*@{*/
/*! @brief Read current value of the FTM_CnSC_CHF field. */
#define FTM_RD_CnSC_CHF(base, index) ((FTM_CnSC_REG(base, index) & FTM_CnSC_CHF_MASK) >> FTM_CnSC_CHF_SHIFT)
#define FTM_BRD_CnSC_CHF(base, index) (BME_UBFX32(&FTM_CnSC_REG(base, index), FTM_CnSC_CHF_SHIFT, FTM_CnSC_CHF_WIDTH))

/*! @brief Set the CHF field to a new value. */
#define FTM_WR_CnSC_CHF(base, index, value) (FTM_RMW_CnSC(base, index, FTM_CnSC_CHF_MASK, FTM_CnSC_CHF(value)))
#define FTM_BWR_CnSC_CHF(base, index, value) (BME_BFI32(&FTM_CnSC_REG(base, index), ((uint32_t)(value) << FTM_CnSC_CHF_SHIFT), FTM_CnSC_CHF_SHIFT, FTM_CnSC_CHF_WIDTH))
/*@}*/

/*******************************************************************************
 * FTM_CnV - Channel (n) Value
 ******************************************************************************/

/*!
 * @brief FTM_CnV - Channel (n) Value (RW)
 *
 * Reset value: 0x00000000U
 *
 * These registers contain the captured FTM counter value for the input modes or
 * the match value for the output modes. In Input Capture, Capture Test, and
 * Dual Edge Capture modes, any write to a CnV register is ignored. In output modes,
 * writing to a CnV register latches the value into a buffer. A CnV register is
 * updated with the value of its write buffer according to Registers updated from
 * write buffers. If FTMEN = 0, this write coherency mechanism may be manually
 * reset by writing to the CnSC register whether BDM mode is active or not.
 */
/*!
 * @name Constants and macros for entire FTM_CnV register
 */
/*@{*/
#define FTM_RD_CnV(base, index)  (FTM_CnV_REG(base, index))
#define FTM_WR_CnV(base, index, value) (FTM_CnV_REG(base, index) = (value))
#define FTM_RMW_CnV(base, index, mask, value) (FTM_WR_CnV(base, index, (FTM_RD_CnV(base, index) & ~(mask)) | (value)))
#define FTM_SET_CnV(base, index, value) (BME_OR32(&FTM_CnV_REG(base, index), (uint32_t)(value)))
#define FTM_CLR_CnV(base, index, value) (BME_AND32(&FTM_CnV_REG(base, index), (uint32_t)(~(value))))
#define FTM_TOG_CnV(base, index, value) (BME_XOR32(&FTM_CnV_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTM_CnV bitfields
 */

/*!
 * @name Register FTM_CnV, field VAL[15:0] (RW)
 *
 * Captured FTM counter value of the input modes or the match value for the
 * output modes
 */
/*@{*/
/*! @brief Read current value of the FTM_CnV_VAL field. */
#define FTM_RD_CnV_VAL(base, index) ((FTM_CnV_REG(base, index) & FTM_CnV_VAL_MASK) >> FTM_CnV_VAL_SHIFT)
#define FTM_BRD_CnV_VAL(base, index) (FTM_RD_CnV_VAL(base, index))

/*! @brief Set the VAL field to a new value. */
#define FTM_WR_CnV_VAL(base, index, value) (FTM_RMW_CnV(base, index, FTM_CnV_VAL_MASK, FTM_CnV_VAL(value)))
#define FTM_BWR_CnV_VAL(base, index, value) (FTM_WR_CnV_VAL(base, index, value))
/*@}*/

/*******************************************************************************
 * FTM_CNTIN - Counter Initial Value
 ******************************************************************************/

/*!
 * @brief FTM_CNTIN - Counter Initial Value (RW)
 *
 * Reset value: 0x00000000U
 *
 * The Counter Initial Value register contains the initial value for the FTM
 * counter. Writing to the CNTIN register latches the value into a buffer. The CNTIN
 * register is updated with the value of its write buffer according to Registers
 * updated from write buffers. When the FTM clock is initially selected, by
 * writing a non-zero value to the CLKS bits, the FTM counter starts with the value
 * 0x0000. To avoid this behavior, before the first write to select the FTM clock,
 * write the new value to the the CNTIN register and then initialize the FTM
 * counter by writing any value to the CNT register.
 */
/*!
 * @name Constants and macros for entire FTM_CNTIN register
 */
/*@{*/
#define FTM_RD_CNTIN(base)       (FTM_CNTIN_REG(base))
#define FTM_WR_CNTIN(base, value) (FTM_CNTIN_REG(base) = (value))
#define FTM_RMW_CNTIN(base, mask, value) (FTM_WR_CNTIN(base, (FTM_RD_CNTIN(base) & ~(mask)) | (value)))
#define FTM_SET_CNTIN(base, value) (BME_OR32(&FTM_CNTIN_REG(base), (uint32_t)(value)))
#define FTM_CLR_CNTIN(base, value) (BME_AND32(&FTM_CNTIN_REG(base), (uint32_t)(~(value))))
#define FTM_TOG_CNTIN(base, value) (BME_XOR32(&FTM_CNTIN_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTM_CNTIN bitfields
 */

/*!
 * @name Register FTM_CNTIN, field INIT[15:0] (RW)
 *
 * Initial Value Of The FTM Counter
 */
/*@{*/
/*! @brief Read current value of the FTM_CNTIN_INIT field. */
#define FTM_RD_CNTIN_INIT(base) ((FTM_CNTIN_REG(base) & FTM_CNTIN_INIT_MASK) >> FTM_CNTIN_INIT_SHIFT)
#define FTM_BRD_CNTIN_INIT(base) (FTM_RD_CNTIN_INIT(base))

/*! @brief Set the INIT field to a new value. */
#define FTM_WR_CNTIN_INIT(base, value) (FTM_RMW_CNTIN(base, FTM_CNTIN_INIT_MASK, FTM_CNTIN_INIT(value)))
#define FTM_BWR_CNTIN_INIT(base, value) (FTM_WR_CNTIN_INIT(base, value))
/*@}*/

/*******************************************************************************
 * FTM_STATUS - Capture And Compare Status
 ******************************************************************************/

/*!
 * @brief FTM_STATUS - Capture And Compare Status (RW)
 *
 * Reset value: 0x00000000U
 *
 * The STATUS register contains a copy of the status flag CHnF bit in CnSC for
 * each FTM channel for software convenience. Each CHnF bit in STATUS is a mirror
 * of CHnF bit in CnSC. All CHnF bits can be checked using only one read of
 * STATUS. All CHnF bits can be cleared by reading STATUS followed by writing 0x00 to
 * STATUS. Hardware sets the individual channel flags when an event occurs on the
 * channel. CHnF is cleared by reading STATUS while CHnF is set and then writing
 * a 0 to the CHnF bit. Writing a 1 to CHnF has no effect. If another event
 * occurs between the read and write operations, the write operation has no effect;
 * therefore, CHnF remains set indicating an event has occurred. In this case, a
 * CHnF interrupt request is not lost due to the clearing sequence for a previous
 * CHnF.
 */
/*!
 * @name Constants and macros for entire FTM_STATUS register
 */
/*@{*/
#define FTM_RD_STATUS(base)      (FTM_STATUS_REG(base))
#define FTM_WR_STATUS(base, value) (FTM_STATUS_REG(base) = (value))
#define FTM_RMW_STATUS(base, mask, value) (FTM_WR_STATUS(base, (FTM_RD_STATUS(base) & ~(mask)) | (value)))
#define FTM_SET_STATUS(base, value) (BME_OR32(&FTM_STATUS_REG(base), (uint32_t)(value)))
#define FTM_CLR_STATUS(base, value) (BME_AND32(&FTM_STATUS_REG(base), (uint32_t)(~(value))))
#define FTM_TOG_STATUS(base, value) (BME_XOR32(&FTM_STATUS_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTM_STATUS bitfields
 */

/*!
 * @name Register FTM_STATUS, field CH0F[0] (W1C)
 *
 * See the register description.
 *
 * Values:
 * - 0b0 - No channel event has occurred.
 * - 0b1 - A channel event has occurred.
 */
/*@{*/
/*! @brief Read current value of the FTM_STATUS_CH0F field. */
#define FTM_RD_STATUS_CH0F(base) ((FTM_STATUS_REG(base) & FTM_STATUS_CH0F_MASK) >> FTM_STATUS_CH0F_SHIFT)
#define FTM_BRD_STATUS_CH0F(base) (BME_UBFX32(&FTM_STATUS_REG(base), FTM_STATUS_CH0F_SHIFT, FTM_STATUS_CH0F_WIDTH))

/*! @brief Set the CH0F field to a new value. */
#define FTM_WR_STATUS_CH0F(base, value) (FTM_RMW_STATUS(base, (FTM_STATUS_CH0F_MASK | FTM_STATUS_CH1F_MASK | FTM_STATUS_CH2F_MASK | FTM_STATUS_CH3F_MASK | FTM_STATUS_CH4F_MASK | FTM_STATUS_CH5F_MASK | FTM_STATUS_CH6F_MASK | FTM_STATUS_CH7F_MASK), FTM_STATUS_CH0F(value)))
#define FTM_BWR_STATUS_CH0F(base, value) (BME_BFI32(&FTM_STATUS_REG(base), ((uint32_t)(value) << FTM_STATUS_CH0F_SHIFT), FTM_STATUS_CH0F_SHIFT, FTM_STATUS_CH0F_WIDTH))
/*@}*/

/*!
 * @name Register FTM_STATUS, field CH1F[1] (W1C)
 *
 * See the register description.
 *
 * Values:
 * - 0b0 - No channel event has occurred.
 * - 0b1 - A channel event has occurred.
 */
/*@{*/
/*! @brief Read current value of the FTM_STATUS_CH1F field. */
#define FTM_RD_STATUS_CH1F(base) ((FTM_STATUS_REG(base) & FTM_STATUS_CH1F_MASK) >> FTM_STATUS_CH1F_SHIFT)
#define FTM_BRD_STATUS_CH1F(base) (BME_UBFX32(&FTM_STATUS_REG(base), FTM_STATUS_CH1F_SHIFT, FTM_STATUS_CH1F_WIDTH))

/*! @brief Set the CH1F field to a new value. */
#define FTM_WR_STATUS_CH1F(base, value) (FTM_RMW_STATUS(base, (FTM_STATUS_CH1F_MASK | FTM_STATUS_CH0F_MASK | FTM_STATUS_CH2F_MASK | FTM_STATUS_CH3F_MASK | FTM_STATUS_CH4F_MASK | FTM_STATUS_CH5F_MASK | FTM_STATUS_CH6F_MASK | FTM_STATUS_CH7F_MASK), FTM_STATUS_CH1F(value)))
#define FTM_BWR_STATUS_CH1F(base, value) (BME_BFI32(&FTM_STATUS_REG(base), ((uint32_t)(value) << FTM_STATUS_CH1F_SHIFT), FTM_STATUS_CH1F_SHIFT, FTM_STATUS_CH1F_WIDTH))
/*@}*/

/*!
 * @name Register FTM_STATUS, field CH2F[2] (W1C)
 *
 * See the register description.
 *
 * Values:
 * - 0b0 - No channel event has occurred.
 * - 0b1 - A channel event has occurred.
 */
/*@{*/
/*! @brief Read current value of the FTM_STATUS_CH2F field. */
#define FTM_RD_STATUS_CH2F(base) ((FTM_STATUS_REG(base) & FTM_STATUS_CH2F_MASK) >> FTM_STATUS_CH2F_SHIFT)
#define FTM_BRD_STATUS_CH2F(base) (BME_UBFX32(&FTM_STATUS_REG(base), FTM_STATUS_CH2F_SHIFT, FTM_STATUS_CH2F_WIDTH))

/*! @brief Set the CH2F field to a new value. */
#define FTM_WR_STATUS_CH2F(base, value) (FTM_RMW_STATUS(base, (FTM_STATUS_CH2F_MASK | FTM_STATUS_CH0F_MASK | FTM_STATUS_CH1F_MASK | FTM_STATUS_CH3F_MASK | FTM_STATUS_CH4F_MASK | FTM_STATUS_CH5F_MASK | FTM_STATUS_CH6F_MASK | FTM_STATUS_CH7F_MASK), FTM_STATUS_CH2F(value)))
#define FTM_BWR_STATUS_CH2F(base, value) (BME_BFI32(&FTM_STATUS_REG(base), ((uint32_t)(value) << FTM_STATUS_CH2F_SHIFT), FTM_STATUS_CH2F_SHIFT, FTM_STATUS_CH2F_WIDTH))
/*@}*/

/*!
 * @name Register FTM_STATUS, field CH3F[3] (W1C)
 *
 * See the register description.
 *
 * Values:
 * - 0b0 - No channel event has occurred.
 * - 0b1 - A channel event has occurred.
 */
/*@{*/
/*! @brief Read current value of the FTM_STATUS_CH3F field. */
#define FTM_RD_STATUS_CH3F(base) ((FTM_STATUS_REG(base) & FTM_STATUS_CH3F_MASK) >> FTM_STATUS_CH3F_SHIFT)
#define FTM_BRD_STATUS_CH3F(base) (BME_UBFX32(&FTM_STATUS_REG(base), FTM_STATUS_CH3F_SHIFT, FTM_STATUS_CH3F_WIDTH))

/*! @brief Set the CH3F field to a new value. */
#define FTM_WR_STATUS_CH3F(base, value) (FTM_RMW_STATUS(base, (FTM_STATUS_CH3F_MASK | FTM_STATUS_CH0F_MASK | FTM_STATUS_CH1F_MASK | FTM_STATUS_CH2F_MASK | FTM_STATUS_CH4F_MASK | FTM_STATUS_CH5F_MASK | FTM_STATUS_CH6F_MASK | FTM_STATUS_CH7F_MASK), FTM_STATUS_CH3F(value)))
#define FTM_BWR_STATUS_CH3F(base, value) (BME_BFI32(&FTM_STATUS_REG(base), ((uint32_t)(value) << FTM_STATUS_CH3F_SHIFT), FTM_STATUS_CH3F_SHIFT, FTM_STATUS_CH3F_WIDTH))
/*@}*/

/*!
 * @name Register FTM_STATUS, field CH4F[4] (W1C)
 *
 * See the register description.
 *
 * Values:
 * - 0b0 - No channel event has occurred.
 * - 0b1 - A channel event has occurred.
 */
/*@{*/
/*! @brief Read current value of the FTM_STATUS_CH4F field. */
#define FTM_RD_STATUS_CH4F(base) ((FTM_STATUS_REG(base) & FTM_STATUS_CH4F_MASK) >> FTM_STATUS_CH4F_SHIFT)
#define FTM_BRD_STATUS_CH4F(base) (BME_UBFX32(&FTM_STATUS_REG(base), FTM_STATUS_CH4F_SHIFT, FTM_STATUS_CH4F_WIDTH))

/*! @brief Set the CH4F field to a new value. */
#define FTM_WR_STATUS_CH4F(base, value) (FTM_RMW_STATUS(base, (FTM_STATUS_CH4F_MASK | FTM_STATUS_CH0F_MASK | FTM_STATUS_CH1F_MASK | FTM_STATUS_CH2F_MASK | FTM_STATUS_CH3F_MASK | FTM_STATUS_CH5F_MASK | FTM_STATUS_CH6F_MASK | FTM_STATUS_CH7F_MASK), FTM_STATUS_CH4F(value)))
#define FTM_BWR_STATUS_CH4F(base, value) (BME_BFI32(&FTM_STATUS_REG(base), ((uint32_t)(value) << FTM_STATUS_CH4F_SHIFT), FTM_STATUS_CH4F_SHIFT, FTM_STATUS_CH4F_WIDTH))
/*@}*/

/*!
 * @name Register FTM_STATUS, field CH5F[5] (W1C)
 *
 * See the register description.
 *
 * Values:
 * - 0b0 - No channel event has occurred.
 * - 0b1 - A channel event has occurred.
 */
/*@{*/
/*! @brief Read current value of the FTM_STATUS_CH5F field. */
#define FTM_RD_STATUS_CH5F(base) ((FTM_STATUS_REG(base) & FTM_STATUS_CH5F_MASK) >> FTM_STATUS_CH5F_SHIFT)
#define FTM_BRD_STATUS_CH5F(base) (BME_UBFX32(&FTM_STATUS_REG(base), FTM_STATUS_CH5F_SHIFT, FTM_STATUS_CH5F_WIDTH))

/*! @brief Set the CH5F field to a new value. */
#define FTM_WR_STATUS_CH5F(base, value) (FTM_RMW_STATUS(base, (FTM_STATUS_CH5F_MASK | FTM_STATUS_CH0F_MASK | FTM_STATUS_CH1F_MASK | FTM_STATUS_CH2F_MASK | FTM_STATUS_CH3F_MASK | FTM_STATUS_CH4F_MASK | FTM_STATUS_CH6F_MASK | FTM_STATUS_CH7F_MASK), FTM_STATUS_CH5F(value)))
#define FTM_BWR_STATUS_CH5F(base, value) (BME_BFI32(&FTM_STATUS_REG(base), ((uint32_t)(value) << FTM_STATUS_CH5F_SHIFT), FTM_STATUS_CH5F_SHIFT, FTM_STATUS_CH5F_WIDTH))
/*@}*/

/*!
 * @name Register FTM_STATUS, field CH6F[6] (W1C)
 *
 * See the register description.
 *
 * Values:
 * - 0b0 - No channel event has occurred.
 * - 0b1 - A channel event has occurred.
 */
/*@{*/
/*! @brief Read current value of the FTM_STATUS_CH6F field. */
#define FTM_RD_STATUS_CH6F(base) ((FTM_STATUS_REG(base) & FTM_STATUS_CH6F_MASK) >> FTM_STATUS_CH6F_SHIFT)
#define FTM_BRD_STATUS_CH6F(base) (BME_UBFX32(&FTM_STATUS_REG(base), FTM_STATUS_CH6F_SHIFT, FTM_STATUS_CH6F_WIDTH))

/*! @brief Set the CH6F field to a new value. */
#define FTM_WR_STATUS_CH6F(base, value) (FTM_RMW_STATUS(base, (FTM_STATUS_CH6F_MASK | FTM_STATUS_CH0F_MASK | FTM_STATUS_CH1F_MASK | FTM_STATUS_CH2F_MASK | FTM_STATUS_CH3F_MASK | FTM_STATUS_CH4F_MASK | FTM_STATUS_CH5F_MASK | FTM_STATUS_CH7F_MASK), FTM_STATUS_CH6F(value)))
#define FTM_BWR_STATUS_CH6F(base, value) (BME_BFI32(&FTM_STATUS_REG(base), ((uint32_t)(value) << FTM_STATUS_CH6F_SHIFT), FTM_STATUS_CH6F_SHIFT, FTM_STATUS_CH6F_WIDTH))
/*@}*/

/*!
 * @name Register FTM_STATUS, field CH7F[7] (W1C)
 *
 * See the register description.
 *
 * Values:
 * - 0b0 - No channel event has occurred.
 * - 0b1 - A channel event has occurred.
 */
/*@{*/
/*! @brief Read current value of the FTM_STATUS_CH7F field. */
#define FTM_RD_STATUS_CH7F(base) ((FTM_STATUS_REG(base) & FTM_STATUS_CH7F_MASK) >> FTM_STATUS_CH7F_SHIFT)
#define FTM_BRD_STATUS_CH7F(base) (BME_UBFX32(&FTM_STATUS_REG(base), FTM_STATUS_CH7F_SHIFT, FTM_STATUS_CH7F_WIDTH))

/*! @brief Set the CH7F field to a new value. */
#define FTM_WR_STATUS_CH7F(base, value) (FTM_RMW_STATUS(base, (FTM_STATUS_CH7F_MASK | FTM_STATUS_CH0F_MASK | FTM_STATUS_CH1F_MASK | FTM_STATUS_CH2F_MASK | FTM_STATUS_CH3F_MASK | FTM_STATUS_CH4F_MASK | FTM_STATUS_CH5F_MASK | FTM_STATUS_CH6F_MASK), FTM_STATUS_CH7F(value)))
#define FTM_BWR_STATUS_CH7F(base, value) (BME_BFI32(&FTM_STATUS_REG(base), ((uint32_t)(value) << FTM_STATUS_CH7F_SHIFT), FTM_STATUS_CH7F_SHIFT, FTM_STATUS_CH7F_WIDTH))
/*@}*/

/*******************************************************************************
 * FTM_MODE - Features Mode Selection
 ******************************************************************************/

/*!
 * @brief FTM_MODE - Features Mode Selection (RW)
 *
 * Reset value: 0x00000004U
 *
 * This register contains the global enable bit for FTM-specific features and
 * the control bits used to configure: Fault control mode and interrupt Capture
 * Test mode PWM synchronization Write protection Channel output initialization
 * These controls relate to all channels within this module.
 */
/*!
 * @name Constants and macros for entire FTM_MODE register
 */
/*@{*/
#define FTM_RD_MODE(base)        (FTM_MODE_REG(base))
#define FTM_WR_MODE(base, value) (FTM_MODE_REG(base) = (value))
#define FTM_RMW_MODE(base, mask, value) (FTM_WR_MODE(base, (FTM_RD_MODE(base) & ~(mask)) | (value)))
#define FTM_SET_MODE(base, value) (BME_OR32(&FTM_MODE_REG(base), (uint32_t)(value)))
#define FTM_CLR_MODE(base, value) (BME_AND32(&FTM_MODE_REG(base), (uint32_t)(~(value))))
#define FTM_TOG_MODE(base, value) (BME_XOR32(&FTM_MODE_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTM_MODE bitfields
 */

/*!
 * @name Register FTM_MODE, field FTMEN[0] (RW)
 *
 * This field is write protected. It can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - TPM compatibility. Free running counter and synchronization
 *     compatible with TPM.
 * - 0b1 - Free running counter and synchronization are different from TPM
 *     behavior.
 */
/*@{*/
/*! @brief Read current value of the FTM_MODE_FTMEN field. */
#define FTM_RD_MODE_FTMEN(base) ((FTM_MODE_REG(base) & FTM_MODE_FTMEN_MASK) >> FTM_MODE_FTMEN_SHIFT)
#define FTM_BRD_MODE_FTMEN(base) (BME_UBFX32(&FTM_MODE_REG(base), FTM_MODE_FTMEN_SHIFT, FTM_MODE_FTMEN_WIDTH))

/*! @brief Set the FTMEN field to a new value. */
#define FTM_WR_MODE_FTMEN(base, value) (FTM_RMW_MODE(base, FTM_MODE_FTMEN_MASK, FTM_MODE_FTMEN(value)))
#define FTM_BWR_MODE_FTMEN(base, value) (BME_BFI32(&FTM_MODE_REG(base), ((uint32_t)(value) << FTM_MODE_FTMEN_SHIFT), FTM_MODE_FTMEN_SHIFT, FTM_MODE_FTMEN_WIDTH))
/*@}*/

/*!
 * @name Register FTM_MODE, field INIT[1] (RW)
 *
 * When a 1 is written to INIT bit the channels output is initialized according
 * to the state of their corresponding bit in the OUTINIT register. Writing a 0
 * to INIT bit has no effect. The INIT bit is always read as 0.
 */
/*@{*/
/*! @brief Read current value of the FTM_MODE_INIT field. */
#define FTM_RD_MODE_INIT(base) ((FTM_MODE_REG(base) & FTM_MODE_INIT_MASK) >> FTM_MODE_INIT_SHIFT)
#define FTM_BRD_MODE_INIT(base) (BME_UBFX32(&FTM_MODE_REG(base), FTM_MODE_INIT_SHIFT, FTM_MODE_INIT_WIDTH))

/*! @brief Set the INIT field to a new value. */
#define FTM_WR_MODE_INIT(base, value) (FTM_RMW_MODE(base, FTM_MODE_INIT_MASK, FTM_MODE_INIT(value)))
#define FTM_BWR_MODE_INIT(base, value) (BME_BFI32(&FTM_MODE_REG(base), ((uint32_t)(value) << FTM_MODE_INIT_SHIFT), FTM_MODE_INIT_SHIFT, FTM_MODE_INIT_WIDTH))
/*@}*/

/*!
 * @name Register FTM_MODE, field WPDIS[2] (RW)
 *
 * When write protection is enabled (WPDIS = 0), write protected bits cannot be
 * written. When write protection is disabled (WPDIS = 1), write protected bits
 * can be written. The WPDIS bit is the negation of the WPEN bit. WPDIS is cleared
 * when 1 is written to WPEN. WPDIS is set when WPEN bit is read as a 1 and then
 * 1 is written to WPDIS. Writing 0 to WPDIS has no effect.
 *
 * Values:
 * - 0b0 - Write protection is enabled.
 * - 0b1 - Write protection is disabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_MODE_WPDIS field. */
#define FTM_RD_MODE_WPDIS(base) ((FTM_MODE_REG(base) & FTM_MODE_WPDIS_MASK) >> FTM_MODE_WPDIS_SHIFT)
#define FTM_BRD_MODE_WPDIS(base) (BME_UBFX32(&FTM_MODE_REG(base), FTM_MODE_WPDIS_SHIFT, FTM_MODE_WPDIS_WIDTH))

/*! @brief Set the WPDIS field to a new value. */
#define FTM_WR_MODE_WPDIS(base, value) (FTM_RMW_MODE(base, FTM_MODE_WPDIS_MASK, FTM_MODE_WPDIS(value)))
#define FTM_BWR_MODE_WPDIS(base, value) (BME_BFI32(&FTM_MODE_REG(base), ((uint32_t)(value) << FTM_MODE_WPDIS_SHIFT), FTM_MODE_WPDIS_SHIFT, FTM_MODE_WPDIS_WIDTH))
/*@}*/

/*!
 * @name Register FTM_MODE, field PWMSYNC[3] (RW)
 *
 * Selects which triggers can be used by MOD, CnV, OUTMASK, and FTM counter
 * synchronization. See PWM synchronization. The PWMSYNC bit configures the
 * synchronization when SYNCMODE is 0.
 *
 * Values:
 * - 0b0 - No restrictions. Software and hardware triggers can be used by MOD,
 *     CnV, OUTMASK, and FTM counter synchronization.
 * - 0b1 - Software trigger can only be used by MOD and CnV synchronization, and
 *     hardware triggers can only be used by OUTMASK and FTM counter
 *     synchronization.
 */
/*@{*/
/*! @brief Read current value of the FTM_MODE_PWMSYNC field. */
#define FTM_RD_MODE_PWMSYNC(base) ((FTM_MODE_REG(base) & FTM_MODE_PWMSYNC_MASK) >> FTM_MODE_PWMSYNC_SHIFT)
#define FTM_BRD_MODE_PWMSYNC(base) (BME_UBFX32(&FTM_MODE_REG(base), FTM_MODE_PWMSYNC_SHIFT, FTM_MODE_PWMSYNC_WIDTH))

/*! @brief Set the PWMSYNC field to a new value. */
#define FTM_WR_MODE_PWMSYNC(base, value) (FTM_RMW_MODE(base, FTM_MODE_PWMSYNC_MASK, FTM_MODE_PWMSYNC(value)))
#define FTM_BWR_MODE_PWMSYNC(base, value) (BME_BFI32(&FTM_MODE_REG(base), ((uint32_t)(value) << FTM_MODE_PWMSYNC_SHIFT), FTM_MODE_PWMSYNC_SHIFT, FTM_MODE_PWMSYNC_WIDTH))
/*@}*/

/*!
 * @name Register FTM_MODE, field CAPTEST[4] (RW)
 *
 * Enables the capture test mode. This field is write protected. It can be
 * written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - Capture test mode is disabled.
 * - 0b1 - Capture test mode is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_MODE_CAPTEST field. */
#define FTM_RD_MODE_CAPTEST(base) ((FTM_MODE_REG(base) & FTM_MODE_CAPTEST_MASK) >> FTM_MODE_CAPTEST_SHIFT)
#define FTM_BRD_MODE_CAPTEST(base) (BME_UBFX32(&FTM_MODE_REG(base), FTM_MODE_CAPTEST_SHIFT, FTM_MODE_CAPTEST_WIDTH))

/*! @brief Set the CAPTEST field to a new value. */
#define FTM_WR_MODE_CAPTEST(base, value) (FTM_RMW_MODE(base, FTM_MODE_CAPTEST_MASK, FTM_MODE_CAPTEST(value)))
#define FTM_BWR_MODE_CAPTEST(base, value) (BME_BFI32(&FTM_MODE_REG(base), ((uint32_t)(value) << FTM_MODE_CAPTEST_SHIFT), FTM_MODE_CAPTEST_SHIFT, FTM_MODE_CAPTEST_WIDTH))
/*@}*/

/*!
 * @name Register FTM_MODE, field FAULTM[6:5] (RW)
 *
 * Defines the FTM fault control mode. This field is write protected. It can be
 * written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b00 - Fault control is disabled for all channels.
 * - 0b01 - Fault control is enabled for even channels only (channels 0, 2, 4,
 *     and 6), and the selected mode is the manual fault clearing.
 * - 0b10 - Fault control is enabled for all channels, and the selected mode is
 *     the manual fault clearing.
 * - 0b11 - Fault control is enabled for all channels, and the selected mode is
 *     the automatic fault clearing.
 */
/*@{*/
/*! @brief Read current value of the FTM_MODE_FAULTM field. */
#define FTM_RD_MODE_FAULTM(base) ((FTM_MODE_REG(base) & FTM_MODE_FAULTM_MASK) >> FTM_MODE_FAULTM_SHIFT)
#define FTM_BRD_MODE_FAULTM(base) (BME_UBFX32(&FTM_MODE_REG(base), FTM_MODE_FAULTM_SHIFT, FTM_MODE_FAULTM_WIDTH))

/*! @brief Set the FAULTM field to a new value. */
#define FTM_WR_MODE_FAULTM(base, value) (FTM_RMW_MODE(base, FTM_MODE_FAULTM_MASK, FTM_MODE_FAULTM(value)))
#define FTM_BWR_MODE_FAULTM(base, value) (BME_BFI32(&FTM_MODE_REG(base), ((uint32_t)(value) << FTM_MODE_FAULTM_SHIFT), FTM_MODE_FAULTM_SHIFT, FTM_MODE_FAULTM_WIDTH))
/*@}*/

/*!
 * @name Register FTM_MODE, field FAULTIE[7] (RW)
 *
 * Enables the generation of an interrupt when a fault is detected by FTM and
 * the FTM fault control is enabled.
 *
 * Values:
 * - 0b0 - Fault control interrupt is disabled.
 * - 0b1 - Fault control interrupt is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_MODE_FAULTIE field. */
#define FTM_RD_MODE_FAULTIE(base) ((FTM_MODE_REG(base) & FTM_MODE_FAULTIE_MASK) >> FTM_MODE_FAULTIE_SHIFT)
#define FTM_BRD_MODE_FAULTIE(base) (BME_UBFX32(&FTM_MODE_REG(base), FTM_MODE_FAULTIE_SHIFT, FTM_MODE_FAULTIE_WIDTH))

/*! @brief Set the FAULTIE field to a new value. */
#define FTM_WR_MODE_FAULTIE(base, value) (FTM_RMW_MODE(base, FTM_MODE_FAULTIE_MASK, FTM_MODE_FAULTIE(value)))
#define FTM_BWR_MODE_FAULTIE(base, value) (BME_BFI32(&FTM_MODE_REG(base), ((uint32_t)(value) << FTM_MODE_FAULTIE_SHIFT), FTM_MODE_FAULTIE_SHIFT, FTM_MODE_FAULTIE_WIDTH))
/*@}*/

/*******************************************************************************
 * FTM_SYNC - Synchronization
 ******************************************************************************/

/*!
 * @brief FTM_SYNC - Synchronization (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register configures the PWM synchronization. A synchronization event can
 * perform the synchronized update of MOD, CV, and OUTMASK registers with the
 * value of their write buffer and the FTM counter initialization. The software
 * trigger, SWSYNC bit, and hardware triggers TRIG0, TRIG1, and TRIG2 bits have a
 * potential conflict if used together when SYNCMODE = 0. Use only hardware or
 * software triggers but not both at the same time, otherwise unpredictable behavior
 * is likely to happen. The selection of the loading point, CNTMAX and CNTMIN
 * bits, is intended to provide the update of MOD, CNTIN, and CnV registers across
 * all enabled channels simultaneously. The use of the loading point selection
 * together with SYNCMODE = 0 and hardware trigger selection, TRIG0, TRIG1, or TRIG2
 * bits, is likely to result in unpredictable behavior. The synchronization
 * event selection also depends on the PWMSYNC (MODE register) and SYNCMODE (SYNCONF
 * register) bits. See PWM synchronization.
 */
/*!
 * @name Constants and macros for entire FTM_SYNC register
 */
/*@{*/
#define FTM_RD_SYNC(base)        (FTM_SYNC_REG(base))
#define FTM_WR_SYNC(base, value) (FTM_SYNC_REG(base) = (value))
#define FTM_RMW_SYNC(base, mask, value) (FTM_WR_SYNC(base, (FTM_RD_SYNC(base) & ~(mask)) | (value)))
#define FTM_SET_SYNC(base, value) (BME_OR32(&FTM_SYNC_REG(base), (uint32_t)(value)))
#define FTM_CLR_SYNC(base, value) (BME_AND32(&FTM_SYNC_REG(base), (uint32_t)(~(value))))
#define FTM_TOG_SYNC(base, value) (BME_XOR32(&FTM_SYNC_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTM_SYNC bitfields
 */

/*!
 * @name Register FTM_SYNC, field CNTMIN[0] (RW)
 *
 * Selects the minimum loading point to PWM synchronization. See Boundary cycle
 * and loading points. If CNTMIN is one, the selected loading point is when the
 * FTM counter reaches its minimum value (CNTIN register).
 *
 * Values:
 * - 0b0 - The minimum loading point is disabled.
 * - 0b1 - The minimum loading point is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_SYNC_CNTMIN field. */
#define FTM_RD_SYNC_CNTMIN(base) ((FTM_SYNC_REG(base) & FTM_SYNC_CNTMIN_MASK) >> FTM_SYNC_CNTMIN_SHIFT)
#define FTM_BRD_SYNC_CNTMIN(base) (BME_UBFX32(&FTM_SYNC_REG(base), FTM_SYNC_CNTMIN_SHIFT, FTM_SYNC_CNTMIN_WIDTH))

/*! @brief Set the CNTMIN field to a new value. */
#define FTM_WR_SYNC_CNTMIN(base, value) (FTM_RMW_SYNC(base, FTM_SYNC_CNTMIN_MASK, FTM_SYNC_CNTMIN(value)))
#define FTM_BWR_SYNC_CNTMIN(base, value) (BME_BFI32(&FTM_SYNC_REG(base), ((uint32_t)(value) << FTM_SYNC_CNTMIN_SHIFT), FTM_SYNC_CNTMIN_SHIFT, FTM_SYNC_CNTMIN_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SYNC, field CNTMAX[1] (RW)
 *
 * Selects the maximum loading point to PWM synchronization. See Boundary cycle
 * and loading points. If CNTMAX is 1, the selected loading point is when the FTM
 * counter reaches its maximum value (MOD register).
 *
 * Values:
 * - 0b0 - The maximum loading point is disabled.
 * - 0b1 - The maximum loading point is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_SYNC_CNTMAX field. */
#define FTM_RD_SYNC_CNTMAX(base) ((FTM_SYNC_REG(base) & FTM_SYNC_CNTMAX_MASK) >> FTM_SYNC_CNTMAX_SHIFT)
#define FTM_BRD_SYNC_CNTMAX(base) (BME_UBFX32(&FTM_SYNC_REG(base), FTM_SYNC_CNTMAX_SHIFT, FTM_SYNC_CNTMAX_WIDTH))

/*! @brief Set the CNTMAX field to a new value. */
#define FTM_WR_SYNC_CNTMAX(base, value) (FTM_RMW_SYNC(base, FTM_SYNC_CNTMAX_MASK, FTM_SYNC_CNTMAX(value)))
#define FTM_BWR_SYNC_CNTMAX(base, value) (BME_BFI32(&FTM_SYNC_REG(base), ((uint32_t)(value) << FTM_SYNC_CNTMAX_SHIFT), FTM_SYNC_CNTMAX_SHIFT, FTM_SYNC_CNTMAX_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SYNC, field REINIT[2] (RW)
 *
 * Determines if the FTM counter is reinitialized when the selected trigger for
 * the synchronization is detected. The REINIT bit configures the synchronization
 * when SYNCMODE is zero.
 *
 * Values:
 * - 0b0 - FTM counter continues to count normally.
 * - 0b1 - FTM counter is updated with its initial value when the selected
 *     trigger is detected.
 */
/*@{*/
/*! @brief Read current value of the FTM_SYNC_REINIT field. */
#define FTM_RD_SYNC_REINIT(base) ((FTM_SYNC_REG(base) & FTM_SYNC_REINIT_MASK) >> FTM_SYNC_REINIT_SHIFT)
#define FTM_BRD_SYNC_REINIT(base) (BME_UBFX32(&FTM_SYNC_REG(base), FTM_SYNC_REINIT_SHIFT, FTM_SYNC_REINIT_WIDTH))

/*! @brief Set the REINIT field to a new value. */
#define FTM_WR_SYNC_REINIT(base, value) (FTM_RMW_SYNC(base, FTM_SYNC_REINIT_MASK, FTM_SYNC_REINIT(value)))
#define FTM_BWR_SYNC_REINIT(base, value) (BME_BFI32(&FTM_SYNC_REG(base), ((uint32_t)(value) << FTM_SYNC_REINIT_SHIFT), FTM_SYNC_REINIT_SHIFT, FTM_SYNC_REINIT_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SYNC, field SYNCHOM[3] (RW)
 *
 * Selects when the OUTMASK register is updated with the value of its buffer.
 *
 * Values:
 * - 0b0 - OUTMASK register is updated with the value of its buffer in all
 *     rising edges of the system clock.
 * - 0b1 - OUTMASK register is updated with the value of its buffer only by the
 *     PWM synchronization.
 */
/*@{*/
/*! @brief Read current value of the FTM_SYNC_SYNCHOM field. */
#define FTM_RD_SYNC_SYNCHOM(base) ((FTM_SYNC_REG(base) & FTM_SYNC_SYNCHOM_MASK) >> FTM_SYNC_SYNCHOM_SHIFT)
#define FTM_BRD_SYNC_SYNCHOM(base) (BME_UBFX32(&FTM_SYNC_REG(base), FTM_SYNC_SYNCHOM_SHIFT, FTM_SYNC_SYNCHOM_WIDTH))

/*! @brief Set the SYNCHOM field to a new value. */
#define FTM_WR_SYNC_SYNCHOM(base, value) (FTM_RMW_SYNC(base, FTM_SYNC_SYNCHOM_MASK, FTM_SYNC_SYNCHOM(value)))
#define FTM_BWR_SYNC_SYNCHOM(base, value) (BME_BFI32(&FTM_SYNC_REG(base), ((uint32_t)(value) << FTM_SYNC_SYNCHOM_SHIFT), FTM_SYNC_SYNCHOM_SHIFT, FTM_SYNC_SYNCHOM_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SYNC, field TRIG0[4] (RW)
 *
 * Enables hardware trigger 0 to the PWM synchronization. Hardware trigger 0
 * occurs when a rising edge is detected at the trigger 0 input signal.
 *
 * Values:
 * - 0b0 - Trigger is disabled.
 * - 0b1 - Trigger is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_SYNC_TRIG0 field. */
#define FTM_RD_SYNC_TRIG0(base) ((FTM_SYNC_REG(base) & FTM_SYNC_TRIG0_MASK) >> FTM_SYNC_TRIG0_SHIFT)
#define FTM_BRD_SYNC_TRIG0(base) (BME_UBFX32(&FTM_SYNC_REG(base), FTM_SYNC_TRIG0_SHIFT, FTM_SYNC_TRIG0_WIDTH))

/*! @brief Set the TRIG0 field to a new value. */
#define FTM_WR_SYNC_TRIG0(base, value) (FTM_RMW_SYNC(base, FTM_SYNC_TRIG0_MASK, FTM_SYNC_TRIG0(value)))
#define FTM_BWR_SYNC_TRIG0(base, value) (BME_BFI32(&FTM_SYNC_REG(base), ((uint32_t)(value) << FTM_SYNC_TRIG0_SHIFT), FTM_SYNC_TRIG0_SHIFT, FTM_SYNC_TRIG0_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SYNC, field TRIG1[5] (RW)
 *
 * Enables hardware trigger 1 to the PWM synchronization. Hardware trigger 1
 * happens when a rising edge is detected at the trigger 1 input signal.
 *
 * Values:
 * - 0b0 - Trigger is disabled.
 * - 0b1 - Trigger is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_SYNC_TRIG1 field. */
#define FTM_RD_SYNC_TRIG1(base) ((FTM_SYNC_REG(base) & FTM_SYNC_TRIG1_MASK) >> FTM_SYNC_TRIG1_SHIFT)
#define FTM_BRD_SYNC_TRIG1(base) (BME_UBFX32(&FTM_SYNC_REG(base), FTM_SYNC_TRIG1_SHIFT, FTM_SYNC_TRIG1_WIDTH))

/*! @brief Set the TRIG1 field to a new value. */
#define FTM_WR_SYNC_TRIG1(base, value) (FTM_RMW_SYNC(base, FTM_SYNC_TRIG1_MASK, FTM_SYNC_TRIG1(value)))
#define FTM_BWR_SYNC_TRIG1(base, value) (BME_BFI32(&FTM_SYNC_REG(base), ((uint32_t)(value) << FTM_SYNC_TRIG1_SHIFT), FTM_SYNC_TRIG1_SHIFT, FTM_SYNC_TRIG1_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SYNC, field TRIG2[6] (RW)
 *
 * Enables hardware trigger 2 to the PWM synchronization. Hardware trigger 2
 * happens when a rising edge is detected at the trigger 2 input signal.
 *
 * Values:
 * - 0b0 - Trigger is disabled.
 * - 0b1 - Trigger is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_SYNC_TRIG2 field. */
#define FTM_RD_SYNC_TRIG2(base) ((FTM_SYNC_REG(base) & FTM_SYNC_TRIG2_MASK) >> FTM_SYNC_TRIG2_SHIFT)
#define FTM_BRD_SYNC_TRIG2(base) (BME_UBFX32(&FTM_SYNC_REG(base), FTM_SYNC_TRIG2_SHIFT, FTM_SYNC_TRIG2_WIDTH))

/*! @brief Set the TRIG2 field to a new value. */
#define FTM_WR_SYNC_TRIG2(base, value) (FTM_RMW_SYNC(base, FTM_SYNC_TRIG2_MASK, FTM_SYNC_TRIG2(value)))
#define FTM_BWR_SYNC_TRIG2(base, value) (BME_BFI32(&FTM_SYNC_REG(base), ((uint32_t)(value) << FTM_SYNC_TRIG2_SHIFT), FTM_SYNC_TRIG2_SHIFT, FTM_SYNC_TRIG2_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SYNC, field SWSYNC[7] (RW)
 *
 * Selects the software trigger as the PWM synchronization trigger. The software
 * trigger happens when a 1 is written to SWSYNC bit.
 *
 * Values:
 * - 0b0 - Software trigger is not selected.
 * - 0b1 - Software trigger is selected.
 */
/*@{*/
/*! @brief Read current value of the FTM_SYNC_SWSYNC field. */
#define FTM_RD_SYNC_SWSYNC(base) ((FTM_SYNC_REG(base) & FTM_SYNC_SWSYNC_MASK) >> FTM_SYNC_SWSYNC_SHIFT)
#define FTM_BRD_SYNC_SWSYNC(base) (BME_UBFX32(&FTM_SYNC_REG(base), FTM_SYNC_SWSYNC_SHIFT, FTM_SYNC_SWSYNC_WIDTH))

/*! @brief Set the SWSYNC field to a new value. */
#define FTM_WR_SYNC_SWSYNC(base, value) (FTM_RMW_SYNC(base, FTM_SYNC_SWSYNC_MASK, FTM_SYNC_SWSYNC(value)))
#define FTM_BWR_SYNC_SWSYNC(base, value) (BME_BFI32(&FTM_SYNC_REG(base), ((uint32_t)(value) << FTM_SYNC_SWSYNC_SHIFT), FTM_SYNC_SWSYNC_SHIFT, FTM_SYNC_SWSYNC_WIDTH))
/*@}*/

/*******************************************************************************
 * FTM_OUTINIT - Initial State For Channels Output
 ******************************************************************************/

/*!
 * @brief FTM_OUTINIT - Initial State For Channels Output (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire FTM_OUTINIT register
 */
/*@{*/
#define FTM_RD_OUTINIT(base)     (FTM_OUTINIT_REG(base))
#define FTM_WR_OUTINIT(base, value) (FTM_OUTINIT_REG(base) = (value))
#define FTM_RMW_OUTINIT(base, mask, value) (FTM_WR_OUTINIT(base, (FTM_RD_OUTINIT(base) & ~(mask)) | (value)))
#define FTM_SET_OUTINIT(base, value) (BME_OR32(&FTM_OUTINIT_REG(base), (uint32_t)(value)))
#define FTM_CLR_OUTINIT(base, value) (BME_AND32(&FTM_OUTINIT_REG(base), (uint32_t)(~(value))))
#define FTM_TOG_OUTINIT(base, value) (BME_XOR32(&FTM_OUTINIT_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTM_OUTINIT bitfields
 */

/*!
 * @name Register FTM_OUTINIT, field CH0OI[0] (RW)
 *
 * Selects the value that is forced into the channel output when the
 * initialization occurs.
 *
 * Values:
 * - 0b0 - The initialization value is 0.
 * - 0b1 - The initialization value is 1.
 */
/*@{*/
/*! @brief Read current value of the FTM_OUTINIT_CH0OI field. */
#define FTM_RD_OUTINIT_CH0OI(base) ((FTM_OUTINIT_REG(base) & FTM_OUTINIT_CH0OI_MASK) >> FTM_OUTINIT_CH0OI_SHIFT)
#define FTM_BRD_OUTINIT_CH0OI(base) (BME_UBFX32(&FTM_OUTINIT_REG(base), FTM_OUTINIT_CH0OI_SHIFT, FTM_OUTINIT_CH0OI_WIDTH))

/*! @brief Set the CH0OI field to a new value. */
#define FTM_WR_OUTINIT_CH0OI(base, value) (FTM_RMW_OUTINIT(base, FTM_OUTINIT_CH0OI_MASK, FTM_OUTINIT_CH0OI(value)))
#define FTM_BWR_OUTINIT_CH0OI(base, value) (BME_BFI32(&FTM_OUTINIT_REG(base), ((uint32_t)(value) << FTM_OUTINIT_CH0OI_SHIFT), FTM_OUTINIT_CH0OI_SHIFT, FTM_OUTINIT_CH0OI_WIDTH))
/*@}*/

/*!
 * @name Register FTM_OUTINIT, field CH1OI[1] (RW)
 *
 * Selects the value that is forced into the channel output when the
 * initialization occurs.
 *
 * Values:
 * - 0b0 - The initialization value is 0.
 * - 0b1 - The initialization value is 1.
 */
/*@{*/
/*! @brief Read current value of the FTM_OUTINIT_CH1OI field. */
#define FTM_RD_OUTINIT_CH1OI(base) ((FTM_OUTINIT_REG(base) & FTM_OUTINIT_CH1OI_MASK) >> FTM_OUTINIT_CH1OI_SHIFT)
#define FTM_BRD_OUTINIT_CH1OI(base) (BME_UBFX32(&FTM_OUTINIT_REG(base), FTM_OUTINIT_CH1OI_SHIFT, FTM_OUTINIT_CH1OI_WIDTH))

/*! @brief Set the CH1OI field to a new value. */
#define FTM_WR_OUTINIT_CH1OI(base, value) (FTM_RMW_OUTINIT(base, FTM_OUTINIT_CH1OI_MASK, FTM_OUTINIT_CH1OI(value)))
#define FTM_BWR_OUTINIT_CH1OI(base, value) (BME_BFI32(&FTM_OUTINIT_REG(base), ((uint32_t)(value) << FTM_OUTINIT_CH1OI_SHIFT), FTM_OUTINIT_CH1OI_SHIFT, FTM_OUTINIT_CH1OI_WIDTH))
/*@}*/

/*!
 * @name Register FTM_OUTINIT, field CH2OI[2] (RW)
 *
 * Selects the value that is forced into the channel output when the
 * initialization occurs.
 *
 * Values:
 * - 0b0 - The initialization value is 0.
 * - 0b1 - The initialization value is 1.
 */
/*@{*/
/*! @brief Read current value of the FTM_OUTINIT_CH2OI field. */
#define FTM_RD_OUTINIT_CH2OI(base) ((FTM_OUTINIT_REG(base) & FTM_OUTINIT_CH2OI_MASK) >> FTM_OUTINIT_CH2OI_SHIFT)
#define FTM_BRD_OUTINIT_CH2OI(base) (BME_UBFX32(&FTM_OUTINIT_REG(base), FTM_OUTINIT_CH2OI_SHIFT, FTM_OUTINIT_CH2OI_WIDTH))

/*! @brief Set the CH2OI field to a new value. */
#define FTM_WR_OUTINIT_CH2OI(base, value) (FTM_RMW_OUTINIT(base, FTM_OUTINIT_CH2OI_MASK, FTM_OUTINIT_CH2OI(value)))
#define FTM_BWR_OUTINIT_CH2OI(base, value) (BME_BFI32(&FTM_OUTINIT_REG(base), ((uint32_t)(value) << FTM_OUTINIT_CH2OI_SHIFT), FTM_OUTINIT_CH2OI_SHIFT, FTM_OUTINIT_CH2OI_WIDTH))
/*@}*/

/*!
 * @name Register FTM_OUTINIT, field CH3OI[3] (RW)
 *
 * Selects the value that is forced into the channel output when the
 * initialization occurs.
 *
 * Values:
 * - 0b0 - The initialization value is 0.
 * - 0b1 - The initialization value is 1.
 */
/*@{*/
/*! @brief Read current value of the FTM_OUTINIT_CH3OI field. */
#define FTM_RD_OUTINIT_CH3OI(base) ((FTM_OUTINIT_REG(base) & FTM_OUTINIT_CH3OI_MASK) >> FTM_OUTINIT_CH3OI_SHIFT)
#define FTM_BRD_OUTINIT_CH3OI(base) (BME_UBFX32(&FTM_OUTINIT_REG(base), FTM_OUTINIT_CH3OI_SHIFT, FTM_OUTINIT_CH3OI_WIDTH))

/*! @brief Set the CH3OI field to a new value. */
#define FTM_WR_OUTINIT_CH3OI(base, value) (FTM_RMW_OUTINIT(base, FTM_OUTINIT_CH3OI_MASK, FTM_OUTINIT_CH3OI(value)))
#define FTM_BWR_OUTINIT_CH3OI(base, value) (BME_BFI32(&FTM_OUTINIT_REG(base), ((uint32_t)(value) << FTM_OUTINIT_CH3OI_SHIFT), FTM_OUTINIT_CH3OI_SHIFT, FTM_OUTINIT_CH3OI_WIDTH))
/*@}*/

/*!
 * @name Register FTM_OUTINIT, field CH4OI[4] (RW)
 *
 * Selects the value that is forced into the channel output when the
 * initialization occurs.
 *
 * Values:
 * - 0b0 - The initialization value is 0.
 * - 0b1 - The initialization value is 1.
 */
/*@{*/
/*! @brief Read current value of the FTM_OUTINIT_CH4OI field. */
#define FTM_RD_OUTINIT_CH4OI(base) ((FTM_OUTINIT_REG(base) & FTM_OUTINIT_CH4OI_MASK) >> FTM_OUTINIT_CH4OI_SHIFT)
#define FTM_BRD_OUTINIT_CH4OI(base) (BME_UBFX32(&FTM_OUTINIT_REG(base), FTM_OUTINIT_CH4OI_SHIFT, FTM_OUTINIT_CH4OI_WIDTH))

/*! @brief Set the CH4OI field to a new value. */
#define FTM_WR_OUTINIT_CH4OI(base, value) (FTM_RMW_OUTINIT(base, FTM_OUTINIT_CH4OI_MASK, FTM_OUTINIT_CH4OI(value)))
#define FTM_BWR_OUTINIT_CH4OI(base, value) (BME_BFI32(&FTM_OUTINIT_REG(base), ((uint32_t)(value) << FTM_OUTINIT_CH4OI_SHIFT), FTM_OUTINIT_CH4OI_SHIFT, FTM_OUTINIT_CH4OI_WIDTH))
/*@}*/

/*!
 * @name Register FTM_OUTINIT, field CH5OI[5] (RW)
 *
 * Selects the value that is forced into the channel output when the
 * initialization occurs.
 *
 * Values:
 * - 0b0 - The initialization value is 0.
 * - 0b1 - The initialization value is 1.
 */
/*@{*/
/*! @brief Read current value of the FTM_OUTINIT_CH5OI field. */
#define FTM_RD_OUTINIT_CH5OI(base) ((FTM_OUTINIT_REG(base) & FTM_OUTINIT_CH5OI_MASK) >> FTM_OUTINIT_CH5OI_SHIFT)
#define FTM_BRD_OUTINIT_CH5OI(base) (BME_UBFX32(&FTM_OUTINIT_REG(base), FTM_OUTINIT_CH5OI_SHIFT, FTM_OUTINIT_CH5OI_WIDTH))

/*! @brief Set the CH5OI field to a new value. */
#define FTM_WR_OUTINIT_CH5OI(base, value) (FTM_RMW_OUTINIT(base, FTM_OUTINIT_CH5OI_MASK, FTM_OUTINIT_CH5OI(value)))
#define FTM_BWR_OUTINIT_CH5OI(base, value) (BME_BFI32(&FTM_OUTINIT_REG(base), ((uint32_t)(value) << FTM_OUTINIT_CH5OI_SHIFT), FTM_OUTINIT_CH5OI_SHIFT, FTM_OUTINIT_CH5OI_WIDTH))
/*@}*/

/*!
 * @name Register FTM_OUTINIT, field CH6OI[6] (RW)
 *
 * Selects the value that is forced into the channel output when the
 * initialization occurs.
 *
 * Values:
 * - 0b0 - The initialization value is 0.
 * - 0b1 - The initialization value is 1.
 */
/*@{*/
/*! @brief Read current value of the FTM_OUTINIT_CH6OI field. */
#define FTM_RD_OUTINIT_CH6OI(base) ((FTM_OUTINIT_REG(base) & FTM_OUTINIT_CH6OI_MASK) >> FTM_OUTINIT_CH6OI_SHIFT)
#define FTM_BRD_OUTINIT_CH6OI(base) (BME_UBFX32(&FTM_OUTINIT_REG(base), FTM_OUTINIT_CH6OI_SHIFT, FTM_OUTINIT_CH6OI_WIDTH))

/*! @brief Set the CH6OI field to a new value. */
#define FTM_WR_OUTINIT_CH6OI(base, value) (FTM_RMW_OUTINIT(base, FTM_OUTINIT_CH6OI_MASK, FTM_OUTINIT_CH6OI(value)))
#define FTM_BWR_OUTINIT_CH6OI(base, value) (BME_BFI32(&FTM_OUTINIT_REG(base), ((uint32_t)(value) << FTM_OUTINIT_CH6OI_SHIFT), FTM_OUTINIT_CH6OI_SHIFT, FTM_OUTINIT_CH6OI_WIDTH))
/*@}*/

/*!
 * @name Register FTM_OUTINIT, field CH7OI[7] (RW)
 *
 * Selects the value that is forced into the channel output when the
 * initialization occurs.
 *
 * Values:
 * - 0b0 - The initialization value is 0.
 * - 0b1 - The initialization value is 1.
 */
/*@{*/
/*! @brief Read current value of the FTM_OUTINIT_CH7OI field. */
#define FTM_RD_OUTINIT_CH7OI(base) ((FTM_OUTINIT_REG(base) & FTM_OUTINIT_CH7OI_MASK) >> FTM_OUTINIT_CH7OI_SHIFT)
#define FTM_BRD_OUTINIT_CH7OI(base) (BME_UBFX32(&FTM_OUTINIT_REG(base), FTM_OUTINIT_CH7OI_SHIFT, FTM_OUTINIT_CH7OI_WIDTH))

/*! @brief Set the CH7OI field to a new value. */
#define FTM_WR_OUTINIT_CH7OI(base, value) (FTM_RMW_OUTINIT(base, FTM_OUTINIT_CH7OI_MASK, FTM_OUTINIT_CH7OI(value)))
#define FTM_BWR_OUTINIT_CH7OI(base, value) (BME_BFI32(&FTM_OUTINIT_REG(base), ((uint32_t)(value) << FTM_OUTINIT_CH7OI_SHIFT), FTM_OUTINIT_CH7OI_SHIFT, FTM_OUTINIT_CH7OI_WIDTH))
/*@}*/

/*******************************************************************************
 * FTM_OUTMASK - Output Mask
 ******************************************************************************/

/*!
 * @brief FTM_OUTMASK - Output Mask (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register provides a mask for each FTM channel. The mask of a channel
 * determines if its output responds, that is, it is masked or not, when a match
 * occurs. This feature is used for BLDC control where the PWM signal is presented
 * to an electric motor at specific times to provide electronic commutation. Any
 * write to the OUTMASK register, stores the value in its write buffer. The
 * register is updated with the value of its write buffer according to PWM
 * synchronization.
 */
/*!
 * @name Constants and macros for entire FTM_OUTMASK register
 */
/*@{*/
#define FTM_RD_OUTMASK(base)     (FTM_OUTMASK_REG(base))
#define FTM_WR_OUTMASK(base, value) (FTM_OUTMASK_REG(base) = (value))
#define FTM_RMW_OUTMASK(base, mask, value) (FTM_WR_OUTMASK(base, (FTM_RD_OUTMASK(base) & ~(mask)) | (value)))
#define FTM_SET_OUTMASK(base, value) (BME_OR32(&FTM_OUTMASK_REG(base), (uint32_t)(value)))
#define FTM_CLR_OUTMASK(base, value) (BME_AND32(&FTM_OUTMASK_REG(base), (uint32_t)(~(value))))
#define FTM_TOG_OUTMASK(base, value) (BME_XOR32(&FTM_OUTMASK_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTM_OUTMASK bitfields
 */

/*!
 * @name Register FTM_OUTMASK, field CH0OM[0] (RW)
 *
 * Defines if the channel output is masked or unmasked.
 *
 * Values:
 * - 0b0 - Channel output is not masked. It continues to operate normally.
 * - 0b1 - Channel output is masked. It is forced to its inactive state.
 */
/*@{*/
/*! @brief Read current value of the FTM_OUTMASK_CH0OM field. */
#define FTM_RD_OUTMASK_CH0OM(base) ((FTM_OUTMASK_REG(base) & FTM_OUTMASK_CH0OM_MASK) >> FTM_OUTMASK_CH0OM_SHIFT)
#define FTM_BRD_OUTMASK_CH0OM(base) (BME_UBFX32(&FTM_OUTMASK_REG(base), FTM_OUTMASK_CH0OM_SHIFT, FTM_OUTMASK_CH0OM_WIDTH))

/*! @brief Set the CH0OM field to a new value. */
#define FTM_WR_OUTMASK_CH0OM(base, value) (FTM_RMW_OUTMASK(base, FTM_OUTMASK_CH0OM_MASK, FTM_OUTMASK_CH0OM(value)))
#define FTM_BWR_OUTMASK_CH0OM(base, value) (BME_BFI32(&FTM_OUTMASK_REG(base), ((uint32_t)(value) << FTM_OUTMASK_CH0OM_SHIFT), FTM_OUTMASK_CH0OM_SHIFT, FTM_OUTMASK_CH0OM_WIDTH))
/*@}*/

/*!
 * @name Register FTM_OUTMASK, field CH1OM[1] (RW)
 *
 * Defines if the channel output is masked or unmasked.
 *
 * Values:
 * - 0b0 - Channel output is not masked. It continues to operate normally.
 * - 0b1 - Channel output is masked. It is forced to its inactive state.
 */
/*@{*/
/*! @brief Read current value of the FTM_OUTMASK_CH1OM field. */
#define FTM_RD_OUTMASK_CH1OM(base) ((FTM_OUTMASK_REG(base) & FTM_OUTMASK_CH1OM_MASK) >> FTM_OUTMASK_CH1OM_SHIFT)
#define FTM_BRD_OUTMASK_CH1OM(base) (BME_UBFX32(&FTM_OUTMASK_REG(base), FTM_OUTMASK_CH1OM_SHIFT, FTM_OUTMASK_CH1OM_WIDTH))

/*! @brief Set the CH1OM field to a new value. */
#define FTM_WR_OUTMASK_CH1OM(base, value) (FTM_RMW_OUTMASK(base, FTM_OUTMASK_CH1OM_MASK, FTM_OUTMASK_CH1OM(value)))
#define FTM_BWR_OUTMASK_CH1OM(base, value) (BME_BFI32(&FTM_OUTMASK_REG(base), ((uint32_t)(value) << FTM_OUTMASK_CH1OM_SHIFT), FTM_OUTMASK_CH1OM_SHIFT, FTM_OUTMASK_CH1OM_WIDTH))
/*@}*/

/*!
 * @name Register FTM_OUTMASK, field CH2OM[2] (RW)
 *
 * Defines if the channel output is masked or unmasked.
 *
 * Values:
 * - 0b0 - Channel output is not masked. It continues to operate normally.
 * - 0b1 - Channel output is masked. It is forced to its inactive state.
 */
/*@{*/
/*! @brief Read current value of the FTM_OUTMASK_CH2OM field. */
#define FTM_RD_OUTMASK_CH2OM(base) ((FTM_OUTMASK_REG(base) & FTM_OUTMASK_CH2OM_MASK) >> FTM_OUTMASK_CH2OM_SHIFT)
#define FTM_BRD_OUTMASK_CH2OM(base) (BME_UBFX32(&FTM_OUTMASK_REG(base), FTM_OUTMASK_CH2OM_SHIFT, FTM_OUTMASK_CH2OM_WIDTH))

/*! @brief Set the CH2OM field to a new value. */
#define FTM_WR_OUTMASK_CH2OM(base, value) (FTM_RMW_OUTMASK(base, FTM_OUTMASK_CH2OM_MASK, FTM_OUTMASK_CH2OM(value)))
#define FTM_BWR_OUTMASK_CH2OM(base, value) (BME_BFI32(&FTM_OUTMASK_REG(base), ((uint32_t)(value) << FTM_OUTMASK_CH2OM_SHIFT), FTM_OUTMASK_CH2OM_SHIFT, FTM_OUTMASK_CH2OM_WIDTH))
/*@}*/

/*!
 * @name Register FTM_OUTMASK, field CH3OM[3] (RW)
 *
 * Defines if the channel output is masked or unmasked.
 *
 * Values:
 * - 0b0 - Channel output is not masked. It continues to operate normally.
 * - 0b1 - Channel output is masked. It is forced to its inactive state.
 */
/*@{*/
/*! @brief Read current value of the FTM_OUTMASK_CH3OM field. */
#define FTM_RD_OUTMASK_CH3OM(base) ((FTM_OUTMASK_REG(base) & FTM_OUTMASK_CH3OM_MASK) >> FTM_OUTMASK_CH3OM_SHIFT)
#define FTM_BRD_OUTMASK_CH3OM(base) (BME_UBFX32(&FTM_OUTMASK_REG(base), FTM_OUTMASK_CH3OM_SHIFT, FTM_OUTMASK_CH3OM_WIDTH))

/*! @brief Set the CH3OM field to a new value. */
#define FTM_WR_OUTMASK_CH3OM(base, value) (FTM_RMW_OUTMASK(base, FTM_OUTMASK_CH3OM_MASK, FTM_OUTMASK_CH3OM(value)))
#define FTM_BWR_OUTMASK_CH3OM(base, value) (BME_BFI32(&FTM_OUTMASK_REG(base), ((uint32_t)(value) << FTM_OUTMASK_CH3OM_SHIFT), FTM_OUTMASK_CH3OM_SHIFT, FTM_OUTMASK_CH3OM_WIDTH))
/*@}*/

/*!
 * @name Register FTM_OUTMASK, field CH4OM[4] (RW)
 *
 * Defines if the channel output is masked or unmasked.
 *
 * Values:
 * - 0b0 - Channel output is not masked. It continues to operate normally.
 * - 0b1 - Channel output is masked. It is forced to its inactive state.
 */
/*@{*/
/*! @brief Read current value of the FTM_OUTMASK_CH4OM field. */
#define FTM_RD_OUTMASK_CH4OM(base) ((FTM_OUTMASK_REG(base) & FTM_OUTMASK_CH4OM_MASK) >> FTM_OUTMASK_CH4OM_SHIFT)
#define FTM_BRD_OUTMASK_CH4OM(base) (BME_UBFX32(&FTM_OUTMASK_REG(base), FTM_OUTMASK_CH4OM_SHIFT, FTM_OUTMASK_CH4OM_WIDTH))

/*! @brief Set the CH4OM field to a new value. */
#define FTM_WR_OUTMASK_CH4OM(base, value) (FTM_RMW_OUTMASK(base, FTM_OUTMASK_CH4OM_MASK, FTM_OUTMASK_CH4OM(value)))
#define FTM_BWR_OUTMASK_CH4OM(base, value) (BME_BFI32(&FTM_OUTMASK_REG(base), ((uint32_t)(value) << FTM_OUTMASK_CH4OM_SHIFT), FTM_OUTMASK_CH4OM_SHIFT, FTM_OUTMASK_CH4OM_WIDTH))
/*@}*/

/*!
 * @name Register FTM_OUTMASK, field CH5OM[5] (RW)
 *
 * Defines if the channel output is masked or unmasked.
 *
 * Values:
 * - 0b0 - Channel output is not masked. It continues to operate normally.
 * - 0b1 - Channel output is masked. It is forced to its inactive state.
 */
/*@{*/
/*! @brief Read current value of the FTM_OUTMASK_CH5OM field. */
#define FTM_RD_OUTMASK_CH5OM(base) ((FTM_OUTMASK_REG(base) & FTM_OUTMASK_CH5OM_MASK) >> FTM_OUTMASK_CH5OM_SHIFT)
#define FTM_BRD_OUTMASK_CH5OM(base) (BME_UBFX32(&FTM_OUTMASK_REG(base), FTM_OUTMASK_CH5OM_SHIFT, FTM_OUTMASK_CH5OM_WIDTH))

/*! @brief Set the CH5OM field to a new value. */
#define FTM_WR_OUTMASK_CH5OM(base, value) (FTM_RMW_OUTMASK(base, FTM_OUTMASK_CH5OM_MASK, FTM_OUTMASK_CH5OM(value)))
#define FTM_BWR_OUTMASK_CH5OM(base, value) (BME_BFI32(&FTM_OUTMASK_REG(base), ((uint32_t)(value) << FTM_OUTMASK_CH5OM_SHIFT), FTM_OUTMASK_CH5OM_SHIFT, FTM_OUTMASK_CH5OM_WIDTH))
/*@}*/

/*!
 * @name Register FTM_OUTMASK, field CH6OM[6] (RW)
 *
 * Defines if the channel output is masked or unmasked.
 *
 * Values:
 * - 0b0 - Channel output is not masked. It continues to operate normally.
 * - 0b1 - Channel output is masked. It is forced to its inactive state.
 */
/*@{*/
/*! @brief Read current value of the FTM_OUTMASK_CH6OM field. */
#define FTM_RD_OUTMASK_CH6OM(base) ((FTM_OUTMASK_REG(base) & FTM_OUTMASK_CH6OM_MASK) >> FTM_OUTMASK_CH6OM_SHIFT)
#define FTM_BRD_OUTMASK_CH6OM(base) (BME_UBFX32(&FTM_OUTMASK_REG(base), FTM_OUTMASK_CH6OM_SHIFT, FTM_OUTMASK_CH6OM_WIDTH))

/*! @brief Set the CH6OM field to a new value. */
#define FTM_WR_OUTMASK_CH6OM(base, value) (FTM_RMW_OUTMASK(base, FTM_OUTMASK_CH6OM_MASK, FTM_OUTMASK_CH6OM(value)))
#define FTM_BWR_OUTMASK_CH6OM(base, value) (BME_BFI32(&FTM_OUTMASK_REG(base), ((uint32_t)(value) << FTM_OUTMASK_CH6OM_SHIFT), FTM_OUTMASK_CH6OM_SHIFT, FTM_OUTMASK_CH6OM_WIDTH))
/*@}*/

/*!
 * @name Register FTM_OUTMASK, field CH7OM[7] (RW)
 *
 * Defines if the channel output is masked or unmasked.
 *
 * Values:
 * - 0b0 - Channel output is not masked. It continues to operate normally.
 * - 0b1 - Channel output is masked. It is forced to its inactive state.
 */
/*@{*/
/*! @brief Read current value of the FTM_OUTMASK_CH7OM field. */
#define FTM_RD_OUTMASK_CH7OM(base) ((FTM_OUTMASK_REG(base) & FTM_OUTMASK_CH7OM_MASK) >> FTM_OUTMASK_CH7OM_SHIFT)
#define FTM_BRD_OUTMASK_CH7OM(base) (BME_UBFX32(&FTM_OUTMASK_REG(base), FTM_OUTMASK_CH7OM_SHIFT, FTM_OUTMASK_CH7OM_WIDTH))

/*! @brief Set the CH7OM field to a new value. */
#define FTM_WR_OUTMASK_CH7OM(base, value) (FTM_RMW_OUTMASK(base, FTM_OUTMASK_CH7OM_MASK, FTM_OUTMASK_CH7OM(value)))
#define FTM_BWR_OUTMASK_CH7OM(base, value) (BME_BFI32(&FTM_OUTMASK_REG(base), ((uint32_t)(value) << FTM_OUTMASK_CH7OM_SHIFT), FTM_OUTMASK_CH7OM_SHIFT, FTM_OUTMASK_CH7OM_WIDTH))
/*@}*/

/*******************************************************************************
 * FTM_COMBINE - Function For Linked Channels
 ******************************************************************************/

/*!
 * @brief FTM_COMBINE - Function For Linked Channels (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register contains the control bits used to configure the fault control,
 * synchronization, deadtime insertion, Dual Edge Capture mode, Complementary,
 * and Combine mode for each pair of channels (n) and (n+1), where n equals 0, 2,
 * 4, and 6.
 */
/*!
 * @name Constants and macros for entire FTM_COMBINE register
 */
/*@{*/
#define FTM_RD_COMBINE(base)     (FTM_COMBINE_REG(base))
#define FTM_WR_COMBINE(base, value) (FTM_COMBINE_REG(base) = (value))
#define FTM_RMW_COMBINE(base, mask, value) (FTM_WR_COMBINE(base, (FTM_RD_COMBINE(base) & ~(mask)) | (value)))
#define FTM_SET_COMBINE(base, value) (BME_OR32(&FTM_COMBINE_REG(base), (uint32_t)(value)))
#define FTM_CLR_COMBINE(base, value) (BME_AND32(&FTM_COMBINE_REG(base), (uint32_t)(~(value))))
#define FTM_TOG_COMBINE(base, value) (BME_XOR32(&FTM_COMBINE_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTM_COMBINE bitfields
 */

/*!
 * @name Register FTM_COMBINE, field COMBINE0[0] (RW)
 *
 * Enables the combine feature for channels (n) and (n+1). This field is write
 * protected. It can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - Channels (n) and (n+1) are independent.
 * - 0b1 - Channels (n) and (n+1) are combined.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_COMBINE0 field. */
#define FTM_RD_COMBINE_COMBINE0(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_COMBINE0_MASK) >> FTM_COMBINE_COMBINE0_SHIFT)
#define FTM_BRD_COMBINE_COMBINE0(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_COMBINE0_SHIFT, FTM_COMBINE_COMBINE0_WIDTH))

/*! @brief Set the COMBINE0 field to a new value. */
#define FTM_WR_COMBINE_COMBINE0(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_COMBINE0_MASK, FTM_COMBINE_COMBINE0(value)))
#define FTM_BWR_COMBINE_COMBINE0(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_COMBINE0_SHIFT), FTM_COMBINE_COMBINE0_SHIFT, FTM_COMBINE_COMBINE0_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field COMP0[1] (RW)
 *
 * Enables Complementary mode for the combined channels. In Complementary mode
 * the channel (n+1) output is the inverse of the channel (n) output. This field
 * is write protected. It can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The channel (n+1) output is the same as the channel (n) output.
 * - 0b1 - The channel (n+1) output is the complement of the channel (n) output.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_COMP0 field. */
#define FTM_RD_COMBINE_COMP0(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_COMP0_MASK) >> FTM_COMBINE_COMP0_SHIFT)
#define FTM_BRD_COMBINE_COMP0(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_COMP0_SHIFT, FTM_COMBINE_COMP0_WIDTH))

/*! @brief Set the COMP0 field to a new value. */
#define FTM_WR_COMBINE_COMP0(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_COMP0_MASK, FTM_COMBINE_COMP0(value)))
#define FTM_BWR_COMBINE_COMP0(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_COMP0_SHIFT), FTM_COMBINE_COMP0_SHIFT, FTM_COMBINE_COMP0_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field DECAPEN0[2] (RW)
 *
 * Enables the Dual Edge Capture mode in the channels (n) and (n+1). This bit
 * reconfigures the function of MSnA, ELSnB:ELSnA and ELS(n+1)B:ELS(n+1)A bits in
 * Dual Edge Capture mode according to . This field is write protected. It can be
 * written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The Dual Edge Capture mode in this pair of channels is disabled.
 * - 0b1 - The Dual Edge Capture mode in this pair of channels is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_DECAPEN0 field. */
#define FTM_RD_COMBINE_DECAPEN0(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_DECAPEN0_MASK) >> FTM_COMBINE_DECAPEN0_SHIFT)
#define FTM_BRD_COMBINE_DECAPEN0(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_DECAPEN0_SHIFT, FTM_COMBINE_DECAPEN0_WIDTH))

/*! @brief Set the DECAPEN0 field to a new value. */
#define FTM_WR_COMBINE_DECAPEN0(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_DECAPEN0_MASK, FTM_COMBINE_DECAPEN0(value)))
#define FTM_BWR_COMBINE_DECAPEN0(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_DECAPEN0_SHIFT), FTM_COMBINE_DECAPEN0_SHIFT, FTM_COMBINE_DECAPEN0_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field DECAP0[3] (RW)
 *
 * Enables the capture of the FTM counter value according to the channel (n)
 * input event and the configuration of the dual edge capture bits. This field
 * applies only when DECAPEN = 1. DECAP bit is cleared automatically by hardware if
 * dual edge capture - one-shot mode is selected and when the capture of channel
 * (n+1) event is made.
 *
 * Values:
 * - 0b0 - The dual edge captures are inactive.
 * - 0b1 - The dual edge captures are active.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_DECAP0 field. */
#define FTM_RD_COMBINE_DECAP0(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_DECAP0_MASK) >> FTM_COMBINE_DECAP0_SHIFT)
#define FTM_BRD_COMBINE_DECAP0(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_DECAP0_SHIFT, FTM_COMBINE_DECAP0_WIDTH))

/*! @brief Set the DECAP0 field to a new value. */
#define FTM_WR_COMBINE_DECAP0(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_DECAP0_MASK, FTM_COMBINE_DECAP0(value)))
#define FTM_BWR_COMBINE_DECAP0(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_DECAP0_SHIFT), FTM_COMBINE_DECAP0_SHIFT, FTM_COMBINE_DECAP0_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field DTEN0[4] (RW)
 *
 * Enables the deadtime insertion in the channels (n) and (n+1). This field is
 * write protected. It can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The deadtime insertion in this pair of channels is disabled.
 * - 0b1 - The deadtime insertion in this pair of channels is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_DTEN0 field. */
#define FTM_RD_COMBINE_DTEN0(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_DTEN0_MASK) >> FTM_COMBINE_DTEN0_SHIFT)
#define FTM_BRD_COMBINE_DTEN0(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_DTEN0_SHIFT, FTM_COMBINE_DTEN0_WIDTH))

/*! @brief Set the DTEN0 field to a new value. */
#define FTM_WR_COMBINE_DTEN0(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_DTEN0_MASK, FTM_COMBINE_DTEN0(value)))
#define FTM_BWR_COMBINE_DTEN0(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_DTEN0_SHIFT), FTM_COMBINE_DTEN0_SHIFT, FTM_COMBINE_DTEN0_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field SYNCEN0[5] (RW)
 *
 * Enables PWM synchronization of registers C(n)V and C(n+1)V.
 *
 * Values:
 * - 0b0 - The PWM synchronization in this pair of channels is disabled.
 * - 0b1 - The PWM synchronization in this pair of channels is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_SYNCEN0 field. */
#define FTM_RD_COMBINE_SYNCEN0(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_SYNCEN0_MASK) >> FTM_COMBINE_SYNCEN0_SHIFT)
#define FTM_BRD_COMBINE_SYNCEN0(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_SYNCEN0_SHIFT, FTM_COMBINE_SYNCEN0_WIDTH))

/*! @brief Set the SYNCEN0 field to a new value. */
#define FTM_WR_COMBINE_SYNCEN0(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_SYNCEN0_MASK, FTM_COMBINE_SYNCEN0(value)))
#define FTM_BWR_COMBINE_SYNCEN0(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_SYNCEN0_SHIFT), FTM_COMBINE_SYNCEN0_SHIFT, FTM_COMBINE_SYNCEN0_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field FAULTEN0[6] (RW)
 *
 * Enables the fault control in channels (n) and (n+1). This field is write
 * protected. It can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The fault control in this pair of channels is disabled.
 * - 0b1 - The fault control in this pair of channels is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_FAULTEN0 field. */
#define FTM_RD_COMBINE_FAULTEN0(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_FAULTEN0_MASK) >> FTM_COMBINE_FAULTEN0_SHIFT)
#define FTM_BRD_COMBINE_FAULTEN0(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_FAULTEN0_SHIFT, FTM_COMBINE_FAULTEN0_WIDTH))

/*! @brief Set the FAULTEN0 field to a new value. */
#define FTM_WR_COMBINE_FAULTEN0(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_FAULTEN0_MASK, FTM_COMBINE_FAULTEN0(value)))
#define FTM_BWR_COMBINE_FAULTEN0(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_FAULTEN0_SHIFT), FTM_COMBINE_FAULTEN0_SHIFT, FTM_COMBINE_FAULTEN0_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field COMBINE1[8] (RW)
 *
 * Enables the combine feature for channels (n) and (n+1). This field is write
 * protected. It can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - Channels (n) and (n+1) are independent.
 * - 0b1 - Channels (n) and (n+1) are combined.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_COMBINE1 field. */
#define FTM_RD_COMBINE_COMBINE1(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_COMBINE1_MASK) >> FTM_COMBINE_COMBINE1_SHIFT)
#define FTM_BRD_COMBINE_COMBINE1(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_COMBINE1_SHIFT, FTM_COMBINE_COMBINE1_WIDTH))

/*! @brief Set the COMBINE1 field to a new value. */
#define FTM_WR_COMBINE_COMBINE1(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_COMBINE1_MASK, FTM_COMBINE_COMBINE1(value)))
#define FTM_BWR_COMBINE_COMBINE1(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_COMBINE1_SHIFT), FTM_COMBINE_COMBINE1_SHIFT, FTM_COMBINE_COMBINE1_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field COMP1[9] (RW)
 *
 * Enables Complementary mode for the combined channels. In Complementary mode
 * the channel (n+1) output is the inverse of the channel (n) output. This field
 * is write protected. It can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The channel (n+1) output is the same as the channel (n) output.
 * - 0b1 - The channel (n+1) output is the complement of the channel (n) output.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_COMP1 field. */
#define FTM_RD_COMBINE_COMP1(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_COMP1_MASK) >> FTM_COMBINE_COMP1_SHIFT)
#define FTM_BRD_COMBINE_COMP1(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_COMP1_SHIFT, FTM_COMBINE_COMP1_WIDTH))

/*! @brief Set the COMP1 field to a new value. */
#define FTM_WR_COMBINE_COMP1(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_COMP1_MASK, FTM_COMBINE_COMP1(value)))
#define FTM_BWR_COMBINE_COMP1(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_COMP1_SHIFT), FTM_COMBINE_COMP1_SHIFT, FTM_COMBINE_COMP1_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field DECAPEN1[10] (RW)
 *
 * Enables the Dual Edge Capture mode in the channels (n) and (n+1). This bit
 * reconfigures the function of MSnA, ELSnB:ELSnA and ELS(n+1)B:ELS(n+1)A bits in
 * Dual Edge Capture mode according to . This field is write protected. It can be
 * written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The Dual Edge Capture mode in this pair of channels is disabled.
 * - 0b1 - The Dual Edge Capture mode in this pair of channels is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_DECAPEN1 field. */
#define FTM_RD_COMBINE_DECAPEN1(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_DECAPEN1_MASK) >> FTM_COMBINE_DECAPEN1_SHIFT)
#define FTM_BRD_COMBINE_DECAPEN1(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_DECAPEN1_SHIFT, FTM_COMBINE_DECAPEN1_WIDTH))

/*! @brief Set the DECAPEN1 field to a new value. */
#define FTM_WR_COMBINE_DECAPEN1(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_DECAPEN1_MASK, FTM_COMBINE_DECAPEN1(value)))
#define FTM_BWR_COMBINE_DECAPEN1(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_DECAPEN1_SHIFT), FTM_COMBINE_DECAPEN1_SHIFT, FTM_COMBINE_DECAPEN1_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field DECAP1[11] (RW)
 *
 * Enables the capture of the FTM counter value according to the channel (n)
 * input event and the configuration of the dual edge capture bits. This field
 * applies only when DECAPEN = 1. DECAP bit is cleared automatically by hardware if
 * Dual Edge Capture - One-Shot mode is selected and when the capture of channel
 * (n+1) event is made.
 *
 * Values:
 * - 0b0 - The dual edge captures are inactive.
 * - 0b1 - The dual edge captures are active.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_DECAP1 field. */
#define FTM_RD_COMBINE_DECAP1(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_DECAP1_MASK) >> FTM_COMBINE_DECAP1_SHIFT)
#define FTM_BRD_COMBINE_DECAP1(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_DECAP1_SHIFT, FTM_COMBINE_DECAP1_WIDTH))

/*! @brief Set the DECAP1 field to a new value. */
#define FTM_WR_COMBINE_DECAP1(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_DECAP1_MASK, FTM_COMBINE_DECAP1(value)))
#define FTM_BWR_COMBINE_DECAP1(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_DECAP1_SHIFT), FTM_COMBINE_DECAP1_SHIFT, FTM_COMBINE_DECAP1_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field DTEN1[12] (RW)
 *
 * Enables the deadtime insertion in the channels (n) and (n+1). This field is
 * write protected. It can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The deadtime insertion in this pair of channels is disabled.
 * - 0b1 - The deadtime insertion in this pair of channels is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_DTEN1 field. */
#define FTM_RD_COMBINE_DTEN1(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_DTEN1_MASK) >> FTM_COMBINE_DTEN1_SHIFT)
#define FTM_BRD_COMBINE_DTEN1(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_DTEN1_SHIFT, FTM_COMBINE_DTEN1_WIDTH))

/*! @brief Set the DTEN1 field to a new value. */
#define FTM_WR_COMBINE_DTEN1(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_DTEN1_MASK, FTM_COMBINE_DTEN1(value)))
#define FTM_BWR_COMBINE_DTEN1(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_DTEN1_SHIFT), FTM_COMBINE_DTEN1_SHIFT, FTM_COMBINE_DTEN1_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field SYNCEN1[13] (RW)
 *
 * Enables PWM synchronization of registers C(n)V and C(n+1)V.
 *
 * Values:
 * - 0b0 - The PWM synchronization in this pair of channels is disabled.
 * - 0b1 - The PWM synchronization in this pair of channels is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_SYNCEN1 field. */
#define FTM_RD_COMBINE_SYNCEN1(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_SYNCEN1_MASK) >> FTM_COMBINE_SYNCEN1_SHIFT)
#define FTM_BRD_COMBINE_SYNCEN1(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_SYNCEN1_SHIFT, FTM_COMBINE_SYNCEN1_WIDTH))

/*! @brief Set the SYNCEN1 field to a new value. */
#define FTM_WR_COMBINE_SYNCEN1(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_SYNCEN1_MASK, FTM_COMBINE_SYNCEN1(value)))
#define FTM_BWR_COMBINE_SYNCEN1(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_SYNCEN1_SHIFT), FTM_COMBINE_SYNCEN1_SHIFT, FTM_COMBINE_SYNCEN1_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field FAULTEN1[14] (RW)
 *
 * Enables the fault control in channels (n) and (n+1). This field is write
 * protected. It can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The fault control in this pair of channels is disabled.
 * - 0b1 - The fault control in this pair of channels is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_FAULTEN1 field. */
#define FTM_RD_COMBINE_FAULTEN1(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_FAULTEN1_MASK) >> FTM_COMBINE_FAULTEN1_SHIFT)
#define FTM_BRD_COMBINE_FAULTEN1(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_FAULTEN1_SHIFT, FTM_COMBINE_FAULTEN1_WIDTH))

/*! @brief Set the FAULTEN1 field to a new value. */
#define FTM_WR_COMBINE_FAULTEN1(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_FAULTEN1_MASK, FTM_COMBINE_FAULTEN1(value)))
#define FTM_BWR_COMBINE_FAULTEN1(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_FAULTEN1_SHIFT), FTM_COMBINE_FAULTEN1_SHIFT, FTM_COMBINE_FAULTEN1_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field COMBINE2[16] (RW)
 *
 * Enables the combine feature for channels (n) and (n+1). This field is write
 * protected. It can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - Channels (n) and (n+1) are independent.
 * - 0b1 - Channels (n) and (n+1) are combined.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_COMBINE2 field. */
#define FTM_RD_COMBINE_COMBINE2(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_COMBINE2_MASK) >> FTM_COMBINE_COMBINE2_SHIFT)
#define FTM_BRD_COMBINE_COMBINE2(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_COMBINE2_SHIFT, FTM_COMBINE_COMBINE2_WIDTH))

/*! @brief Set the COMBINE2 field to a new value. */
#define FTM_WR_COMBINE_COMBINE2(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_COMBINE2_MASK, FTM_COMBINE_COMBINE2(value)))
#define FTM_BWR_COMBINE_COMBINE2(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_COMBINE2_SHIFT), FTM_COMBINE_COMBINE2_SHIFT, FTM_COMBINE_COMBINE2_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field COMP2[17] (RW)
 *
 * Enables Complementary mode for the combined channels. In Complementary mode
 * the channel (n+1) output is the inverse of the channel (n) output. This field
 * is write protected. It can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The channel (n+1) output is the same as the channel (n) output.
 * - 0b1 - The channel (n+1) output is the complement of the channel (n) output.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_COMP2 field. */
#define FTM_RD_COMBINE_COMP2(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_COMP2_MASK) >> FTM_COMBINE_COMP2_SHIFT)
#define FTM_BRD_COMBINE_COMP2(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_COMP2_SHIFT, FTM_COMBINE_COMP2_WIDTH))

/*! @brief Set the COMP2 field to a new value. */
#define FTM_WR_COMBINE_COMP2(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_COMP2_MASK, FTM_COMBINE_COMP2(value)))
#define FTM_BWR_COMBINE_COMP2(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_COMP2_SHIFT), FTM_COMBINE_COMP2_SHIFT, FTM_COMBINE_COMP2_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field DECAPEN2[18] (RW)
 *
 * Enables the Dual Edge Capture mode in the channels (n) and (n+1). This bit
 * reconfigures the function of MSnA, ELSnB:ELSnA and ELS(n+1)B:ELS(n+1)A bits in
 * Dual Edge Capture mode according to . This field is write protected. It can be
 * written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The Dual Edge Capture mode in this pair of channels is disabled.
 * - 0b1 - The Dual Edge Capture mode in this pair of channels is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_DECAPEN2 field. */
#define FTM_RD_COMBINE_DECAPEN2(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_DECAPEN2_MASK) >> FTM_COMBINE_DECAPEN2_SHIFT)
#define FTM_BRD_COMBINE_DECAPEN2(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_DECAPEN2_SHIFT, FTM_COMBINE_DECAPEN2_WIDTH))

/*! @brief Set the DECAPEN2 field to a new value. */
#define FTM_WR_COMBINE_DECAPEN2(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_DECAPEN2_MASK, FTM_COMBINE_DECAPEN2(value)))
#define FTM_BWR_COMBINE_DECAPEN2(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_DECAPEN2_SHIFT), FTM_COMBINE_DECAPEN2_SHIFT, FTM_COMBINE_DECAPEN2_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field DECAP2[19] (RW)
 *
 * Enables the capture of the FTM counter value according to the channel (n)
 * input event and the configuration of the dual edge capture bits. This field
 * applies only when DECAPEN = 1. DECAP bit is cleared automatically by hardware if
 * dual edge capture - one-shot mode is selected and when the capture of channel
 * (n+1) event is made.
 *
 * Values:
 * - 0b0 - The dual edge captures are inactive.
 * - 0b1 - The dual edge captures are active.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_DECAP2 field. */
#define FTM_RD_COMBINE_DECAP2(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_DECAP2_MASK) >> FTM_COMBINE_DECAP2_SHIFT)
#define FTM_BRD_COMBINE_DECAP2(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_DECAP2_SHIFT, FTM_COMBINE_DECAP2_WIDTH))

/*! @brief Set the DECAP2 field to a new value. */
#define FTM_WR_COMBINE_DECAP2(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_DECAP2_MASK, FTM_COMBINE_DECAP2(value)))
#define FTM_BWR_COMBINE_DECAP2(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_DECAP2_SHIFT), FTM_COMBINE_DECAP2_SHIFT, FTM_COMBINE_DECAP2_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field DTEN2[20] (RW)
 *
 * Enables the deadtime insertion in the channels (n) and (n+1). This field is
 * write protected. It can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The deadtime insertion in this pair of channels is disabled.
 * - 0b1 - The deadtime insertion in this pair of channels is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_DTEN2 field. */
#define FTM_RD_COMBINE_DTEN2(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_DTEN2_MASK) >> FTM_COMBINE_DTEN2_SHIFT)
#define FTM_BRD_COMBINE_DTEN2(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_DTEN2_SHIFT, FTM_COMBINE_DTEN2_WIDTH))

/*! @brief Set the DTEN2 field to a new value. */
#define FTM_WR_COMBINE_DTEN2(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_DTEN2_MASK, FTM_COMBINE_DTEN2(value)))
#define FTM_BWR_COMBINE_DTEN2(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_DTEN2_SHIFT), FTM_COMBINE_DTEN2_SHIFT, FTM_COMBINE_DTEN2_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field SYNCEN2[21] (RW)
 *
 * Enables PWM synchronization of registers C(n)V and C(n+1)V.
 *
 * Values:
 * - 0b0 - The PWM synchronization in this pair of channels is disabled.
 * - 0b1 - The PWM synchronization in this pair of channels is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_SYNCEN2 field. */
#define FTM_RD_COMBINE_SYNCEN2(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_SYNCEN2_MASK) >> FTM_COMBINE_SYNCEN2_SHIFT)
#define FTM_BRD_COMBINE_SYNCEN2(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_SYNCEN2_SHIFT, FTM_COMBINE_SYNCEN2_WIDTH))

/*! @brief Set the SYNCEN2 field to a new value. */
#define FTM_WR_COMBINE_SYNCEN2(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_SYNCEN2_MASK, FTM_COMBINE_SYNCEN2(value)))
#define FTM_BWR_COMBINE_SYNCEN2(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_SYNCEN2_SHIFT), FTM_COMBINE_SYNCEN2_SHIFT, FTM_COMBINE_SYNCEN2_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field FAULTEN2[22] (RW)
 *
 * Enables the fault control in channels (n) and (n+1). This field is write
 * protected. It can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The fault control in this pair of channels is disabled.
 * - 0b1 - The fault control in this pair of channels is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_FAULTEN2 field. */
#define FTM_RD_COMBINE_FAULTEN2(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_FAULTEN2_MASK) >> FTM_COMBINE_FAULTEN2_SHIFT)
#define FTM_BRD_COMBINE_FAULTEN2(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_FAULTEN2_SHIFT, FTM_COMBINE_FAULTEN2_WIDTH))

/*! @brief Set the FAULTEN2 field to a new value. */
#define FTM_WR_COMBINE_FAULTEN2(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_FAULTEN2_MASK, FTM_COMBINE_FAULTEN2(value)))
#define FTM_BWR_COMBINE_FAULTEN2(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_FAULTEN2_SHIFT), FTM_COMBINE_FAULTEN2_SHIFT, FTM_COMBINE_FAULTEN2_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field COMBINE3[24] (RW)
 *
 * Enables the combine feature for channels (n) and (n+1). This field is write
 * protected. It can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - Channels (n) and (n+1) are independent.
 * - 0b1 - Channels (n) and (n+1) are combined.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_COMBINE3 field. */
#define FTM_RD_COMBINE_COMBINE3(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_COMBINE3_MASK) >> FTM_COMBINE_COMBINE3_SHIFT)
#define FTM_BRD_COMBINE_COMBINE3(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_COMBINE3_SHIFT, FTM_COMBINE_COMBINE3_WIDTH))

/*! @brief Set the COMBINE3 field to a new value. */
#define FTM_WR_COMBINE_COMBINE3(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_COMBINE3_MASK, FTM_COMBINE_COMBINE3(value)))
#define FTM_BWR_COMBINE_COMBINE3(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_COMBINE3_SHIFT), FTM_COMBINE_COMBINE3_SHIFT, FTM_COMBINE_COMBINE3_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field COMP3[25] (RW)
 *
 * Enables Complementary mode for the combined channels. In Complementary mode
 * the channel (n+1) output is the inverse of the channel (n) output. This field
 * is write protected. It can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The channel (n+1) output is the same as the channel (n) output.
 * - 0b1 - The channel (n+1) output is the complement of the channel (n) output.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_COMP3 field. */
#define FTM_RD_COMBINE_COMP3(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_COMP3_MASK) >> FTM_COMBINE_COMP3_SHIFT)
#define FTM_BRD_COMBINE_COMP3(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_COMP3_SHIFT, FTM_COMBINE_COMP3_WIDTH))

/*! @brief Set the COMP3 field to a new value. */
#define FTM_WR_COMBINE_COMP3(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_COMP3_MASK, FTM_COMBINE_COMP3(value)))
#define FTM_BWR_COMBINE_COMP3(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_COMP3_SHIFT), FTM_COMBINE_COMP3_SHIFT, FTM_COMBINE_COMP3_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field DECAPEN3[26] (RW)
 *
 * Enables the Dual Edge Capture mode in the channels (n) and (n+1). This bit
 * reconfigures the function of MSnA, ELSnB:ELSnA and ELS(n+1)B:ELS(n+1)A bits in
 * Dual Edge Capture mode according to . This field is write protected. It can be
 * written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The Dual Edge Capture mode in this pair of channels is disabled.
 * - 0b1 - The Dual Edge Capture mode in this pair of channels is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_DECAPEN3 field. */
#define FTM_RD_COMBINE_DECAPEN3(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_DECAPEN3_MASK) >> FTM_COMBINE_DECAPEN3_SHIFT)
#define FTM_BRD_COMBINE_DECAPEN3(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_DECAPEN3_SHIFT, FTM_COMBINE_DECAPEN3_WIDTH))

/*! @brief Set the DECAPEN3 field to a new value. */
#define FTM_WR_COMBINE_DECAPEN3(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_DECAPEN3_MASK, FTM_COMBINE_DECAPEN3(value)))
#define FTM_BWR_COMBINE_DECAPEN3(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_DECAPEN3_SHIFT), FTM_COMBINE_DECAPEN3_SHIFT, FTM_COMBINE_DECAPEN3_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field DECAP3[27] (RW)
 *
 * Enables the capture of the FTM counter value according to the channel (n)
 * input event and the configuration of the dual edge capture bits. This field
 * applies only when DECAPEN = 1. DECAP bit is cleared automatically by hardware if
 * dual edge capture - one-shot mode is selected and when the capture of channel
 * (n+1) event is made.
 *
 * Values:
 * - 0b0 - The dual edge captures are inactive.
 * - 0b1 - The dual edge captures are active.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_DECAP3 field. */
#define FTM_RD_COMBINE_DECAP3(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_DECAP3_MASK) >> FTM_COMBINE_DECAP3_SHIFT)
#define FTM_BRD_COMBINE_DECAP3(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_DECAP3_SHIFT, FTM_COMBINE_DECAP3_WIDTH))

/*! @brief Set the DECAP3 field to a new value. */
#define FTM_WR_COMBINE_DECAP3(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_DECAP3_MASK, FTM_COMBINE_DECAP3(value)))
#define FTM_BWR_COMBINE_DECAP3(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_DECAP3_SHIFT), FTM_COMBINE_DECAP3_SHIFT, FTM_COMBINE_DECAP3_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field DTEN3[28] (RW)
 *
 * Enables the deadtime insertion in the channels (n) and (n+1). This field is
 * write protected. It can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The deadtime insertion in this pair of channels is disabled.
 * - 0b1 - The deadtime insertion in this pair of channels is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_DTEN3 field. */
#define FTM_RD_COMBINE_DTEN3(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_DTEN3_MASK) >> FTM_COMBINE_DTEN3_SHIFT)
#define FTM_BRD_COMBINE_DTEN3(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_DTEN3_SHIFT, FTM_COMBINE_DTEN3_WIDTH))

/*! @brief Set the DTEN3 field to a new value. */
#define FTM_WR_COMBINE_DTEN3(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_DTEN3_MASK, FTM_COMBINE_DTEN3(value)))
#define FTM_BWR_COMBINE_DTEN3(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_DTEN3_SHIFT), FTM_COMBINE_DTEN3_SHIFT, FTM_COMBINE_DTEN3_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field SYNCEN3[29] (RW)
 *
 * Enables PWM synchronization of registers C(n)V and C(n+1)V.
 *
 * Values:
 * - 0b0 - The PWM synchronization in this pair of channels is disabled.
 * - 0b1 - The PWM synchronization in this pair of channels is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_SYNCEN3 field. */
#define FTM_RD_COMBINE_SYNCEN3(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_SYNCEN3_MASK) >> FTM_COMBINE_SYNCEN3_SHIFT)
#define FTM_BRD_COMBINE_SYNCEN3(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_SYNCEN3_SHIFT, FTM_COMBINE_SYNCEN3_WIDTH))

/*! @brief Set the SYNCEN3 field to a new value. */
#define FTM_WR_COMBINE_SYNCEN3(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_SYNCEN3_MASK, FTM_COMBINE_SYNCEN3(value)))
#define FTM_BWR_COMBINE_SYNCEN3(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_SYNCEN3_SHIFT), FTM_COMBINE_SYNCEN3_SHIFT, FTM_COMBINE_SYNCEN3_WIDTH))
/*@}*/

/*!
 * @name Register FTM_COMBINE, field FAULTEN3[30] (RW)
 *
 * Enables the fault control in channels (n) and (n+1). This field is write
 * protected. It can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The fault control in this pair of channels is disabled.
 * - 0b1 - The fault control in this pair of channels is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_COMBINE_FAULTEN3 field. */
#define FTM_RD_COMBINE_FAULTEN3(base) ((FTM_COMBINE_REG(base) & FTM_COMBINE_FAULTEN3_MASK) >> FTM_COMBINE_FAULTEN3_SHIFT)
#define FTM_BRD_COMBINE_FAULTEN3(base) (BME_UBFX32(&FTM_COMBINE_REG(base), FTM_COMBINE_FAULTEN3_SHIFT, FTM_COMBINE_FAULTEN3_WIDTH))

/*! @brief Set the FAULTEN3 field to a new value. */
#define FTM_WR_COMBINE_FAULTEN3(base, value) (FTM_RMW_COMBINE(base, FTM_COMBINE_FAULTEN3_MASK, FTM_COMBINE_FAULTEN3(value)))
#define FTM_BWR_COMBINE_FAULTEN3(base, value) (BME_BFI32(&FTM_COMBINE_REG(base), ((uint32_t)(value) << FTM_COMBINE_FAULTEN3_SHIFT), FTM_COMBINE_FAULTEN3_SHIFT, FTM_COMBINE_FAULTEN3_WIDTH))
/*@}*/

/*******************************************************************************
 * FTM_DEADTIME - Deadtime Insertion Control
 ******************************************************************************/

/*!
 * @brief FTM_DEADTIME - Deadtime Insertion Control (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register selects the deadtime prescaler factor and deadtime value. All
 * FTM channels use this clock prescaler and this deadtime value for the deadtime
 * insertion.
 */
/*!
 * @name Constants and macros for entire FTM_DEADTIME register
 */
/*@{*/
#define FTM_RD_DEADTIME(base)    (FTM_DEADTIME_REG(base))
#define FTM_WR_DEADTIME(base, value) (FTM_DEADTIME_REG(base) = (value))
#define FTM_RMW_DEADTIME(base, mask, value) (FTM_WR_DEADTIME(base, (FTM_RD_DEADTIME(base) & ~(mask)) | (value)))
#define FTM_SET_DEADTIME(base, value) (BME_OR32(&FTM_DEADTIME_REG(base), (uint32_t)(value)))
#define FTM_CLR_DEADTIME(base, value) (BME_AND32(&FTM_DEADTIME_REG(base), (uint32_t)(~(value))))
#define FTM_TOG_DEADTIME(base, value) (BME_XOR32(&FTM_DEADTIME_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTM_DEADTIME bitfields
 */

/*!
 * @name Register FTM_DEADTIME, field DTVAL[5:0] (RW)
 *
 * Selects the deadtime insertion value for the deadtime counter. The deadtime
 * counter is clocked by a scaled version of the system clock. See the description
 * of DTPS. Deadtime insert value = (DTPS * DTVAL). DTVAL selects the number of
 * deadtime counts inserted as follows: When DTVAL is 0, no counts are inserted.
 * When DTVAL is 1, 1 count is inserted. When DTVAL is 2, 2 counts are inserted.
 * This pattern continues up to a possible 63 counts. This field is write
 * protected. It can be written only when MODE[WPDIS] = 1.
 */
/*@{*/
/*! @brief Read current value of the FTM_DEADTIME_DTVAL field. */
#define FTM_RD_DEADTIME_DTVAL(base) ((FTM_DEADTIME_REG(base) & FTM_DEADTIME_DTVAL_MASK) >> FTM_DEADTIME_DTVAL_SHIFT)
#define FTM_BRD_DEADTIME_DTVAL(base) (BME_UBFX32(&FTM_DEADTIME_REG(base), FTM_DEADTIME_DTVAL_SHIFT, FTM_DEADTIME_DTVAL_WIDTH))

/*! @brief Set the DTVAL field to a new value. */
#define FTM_WR_DEADTIME_DTVAL(base, value) (FTM_RMW_DEADTIME(base, FTM_DEADTIME_DTVAL_MASK, FTM_DEADTIME_DTVAL(value)))
#define FTM_BWR_DEADTIME_DTVAL(base, value) (BME_BFI32(&FTM_DEADTIME_REG(base), ((uint32_t)(value) << FTM_DEADTIME_DTVAL_SHIFT), FTM_DEADTIME_DTVAL_SHIFT, FTM_DEADTIME_DTVAL_WIDTH))
/*@}*/

/*!
 * @name Register FTM_DEADTIME, field DTPS[7:6] (RW)
 *
 * Selects the division factor of the system clock. This prescaled clock is used
 * by the deadtime counter. This field is write protected. It can be written
 * only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0x - Divide the system clock by 1.
 * - 0b10 - Divide the system clock by 4.
 * - 0b11 - Divide the system clock by 16.
 */
/*@{*/
/*! @brief Read current value of the FTM_DEADTIME_DTPS field. */
#define FTM_RD_DEADTIME_DTPS(base) ((FTM_DEADTIME_REG(base) & FTM_DEADTIME_DTPS_MASK) >> FTM_DEADTIME_DTPS_SHIFT)
#define FTM_BRD_DEADTIME_DTPS(base) (BME_UBFX32(&FTM_DEADTIME_REG(base), FTM_DEADTIME_DTPS_SHIFT, FTM_DEADTIME_DTPS_WIDTH))

/*! @brief Set the DTPS field to a new value. */
#define FTM_WR_DEADTIME_DTPS(base, value) (FTM_RMW_DEADTIME(base, FTM_DEADTIME_DTPS_MASK, FTM_DEADTIME_DTPS(value)))
#define FTM_BWR_DEADTIME_DTPS(base, value) (BME_BFI32(&FTM_DEADTIME_REG(base), ((uint32_t)(value) << FTM_DEADTIME_DTPS_SHIFT), FTM_DEADTIME_DTPS_SHIFT, FTM_DEADTIME_DTPS_WIDTH))
/*@}*/

/*******************************************************************************
 * FTM_EXTTRIG - FTM External Trigger
 ******************************************************************************/

/*!
 * @brief FTM_EXTTRIG - FTM External Trigger (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register: Indicates when a channel trigger was generated Enables the
 * generation of a trigger when the FTM counter is equal to its initial value
 * Selects which channels are used in the generation of the channel triggers Several
 * channels can be selected to generate multiple triggers in one PWM period.
 * Channels 6 and 7 are not used to generate channel triggers.
 */
/*!
 * @name Constants and macros for entire FTM_EXTTRIG register
 */
/*@{*/
#define FTM_RD_EXTTRIG(base)     (FTM_EXTTRIG_REG(base))
#define FTM_WR_EXTTRIG(base, value) (FTM_EXTTRIG_REG(base) = (value))
#define FTM_RMW_EXTTRIG(base, mask, value) (FTM_WR_EXTTRIG(base, (FTM_RD_EXTTRIG(base) & ~(mask)) | (value)))
#define FTM_SET_EXTTRIG(base, value) (BME_OR32(&FTM_EXTTRIG_REG(base), (uint32_t)(value)))
#define FTM_CLR_EXTTRIG(base, value) (BME_AND32(&FTM_EXTTRIG_REG(base), (uint32_t)(~(value))))
#define FTM_TOG_EXTTRIG(base, value) (BME_XOR32(&FTM_EXTTRIG_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTM_EXTTRIG bitfields
 */

/*!
 * @name Register FTM_EXTTRIG, field CH2TRIG[0] (RW)
 *
 * Enables the generation of the channel trigger when the FTM counter is equal
 * to the CnV register.
 *
 * Values:
 * - 0b0 - The generation of the channel trigger is disabled.
 * - 0b1 - The generation of the channel trigger is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_EXTTRIG_CH2TRIG field. */
#define FTM_RD_EXTTRIG_CH2TRIG(base) ((FTM_EXTTRIG_REG(base) & FTM_EXTTRIG_CH2TRIG_MASK) >> FTM_EXTTRIG_CH2TRIG_SHIFT)
#define FTM_BRD_EXTTRIG_CH2TRIG(base) (BME_UBFX32(&FTM_EXTTRIG_REG(base), FTM_EXTTRIG_CH2TRIG_SHIFT, FTM_EXTTRIG_CH2TRIG_WIDTH))

/*! @brief Set the CH2TRIG field to a new value. */
#define FTM_WR_EXTTRIG_CH2TRIG(base, value) (FTM_RMW_EXTTRIG(base, FTM_EXTTRIG_CH2TRIG_MASK, FTM_EXTTRIG_CH2TRIG(value)))
#define FTM_BWR_EXTTRIG_CH2TRIG(base, value) (BME_BFI32(&FTM_EXTTRIG_REG(base), ((uint32_t)(value) << FTM_EXTTRIG_CH2TRIG_SHIFT), FTM_EXTTRIG_CH2TRIG_SHIFT, FTM_EXTTRIG_CH2TRIG_WIDTH))
/*@}*/

/*!
 * @name Register FTM_EXTTRIG, field CH3TRIG[1] (RW)
 *
 * Enables the generation of the channel trigger when the FTM counter is equal
 * to the CnV register.
 *
 * Values:
 * - 0b0 - The generation of the channel trigger is disabled.
 * - 0b1 - The generation of the channel trigger is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_EXTTRIG_CH3TRIG field. */
#define FTM_RD_EXTTRIG_CH3TRIG(base) ((FTM_EXTTRIG_REG(base) & FTM_EXTTRIG_CH3TRIG_MASK) >> FTM_EXTTRIG_CH3TRIG_SHIFT)
#define FTM_BRD_EXTTRIG_CH3TRIG(base) (BME_UBFX32(&FTM_EXTTRIG_REG(base), FTM_EXTTRIG_CH3TRIG_SHIFT, FTM_EXTTRIG_CH3TRIG_WIDTH))

/*! @brief Set the CH3TRIG field to a new value. */
#define FTM_WR_EXTTRIG_CH3TRIG(base, value) (FTM_RMW_EXTTRIG(base, FTM_EXTTRIG_CH3TRIG_MASK, FTM_EXTTRIG_CH3TRIG(value)))
#define FTM_BWR_EXTTRIG_CH3TRIG(base, value) (BME_BFI32(&FTM_EXTTRIG_REG(base), ((uint32_t)(value) << FTM_EXTTRIG_CH3TRIG_SHIFT), FTM_EXTTRIG_CH3TRIG_SHIFT, FTM_EXTTRIG_CH3TRIG_WIDTH))
/*@}*/

/*!
 * @name Register FTM_EXTTRIG, field CH4TRIG[2] (RW)
 *
 * Enables the generation of the channel trigger when the FTM counter is equal
 * to the CnV register.
 *
 * Values:
 * - 0b0 - The generation of the channel trigger is disabled.
 * - 0b1 - The generation of the channel trigger is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_EXTTRIG_CH4TRIG field. */
#define FTM_RD_EXTTRIG_CH4TRIG(base) ((FTM_EXTTRIG_REG(base) & FTM_EXTTRIG_CH4TRIG_MASK) >> FTM_EXTTRIG_CH4TRIG_SHIFT)
#define FTM_BRD_EXTTRIG_CH4TRIG(base) (BME_UBFX32(&FTM_EXTTRIG_REG(base), FTM_EXTTRIG_CH4TRIG_SHIFT, FTM_EXTTRIG_CH4TRIG_WIDTH))

/*! @brief Set the CH4TRIG field to a new value. */
#define FTM_WR_EXTTRIG_CH4TRIG(base, value) (FTM_RMW_EXTTRIG(base, FTM_EXTTRIG_CH4TRIG_MASK, FTM_EXTTRIG_CH4TRIG(value)))
#define FTM_BWR_EXTTRIG_CH4TRIG(base, value) (BME_BFI32(&FTM_EXTTRIG_REG(base), ((uint32_t)(value) << FTM_EXTTRIG_CH4TRIG_SHIFT), FTM_EXTTRIG_CH4TRIG_SHIFT, FTM_EXTTRIG_CH4TRIG_WIDTH))
/*@}*/

/*!
 * @name Register FTM_EXTTRIG, field CH5TRIG[3] (RW)
 *
 * Enables the generation of the channel trigger when the FTM counter is equal
 * to the CnV register.
 *
 * Values:
 * - 0b0 - The generation of the channel trigger is disabled.
 * - 0b1 - The generation of the channel trigger is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_EXTTRIG_CH5TRIG field. */
#define FTM_RD_EXTTRIG_CH5TRIG(base) ((FTM_EXTTRIG_REG(base) & FTM_EXTTRIG_CH5TRIG_MASK) >> FTM_EXTTRIG_CH5TRIG_SHIFT)
#define FTM_BRD_EXTTRIG_CH5TRIG(base) (BME_UBFX32(&FTM_EXTTRIG_REG(base), FTM_EXTTRIG_CH5TRIG_SHIFT, FTM_EXTTRIG_CH5TRIG_WIDTH))

/*! @brief Set the CH5TRIG field to a new value. */
#define FTM_WR_EXTTRIG_CH5TRIG(base, value) (FTM_RMW_EXTTRIG(base, FTM_EXTTRIG_CH5TRIG_MASK, FTM_EXTTRIG_CH5TRIG(value)))
#define FTM_BWR_EXTTRIG_CH5TRIG(base, value) (BME_BFI32(&FTM_EXTTRIG_REG(base), ((uint32_t)(value) << FTM_EXTTRIG_CH5TRIG_SHIFT), FTM_EXTTRIG_CH5TRIG_SHIFT, FTM_EXTTRIG_CH5TRIG_WIDTH))
/*@}*/

/*!
 * @name Register FTM_EXTTRIG, field CH0TRIG[4] (RW)
 *
 * Enables the generation of the channel trigger when the FTM counter is equal
 * to the CnV register.
 *
 * Values:
 * - 0b0 - The generation of the channel trigger is disabled.
 * - 0b1 - The generation of the channel trigger is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_EXTTRIG_CH0TRIG field. */
#define FTM_RD_EXTTRIG_CH0TRIG(base) ((FTM_EXTTRIG_REG(base) & FTM_EXTTRIG_CH0TRIG_MASK) >> FTM_EXTTRIG_CH0TRIG_SHIFT)
#define FTM_BRD_EXTTRIG_CH0TRIG(base) (BME_UBFX32(&FTM_EXTTRIG_REG(base), FTM_EXTTRIG_CH0TRIG_SHIFT, FTM_EXTTRIG_CH0TRIG_WIDTH))

/*! @brief Set the CH0TRIG field to a new value. */
#define FTM_WR_EXTTRIG_CH0TRIG(base, value) (FTM_RMW_EXTTRIG(base, FTM_EXTTRIG_CH0TRIG_MASK, FTM_EXTTRIG_CH0TRIG(value)))
#define FTM_BWR_EXTTRIG_CH0TRIG(base, value) (BME_BFI32(&FTM_EXTTRIG_REG(base), ((uint32_t)(value) << FTM_EXTTRIG_CH0TRIG_SHIFT), FTM_EXTTRIG_CH0TRIG_SHIFT, FTM_EXTTRIG_CH0TRIG_WIDTH))
/*@}*/

/*!
 * @name Register FTM_EXTTRIG, field CH1TRIG[5] (RW)
 *
 * Enables the generation of the channel trigger when the FTM counter is equal
 * to the CnV register.
 *
 * Values:
 * - 0b0 - The generation of the channel trigger is disabled.
 * - 0b1 - The generation of the channel trigger is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_EXTTRIG_CH1TRIG field. */
#define FTM_RD_EXTTRIG_CH1TRIG(base) ((FTM_EXTTRIG_REG(base) & FTM_EXTTRIG_CH1TRIG_MASK) >> FTM_EXTTRIG_CH1TRIG_SHIFT)
#define FTM_BRD_EXTTRIG_CH1TRIG(base) (BME_UBFX32(&FTM_EXTTRIG_REG(base), FTM_EXTTRIG_CH1TRIG_SHIFT, FTM_EXTTRIG_CH1TRIG_WIDTH))

/*! @brief Set the CH1TRIG field to a new value. */
#define FTM_WR_EXTTRIG_CH1TRIG(base, value) (FTM_RMW_EXTTRIG(base, FTM_EXTTRIG_CH1TRIG_MASK, FTM_EXTTRIG_CH1TRIG(value)))
#define FTM_BWR_EXTTRIG_CH1TRIG(base, value) (BME_BFI32(&FTM_EXTTRIG_REG(base), ((uint32_t)(value) << FTM_EXTTRIG_CH1TRIG_SHIFT), FTM_EXTTRIG_CH1TRIG_SHIFT, FTM_EXTTRIG_CH1TRIG_WIDTH))
/*@}*/

/*!
 * @name Register FTM_EXTTRIG, field INITTRIGEN[6] (RW)
 *
 * Enables the generation of the trigger when the FTM counter is equal to the
 * CNTIN register.
 *
 * Values:
 * - 0b0 - The generation of initialization trigger is disabled.
 * - 0b1 - The generation of initialization trigger is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_EXTTRIG_INITTRIGEN field. */
#define FTM_RD_EXTTRIG_INITTRIGEN(base) ((FTM_EXTTRIG_REG(base) & FTM_EXTTRIG_INITTRIGEN_MASK) >> FTM_EXTTRIG_INITTRIGEN_SHIFT)
#define FTM_BRD_EXTTRIG_INITTRIGEN(base) (BME_UBFX32(&FTM_EXTTRIG_REG(base), FTM_EXTTRIG_INITTRIGEN_SHIFT, FTM_EXTTRIG_INITTRIGEN_WIDTH))

/*! @brief Set the INITTRIGEN field to a new value. */
#define FTM_WR_EXTTRIG_INITTRIGEN(base, value) (FTM_RMW_EXTTRIG(base, FTM_EXTTRIG_INITTRIGEN_MASK, FTM_EXTTRIG_INITTRIGEN(value)))
#define FTM_BWR_EXTTRIG_INITTRIGEN(base, value) (BME_BFI32(&FTM_EXTTRIG_REG(base), ((uint32_t)(value) << FTM_EXTTRIG_INITTRIGEN_SHIFT), FTM_EXTTRIG_INITTRIGEN_SHIFT, FTM_EXTTRIG_INITTRIGEN_WIDTH))
/*@}*/

/*!
 * @name Register FTM_EXTTRIG, field TRIGF[7] (ROWZ)
 *
 * Set by hardware when a channel trigger is generated. Clear TRIGF by reading
 * EXTTRIG while TRIGF is set and then writing a 0 to TRIGF. Writing a 1 to TRIGF
 * has no effect. If another channel trigger is generated before the clearing
 * sequence is completed, the sequence is reset so TRIGF remains set after the clear
 * sequence is completed for the earlier TRIGF.
 *
 * Values:
 * - 0b0 - No channel trigger was generated.
 * - 0b1 - A channel trigger was generated.
 */
/*@{*/
/*! @brief Read current value of the FTM_EXTTRIG_TRIGF field. */
#define FTM_RD_EXTTRIG_TRIGF(base) ((FTM_EXTTRIG_REG(base) & FTM_EXTTRIG_TRIGF_MASK) >> FTM_EXTTRIG_TRIGF_SHIFT)
#define FTM_BRD_EXTTRIG_TRIGF(base) (BME_UBFX32(&FTM_EXTTRIG_REG(base), FTM_EXTTRIG_TRIGF_SHIFT, FTM_EXTTRIG_TRIGF_WIDTH))

/*! @brief Set the TRIGF field to a new value. */
#define FTM_WR_EXTTRIG_TRIGF(base, value) (FTM_RMW_EXTTRIG(base, FTM_EXTTRIG_TRIGF_MASK, FTM_EXTTRIG_TRIGF(value)))
#define FTM_BWR_EXTTRIG_TRIGF(base, value) (BME_BFI32(&FTM_EXTTRIG_REG(base), ((uint32_t)(value) << FTM_EXTTRIG_TRIGF_SHIFT), FTM_EXTTRIG_TRIGF_SHIFT, FTM_EXTTRIG_TRIGF_WIDTH))
/*@}*/

/*******************************************************************************
 * FTM_POL - Channels Polarity
 ******************************************************************************/

/*!
 * @brief FTM_POL - Channels Polarity (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register defines the output polarity of the FTM channels. The safe value
 * that is driven in a channel output when the fault control is enabled and a
 * fault condition is detected is the inactive state of the channel. That is, the
 * safe value of a channel is the value of its POL bit.
 */
/*!
 * @name Constants and macros for entire FTM_POL register
 */
/*@{*/
#define FTM_RD_POL(base)         (FTM_POL_REG(base))
#define FTM_WR_POL(base, value)  (FTM_POL_REG(base) = (value))
#define FTM_RMW_POL(base, mask, value) (FTM_WR_POL(base, (FTM_RD_POL(base) & ~(mask)) | (value)))
#define FTM_SET_POL(base, value) (BME_OR32(&FTM_POL_REG(base), (uint32_t)(value)))
#define FTM_CLR_POL(base, value) (BME_AND32(&FTM_POL_REG(base), (uint32_t)(~(value))))
#define FTM_TOG_POL(base, value) (BME_XOR32(&FTM_POL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTM_POL bitfields
 */

/*!
 * @name Register FTM_POL, field POL0[0] (RW)
 *
 * Defines the polarity of the channel output. This field is write protected. It
 * can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The channel polarity is active high.
 * - 0b1 - The channel polarity is active low.
 */
/*@{*/
/*! @brief Read current value of the FTM_POL_POL0 field. */
#define FTM_RD_POL_POL0(base) ((FTM_POL_REG(base) & FTM_POL_POL0_MASK) >> FTM_POL_POL0_SHIFT)
#define FTM_BRD_POL_POL0(base) (BME_UBFX32(&FTM_POL_REG(base), FTM_POL_POL0_SHIFT, FTM_POL_POL0_WIDTH))

/*! @brief Set the POL0 field to a new value. */
#define FTM_WR_POL_POL0(base, value) (FTM_RMW_POL(base, FTM_POL_POL0_MASK, FTM_POL_POL0(value)))
#define FTM_BWR_POL_POL0(base, value) (BME_BFI32(&FTM_POL_REG(base), ((uint32_t)(value) << FTM_POL_POL0_SHIFT), FTM_POL_POL0_SHIFT, FTM_POL_POL0_WIDTH))
/*@}*/

/*!
 * @name Register FTM_POL, field POL1[1] (RW)
 *
 * Defines the polarity of the channel output. This field is write protected. It
 * can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The channel polarity is active high.
 * - 0b1 - The channel polarity is active low.
 */
/*@{*/
/*! @brief Read current value of the FTM_POL_POL1 field. */
#define FTM_RD_POL_POL1(base) ((FTM_POL_REG(base) & FTM_POL_POL1_MASK) >> FTM_POL_POL1_SHIFT)
#define FTM_BRD_POL_POL1(base) (BME_UBFX32(&FTM_POL_REG(base), FTM_POL_POL1_SHIFT, FTM_POL_POL1_WIDTH))

/*! @brief Set the POL1 field to a new value. */
#define FTM_WR_POL_POL1(base, value) (FTM_RMW_POL(base, FTM_POL_POL1_MASK, FTM_POL_POL1(value)))
#define FTM_BWR_POL_POL1(base, value) (BME_BFI32(&FTM_POL_REG(base), ((uint32_t)(value) << FTM_POL_POL1_SHIFT), FTM_POL_POL1_SHIFT, FTM_POL_POL1_WIDTH))
/*@}*/

/*!
 * @name Register FTM_POL, field POL2[2] (RW)
 *
 * Defines the polarity of the channel output. This field is write protected. It
 * can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The channel polarity is active high.
 * - 0b1 - The channel polarity is active low.
 */
/*@{*/
/*! @brief Read current value of the FTM_POL_POL2 field. */
#define FTM_RD_POL_POL2(base) ((FTM_POL_REG(base) & FTM_POL_POL2_MASK) >> FTM_POL_POL2_SHIFT)
#define FTM_BRD_POL_POL2(base) (BME_UBFX32(&FTM_POL_REG(base), FTM_POL_POL2_SHIFT, FTM_POL_POL2_WIDTH))

/*! @brief Set the POL2 field to a new value. */
#define FTM_WR_POL_POL2(base, value) (FTM_RMW_POL(base, FTM_POL_POL2_MASK, FTM_POL_POL2(value)))
#define FTM_BWR_POL_POL2(base, value) (BME_BFI32(&FTM_POL_REG(base), ((uint32_t)(value) << FTM_POL_POL2_SHIFT), FTM_POL_POL2_SHIFT, FTM_POL_POL2_WIDTH))
/*@}*/

/*!
 * @name Register FTM_POL, field POL3[3] (RW)
 *
 * Defines the polarity of the channel output. This field is write protected. It
 * can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The channel polarity is active high.
 * - 0b1 - The channel polarity is active low.
 */
/*@{*/
/*! @brief Read current value of the FTM_POL_POL3 field. */
#define FTM_RD_POL_POL3(base) ((FTM_POL_REG(base) & FTM_POL_POL3_MASK) >> FTM_POL_POL3_SHIFT)
#define FTM_BRD_POL_POL3(base) (BME_UBFX32(&FTM_POL_REG(base), FTM_POL_POL3_SHIFT, FTM_POL_POL3_WIDTH))

/*! @brief Set the POL3 field to a new value. */
#define FTM_WR_POL_POL3(base, value) (FTM_RMW_POL(base, FTM_POL_POL3_MASK, FTM_POL_POL3(value)))
#define FTM_BWR_POL_POL3(base, value) (BME_BFI32(&FTM_POL_REG(base), ((uint32_t)(value) << FTM_POL_POL3_SHIFT), FTM_POL_POL3_SHIFT, FTM_POL_POL3_WIDTH))
/*@}*/

/*!
 * @name Register FTM_POL, field POL4[4] (RW)
 *
 * Defines the polarity of the channel output. This field is write protected. It
 * can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The channel polarity is active high.
 * - 0b1 - The channel polarity is active low.
 */
/*@{*/
/*! @brief Read current value of the FTM_POL_POL4 field. */
#define FTM_RD_POL_POL4(base) ((FTM_POL_REG(base) & FTM_POL_POL4_MASK) >> FTM_POL_POL4_SHIFT)
#define FTM_BRD_POL_POL4(base) (BME_UBFX32(&FTM_POL_REG(base), FTM_POL_POL4_SHIFT, FTM_POL_POL4_WIDTH))

/*! @brief Set the POL4 field to a new value. */
#define FTM_WR_POL_POL4(base, value) (FTM_RMW_POL(base, FTM_POL_POL4_MASK, FTM_POL_POL4(value)))
#define FTM_BWR_POL_POL4(base, value) (BME_BFI32(&FTM_POL_REG(base), ((uint32_t)(value) << FTM_POL_POL4_SHIFT), FTM_POL_POL4_SHIFT, FTM_POL_POL4_WIDTH))
/*@}*/

/*!
 * @name Register FTM_POL, field POL5[5] (RW)
 *
 * Defines the polarity of the channel output. This field is write protected. It
 * can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The channel polarity is active high.
 * - 0b1 - The channel polarity is active low.
 */
/*@{*/
/*! @brief Read current value of the FTM_POL_POL5 field. */
#define FTM_RD_POL_POL5(base) ((FTM_POL_REG(base) & FTM_POL_POL5_MASK) >> FTM_POL_POL5_SHIFT)
#define FTM_BRD_POL_POL5(base) (BME_UBFX32(&FTM_POL_REG(base), FTM_POL_POL5_SHIFT, FTM_POL_POL5_WIDTH))

/*! @brief Set the POL5 field to a new value. */
#define FTM_WR_POL_POL5(base, value) (FTM_RMW_POL(base, FTM_POL_POL5_MASK, FTM_POL_POL5(value)))
#define FTM_BWR_POL_POL5(base, value) (BME_BFI32(&FTM_POL_REG(base), ((uint32_t)(value) << FTM_POL_POL5_SHIFT), FTM_POL_POL5_SHIFT, FTM_POL_POL5_WIDTH))
/*@}*/

/*!
 * @name Register FTM_POL, field POL6[6] (RW)
 *
 * Defines the polarity of the channel output. This field is write protected. It
 * can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The channel polarity is active high.
 * - 0b1 - The channel polarity is active low.
 */
/*@{*/
/*! @brief Read current value of the FTM_POL_POL6 field. */
#define FTM_RD_POL_POL6(base) ((FTM_POL_REG(base) & FTM_POL_POL6_MASK) >> FTM_POL_POL6_SHIFT)
#define FTM_BRD_POL_POL6(base) (BME_UBFX32(&FTM_POL_REG(base), FTM_POL_POL6_SHIFT, FTM_POL_POL6_WIDTH))

/*! @brief Set the POL6 field to a new value. */
#define FTM_WR_POL_POL6(base, value) (FTM_RMW_POL(base, FTM_POL_POL6_MASK, FTM_POL_POL6(value)))
#define FTM_BWR_POL_POL6(base, value) (BME_BFI32(&FTM_POL_REG(base), ((uint32_t)(value) << FTM_POL_POL6_SHIFT), FTM_POL_POL6_SHIFT, FTM_POL_POL6_WIDTH))
/*@}*/

/*!
 * @name Register FTM_POL, field POL7[7] (RW)
 *
 * Defines the polarity of the channel output. This field is write protected. It
 * can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The channel polarity is active high.
 * - 0b1 - The channel polarity is active low.
 */
/*@{*/
/*! @brief Read current value of the FTM_POL_POL7 field. */
#define FTM_RD_POL_POL7(base) ((FTM_POL_REG(base) & FTM_POL_POL7_MASK) >> FTM_POL_POL7_SHIFT)
#define FTM_BRD_POL_POL7(base) (BME_UBFX32(&FTM_POL_REG(base), FTM_POL_POL7_SHIFT, FTM_POL_POL7_WIDTH))

/*! @brief Set the POL7 field to a new value. */
#define FTM_WR_POL_POL7(base, value) (FTM_RMW_POL(base, FTM_POL_POL7_MASK, FTM_POL_POL7(value)))
#define FTM_BWR_POL_POL7(base, value) (BME_BFI32(&FTM_POL_REG(base), ((uint32_t)(value) << FTM_POL_POL7_SHIFT), FTM_POL_POL7_SHIFT, FTM_POL_POL7_WIDTH))
/*@}*/

/*******************************************************************************
 * FTM_FMS - Fault Mode Status
 ******************************************************************************/

/*!
 * @brief FTM_FMS - Fault Mode Status (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register contains the fault detection flags, write protection enable
 * bit, and the logic OR of the enabled fault inputs.
 */
/*!
 * @name Constants and macros for entire FTM_FMS register
 */
/*@{*/
#define FTM_RD_FMS(base)         (FTM_FMS_REG(base))
#define FTM_WR_FMS(base, value)  (FTM_FMS_REG(base) = (value))
#define FTM_RMW_FMS(base, mask, value) (FTM_WR_FMS(base, (FTM_RD_FMS(base) & ~(mask)) | (value)))
#define FTM_SET_FMS(base, value) (BME_OR32(&FTM_FMS_REG(base), (uint32_t)(value)))
#define FTM_CLR_FMS(base, value) (BME_AND32(&FTM_FMS_REG(base), (uint32_t)(~(value))))
#define FTM_TOG_FMS(base, value) (BME_XOR32(&FTM_FMS_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTM_FMS bitfields
 */

/*!
 * @name Register FTM_FMS, field FAULTF0[0] (ROWZ)
 *
 * Set by hardware when fault control is enabled, the corresponding fault input
 * is enabled and a fault condition is detected at the fault input. Clear FAULTF0
 * by reading the FMS register while FAULTF0 is set and then writing a 0 to
 * FAULTF0 while there is no existing fault condition at the corresponding fault
 * input. Writing a 1 to FAULTF0 has no effect. FAULTF0 bit is also cleared when
 * FAULTF bit is cleared. If another fault condition is detected at the corresponding
 * fault input before the clearing sequence is completed, the sequence is reset
 * so FAULTF0 remains set after the clearing sequence is completed for the
 * earlier fault condition.
 *
 * Values:
 * - 0b0 - No fault condition was detected at the fault input.
 * - 0b1 - A fault condition was detected at the fault input.
 */
/*@{*/
/*! @brief Read current value of the FTM_FMS_FAULTF0 field. */
#define FTM_RD_FMS_FAULTF0(base) ((FTM_FMS_REG(base) & FTM_FMS_FAULTF0_MASK) >> FTM_FMS_FAULTF0_SHIFT)
#define FTM_BRD_FMS_FAULTF0(base) (BME_UBFX32(&FTM_FMS_REG(base), FTM_FMS_FAULTF0_SHIFT, FTM_FMS_FAULTF0_WIDTH))

/*! @brief Set the FAULTF0 field to a new value. */
#define FTM_WR_FMS_FAULTF0(base, value) (FTM_RMW_FMS(base, FTM_FMS_FAULTF0_MASK, FTM_FMS_FAULTF0(value)))
#define FTM_BWR_FMS_FAULTF0(base, value) (BME_BFI32(&FTM_FMS_REG(base), ((uint32_t)(value) << FTM_FMS_FAULTF0_SHIFT), FTM_FMS_FAULTF0_SHIFT, FTM_FMS_FAULTF0_WIDTH))
/*@}*/

/*!
 * @name Register FTM_FMS, field FAULTF1[1] (ROWZ)
 *
 * Set by hardware when fault control is enabled, the corresponding fault input
 * is enabled and a fault condition is detected at the fault input. Clear FAULTF1
 * by reading the FMS register while FAULTF1 is set and then writing a 0 to
 * FAULTF1 while there is no existing fault condition at the corresponding fault
 * input. Writing a 1 to FAULTF1 has no effect. FAULTF1 bit is also cleared when
 * FAULTF bit is cleared. If another fault condition is detected at the corresponding
 * fault input before the clearing sequence is completed, the sequence is reset
 * so FAULTF1 remains set after the clearing sequence is completed for the
 * earlier fault condition.
 *
 * Values:
 * - 0b0 - No fault condition was detected at the fault input.
 * - 0b1 - A fault condition was detected at the fault input.
 */
/*@{*/
/*! @brief Read current value of the FTM_FMS_FAULTF1 field. */
#define FTM_RD_FMS_FAULTF1(base) ((FTM_FMS_REG(base) & FTM_FMS_FAULTF1_MASK) >> FTM_FMS_FAULTF1_SHIFT)
#define FTM_BRD_FMS_FAULTF1(base) (BME_UBFX32(&FTM_FMS_REG(base), FTM_FMS_FAULTF1_SHIFT, FTM_FMS_FAULTF1_WIDTH))

/*! @brief Set the FAULTF1 field to a new value. */
#define FTM_WR_FMS_FAULTF1(base, value) (FTM_RMW_FMS(base, FTM_FMS_FAULTF1_MASK, FTM_FMS_FAULTF1(value)))
#define FTM_BWR_FMS_FAULTF1(base, value) (BME_BFI32(&FTM_FMS_REG(base), ((uint32_t)(value) << FTM_FMS_FAULTF1_SHIFT), FTM_FMS_FAULTF1_SHIFT, FTM_FMS_FAULTF1_WIDTH))
/*@}*/

/*!
 * @name Register FTM_FMS, field FAULTF2[2] (ROWZ)
 *
 * Set by hardware when fault control is enabled, the corresponding fault input
 * is enabled and a fault condition is detected at the fault input. Clear FAULTF2
 * by reading the FMS register while FAULTF2 is set and then writing a 0 to
 * FAULTF2 while there is no existing fault condition at the corresponding fault
 * input. Writing a 1 to FAULTF2 has no effect. FAULTF2 bit is also cleared when
 * FAULTF bit is cleared. If another fault condition is detected at the corresponding
 * fault input before the clearing sequence is completed, the sequence is reset
 * so FAULTF2 remains set after the clearing sequence is completed for the
 * earlier fault condition.
 *
 * Values:
 * - 0b0 - No fault condition was detected at the fault input.
 * - 0b1 - A fault condition was detected at the fault input.
 */
/*@{*/
/*! @brief Read current value of the FTM_FMS_FAULTF2 field. */
#define FTM_RD_FMS_FAULTF2(base) ((FTM_FMS_REG(base) & FTM_FMS_FAULTF2_MASK) >> FTM_FMS_FAULTF2_SHIFT)
#define FTM_BRD_FMS_FAULTF2(base) (BME_UBFX32(&FTM_FMS_REG(base), FTM_FMS_FAULTF2_SHIFT, FTM_FMS_FAULTF2_WIDTH))

/*! @brief Set the FAULTF2 field to a new value. */
#define FTM_WR_FMS_FAULTF2(base, value) (FTM_RMW_FMS(base, FTM_FMS_FAULTF2_MASK, FTM_FMS_FAULTF2(value)))
#define FTM_BWR_FMS_FAULTF2(base, value) (BME_BFI32(&FTM_FMS_REG(base), ((uint32_t)(value) << FTM_FMS_FAULTF2_SHIFT), FTM_FMS_FAULTF2_SHIFT, FTM_FMS_FAULTF2_WIDTH))
/*@}*/

/*!
 * @name Register FTM_FMS, field FAULTF3[3] (ROWZ)
 *
 * Set by hardware when fault control is enabled, the corresponding fault input
 * is enabled and a fault condition is detected at the fault input. Clear FAULTF3
 * by reading the FMS register while FAULTF3 is set and then writing a 0 to
 * FAULTF3 while there is no existing fault condition at the corresponding fault
 * input. Writing a 1 to FAULTF3 has no effect. FAULTF3 bit is also cleared when
 * FAULTF bit is cleared. If another fault condition is detected at the corresponding
 * fault input before the clearing sequence is completed, the sequence is reset
 * so FAULTF3 remains set after the clearing sequence is completed for the
 * earlier fault condition.
 *
 * Values:
 * - 0b0 - No fault condition was detected at the fault input.
 * - 0b1 - A fault condition was detected at the fault input.
 */
/*@{*/
/*! @brief Read current value of the FTM_FMS_FAULTF3 field. */
#define FTM_RD_FMS_FAULTF3(base) ((FTM_FMS_REG(base) & FTM_FMS_FAULTF3_MASK) >> FTM_FMS_FAULTF3_SHIFT)
#define FTM_BRD_FMS_FAULTF3(base) (BME_UBFX32(&FTM_FMS_REG(base), FTM_FMS_FAULTF3_SHIFT, FTM_FMS_FAULTF3_WIDTH))

/*! @brief Set the FAULTF3 field to a new value. */
#define FTM_WR_FMS_FAULTF3(base, value) (FTM_RMW_FMS(base, FTM_FMS_FAULTF3_MASK, FTM_FMS_FAULTF3(value)))
#define FTM_BWR_FMS_FAULTF3(base, value) (BME_BFI32(&FTM_FMS_REG(base), ((uint32_t)(value) << FTM_FMS_FAULTF3_SHIFT), FTM_FMS_FAULTF3_SHIFT, FTM_FMS_FAULTF3_WIDTH))
/*@}*/

/*!
 * @name Register FTM_FMS, field FAULTIN[5] (RO)
 *
 * Represents the logic OR of the enabled fault inputs after their filter (if
 * their filter is enabled) when fault control is enabled.
 *
 * Values:
 * - 0b0 - The logic OR of the enabled fault inputs is 0.
 * - 0b1 - The logic OR of the enabled fault inputs is 1.
 */
/*@{*/
/*! @brief Read current value of the FTM_FMS_FAULTIN field. */
#define FTM_RD_FMS_FAULTIN(base) ((FTM_FMS_REG(base) & FTM_FMS_FAULTIN_MASK) >> FTM_FMS_FAULTIN_SHIFT)
#define FTM_BRD_FMS_FAULTIN(base) (BME_UBFX32(&FTM_FMS_REG(base), FTM_FMS_FAULTIN_SHIFT, FTM_FMS_FAULTIN_WIDTH))
/*@}*/

/*!
 * @name Register FTM_FMS, field WPEN[6] (RW)
 *
 * The WPEN bit is the negation of the WPDIS bit. WPEN is set when 1 is written
 * to it. WPEN is cleared when WPEN bit is read as a 1 and then 1 is written to
 * WPDIS. Writing 0 to WPEN has no effect.
 *
 * Values:
 * - 0b0 - Write protection is disabled. Write protected bits can be written.
 * - 0b1 - Write protection is enabled. Write protected bits cannot be written.
 */
/*@{*/
/*! @brief Read current value of the FTM_FMS_WPEN field. */
#define FTM_RD_FMS_WPEN(base) ((FTM_FMS_REG(base) & FTM_FMS_WPEN_MASK) >> FTM_FMS_WPEN_SHIFT)
#define FTM_BRD_FMS_WPEN(base) (BME_UBFX32(&FTM_FMS_REG(base), FTM_FMS_WPEN_SHIFT, FTM_FMS_WPEN_WIDTH))

/*! @brief Set the WPEN field to a new value. */
#define FTM_WR_FMS_WPEN(base, value) (FTM_RMW_FMS(base, FTM_FMS_WPEN_MASK, FTM_FMS_WPEN(value)))
#define FTM_BWR_FMS_WPEN(base, value) (BME_BFI32(&FTM_FMS_REG(base), ((uint32_t)(value) << FTM_FMS_WPEN_SHIFT), FTM_FMS_WPEN_SHIFT, FTM_FMS_WPEN_WIDTH))
/*@}*/

/*!
 * @name Register FTM_FMS, field FAULTF[7] (ROWZ)
 *
 * Represents the logic OR of the individual FAULTFj bits where j = 3, 2, 1, 0.
 * Clear FAULTF by reading the FMS register while FAULTF is set and then writing
 * a 0 to FAULTF while there is no existing fault condition at the enabled fault
 * inputs. Writing a 1 to FAULTF has no effect. If another fault condition is
 * detected in an enabled fault input before the clearing sequence is completed, the
 * sequence is reset so FAULTF remains set after the clearing sequence is
 * completed for the earlier fault condition. FAULTF is also cleared when FAULTFj bits
 * are cleared individually.
 *
 * Values:
 * - 0b0 - No fault condition was detected.
 * - 0b1 - A fault condition was detected.
 */
/*@{*/
/*! @brief Read current value of the FTM_FMS_FAULTF field. */
#define FTM_RD_FMS_FAULTF(base) ((FTM_FMS_REG(base) & FTM_FMS_FAULTF_MASK) >> FTM_FMS_FAULTF_SHIFT)
#define FTM_BRD_FMS_FAULTF(base) (BME_UBFX32(&FTM_FMS_REG(base), FTM_FMS_FAULTF_SHIFT, FTM_FMS_FAULTF_WIDTH))

/*! @brief Set the FAULTF field to a new value. */
#define FTM_WR_FMS_FAULTF(base, value) (FTM_RMW_FMS(base, FTM_FMS_FAULTF_MASK, FTM_FMS_FAULTF(value)))
#define FTM_BWR_FMS_FAULTF(base, value) (BME_BFI32(&FTM_FMS_REG(base), ((uint32_t)(value) << FTM_FMS_FAULTF_SHIFT), FTM_FMS_FAULTF_SHIFT, FTM_FMS_FAULTF_WIDTH))
/*@}*/

/*******************************************************************************
 * FTM_FILTER - Input Capture Filter Control
 ******************************************************************************/

/*!
 * @brief FTM_FILTER - Input Capture Filter Control (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register selects the filter value for the inputs of channels. Channels
 * 4, 5, 6 and 7 do not have an input filter. Writing to the FILTER register has
 * immediate effect and must be done only when the channels 0, 1, 2, and 3 are not
 * in input modes. Failure to do this could result in a missing valid signal.
 */
/*!
 * @name Constants and macros for entire FTM_FILTER register
 */
/*@{*/
#define FTM_RD_FILTER(base)      (FTM_FILTER_REG(base))
#define FTM_WR_FILTER(base, value) (FTM_FILTER_REG(base) = (value))
#define FTM_RMW_FILTER(base, mask, value) (FTM_WR_FILTER(base, (FTM_RD_FILTER(base) & ~(mask)) | (value)))
#define FTM_SET_FILTER(base, value) (BME_OR32(&FTM_FILTER_REG(base), (uint32_t)(value)))
#define FTM_CLR_FILTER(base, value) (BME_AND32(&FTM_FILTER_REG(base), (uint32_t)(~(value))))
#define FTM_TOG_FILTER(base, value) (BME_XOR32(&FTM_FILTER_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTM_FILTER bitfields
 */

/*!
 * @name Register FTM_FILTER, field CH0FVAL[3:0] (RW)
 *
 * Selects the filter value for the channel input. The filter is disabled when
 * the value is zero.
 */
/*@{*/
/*! @brief Read current value of the FTM_FILTER_CH0FVAL field. */
#define FTM_RD_FILTER_CH0FVAL(base) ((FTM_FILTER_REG(base) & FTM_FILTER_CH0FVAL_MASK) >> FTM_FILTER_CH0FVAL_SHIFT)
#define FTM_BRD_FILTER_CH0FVAL(base) (BME_UBFX32(&FTM_FILTER_REG(base), FTM_FILTER_CH0FVAL_SHIFT, FTM_FILTER_CH0FVAL_WIDTH))

/*! @brief Set the CH0FVAL field to a new value. */
#define FTM_WR_FILTER_CH0FVAL(base, value) (FTM_RMW_FILTER(base, FTM_FILTER_CH0FVAL_MASK, FTM_FILTER_CH0FVAL(value)))
#define FTM_BWR_FILTER_CH0FVAL(base, value) (BME_BFI32(&FTM_FILTER_REG(base), ((uint32_t)(value) << FTM_FILTER_CH0FVAL_SHIFT), FTM_FILTER_CH0FVAL_SHIFT, FTM_FILTER_CH0FVAL_WIDTH))
/*@}*/

/*!
 * @name Register FTM_FILTER, field CH1FVAL[7:4] (RW)
 *
 * Selects the filter value for the channel input. The filter is disabled when
 * the value is zero.
 */
/*@{*/
/*! @brief Read current value of the FTM_FILTER_CH1FVAL field. */
#define FTM_RD_FILTER_CH1FVAL(base) ((FTM_FILTER_REG(base) & FTM_FILTER_CH1FVAL_MASK) >> FTM_FILTER_CH1FVAL_SHIFT)
#define FTM_BRD_FILTER_CH1FVAL(base) (BME_UBFX32(&FTM_FILTER_REG(base), FTM_FILTER_CH1FVAL_SHIFT, FTM_FILTER_CH1FVAL_WIDTH))

/*! @brief Set the CH1FVAL field to a new value. */
#define FTM_WR_FILTER_CH1FVAL(base, value) (FTM_RMW_FILTER(base, FTM_FILTER_CH1FVAL_MASK, FTM_FILTER_CH1FVAL(value)))
#define FTM_BWR_FILTER_CH1FVAL(base, value) (BME_BFI32(&FTM_FILTER_REG(base), ((uint32_t)(value) << FTM_FILTER_CH1FVAL_SHIFT), FTM_FILTER_CH1FVAL_SHIFT, FTM_FILTER_CH1FVAL_WIDTH))
/*@}*/

/*!
 * @name Register FTM_FILTER, field CH2FVAL[11:8] (RW)
 *
 * Selects the filter value for the channel input. The filter is disabled when
 * the value is zero.
 */
/*@{*/
/*! @brief Read current value of the FTM_FILTER_CH2FVAL field. */
#define FTM_RD_FILTER_CH2FVAL(base) ((FTM_FILTER_REG(base) & FTM_FILTER_CH2FVAL_MASK) >> FTM_FILTER_CH2FVAL_SHIFT)
#define FTM_BRD_FILTER_CH2FVAL(base) (BME_UBFX32(&FTM_FILTER_REG(base), FTM_FILTER_CH2FVAL_SHIFT, FTM_FILTER_CH2FVAL_WIDTH))

/*! @brief Set the CH2FVAL field to a new value. */
#define FTM_WR_FILTER_CH2FVAL(base, value) (FTM_RMW_FILTER(base, FTM_FILTER_CH2FVAL_MASK, FTM_FILTER_CH2FVAL(value)))
#define FTM_BWR_FILTER_CH2FVAL(base, value) (BME_BFI32(&FTM_FILTER_REG(base), ((uint32_t)(value) << FTM_FILTER_CH2FVAL_SHIFT), FTM_FILTER_CH2FVAL_SHIFT, FTM_FILTER_CH2FVAL_WIDTH))
/*@}*/

/*!
 * @name Register FTM_FILTER, field CH3FVAL[15:12] (RW)
 *
 * Selects the filter value for the channel input. The filter is disabled when
 * the value is zero.
 */
/*@{*/
/*! @brief Read current value of the FTM_FILTER_CH3FVAL field. */
#define FTM_RD_FILTER_CH3FVAL(base) ((FTM_FILTER_REG(base) & FTM_FILTER_CH3FVAL_MASK) >> FTM_FILTER_CH3FVAL_SHIFT)
#define FTM_BRD_FILTER_CH3FVAL(base) (BME_UBFX32(&FTM_FILTER_REG(base), FTM_FILTER_CH3FVAL_SHIFT, FTM_FILTER_CH3FVAL_WIDTH))

/*! @brief Set the CH3FVAL field to a new value. */
#define FTM_WR_FILTER_CH3FVAL(base, value) (FTM_RMW_FILTER(base, FTM_FILTER_CH3FVAL_MASK, FTM_FILTER_CH3FVAL(value)))
#define FTM_BWR_FILTER_CH3FVAL(base, value) (BME_BFI32(&FTM_FILTER_REG(base), ((uint32_t)(value) << FTM_FILTER_CH3FVAL_SHIFT), FTM_FILTER_CH3FVAL_SHIFT, FTM_FILTER_CH3FVAL_WIDTH))
/*@}*/

/*******************************************************************************
 * FTM_FLTCTRL - Fault Control
 ******************************************************************************/

/*!
 * @brief FTM_FLTCTRL - Fault Control (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register selects the filter value for the fault inputs, enables the
 * fault inputs and the fault inputs filter.
 */
/*!
 * @name Constants and macros for entire FTM_FLTCTRL register
 */
/*@{*/
#define FTM_RD_FLTCTRL(base)     (FTM_FLTCTRL_REG(base))
#define FTM_WR_FLTCTRL(base, value) (FTM_FLTCTRL_REG(base) = (value))
#define FTM_RMW_FLTCTRL(base, mask, value) (FTM_WR_FLTCTRL(base, (FTM_RD_FLTCTRL(base) & ~(mask)) | (value)))
#define FTM_SET_FLTCTRL(base, value) (BME_OR32(&FTM_FLTCTRL_REG(base), (uint32_t)(value)))
#define FTM_CLR_FLTCTRL(base, value) (BME_AND32(&FTM_FLTCTRL_REG(base), (uint32_t)(~(value))))
#define FTM_TOG_FLTCTRL(base, value) (BME_XOR32(&FTM_FLTCTRL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTM_FLTCTRL bitfields
 */

/*!
 * @name Register FTM_FLTCTRL, field FAULT0EN[0] (RW)
 *
 * Enables the fault input. This field is write protected. It can be written
 * only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - Fault input is disabled.
 * - 0b1 - Fault input is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_FLTCTRL_FAULT0EN field. */
#define FTM_RD_FLTCTRL_FAULT0EN(base) ((FTM_FLTCTRL_REG(base) & FTM_FLTCTRL_FAULT0EN_MASK) >> FTM_FLTCTRL_FAULT0EN_SHIFT)
#define FTM_BRD_FLTCTRL_FAULT0EN(base) (BME_UBFX32(&FTM_FLTCTRL_REG(base), FTM_FLTCTRL_FAULT0EN_SHIFT, FTM_FLTCTRL_FAULT0EN_WIDTH))

/*! @brief Set the FAULT0EN field to a new value. */
#define FTM_WR_FLTCTRL_FAULT0EN(base, value) (FTM_RMW_FLTCTRL(base, FTM_FLTCTRL_FAULT0EN_MASK, FTM_FLTCTRL_FAULT0EN(value)))
#define FTM_BWR_FLTCTRL_FAULT0EN(base, value) (BME_BFI32(&FTM_FLTCTRL_REG(base), ((uint32_t)(value) << FTM_FLTCTRL_FAULT0EN_SHIFT), FTM_FLTCTRL_FAULT0EN_SHIFT, FTM_FLTCTRL_FAULT0EN_WIDTH))
/*@}*/

/*!
 * @name Register FTM_FLTCTRL, field FAULT1EN[1] (RW)
 *
 * Enables the fault input. This field is write protected. It can be written
 * only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - Fault input is disabled.
 * - 0b1 - Fault input is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_FLTCTRL_FAULT1EN field. */
#define FTM_RD_FLTCTRL_FAULT1EN(base) ((FTM_FLTCTRL_REG(base) & FTM_FLTCTRL_FAULT1EN_MASK) >> FTM_FLTCTRL_FAULT1EN_SHIFT)
#define FTM_BRD_FLTCTRL_FAULT1EN(base) (BME_UBFX32(&FTM_FLTCTRL_REG(base), FTM_FLTCTRL_FAULT1EN_SHIFT, FTM_FLTCTRL_FAULT1EN_WIDTH))

/*! @brief Set the FAULT1EN field to a new value. */
#define FTM_WR_FLTCTRL_FAULT1EN(base, value) (FTM_RMW_FLTCTRL(base, FTM_FLTCTRL_FAULT1EN_MASK, FTM_FLTCTRL_FAULT1EN(value)))
#define FTM_BWR_FLTCTRL_FAULT1EN(base, value) (BME_BFI32(&FTM_FLTCTRL_REG(base), ((uint32_t)(value) << FTM_FLTCTRL_FAULT1EN_SHIFT), FTM_FLTCTRL_FAULT1EN_SHIFT, FTM_FLTCTRL_FAULT1EN_WIDTH))
/*@}*/

/*!
 * @name Register FTM_FLTCTRL, field FAULT2EN[2] (RW)
 *
 * Enables the fault input. This field is write protected. It can be written
 * only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - Fault input is disabled.
 * - 0b1 - Fault input is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_FLTCTRL_FAULT2EN field. */
#define FTM_RD_FLTCTRL_FAULT2EN(base) ((FTM_FLTCTRL_REG(base) & FTM_FLTCTRL_FAULT2EN_MASK) >> FTM_FLTCTRL_FAULT2EN_SHIFT)
#define FTM_BRD_FLTCTRL_FAULT2EN(base) (BME_UBFX32(&FTM_FLTCTRL_REG(base), FTM_FLTCTRL_FAULT2EN_SHIFT, FTM_FLTCTRL_FAULT2EN_WIDTH))

/*! @brief Set the FAULT2EN field to a new value. */
#define FTM_WR_FLTCTRL_FAULT2EN(base, value) (FTM_RMW_FLTCTRL(base, FTM_FLTCTRL_FAULT2EN_MASK, FTM_FLTCTRL_FAULT2EN(value)))
#define FTM_BWR_FLTCTRL_FAULT2EN(base, value) (BME_BFI32(&FTM_FLTCTRL_REG(base), ((uint32_t)(value) << FTM_FLTCTRL_FAULT2EN_SHIFT), FTM_FLTCTRL_FAULT2EN_SHIFT, FTM_FLTCTRL_FAULT2EN_WIDTH))
/*@}*/

/*!
 * @name Register FTM_FLTCTRL, field FAULT3EN[3] (RW)
 *
 * Enables the fault input. This field is write protected. It can be written
 * only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - Fault input is disabled.
 * - 0b1 - Fault input is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_FLTCTRL_FAULT3EN field. */
#define FTM_RD_FLTCTRL_FAULT3EN(base) ((FTM_FLTCTRL_REG(base) & FTM_FLTCTRL_FAULT3EN_MASK) >> FTM_FLTCTRL_FAULT3EN_SHIFT)
#define FTM_BRD_FLTCTRL_FAULT3EN(base) (BME_UBFX32(&FTM_FLTCTRL_REG(base), FTM_FLTCTRL_FAULT3EN_SHIFT, FTM_FLTCTRL_FAULT3EN_WIDTH))

/*! @brief Set the FAULT3EN field to a new value. */
#define FTM_WR_FLTCTRL_FAULT3EN(base, value) (FTM_RMW_FLTCTRL(base, FTM_FLTCTRL_FAULT3EN_MASK, FTM_FLTCTRL_FAULT3EN(value)))
#define FTM_BWR_FLTCTRL_FAULT3EN(base, value) (BME_BFI32(&FTM_FLTCTRL_REG(base), ((uint32_t)(value) << FTM_FLTCTRL_FAULT3EN_SHIFT), FTM_FLTCTRL_FAULT3EN_SHIFT, FTM_FLTCTRL_FAULT3EN_WIDTH))
/*@}*/

/*!
 * @name Register FTM_FLTCTRL, field FFLTR0EN[4] (RW)
 *
 * Enables the filter for the fault input. This field is write protected. It can
 * be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - Fault input filter is disabled.
 * - 0b1 - Fault input filter is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_FLTCTRL_FFLTR0EN field. */
#define FTM_RD_FLTCTRL_FFLTR0EN(base) ((FTM_FLTCTRL_REG(base) & FTM_FLTCTRL_FFLTR0EN_MASK) >> FTM_FLTCTRL_FFLTR0EN_SHIFT)
#define FTM_BRD_FLTCTRL_FFLTR0EN(base) (BME_UBFX32(&FTM_FLTCTRL_REG(base), FTM_FLTCTRL_FFLTR0EN_SHIFT, FTM_FLTCTRL_FFLTR0EN_WIDTH))

/*! @brief Set the FFLTR0EN field to a new value. */
#define FTM_WR_FLTCTRL_FFLTR0EN(base, value) (FTM_RMW_FLTCTRL(base, FTM_FLTCTRL_FFLTR0EN_MASK, FTM_FLTCTRL_FFLTR0EN(value)))
#define FTM_BWR_FLTCTRL_FFLTR0EN(base, value) (BME_BFI32(&FTM_FLTCTRL_REG(base), ((uint32_t)(value) << FTM_FLTCTRL_FFLTR0EN_SHIFT), FTM_FLTCTRL_FFLTR0EN_SHIFT, FTM_FLTCTRL_FFLTR0EN_WIDTH))
/*@}*/

/*!
 * @name Register FTM_FLTCTRL, field FFLTR1EN[5] (RW)
 *
 * Enables the filter for the fault input. This field is write protected. It can
 * be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - Fault input filter is disabled.
 * - 0b1 - Fault input filter is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_FLTCTRL_FFLTR1EN field. */
#define FTM_RD_FLTCTRL_FFLTR1EN(base) ((FTM_FLTCTRL_REG(base) & FTM_FLTCTRL_FFLTR1EN_MASK) >> FTM_FLTCTRL_FFLTR1EN_SHIFT)
#define FTM_BRD_FLTCTRL_FFLTR1EN(base) (BME_UBFX32(&FTM_FLTCTRL_REG(base), FTM_FLTCTRL_FFLTR1EN_SHIFT, FTM_FLTCTRL_FFLTR1EN_WIDTH))

/*! @brief Set the FFLTR1EN field to a new value. */
#define FTM_WR_FLTCTRL_FFLTR1EN(base, value) (FTM_RMW_FLTCTRL(base, FTM_FLTCTRL_FFLTR1EN_MASK, FTM_FLTCTRL_FFLTR1EN(value)))
#define FTM_BWR_FLTCTRL_FFLTR1EN(base, value) (BME_BFI32(&FTM_FLTCTRL_REG(base), ((uint32_t)(value) << FTM_FLTCTRL_FFLTR1EN_SHIFT), FTM_FLTCTRL_FFLTR1EN_SHIFT, FTM_FLTCTRL_FFLTR1EN_WIDTH))
/*@}*/

/*!
 * @name Register FTM_FLTCTRL, field FFLTR2EN[6] (RW)
 *
 * Enables the filter for the fault input. This field is write protected. It can
 * be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - Fault input filter is disabled.
 * - 0b1 - Fault input filter is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_FLTCTRL_FFLTR2EN field. */
#define FTM_RD_FLTCTRL_FFLTR2EN(base) ((FTM_FLTCTRL_REG(base) & FTM_FLTCTRL_FFLTR2EN_MASK) >> FTM_FLTCTRL_FFLTR2EN_SHIFT)
#define FTM_BRD_FLTCTRL_FFLTR2EN(base) (BME_UBFX32(&FTM_FLTCTRL_REG(base), FTM_FLTCTRL_FFLTR2EN_SHIFT, FTM_FLTCTRL_FFLTR2EN_WIDTH))

/*! @brief Set the FFLTR2EN field to a new value. */
#define FTM_WR_FLTCTRL_FFLTR2EN(base, value) (FTM_RMW_FLTCTRL(base, FTM_FLTCTRL_FFLTR2EN_MASK, FTM_FLTCTRL_FFLTR2EN(value)))
#define FTM_BWR_FLTCTRL_FFLTR2EN(base, value) (BME_BFI32(&FTM_FLTCTRL_REG(base), ((uint32_t)(value) << FTM_FLTCTRL_FFLTR2EN_SHIFT), FTM_FLTCTRL_FFLTR2EN_SHIFT, FTM_FLTCTRL_FFLTR2EN_WIDTH))
/*@}*/

/*!
 * @name Register FTM_FLTCTRL, field FFLTR3EN[7] (RW)
 *
 * Enables the filter for the fault input. This field is write protected. It can
 * be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - Fault input filter is disabled.
 * - 0b1 - Fault input filter is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_FLTCTRL_FFLTR3EN field. */
#define FTM_RD_FLTCTRL_FFLTR3EN(base) ((FTM_FLTCTRL_REG(base) & FTM_FLTCTRL_FFLTR3EN_MASK) >> FTM_FLTCTRL_FFLTR3EN_SHIFT)
#define FTM_BRD_FLTCTRL_FFLTR3EN(base) (BME_UBFX32(&FTM_FLTCTRL_REG(base), FTM_FLTCTRL_FFLTR3EN_SHIFT, FTM_FLTCTRL_FFLTR3EN_WIDTH))

/*! @brief Set the FFLTR3EN field to a new value. */
#define FTM_WR_FLTCTRL_FFLTR3EN(base, value) (FTM_RMW_FLTCTRL(base, FTM_FLTCTRL_FFLTR3EN_MASK, FTM_FLTCTRL_FFLTR3EN(value)))
#define FTM_BWR_FLTCTRL_FFLTR3EN(base, value) (BME_BFI32(&FTM_FLTCTRL_REG(base), ((uint32_t)(value) << FTM_FLTCTRL_FFLTR3EN_SHIFT), FTM_FLTCTRL_FFLTR3EN_SHIFT, FTM_FLTCTRL_FFLTR3EN_WIDTH))
/*@}*/

/*!
 * @name Register FTM_FLTCTRL, field FFVAL[11:8] (RW)
 *
 * Selects the filter value for the fault inputs. The fault filter is disabled
 * when the value is zero. Writing to this field has immediate effect and must be
 * done only when the fault control or all fault inputs are disabled. Failure to
 * do this could result in a missing fault detection.
 */
/*@{*/
/*! @brief Read current value of the FTM_FLTCTRL_FFVAL field. */
#define FTM_RD_FLTCTRL_FFVAL(base) ((FTM_FLTCTRL_REG(base) & FTM_FLTCTRL_FFVAL_MASK) >> FTM_FLTCTRL_FFVAL_SHIFT)
#define FTM_BRD_FLTCTRL_FFVAL(base) (BME_UBFX32(&FTM_FLTCTRL_REG(base), FTM_FLTCTRL_FFVAL_SHIFT, FTM_FLTCTRL_FFVAL_WIDTH))

/*! @brief Set the FFVAL field to a new value. */
#define FTM_WR_FLTCTRL_FFVAL(base, value) (FTM_RMW_FLTCTRL(base, FTM_FLTCTRL_FFVAL_MASK, FTM_FLTCTRL_FFVAL(value)))
#define FTM_BWR_FLTCTRL_FFVAL(base, value) (BME_BFI32(&FTM_FLTCTRL_REG(base), ((uint32_t)(value) << FTM_FLTCTRL_FFVAL_SHIFT), FTM_FLTCTRL_FFVAL_SHIFT, FTM_FLTCTRL_FFVAL_WIDTH))
/*@}*/

/*******************************************************************************
 * FTM_QDCTRL - Quadrature Decoder Control And Status
 ******************************************************************************/

/*!
 * @brief FTM_QDCTRL - Quadrature Decoder Control And Status (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register has the control and status bits for the Quadrature Decoder mode.
 */
/*!
 * @name Constants and macros for entire FTM_QDCTRL register
 */
/*@{*/
#define FTM_RD_QDCTRL(base)      (FTM_QDCTRL_REG(base))
#define FTM_WR_QDCTRL(base, value) (FTM_QDCTRL_REG(base) = (value))
#define FTM_RMW_QDCTRL(base, mask, value) (FTM_WR_QDCTRL(base, (FTM_RD_QDCTRL(base) & ~(mask)) | (value)))
#define FTM_SET_QDCTRL(base, value) (BME_OR32(&FTM_QDCTRL_REG(base), (uint32_t)(value)))
#define FTM_CLR_QDCTRL(base, value) (BME_AND32(&FTM_QDCTRL_REG(base), (uint32_t)(~(value))))
#define FTM_TOG_QDCTRL(base, value) (BME_XOR32(&FTM_QDCTRL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTM_QDCTRL bitfields
 */

/*!
 * @name Register FTM_QDCTRL, field QUADEN[0] (RW)
 *
 * Enables the Quadrature Decoder mode. In this mode, the phase A and B input
 * signals control the FTM counter direction. The Quadrature Decoder mode has
 * precedence over the other modes. See . This field is write protected. It can be
 * written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - Quadrature Decoder mode is disabled.
 * - 0b1 - Quadrature Decoder mode is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_QDCTRL_QUADEN field. */
#define FTM_RD_QDCTRL_QUADEN(base) ((FTM_QDCTRL_REG(base) & FTM_QDCTRL_QUADEN_MASK) >> FTM_QDCTRL_QUADEN_SHIFT)
#define FTM_BRD_QDCTRL_QUADEN(base) (BME_UBFX32(&FTM_QDCTRL_REG(base), FTM_QDCTRL_QUADEN_SHIFT, FTM_QDCTRL_QUADEN_WIDTH))

/*! @brief Set the QUADEN field to a new value. */
#define FTM_WR_QDCTRL_QUADEN(base, value) (FTM_RMW_QDCTRL(base, FTM_QDCTRL_QUADEN_MASK, FTM_QDCTRL_QUADEN(value)))
#define FTM_BWR_QDCTRL_QUADEN(base, value) (BME_BFI32(&FTM_QDCTRL_REG(base), ((uint32_t)(value) << FTM_QDCTRL_QUADEN_SHIFT), FTM_QDCTRL_QUADEN_SHIFT, FTM_QDCTRL_QUADEN_WIDTH))
/*@}*/

/*!
 * @name Register FTM_QDCTRL, field TOFDIR[1] (RO)
 *
 * Indicates if the TOF bit was set on the top or the bottom of counting.
 *
 * Values:
 * - 0b0 - TOF bit was set on the bottom of counting. There was an FTM counter
 *     decrement and FTM counter changes from its minimum value (CNTIN register)
 *     to its maximum value (MOD register).
 * - 0b1 - TOF bit was set on the top of counting. There was an FTM counter
 *     increment and FTM counter changes from its maximum value (MOD register) to its
 *     minimum value (CNTIN register).
 */
/*@{*/
/*! @brief Read current value of the FTM_QDCTRL_TOFDIR field. */
#define FTM_RD_QDCTRL_TOFDIR(base) ((FTM_QDCTRL_REG(base) & FTM_QDCTRL_TOFDIR_MASK) >> FTM_QDCTRL_TOFDIR_SHIFT)
#define FTM_BRD_QDCTRL_TOFDIR(base) (BME_UBFX32(&FTM_QDCTRL_REG(base), FTM_QDCTRL_TOFDIR_SHIFT, FTM_QDCTRL_TOFDIR_WIDTH))
/*@}*/

/*!
 * @name Register FTM_QDCTRL, field QUADIR[2] (RO)
 *
 * Indicates the counting direction.
 *
 * Values:
 * - 0b0 - Counting direction is decreasing (FTM counter decrement).
 * - 0b1 - Counting direction is increasing (FTM counter increment).
 */
/*@{*/
/*! @brief Read current value of the FTM_QDCTRL_QUADIR field. */
#define FTM_RD_QDCTRL_QUADIR(base) ((FTM_QDCTRL_REG(base) & FTM_QDCTRL_QUADIR_MASK) >> FTM_QDCTRL_QUADIR_SHIFT)
#define FTM_BRD_QDCTRL_QUADIR(base) (BME_UBFX32(&FTM_QDCTRL_REG(base), FTM_QDCTRL_QUADIR_SHIFT, FTM_QDCTRL_QUADIR_WIDTH))
/*@}*/

/*!
 * @name Register FTM_QDCTRL, field QUADMODE[3] (RW)
 *
 * Selects the encoding mode used in the Quadrature Decoder mode.
 *
 * Values:
 * - 0b0 - Phase A and phase B encoding mode.
 * - 0b1 - Count and direction encoding mode.
 */
/*@{*/
/*! @brief Read current value of the FTM_QDCTRL_QUADMODE field. */
#define FTM_RD_QDCTRL_QUADMODE(base) ((FTM_QDCTRL_REG(base) & FTM_QDCTRL_QUADMODE_MASK) >> FTM_QDCTRL_QUADMODE_SHIFT)
#define FTM_BRD_QDCTRL_QUADMODE(base) (BME_UBFX32(&FTM_QDCTRL_REG(base), FTM_QDCTRL_QUADMODE_SHIFT, FTM_QDCTRL_QUADMODE_WIDTH))

/*! @brief Set the QUADMODE field to a new value. */
#define FTM_WR_QDCTRL_QUADMODE(base, value) (FTM_RMW_QDCTRL(base, FTM_QDCTRL_QUADMODE_MASK, FTM_QDCTRL_QUADMODE(value)))
#define FTM_BWR_QDCTRL_QUADMODE(base, value) (BME_BFI32(&FTM_QDCTRL_REG(base), ((uint32_t)(value) << FTM_QDCTRL_QUADMODE_SHIFT), FTM_QDCTRL_QUADMODE_SHIFT, FTM_QDCTRL_QUADMODE_WIDTH))
/*@}*/

/*!
 * @name Register FTM_QDCTRL, field PHBPOL[4] (RW)
 *
 * Selects the polarity for the quadrature decoder phase B input.
 *
 * Values:
 * - 0b0 - Normal polarity. Phase B input signal is not inverted before
 *     identifying the rising and falling edges of this signal.
 * - 0b1 - Inverted polarity. Phase B input signal is inverted before
 *     identifying the rising and falling edges of this signal.
 */
/*@{*/
/*! @brief Read current value of the FTM_QDCTRL_PHBPOL field. */
#define FTM_RD_QDCTRL_PHBPOL(base) ((FTM_QDCTRL_REG(base) & FTM_QDCTRL_PHBPOL_MASK) >> FTM_QDCTRL_PHBPOL_SHIFT)
#define FTM_BRD_QDCTRL_PHBPOL(base) (BME_UBFX32(&FTM_QDCTRL_REG(base), FTM_QDCTRL_PHBPOL_SHIFT, FTM_QDCTRL_PHBPOL_WIDTH))

/*! @brief Set the PHBPOL field to a new value. */
#define FTM_WR_QDCTRL_PHBPOL(base, value) (FTM_RMW_QDCTRL(base, FTM_QDCTRL_PHBPOL_MASK, FTM_QDCTRL_PHBPOL(value)))
#define FTM_BWR_QDCTRL_PHBPOL(base, value) (BME_BFI32(&FTM_QDCTRL_REG(base), ((uint32_t)(value) << FTM_QDCTRL_PHBPOL_SHIFT), FTM_QDCTRL_PHBPOL_SHIFT, FTM_QDCTRL_PHBPOL_WIDTH))
/*@}*/

/*!
 * @name Register FTM_QDCTRL, field PHAPOL[5] (RW)
 *
 * Selects the polarity for the quadrature decoder phase A input.
 *
 * Values:
 * - 0b0 - Normal polarity. Phase A input signal is not inverted before
 *     identifying the rising and falling edges of this signal.
 * - 0b1 - Inverted polarity. Phase A input signal is inverted before
 *     identifying the rising and falling edges of this signal.
 */
/*@{*/
/*! @brief Read current value of the FTM_QDCTRL_PHAPOL field. */
#define FTM_RD_QDCTRL_PHAPOL(base) ((FTM_QDCTRL_REG(base) & FTM_QDCTRL_PHAPOL_MASK) >> FTM_QDCTRL_PHAPOL_SHIFT)
#define FTM_BRD_QDCTRL_PHAPOL(base) (BME_UBFX32(&FTM_QDCTRL_REG(base), FTM_QDCTRL_PHAPOL_SHIFT, FTM_QDCTRL_PHAPOL_WIDTH))

/*! @brief Set the PHAPOL field to a new value. */
#define FTM_WR_QDCTRL_PHAPOL(base, value) (FTM_RMW_QDCTRL(base, FTM_QDCTRL_PHAPOL_MASK, FTM_QDCTRL_PHAPOL(value)))
#define FTM_BWR_QDCTRL_PHAPOL(base, value) (BME_BFI32(&FTM_QDCTRL_REG(base), ((uint32_t)(value) << FTM_QDCTRL_PHAPOL_SHIFT), FTM_QDCTRL_PHAPOL_SHIFT, FTM_QDCTRL_PHAPOL_WIDTH))
/*@}*/

/*!
 * @name Register FTM_QDCTRL, field PHBFLTREN[6] (RW)
 *
 * Enables the filter for the quadrature decoder phase B input. The filter value
 * for the phase B input is defined by the CH1FVAL field of FILTER. The phase B
 * filter is also disabled when CH1FVAL is zero.
 *
 * Values:
 * - 0b0 - Phase B input filter is disabled.
 * - 0b1 - Phase B input filter is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_QDCTRL_PHBFLTREN field. */
#define FTM_RD_QDCTRL_PHBFLTREN(base) ((FTM_QDCTRL_REG(base) & FTM_QDCTRL_PHBFLTREN_MASK) >> FTM_QDCTRL_PHBFLTREN_SHIFT)
#define FTM_BRD_QDCTRL_PHBFLTREN(base) (BME_UBFX32(&FTM_QDCTRL_REG(base), FTM_QDCTRL_PHBFLTREN_SHIFT, FTM_QDCTRL_PHBFLTREN_WIDTH))

/*! @brief Set the PHBFLTREN field to a new value. */
#define FTM_WR_QDCTRL_PHBFLTREN(base, value) (FTM_RMW_QDCTRL(base, FTM_QDCTRL_PHBFLTREN_MASK, FTM_QDCTRL_PHBFLTREN(value)))
#define FTM_BWR_QDCTRL_PHBFLTREN(base, value) (BME_BFI32(&FTM_QDCTRL_REG(base), ((uint32_t)(value) << FTM_QDCTRL_PHBFLTREN_SHIFT), FTM_QDCTRL_PHBFLTREN_SHIFT, FTM_QDCTRL_PHBFLTREN_WIDTH))
/*@}*/

/*!
 * @name Register FTM_QDCTRL, field PHAFLTREN[7] (RW)
 *
 * Enables the filter for the quadrature decoder phase A input. The filter value
 * for the phase A input is defined by the CH0FVAL field of FILTER. The phase A
 * filter is also disabled when CH0FVAL is zero.
 *
 * Values:
 * - 0b0 - Phase A input filter is disabled.
 * - 0b1 - Phase A input filter is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_QDCTRL_PHAFLTREN field. */
#define FTM_RD_QDCTRL_PHAFLTREN(base) ((FTM_QDCTRL_REG(base) & FTM_QDCTRL_PHAFLTREN_MASK) >> FTM_QDCTRL_PHAFLTREN_SHIFT)
#define FTM_BRD_QDCTRL_PHAFLTREN(base) (BME_UBFX32(&FTM_QDCTRL_REG(base), FTM_QDCTRL_PHAFLTREN_SHIFT, FTM_QDCTRL_PHAFLTREN_WIDTH))

/*! @brief Set the PHAFLTREN field to a new value. */
#define FTM_WR_QDCTRL_PHAFLTREN(base, value) (FTM_RMW_QDCTRL(base, FTM_QDCTRL_PHAFLTREN_MASK, FTM_QDCTRL_PHAFLTREN(value)))
#define FTM_BWR_QDCTRL_PHAFLTREN(base, value) (BME_BFI32(&FTM_QDCTRL_REG(base), ((uint32_t)(value) << FTM_QDCTRL_PHAFLTREN_SHIFT), FTM_QDCTRL_PHAFLTREN_SHIFT, FTM_QDCTRL_PHAFLTREN_WIDTH))
/*@}*/

/*******************************************************************************
 * FTM_CONF - Configuration
 ******************************************************************************/

/*!
 * @brief FTM_CONF - Configuration (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register selects the number of times that the FTM counter overflow
 * should occur before the TOF bit to be set, the FTM behavior in BDM modes, the use
 * of an external global time base, and the global time base signal generation.
 */
/*!
 * @name Constants and macros for entire FTM_CONF register
 */
/*@{*/
#define FTM_RD_CONF(base)        (FTM_CONF_REG(base))
#define FTM_WR_CONF(base, value) (FTM_CONF_REG(base) = (value))
#define FTM_RMW_CONF(base, mask, value) (FTM_WR_CONF(base, (FTM_RD_CONF(base) & ~(mask)) | (value)))
#define FTM_SET_CONF(base, value) (BME_OR32(&FTM_CONF_REG(base), (uint32_t)(value)))
#define FTM_CLR_CONF(base, value) (BME_AND32(&FTM_CONF_REG(base), (uint32_t)(~(value))))
#define FTM_TOG_CONF(base, value) (BME_XOR32(&FTM_CONF_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTM_CONF bitfields
 */

/*!
 * @name Register FTM_CONF, field NUMTOF[4:0] (RW)
 *
 * Selects the ratio between the number of counter overflows to the number of
 * times the TOF bit is set. NUMTOF = 0: The TOF bit is set for each counter
 * overflow. NUMTOF = 1: The TOF bit is set for the first counter overflow but not for
 * the next overflow. NUMTOF = 2: The TOF bit is set for the first counter
 * overflow but not for the next 2 overflows. NUMTOF = 3: The TOF bit is set for the
 * first counter overflow but not for the next 3 overflows. This pattern continues
 * up to a maximum of 31.
 */
/*@{*/
/*! @brief Read current value of the FTM_CONF_NUMTOF field. */
#define FTM_RD_CONF_NUMTOF(base) ((FTM_CONF_REG(base) & FTM_CONF_NUMTOF_MASK) >> FTM_CONF_NUMTOF_SHIFT)
#define FTM_BRD_CONF_NUMTOF(base) (BME_UBFX32(&FTM_CONF_REG(base), FTM_CONF_NUMTOF_SHIFT, FTM_CONF_NUMTOF_WIDTH))

/*! @brief Set the NUMTOF field to a new value. */
#define FTM_WR_CONF_NUMTOF(base, value) (FTM_RMW_CONF(base, FTM_CONF_NUMTOF_MASK, FTM_CONF_NUMTOF(value)))
#define FTM_BWR_CONF_NUMTOF(base, value) (BME_BFI32(&FTM_CONF_REG(base), ((uint32_t)(value) << FTM_CONF_NUMTOF_SHIFT), FTM_CONF_NUMTOF_SHIFT, FTM_CONF_NUMTOF_WIDTH))
/*@}*/

/*!
 * @name Register FTM_CONF, field BDMMODE[7:6] (RW)
 *
 * Selects the FTM behavior in BDM mode. See BDM mode.
 */
/*@{*/
/*! @brief Read current value of the FTM_CONF_BDMMODE field. */
#define FTM_RD_CONF_BDMMODE(base) ((FTM_CONF_REG(base) & FTM_CONF_BDMMODE_MASK) >> FTM_CONF_BDMMODE_SHIFT)
#define FTM_BRD_CONF_BDMMODE(base) (BME_UBFX32(&FTM_CONF_REG(base), FTM_CONF_BDMMODE_SHIFT, FTM_CONF_BDMMODE_WIDTH))

/*! @brief Set the BDMMODE field to a new value. */
#define FTM_WR_CONF_BDMMODE(base, value) (FTM_RMW_CONF(base, FTM_CONF_BDMMODE_MASK, FTM_CONF_BDMMODE(value)))
#define FTM_BWR_CONF_BDMMODE(base, value) (BME_BFI32(&FTM_CONF_REG(base), ((uint32_t)(value) << FTM_CONF_BDMMODE_SHIFT), FTM_CONF_BDMMODE_SHIFT, FTM_CONF_BDMMODE_WIDTH))
/*@}*/

/*!
 * @name Register FTM_CONF, field GTBEEN[9] (RW)
 *
 * Configures the FTM to use an external global time base signal that is
 * generated by another FTM.
 *
 * Values:
 * - 0b0 - Use of an external global time base is disabled.
 * - 0b1 - Use of an external global time base is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_CONF_GTBEEN field. */
#define FTM_RD_CONF_GTBEEN(base) ((FTM_CONF_REG(base) & FTM_CONF_GTBEEN_MASK) >> FTM_CONF_GTBEEN_SHIFT)
#define FTM_BRD_CONF_GTBEEN(base) (BME_UBFX32(&FTM_CONF_REG(base), FTM_CONF_GTBEEN_SHIFT, FTM_CONF_GTBEEN_WIDTH))

/*! @brief Set the GTBEEN field to a new value. */
#define FTM_WR_CONF_GTBEEN(base, value) (FTM_RMW_CONF(base, FTM_CONF_GTBEEN_MASK, FTM_CONF_GTBEEN(value)))
#define FTM_BWR_CONF_GTBEEN(base, value) (BME_BFI32(&FTM_CONF_REG(base), ((uint32_t)(value) << FTM_CONF_GTBEEN_SHIFT), FTM_CONF_GTBEEN_SHIFT, FTM_CONF_GTBEEN_WIDTH))
/*@}*/

/*!
 * @name Register FTM_CONF, field GTBEOUT[10] (RW)
 *
 * Enables the global time base signal generation to other FTMs.
 *
 * Values:
 * - 0b0 - A global time base signal generation is disabled.
 * - 0b1 - A global time base signal generation is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_CONF_GTBEOUT field. */
#define FTM_RD_CONF_GTBEOUT(base) ((FTM_CONF_REG(base) & FTM_CONF_GTBEOUT_MASK) >> FTM_CONF_GTBEOUT_SHIFT)
#define FTM_BRD_CONF_GTBEOUT(base) (BME_UBFX32(&FTM_CONF_REG(base), FTM_CONF_GTBEOUT_SHIFT, FTM_CONF_GTBEOUT_WIDTH))

/*! @brief Set the GTBEOUT field to a new value. */
#define FTM_WR_CONF_GTBEOUT(base, value) (FTM_RMW_CONF(base, FTM_CONF_GTBEOUT_MASK, FTM_CONF_GTBEOUT(value)))
#define FTM_BWR_CONF_GTBEOUT(base, value) (BME_BFI32(&FTM_CONF_REG(base), ((uint32_t)(value) << FTM_CONF_GTBEOUT_SHIFT), FTM_CONF_GTBEOUT_SHIFT, FTM_CONF_GTBEOUT_WIDTH))
/*@}*/

/*******************************************************************************
 * FTM_FLTPOL - FTM Fault Input Polarity
 ******************************************************************************/

/*!
 * @brief FTM_FLTPOL - FTM Fault Input Polarity (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register defines the fault inputs polarity.
 */
/*!
 * @name Constants and macros for entire FTM_FLTPOL register
 */
/*@{*/
#define FTM_RD_FLTPOL(base)      (FTM_FLTPOL_REG(base))
#define FTM_WR_FLTPOL(base, value) (FTM_FLTPOL_REG(base) = (value))
#define FTM_RMW_FLTPOL(base, mask, value) (FTM_WR_FLTPOL(base, (FTM_RD_FLTPOL(base) & ~(mask)) | (value)))
#define FTM_SET_FLTPOL(base, value) (BME_OR32(&FTM_FLTPOL_REG(base), (uint32_t)(value)))
#define FTM_CLR_FLTPOL(base, value) (BME_AND32(&FTM_FLTPOL_REG(base), (uint32_t)(~(value))))
#define FTM_TOG_FLTPOL(base, value) (BME_XOR32(&FTM_FLTPOL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTM_FLTPOL bitfields
 */

/*!
 * @name Register FTM_FLTPOL, field FLT0POL[0] (RW)
 *
 * Defines the polarity of the fault input. This field is write protected. It
 * can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The fault input polarity is active high. A 1 at the fault input
 *     indicates a fault.
 * - 0b1 - The fault input polarity is active low. A 0 at the fault input
 *     indicates a fault.
 */
/*@{*/
/*! @brief Read current value of the FTM_FLTPOL_FLT0POL field. */
#define FTM_RD_FLTPOL_FLT0POL(base) ((FTM_FLTPOL_REG(base) & FTM_FLTPOL_FLT0POL_MASK) >> FTM_FLTPOL_FLT0POL_SHIFT)
#define FTM_BRD_FLTPOL_FLT0POL(base) (BME_UBFX32(&FTM_FLTPOL_REG(base), FTM_FLTPOL_FLT0POL_SHIFT, FTM_FLTPOL_FLT0POL_WIDTH))

/*! @brief Set the FLT0POL field to a new value. */
#define FTM_WR_FLTPOL_FLT0POL(base, value) (FTM_RMW_FLTPOL(base, FTM_FLTPOL_FLT0POL_MASK, FTM_FLTPOL_FLT0POL(value)))
#define FTM_BWR_FLTPOL_FLT0POL(base, value) (BME_BFI32(&FTM_FLTPOL_REG(base), ((uint32_t)(value) << FTM_FLTPOL_FLT0POL_SHIFT), FTM_FLTPOL_FLT0POL_SHIFT, FTM_FLTPOL_FLT0POL_WIDTH))
/*@}*/

/*!
 * @name Register FTM_FLTPOL, field FLT1POL[1] (RW)
 *
 * Defines the polarity of the fault input. This field is write protected. It
 * can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The fault input polarity is active high. A 1 at the fault input
 *     indicates a fault.
 * - 0b1 - The fault input polarity is active low. A 0 at the fault input
 *     indicates a fault.
 */
/*@{*/
/*! @brief Read current value of the FTM_FLTPOL_FLT1POL field. */
#define FTM_RD_FLTPOL_FLT1POL(base) ((FTM_FLTPOL_REG(base) & FTM_FLTPOL_FLT1POL_MASK) >> FTM_FLTPOL_FLT1POL_SHIFT)
#define FTM_BRD_FLTPOL_FLT1POL(base) (BME_UBFX32(&FTM_FLTPOL_REG(base), FTM_FLTPOL_FLT1POL_SHIFT, FTM_FLTPOL_FLT1POL_WIDTH))

/*! @brief Set the FLT1POL field to a new value. */
#define FTM_WR_FLTPOL_FLT1POL(base, value) (FTM_RMW_FLTPOL(base, FTM_FLTPOL_FLT1POL_MASK, FTM_FLTPOL_FLT1POL(value)))
#define FTM_BWR_FLTPOL_FLT1POL(base, value) (BME_BFI32(&FTM_FLTPOL_REG(base), ((uint32_t)(value) << FTM_FLTPOL_FLT1POL_SHIFT), FTM_FLTPOL_FLT1POL_SHIFT, FTM_FLTPOL_FLT1POL_WIDTH))
/*@}*/

/*!
 * @name Register FTM_FLTPOL, field FLT2POL[2] (RW)
 *
 * Defines the polarity of the fault input. This field is write protected. It
 * can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The fault input polarity is active high. A 1 at the fault input
 *     indicates a fault.
 * - 0b1 - The fault input polarity is active low. A 0 at the fault input
 *     indicates a fault.
 */
/*@{*/
/*! @brief Read current value of the FTM_FLTPOL_FLT2POL field. */
#define FTM_RD_FLTPOL_FLT2POL(base) ((FTM_FLTPOL_REG(base) & FTM_FLTPOL_FLT2POL_MASK) >> FTM_FLTPOL_FLT2POL_SHIFT)
#define FTM_BRD_FLTPOL_FLT2POL(base) (BME_UBFX32(&FTM_FLTPOL_REG(base), FTM_FLTPOL_FLT2POL_SHIFT, FTM_FLTPOL_FLT2POL_WIDTH))

/*! @brief Set the FLT2POL field to a new value. */
#define FTM_WR_FLTPOL_FLT2POL(base, value) (FTM_RMW_FLTPOL(base, FTM_FLTPOL_FLT2POL_MASK, FTM_FLTPOL_FLT2POL(value)))
#define FTM_BWR_FLTPOL_FLT2POL(base, value) (BME_BFI32(&FTM_FLTPOL_REG(base), ((uint32_t)(value) << FTM_FLTPOL_FLT2POL_SHIFT), FTM_FLTPOL_FLT2POL_SHIFT, FTM_FLTPOL_FLT2POL_WIDTH))
/*@}*/

/*!
 * @name Register FTM_FLTPOL, field FLT3POL[3] (RW)
 *
 * Defines the polarity of the fault input. This field is write protected. It
 * can be written only when MODE[WPDIS] = 1.
 *
 * Values:
 * - 0b0 - The fault input polarity is active high. A 1 at the fault input
 *     indicates a fault.
 * - 0b1 - The fault input polarity is active low. A 0 at the fault input
 *     indicates a fault.
 */
/*@{*/
/*! @brief Read current value of the FTM_FLTPOL_FLT3POL field. */
#define FTM_RD_FLTPOL_FLT3POL(base) ((FTM_FLTPOL_REG(base) & FTM_FLTPOL_FLT3POL_MASK) >> FTM_FLTPOL_FLT3POL_SHIFT)
#define FTM_BRD_FLTPOL_FLT3POL(base) (BME_UBFX32(&FTM_FLTPOL_REG(base), FTM_FLTPOL_FLT3POL_SHIFT, FTM_FLTPOL_FLT3POL_WIDTH))

/*! @brief Set the FLT3POL field to a new value. */
#define FTM_WR_FLTPOL_FLT3POL(base, value) (FTM_RMW_FLTPOL(base, FTM_FLTPOL_FLT3POL_MASK, FTM_FLTPOL_FLT3POL(value)))
#define FTM_BWR_FLTPOL_FLT3POL(base, value) (BME_BFI32(&FTM_FLTPOL_REG(base), ((uint32_t)(value) << FTM_FLTPOL_FLT3POL_SHIFT), FTM_FLTPOL_FLT3POL_SHIFT, FTM_FLTPOL_FLT3POL_WIDTH))
/*@}*/

/*******************************************************************************
 * FTM_SYNCONF - Synchronization Configuration
 ******************************************************************************/

/*!
 * @brief FTM_SYNCONF - Synchronization Configuration (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register selects the PWM synchronization configuration, SWOCTRL, INVCTRL
 * and CNTIN registers synchronization, if FTM clears the TRIGj bit, where j =
 * 0, 1, 2, when the hardware trigger j is detected.
 */
/*!
 * @name Constants and macros for entire FTM_SYNCONF register
 */
/*@{*/
#define FTM_RD_SYNCONF(base)     (FTM_SYNCONF_REG(base))
#define FTM_WR_SYNCONF(base, value) (FTM_SYNCONF_REG(base) = (value))
#define FTM_RMW_SYNCONF(base, mask, value) (FTM_WR_SYNCONF(base, (FTM_RD_SYNCONF(base) & ~(mask)) | (value)))
#define FTM_SET_SYNCONF(base, value) (BME_OR32(&FTM_SYNCONF_REG(base), (uint32_t)(value)))
#define FTM_CLR_SYNCONF(base, value) (BME_AND32(&FTM_SYNCONF_REG(base), (uint32_t)(~(value))))
#define FTM_TOG_SYNCONF(base, value) (BME_XOR32(&FTM_SYNCONF_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTM_SYNCONF bitfields
 */

/*!
 * @name Register FTM_SYNCONF, field HWTRIGMODE[0] (RW)
 *
 * Values:
 * - 0b0 - FTM clears the TRIGj bit when the hardware trigger j is detected,
 *     where j = 0, 1,2.
 * - 0b1 - FTM does not clear the TRIGj bit when the hardware trigger j is
 *     detected, where j = 0, 1,2.
 */
/*@{*/
/*! @brief Read current value of the FTM_SYNCONF_HWTRIGMODE field. */
#define FTM_RD_SYNCONF_HWTRIGMODE(base) ((FTM_SYNCONF_REG(base) & FTM_SYNCONF_HWTRIGMODE_MASK) >> FTM_SYNCONF_HWTRIGMODE_SHIFT)
#define FTM_BRD_SYNCONF_HWTRIGMODE(base) (BME_UBFX32(&FTM_SYNCONF_REG(base), FTM_SYNCONF_HWTRIGMODE_SHIFT, FTM_SYNCONF_HWTRIGMODE_WIDTH))

/*! @brief Set the HWTRIGMODE field to a new value. */
#define FTM_WR_SYNCONF_HWTRIGMODE(base, value) (FTM_RMW_SYNCONF(base, FTM_SYNCONF_HWTRIGMODE_MASK, FTM_SYNCONF_HWTRIGMODE(value)))
#define FTM_BWR_SYNCONF_HWTRIGMODE(base, value) (BME_BFI32(&FTM_SYNCONF_REG(base), ((uint32_t)(value) << FTM_SYNCONF_HWTRIGMODE_SHIFT), FTM_SYNCONF_HWTRIGMODE_SHIFT, FTM_SYNCONF_HWTRIGMODE_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SYNCONF, field CNTINC[2] (RW)
 *
 * Values:
 * - 0b0 - CNTIN register is updated with its buffer value at all rising edges
 *     of system clock.
 * - 0b1 - CNTIN register is updated with its buffer value by the PWM
 *     synchronization.
 */
/*@{*/
/*! @brief Read current value of the FTM_SYNCONF_CNTINC field. */
#define FTM_RD_SYNCONF_CNTINC(base) ((FTM_SYNCONF_REG(base) & FTM_SYNCONF_CNTINC_MASK) >> FTM_SYNCONF_CNTINC_SHIFT)
#define FTM_BRD_SYNCONF_CNTINC(base) (BME_UBFX32(&FTM_SYNCONF_REG(base), FTM_SYNCONF_CNTINC_SHIFT, FTM_SYNCONF_CNTINC_WIDTH))

/*! @brief Set the CNTINC field to a new value. */
#define FTM_WR_SYNCONF_CNTINC(base, value) (FTM_RMW_SYNCONF(base, FTM_SYNCONF_CNTINC_MASK, FTM_SYNCONF_CNTINC(value)))
#define FTM_BWR_SYNCONF_CNTINC(base, value) (BME_BFI32(&FTM_SYNCONF_REG(base), ((uint32_t)(value) << FTM_SYNCONF_CNTINC_SHIFT), FTM_SYNCONF_CNTINC_SHIFT, FTM_SYNCONF_CNTINC_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SYNCONF, field INVC[4] (RW)
 *
 * Values:
 * - 0b0 - INVCTRL register is updated with its buffer value at all rising edges
 *     of system clock.
 * - 0b1 - INVCTRL register is updated with its buffer value by the PWM
 *     synchronization.
 */
/*@{*/
/*! @brief Read current value of the FTM_SYNCONF_INVC field. */
#define FTM_RD_SYNCONF_INVC(base) ((FTM_SYNCONF_REG(base) & FTM_SYNCONF_INVC_MASK) >> FTM_SYNCONF_INVC_SHIFT)
#define FTM_BRD_SYNCONF_INVC(base) (BME_UBFX32(&FTM_SYNCONF_REG(base), FTM_SYNCONF_INVC_SHIFT, FTM_SYNCONF_INVC_WIDTH))

/*! @brief Set the INVC field to a new value. */
#define FTM_WR_SYNCONF_INVC(base, value) (FTM_RMW_SYNCONF(base, FTM_SYNCONF_INVC_MASK, FTM_SYNCONF_INVC(value)))
#define FTM_BWR_SYNCONF_INVC(base, value) (BME_BFI32(&FTM_SYNCONF_REG(base), ((uint32_t)(value) << FTM_SYNCONF_INVC_SHIFT), FTM_SYNCONF_INVC_SHIFT, FTM_SYNCONF_INVC_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SYNCONF, field SWOC[5] (RW)
 *
 * Values:
 * - 0b0 - SWOCTRL register is updated with its buffer value at all rising edges
 *     of system clock.
 * - 0b1 - SWOCTRL register is updated with its buffer value by the PWM
 *     synchronization.
 */
/*@{*/
/*! @brief Read current value of the FTM_SYNCONF_SWOC field. */
#define FTM_RD_SYNCONF_SWOC(base) ((FTM_SYNCONF_REG(base) & FTM_SYNCONF_SWOC_MASK) >> FTM_SYNCONF_SWOC_SHIFT)
#define FTM_BRD_SYNCONF_SWOC(base) (BME_UBFX32(&FTM_SYNCONF_REG(base), FTM_SYNCONF_SWOC_SHIFT, FTM_SYNCONF_SWOC_WIDTH))

/*! @brief Set the SWOC field to a new value. */
#define FTM_WR_SYNCONF_SWOC(base, value) (FTM_RMW_SYNCONF(base, FTM_SYNCONF_SWOC_MASK, FTM_SYNCONF_SWOC(value)))
#define FTM_BWR_SYNCONF_SWOC(base, value) (BME_BFI32(&FTM_SYNCONF_REG(base), ((uint32_t)(value) << FTM_SYNCONF_SWOC_SHIFT), FTM_SYNCONF_SWOC_SHIFT, FTM_SYNCONF_SWOC_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SYNCONF, field SYNCMODE[7] (RW)
 *
 * Selects the PWM Synchronization mode.
 *
 * Values:
 * - 0b0 - Legacy PWM synchronization is selected.
 * - 0b1 - Enhanced PWM synchronization is selected.
 */
/*@{*/
/*! @brief Read current value of the FTM_SYNCONF_SYNCMODE field. */
#define FTM_RD_SYNCONF_SYNCMODE(base) ((FTM_SYNCONF_REG(base) & FTM_SYNCONF_SYNCMODE_MASK) >> FTM_SYNCONF_SYNCMODE_SHIFT)
#define FTM_BRD_SYNCONF_SYNCMODE(base) (BME_UBFX32(&FTM_SYNCONF_REG(base), FTM_SYNCONF_SYNCMODE_SHIFT, FTM_SYNCONF_SYNCMODE_WIDTH))

/*! @brief Set the SYNCMODE field to a new value. */
#define FTM_WR_SYNCONF_SYNCMODE(base, value) (FTM_RMW_SYNCONF(base, FTM_SYNCONF_SYNCMODE_MASK, FTM_SYNCONF_SYNCMODE(value)))
#define FTM_BWR_SYNCONF_SYNCMODE(base, value) (BME_BFI32(&FTM_SYNCONF_REG(base), ((uint32_t)(value) << FTM_SYNCONF_SYNCMODE_SHIFT), FTM_SYNCONF_SYNCMODE_SHIFT, FTM_SYNCONF_SYNCMODE_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SYNCONF, field SWRSTCNT[8] (RW)
 *
 * FTM counter synchronization is activated by the software trigger.
 *
 * Values:
 * - 0b0 - The software trigger does not activate the FTM counter
 *     synchronization.
 * - 0b1 - The software trigger activates the FTM counter synchronization.
 */
/*@{*/
/*! @brief Read current value of the FTM_SYNCONF_SWRSTCNT field. */
#define FTM_RD_SYNCONF_SWRSTCNT(base) ((FTM_SYNCONF_REG(base) & FTM_SYNCONF_SWRSTCNT_MASK) >> FTM_SYNCONF_SWRSTCNT_SHIFT)
#define FTM_BRD_SYNCONF_SWRSTCNT(base) (BME_UBFX32(&FTM_SYNCONF_REG(base), FTM_SYNCONF_SWRSTCNT_SHIFT, FTM_SYNCONF_SWRSTCNT_WIDTH))

/*! @brief Set the SWRSTCNT field to a new value. */
#define FTM_WR_SYNCONF_SWRSTCNT(base, value) (FTM_RMW_SYNCONF(base, FTM_SYNCONF_SWRSTCNT_MASK, FTM_SYNCONF_SWRSTCNT(value)))
#define FTM_BWR_SYNCONF_SWRSTCNT(base, value) (BME_BFI32(&FTM_SYNCONF_REG(base), ((uint32_t)(value) << FTM_SYNCONF_SWRSTCNT_SHIFT), FTM_SYNCONF_SWRSTCNT_SHIFT, FTM_SYNCONF_SWRSTCNT_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SYNCONF, field SWWRBUF[9] (RW)
 *
 * MOD, CNTIN, and CV registers synchronization is activated by the software
 * trigger.
 *
 * Values:
 * - 0b0 - The software trigger does not activate MOD, CNTIN, and CV registers
 *     synchronization.
 * - 0b1 - The software trigger activates MOD, CNTIN, and CV registers
 *     synchronization.
 */
/*@{*/
/*! @brief Read current value of the FTM_SYNCONF_SWWRBUF field. */
#define FTM_RD_SYNCONF_SWWRBUF(base) ((FTM_SYNCONF_REG(base) & FTM_SYNCONF_SWWRBUF_MASK) >> FTM_SYNCONF_SWWRBUF_SHIFT)
#define FTM_BRD_SYNCONF_SWWRBUF(base) (BME_UBFX32(&FTM_SYNCONF_REG(base), FTM_SYNCONF_SWWRBUF_SHIFT, FTM_SYNCONF_SWWRBUF_WIDTH))

/*! @brief Set the SWWRBUF field to a new value. */
#define FTM_WR_SYNCONF_SWWRBUF(base, value) (FTM_RMW_SYNCONF(base, FTM_SYNCONF_SWWRBUF_MASK, FTM_SYNCONF_SWWRBUF(value)))
#define FTM_BWR_SYNCONF_SWWRBUF(base, value) (BME_BFI32(&FTM_SYNCONF_REG(base), ((uint32_t)(value) << FTM_SYNCONF_SWWRBUF_SHIFT), FTM_SYNCONF_SWWRBUF_SHIFT, FTM_SYNCONF_SWWRBUF_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SYNCONF, field SWOM[10] (RW)
 *
 * Output mask synchronization is activated by the software trigger.
 *
 * Values:
 * - 0b0 - The software trigger does not activate the OUTMASK register
 *     synchronization.
 * - 0b1 - The software trigger activates the OUTMASK register synchronization.
 */
/*@{*/
/*! @brief Read current value of the FTM_SYNCONF_SWOM field. */
#define FTM_RD_SYNCONF_SWOM(base) ((FTM_SYNCONF_REG(base) & FTM_SYNCONF_SWOM_MASK) >> FTM_SYNCONF_SWOM_SHIFT)
#define FTM_BRD_SYNCONF_SWOM(base) (BME_UBFX32(&FTM_SYNCONF_REG(base), FTM_SYNCONF_SWOM_SHIFT, FTM_SYNCONF_SWOM_WIDTH))

/*! @brief Set the SWOM field to a new value. */
#define FTM_WR_SYNCONF_SWOM(base, value) (FTM_RMW_SYNCONF(base, FTM_SYNCONF_SWOM_MASK, FTM_SYNCONF_SWOM(value)))
#define FTM_BWR_SYNCONF_SWOM(base, value) (BME_BFI32(&FTM_SYNCONF_REG(base), ((uint32_t)(value) << FTM_SYNCONF_SWOM_SHIFT), FTM_SYNCONF_SWOM_SHIFT, FTM_SYNCONF_SWOM_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SYNCONF, field SWINVC[11] (RW)
 *
 * Inverting control synchronization is activated by the software trigger.
 *
 * Values:
 * - 0b0 - The software trigger does not activate the INVCTRL register
 *     synchronization.
 * - 0b1 - The software trigger activates the INVCTRL register synchronization.
 */
/*@{*/
/*! @brief Read current value of the FTM_SYNCONF_SWINVC field. */
#define FTM_RD_SYNCONF_SWINVC(base) ((FTM_SYNCONF_REG(base) & FTM_SYNCONF_SWINVC_MASK) >> FTM_SYNCONF_SWINVC_SHIFT)
#define FTM_BRD_SYNCONF_SWINVC(base) (BME_UBFX32(&FTM_SYNCONF_REG(base), FTM_SYNCONF_SWINVC_SHIFT, FTM_SYNCONF_SWINVC_WIDTH))

/*! @brief Set the SWINVC field to a new value. */
#define FTM_WR_SYNCONF_SWINVC(base, value) (FTM_RMW_SYNCONF(base, FTM_SYNCONF_SWINVC_MASK, FTM_SYNCONF_SWINVC(value)))
#define FTM_BWR_SYNCONF_SWINVC(base, value) (BME_BFI32(&FTM_SYNCONF_REG(base), ((uint32_t)(value) << FTM_SYNCONF_SWINVC_SHIFT), FTM_SYNCONF_SWINVC_SHIFT, FTM_SYNCONF_SWINVC_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SYNCONF, field SWSOC[12] (RW)
 *
 * Software output control synchronization is activated by the software trigger.
 *
 * Values:
 * - 0b0 - The software trigger does not activate the SWOCTRL register
 *     synchronization.
 * - 0b1 - The software trigger activates the SWOCTRL register synchronization.
 */
/*@{*/
/*! @brief Read current value of the FTM_SYNCONF_SWSOC field. */
#define FTM_RD_SYNCONF_SWSOC(base) ((FTM_SYNCONF_REG(base) & FTM_SYNCONF_SWSOC_MASK) >> FTM_SYNCONF_SWSOC_SHIFT)
#define FTM_BRD_SYNCONF_SWSOC(base) (BME_UBFX32(&FTM_SYNCONF_REG(base), FTM_SYNCONF_SWSOC_SHIFT, FTM_SYNCONF_SWSOC_WIDTH))

/*! @brief Set the SWSOC field to a new value. */
#define FTM_WR_SYNCONF_SWSOC(base, value) (FTM_RMW_SYNCONF(base, FTM_SYNCONF_SWSOC_MASK, FTM_SYNCONF_SWSOC(value)))
#define FTM_BWR_SYNCONF_SWSOC(base, value) (BME_BFI32(&FTM_SYNCONF_REG(base), ((uint32_t)(value) << FTM_SYNCONF_SWSOC_SHIFT), FTM_SYNCONF_SWSOC_SHIFT, FTM_SYNCONF_SWSOC_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SYNCONF, field HWRSTCNT[16] (RW)
 *
 * FTM counter synchronization is activated by a hardware trigger.
 *
 * Values:
 * - 0b0 - A hardware trigger does not activate the FTM counter synchronization.
 * - 0b1 - A hardware trigger activates the FTM counter synchronization.
 */
/*@{*/
/*! @brief Read current value of the FTM_SYNCONF_HWRSTCNT field. */
#define FTM_RD_SYNCONF_HWRSTCNT(base) ((FTM_SYNCONF_REG(base) & FTM_SYNCONF_HWRSTCNT_MASK) >> FTM_SYNCONF_HWRSTCNT_SHIFT)
#define FTM_BRD_SYNCONF_HWRSTCNT(base) (BME_UBFX32(&FTM_SYNCONF_REG(base), FTM_SYNCONF_HWRSTCNT_SHIFT, FTM_SYNCONF_HWRSTCNT_WIDTH))

/*! @brief Set the HWRSTCNT field to a new value. */
#define FTM_WR_SYNCONF_HWRSTCNT(base, value) (FTM_RMW_SYNCONF(base, FTM_SYNCONF_HWRSTCNT_MASK, FTM_SYNCONF_HWRSTCNT(value)))
#define FTM_BWR_SYNCONF_HWRSTCNT(base, value) (BME_BFI32(&FTM_SYNCONF_REG(base), ((uint32_t)(value) << FTM_SYNCONF_HWRSTCNT_SHIFT), FTM_SYNCONF_HWRSTCNT_SHIFT, FTM_SYNCONF_HWRSTCNT_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SYNCONF, field HWWRBUF[17] (RW)
 *
 * MOD, CNTIN, and CV registers synchronization is activated by a hardware
 * trigger.
 *
 * Values:
 * - 0b0 - A hardware trigger does not activate MOD, CNTIN, and CV registers
 *     synchronization.
 * - 0b1 - A hardware trigger activates MOD, CNTIN, and CV registers
 *     synchronization.
 */
/*@{*/
/*! @brief Read current value of the FTM_SYNCONF_HWWRBUF field. */
#define FTM_RD_SYNCONF_HWWRBUF(base) ((FTM_SYNCONF_REG(base) & FTM_SYNCONF_HWWRBUF_MASK) >> FTM_SYNCONF_HWWRBUF_SHIFT)
#define FTM_BRD_SYNCONF_HWWRBUF(base) (BME_UBFX32(&FTM_SYNCONF_REG(base), FTM_SYNCONF_HWWRBUF_SHIFT, FTM_SYNCONF_HWWRBUF_WIDTH))

/*! @brief Set the HWWRBUF field to a new value. */
#define FTM_WR_SYNCONF_HWWRBUF(base, value) (FTM_RMW_SYNCONF(base, FTM_SYNCONF_HWWRBUF_MASK, FTM_SYNCONF_HWWRBUF(value)))
#define FTM_BWR_SYNCONF_HWWRBUF(base, value) (BME_BFI32(&FTM_SYNCONF_REG(base), ((uint32_t)(value) << FTM_SYNCONF_HWWRBUF_SHIFT), FTM_SYNCONF_HWWRBUF_SHIFT, FTM_SYNCONF_HWWRBUF_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SYNCONF, field HWOM[18] (RW)
 *
 * Output mask synchronization is activated by a hardware trigger.
 *
 * Values:
 * - 0b0 - A hardware trigger does not activate the OUTMASK register
 *     synchronization.
 * - 0b1 - A hardware trigger activates the OUTMASK register synchronization.
 */
/*@{*/
/*! @brief Read current value of the FTM_SYNCONF_HWOM field. */
#define FTM_RD_SYNCONF_HWOM(base) ((FTM_SYNCONF_REG(base) & FTM_SYNCONF_HWOM_MASK) >> FTM_SYNCONF_HWOM_SHIFT)
#define FTM_BRD_SYNCONF_HWOM(base) (BME_UBFX32(&FTM_SYNCONF_REG(base), FTM_SYNCONF_HWOM_SHIFT, FTM_SYNCONF_HWOM_WIDTH))

/*! @brief Set the HWOM field to a new value. */
#define FTM_WR_SYNCONF_HWOM(base, value) (FTM_RMW_SYNCONF(base, FTM_SYNCONF_HWOM_MASK, FTM_SYNCONF_HWOM(value)))
#define FTM_BWR_SYNCONF_HWOM(base, value) (BME_BFI32(&FTM_SYNCONF_REG(base), ((uint32_t)(value) << FTM_SYNCONF_HWOM_SHIFT), FTM_SYNCONF_HWOM_SHIFT, FTM_SYNCONF_HWOM_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SYNCONF, field HWINVC[19] (RW)
 *
 * Inverting control synchronization is activated by a hardware trigger.
 *
 * Values:
 * - 0b0 - A hardware trigger does not activate the INVCTRL register
 *     synchronization.
 * - 0b1 - A hardware trigger activates the INVCTRL register synchronization.
 */
/*@{*/
/*! @brief Read current value of the FTM_SYNCONF_HWINVC field. */
#define FTM_RD_SYNCONF_HWINVC(base) ((FTM_SYNCONF_REG(base) & FTM_SYNCONF_HWINVC_MASK) >> FTM_SYNCONF_HWINVC_SHIFT)
#define FTM_BRD_SYNCONF_HWINVC(base) (BME_UBFX32(&FTM_SYNCONF_REG(base), FTM_SYNCONF_HWINVC_SHIFT, FTM_SYNCONF_HWINVC_WIDTH))

/*! @brief Set the HWINVC field to a new value. */
#define FTM_WR_SYNCONF_HWINVC(base, value) (FTM_RMW_SYNCONF(base, FTM_SYNCONF_HWINVC_MASK, FTM_SYNCONF_HWINVC(value)))
#define FTM_BWR_SYNCONF_HWINVC(base, value) (BME_BFI32(&FTM_SYNCONF_REG(base), ((uint32_t)(value) << FTM_SYNCONF_HWINVC_SHIFT), FTM_SYNCONF_HWINVC_SHIFT, FTM_SYNCONF_HWINVC_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SYNCONF, field HWSOC[20] (RW)
 *
 * Software output control synchronization is activated by a hardware trigger.
 *
 * Values:
 * - 0b0 - A hardware trigger does not activate the SWOCTRL register
 *     synchronization.
 * - 0b1 - A hardware trigger activates the SWOCTRL register synchronization.
 */
/*@{*/
/*! @brief Read current value of the FTM_SYNCONF_HWSOC field. */
#define FTM_RD_SYNCONF_HWSOC(base) ((FTM_SYNCONF_REG(base) & FTM_SYNCONF_HWSOC_MASK) >> FTM_SYNCONF_HWSOC_SHIFT)
#define FTM_BRD_SYNCONF_HWSOC(base) (BME_UBFX32(&FTM_SYNCONF_REG(base), FTM_SYNCONF_HWSOC_SHIFT, FTM_SYNCONF_HWSOC_WIDTH))

/*! @brief Set the HWSOC field to a new value. */
#define FTM_WR_SYNCONF_HWSOC(base, value) (FTM_RMW_SYNCONF(base, FTM_SYNCONF_HWSOC_MASK, FTM_SYNCONF_HWSOC(value)))
#define FTM_BWR_SYNCONF_HWSOC(base, value) (BME_BFI32(&FTM_SYNCONF_REG(base), ((uint32_t)(value) << FTM_SYNCONF_HWSOC_SHIFT), FTM_SYNCONF_HWSOC_SHIFT, FTM_SYNCONF_HWSOC_WIDTH))
/*@}*/

/*******************************************************************************
 * FTM_INVCTRL - FTM Inverting Control
 ******************************************************************************/

/*!
 * @brief FTM_INVCTRL - FTM Inverting Control (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register controls when the channel (n) output becomes the channel (n+1)
 * output, and channel (n+1) output becomes the channel (n) output. Each INVmEN
 * bit enables the inverting operation for the corresponding pair channels m. This
 * register has a write buffer. The INVmEN bit is updated by the INVCTRL
 * register synchronization.
 */
/*!
 * @name Constants and macros for entire FTM_INVCTRL register
 */
/*@{*/
#define FTM_RD_INVCTRL(base)     (FTM_INVCTRL_REG(base))
#define FTM_WR_INVCTRL(base, value) (FTM_INVCTRL_REG(base) = (value))
#define FTM_RMW_INVCTRL(base, mask, value) (FTM_WR_INVCTRL(base, (FTM_RD_INVCTRL(base) & ~(mask)) | (value)))
#define FTM_SET_INVCTRL(base, value) (BME_OR32(&FTM_INVCTRL_REG(base), (uint32_t)(value)))
#define FTM_CLR_INVCTRL(base, value) (BME_AND32(&FTM_INVCTRL_REG(base), (uint32_t)(~(value))))
#define FTM_TOG_INVCTRL(base, value) (BME_XOR32(&FTM_INVCTRL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTM_INVCTRL bitfields
 */

/*!
 * @name Register FTM_INVCTRL, field INV0EN[0] (RW)
 *
 * Values:
 * - 0b0 - Inverting is disabled.
 * - 0b1 - Inverting is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_INVCTRL_INV0EN field. */
#define FTM_RD_INVCTRL_INV0EN(base) ((FTM_INVCTRL_REG(base) & FTM_INVCTRL_INV0EN_MASK) >> FTM_INVCTRL_INV0EN_SHIFT)
#define FTM_BRD_INVCTRL_INV0EN(base) (BME_UBFX32(&FTM_INVCTRL_REG(base), FTM_INVCTRL_INV0EN_SHIFT, FTM_INVCTRL_INV0EN_WIDTH))

/*! @brief Set the INV0EN field to a new value. */
#define FTM_WR_INVCTRL_INV0EN(base, value) (FTM_RMW_INVCTRL(base, FTM_INVCTRL_INV0EN_MASK, FTM_INVCTRL_INV0EN(value)))
#define FTM_BWR_INVCTRL_INV0EN(base, value) (BME_BFI32(&FTM_INVCTRL_REG(base), ((uint32_t)(value) << FTM_INVCTRL_INV0EN_SHIFT), FTM_INVCTRL_INV0EN_SHIFT, FTM_INVCTRL_INV0EN_WIDTH))
/*@}*/

/*!
 * @name Register FTM_INVCTRL, field INV1EN[1] (RW)
 *
 * Values:
 * - 0b0 - Inverting is disabled.
 * - 0b1 - Inverting is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_INVCTRL_INV1EN field. */
#define FTM_RD_INVCTRL_INV1EN(base) ((FTM_INVCTRL_REG(base) & FTM_INVCTRL_INV1EN_MASK) >> FTM_INVCTRL_INV1EN_SHIFT)
#define FTM_BRD_INVCTRL_INV1EN(base) (BME_UBFX32(&FTM_INVCTRL_REG(base), FTM_INVCTRL_INV1EN_SHIFT, FTM_INVCTRL_INV1EN_WIDTH))

/*! @brief Set the INV1EN field to a new value. */
#define FTM_WR_INVCTRL_INV1EN(base, value) (FTM_RMW_INVCTRL(base, FTM_INVCTRL_INV1EN_MASK, FTM_INVCTRL_INV1EN(value)))
#define FTM_BWR_INVCTRL_INV1EN(base, value) (BME_BFI32(&FTM_INVCTRL_REG(base), ((uint32_t)(value) << FTM_INVCTRL_INV1EN_SHIFT), FTM_INVCTRL_INV1EN_SHIFT, FTM_INVCTRL_INV1EN_WIDTH))
/*@}*/

/*!
 * @name Register FTM_INVCTRL, field INV2EN[2] (RW)
 *
 * Values:
 * - 0b0 - Inverting is disabled.
 * - 0b1 - Inverting is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_INVCTRL_INV2EN field. */
#define FTM_RD_INVCTRL_INV2EN(base) ((FTM_INVCTRL_REG(base) & FTM_INVCTRL_INV2EN_MASK) >> FTM_INVCTRL_INV2EN_SHIFT)
#define FTM_BRD_INVCTRL_INV2EN(base) (BME_UBFX32(&FTM_INVCTRL_REG(base), FTM_INVCTRL_INV2EN_SHIFT, FTM_INVCTRL_INV2EN_WIDTH))

/*! @brief Set the INV2EN field to a new value. */
#define FTM_WR_INVCTRL_INV2EN(base, value) (FTM_RMW_INVCTRL(base, FTM_INVCTRL_INV2EN_MASK, FTM_INVCTRL_INV2EN(value)))
#define FTM_BWR_INVCTRL_INV2EN(base, value) (BME_BFI32(&FTM_INVCTRL_REG(base), ((uint32_t)(value) << FTM_INVCTRL_INV2EN_SHIFT), FTM_INVCTRL_INV2EN_SHIFT, FTM_INVCTRL_INV2EN_WIDTH))
/*@}*/

/*!
 * @name Register FTM_INVCTRL, field INV3EN[3] (RW)
 *
 * Values:
 * - 0b0 - Inverting is disabled.
 * - 0b1 - Inverting is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_INVCTRL_INV3EN field. */
#define FTM_RD_INVCTRL_INV3EN(base) ((FTM_INVCTRL_REG(base) & FTM_INVCTRL_INV3EN_MASK) >> FTM_INVCTRL_INV3EN_SHIFT)
#define FTM_BRD_INVCTRL_INV3EN(base) (BME_UBFX32(&FTM_INVCTRL_REG(base), FTM_INVCTRL_INV3EN_SHIFT, FTM_INVCTRL_INV3EN_WIDTH))

/*! @brief Set the INV3EN field to a new value. */
#define FTM_WR_INVCTRL_INV3EN(base, value) (FTM_RMW_INVCTRL(base, FTM_INVCTRL_INV3EN_MASK, FTM_INVCTRL_INV3EN(value)))
#define FTM_BWR_INVCTRL_INV3EN(base, value) (BME_BFI32(&FTM_INVCTRL_REG(base), ((uint32_t)(value) << FTM_INVCTRL_INV3EN_SHIFT), FTM_INVCTRL_INV3EN_SHIFT, FTM_INVCTRL_INV3EN_WIDTH))
/*@}*/

/*******************************************************************************
 * FTM_SWOCTRL - FTM Software Output Control
 ******************************************************************************/

/*!
 * @brief FTM_SWOCTRL - FTM Software Output Control (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register enables software control of channel (n) output and defines the
 * value forced to the channel (n) output: The CHnOC bits enable the control of
 * the corresponding channel (n) output by software. The CHnOCV bits select the
 * value that is forced at the corresponding channel (n) output. This register has
 * a write buffer. The fields are updated by the SWOCTRL register synchronization.
 */
/*!
 * @name Constants and macros for entire FTM_SWOCTRL register
 */
/*@{*/
#define FTM_RD_SWOCTRL(base)     (FTM_SWOCTRL_REG(base))
#define FTM_WR_SWOCTRL(base, value) (FTM_SWOCTRL_REG(base) = (value))
#define FTM_RMW_SWOCTRL(base, mask, value) (FTM_WR_SWOCTRL(base, (FTM_RD_SWOCTRL(base) & ~(mask)) | (value)))
#define FTM_SET_SWOCTRL(base, value) (BME_OR32(&FTM_SWOCTRL_REG(base), (uint32_t)(value)))
#define FTM_CLR_SWOCTRL(base, value) (BME_AND32(&FTM_SWOCTRL_REG(base), (uint32_t)(~(value))))
#define FTM_TOG_SWOCTRL(base, value) (BME_XOR32(&FTM_SWOCTRL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTM_SWOCTRL bitfields
 */

/*!
 * @name Register FTM_SWOCTRL, field CH0OC[0] (RW)
 *
 * Values:
 * - 0b0 - The channel output is not affected by software output control.
 * - 0b1 - The channel output is affected by software output control.
 */
/*@{*/
/*! @brief Read current value of the FTM_SWOCTRL_CH0OC field. */
#define FTM_RD_SWOCTRL_CH0OC(base) ((FTM_SWOCTRL_REG(base) & FTM_SWOCTRL_CH0OC_MASK) >> FTM_SWOCTRL_CH0OC_SHIFT)
#define FTM_BRD_SWOCTRL_CH0OC(base) (BME_UBFX32(&FTM_SWOCTRL_REG(base), FTM_SWOCTRL_CH0OC_SHIFT, FTM_SWOCTRL_CH0OC_WIDTH))

/*! @brief Set the CH0OC field to a new value. */
#define FTM_WR_SWOCTRL_CH0OC(base, value) (FTM_RMW_SWOCTRL(base, FTM_SWOCTRL_CH0OC_MASK, FTM_SWOCTRL_CH0OC(value)))
#define FTM_BWR_SWOCTRL_CH0OC(base, value) (BME_BFI32(&FTM_SWOCTRL_REG(base), ((uint32_t)(value) << FTM_SWOCTRL_CH0OC_SHIFT), FTM_SWOCTRL_CH0OC_SHIFT, FTM_SWOCTRL_CH0OC_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SWOCTRL, field CH1OC[1] (RW)
 *
 * Values:
 * - 0b0 - The channel output is not affected by software output control.
 * - 0b1 - The channel output is affected by software output control.
 */
/*@{*/
/*! @brief Read current value of the FTM_SWOCTRL_CH1OC field. */
#define FTM_RD_SWOCTRL_CH1OC(base) ((FTM_SWOCTRL_REG(base) & FTM_SWOCTRL_CH1OC_MASK) >> FTM_SWOCTRL_CH1OC_SHIFT)
#define FTM_BRD_SWOCTRL_CH1OC(base) (BME_UBFX32(&FTM_SWOCTRL_REG(base), FTM_SWOCTRL_CH1OC_SHIFT, FTM_SWOCTRL_CH1OC_WIDTH))

/*! @brief Set the CH1OC field to a new value. */
#define FTM_WR_SWOCTRL_CH1OC(base, value) (FTM_RMW_SWOCTRL(base, FTM_SWOCTRL_CH1OC_MASK, FTM_SWOCTRL_CH1OC(value)))
#define FTM_BWR_SWOCTRL_CH1OC(base, value) (BME_BFI32(&FTM_SWOCTRL_REG(base), ((uint32_t)(value) << FTM_SWOCTRL_CH1OC_SHIFT), FTM_SWOCTRL_CH1OC_SHIFT, FTM_SWOCTRL_CH1OC_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SWOCTRL, field CH2OC[2] (RW)
 *
 * Values:
 * - 0b0 - The channel output is not affected by software output control.
 * - 0b1 - The channel output is affected by software output control.
 */
/*@{*/
/*! @brief Read current value of the FTM_SWOCTRL_CH2OC field. */
#define FTM_RD_SWOCTRL_CH2OC(base) ((FTM_SWOCTRL_REG(base) & FTM_SWOCTRL_CH2OC_MASK) >> FTM_SWOCTRL_CH2OC_SHIFT)
#define FTM_BRD_SWOCTRL_CH2OC(base) (BME_UBFX32(&FTM_SWOCTRL_REG(base), FTM_SWOCTRL_CH2OC_SHIFT, FTM_SWOCTRL_CH2OC_WIDTH))

/*! @brief Set the CH2OC field to a new value. */
#define FTM_WR_SWOCTRL_CH2OC(base, value) (FTM_RMW_SWOCTRL(base, FTM_SWOCTRL_CH2OC_MASK, FTM_SWOCTRL_CH2OC(value)))
#define FTM_BWR_SWOCTRL_CH2OC(base, value) (BME_BFI32(&FTM_SWOCTRL_REG(base), ((uint32_t)(value) << FTM_SWOCTRL_CH2OC_SHIFT), FTM_SWOCTRL_CH2OC_SHIFT, FTM_SWOCTRL_CH2OC_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SWOCTRL, field CH3OC[3] (RW)
 *
 * Values:
 * - 0b0 - The channel output is not affected by software output control.
 * - 0b1 - The channel output is affected by software output control.
 */
/*@{*/
/*! @brief Read current value of the FTM_SWOCTRL_CH3OC field. */
#define FTM_RD_SWOCTRL_CH3OC(base) ((FTM_SWOCTRL_REG(base) & FTM_SWOCTRL_CH3OC_MASK) >> FTM_SWOCTRL_CH3OC_SHIFT)
#define FTM_BRD_SWOCTRL_CH3OC(base) (BME_UBFX32(&FTM_SWOCTRL_REG(base), FTM_SWOCTRL_CH3OC_SHIFT, FTM_SWOCTRL_CH3OC_WIDTH))

/*! @brief Set the CH3OC field to a new value. */
#define FTM_WR_SWOCTRL_CH3OC(base, value) (FTM_RMW_SWOCTRL(base, FTM_SWOCTRL_CH3OC_MASK, FTM_SWOCTRL_CH3OC(value)))
#define FTM_BWR_SWOCTRL_CH3OC(base, value) (BME_BFI32(&FTM_SWOCTRL_REG(base), ((uint32_t)(value) << FTM_SWOCTRL_CH3OC_SHIFT), FTM_SWOCTRL_CH3OC_SHIFT, FTM_SWOCTRL_CH3OC_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SWOCTRL, field CH4OC[4] (RW)
 *
 * Values:
 * - 0b0 - The channel output is not affected by software output control.
 * - 0b1 - The channel output is affected by software output control.
 */
/*@{*/
/*! @brief Read current value of the FTM_SWOCTRL_CH4OC field. */
#define FTM_RD_SWOCTRL_CH4OC(base) ((FTM_SWOCTRL_REG(base) & FTM_SWOCTRL_CH4OC_MASK) >> FTM_SWOCTRL_CH4OC_SHIFT)
#define FTM_BRD_SWOCTRL_CH4OC(base) (BME_UBFX32(&FTM_SWOCTRL_REG(base), FTM_SWOCTRL_CH4OC_SHIFT, FTM_SWOCTRL_CH4OC_WIDTH))

/*! @brief Set the CH4OC field to a new value. */
#define FTM_WR_SWOCTRL_CH4OC(base, value) (FTM_RMW_SWOCTRL(base, FTM_SWOCTRL_CH4OC_MASK, FTM_SWOCTRL_CH4OC(value)))
#define FTM_BWR_SWOCTRL_CH4OC(base, value) (BME_BFI32(&FTM_SWOCTRL_REG(base), ((uint32_t)(value) << FTM_SWOCTRL_CH4OC_SHIFT), FTM_SWOCTRL_CH4OC_SHIFT, FTM_SWOCTRL_CH4OC_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SWOCTRL, field CH5OC[5] (RW)
 *
 * Values:
 * - 0b0 - The channel output is not affected by software output control.
 * - 0b1 - The channel output is affected by software output control.
 */
/*@{*/
/*! @brief Read current value of the FTM_SWOCTRL_CH5OC field. */
#define FTM_RD_SWOCTRL_CH5OC(base) ((FTM_SWOCTRL_REG(base) & FTM_SWOCTRL_CH5OC_MASK) >> FTM_SWOCTRL_CH5OC_SHIFT)
#define FTM_BRD_SWOCTRL_CH5OC(base) (BME_UBFX32(&FTM_SWOCTRL_REG(base), FTM_SWOCTRL_CH5OC_SHIFT, FTM_SWOCTRL_CH5OC_WIDTH))

/*! @brief Set the CH5OC field to a new value. */
#define FTM_WR_SWOCTRL_CH5OC(base, value) (FTM_RMW_SWOCTRL(base, FTM_SWOCTRL_CH5OC_MASK, FTM_SWOCTRL_CH5OC(value)))
#define FTM_BWR_SWOCTRL_CH5OC(base, value) (BME_BFI32(&FTM_SWOCTRL_REG(base), ((uint32_t)(value) << FTM_SWOCTRL_CH5OC_SHIFT), FTM_SWOCTRL_CH5OC_SHIFT, FTM_SWOCTRL_CH5OC_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SWOCTRL, field CH6OC[6] (RW)
 *
 * Values:
 * - 0b0 - The channel output is not affected by software output control.
 * - 0b1 - The channel output is affected by software output control.
 */
/*@{*/
/*! @brief Read current value of the FTM_SWOCTRL_CH6OC field. */
#define FTM_RD_SWOCTRL_CH6OC(base) ((FTM_SWOCTRL_REG(base) & FTM_SWOCTRL_CH6OC_MASK) >> FTM_SWOCTRL_CH6OC_SHIFT)
#define FTM_BRD_SWOCTRL_CH6OC(base) (BME_UBFX32(&FTM_SWOCTRL_REG(base), FTM_SWOCTRL_CH6OC_SHIFT, FTM_SWOCTRL_CH6OC_WIDTH))

/*! @brief Set the CH6OC field to a new value. */
#define FTM_WR_SWOCTRL_CH6OC(base, value) (FTM_RMW_SWOCTRL(base, FTM_SWOCTRL_CH6OC_MASK, FTM_SWOCTRL_CH6OC(value)))
#define FTM_BWR_SWOCTRL_CH6OC(base, value) (BME_BFI32(&FTM_SWOCTRL_REG(base), ((uint32_t)(value) << FTM_SWOCTRL_CH6OC_SHIFT), FTM_SWOCTRL_CH6OC_SHIFT, FTM_SWOCTRL_CH6OC_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SWOCTRL, field CH7OC[7] (RW)
 *
 * Values:
 * - 0b0 - The channel output is not affected by software output control.
 * - 0b1 - The channel output is affected by software output control.
 */
/*@{*/
/*! @brief Read current value of the FTM_SWOCTRL_CH7OC field. */
#define FTM_RD_SWOCTRL_CH7OC(base) ((FTM_SWOCTRL_REG(base) & FTM_SWOCTRL_CH7OC_MASK) >> FTM_SWOCTRL_CH7OC_SHIFT)
#define FTM_BRD_SWOCTRL_CH7OC(base) (BME_UBFX32(&FTM_SWOCTRL_REG(base), FTM_SWOCTRL_CH7OC_SHIFT, FTM_SWOCTRL_CH7OC_WIDTH))

/*! @brief Set the CH7OC field to a new value. */
#define FTM_WR_SWOCTRL_CH7OC(base, value) (FTM_RMW_SWOCTRL(base, FTM_SWOCTRL_CH7OC_MASK, FTM_SWOCTRL_CH7OC(value)))
#define FTM_BWR_SWOCTRL_CH7OC(base, value) (BME_BFI32(&FTM_SWOCTRL_REG(base), ((uint32_t)(value) << FTM_SWOCTRL_CH7OC_SHIFT), FTM_SWOCTRL_CH7OC_SHIFT, FTM_SWOCTRL_CH7OC_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SWOCTRL, field CH0OCV[8] (RW)
 *
 * Values:
 * - 0b0 - The software output control forces 0 to the channel output.
 * - 0b1 - The software output control forces 1 to the channel output.
 */
/*@{*/
/*! @brief Read current value of the FTM_SWOCTRL_CH0OCV field. */
#define FTM_RD_SWOCTRL_CH0OCV(base) ((FTM_SWOCTRL_REG(base) & FTM_SWOCTRL_CH0OCV_MASK) >> FTM_SWOCTRL_CH0OCV_SHIFT)
#define FTM_BRD_SWOCTRL_CH0OCV(base) (BME_UBFX32(&FTM_SWOCTRL_REG(base), FTM_SWOCTRL_CH0OCV_SHIFT, FTM_SWOCTRL_CH0OCV_WIDTH))

/*! @brief Set the CH0OCV field to a new value. */
#define FTM_WR_SWOCTRL_CH0OCV(base, value) (FTM_RMW_SWOCTRL(base, FTM_SWOCTRL_CH0OCV_MASK, FTM_SWOCTRL_CH0OCV(value)))
#define FTM_BWR_SWOCTRL_CH0OCV(base, value) (BME_BFI32(&FTM_SWOCTRL_REG(base), ((uint32_t)(value) << FTM_SWOCTRL_CH0OCV_SHIFT), FTM_SWOCTRL_CH0OCV_SHIFT, FTM_SWOCTRL_CH0OCV_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SWOCTRL, field CH1OCV[9] (RW)
 *
 * Values:
 * - 0b0 - The software output control forces 0 to the channel output.
 * - 0b1 - The software output control forces 1 to the channel output.
 */
/*@{*/
/*! @brief Read current value of the FTM_SWOCTRL_CH1OCV field. */
#define FTM_RD_SWOCTRL_CH1OCV(base) ((FTM_SWOCTRL_REG(base) & FTM_SWOCTRL_CH1OCV_MASK) >> FTM_SWOCTRL_CH1OCV_SHIFT)
#define FTM_BRD_SWOCTRL_CH1OCV(base) (BME_UBFX32(&FTM_SWOCTRL_REG(base), FTM_SWOCTRL_CH1OCV_SHIFT, FTM_SWOCTRL_CH1OCV_WIDTH))

/*! @brief Set the CH1OCV field to a new value. */
#define FTM_WR_SWOCTRL_CH1OCV(base, value) (FTM_RMW_SWOCTRL(base, FTM_SWOCTRL_CH1OCV_MASK, FTM_SWOCTRL_CH1OCV(value)))
#define FTM_BWR_SWOCTRL_CH1OCV(base, value) (BME_BFI32(&FTM_SWOCTRL_REG(base), ((uint32_t)(value) << FTM_SWOCTRL_CH1OCV_SHIFT), FTM_SWOCTRL_CH1OCV_SHIFT, FTM_SWOCTRL_CH1OCV_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SWOCTRL, field CH2OCV[10] (RW)
 *
 * Values:
 * - 0b0 - The software output control forces 0 to the channel output.
 * - 0b1 - The software output control forces 1 to the channel output.
 */
/*@{*/
/*! @brief Read current value of the FTM_SWOCTRL_CH2OCV field. */
#define FTM_RD_SWOCTRL_CH2OCV(base) ((FTM_SWOCTRL_REG(base) & FTM_SWOCTRL_CH2OCV_MASK) >> FTM_SWOCTRL_CH2OCV_SHIFT)
#define FTM_BRD_SWOCTRL_CH2OCV(base) (BME_UBFX32(&FTM_SWOCTRL_REG(base), FTM_SWOCTRL_CH2OCV_SHIFT, FTM_SWOCTRL_CH2OCV_WIDTH))

/*! @brief Set the CH2OCV field to a new value. */
#define FTM_WR_SWOCTRL_CH2OCV(base, value) (FTM_RMW_SWOCTRL(base, FTM_SWOCTRL_CH2OCV_MASK, FTM_SWOCTRL_CH2OCV(value)))
#define FTM_BWR_SWOCTRL_CH2OCV(base, value) (BME_BFI32(&FTM_SWOCTRL_REG(base), ((uint32_t)(value) << FTM_SWOCTRL_CH2OCV_SHIFT), FTM_SWOCTRL_CH2OCV_SHIFT, FTM_SWOCTRL_CH2OCV_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SWOCTRL, field CH3OCV[11] (RW)
 *
 * Values:
 * - 0b0 - The software output control forces 0 to the channel output.
 * - 0b1 - The software output control forces 1 to the channel output.
 */
/*@{*/
/*! @brief Read current value of the FTM_SWOCTRL_CH3OCV field. */
#define FTM_RD_SWOCTRL_CH3OCV(base) ((FTM_SWOCTRL_REG(base) & FTM_SWOCTRL_CH3OCV_MASK) >> FTM_SWOCTRL_CH3OCV_SHIFT)
#define FTM_BRD_SWOCTRL_CH3OCV(base) (BME_UBFX32(&FTM_SWOCTRL_REG(base), FTM_SWOCTRL_CH3OCV_SHIFT, FTM_SWOCTRL_CH3OCV_WIDTH))

/*! @brief Set the CH3OCV field to a new value. */
#define FTM_WR_SWOCTRL_CH3OCV(base, value) (FTM_RMW_SWOCTRL(base, FTM_SWOCTRL_CH3OCV_MASK, FTM_SWOCTRL_CH3OCV(value)))
#define FTM_BWR_SWOCTRL_CH3OCV(base, value) (BME_BFI32(&FTM_SWOCTRL_REG(base), ((uint32_t)(value) << FTM_SWOCTRL_CH3OCV_SHIFT), FTM_SWOCTRL_CH3OCV_SHIFT, FTM_SWOCTRL_CH3OCV_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SWOCTRL, field CH4OCV[12] (RW)
 *
 * Values:
 * - 0b0 - The software output control forces 0 to the channel output.
 * - 0b1 - The software output control forces 1 to the channel output.
 */
/*@{*/
/*! @brief Read current value of the FTM_SWOCTRL_CH4OCV field. */
#define FTM_RD_SWOCTRL_CH4OCV(base) ((FTM_SWOCTRL_REG(base) & FTM_SWOCTRL_CH4OCV_MASK) >> FTM_SWOCTRL_CH4OCV_SHIFT)
#define FTM_BRD_SWOCTRL_CH4OCV(base) (BME_UBFX32(&FTM_SWOCTRL_REG(base), FTM_SWOCTRL_CH4OCV_SHIFT, FTM_SWOCTRL_CH4OCV_WIDTH))

/*! @brief Set the CH4OCV field to a new value. */
#define FTM_WR_SWOCTRL_CH4OCV(base, value) (FTM_RMW_SWOCTRL(base, FTM_SWOCTRL_CH4OCV_MASK, FTM_SWOCTRL_CH4OCV(value)))
#define FTM_BWR_SWOCTRL_CH4OCV(base, value) (BME_BFI32(&FTM_SWOCTRL_REG(base), ((uint32_t)(value) << FTM_SWOCTRL_CH4OCV_SHIFT), FTM_SWOCTRL_CH4OCV_SHIFT, FTM_SWOCTRL_CH4OCV_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SWOCTRL, field CH5OCV[13] (RW)
 *
 * Values:
 * - 0b0 - The software output control forces 0 to the channel output.
 * - 0b1 - The software output control forces 1 to the channel output.
 */
/*@{*/
/*! @brief Read current value of the FTM_SWOCTRL_CH5OCV field. */
#define FTM_RD_SWOCTRL_CH5OCV(base) ((FTM_SWOCTRL_REG(base) & FTM_SWOCTRL_CH5OCV_MASK) >> FTM_SWOCTRL_CH5OCV_SHIFT)
#define FTM_BRD_SWOCTRL_CH5OCV(base) (BME_UBFX32(&FTM_SWOCTRL_REG(base), FTM_SWOCTRL_CH5OCV_SHIFT, FTM_SWOCTRL_CH5OCV_WIDTH))

/*! @brief Set the CH5OCV field to a new value. */
#define FTM_WR_SWOCTRL_CH5OCV(base, value) (FTM_RMW_SWOCTRL(base, FTM_SWOCTRL_CH5OCV_MASK, FTM_SWOCTRL_CH5OCV(value)))
#define FTM_BWR_SWOCTRL_CH5OCV(base, value) (BME_BFI32(&FTM_SWOCTRL_REG(base), ((uint32_t)(value) << FTM_SWOCTRL_CH5OCV_SHIFT), FTM_SWOCTRL_CH5OCV_SHIFT, FTM_SWOCTRL_CH5OCV_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SWOCTRL, field CH6OCV[14] (RW)
 *
 * Values:
 * - 0b0 - The software output control forces 0 to the channel output.
 * - 0b1 - The software output control forces 1 to the channel output.
 */
/*@{*/
/*! @brief Read current value of the FTM_SWOCTRL_CH6OCV field. */
#define FTM_RD_SWOCTRL_CH6OCV(base) ((FTM_SWOCTRL_REG(base) & FTM_SWOCTRL_CH6OCV_MASK) >> FTM_SWOCTRL_CH6OCV_SHIFT)
#define FTM_BRD_SWOCTRL_CH6OCV(base) (BME_UBFX32(&FTM_SWOCTRL_REG(base), FTM_SWOCTRL_CH6OCV_SHIFT, FTM_SWOCTRL_CH6OCV_WIDTH))

/*! @brief Set the CH6OCV field to a new value. */
#define FTM_WR_SWOCTRL_CH6OCV(base, value) (FTM_RMW_SWOCTRL(base, FTM_SWOCTRL_CH6OCV_MASK, FTM_SWOCTRL_CH6OCV(value)))
#define FTM_BWR_SWOCTRL_CH6OCV(base, value) (BME_BFI32(&FTM_SWOCTRL_REG(base), ((uint32_t)(value) << FTM_SWOCTRL_CH6OCV_SHIFT), FTM_SWOCTRL_CH6OCV_SHIFT, FTM_SWOCTRL_CH6OCV_WIDTH))
/*@}*/

/*!
 * @name Register FTM_SWOCTRL, field CH7OCV[15] (RW)
 *
 * Values:
 * - 0b0 - The software output control forces 0 to the channel output.
 * - 0b1 - The software output control forces 1 to the channel output.
 */
/*@{*/
/*! @brief Read current value of the FTM_SWOCTRL_CH7OCV field. */
#define FTM_RD_SWOCTRL_CH7OCV(base) ((FTM_SWOCTRL_REG(base) & FTM_SWOCTRL_CH7OCV_MASK) >> FTM_SWOCTRL_CH7OCV_SHIFT)
#define FTM_BRD_SWOCTRL_CH7OCV(base) (BME_UBFX32(&FTM_SWOCTRL_REG(base), FTM_SWOCTRL_CH7OCV_SHIFT, FTM_SWOCTRL_CH7OCV_WIDTH))

/*! @brief Set the CH7OCV field to a new value. */
#define FTM_WR_SWOCTRL_CH7OCV(base, value) (FTM_RMW_SWOCTRL(base, FTM_SWOCTRL_CH7OCV_MASK, FTM_SWOCTRL_CH7OCV(value)))
#define FTM_BWR_SWOCTRL_CH7OCV(base, value) (BME_BFI32(&FTM_SWOCTRL_REG(base), ((uint32_t)(value) << FTM_SWOCTRL_CH7OCV_SHIFT), FTM_SWOCTRL_CH7OCV_SHIFT, FTM_SWOCTRL_CH7OCV_WIDTH))
/*@}*/

/*******************************************************************************
 * FTM_PWMLOAD - FTM PWM Load
 ******************************************************************************/

/*!
 * @brief FTM_PWMLOAD - FTM PWM Load (RW)
 *
 * Reset value: 0x00000000U
 *
 * Enables the loading of the MOD, CNTIN, C(n)V, and C(n+1)V registers with the
 * values of their write buffers when the FTM counter changes from the MOD
 * register value to its next value or when a channel (j) match occurs. A match occurs
 * for the channel (j) when FTM counter = C(j)V.
 */
/*!
 * @name Constants and macros for entire FTM_PWMLOAD register
 */
/*@{*/
#define FTM_RD_PWMLOAD(base)     (FTM_PWMLOAD_REG(base))
#define FTM_WR_PWMLOAD(base, value) (FTM_PWMLOAD_REG(base) = (value))
#define FTM_RMW_PWMLOAD(base, mask, value) (FTM_WR_PWMLOAD(base, (FTM_RD_PWMLOAD(base) & ~(mask)) | (value)))
#define FTM_SET_PWMLOAD(base, value) (BME_OR32(&FTM_PWMLOAD_REG(base), (uint32_t)(value)))
#define FTM_CLR_PWMLOAD(base, value) (BME_AND32(&FTM_PWMLOAD_REG(base), (uint32_t)(~(value))))
#define FTM_TOG_PWMLOAD(base, value) (BME_XOR32(&FTM_PWMLOAD_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual FTM_PWMLOAD bitfields
 */

/*!
 * @name Register FTM_PWMLOAD, field CH0SEL[0] (RW)
 *
 * Values:
 * - 0b0 - Do not include the channel in the matching process.
 * - 0b1 - Include the channel in the matching process.
 */
/*@{*/
/*! @brief Read current value of the FTM_PWMLOAD_CH0SEL field. */
#define FTM_RD_PWMLOAD_CH0SEL(base) ((FTM_PWMLOAD_REG(base) & FTM_PWMLOAD_CH0SEL_MASK) >> FTM_PWMLOAD_CH0SEL_SHIFT)
#define FTM_BRD_PWMLOAD_CH0SEL(base) (BME_UBFX32(&FTM_PWMLOAD_REG(base), FTM_PWMLOAD_CH0SEL_SHIFT, FTM_PWMLOAD_CH0SEL_WIDTH))

/*! @brief Set the CH0SEL field to a new value. */
#define FTM_WR_PWMLOAD_CH0SEL(base, value) (FTM_RMW_PWMLOAD(base, FTM_PWMLOAD_CH0SEL_MASK, FTM_PWMLOAD_CH0SEL(value)))
#define FTM_BWR_PWMLOAD_CH0SEL(base, value) (BME_BFI32(&FTM_PWMLOAD_REG(base), ((uint32_t)(value) << FTM_PWMLOAD_CH0SEL_SHIFT), FTM_PWMLOAD_CH0SEL_SHIFT, FTM_PWMLOAD_CH0SEL_WIDTH))
/*@}*/

/*!
 * @name Register FTM_PWMLOAD, field CH1SEL[1] (RW)
 *
 * Values:
 * - 0b0 - Do not include the channel in the matching process.
 * - 0b1 - Include the channel in the matching process.
 */
/*@{*/
/*! @brief Read current value of the FTM_PWMLOAD_CH1SEL field. */
#define FTM_RD_PWMLOAD_CH1SEL(base) ((FTM_PWMLOAD_REG(base) & FTM_PWMLOAD_CH1SEL_MASK) >> FTM_PWMLOAD_CH1SEL_SHIFT)
#define FTM_BRD_PWMLOAD_CH1SEL(base) (BME_UBFX32(&FTM_PWMLOAD_REG(base), FTM_PWMLOAD_CH1SEL_SHIFT, FTM_PWMLOAD_CH1SEL_WIDTH))

/*! @brief Set the CH1SEL field to a new value. */
#define FTM_WR_PWMLOAD_CH1SEL(base, value) (FTM_RMW_PWMLOAD(base, FTM_PWMLOAD_CH1SEL_MASK, FTM_PWMLOAD_CH1SEL(value)))
#define FTM_BWR_PWMLOAD_CH1SEL(base, value) (BME_BFI32(&FTM_PWMLOAD_REG(base), ((uint32_t)(value) << FTM_PWMLOAD_CH1SEL_SHIFT), FTM_PWMLOAD_CH1SEL_SHIFT, FTM_PWMLOAD_CH1SEL_WIDTH))
/*@}*/

/*!
 * @name Register FTM_PWMLOAD, field CH2SEL[2] (RW)
 *
 * Values:
 * - 0b0 - Do not include the channel in the matching process.
 * - 0b1 - Include the channel in the matching process.
 */
/*@{*/
/*! @brief Read current value of the FTM_PWMLOAD_CH2SEL field. */
#define FTM_RD_PWMLOAD_CH2SEL(base) ((FTM_PWMLOAD_REG(base) & FTM_PWMLOAD_CH2SEL_MASK) >> FTM_PWMLOAD_CH2SEL_SHIFT)
#define FTM_BRD_PWMLOAD_CH2SEL(base) (BME_UBFX32(&FTM_PWMLOAD_REG(base), FTM_PWMLOAD_CH2SEL_SHIFT, FTM_PWMLOAD_CH2SEL_WIDTH))

/*! @brief Set the CH2SEL field to a new value. */
#define FTM_WR_PWMLOAD_CH2SEL(base, value) (FTM_RMW_PWMLOAD(base, FTM_PWMLOAD_CH2SEL_MASK, FTM_PWMLOAD_CH2SEL(value)))
#define FTM_BWR_PWMLOAD_CH2SEL(base, value) (BME_BFI32(&FTM_PWMLOAD_REG(base), ((uint32_t)(value) << FTM_PWMLOAD_CH2SEL_SHIFT), FTM_PWMLOAD_CH2SEL_SHIFT, FTM_PWMLOAD_CH2SEL_WIDTH))
/*@}*/

/*!
 * @name Register FTM_PWMLOAD, field CH3SEL[3] (RW)
 *
 * Values:
 * - 0b0 - Do not include the channel in the matching process.
 * - 0b1 - Include the channel in the matching process.
 */
/*@{*/
/*! @brief Read current value of the FTM_PWMLOAD_CH3SEL field. */
#define FTM_RD_PWMLOAD_CH3SEL(base) ((FTM_PWMLOAD_REG(base) & FTM_PWMLOAD_CH3SEL_MASK) >> FTM_PWMLOAD_CH3SEL_SHIFT)
#define FTM_BRD_PWMLOAD_CH3SEL(base) (BME_UBFX32(&FTM_PWMLOAD_REG(base), FTM_PWMLOAD_CH3SEL_SHIFT, FTM_PWMLOAD_CH3SEL_WIDTH))

/*! @brief Set the CH3SEL field to a new value. */
#define FTM_WR_PWMLOAD_CH3SEL(base, value) (FTM_RMW_PWMLOAD(base, FTM_PWMLOAD_CH3SEL_MASK, FTM_PWMLOAD_CH3SEL(value)))
#define FTM_BWR_PWMLOAD_CH3SEL(base, value) (BME_BFI32(&FTM_PWMLOAD_REG(base), ((uint32_t)(value) << FTM_PWMLOAD_CH3SEL_SHIFT), FTM_PWMLOAD_CH3SEL_SHIFT, FTM_PWMLOAD_CH3SEL_WIDTH))
/*@}*/

/*!
 * @name Register FTM_PWMLOAD, field CH4SEL[4] (RW)
 *
 * Values:
 * - 0b0 - Do not include the channel in the matching process.
 * - 0b1 - Include the channel in the matching process.
 */
/*@{*/
/*! @brief Read current value of the FTM_PWMLOAD_CH4SEL field. */
#define FTM_RD_PWMLOAD_CH4SEL(base) ((FTM_PWMLOAD_REG(base) & FTM_PWMLOAD_CH4SEL_MASK) >> FTM_PWMLOAD_CH4SEL_SHIFT)
#define FTM_BRD_PWMLOAD_CH4SEL(base) (BME_UBFX32(&FTM_PWMLOAD_REG(base), FTM_PWMLOAD_CH4SEL_SHIFT, FTM_PWMLOAD_CH4SEL_WIDTH))

/*! @brief Set the CH4SEL field to a new value. */
#define FTM_WR_PWMLOAD_CH4SEL(base, value) (FTM_RMW_PWMLOAD(base, FTM_PWMLOAD_CH4SEL_MASK, FTM_PWMLOAD_CH4SEL(value)))
#define FTM_BWR_PWMLOAD_CH4SEL(base, value) (BME_BFI32(&FTM_PWMLOAD_REG(base), ((uint32_t)(value) << FTM_PWMLOAD_CH4SEL_SHIFT), FTM_PWMLOAD_CH4SEL_SHIFT, FTM_PWMLOAD_CH4SEL_WIDTH))
/*@}*/

/*!
 * @name Register FTM_PWMLOAD, field CH5SEL[5] (RW)
 *
 * Values:
 * - 0b0 - Do not include the channel in the matching process.
 * - 0b1 - Include the channel in the matching process.
 */
/*@{*/
/*! @brief Read current value of the FTM_PWMLOAD_CH5SEL field. */
#define FTM_RD_PWMLOAD_CH5SEL(base) ((FTM_PWMLOAD_REG(base) & FTM_PWMLOAD_CH5SEL_MASK) >> FTM_PWMLOAD_CH5SEL_SHIFT)
#define FTM_BRD_PWMLOAD_CH5SEL(base) (BME_UBFX32(&FTM_PWMLOAD_REG(base), FTM_PWMLOAD_CH5SEL_SHIFT, FTM_PWMLOAD_CH5SEL_WIDTH))

/*! @brief Set the CH5SEL field to a new value. */
#define FTM_WR_PWMLOAD_CH5SEL(base, value) (FTM_RMW_PWMLOAD(base, FTM_PWMLOAD_CH5SEL_MASK, FTM_PWMLOAD_CH5SEL(value)))
#define FTM_BWR_PWMLOAD_CH5SEL(base, value) (BME_BFI32(&FTM_PWMLOAD_REG(base), ((uint32_t)(value) << FTM_PWMLOAD_CH5SEL_SHIFT), FTM_PWMLOAD_CH5SEL_SHIFT, FTM_PWMLOAD_CH5SEL_WIDTH))
/*@}*/

/*!
 * @name Register FTM_PWMLOAD, field CH6SEL[6] (RW)
 *
 * Values:
 * - 0b0 - Do not include the channel in the matching process.
 * - 0b1 - Include the channel in the matching process.
 */
/*@{*/
/*! @brief Read current value of the FTM_PWMLOAD_CH6SEL field. */
#define FTM_RD_PWMLOAD_CH6SEL(base) ((FTM_PWMLOAD_REG(base) & FTM_PWMLOAD_CH6SEL_MASK) >> FTM_PWMLOAD_CH6SEL_SHIFT)
#define FTM_BRD_PWMLOAD_CH6SEL(base) (BME_UBFX32(&FTM_PWMLOAD_REG(base), FTM_PWMLOAD_CH6SEL_SHIFT, FTM_PWMLOAD_CH6SEL_WIDTH))

/*! @brief Set the CH6SEL field to a new value. */
#define FTM_WR_PWMLOAD_CH6SEL(base, value) (FTM_RMW_PWMLOAD(base, FTM_PWMLOAD_CH6SEL_MASK, FTM_PWMLOAD_CH6SEL(value)))
#define FTM_BWR_PWMLOAD_CH6SEL(base, value) (BME_BFI32(&FTM_PWMLOAD_REG(base), ((uint32_t)(value) << FTM_PWMLOAD_CH6SEL_SHIFT), FTM_PWMLOAD_CH6SEL_SHIFT, FTM_PWMLOAD_CH6SEL_WIDTH))
/*@}*/

/*!
 * @name Register FTM_PWMLOAD, field CH7SEL[7] (RW)
 *
 * Values:
 * - 0b0 - Do not include the channel in the matching process.
 * - 0b1 - Include the channel in the matching process.
 */
/*@{*/
/*! @brief Read current value of the FTM_PWMLOAD_CH7SEL field. */
#define FTM_RD_PWMLOAD_CH7SEL(base) ((FTM_PWMLOAD_REG(base) & FTM_PWMLOAD_CH7SEL_MASK) >> FTM_PWMLOAD_CH7SEL_SHIFT)
#define FTM_BRD_PWMLOAD_CH7SEL(base) (BME_UBFX32(&FTM_PWMLOAD_REG(base), FTM_PWMLOAD_CH7SEL_SHIFT, FTM_PWMLOAD_CH7SEL_WIDTH))

/*! @brief Set the CH7SEL field to a new value. */
#define FTM_WR_PWMLOAD_CH7SEL(base, value) (FTM_RMW_PWMLOAD(base, FTM_PWMLOAD_CH7SEL_MASK, FTM_PWMLOAD_CH7SEL(value)))
#define FTM_BWR_PWMLOAD_CH7SEL(base, value) (BME_BFI32(&FTM_PWMLOAD_REG(base), ((uint32_t)(value) << FTM_PWMLOAD_CH7SEL_SHIFT), FTM_PWMLOAD_CH7SEL_SHIFT, FTM_PWMLOAD_CH7SEL_WIDTH))
/*@}*/

/*!
 * @name Register FTM_PWMLOAD, field LDOK[9] (RW)
 *
 * Enables the loading of the MOD, CNTIN, and CV registers with the values of
 * their write buffers.
 *
 * Values:
 * - 0b0 - Loading updated values is disabled.
 * - 0b1 - Loading updated values is enabled.
 */
/*@{*/
/*! @brief Read current value of the FTM_PWMLOAD_LDOK field. */
#define FTM_RD_PWMLOAD_LDOK(base) ((FTM_PWMLOAD_REG(base) & FTM_PWMLOAD_LDOK_MASK) >> FTM_PWMLOAD_LDOK_SHIFT)
#define FTM_BRD_PWMLOAD_LDOK(base) (BME_UBFX32(&FTM_PWMLOAD_REG(base), FTM_PWMLOAD_LDOK_SHIFT, FTM_PWMLOAD_LDOK_WIDTH))

/*! @brief Set the LDOK field to a new value. */
#define FTM_WR_PWMLOAD_LDOK(base, value) (FTM_RMW_PWMLOAD(base, FTM_PWMLOAD_LDOK_MASK, FTM_PWMLOAD_LDOK(value)))
#define FTM_BWR_PWMLOAD_LDOK(base, value) (BME_BFI32(&FTM_PWMLOAD_REG(base), ((uint32_t)(value) << FTM_PWMLOAD_LDOK_SHIFT), FTM_PWMLOAD_LDOK_SHIFT, FTM_PWMLOAD_LDOK_WIDTH))
/*@}*/

/*
 * MK82F25615 GPIO
 *
 * General Purpose Input/Output
 *
 * Registers defined in this header file:
 * - GPIO_PDOR - Port Data Output Register
 * - GPIO_PSOR - Port Set Output Register
 * - GPIO_PCOR - Port Clear Output Register
 * - GPIO_PTOR - Port Toggle Output Register
 * - GPIO_PDIR - Port Data Input Register
 * - GPIO_PDDR - Port Data Direction Register
 */

#define GPIO_INSTANCE_COUNT (5U) /*!< Number of instances of the GPIO module. */
#define GPIOA_IDX (0U) /*!< Instance number for GPIOA. */
#define GPIOB_IDX (1U) /*!< Instance number for GPIOB. */
#define GPIOC_IDX (2U) /*!< Instance number for GPIOC. */
#define GPIOD_IDX (3U) /*!< Instance number for GPIOD. */
#define GPIOE_IDX (4U) /*!< Instance number for GPIOE. */

/*******************************************************************************
 * GPIO_PDOR - Port Data Output Register
 ******************************************************************************/

/*!
 * @brief GPIO_PDOR - Port Data Output Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register configures the logic levels that are driven on each
 * general-purpose output pins. Do not modify pin configuration registers associated with
 * pins not available in your selected package. All unbonded pins not available in
 * your package will default to DISABLE state for lowest power consumption.
 */
/*!
 * @name Constants and macros for entire GPIO_PDOR register
 */
/*@{*/
#define GPIO_RD_PDOR(base)       (GPIO_PDOR_REG(base))
#define GPIO_WR_PDOR(base, value) (GPIO_PDOR_REG(base) = (value))
#define GPIO_RMW_PDOR(base, mask, value) (GPIO_WR_PDOR(base, (GPIO_RD_PDOR(base) & ~(mask)) | (value)))
#define GPIO_SET_PDOR(base, value) (GPIO_WR_PDOR(base, GPIO_RD_PDOR(base) |  (value)))
#define GPIO_CLR_PDOR(base, value) (GPIO_WR_PDOR(base, GPIO_RD_PDOR(base) & ~(value)))
#define GPIO_TOG_PDOR(base, value) (GPIO_WR_PDOR(base, GPIO_RD_PDOR(base) ^  (value)))
/*@}*/

/*******************************************************************************
 * GPIO_PSOR - Port Set Output Register
 ******************************************************************************/

/*!
 * @brief GPIO_PSOR - Port Set Output Register (WORZ)
 *
 * Reset value: 0x00000000U
 *
 * This register configures whether to set the fields of the PDOR.
 */
/*!
 * @name Constants and macros for entire GPIO_PSOR register
 */
/*@{*/
#define GPIO_RD_PSOR(base)       (GPIO_PSOR_REG(base))
#define GPIO_WR_PSOR(base, value) (GPIO_PSOR_REG(base) = (value))
#define GPIO_RMW_PSOR(base, mask, value) (GPIO_WR_PSOR(base, (GPIO_RD_PSOR(base) & ~(mask)) | (value)))
/*@}*/

/*******************************************************************************
 * GPIO_PCOR - Port Clear Output Register
 ******************************************************************************/

/*!
 * @brief GPIO_PCOR - Port Clear Output Register (WORZ)
 *
 * Reset value: 0x00000000U
 *
 * This register configures whether to clear the fields of PDOR.
 */
/*!
 * @name Constants and macros for entire GPIO_PCOR register
 */
/*@{*/
#define GPIO_RD_PCOR(base)       (GPIO_PCOR_REG(base))
#define GPIO_WR_PCOR(base, value) (GPIO_PCOR_REG(base) = (value))
#define GPIO_RMW_PCOR(base, mask, value) (GPIO_WR_PCOR(base, (GPIO_RD_PCOR(base) & ~(mask)) | (value)))
/*@}*/

/*******************************************************************************
 * GPIO_PTOR - Port Toggle Output Register
 ******************************************************************************/

/*!
 * @brief GPIO_PTOR - Port Toggle Output Register (WORZ)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire GPIO_PTOR register
 */
/*@{*/
#define GPIO_RD_PTOR(base)       (GPIO_PTOR_REG(base))
#define GPIO_WR_PTOR(base, value) (GPIO_PTOR_REG(base) = (value))
#define GPIO_RMW_PTOR(base, mask, value) (GPIO_WR_PTOR(base, (GPIO_RD_PTOR(base) & ~(mask)) | (value)))
/*@}*/

/*******************************************************************************
 * GPIO_PDIR - Port Data Input Register
 ******************************************************************************/

/*!
 * @brief GPIO_PDIR - Port Data Input Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * Do not modify pin configuration registers associated with pins not available
 * in your selected package. All unbonded pins not available in your package will
 * default to DISABLE state for lowest power consumption.
 */
/*!
 * @name Constants and macros for entire GPIO_PDIR register
 */
/*@{*/
#define GPIO_RD_PDIR(base)       (GPIO_PDIR_REG(base))
/*@}*/

/*******************************************************************************
 * GPIO_PDDR - Port Data Direction Register
 ******************************************************************************/

/*!
 * @brief GPIO_PDDR - Port Data Direction Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The PDDR configures the individual port pins for input or output.
 */
/*!
 * @name Constants and macros for entire GPIO_PDDR register
 */
/*@{*/
#define GPIO_RD_PDDR(base)       (GPIO_PDDR_REG(base))
#define GPIO_WR_PDDR(base, value) (GPIO_PDDR_REG(base) = (value))
#define GPIO_RMW_PDDR(base, mask, value) (GPIO_WR_PDDR(base, (GPIO_RD_PDDR(base) & ~(mask)) | (value)))
#define GPIO_SET_PDDR(base, value) (GPIO_WR_PDDR(base, GPIO_RD_PDDR(base) |  (value)))
#define GPIO_CLR_PDDR(base, value) (GPIO_WR_PDDR(base, GPIO_RD_PDDR(base) & ~(value)))
#define GPIO_TOG_PDDR(base, value) (GPIO_WR_PDDR(base, GPIO_RD_PDDR(base) ^  (value)))
/*@}*/

/*
 * MK82F25615 I2C
 *
 * Inter-Integrated Circuit
 *
 * Registers defined in this header file:
 * - I2C_A1 - I2C Address Register 1
 * - I2C_F - I2C Frequency Divider register
 * - I2C_C1 - I2C Control Register 1
 * - I2C_S - I2C Status register
 * - I2C_D - I2C Data I/O register
 * - I2C_C2 - I2C Control Register 2
 * - I2C_FLT - I2C Programmable Input Glitch Filter Register
 * - I2C_RA - I2C Range Address register
 * - I2C_SMB - I2C SMBus Control and Status register
 * - I2C_A2 - I2C Address Register 2
 * - I2C_SLTH - I2C SCL Low Timeout Register High
 * - I2C_SLTL - I2C SCL Low Timeout Register Low
 * - I2C_S2 - I2C Status register 2
 */

#define I2C_INSTANCE_COUNT (4U) /*!< Number of instances of the I2C module. */
#define I2C0_IDX (0U) /*!< Instance number for I2C0. */
#define I2C1_IDX (1U) /*!< Instance number for I2C1. */
#define I2C2_IDX (2U) /*!< Instance number for I2C2. */
#define I2C3_IDX (3U) /*!< Instance number for I2C3. */

/*******************************************************************************
 * I2C_A1 - I2C Address Register 1
 ******************************************************************************/

/*!
 * @brief I2C_A1 - I2C Address Register 1 (RW)
 *
 * Reset value: 0x00U
 *
 * This register contains the slave address to be used by the I2C module.
 */
/*!
 * @name Constants and macros for entire I2C_A1 register
 */
/*@{*/
#define I2C_RD_A1(base)          (I2C_A1_REG(base))
#define I2C_WR_A1(base, value)   (I2C_A1_REG(base) = (value))
#define I2C_RMW_A1(base, mask, value) (I2C_WR_A1(base, (I2C_RD_A1(base) & ~(mask)) | (value)))
#define I2C_SET_A1(base, value)  (BME_OR8(&I2C_A1_REG(base), (uint8_t)(value)))
#define I2C_CLR_A1(base, value)  (BME_AND8(&I2C_A1_REG(base), (uint8_t)(~(value))))
#define I2C_TOG_A1(base, value)  (BME_XOR8(&I2C_A1_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual I2C_A1 bitfields
 */

/*!
 * @name Register I2C_A1, field AD[7:1] (RW)
 *
 * Contains the primary slave address used by the I2C module when it is
 * addressed as a slave. This field is used in the 7-bit address scheme and the lower
 * seven bits in the 10-bit address scheme.
 */
/*@{*/
/*! @brief Read current value of the I2C_A1_AD field. */
#define I2C_RD_A1_AD(base)   ((I2C_A1_REG(base) & I2C_A1_AD_MASK) >> I2C_A1_AD_SHIFT)
#define I2C_BRD_A1_AD(base)  (BME_UBFX8(&I2C_A1_REG(base), I2C_A1_AD_SHIFT, I2C_A1_AD_WIDTH))

/*! @brief Set the AD field to a new value. */
#define I2C_WR_A1_AD(base, value) (I2C_RMW_A1(base, I2C_A1_AD_MASK, I2C_A1_AD(value)))
#define I2C_BWR_A1_AD(base, value) (BME_BFI8(&I2C_A1_REG(base), ((uint8_t)(value) << I2C_A1_AD_SHIFT), I2C_A1_AD_SHIFT, I2C_A1_AD_WIDTH))
/*@}*/

/*******************************************************************************
 * I2C_F - I2C Frequency Divider register
 ******************************************************************************/

/*!
 * @brief I2C_F - I2C Frequency Divider register (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire I2C_F register
 */
/*@{*/
#define I2C_RD_F(base)           (I2C_F_REG(base))
#define I2C_WR_F(base, value)    (I2C_F_REG(base) = (value))
#define I2C_RMW_F(base, mask, value) (I2C_WR_F(base, (I2C_RD_F(base) & ~(mask)) | (value)))
#define I2C_SET_F(base, value)   (BME_OR8(&I2C_F_REG(base), (uint8_t)(value)))
#define I2C_CLR_F(base, value)   (BME_AND8(&I2C_F_REG(base), (uint8_t)(~(value))))
#define I2C_TOG_F(base, value)   (BME_XOR8(&I2C_F_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual I2C_F bitfields
 */

/*!
 * @name Register I2C_F, field ICR[5:0] (RW)
 *
 * Prescales the I2C module clock for bit rate selection. This field and the
 * MULT field determine the I2C baud rate, the SDA hold time, the SCL start hold
 * time, and the SCL stop hold time. For a list of values corresponding to each ICR
 * setting, see I2C divider and hold values. The SCL divider multiplied by
 * multiplier factor (mul) determines the I2C baud rate. I2C baud rate = I2C module
 * clock speed (Hz)/(mul * SCL divider) The SDA hold time is the delay from the
 * falling edge of SCL (I2C clock) to the changing of SDA (I2C data). SDA hold time =
 * I2C module clock period (s) * mul * SDA hold value The SCL start hold time is
 * the delay from the falling edge of SDA (I2C data) while SCL is high (start
 * condition) to the falling edge of SCL (I2C clock). SCL start hold time = I2C
 * module clock period (s) * mul * SCL start hold value The SCL stop hold time is
 * the delay from the rising edge of SCL (I2C clock) to the rising edge of SDA (I2C
 * data) while SCL is high (stop condition). SCL stop hold time = I2C module
 * clock period (s) * mul * SCL stop hold value For example, if the I2C module clock
 * speed is 8 MHz, the following table shows the possible hold time values with
 * different ICR and MULT selections to achieve an I2C baud rate of 100 kbit/s.
 * MULT ICR Hold times (us) SDA SCL Start SCL Stop 2h 00h 3.500 3.000 5.500 1h 07h
 * 2.500 4.000 5.250 1h 0Bh 2.250 4.000 5.250 0h 14h 2.125 4.250 5.125 0h 18h
 * 1.125 4.750 5.125
 */
/*@{*/
/*! @brief Read current value of the I2C_F_ICR field. */
#define I2C_RD_F_ICR(base)   ((I2C_F_REG(base) & I2C_F_ICR_MASK) >> I2C_F_ICR_SHIFT)
#define I2C_BRD_F_ICR(base)  (BME_UBFX8(&I2C_F_REG(base), I2C_F_ICR_SHIFT, I2C_F_ICR_WIDTH))

/*! @brief Set the ICR field to a new value. */
#define I2C_WR_F_ICR(base, value) (I2C_RMW_F(base, I2C_F_ICR_MASK, I2C_F_ICR(value)))
#define I2C_BWR_F_ICR(base, value) (BME_BFI8(&I2C_F_REG(base), ((uint8_t)(value) << I2C_F_ICR_SHIFT), I2C_F_ICR_SHIFT, I2C_F_ICR_WIDTH))
/*@}*/

/*!
 * @name Register I2C_F, field MULT[7:6] (RW)
 *
 * Defines the multiplier factor (mul). This factor is used along with the SCL
 * divider to generate the I2C baud rate.
 *
 * Values:
 * - 0b00 - mul = 1
 * - 0b01 - mul = 2
 * - 0b10 - mul = 4
 * - 0b11 - Reserved
 */
/*@{*/
/*! @brief Read current value of the I2C_F_MULT field. */
#define I2C_RD_F_MULT(base)  ((I2C_F_REG(base) & I2C_F_MULT_MASK) >> I2C_F_MULT_SHIFT)
#define I2C_BRD_F_MULT(base) (BME_UBFX8(&I2C_F_REG(base), I2C_F_MULT_SHIFT, I2C_F_MULT_WIDTH))

/*! @brief Set the MULT field to a new value. */
#define I2C_WR_F_MULT(base, value) (I2C_RMW_F(base, I2C_F_MULT_MASK, I2C_F_MULT(value)))
#define I2C_BWR_F_MULT(base, value) (BME_BFI8(&I2C_F_REG(base), ((uint8_t)(value) << I2C_F_MULT_SHIFT), I2C_F_MULT_SHIFT, I2C_F_MULT_WIDTH))
/*@}*/

/*******************************************************************************
 * I2C_C1 - I2C Control Register 1
 ******************************************************************************/

/*!
 * @brief I2C_C1 - I2C Control Register 1 (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire I2C_C1 register
 */
/*@{*/
#define I2C_RD_C1(base)          (I2C_C1_REG(base))
#define I2C_WR_C1(base, value)   (I2C_C1_REG(base) = (value))
#define I2C_RMW_C1(base, mask, value) (I2C_WR_C1(base, (I2C_RD_C1(base) & ~(mask)) | (value)))
#define I2C_SET_C1(base, value)  (BME_OR8(&I2C_C1_REG(base), (uint8_t)(value)))
#define I2C_CLR_C1(base, value)  (BME_AND8(&I2C_C1_REG(base), (uint8_t)(~(value))))
#define I2C_TOG_C1(base, value)  (BME_XOR8(&I2C_C1_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual I2C_C1 bitfields
 */

/*!
 * @name Register I2C_C1, field DMAEN[0] (RW)
 *
 * Enables or disables the DMA function.
 *
 * Values:
 * - 0b0 - All DMA signalling disabled.
 * - 0b1 - DMA transfer is enabled. While SMB[FACK] = 0, the following
 *     conditions trigger the DMA request: a data byte is received, and either address or
 *     data is transmitted. (ACK/NACK is automatic) the first byte received
 *     matches the A1 register or is a general call address. If any address matching
 *     occurs, S[IAAS] and S[TCF] are set. If the direction of transfer is known
 *     from master to slave, then it is not required to check S[SRW]. With this
 *     assumption, DMA can also be used in this case. In other cases, if the master
 *     reads data from the slave, then it is required to rewrite the C1 register
 *     operation. With this assumption, DMA cannot be used. When FACK = 1, an
 *     address or a data byte is transmitted.
 */
/*@{*/
/*! @brief Read current value of the I2C_C1_DMAEN field. */
#define I2C_RD_C1_DMAEN(base) ((I2C_C1_REG(base) & I2C_C1_DMAEN_MASK) >> I2C_C1_DMAEN_SHIFT)
#define I2C_BRD_C1_DMAEN(base) (BME_UBFX8(&I2C_C1_REG(base), I2C_C1_DMAEN_SHIFT, I2C_C1_DMAEN_WIDTH))

/*! @brief Set the DMAEN field to a new value. */
#define I2C_WR_C1_DMAEN(base, value) (I2C_RMW_C1(base, I2C_C1_DMAEN_MASK, I2C_C1_DMAEN(value)))
#define I2C_BWR_C1_DMAEN(base, value) (BME_BFI8(&I2C_C1_REG(base), ((uint8_t)(value) << I2C_C1_DMAEN_SHIFT), I2C_C1_DMAEN_SHIFT, I2C_C1_DMAEN_WIDTH))
/*@}*/

/*!
 * @name Register I2C_C1, field WUEN[1] (RW)
 *
 * The I2C module can wake the MCU from low power mode with no peripheral bus
 * running when slave address matching occurs.
 *
 * Values:
 * - 0b0 - Normal operation. No interrupt generated when address matching in low
 *     power mode.
 * - 0b1 - Enables the wakeup function in low power mode.
 */
/*@{*/
/*! @brief Read current value of the I2C_C1_WUEN field. */
#define I2C_RD_C1_WUEN(base) ((I2C_C1_REG(base) & I2C_C1_WUEN_MASK) >> I2C_C1_WUEN_SHIFT)
#define I2C_BRD_C1_WUEN(base) (BME_UBFX8(&I2C_C1_REG(base), I2C_C1_WUEN_SHIFT, I2C_C1_WUEN_WIDTH))

/*! @brief Set the WUEN field to a new value. */
#define I2C_WR_C1_WUEN(base, value) (I2C_RMW_C1(base, I2C_C1_WUEN_MASK, I2C_C1_WUEN(value)))
#define I2C_BWR_C1_WUEN(base, value) (BME_BFI8(&I2C_C1_REG(base), ((uint8_t)(value) << I2C_C1_WUEN_SHIFT), I2C_C1_WUEN_SHIFT, I2C_C1_WUEN_WIDTH))
/*@}*/

/*!
 * @name Register I2C_C1, field RSTA[2] (WORZ)
 *
 * Writing 1 to this bit generates a repeated START condition provided it is the
 * current master. This bit will always be read as 0. Attempting a repeat at the
 * wrong time results in loss of arbitration.
 */
/*@{*/
/*! @brief Set the RSTA field to a new value. */
#define I2C_WR_C1_RSTA(base, value) (I2C_RMW_C1(base, I2C_C1_RSTA_MASK, I2C_C1_RSTA(value)))
#define I2C_BWR_C1_RSTA(base, value) (BME_BFI8(&I2C_C1_REG(base), ((uint8_t)(value) << I2C_C1_RSTA_SHIFT), I2C_C1_RSTA_SHIFT, I2C_C1_RSTA_WIDTH))
/*@}*/

/*!
 * @name Register I2C_C1, field TXAK[3] (RW)
 *
 * Specifies the value driven onto the SDA during data acknowledge cycles for
 * both master and slave receivers. The value of SMB[FACK] affects NACK/ACK
 * generation. SCL is held low until TXAK is written.
 *
 * Values:
 * - 0b0 - An acknowledge signal is sent to the bus on the following receiving
 *     byte (if FACK is cleared) or the current receiving byte (if FACK is set).
 * - 0b1 - No acknowledge signal is sent to the bus on the following receiving
 *     data byte (if FACK is cleared) or the current receiving data byte (if FACK
 *     is set).
 */
/*@{*/
/*! @brief Read current value of the I2C_C1_TXAK field. */
#define I2C_RD_C1_TXAK(base) ((I2C_C1_REG(base) & I2C_C1_TXAK_MASK) >> I2C_C1_TXAK_SHIFT)
#define I2C_BRD_C1_TXAK(base) (BME_UBFX8(&I2C_C1_REG(base), I2C_C1_TXAK_SHIFT, I2C_C1_TXAK_WIDTH))

/*! @brief Set the TXAK field to a new value. */
#define I2C_WR_C1_TXAK(base, value) (I2C_RMW_C1(base, I2C_C1_TXAK_MASK, I2C_C1_TXAK(value)))
#define I2C_BWR_C1_TXAK(base, value) (BME_BFI8(&I2C_C1_REG(base), ((uint8_t)(value) << I2C_C1_TXAK_SHIFT), I2C_C1_TXAK_SHIFT, I2C_C1_TXAK_WIDTH))
/*@}*/

/*!
 * @name Register I2C_C1, field TX[4] (RW)
 *
 * Selects the direction of master and slave transfers. In master mode this bit
 * must be set according to the type of transfer required. Therefore, for address
 * cycles, this bit is always set. When addressed as a slave this bit must be
 * set by software according to the SRW bit in the status register.
 *
 * Values:
 * - 0b0 - Receive
 * - 0b1 - Transmit
 */
/*@{*/
/*! @brief Read current value of the I2C_C1_TX field. */
#define I2C_RD_C1_TX(base)   ((I2C_C1_REG(base) & I2C_C1_TX_MASK) >> I2C_C1_TX_SHIFT)
#define I2C_BRD_C1_TX(base)  (BME_UBFX8(&I2C_C1_REG(base), I2C_C1_TX_SHIFT, I2C_C1_TX_WIDTH))

/*! @brief Set the TX field to a new value. */
#define I2C_WR_C1_TX(base, value) (I2C_RMW_C1(base, I2C_C1_TX_MASK, I2C_C1_TX(value)))
#define I2C_BWR_C1_TX(base, value) (BME_BFI8(&I2C_C1_REG(base), ((uint8_t)(value) << I2C_C1_TX_SHIFT), I2C_C1_TX_SHIFT, I2C_C1_TX_WIDTH))
/*@}*/

/*!
 * @name Register I2C_C1, field MST[5] (RW)
 *
 * When MST is changed from 0 to 1, a START signal is generated on the bus and
 * master mode is selected. When this bit changes from 1 to 0, a STOP signal is
 * generated and the mode of operation changes from master to slave.
 *
 * Values:
 * - 0b0 - Slave mode
 * - 0b1 - Master mode
 */
/*@{*/
/*! @brief Read current value of the I2C_C1_MST field. */
#define I2C_RD_C1_MST(base)  ((I2C_C1_REG(base) & I2C_C1_MST_MASK) >> I2C_C1_MST_SHIFT)
#define I2C_BRD_C1_MST(base) (BME_UBFX8(&I2C_C1_REG(base), I2C_C1_MST_SHIFT, I2C_C1_MST_WIDTH))

/*! @brief Set the MST field to a new value. */
#define I2C_WR_C1_MST(base, value) (I2C_RMW_C1(base, I2C_C1_MST_MASK, I2C_C1_MST(value)))
#define I2C_BWR_C1_MST(base, value) (BME_BFI8(&I2C_C1_REG(base), ((uint8_t)(value) << I2C_C1_MST_SHIFT), I2C_C1_MST_SHIFT, I2C_C1_MST_WIDTH))
/*@}*/

/*!
 * @name Register I2C_C1, field IICIE[6] (RW)
 *
 * Enables I2C interrupt requests.
 *
 * Values:
 * - 0b0 - Disabled
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the I2C_C1_IICIE field. */
#define I2C_RD_C1_IICIE(base) ((I2C_C1_REG(base) & I2C_C1_IICIE_MASK) >> I2C_C1_IICIE_SHIFT)
#define I2C_BRD_C1_IICIE(base) (BME_UBFX8(&I2C_C1_REG(base), I2C_C1_IICIE_SHIFT, I2C_C1_IICIE_WIDTH))

/*! @brief Set the IICIE field to a new value. */
#define I2C_WR_C1_IICIE(base, value) (I2C_RMW_C1(base, I2C_C1_IICIE_MASK, I2C_C1_IICIE(value)))
#define I2C_BWR_C1_IICIE(base, value) (BME_BFI8(&I2C_C1_REG(base), ((uint8_t)(value) << I2C_C1_IICIE_SHIFT), I2C_C1_IICIE_SHIFT, I2C_C1_IICIE_WIDTH))
/*@}*/

/*!
 * @name Register I2C_C1, field IICEN[7] (RW)
 *
 * Enables I2C module operation.
 *
 * Values:
 * - 0b0 - Disabled
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the I2C_C1_IICEN field. */
#define I2C_RD_C1_IICEN(base) ((I2C_C1_REG(base) & I2C_C1_IICEN_MASK) >> I2C_C1_IICEN_SHIFT)
#define I2C_BRD_C1_IICEN(base) (BME_UBFX8(&I2C_C1_REG(base), I2C_C1_IICEN_SHIFT, I2C_C1_IICEN_WIDTH))

/*! @brief Set the IICEN field to a new value. */
#define I2C_WR_C1_IICEN(base, value) (I2C_RMW_C1(base, I2C_C1_IICEN_MASK, I2C_C1_IICEN(value)))
#define I2C_BWR_C1_IICEN(base, value) (BME_BFI8(&I2C_C1_REG(base), ((uint8_t)(value) << I2C_C1_IICEN_SHIFT), I2C_C1_IICEN_SHIFT, I2C_C1_IICEN_WIDTH))
/*@}*/

/*******************************************************************************
 * I2C_S - I2C Status register
 ******************************************************************************/

/*!
 * @brief I2C_S - I2C Status register (RW)
 *
 * Reset value: 0x80U
 */
/*!
 * @name Constants and macros for entire I2C_S register
 */
/*@{*/
#define I2C_RD_S(base)           (I2C_S_REG(base))
#define I2C_WR_S(base, value)    (I2C_S_REG(base) = (value))
#define I2C_RMW_S(base, mask, value) (I2C_WR_S(base, (I2C_RD_S(base) & ~(mask)) | (value)))
#define I2C_SET_S(base, value)   (BME_OR8(&I2C_S_REG(base), (uint8_t)(value)))
#define I2C_CLR_S(base, value)   (BME_AND8(&I2C_S_REG(base), (uint8_t)(~(value))))
#define I2C_TOG_S(base, value)   (BME_XOR8(&I2C_S_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual I2C_S bitfields
 */

/*!
 * @name Register I2C_S, field RXAK[0] (RO)
 *
 * Values:
 * - 0b0 - Acknowledge signal was received after the completion of one byte of
 *     data transmission on the bus
 * - 0b1 - No acknowledge signal detected
 */
/*@{*/
/*! @brief Read current value of the I2C_S_RXAK field. */
#define I2C_RD_S_RXAK(base)  ((I2C_S_REG(base) & I2C_S_RXAK_MASK) >> I2C_S_RXAK_SHIFT)
#define I2C_BRD_S_RXAK(base) (BME_UBFX8(&I2C_S_REG(base), I2C_S_RXAK_SHIFT, I2C_S_RXAK_WIDTH))
/*@}*/

/*!
 * @name Register I2C_S, field IICIF[1] (W1C)
 *
 * This bit sets when an interrupt is pending. This bit must be cleared by
 * software by writing 1 to it, such as in the interrupt routine. One of the following
 * events can set this bit: One byte transfer, including ACK/NACK bit, completes
 * if FACK is 0. An ACK or NACK is sent on the bus by writing 0 or 1 to TXAK
 * after this bit is set in receive mode. One byte transfer, excluding ACK/NACK bit,
 * completes if FACK is 1. Match of slave address to calling address including
 * primary slave address, range slave address , alert response address, second
 * slave address, or general call address. Arbitration lost In SMBus mode, any
 * timeouts except SCL and SDA high timeouts I2C bus stop or start detection if the
 * SSIE bit in the Input Glitch Filter register is 1 To clear the I2C bus stop or
 * start detection interrupt: In the interrupt service routine, first clear the
 * STOPF or STARTF bit in the Input Glitch Filter register by writing 1 to it, and
 * then clear the IICIF bit. If this sequence is reversed, the IICIF bit is
 * asserted again.
 *
 * Values:
 * - 0b0 - No interrupt pending
 * - 0b1 - Interrupt pending
 */
/*@{*/
/*! @brief Read current value of the I2C_S_IICIF field. */
#define I2C_RD_S_IICIF(base) ((I2C_S_REG(base) & I2C_S_IICIF_MASK) >> I2C_S_IICIF_SHIFT)
#define I2C_BRD_S_IICIF(base) (BME_UBFX8(&I2C_S_REG(base), I2C_S_IICIF_SHIFT, I2C_S_IICIF_WIDTH))

/*! @brief Set the IICIF field to a new value. */
#define I2C_WR_S_IICIF(base, value) (I2C_RMW_S(base, (I2C_S_IICIF_MASK | I2C_S_ARBL_MASK), I2C_S_IICIF(value)))
#define I2C_BWR_S_IICIF(base, value) (BME_BFI8(&I2C_S_REG(base), ((uint8_t)(value) << I2C_S_IICIF_SHIFT), I2C_S_IICIF_SHIFT, I2C_S_IICIF_WIDTH))
/*@}*/

/*!
 * @name Register I2C_S, field SRW[2] (RO)
 *
 * When addressed as a slave, SRW indicates the value of the R/W command bit of
 * the calling address sent to the master.
 *
 * Values:
 * - 0b0 - Slave receive, master writing to slave
 * - 0b1 - Slave transmit, master reading from slave
 */
/*@{*/
/*! @brief Read current value of the I2C_S_SRW field. */
#define I2C_RD_S_SRW(base)   ((I2C_S_REG(base) & I2C_S_SRW_MASK) >> I2C_S_SRW_SHIFT)
#define I2C_BRD_S_SRW(base)  (BME_UBFX8(&I2C_S_REG(base), I2C_S_SRW_SHIFT, I2C_S_SRW_WIDTH))
/*@}*/

/*!
 * @name Register I2C_S, field RAM[3] (RW)
 *
 * This bit is set to 1 by any of the following conditions, if I2C_C2[RMEN] = 1:
 * Any nonzero calling address is received that matches the address in the RA
 * register. The calling address is within the range of values of the A1 and RA
 * registers. For the RAM bit to be set to 1 correctly, C1[IICIE] must be set to 1.
 * Writing the C1 register with any value clears this bit to 0.
 *
 * Values:
 * - 0b0 - Not addressed
 * - 0b1 - Addressed as a slave
 */
/*@{*/
/*! @brief Read current value of the I2C_S_RAM field. */
#define I2C_RD_S_RAM(base)   ((I2C_S_REG(base) & I2C_S_RAM_MASK) >> I2C_S_RAM_SHIFT)
#define I2C_BRD_S_RAM(base)  (BME_UBFX8(&I2C_S_REG(base), I2C_S_RAM_SHIFT, I2C_S_RAM_WIDTH))

/*! @brief Set the RAM field to a new value. */
#define I2C_WR_S_RAM(base, value) (I2C_RMW_S(base, (I2C_S_RAM_MASK | I2C_S_IICIF_MASK | I2C_S_ARBL_MASK), I2C_S_RAM(value)))
#define I2C_BWR_S_RAM(base, value) (BME_BFI8(&I2C_S_REG(base), ((uint8_t)(value) << I2C_S_RAM_SHIFT), I2C_S_RAM_SHIFT, I2C_S_RAM_WIDTH))
/*@}*/

/*!
 * @name Register I2C_S, field ARBL[4] (W1C)
 *
 * This bit is set by hardware when the arbitration procedure is lost. The ARBL
 * bit must be cleared by software, by writing 1 to it.
 *
 * Values:
 * - 0b0 - Standard bus operation.
 * - 0b1 - Loss of arbitration.
 */
/*@{*/
/*! @brief Read current value of the I2C_S_ARBL field. */
#define I2C_RD_S_ARBL(base)  ((I2C_S_REG(base) & I2C_S_ARBL_MASK) >> I2C_S_ARBL_SHIFT)
#define I2C_BRD_S_ARBL(base) (BME_UBFX8(&I2C_S_REG(base), I2C_S_ARBL_SHIFT, I2C_S_ARBL_WIDTH))

/*! @brief Set the ARBL field to a new value. */
#define I2C_WR_S_ARBL(base, value) (I2C_RMW_S(base, (I2C_S_ARBL_MASK | I2C_S_IICIF_MASK), I2C_S_ARBL(value)))
#define I2C_BWR_S_ARBL(base, value) (BME_BFI8(&I2C_S_REG(base), ((uint8_t)(value) << I2C_S_ARBL_SHIFT), I2C_S_ARBL_SHIFT, I2C_S_ARBL_WIDTH))
/*@}*/

/*!
 * @name Register I2C_S, field BUSY[5] (RO)
 *
 * Indicates the status of the bus regardless of slave or master mode. This bit
 * is set when a START signal is detected and cleared when a STOP signal is
 * detected.
 *
 * Values:
 * - 0b0 - Bus is idle
 * - 0b1 - Bus is busy
 */
/*@{*/
/*! @brief Read current value of the I2C_S_BUSY field. */
#define I2C_RD_S_BUSY(base)  ((I2C_S_REG(base) & I2C_S_BUSY_MASK) >> I2C_S_BUSY_SHIFT)
#define I2C_BRD_S_BUSY(base) (BME_UBFX8(&I2C_S_REG(base), I2C_S_BUSY_SHIFT, I2C_S_BUSY_WIDTH))
/*@}*/

/*!
 * @name Register I2C_S, field IAAS[6] (RW)
 *
 * This bit is set by one of the following conditions: The calling address
 * matches the programmed primary slave address in the A1 register, or matches the
 * range address in the RA register (which must be set to a nonzero value and under
 * the condition I2C_C2[RMEN] = 1). C2[GCAEN] is set and a general call is
 * received. SMB[SIICAEN] is set and the calling address matches the second programmed
 * slave address. ALERTEN is set and an SMBus alert response address is received
 * RMEN is set and an address is received that is within the range between the
 * values of the A1 and RA registers. IAAS sets before the ACK bit. The CPU must
 * check the SRW bit and set TX/RX accordingly. Writing the C1 register with any
 * value clears this bit.
 *
 * Values:
 * - 0b0 - Not addressed
 * - 0b1 - Addressed as a slave
 */
/*@{*/
/*! @brief Read current value of the I2C_S_IAAS field. */
#define I2C_RD_S_IAAS(base)  ((I2C_S_REG(base) & I2C_S_IAAS_MASK) >> I2C_S_IAAS_SHIFT)
#define I2C_BRD_S_IAAS(base) (BME_UBFX8(&I2C_S_REG(base), I2C_S_IAAS_SHIFT, I2C_S_IAAS_WIDTH))

/*! @brief Set the IAAS field to a new value. */
#define I2C_WR_S_IAAS(base, value) (I2C_RMW_S(base, (I2C_S_IAAS_MASK | I2C_S_IICIF_MASK | I2C_S_ARBL_MASK), I2C_S_IAAS(value)))
#define I2C_BWR_S_IAAS(base, value) (BME_BFI8(&I2C_S_REG(base), ((uint8_t)(value) << I2C_S_IAAS_SHIFT), I2C_S_IAAS_SHIFT, I2C_S_IAAS_WIDTH))
/*@}*/

/*!
 * @name Register I2C_S, field TCF[7] (RO)
 *
 * Acknowledges a byte transfer; TCF is set on the completion of a byte
 * transfer. This bit is valid only during or immediately following a transfer to or from
 * the I2C module. TCF is cleared by reading the I2C data register in receive
 * mode or by writing to the I2C data register in transmit mode.In the buffer mode,
 * TCF is cleared automatically by internal reading or writing the data register
 * I2C_D, with no need waiting for manually reading/writing the I2C data
 * register in Rx/Tx mode.
 *
 * Values:
 * - 0b0 - Transfer in progress
 * - 0b1 - Transfer complete
 */
/*@{*/
/*! @brief Read current value of the I2C_S_TCF field. */
#define I2C_RD_S_TCF(base)   ((I2C_S_REG(base) & I2C_S_TCF_MASK) >> I2C_S_TCF_SHIFT)
#define I2C_BRD_S_TCF(base)  (BME_UBFX8(&I2C_S_REG(base), I2C_S_TCF_SHIFT, I2C_S_TCF_WIDTH))
/*@}*/

/*******************************************************************************
 * I2C_D - I2C Data I/O register
 ******************************************************************************/

/*!
 * @brief I2C_D - I2C Data I/O register (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire I2C_D register
 */
/*@{*/
#define I2C_RD_D(base)           (I2C_D_REG(base))
#define I2C_WR_D(base, value)    (I2C_D_REG(base) = (value))
#define I2C_RMW_D(base, mask, value) (I2C_WR_D(base, (I2C_RD_D(base) & ~(mask)) | (value)))
#define I2C_SET_D(base, value)   (BME_OR8(&I2C_D_REG(base), (uint8_t)(value)))
#define I2C_CLR_D(base, value)   (BME_AND8(&I2C_D_REG(base), (uint8_t)(~(value))))
#define I2C_TOG_D(base, value)   (BME_XOR8(&I2C_D_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * I2C_C2 - I2C Control Register 2
 ******************************************************************************/

/*!
 * @brief I2C_C2 - I2C Control Register 2 (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire I2C_C2 register
 */
/*@{*/
#define I2C_RD_C2(base)          (I2C_C2_REG(base))
#define I2C_WR_C2(base, value)   (I2C_C2_REG(base) = (value))
#define I2C_RMW_C2(base, mask, value) (I2C_WR_C2(base, (I2C_RD_C2(base) & ~(mask)) | (value)))
#define I2C_SET_C2(base, value)  (BME_OR8(&I2C_C2_REG(base), (uint8_t)(value)))
#define I2C_CLR_C2(base, value)  (BME_AND8(&I2C_C2_REG(base), (uint8_t)(~(value))))
#define I2C_TOG_C2(base, value)  (BME_XOR8(&I2C_C2_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual I2C_C2 bitfields
 */

/*!
 * @name Register I2C_C2, field AD[2:0] (RW)
 *
 * Contains the upper three bits of the slave address in the 10-bit address
 * scheme. This field is valid only while the ADEXT bit is set.
 */
/*@{*/
/*! @brief Read current value of the I2C_C2_AD field. */
#define I2C_RD_C2_AD(base)   ((I2C_C2_REG(base) & I2C_C2_AD_MASK) >> I2C_C2_AD_SHIFT)
#define I2C_BRD_C2_AD(base)  (BME_UBFX8(&I2C_C2_REG(base), I2C_C2_AD_SHIFT, I2C_C2_AD_WIDTH))

/*! @brief Set the AD field to a new value. */
#define I2C_WR_C2_AD(base, value) (I2C_RMW_C2(base, I2C_C2_AD_MASK, I2C_C2_AD(value)))
#define I2C_BWR_C2_AD(base, value) (BME_BFI8(&I2C_C2_REG(base), ((uint8_t)(value) << I2C_C2_AD_SHIFT), I2C_C2_AD_SHIFT, I2C_C2_AD_WIDTH))
/*@}*/

/*!
 * @name Register I2C_C2, field RMEN[3] (RW)
 *
 * This bit controls the slave address matching for addresses between the values
 * of the A1 and RA registers. When this bit is set, a slave address matching
 * occurs for any address greater than the value of the A1 register and less than
 * or equal to the value of the RA register.
 *
 * Values:
 * - 0b0 - Range mode disabled. No address matching occurs for an address within
 *     the range of values of the A1 and RA registers.
 * - 0b1 - Range mode enabled. Address matching occurs when a slave receives an
 *     address within the range of values of the A1 and RA registers.
 */
/*@{*/
/*! @brief Read current value of the I2C_C2_RMEN field. */
#define I2C_RD_C2_RMEN(base) ((I2C_C2_REG(base) & I2C_C2_RMEN_MASK) >> I2C_C2_RMEN_SHIFT)
#define I2C_BRD_C2_RMEN(base) (BME_UBFX8(&I2C_C2_REG(base), I2C_C2_RMEN_SHIFT, I2C_C2_RMEN_WIDTH))

/*! @brief Set the RMEN field to a new value. */
#define I2C_WR_C2_RMEN(base, value) (I2C_RMW_C2(base, I2C_C2_RMEN_MASK, I2C_C2_RMEN(value)))
#define I2C_BWR_C2_RMEN(base, value) (BME_BFI8(&I2C_C2_REG(base), ((uint8_t)(value) << I2C_C2_RMEN_SHIFT), I2C_C2_RMEN_SHIFT, I2C_C2_RMEN_WIDTH))
/*@}*/

/*!
 * @name Register I2C_C2, field SBRC[4] (RW)
 *
 * Enables independent slave mode baud rate at maximum frequency, which forces
 * clock stretching on SCL in very fast I2C modes. To a slave, an example of a
 * "very fast" mode is when the master transfers at 40 kbit/s but the slave can
 * capture the master's data at only 10 kbit/s.
 *
 * Values:
 * - 0b0 - The slave baud rate follows the master baud rate and clock stretching
 *     may occur
 * - 0b1 - Slave baud rate is independent of the master baud rate
 */
/*@{*/
/*! @brief Read current value of the I2C_C2_SBRC field. */
#define I2C_RD_C2_SBRC(base) ((I2C_C2_REG(base) & I2C_C2_SBRC_MASK) >> I2C_C2_SBRC_SHIFT)
#define I2C_BRD_C2_SBRC(base) (BME_UBFX8(&I2C_C2_REG(base), I2C_C2_SBRC_SHIFT, I2C_C2_SBRC_WIDTH))

/*! @brief Set the SBRC field to a new value. */
#define I2C_WR_C2_SBRC(base, value) (I2C_RMW_C2(base, I2C_C2_SBRC_MASK, I2C_C2_SBRC(value)))
#define I2C_BWR_C2_SBRC(base, value) (BME_BFI8(&I2C_C2_REG(base), ((uint8_t)(value) << I2C_C2_SBRC_SHIFT), I2C_C2_SBRC_SHIFT, I2C_C2_SBRC_WIDTH))
/*@}*/

/*!
 * @name Register I2C_C2, field HDRS[5] (RW)
 *
 * Controls the drive capability of the I2C pads.
 *
 * Values:
 * - 0b0 - Normal drive mode
 * - 0b1 - High drive mode
 */
/*@{*/
/*! @brief Read current value of the I2C_C2_HDRS field. */
#define I2C_RD_C2_HDRS(base) ((I2C_C2_REG(base) & I2C_C2_HDRS_MASK) >> I2C_C2_HDRS_SHIFT)
#define I2C_BRD_C2_HDRS(base) (BME_UBFX8(&I2C_C2_REG(base), I2C_C2_HDRS_SHIFT, I2C_C2_HDRS_WIDTH))

/*! @brief Set the HDRS field to a new value. */
#define I2C_WR_C2_HDRS(base, value) (I2C_RMW_C2(base, I2C_C2_HDRS_MASK, I2C_C2_HDRS(value)))
#define I2C_BWR_C2_HDRS(base, value) (BME_BFI8(&I2C_C2_REG(base), ((uint8_t)(value) << I2C_C2_HDRS_SHIFT), I2C_C2_HDRS_SHIFT, I2C_C2_HDRS_WIDTH))
/*@}*/

/*!
 * @name Register I2C_C2, field ADEXT[6] (RW)
 *
 * Controls the number of bits used for the slave address.
 *
 * Values:
 * - 0b0 - 7-bit address scheme
 * - 0b1 - 10-bit address scheme
 */
/*@{*/
/*! @brief Read current value of the I2C_C2_ADEXT field. */
#define I2C_RD_C2_ADEXT(base) ((I2C_C2_REG(base) & I2C_C2_ADEXT_MASK) >> I2C_C2_ADEXT_SHIFT)
#define I2C_BRD_C2_ADEXT(base) (BME_UBFX8(&I2C_C2_REG(base), I2C_C2_ADEXT_SHIFT, I2C_C2_ADEXT_WIDTH))

/*! @brief Set the ADEXT field to a new value. */
#define I2C_WR_C2_ADEXT(base, value) (I2C_RMW_C2(base, I2C_C2_ADEXT_MASK, I2C_C2_ADEXT(value)))
#define I2C_BWR_C2_ADEXT(base, value) (BME_BFI8(&I2C_C2_REG(base), ((uint8_t)(value) << I2C_C2_ADEXT_SHIFT), I2C_C2_ADEXT_SHIFT, I2C_C2_ADEXT_WIDTH))
/*@}*/

/*!
 * @name Register I2C_C2, field GCAEN[7] (RW)
 *
 * Enables general call address.
 *
 * Values:
 * - 0b0 - Disabled
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the I2C_C2_GCAEN field. */
#define I2C_RD_C2_GCAEN(base) ((I2C_C2_REG(base) & I2C_C2_GCAEN_MASK) >> I2C_C2_GCAEN_SHIFT)
#define I2C_BRD_C2_GCAEN(base) (BME_UBFX8(&I2C_C2_REG(base), I2C_C2_GCAEN_SHIFT, I2C_C2_GCAEN_WIDTH))

/*! @brief Set the GCAEN field to a new value. */
#define I2C_WR_C2_GCAEN(base, value) (I2C_RMW_C2(base, I2C_C2_GCAEN_MASK, I2C_C2_GCAEN(value)))
#define I2C_BWR_C2_GCAEN(base, value) (BME_BFI8(&I2C_C2_REG(base), ((uint8_t)(value) << I2C_C2_GCAEN_SHIFT), I2C_C2_GCAEN_SHIFT, I2C_C2_GCAEN_WIDTH))
/*@}*/

/*******************************************************************************
 * I2C_FLT - I2C Programmable Input Glitch Filter Register
 ******************************************************************************/

/*!
 * @brief I2C_FLT - I2C Programmable Input Glitch Filter Register (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire I2C_FLT register
 */
/*@{*/
#define I2C_RD_FLT(base)         (I2C_FLT_REG(base))
#define I2C_WR_FLT(base, value)  (I2C_FLT_REG(base) = (value))
#define I2C_RMW_FLT(base, mask, value) (I2C_WR_FLT(base, (I2C_RD_FLT(base) & ~(mask)) | (value)))
#define I2C_SET_FLT(base, value) (BME_OR8(&I2C_FLT_REG(base), (uint8_t)(value)))
#define I2C_CLR_FLT(base, value) (BME_AND8(&I2C_FLT_REG(base), (uint8_t)(~(value))))
#define I2C_TOG_FLT(base, value) (BME_XOR8(&I2C_FLT_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual I2C_FLT bitfields
 */

/*!
 * @name Register I2C_FLT, field FLT[3:0] (RW)
 *
 * Controls the width of the glitch, in terms of I2C module clock cycles, that
 * the filter must absorb. For any glitch whose size is less than or equal to this
 * width setting, the filter does not allow the glitch to pass.
 *
 * Values:
 * - 0b0000 - No filter/bypass
 */
/*@{*/
/*! @brief Read current value of the I2C_FLT_FLT field. */
#define I2C_RD_FLT_FLT(base) ((I2C_FLT_REG(base) & I2C_FLT_FLT_MASK) >> I2C_FLT_FLT_SHIFT)
#define I2C_BRD_FLT_FLT(base) (BME_UBFX8(&I2C_FLT_REG(base), I2C_FLT_FLT_SHIFT, I2C_FLT_FLT_WIDTH))

/*! @brief Set the FLT field to a new value. */
#define I2C_WR_FLT_FLT(base, value) (I2C_RMW_FLT(base, (I2C_FLT_FLT_MASK | I2C_FLT_STARTF_MASK | I2C_FLT_STOPF_MASK), I2C_FLT_FLT(value)))
#define I2C_BWR_FLT_FLT(base, value) (BME_BFI8(&I2C_FLT_REG(base), ((uint8_t)(value) << I2C_FLT_FLT_SHIFT), I2C_FLT_FLT_SHIFT, I2C_FLT_FLT_WIDTH))
/*@}*/

/*!
 * @name Register I2C_FLT, field STARTF[4] (W1C)
 *
 * Hardware sets this bit when the I2C bus's start status is detected. The
 * STARTF bit must be cleared by writing 1 to it.
 *
 * Values:
 * - 0b0 - No start happens on I2C bus
 * - 0b1 - Start detected on I2C bus
 */
/*@{*/
/*! @brief Read current value of the I2C_FLT_STARTF field. */
#define I2C_RD_FLT_STARTF(base) ((I2C_FLT_REG(base) & I2C_FLT_STARTF_MASK) >> I2C_FLT_STARTF_SHIFT)
#define I2C_BRD_FLT_STARTF(base) (BME_UBFX8(&I2C_FLT_REG(base), I2C_FLT_STARTF_SHIFT, I2C_FLT_STARTF_WIDTH))

/*! @brief Set the STARTF field to a new value. */
#define I2C_WR_FLT_STARTF(base, value) (I2C_RMW_FLT(base, (I2C_FLT_STARTF_MASK | I2C_FLT_STOPF_MASK), I2C_FLT_STARTF(value)))
#define I2C_BWR_FLT_STARTF(base, value) (BME_BFI8(&I2C_FLT_REG(base), ((uint8_t)(value) << I2C_FLT_STARTF_SHIFT), I2C_FLT_STARTF_SHIFT, I2C_FLT_STARTF_WIDTH))
/*@}*/

/*!
 * @name Register I2C_FLT, field SSIE[5] (RW)
 *
 * This bit enables the interrupt for I2C bus stop or start detection. To clear
 * the I2C bus stop or start detection interrupt: In the interrupt service
 * routine, first clear the STOPF or STARTF bit by writing 1 to it, and then clear the
 * IICIF bit in the status register. If this sequence is reversed, the IICIF bit
 * is asserted again.
 *
 * Values:
 * - 0b0 - Stop or start detection interrupt is disabled
 * - 0b1 - Stop or start detection interrupt is enabled
 */
/*@{*/
/*! @brief Read current value of the I2C_FLT_SSIE field. */
#define I2C_RD_FLT_SSIE(base) ((I2C_FLT_REG(base) & I2C_FLT_SSIE_MASK) >> I2C_FLT_SSIE_SHIFT)
#define I2C_BRD_FLT_SSIE(base) (BME_UBFX8(&I2C_FLT_REG(base), I2C_FLT_SSIE_SHIFT, I2C_FLT_SSIE_WIDTH))

/*! @brief Set the SSIE field to a new value. */
#define I2C_WR_FLT_SSIE(base, value) (I2C_RMW_FLT(base, (I2C_FLT_SSIE_MASK | I2C_FLT_STARTF_MASK | I2C_FLT_STOPF_MASK), I2C_FLT_SSIE(value)))
#define I2C_BWR_FLT_SSIE(base, value) (BME_BFI8(&I2C_FLT_REG(base), ((uint8_t)(value) << I2C_FLT_SSIE_SHIFT), I2C_FLT_SSIE_SHIFT, I2C_FLT_SSIE_WIDTH))
/*@}*/

/*!
 * @name Register I2C_FLT, field STOPF[6] (W1C)
 *
 * Hardware sets this bit when the I2C bus's stop status is detected. The STOPF
 * bit must be cleared by writing 1 to it.
 *
 * Values:
 * - 0b0 - No stop happens on I2C bus
 * - 0b1 - Stop detected on I2C bus
 */
/*@{*/
/*! @brief Read current value of the I2C_FLT_STOPF field. */
#define I2C_RD_FLT_STOPF(base) ((I2C_FLT_REG(base) & I2C_FLT_STOPF_MASK) >> I2C_FLT_STOPF_SHIFT)
#define I2C_BRD_FLT_STOPF(base) (BME_UBFX8(&I2C_FLT_REG(base), I2C_FLT_STOPF_SHIFT, I2C_FLT_STOPF_WIDTH))

/*! @brief Set the STOPF field to a new value. */
#define I2C_WR_FLT_STOPF(base, value) (I2C_RMW_FLT(base, (I2C_FLT_STOPF_MASK | I2C_FLT_STARTF_MASK), I2C_FLT_STOPF(value)))
#define I2C_BWR_FLT_STOPF(base, value) (BME_BFI8(&I2C_FLT_REG(base), ((uint8_t)(value) << I2C_FLT_STOPF_SHIFT), I2C_FLT_STOPF_SHIFT, I2C_FLT_STOPF_WIDTH))
/*@}*/

/*!
 * @name Register I2C_FLT, field SHEN[7] (RW)
 *
 * Set this bit to hold off entry to stop mode when any data transmission or
 * reception is occurring. The following scenario explains the holdoff
 * functionality: The I2C module is configured for a basic transfer, and the SHEN bit is set
 * to 1. A transfer begins. The MCU signals the I2C module to enter stop mode. The
 * byte currently being transferred, including both address and data, completes
 * its transfer. The I2C slave or master acknowledges that the in-transfer byte
 * completed its transfer and acknowledges the request to enter stop mode. After
 * receiving the I2C module's acknowledgment of the request to enter stop mode,
 * the MCU determines whether to shut off the I2C module's clock. If the SHEN bit
 * is set to 1 and the I2C module is in an idle or disabled state when the MCU
 * signals to enter stop mode, the module immediately acknowledges the request to
 * enter stop mode. If SHEN is cleared to 0 and the overall data transmission or
 * reception that was suspended by stop mode entry was incomplete: To resume the
 * overall transmission or reception after the MCU exits stop mode, software must
 * reinitialize the transfer by resending the address of the slave. If the I2C
 * Control Register 1's IICIE bit was set to 1 before the MCU entered stop mode,
 * system software will receive the interrupt triggered by the I2C Status Register's
 * TCF bit after the MCU wakes from the stop mode.
 *
 * Values:
 * - 0b0 - Stop holdoff is disabled. The MCU's entry to stop mode is not gated.
 * - 0b1 - Stop holdoff is enabled.
 */
/*@{*/
/*! @brief Read current value of the I2C_FLT_SHEN field. */
#define I2C_RD_FLT_SHEN(base) ((I2C_FLT_REG(base) & I2C_FLT_SHEN_MASK) >> I2C_FLT_SHEN_SHIFT)
#define I2C_BRD_FLT_SHEN(base) (BME_UBFX8(&I2C_FLT_REG(base), I2C_FLT_SHEN_SHIFT, I2C_FLT_SHEN_WIDTH))

/*! @brief Set the SHEN field to a new value. */
#define I2C_WR_FLT_SHEN(base, value) (I2C_RMW_FLT(base, (I2C_FLT_SHEN_MASK | I2C_FLT_STARTF_MASK | I2C_FLT_STOPF_MASK), I2C_FLT_SHEN(value)))
#define I2C_BWR_FLT_SHEN(base, value) (BME_BFI8(&I2C_FLT_REG(base), ((uint8_t)(value) << I2C_FLT_SHEN_SHIFT), I2C_FLT_SHEN_SHIFT, I2C_FLT_SHEN_WIDTH))
/*@}*/

/*******************************************************************************
 * I2C_RA - I2C Range Address register
 ******************************************************************************/

/*!
 * @brief I2C_RA - I2C Range Address register (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire I2C_RA register
 */
/*@{*/
#define I2C_RD_RA(base)          (I2C_RA_REG(base))
#define I2C_WR_RA(base, value)   (I2C_RA_REG(base) = (value))
#define I2C_RMW_RA(base, mask, value) (I2C_WR_RA(base, (I2C_RD_RA(base) & ~(mask)) | (value)))
#define I2C_SET_RA(base, value)  (BME_OR8(&I2C_RA_REG(base), (uint8_t)(value)))
#define I2C_CLR_RA(base, value)  (BME_AND8(&I2C_RA_REG(base), (uint8_t)(~(value))))
#define I2C_TOG_RA(base, value)  (BME_XOR8(&I2C_RA_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual I2C_RA bitfields
 */

/*!
 * @name Register I2C_RA, field RAD[7:1] (RW)
 *
 * This field contains the slave address to be used by the I2C module. The field
 * is used in the 7-bit address scheme. If I2C_C2[RMEN] is set to 1, any nonzero
 * value write enables this register. This register value can be considered as a
 * maximum boundary in the range matching mode.
 */
/*@{*/
/*! @brief Read current value of the I2C_RA_RAD field. */
#define I2C_RD_RA_RAD(base)  ((I2C_RA_REG(base) & I2C_RA_RAD_MASK) >> I2C_RA_RAD_SHIFT)
#define I2C_BRD_RA_RAD(base) (BME_UBFX8(&I2C_RA_REG(base), I2C_RA_RAD_SHIFT, I2C_RA_RAD_WIDTH))

/*! @brief Set the RAD field to a new value. */
#define I2C_WR_RA_RAD(base, value) (I2C_RMW_RA(base, I2C_RA_RAD_MASK, I2C_RA_RAD(value)))
#define I2C_BWR_RA_RAD(base, value) (BME_BFI8(&I2C_RA_REG(base), ((uint8_t)(value) << I2C_RA_RAD_SHIFT), I2C_RA_RAD_SHIFT, I2C_RA_RAD_WIDTH))
/*@}*/

/*******************************************************************************
 * I2C_SMB - I2C SMBus Control and Status register
 ******************************************************************************/

/*!
 * @brief I2C_SMB - I2C SMBus Control and Status register (RW)
 *
 * Reset value: 0x00U
 *
 * When the SCL and SDA signals are held high for a length of time greater than
 * the high timeout period, the SHTF1 flag sets. Before reaching this threshold,
 * while the system is detecting how long these signals are being held high, a
 * master assumes that the bus is free. However, the SHTF1 bit is set to 1 in the
 * bus transmission process with the idle bus state. When the TCKSEL bit is set,
 * there is no need to monitor the SHTF1 bit because the bus speed is too high to
 * match the protocol of SMBus.
 */
/*!
 * @name Constants and macros for entire I2C_SMB register
 */
/*@{*/
#define I2C_RD_SMB(base)         (I2C_SMB_REG(base))
#define I2C_WR_SMB(base, value)  (I2C_SMB_REG(base) = (value))
#define I2C_RMW_SMB(base, mask, value) (I2C_WR_SMB(base, (I2C_RD_SMB(base) & ~(mask)) | (value)))
#define I2C_SET_SMB(base, value) (BME_OR8(&I2C_SMB_REG(base), (uint8_t)(value)))
#define I2C_CLR_SMB(base, value) (BME_AND8(&I2C_SMB_REG(base), (uint8_t)(~(value))))
#define I2C_TOG_SMB(base, value) (BME_XOR8(&I2C_SMB_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual I2C_SMB bitfields
 */

/*!
 * @name Register I2C_SMB, field SHTF2IE[0] (RW)
 *
 * Enables SCL high and SDA low timeout interrupt.
 *
 * Values:
 * - 0b0 - SHTF2 interrupt is disabled
 * - 0b1 - SHTF2 interrupt is enabled
 */
/*@{*/
/*! @brief Read current value of the I2C_SMB_SHTF2IE field. */
#define I2C_RD_SMB_SHTF2IE(base) ((I2C_SMB_REG(base) & I2C_SMB_SHTF2IE_MASK) >> I2C_SMB_SHTF2IE_SHIFT)
#define I2C_BRD_SMB_SHTF2IE(base) (BME_UBFX8(&I2C_SMB_REG(base), I2C_SMB_SHTF2IE_SHIFT, I2C_SMB_SHTF2IE_WIDTH))

/*! @brief Set the SHTF2IE field to a new value. */
#define I2C_WR_SMB_SHTF2IE(base, value) (I2C_RMW_SMB(base, (I2C_SMB_SHTF2IE_MASK | I2C_SMB_SHTF2_MASK | I2C_SMB_SLTF_MASK), I2C_SMB_SHTF2IE(value)))
#define I2C_BWR_SMB_SHTF2IE(base, value) (BME_BFI8(&I2C_SMB_REG(base), ((uint8_t)(value) << I2C_SMB_SHTF2IE_SHIFT), I2C_SMB_SHTF2IE_SHIFT, I2C_SMB_SHTF2IE_WIDTH))
/*@}*/

/*!
 * @name Register I2C_SMB, field SHTF2[1] (W1C)
 *
 * This bit sets when SCL is held high and SDA is held low more than clock *
 * LoValue / 512. Software clears this bit by writing 1 to it.
 *
 * Values:
 * - 0b0 - No SCL high and SDA low timeout occurs
 * - 0b1 - SCL high and SDA low timeout occurs
 */
/*@{*/
/*! @brief Read current value of the I2C_SMB_SHTF2 field. */
#define I2C_RD_SMB_SHTF2(base) ((I2C_SMB_REG(base) & I2C_SMB_SHTF2_MASK) >> I2C_SMB_SHTF2_SHIFT)
#define I2C_BRD_SMB_SHTF2(base) (BME_UBFX8(&I2C_SMB_REG(base), I2C_SMB_SHTF2_SHIFT, I2C_SMB_SHTF2_WIDTH))

/*! @brief Set the SHTF2 field to a new value. */
#define I2C_WR_SMB_SHTF2(base, value) (I2C_RMW_SMB(base, (I2C_SMB_SHTF2_MASK | I2C_SMB_SLTF_MASK), I2C_SMB_SHTF2(value)))
#define I2C_BWR_SMB_SHTF2(base, value) (BME_BFI8(&I2C_SMB_REG(base), ((uint8_t)(value) << I2C_SMB_SHTF2_SHIFT), I2C_SMB_SHTF2_SHIFT, I2C_SMB_SHTF2_WIDTH))
/*@}*/

/*!
 * @name Register I2C_SMB, field SHTF1[2] (RO)
 *
 * This read-only bit sets when SCL and SDA are held high more than clock *
 * LoValue / 512, which indicates the bus is free. This bit is cleared automatically.
 *
 * Values:
 * - 0b0 - No SCL high and SDA high timeout occurs
 * - 0b1 - SCL high and SDA high timeout occurs
 */
/*@{*/
/*! @brief Read current value of the I2C_SMB_SHTF1 field. */
#define I2C_RD_SMB_SHTF1(base) ((I2C_SMB_REG(base) & I2C_SMB_SHTF1_MASK) >> I2C_SMB_SHTF1_SHIFT)
#define I2C_BRD_SMB_SHTF1(base) (BME_UBFX8(&I2C_SMB_REG(base), I2C_SMB_SHTF1_SHIFT, I2C_SMB_SHTF1_WIDTH))
/*@}*/

/*!
 * @name Register I2C_SMB, field SLTF[3] (W1C)
 *
 * This bit is set when the SLT register (consisting of the SLTH and SLTL
 * registers) is loaded with a non-zero value (LoValue) and an SCL low timeout occurs.
 * Software clears this bit by writing a logic 1 to it. The low timeout function
 * is disabled when the SLT register's value is 0.
 *
 * Values:
 * - 0b0 - No low timeout occurs
 * - 0b1 - Low timeout occurs
 */
/*@{*/
/*! @brief Read current value of the I2C_SMB_SLTF field. */
#define I2C_RD_SMB_SLTF(base) ((I2C_SMB_REG(base) & I2C_SMB_SLTF_MASK) >> I2C_SMB_SLTF_SHIFT)
#define I2C_BRD_SMB_SLTF(base) (BME_UBFX8(&I2C_SMB_REG(base), I2C_SMB_SLTF_SHIFT, I2C_SMB_SLTF_WIDTH))

/*! @brief Set the SLTF field to a new value. */
#define I2C_WR_SMB_SLTF(base, value) (I2C_RMW_SMB(base, (I2C_SMB_SLTF_MASK | I2C_SMB_SHTF2_MASK), I2C_SMB_SLTF(value)))
#define I2C_BWR_SMB_SLTF(base, value) (BME_BFI8(&I2C_SMB_REG(base), ((uint8_t)(value) << I2C_SMB_SLTF_SHIFT), I2C_SMB_SLTF_SHIFT, I2C_SMB_SLTF_WIDTH))
/*@}*/

/*!
 * @name Register I2C_SMB, field TCKSEL[4] (RW)
 *
 * Selects the clock source of the timeout counter.
 *
 * Values:
 * - 0b0 - Timeout counter counts at the frequency of the I2C module clock / 64
 * - 0b1 - Timeout counter counts at the frequency of the I2C module clock
 */
/*@{*/
/*! @brief Read current value of the I2C_SMB_TCKSEL field. */
#define I2C_RD_SMB_TCKSEL(base) ((I2C_SMB_REG(base) & I2C_SMB_TCKSEL_MASK) >> I2C_SMB_TCKSEL_SHIFT)
#define I2C_BRD_SMB_TCKSEL(base) (BME_UBFX8(&I2C_SMB_REG(base), I2C_SMB_TCKSEL_SHIFT, I2C_SMB_TCKSEL_WIDTH))

/*! @brief Set the TCKSEL field to a new value. */
#define I2C_WR_SMB_TCKSEL(base, value) (I2C_RMW_SMB(base, (I2C_SMB_TCKSEL_MASK | I2C_SMB_SHTF2_MASK | I2C_SMB_SLTF_MASK), I2C_SMB_TCKSEL(value)))
#define I2C_BWR_SMB_TCKSEL(base, value) (BME_BFI8(&I2C_SMB_REG(base), ((uint8_t)(value) << I2C_SMB_TCKSEL_SHIFT), I2C_SMB_TCKSEL_SHIFT, I2C_SMB_TCKSEL_WIDTH))
/*@}*/

/*!
 * @name Register I2C_SMB, field SIICAEN[5] (RW)
 *
 * Enables or disables SMBus device default address.
 *
 * Values:
 * - 0b0 - I2C address register 2 matching is disabled
 * - 0b1 - I2C address register 2 matching is enabled
 */
/*@{*/
/*! @brief Read current value of the I2C_SMB_SIICAEN field. */
#define I2C_RD_SMB_SIICAEN(base) ((I2C_SMB_REG(base) & I2C_SMB_SIICAEN_MASK) >> I2C_SMB_SIICAEN_SHIFT)
#define I2C_BRD_SMB_SIICAEN(base) (BME_UBFX8(&I2C_SMB_REG(base), I2C_SMB_SIICAEN_SHIFT, I2C_SMB_SIICAEN_WIDTH))

/*! @brief Set the SIICAEN field to a new value. */
#define I2C_WR_SMB_SIICAEN(base, value) (I2C_RMW_SMB(base, (I2C_SMB_SIICAEN_MASK | I2C_SMB_SHTF2_MASK | I2C_SMB_SLTF_MASK), I2C_SMB_SIICAEN(value)))
#define I2C_BWR_SMB_SIICAEN(base, value) (BME_BFI8(&I2C_SMB_REG(base), ((uint8_t)(value) << I2C_SMB_SIICAEN_SHIFT), I2C_SMB_SIICAEN_SHIFT, I2C_SMB_SIICAEN_WIDTH))
/*@}*/

/*!
 * @name Register I2C_SMB, field ALERTEN[6] (RW)
 *
 * Enables or disables SMBus alert response address matching. After the host
 * responds to a device that used the alert response address, you must use software
 * to put the device's address on the bus. The alert protocol is described in the
 * SMBus specification.
 *
 * Values:
 * - 0b0 - SMBus alert response address matching is disabled
 * - 0b1 - SMBus alert response address matching is enabled
 */
/*@{*/
/*! @brief Read current value of the I2C_SMB_ALERTEN field. */
#define I2C_RD_SMB_ALERTEN(base) ((I2C_SMB_REG(base) & I2C_SMB_ALERTEN_MASK) >> I2C_SMB_ALERTEN_SHIFT)
#define I2C_BRD_SMB_ALERTEN(base) (BME_UBFX8(&I2C_SMB_REG(base), I2C_SMB_ALERTEN_SHIFT, I2C_SMB_ALERTEN_WIDTH))

/*! @brief Set the ALERTEN field to a new value. */
#define I2C_WR_SMB_ALERTEN(base, value) (I2C_RMW_SMB(base, (I2C_SMB_ALERTEN_MASK | I2C_SMB_SHTF2_MASK | I2C_SMB_SLTF_MASK), I2C_SMB_ALERTEN(value)))
#define I2C_BWR_SMB_ALERTEN(base, value) (BME_BFI8(&I2C_SMB_REG(base), ((uint8_t)(value) << I2C_SMB_ALERTEN_SHIFT), I2C_SMB_ALERTEN_SHIFT, I2C_SMB_ALERTEN_WIDTH))
/*@}*/

/*!
 * @name Register I2C_SMB, field FACK[7] (RW)
 *
 * For SMBus packet error checking, the CPU must be able to issue an ACK or NACK
 * according to the result of receiving data byte.
 *
 * Values:
 * - 0b0 - An ACK or NACK is sent on the following receiving data byte
 * - 0b1 - Writing 0 to TXAK after receiving a data byte generates an ACK.
 *     Writing 1 to TXAK after receiving a data byte generates a NACK.
 */
/*@{*/
/*! @brief Read current value of the I2C_SMB_FACK field. */
#define I2C_RD_SMB_FACK(base) ((I2C_SMB_REG(base) & I2C_SMB_FACK_MASK) >> I2C_SMB_FACK_SHIFT)
#define I2C_BRD_SMB_FACK(base) (BME_UBFX8(&I2C_SMB_REG(base), I2C_SMB_FACK_SHIFT, I2C_SMB_FACK_WIDTH))

/*! @brief Set the FACK field to a new value. */
#define I2C_WR_SMB_FACK(base, value) (I2C_RMW_SMB(base, (I2C_SMB_FACK_MASK | I2C_SMB_SHTF2_MASK | I2C_SMB_SLTF_MASK), I2C_SMB_FACK(value)))
#define I2C_BWR_SMB_FACK(base, value) (BME_BFI8(&I2C_SMB_REG(base), ((uint8_t)(value) << I2C_SMB_FACK_SHIFT), I2C_SMB_FACK_SHIFT, I2C_SMB_FACK_WIDTH))
/*@}*/

/*******************************************************************************
 * I2C_A2 - I2C Address Register 2
 ******************************************************************************/

/*!
 * @brief I2C_A2 - I2C Address Register 2 (RW)
 *
 * Reset value: 0xC2U
 */
/*!
 * @name Constants and macros for entire I2C_A2 register
 */
/*@{*/
#define I2C_RD_A2(base)          (I2C_A2_REG(base))
#define I2C_WR_A2(base, value)   (I2C_A2_REG(base) = (value))
#define I2C_RMW_A2(base, mask, value) (I2C_WR_A2(base, (I2C_RD_A2(base) & ~(mask)) | (value)))
#define I2C_SET_A2(base, value)  (BME_OR8(&I2C_A2_REG(base), (uint8_t)(value)))
#define I2C_CLR_A2(base, value)  (BME_AND8(&I2C_A2_REG(base), (uint8_t)(~(value))))
#define I2C_TOG_A2(base, value)  (BME_XOR8(&I2C_A2_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual I2C_A2 bitfields
 */

/*!
 * @name Register I2C_A2, field SAD[7:1] (RW)
 *
 * Contains the slave address used by the SMBus. This field is used on the
 * device default address or other related addresses.
 */
/*@{*/
/*! @brief Read current value of the I2C_A2_SAD field. */
#define I2C_RD_A2_SAD(base)  ((I2C_A2_REG(base) & I2C_A2_SAD_MASK) >> I2C_A2_SAD_SHIFT)
#define I2C_BRD_A2_SAD(base) (BME_UBFX8(&I2C_A2_REG(base), I2C_A2_SAD_SHIFT, I2C_A2_SAD_WIDTH))

/*! @brief Set the SAD field to a new value. */
#define I2C_WR_A2_SAD(base, value) (I2C_RMW_A2(base, I2C_A2_SAD_MASK, I2C_A2_SAD(value)))
#define I2C_BWR_A2_SAD(base, value) (BME_BFI8(&I2C_A2_REG(base), ((uint8_t)(value) << I2C_A2_SAD_SHIFT), I2C_A2_SAD_SHIFT, I2C_A2_SAD_WIDTH))
/*@}*/

/*******************************************************************************
 * I2C_SLTH - I2C SCL Low Timeout Register High
 ******************************************************************************/

/*!
 * @brief I2C_SLTH - I2C SCL Low Timeout Register High (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire I2C_SLTH register
 */
/*@{*/
#define I2C_RD_SLTH(base)        (I2C_SLTH_REG(base))
#define I2C_WR_SLTH(base, value) (I2C_SLTH_REG(base) = (value))
#define I2C_RMW_SLTH(base, mask, value) (I2C_WR_SLTH(base, (I2C_RD_SLTH(base) & ~(mask)) | (value)))
#define I2C_SET_SLTH(base, value) (BME_OR8(&I2C_SLTH_REG(base), (uint8_t)(value)))
#define I2C_CLR_SLTH(base, value) (BME_AND8(&I2C_SLTH_REG(base), (uint8_t)(~(value))))
#define I2C_TOG_SLTH(base, value) (BME_XOR8(&I2C_SLTH_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * I2C_SLTL - I2C SCL Low Timeout Register Low
 ******************************************************************************/

/*!
 * @brief I2C_SLTL - I2C SCL Low Timeout Register Low (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire I2C_SLTL register
 */
/*@{*/
#define I2C_RD_SLTL(base)        (I2C_SLTL_REG(base))
#define I2C_WR_SLTL(base, value) (I2C_SLTL_REG(base) = (value))
#define I2C_RMW_SLTL(base, mask, value) (I2C_WR_SLTL(base, (I2C_RD_SLTL(base) & ~(mask)) | (value)))
#define I2C_SET_SLTL(base, value) (BME_OR8(&I2C_SLTL_REG(base), (uint8_t)(value)))
#define I2C_CLR_SLTL(base, value) (BME_AND8(&I2C_SLTL_REG(base), (uint8_t)(~(value))))
#define I2C_TOG_SLTL(base, value) (BME_XOR8(&I2C_SLTL_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * I2C_S2 - I2C Status register 2
 ******************************************************************************/

/*!
 * @brief I2C_S2 - I2C Status register 2 (RW)
 *
 * Reset value: 0x01U
 */
/*!
 * @name Constants and macros for entire I2C_S2 register
 */
/*@{*/
#define I2C_RD_S2(base)          (I2C_S2_REG(base))
#define I2C_WR_S2(base, value)   (I2C_S2_REG(base) = (value))
#define I2C_RMW_S2(base, mask, value) (I2C_WR_S2(base, (I2C_RD_S2(base) & ~(mask)) | (value)))
#define I2C_SET_S2(base, value)  (BME_OR8(&I2C_S2_REG(base), (uint8_t)(value)))
#define I2C_CLR_S2(base, value)  (BME_AND8(&I2C_S2_REG(base), (uint8_t)(~(value))))
#define I2C_TOG_S2(base, value)  (BME_XOR8(&I2C_S2_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual I2C_S2 bitfields
 */

/*!
 * @name Register I2C_S2, field EMPTY[0] (RO)
 *
 * Indicates if the Tx or Rx buffer is empty.
 *
 * Values:
 * - 0b0 - Tx or Rx buffer is not empty and cannot be written to, that is new
 *     data cannot be loaded into the buffer.
 * - 0b1 - Tx or Rx buffer is empty and can be written to, that is new data can
 *     be loaded into the buffer.
 */
/*@{*/
/*! @brief Read current value of the I2C_S2_EMPTY field. */
#define I2C_RD_S2_EMPTY(base) ((I2C_S2_REG(base) & I2C_S2_EMPTY_MASK) >> I2C_S2_EMPTY_SHIFT)
#define I2C_BRD_S2_EMPTY(base) (BME_UBFX8(&I2C_S2_REG(base), I2C_S2_EMPTY_SHIFT, I2C_S2_EMPTY_WIDTH))
/*@}*/

/*!
 * @name Register I2C_S2, field ERROR[1] (W1C)
 *
 * Indicates if there are read or write errors with the Tx and Rx buffers.
 *
 * Values:
 * - 0b0 - The buffer is not full and all write/read operations have no errors.
 * - 0b1 - There are 3 or more write/read errors during the data transfer phase
 *     (when the Empty flag is not set and the buffer is busy).
 */
/*@{*/
/*! @brief Read current value of the I2C_S2_ERROR field. */
#define I2C_RD_S2_ERROR(base) ((I2C_S2_REG(base) & I2C_S2_ERROR_MASK) >> I2C_S2_ERROR_SHIFT)
#define I2C_BRD_S2_ERROR(base) (BME_UBFX8(&I2C_S2_REG(base), I2C_S2_ERROR_SHIFT, I2C_S2_ERROR_WIDTH))

/*! @brief Set the ERROR field to a new value. */
#define I2C_WR_S2_ERROR(base, value) (I2C_RMW_S2(base, I2C_S2_ERROR_MASK, I2C_S2_ERROR(value)))
#define I2C_BWR_S2_ERROR(base, value) (BME_BFI8(&I2C_S2_REG(base), ((uint8_t)(value) << I2C_S2_ERROR_SHIFT), I2C_S2_ERROR_SHIFT, I2C_S2_ERROR_WIDTH))
/*@}*/

/*
 * MK82F25615 I2S
 *
 * Inter-IC Sound / Synchronous Audio Interface
 *
 * Registers defined in this header file:
 * - I2S_TCSR - SAI Transmit Control Register
 * - I2S_TCR1 - SAI Transmit Configuration 1 Register
 * - I2S_TCR2 - SAI Transmit Configuration 2 Register
 * - I2S_TCR3 - SAI Transmit Configuration 3 Register
 * - I2S_TCR4 - SAI Transmit Configuration 4 Register
 * - I2S_TCR5 - SAI Transmit Configuration 5 Register
 * - I2S_TDR - SAI Transmit Data Register
 * - I2S_TFR - SAI Transmit FIFO Register
 * - I2S_TMR - SAI Transmit Mask Register
 * - I2S_RCSR - SAI Receive Control Register
 * - I2S_RCR1 - SAI Receive Configuration 1 Register
 * - I2S_RCR2 - SAI Receive Configuration 2 Register
 * - I2S_RCR3 - SAI Receive Configuration 3 Register
 * - I2S_RCR4 - SAI Receive Configuration 4 Register
 * - I2S_RCR5 - SAI Receive Configuration 5 Register
 * - I2S_RDR - SAI Receive Data Register
 * - I2S_RFR - SAI Receive FIFO Register
 * - I2S_RMR - SAI Receive Mask Register
 * - I2S_MCR - SAI MCLK Control Register
 * - I2S_MDR - SAI MCLK Divide Register
 */

#define I2S_INSTANCE_COUNT (1U) /*!< Number of instances of the I2S module. */
#define I2S0_IDX (0U) /*!< Instance number for I2S0. */

/*******************************************************************************
 * I2S_TCSR - SAI Transmit Control Register
 ******************************************************************************/

/*!
 * @brief I2S_TCSR - SAI Transmit Control Register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire I2S_TCSR register
 */
/*@{*/
#define I2S_RD_TCSR(base)        (I2S_TCSR_REG(base))
#define I2S_WR_TCSR(base, value) (I2S_TCSR_REG(base) = (value))
#define I2S_RMW_TCSR(base, mask, value) (I2S_WR_TCSR(base, (I2S_RD_TCSR(base) & ~(mask)) | (value)))
#define I2S_SET_TCSR(base, value) (BME_OR32(&I2S_TCSR_REG(base), (uint32_t)(value)))
#define I2S_CLR_TCSR(base, value) (BME_AND32(&I2S_TCSR_REG(base), (uint32_t)(~(value))))
#define I2S_TOG_TCSR(base, value) (BME_XOR32(&I2S_TCSR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual I2S_TCSR bitfields
 */

/*!
 * @name Register I2S_TCSR, field FRDE[0] (RW)
 *
 * Enables/disables DMA requests.
 *
 * Values:
 * - 0b0 - Disables the DMA request.
 * - 0b1 - Enables the DMA request.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCSR_FRDE field. */
#define I2S_RD_TCSR_FRDE(base) ((I2S_TCSR_REG(base) & I2S_TCSR_FRDE_MASK) >> I2S_TCSR_FRDE_SHIFT)
#define I2S_BRD_TCSR_FRDE(base) (BME_UBFX32(&I2S_TCSR_REG(base), I2S_TCSR_FRDE_SHIFT, I2S_TCSR_FRDE_WIDTH))

/*! @brief Set the FRDE field to a new value. */
#define I2S_WR_TCSR_FRDE(base, value) (I2S_RMW_TCSR(base, (I2S_TCSR_FRDE_MASK | I2S_TCSR_FEF_MASK | I2S_TCSR_SEF_MASK | I2S_TCSR_WSF_MASK), I2S_TCSR_FRDE(value)))
#define I2S_BWR_TCSR_FRDE(base, value) (BME_BFI32(&I2S_TCSR_REG(base), ((uint32_t)(value) << I2S_TCSR_FRDE_SHIFT), I2S_TCSR_FRDE_SHIFT, I2S_TCSR_FRDE_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCSR, field FWDE[1] (RW)
 *
 * Enables/disables DMA requests.
 *
 * Values:
 * - 0b0 - Disables the DMA request.
 * - 0b1 - Enables the DMA request.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCSR_FWDE field. */
#define I2S_RD_TCSR_FWDE(base) ((I2S_TCSR_REG(base) & I2S_TCSR_FWDE_MASK) >> I2S_TCSR_FWDE_SHIFT)
#define I2S_BRD_TCSR_FWDE(base) (BME_UBFX32(&I2S_TCSR_REG(base), I2S_TCSR_FWDE_SHIFT, I2S_TCSR_FWDE_WIDTH))

/*! @brief Set the FWDE field to a new value. */
#define I2S_WR_TCSR_FWDE(base, value) (I2S_RMW_TCSR(base, (I2S_TCSR_FWDE_MASK | I2S_TCSR_FEF_MASK | I2S_TCSR_SEF_MASK | I2S_TCSR_WSF_MASK), I2S_TCSR_FWDE(value)))
#define I2S_BWR_TCSR_FWDE(base, value) (BME_BFI32(&I2S_TCSR_REG(base), ((uint32_t)(value) << I2S_TCSR_FWDE_SHIFT), I2S_TCSR_FWDE_SHIFT, I2S_TCSR_FWDE_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCSR, field FRIE[8] (RW)
 *
 * Enables/disables FIFO request interrupts.
 *
 * Values:
 * - 0b0 - Disables the interrupt.
 * - 0b1 - Enables the interrupt.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCSR_FRIE field. */
#define I2S_RD_TCSR_FRIE(base) ((I2S_TCSR_REG(base) & I2S_TCSR_FRIE_MASK) >> I2S_TCSR_FRIE_SHIFT)
#define I2S_BRD_TCSR_FRIE(base) (BME_UBFX32(&I2S_TCSR_REG(base), I2S_TCSR_FRIE_SHIFT, I2S_TCSR_FRIE_WIDTH))

/*! @brief Set the FRIE field to a new value. */
#define I2S_WR_TCSR_FRIE(base, value) (I2S_RMW_TCSR(base, (I2S_TCSR_FRIE_MASK | I2S_TCSR_FEF_MASK | I2S_TCSR_SEF_MASK | I2S_TCSR_WSF_MASK), I2S_TCSR_FRIE(value)))
#define I2S_BWR_TCSR_FRIE(base, value) (BME_BFI32(&I2S_TCSR_REG(base), ((uint32_t)(value) << I2S_TCSR_FRIE_SHIFT), I2S_TCSR_FRIE_SHIFT, I2S_TCSR_FRIE_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCSR, field FWIE[9] (RW)
 *
 * Enables/disables FIFO warning interrupts.
 *
 * Values:
 * - 0b0 - Disables the interrupt.
 * - 0b1 - Enables the interrupt.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCSR_FWIE field. */
#define I2S_RD_TCSR_FWIE(base) ((I2S_TCSR_REG(base) & I2S_TCSR_FWIE_MASK) >> I2S_TCSR_FWIE_SHIFT)
#define I2S_BRD_TCSR_FWIE(base) (BME_UBFX32(&I2S_TCSR_REG(base), I2S_TCSR_FWIE_SHIFT, I2S_TCSR_FWIE_WIDTH))

/*! @brief Set the FWIE field to a new value. */
#define I2S_WR_TCSR_FWIE(base, value) (I2S_RMW_TCSR(base, (I2S_TCSR_FWIE_MASK | I2S_TCSR_FEF_MASK | I2S_TCSR_SEF_MASK | I2S_TCSR_WSF_MASK), I2S_TCSR_FWIE(value)))
#define I2S_BWR_TCSR_FWIE(base, value) (BME_BFI32(&I2S_TCSR_REG(base), ((uint32_t)(value) << I2S_TCSR_FWIE_SHIFT), I2S_TCSR_FWIE_SHIFT, I2S_TCSR_FWIE_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCSR, field FEIE[10] (RW)
 *
 * Enables/disables FIFO error interrupts.
 *
 * Values:
 * - 0b0 - Disables the interrupt.
 * - 0b1 - Enables the interrupt.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCSR_FEIE field. */
#define I2S_RD_TCSR_FEIE(base) ((I2S_TCSR_REG(base) & I2S_TCSR_FEIE_MASK) >> I2S_TCSR_FEIE_SHIFT)
#define I2S_BRD_TCSR_FEIE(base) (BME_UBFX32(&I2S_TCSR_REG(base), I2S_TCSR_FEIE_SHIFT, I2S_TCSR_FEIE_WIDTH))

/*! @brief Set the FEIE field to a new value. */
#define I2S_WR_TCSR_FEIE(base, value) (I2S_RMW_TCSR(base, (I2S_TCSR_FEIE_MASK | I2S_TCSR_FEF_MASK | I2S_TCSR_SEF_MASK | I2S_TCSR_WSF_MASK), I2S_TCSR_FEIE(value)))
#define I2S_BWR_TCSR_FEIE(base, value) (BME_BFI32(&I2S_TCSR_REG(base), ((uint32_t)(value) << I2S_TCSR_FEIE_SHIFT), I2S_TCSR_FEIE_SHIFT, I2S_TCSR_FEIE_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCSR, field SEIE[11] (RW)
 *
 * Enables/disables sync error interrupts.
 *
 * Values:
 * - 0b0 - Disables interrupt.
 * - 0b1 - Enables interrupt.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCSR_SEIE field. */
#define I2S_RD_TCSR_SEIE(base) ((I2S_TCSR_REG(base) & I2S_TCSR_SEIE_MASK) >> I2S_TCSR_SEIE_SHIFT)
#define I2S_BRD_TCSR_SEIE(base) (BME_UBFX32(&I2S_TCSR_REG(base), I2S_TCSR_SEIE_SHIFT, I2S_TCSR_SEIE_WIDTH))

/*! @brief Set the SEIE field to a new value. */
#define I2S_WR_TCSR_SEIE(base, value) (I2S_RMW_TCSR(base, (I2S_TCSR_SEIE_MASK | I2S_TCSR_FEF_MASK | I2S_TCSR_SEF_MASK | I2S_TCSR_WSF_MASK), I2S_TCSR_SEIE(value)))
#define I2S_BWR_TCSR_SEIE(base, value) (BME_BFI32(&I2S_TCSR_REG(base), ((uint32_t)(value) << I2S_TCSR_SEIE_SHIFT), I2S_TCSR_SEIE_SHIFT, I2S_TCSR_SEIE_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCSR, field WSIE[12] (RW)
 *
 * Enables/disables word start interrupts.
 *
 * Values:
 * - 0b0 - Disables interrupt.
 * - 0b1 - Enables interrupt.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCSR_WSIE field. */
#define I2S_RD_TCSR_WSIE(base) ((I2S_TCSR_REG(base) & I2S_TCSR_WSIE_MASK) >> I2S_TCSR_WSIE_SHIFT)
#define I2S_BRD_TCSR_WSIE(base) (BME_UBFX32(&I2S_TCSR_REG(base), I2S_TCSR_WSIE_SHIFT, I2S_TCSR_WSIE_WIDTH))

/*! @brief Set the WSIE field to a new value. */
#define I2S_WR_TCSR_WSIE(base, value) (I2S_RMW_TCSR(base, (I2S_TCSR_WSIE_MASK | I2S_TCSR_FEF_MASK | I2S_TCSR_SEF_MASK | I2S_TCSR_WSF_MASK), I2S_TCSR_WSIE(value)))
#define I2S_BWR_TCSR_WSIE(base, value) (BME_BFI32(&I2S_TCSR_REG(base), ((uint32_t)(value) << I2S_TCSR_WSIE_SHIFT), I2S_TCSR_WSIE_SHIFT, I2S_TCSR_WSIE_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCSR, field FRF[16] (RO)
 *
 * Indicates that the number of words in an enabled transmit channel FIFO is
 * less than or equal to the transmit FIFO watermark.
 *
 * Values:
 * - 0b0 - Transmit FIFO watermark has not been reached.
 * - 0b1 - Transmit FIFO watermark has been reached.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCSR_FRF field. */
#define I2S_RD_TCSR_FRF(base) ((I2S_TCSR_REG(base) & I2S_TCSR_FRF_MASK) >> I2S_TCSR_FRF_SHIFT)
#define I2S_BRD_TCSR_FRF(base) (BME_UBFX32(&I2S_TCSR_REG(base), I2S_TCSR_FRF_SHIFT, I2S_TCSR_FRF_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCSR, field FWF[17] (RO)
 *
 * Indicates that an enabled transmit FIFO is empty.
 *
 * Values:
 * - 0b0 - No enabled transmit FIFO is empty.
 * - 0b1 - Enabled transmit FIFO is empty.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCSR_FWF field. */
#define I2S_RD_TCSR_FWF(base) ((I2S_TCSR_REG(base) & I2S_TCSR_FWF_MASK) >> I2S_TCSR_FWF_SHIFT)
#define I2S_BRD_TCSR_FWF(base) (BME_UBFX32(&I2S_TCSR_REG(base), I2S_TCSR_FWF_SHIFT, I2S_TCSR_FWF_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCSR, field FEF[18] (W1C)
 *
 * Indicates that an enabled transmit FIFO has underrun. Write a logic 1 to this
 * field to clear this flag.
 *
 * Values:
 * - 0b0 - Transmit underrun not detected.
 * - 0b1 - Transmit underrun detected.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCSR_FEF field. */
#define I2S_RD_TCSR_FEF(base) ((I2S_TCSR_REG(base) & I2S_TCSR_FEF_MASK) >> I2S_TCSR_FEF_SHIFT)
#define I2S_BRD_TCSR_FEF(base) (BME_UBFX32(&I2S_TCSR_REG(base), I2S_TCSR_FEF_SHIFT, I2S_TCSR_FEF_WIDTH))

/*! @brief Set the FEF field to a new value. */
#define I2S_WR_TCSR_FEF(base, value) (I2S_RMW_TCSR(base, (I2S_TCSR_FEF_MASK | I2S_TCSR_SEF_MASK | I2S_TCSR_WSF_MASK), I2S_TCSR_FEF(value)))
#define I2S_BWR_TCSR_FEF(base, value) (BME_BFI32(&I2S_TCSR_REG(base), ((uint32_t)(value) << I2S_TCSR_FEF_SHIFT), I2S_TCSR_FEF_SHIFT, I2S_TCSR_FEF_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCSR, field SEF[19] (W1C)
 *
 * Indicates that an error in the externally-generated frame sync has been
 * detected. Write a logic 1 to this field to clear this flag.
 *
 * Values:
 * - 0b0 - Sync error not detected.
 * - 0b1 - Frame sync error detected.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCSR_SEF field. */
#define I2S_RD_TCSR_SEF(base) ((I2S_TCSR_REG(base) & I2S_TCSR_SEF_MASK) >> I2S_TCSR_SEF_SHIFT)
#define I2S_BRD_TCSR_SEF(base) (BME_UBFX32(&I2S_TCSR_REG(base), I2S_TCSR_SEF_SHIFT, I2S_TCSR_SEF_WIDTH))

/*! @brief Set the SEF field to a new value. */
#define I2S_WR_TCSR_SEF(base, value) (I2S_RMW_TCSR(base, (I2S_TCSR_SEF_MASK | I2S_TCSR_FEF_MASK | I2S_TCSR_WSF_MASK), I2S_TCSR_SEF(value)))
#define I2S_BWR_TCSR_SEF(base, value) (BME_BFI32(&I2S_TCSR_REG(base), ((uint32_t)(value) << I2S_TCSR_SEF_SHIFT), I2S_TCSR_SEF_SHIFT, I2S_TCSR_SEF_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCSR, field WSF[20] (W1C)
 *
 * Indicates that the start of the configured word has been detected. Write a
 * logic 1 to this field to clear this flag.
 *
 * Values:
 * - 0b0 - Start of word not detected.
 * - 0b1 - Start of word detected.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCSR_WSF field. */
#define I2S_RD_TCSR_WSF(base) ((I2S_TCSR_REG(base) & I2S_TCSR_WSF_MASK) >> I2S_TCSR_WSF_SHIFT)
#define I2S_BRD_TCSR_WSF(base) (BME_UBFX32(&I2S_TCSR_REG(base), I2S_TCSR_WSF_SHIFT, I2S_TCSR_WSF_WIDTH))

/*! @brief Set the WSF field to a new value. */
#define I2S_WR_TCSR_WSF(base, value) (I2S_RMW_TCSR(base, (I2S_TCSR_WSF_MASK | I2S_TCSR_FEF_MASK | I2S_TCSR_SEF_MASK), I2S_TCSR_WSF(value)))
#define I2S_BWR_TCSR_WSF(base, value) (BME_BFI32(&I2S_TCSR_REG(base), ((uint32_t)(value) << I2S_TCSR_WSF_SHIFT), I2S_TCSR_WSF_SHIFT, I2S_TCSR_WSF_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCSR, field SR[24] (RW)
 *
 * When set, resets the internal transmitter logic including the FIFO pointers.
 * Software-visible registers are not affected, except for the status registers.
 *
 * Values:
 * - 0b0 - No effect.
 * - 0b1 - Software reset.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCSR_SR field. */
#define I2S_RD_TCSR_SR(base) ((I2S_TCSR_REG(base) & I2S_TCSR_SR_MASK) >> I2S_TCSR_SR_SHIFT)
#define I2S_BRD_TCSR_SR(base) (BME_UBFX32(&I2S_TCSR_REG(base), I2S_TCSR_SR_SHIFT, I2S_TCSR_SR_WIDTH))

/*! @brief Set the SR field to a new value. */
#define I2S_WR_TCSR_SR(base, value) (I2S_RMW_TCSR(base, (I2S_TCSR_SR_MASK | I2S_TCSR_FEF_MASK | I2S_TCSR_SEF_MASK | I2S_TCSR_WSF_MASK), I2S_TCSR_SR(value)))
#define I2S_BWR_TCSR_SR(base, value) (BME_BFI32(&I2S_TCSR_REG(base), ((uint32_t)(value) << I2S_TCSR_SR_SHIFT), I2S_TCSR_SR_SHIFT, I2S_TCSR_SR_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCSR, field FR[25] (WORZ)
 *
 * Resets the FIFO pointers. Reading this field will always return zero. FIFO
 * pointers should only be reset when the transmitter is disabled or the FIFO error
 * flag is set.
 *
 * Values:
 * - 0b0 - No effect.
 * - 0b1 - FIFO reset.
 */
/*@{*/
/*! @brief Set the FR field to a new value. */
#define I2S_WR_TCSR_FR(base, value) (I2S_RMW_TCSR(base, (I2S_TCSR_FR_MASK | I2S_TCSR_FEF_MASK | I2S_TCSR_SEF_MASK | I2S_TCSR_WSF_MASK), I2S_TCSR_FR(value)))
#define I2S_BWR_TCSR_FR(base, value) (BME_BFI32(&I2S_TCSR_REG(base), ((uint32_t)(value) << I2S_TCSR_FR_SHIFT), I2S_TCSR_FR_SHIFT, I2S_TCSR_FR_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCSR, field BCE[28] (RW)
 *
 * Enables the transmit bit clock, separately from the TE. This field is
 * automatically set whenever TE is set. When software clears this field, the transmit
 * bit clock remains enabled, and this bit remains set, until the end of the
 * current frame.
 *
 * Values:
 * - 0b0 - Transmit bit clock is disabled.
 * - 0b1 - Transmit bit clock is enabled.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCSR_BCE field. */
#define I2S_RD_TCSR_BCE(base) ((I2S_TCSR_REG(base) & I2S_TCSR_BCE_MASK) >> I2S_TCSR_BCE_SHIFT)
#define I2S_BRD_TCSR_BCE(base) (BME_UBFX32(&I2S_TCSR_REG(base), I2S_TCSR_BCE_SHIFT, I2S_TCSR_BCE_WIDTH))

/*! @brief Set the BCE field to a new value. */
#define I2S_WR_TCSR_BCE(base, value) (I2S_RMW_TCSR(base, (I2S_TCSR_BCE_MASK | I2S_TCSR_FEF_MASK | I2S_TCSR_SEF_MASK | I2S_TCSR_WSF_MASK), I2S_TCSR_BCE(value)))
#define I2S_BWR_TCSR_BCE(base, value) (BME_BFI32(&I2S_TCSR_REG(base), ((uint32_t)(value) << I2S_TCSR_BCE_SHIFT), I2S_TCSR_BCE_SHIFT, I2S_TCSR_BCE_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCSR, field DBGE[29] (RW)
 *
 * Enables/disables transmitter operation in Debug mode. The transmit bit clock
 * is not affected by debug mode.
 *
 * Values:
 * - 0b0 - Transmitter is disabled in Debug mode, after completing the current
 *     frame.
 * - 0b1 - Transmitter is enabled in Debug mode.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCSR_DBGE field. */
#define I2S_RD_TCSR_DBGE(base) ((I2S_TCSR_REG(base) & I2S_TCSR_DBGE_MASK) >> I2S_TCSR_DBGE_SHIFT)
#define I2S_BRD_TCSR_DBGE(base) (BME_UBFX32(&I2S_TCSR_REG(base), I2S_TCSR_DBGE_SHIFT, I2S_TCSR_DBGE_WIDTH))

/*! @brief Set the DBGE field to a new value. */
#define I2S_WR_TCSR_DBGE(base, value) (I2S_RMW_TCSR(base, (I2S_TCSR_DBGE_MASK | I2S_TCSR_FEF_MASK | I2S_TCSR_SEF_MASK | I2S_TCSR_WSF_MASK), I2S_TCSR_DBGE(value)))
#define I2S_BWR_TCSR_DBGE(base, value) (BME_BFI32(&I2S_TCSR_REG(base), ((uint32_t)(value) << I2S_TCSR_DBGE_SHIFT), I2S_TCSR_DBGE_SHIFT, I2S_TCSR_DBGE_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCSR, field STOPE[30] (RW)
 *
 * Configures transmitter operation in Stop mode. This field is ignored and the
 * transmitter is disabled in all low-leakage stop modes.
 *
 * Values:
 * - 0b0 - Transmitter disabled in Stop mode.
 * - 0b1 - Transmitter enabled in Stop mode.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCSR_STOPE field. */
#define I2S_RD_TCSR_STOPE(base) ((I2S_TCSR_REG(base) & I2S_TCSR_STOPE_MASK) >> I2S_TCSR_STOPE_SHIFT)
#define I2S_BRD_TCSR_STOPE(base) (BME_UBFX32(&I2S_TCSR_REG(base), I2S_TCSR_STOPE_SHIFT, I2S_TCSR_STOPE_WIDTH))

/*! @brief Set the STOPE field to a new value. */
#define I2S_WR_TCSR_STOPE(base, value) (I2S_RMW_TCSR(base, (I2S_TCSR_STOPE_MASK | I2S_TCSR_FEF_MASK | I2S_TCSR_SEF_MASK | I2S_TCSR_WSF_MASK), I2S_TCSR_STOPE(value)))
#define I2S_BWR_TCSR_STOPE(base, value) (BME_BFI32(&I2S_TCSR_REG(base), ((uint32_t)(value) << I2S_TCSR_STOPE_SHIFT), I2S_TCSR_STOPE_SHIFT, I2S_TCSR_STOPE_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCSR, field TE[31] (RW)
 *
 * Enables/disables the transmitter. When software clears this field, the
 * transmitter remains enabled, and this bit remains set, until the end of the current
 * frame.
 *
 * Values:
 * - 0b0 - Transmitter is disabled.
 * - 0b1 - Transmitter is enabled, or transmitter has been disabled and has not
 *     yet reached end of frame.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCSR_TE field. */
#define I2S_RD_TCSR_TE(base) ((I2S_TCSR_REG(base) & I2S_TCSR_TE_MASK) >> I2S_TCSR_TE_SHIFT)
#define I2S_BRD_TCSR_TE(base) (BME_UBFX32(&I2S_TCSR_REG(base), I2S_TCSR_TE_SHIFT, I2S_TCSR_TE_WIDTH))

/*! @brief Set the TE field to a new value. */
#define I2S_WR_TCSR_TE(base, value) (I2S_RMW_TCSR(base, (I2S_TCSR_TE_MASK | I2S_TCSR_FEF_MASK | I2S_TCSR_SEF_MASK | I2S_TCSR_WSF_MASK), I2S_TCSR_TE(value)))
#define I2S_BWR_TCSR_TE(base, value) (BME_BFI32(&I2S_TCSR_REG(base), ((uint32_t)(value) << I2S_TCSR_TE_SHIFT), I2S_TCSR_TE_SHIFT, I2S_TCSR_TE_WIDTH))
/*@}*/

/*******************************************************************************
 * I2S_TCR1 - SAI Transmit Configuration 1 Register
 ******************************************************************************/

/*!
 * @brief I2S_TCR1 - SAI Transmit Configuration 1 Register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire I2S_TCR1 register
 */
/*@{*/
#define I2S_RD_TCR1(base)        (I2S_TCR1_REG(base))
#define I2S_WR_TCR1(base, value) (I2S_TCR1_REG(base) = (value))
#define I2S_RMW_TCR1(base, mask, value) (I2S_WR_TCR1(base, (I2S_RD_TCR1(base) & ~(mask)) | (value)))
#define I2S_SET_TCR1(base, value) (BME_OR32(&I2S_TCR1_REG(base), (uint32_t)(value)))
#define I2S_CLR_TCR1(base, value) (BME_AND32(&I2S_TCR1_REG(base), (uint32_t)(~(value))))
#define I2S_TOG_TCR1(base, value) (BME_XOR32(&I2S_TCR1_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual I2S_TCR1 bitfields
 */

/*!
 * @name Register I2S_TCR1, field TFW[2:0] (RW)
 *
 * Configures the watermark level for all enabled transmit channels.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCR1_TFW field. */
#define I2S_RD_TCR1_TFW(base) ((I2S_TCR1_REG(base) & I2S_TCR1_TFW_MASK) >> I2S_TCR1_TFW_SHIFT)
#define I2S_BRD_TCR1_TFW(base) (BME_UBFX32(&I2S_TCR1_REG(base), I2S_TCR1_TFW_SHIFT, I2S_TCR1_TFW_WIDTH))

/*! @brief Set the TFW field to a new value. */
#define I2S_WR_TCR1_TFW(base, value) (I2S_RMW_TCR1(base, I2S_TCR1_TFW_MASK, I2S_TCR1_TFW(value)))
#define I2S_BWR_TCR1_TFW(base, value) (BME_BFI32(&I2S_TCR1_REG(base), ((uint32_t)(value) << I2S_TCR1_TFW_SHIFT), I2S_TCR1_TFW_SHIFT, I2S_TCR1_TFW_WIDTH))
/*@}*/

/*******************************************************************************
 * I2S_TCR2 - SAI Transmit Configuration 2 Register
 ******************************************************************************/

/*!
 * @brief I2S_TCR2 - SAI Transmit Configuration 2 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register must not be altered when TCSR[TE] is set.
 */
/*!
 * @name Constants and macros for entire I2S_TCR2 register
 */
/*@{*/
#define I2S_RD_TCR2(base)        (I2S_TCR2_REG(base))
#define I2S_WR_TCR2(base, value) (I2S_TCR2_REG(base) = (value))
#define I2S_RMW_TCR2(base, mask, value) (I2S_WR_TCR2(base, (I2S_RD_TCR2(base) & ~(mask)) | (value)))
#define I2S_SET_TCR2(base, value) (BME_OR32(&I2S_TCR2_REG(base), (uint32_t)(value)))
#define I2S_CLR_TCR2(base, value) (BME_AND32(&I2S_TCR2_REG(base), (uint32_t)(~(value))))
#define I2S_TOG_TCR2(base, value) (BME_XOR32(&I2S_TCR2_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual I2S_TCR2 bitfields
 */

/*!
 * @name Register I2S_TCR2, field DIV[7:0] (RW)
 *
 * Divides down the audio master clock to generate the bit clock when configured
 * for an internal bit clock. The division value is (DIV + 1) * 2.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCR2_DIV field. */
#define I2S_RD_TCR2_DIV(base) ((I2S_TCR2_REG(base) & I2S_TCR2_DIV_MASK) >> I2S_TCR2_DIV_SHIFT)
#define I2S_BRD_TCR2_DIV(base) (BME_UBFX32(&I2S_TCR2_REG(base), I2S_TCR2_DIV_SHIFT, I2S_TCR2_DIV_WIDTH))

/*! @brief Set the DIV field to a new value. */
#define I2S_WR_TCR2_DIV(base, value) (I2S_RMW_TCR2(base, I2S_TCR2_DIV_MASK, I2S_TCR2_DIV(value)))
#define I2S_BWR_TCR2_DIV(base, value) (BME_BFI32(&I2S_TCR2_REG(base), ((uint32_t)(value) << I2S_TCR2_DIV_SHIFT), I2S_TCR2_DIV_SHIFT, I2S_TCR2_DIV_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCR2, field BCD[24] (RW)
 *
 * Configures the direction of the bit clock.
 *
 * Values:
 * - 0b0 - Bit clock is generated externally in Slave mode.
 * - 0b1 - Bit clock is generated internally in Master mode.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCR2_BCD field. */
#define I2S_RD_TCR2_BCD(base) ((I2S_TCR2_REG(base) & I2S_TCR2_BCD_MASK) >> I2S_TCR2_BCD_SHIFT)
#define I2S_BRD_TCR2_BCD(base) (BME_UBFX32(&I2S_TCR2_REG(base), I2S_TCR2_BCD_SHIFT, I2S_TCR2_BCD_WIDTH))

/*! @brief Set the BCD field to a new value. */
#define I2S_WR_TCR2_BCD(base, value) (I2S_RMW_TCR2(base, I2S_TCR2_BCD_MASK, I2S_TCR2_BCD(value)))
#define I2S_BWR_TCR2_BCD(base, value) (BME_BFI32(&I2S_TCR2_REG(base), ((uint32_t)(value) << I2S_TCR2_BCD_SHIFT), I2S_TCR2_BCD_SHIFT, I2S_TCR2_BCD_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCR2, field BCP[25] (RW)
 *
 * Configures the polarity of the bit clock.
 *
 * Values:
 * - 0b0 - Bit clock is active high with drive outputs on rising edge and sample
 *     inputs on falling edge.
 * - 0b1 - Bit clock is active low with drive outputs on falling edge and sample
 *     inputs on rising edge.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCR2_BCP field. */
#define I2S_RD_TCR2_BCP(base) ((I2S_TCR2_REG(base) & I2S_TCR2_BCP_MASK) >> I2S_TCR2_BCP_SHIFT)
#define I2S_BRD_TCR2_BCP(base) (BME_UBFX32(&I2S_TCR2_REG(base), I2S_TCR2_BCP_SHIFT, I2S_TCR2_BCP_WIDTH))

/*! @brief Set the BCP field to a new value. */
#define I2S_WR_TCR2_BCP(base, value) (I2S_RMW_TCR2(base, I2S_TCR2_BCP_MASK, I2S_TCR2_BCP(value)))
#define I2S_BWR_TCR2_BCP(base, value) (BME_BFI32(&I2S_TCR2_REG(base), ((uint32_t)(value) << I2S_TCR2_BCP_SHIFT), I2S_TCR2_BCP_SHIFT, I2S_TCR2_BCP_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCR2, field MSEL[27:26] (RW)
 *
 * Selects the audio Master Clock option used to generate an internally
 * generated bit clock. This field has no effect when configured for an externally
 * generated bit clock. Depending on the device, some Master Clock options might not be
 * available. See the chip configuration details for the availability and
 * chip-specific meaning of each option.
 *
 * Values:
 * - 0b00 - Bus Clock selected.
 * - 0b01 - Master Clock (MCLK) 1 option selected.
 * - 0b10 - Master Clock (MCLK) 2 option selected.
 * - 0b11 - Master Clock (MCLK) 3 option selected.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCR2_MSEL field. */
#define I2S_RD_TCR2_MSEL(base) ((I2S_TCR2_REG(base) & I2S_TCR2_MSEL_MASK) >> I2S_TCR2_MSEL_SHIFT)
#define I2S_BRD_TCR2_MSEL(base) (BME_UBFX32(&I2S_TCR2_REG(base), I2S_TCR2_MSEL_SHIFT, I2S_TCR2_MSEL_WIDTH))

/*! @brief Set the MSEL field to a new value. */
#define I2S_WR_TCR2_MSEL(base, value) (I2S_RMW_TCR2(base, I2S_TCR2_MSEL_MASK, I2S_TCR2_MSEL(value)))
#define I2S_BWR_TCR2_MSEL(base, value) (BME_BFI32(&I2S_TCR2_REG(base), ((uint32_t)(value) << I2S_TCR2_MSEL_SHIFT), I2S_TCR2_MSEL_SHIFT, I2S_TCR2_MSEL_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCR2, field BCI[28] (RW)
 *
 * When this field is set and using an internally generated bit clock in either
 * synchronous or asynchronous mode, the bit clock actually used by the
 * transmitter is delayed by the pad output delay (the transmitter is clocked by the pad
 * input as if the clock was externally generated). This has the effect of
 * decreasing the data input setup time, but increasing the data output valid time. The
 * slave mode timing from the datasheet should be used for the transmitter when
 * this bit is set. In synchronous mode, this bit allows the transmitter to use
 * the slave mode timing from the datasheet, while the receiver uses the master
 * mode timing. This field has no effect when configured for an externally generated
 * bit clock .
 *
 * Values:
 * - 0b0 - No effect.
 * - 0b1 - Internal logic is clocked as if bit clock was externally generated.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCR2_BCI field. */
#define I2S_RD_TCR2_BCI(base) ((I2S_TCR2_REG(base) & I2S_TCR2_BCI_MASK) >> I2S_TCR2_BCI_SHIFT)
#define I2S_BRD_TCR2_BCI(base) (BME_UBFX32(&I2S_TCR2_REG(base), I2S_TCR2_BCI_SHIFT, I2S_TCR2_BCI_WIDTH))

/*! @brief Set the BCI field to a new value. */
#define I2S_WR_TCR2_BCI(base, value) (I2S_RMW_TCR2(base, I2S_TCR2_BCI_MASK, I2S_TCR2_BCI(value)))
#define I2S_BWR_TCR2_BCI(base, value) (BME_BFI32(&I2S_TCR2_REG(base), ((uint32_t)(value) << I2S_TCR2_BCI_SHIFT), I2S_TCR2_BCI_SHIFT, I2S_TCR2_BCI_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCR2, field BCS[29] (RW)
 *
 * This field swaps the bit clock used by the transmitter. When the transmitter
 * is configured in asynchronous mode and this bit is set, the transmitter is
 * clocked by the receiver bit clock (SAI_RX_BCLK). This allows the transmitter and
 * receiver to share the same bit clock, but the transmitter continues to use the
 * transmit frame sync (SAI_TX_SYNC). When the transmitter is configured in
 * synchronous mode, the transmitter BCS field and receiver BCS field must be set to
 * the same value. When both are set, the transmitter and receiver are both
 * clocked by the transmitter bit clock (SAI_TX_BCLK) but use the receiver frame sync
 * (SAI_RX_SYNC).
 *
 * Values:
 * - 0b0 - Use the normal bit clock source.
 * - 0b1 - Swap the bit clock source.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCR2_BCS field. */
#define I2S_RD_TCR2_BCS(base) ((I2S_TCR2_REG(base) & I2S_TCR2_BCS_MASK) >> I2S_TCR2_BCS_SHIFT)
#define I2S_BRD_TCR2_BCS(base) (BME_UBFX32(&I2S_TCR2_REG(base), I2S_TCR2_BCS_SHIFT, I2S_TCR2_BCS_WIDTH))

/*! @brief Set the BCS field to a new value. */
#define I2S_WR_TCR2_BCS(base, value) (I2S_RMW_TCR2(base, I2S_TCR2_BCS_MASK, I2S_TCR2_BCS(value)))
#define I2S_BWR_TCR2_BCS(base, value) (BME_BFI32(&I2S_TCR2_REG(base), ((uint32_t)(value) << I2S_TCR2_BCS_SHIFT), I2S_TCR2_BCS_SHIFT, I2S_TCR2_BCS_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCR2, field SYNC[31:30] (RW)
 *
 * Configures between asynchronous and synchronous modes of operation. When
 * configured for a synchronous mode of operation, the receiver must be configured
 * for asynchronous operation.
 *
 * Values:
 * - 0b00 - Asynchronous mode.
 * - 0b01 - Synchronous with receiver.
 * - 0b10 - Synchronous with another SAI transmitter.
 * - 0b11 - Synchronous with another SAI receiver.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCR2_SYNC field. */
#define I2S_RD_TCR2_SYNC(base) ((I2S_TCR2_REG(base) & I2S_TCR2_SYNC_MASK) >> I2S_TCR2_SYNC_SHIFT)
#define I2S_BRD_TCR2_SYNC(base) (BME_UBFX32(&I2S_TCR2_REG(base), I2S_TCR2_SYNC_SHIFT, I2S_TCR2_SYNC_WIDTH))

/*! @brief Set the SYNC field to a new value. */
#define I2S_WR_TCR2_SYNC(base, value) (I2S_RMW_TCR2(base, I2S_TCR2_SYNC_MASK, I2S_TCR2_SYNC(value)))
#define I2S_BWR_TCR2_SYNC(base, value) (BME_BFI32(&I2S_TCR2_REG(base), ((uint32_t)(value) << I2S_TCR2_SYNC_SHIFT), I2S_TCR2_SYNC_SHIFT, I2S_TCR2_SYNC_WIDTH))
/*@}*/

/*******************************************************************************
 * I2S_TCR3 - SAI Transmit Configuration 3 Register
 ******************************************************************************/

/*!
 * @brief I2S_TCR3 - SAI Transmit Configuration 3 Register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire I2S_TCR3 register
 */
/*@{*/
#define I2S_RD_TCR3(base)        (I2S_TCR3_REG(base))
#define I2S_WR_TCR3(base, value) (I2S_TCR3_REG(base) = (value))
#define I2S_RMW_TCR3(base, mask, value) (I2S_WR_TCR3(base, (I2S_RD_TCR3(base) & ~(mask)) | (value)))
#define I2S_SET_TCR3(base, value) (BME_OR32(&I2S_TCR3_REG(base), (uint32_t)(value)))
#define I2S_CLR_TCR3(base, value) (BME_AND32(&I2S_TCR3_REG(base), (uint32_t)(~(value))))
#define I2S_TOG_TCR3(base, value) (BME_XOR32(&I2S_TCR3_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual I2S_TCR3 bitfields
 */

/*!
 * @name Register I2S_TCR3, field WDFL[4:0] (RW)
 *
 * Configures which word sets the start of word flag. The value written must be
 * one less than the word number. For example, writing 0 configures the first
 * word in the frame. When configured to a value greater than TCR4[FRSZ], then the
 * start of word flag is never set.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCR3_WDFL field. */
#define I2S_RD_TCR3_WDFL(base) ((I2S_TCR3_REG(base) & I2S_TCR3_WDFL_MASK) >> I2S_TCR3_WDFL_SHIFT)
#define I2S_BRD_TCR3_WDFL(base) (BME_UBFX32(&I2S_TCR3_REG(base), I2S_TCR3_WDFL_SHIFT, I2S_TCR3_WDFL_WIDTH))

/*! @brief Set the WDFL field to a new value. */
#define I2S_WR_TCR3_WDFL(base, value) (I2S_RMW_TCR3(base, I2S_TCR3_WDFL_MASK, I2S_TCR3_WDFL(value)))
#define I2S_BWR_TCR3_WDFL(base, value) (BME_BFI32(&I2S_TCR3_REG(base), ((uint32_t)(value) << I2S_TCR3_WDFL_SHIFT), I2S_TCR3_WDFL_SHIFT, I2S_TCR3_WDFL_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCR3, field TCE[17:16] (RW)
 *
 * Enables the corresponding data channel for transmit operation. A channel must
 * be enabled before its FIFO is accessed. Changing this field will take effect
 * immediately for generating the FIFO request and warning flags, but at the end
 * of each frame for transmit operation.
 *
 * Values:
 * - 0b00 - Transmit data channel N is disabled.
 * - 0b01 - Transmit data channel N is enabled.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCR3_TCE field. */
#define I2S_RD_TCR3_TCE(base) ((I2S_TCR3_REG(base) & I2S_TCR3_TCE_MASK) >> I2S_TCR3_TCE_SHIFT)
#define I2S_BRD_TCR3_TCE(base) (BME_UBFX32(&I2S_TCR3_REG(base), I2S_TCR3_TCE_SHIFT, I2S_TCR3_TCE_WIDTH))

/*! @brief Set the TCE field to a new value. */
#define I2S_WR_TCR3_TCE(base, value) (I2S_RMW_TCR3(base, I2S_TCR3_TCE_MASK, I2S_TCR3_TCE(value)))
#define I2S_BWR_TCR3_TCE(base, value) (BME_BFI32(&I2S_TCR3_REG(base), ((uint32_t)(value) << I2S_TCR3_TCE_SHIFT), I2S_TCR3_TCE_SHIFT, I2S_TCR3_TCE_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCR3, field CFR[25:24] (WORZ)
 *
 * Resets the FIFO pointers for a specific channel. Reading this field will
 * always return zero. FIFO pointers should only be reset when a channel is disabled
 * or the FIFO error flag is set.
 *
 * Values:
 * - 0b00 - No effect.
 * - 0b01 - Transmit data channel N FIFO is reset.
 */
/*@{*/
/*! @brief Set the CFR field to a new value. */
#define I2S_WR_TCR3_CFR(base, value) (I2S_RMW_TCR3(base, I2S_TCR3_CFR_MASK, I2S_TCR3_CFR(value)))
#define I2S_BWR_TCR3_CFR(base, value) (BME_BFI32(&I2S_TCR3_REG(base), ((uint32_t)(value) << I2S_TCR3_CFR_SHIFT), I2S_TCR3_CFR_SHIFT, I2S_TCR3_CFR_WIDTH))
/*@}*/

/*******************************************************************************
 * I2S_TCR4 - SAI Transmit Configuration 4 Register
 ******************************************************************************/

/*!
 * @brief I2S_TCR4 - SAI Transmit Configuration 4 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register must not be altered when TCSR[TE] is set.
 */
/*!
 * @name Constants and macros for entire I2S_TCR4 register
 */
/*@{*/
#define I2S_RD_TCR4(base)        (I2S_TCR4_REG(base))
#define I2S_WR_TCR4(base, value) (I2S_TCR4_REG(base) = (value))
#define I2S_RMW_TCR4(base, mask, value) (I2S_WR_TCR4(base, (I2S_RD_TCR4(base) & ~(mask)) | (value)))
#define I2S_SET_TCR4(base, value) (BME_OR32(&I2S_TCR4_REG(base), (uint32_t)(value)))
#define I2S_CLR_TCR4(base, value) (BME_AND32(&I2S_TCR4_REG(base), (uint32_t)(~(value))))
#define I2S_TOG_TCR4(base, value) (BME_XOR32(&I2S_TCR4_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual I2S_TCR4 bitfields
 */

/*!
 * @name Register I2S_TCR4, field FSD[0] (RW)
 *
 * Configures the direction of the frame sync.
 *
 * Values:
 * - 0b0 - Frame sync is generated externally in Slave mode.
 * - 0b1 - Frame sync is generated internally in Master mode.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCR4_FSD field. */
#define I2S_RD_TCR4_FSD(base) ((I2S_TCR4_REG(base) & I2S_TCR4_FSD_MASK) >> I2S_TCR4_FSD_SHIFT)
#define I2S_BRD_TCR4_FSD(base) (BME_UBFX32(&I2S_TCR4_REG(base), I2S_TCR4_FSD_SHIFT, I2S_TCR4_FSD_WIDTH))

/*! @brief Set the FSD field to a new value. */
#define I2S_WR_TCR4_FSD(base, value) (I2S_RMW_TCR4(base, I2S_TCR4_FSD_MASK, I2S_TCR4_FSD(value)))
#define I2S_BWR_TCR4_FSD(base, value) (BME_BFI32(&I2S_TCR4_REG(base), ((uint32_t)(value) << I2S_TCR4_FSD_SHIFT), I2S_TCR4_FSD_SHIFT, I2S_TCR4_FSD_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCR4, field FSP[1] (RW)
 *
 * Configures the polarity of the frame sync.
 *
 * Values:
 * - 0b0 - Frame sync is active high.
 * - 0b1 - Frame sync is active low.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCR4_FSP field. */
#define I2S_RD_TCR4_FSP(base) ((I2S_TCR4_REG(base) & I2S_TCR4_FSP_MASK) >> I2S_TCR4_FSP_SHIFT)
#define I2S_BRD_TCR4_FSP(base) (BME_UBFX32(&I2S_TCR4_REG(base), I2S_TCR4_FSP_SHIFT, I2S_TCR4_FSP_WIDTH))

/*! @brief Set the FSP field to a new value. */
#define I2S_WR_TCR4_FSP(base, value) (I2S_RMW_TCR4(base, I2S_TCR4_FSP_MASK, I2S_TCR4_FSP(value)))
#define I2S_BWR_TCR4_FSP(base, value) (BME_BFI32(&I2S_TCR4_REG(base), ((uint32_t)(value) << I2S_TCR4_FSP_SHIFT), I2S_TCR4_FSP_SHIFT, I2S_TCR4_FSP_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCR4, field ONDEM[2] (RW)
 *
 * When set, and the frame sync is generated internally, a frame sync is only
 * generated when the FIFO warning flag is clear.
 *
 * Values:
 * - 0b0 - Internal frame sync is generated continuously.
 * - 0b1 - Internal frame sync is generated when the FIFO warning flag is clear.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCR4_ONDEM field. */
#define I2S_RD_TCR4_ONDEM(base) ((I2S_TCR4_REG(base) & I2S_TCR4_ONDEM_MASK) >> I2S_TCR4_ONDEM_SHIFT)
#define I2S_BRD_TCR4_ONDEM(base) (BME_UBFX32(&I2S_TCR4_REG(base), I2S_TCR4_ONDEM_SHIFT, I2S_TCR4_ONDEM_WIDTH))

/*! @brief Set the ONDEM field to a new value. */
#define I2S_WR_TCR4_ONDEM(base, value) (I2S_RMW_TCR4(base, I2S_TCR4_ONDEM_MASK, I2S_TCR4_ONDEM(value)))
#define I2S_BWR_TCR4_ONDEM(base, value) (BME_BFI32(&I2S_TCR4_REG(base), ((uint32_t)(value) << I2S_TCR4_ONDEM_SHIFT), I2S_TCR4_ONDEM_SHIFT, I2S_TCR4_ONDEM_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCR4, field FSE[3] (RW)
 *
 * Values:
 * - 0b0 - Frame sync asserts with the first bit of the frame.
 * - 0b1 - Frame sync asserts one bit before the first bit of the frame.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCR4_FSE field. */
#define I2S_RD_TCR4_FSE(base) ((I2S_TCR4_REG(base) & I2S_TCR4_FSE_MASK) >> I2S_TCR4_FSE_SHIFT)
#define I2S_BRD_TCR4_FSE(base) (BME_UBFX32(&I2S_TCR4_REG(base), I2S_TCR4_FSE_SHIFT, I2S_TCR4_FSE_WIDTH))

/*! @brief Set the FSE field to a new value. */
#define I2S_WR_TCR4_FSE(base, value) (I2S_RMW_TCR4(base, I2S_TCR4_FSE_MASK, I2S_TCR4_FSE(value)))
#define I2S_BWR_TCR4_FSE(base, value) (BME_BFI32(&I2S_TCR4_REG(base), ((uint32_t)(value) << I2S_TCR4_FSE_SHIFT), I2S_TCR4_FSE_SHIFT, I2S_TCR4_FSE_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCR4, field MF[4] (RW)
 *
 * Configures whether the LSB or the MSB is transmitted first.
 *
 * Values:
 * - 0b0 - LSB is transmitted first.
 * - 0b1 - MSB is transmitted first.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCR4_MF field. */
#define I2S_RD_TCR4_MF(base) ((I2S_TCR4_REG(base) & I2S_TCR4_MF_MASK) >> I2S_TCR4_MF_SHIFT)
#define I2S_BRD_TCR4_MF(base) (BME_UBFX32(&I2S_TCR4_REG(base), I2S_TCR4_MF_SHIFT, I2S_TCR4_MF_WIDTH))

/*! @brief Set the MF field to a new value. */
#define I2S_WR_TCR4_MF(base, value) (I2S_RMW_TCR4(base, I2S_TCR4_MF_MASK, I2S_TCR4_MF(value)))
#define I2S_BWR_TCR4_MF(base, value) (BME_BFI32(&I2S_TCR4_REG(base), ((uint32_t)(value) << I2S_TCR4_MF_SHIFT), I2S_TCR4_MF_SHIFT, I2S_TCR4_MF_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCR4, field SYWD[12:8] (RW)
 *
 * Configures the length of the frame sync in number of bit clocks. The value
 * written must be one less than the number of bit clocks. For example, write 0 for
 * the frame sync to assert for one bit clock only. The sync width cannot be
 * configured longer than the first word of the frame.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCR4_SYWD field. */
#define I2S_RD_TCR4_SYWD(base) ((I2S_TCR4_REG(base) & I2S_TCR4_SYWD_MASK) >> I2S_TCR4_SYWD_SHIFT)
#define I2S_BRD_TCR4_SYWD(base) (BME_UBFX32(&I2S_TCR4_REG(base), I2S_TCR4_SYWD_SHIFT, I2S_TCR4_SYWD_WIDTH))

/*! @brief Set the SYWD field to a new value. */
#define I2S_WR_TCR4_SYWD(base, value) (I2S_RMW_TCR4(base, I2S_TCR4_SYWD_MASK, I2S_TCR4_SYWD(value)))
#define I2S_BWR_TCR4_SYWD(base, value) (BME_BFI32(&I2S_TCR4_REG(base), ((uint32_t)(value) << I2S_TCR4_SYWD_SHIFT), I2S_TCR4_SYWD_SHIFT, I2S_TCR4_SYWD_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCR4, field FRSZ[20:16] (RW)
 *
 * Configures the number of words in each frame. The value written must be one
 * less than the number of words in the frame. For example, write 0 for one word
 * per frame. The maximum supported frame size is 32 words.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCR4_FRSZ field. */
#define I2S_RD_TCR4_FRSZ(base) ((I2S_TCR4_REG(base) & I2S_TCR4_FRSZ_MASK) >> I2S_TCR4_FRSZ_SHIFT)
#define I2S_BRD_TCR4_FRSZ(base) (BME_UBFX32(&I2S_TCR4_REG(base), I2S_TCR4_FRSZ_SHIFT, I2S_TCR4_FRSZ_WIDTH))

/*! @brief Set the FRSZ field to a new value. */
#define I2S_WR_TCR4_FRSZ(base, value) (I2S_RMW_TCR4(base, I2S_TCR4_FRSZ_MASK, I2S_TCR4_FRSZ(value)))
#define I2S_BWR_TCR4_FRSZ(base, value) (BME_BFI32(&I2S_TCR4_REG(base), ((uint32_t)(value) << I2S_TCR4_FRSZ_SHIFT), I2S_TCR4_FRSZ_SHIFT, I2S_TCR4_FRSZ_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCR4, field FPACK[25:24] (RW)
 *
 * Enables packing of 8-bit data or 16-bit data into each 32-bit FIFO word. If
 * the word size is greater than 8-bit or 16-bit then only the first 8-bit or
 * 16-bits are loaded from the FIFO. The first word in each frame always starts with
 * a new 32-bit FIFO word and the first bit shifted must be configured within the
 * first packed word. When FIFO packing is enabled, the FIFO write pointer will
 * only increment when the full 32-bit FIFO word has been written by software.
 *
 * Values:
 * - 0b00 - FIFO packing is disabled
 * - 0b01 - Reserved
 * - 0b10 - 8-bit FIFO packing is enabled
 * - 0b11 - 16-bit FIFO packing is enabled
 */
/*@{*/
/*! @brief Read current value of the I2S_TCR4_FPACK field. */
#define I2S_RD_TCR4_FPACK(base) ((I2S_TCR4_REG(base) & I2S_TCR4_FPACK_MASK) >> I2S_TCR4_FPACK_SHIFT)
#define I2S_BRD_TCR4_FPACK(base) (BME_UBFX32(&I2S_TCR4_REG(base), I2S_TCR4_FPACK_SHIFT, I2S_TCR4_FPACK_WIDTH))

/*! @brief Set the FPACK field to a new value. */
#define I2S_WR_TCR4_FPACK(base, value) (I2S_RMW_TCR4(base, I2S_TCR4_FPACK_MASK, I2S_TCR4_FPACK(value)))
#define I2S_BWR_TCR4_FPACK(base, value) (BME_BFI32(&I2S_TCR4_REG(base), ((uint32_t)(value) << I2S_TCR4_FPACK_SHIFT), I2S_TCR4_FPACK_SHIFT, I2S_TCR4_FPACK_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCR4, field FCOMB[27:26] (RW)
 *
 * When FIFO combine mode is enabled for FIFO writes, software writing to any
 * FIFO data register will alternate the write among the enabled data channel
 * FIFOs. For example, if two data channels are enabled then the first write will be
 * performed to the first enabled data channel FIFO and the second write will be
 * performed to the second enabled data channel FIFO. Reseting the FIFO or
 * disabling FIFO combine mode for FIFO writes will reset the pointer back to the first
 * enabled data channel. When FIFO combine mode is enabled for FIFO reads from
 * the transmit shift registers, the transmit data channel output will alternate
 * between the enabled data channel FIFOs. For example, if two data channels are
 * enabled then the first unmasked word will be transmitted from the first enabled
 * data channel FIFO and the second unmasked word will be transmitted from the
 * second enabled data channel FIFO. Since the first word of the frame is always
 * transmitted from the first enabled data channel FIFO, it is recommended that the
 * number of unmasked words per frame is evenly divisible by the number of
 * enabled data channels.
 *
 * Values:
 * - 0b00 - FIFO combine mode disabled.
 * - 0b01 - FIFO combine mode enabled on FIFO reads (from transmit shift
 *     registers).
 * - 0b10 - FIFO combine mode enabled on FIFO writes (by software).
 * - 0b11 - FIFO combine mode enabled on FIFO reads (from transmit shift
 *     registers) and writes (by software).
 */
/*@{*/
/*! @brief Read current value of the I2S_TCR4_FCOMB field. */
#define I2S_RD_TCR4_FCOMB(base) ((I2S_TCR4_REG(base) & I2S_TCR4_FCOMB_MASK) >> I2S_TCR4_FCOMB_SHIFT)
#define I2S_BRD_TCR4_FCOMB(base) (BME_UBFX32(&I2S_TCR4_REG(base), I2S_TCR4_FCOMB_SHIFT, I2S_TCR4_FCOMB_WIDTH))

/*! @brief Set the FCOMB field to a new value. */
#define I2S_WR_TCR4_FCOMB(base, value) (I2S_RMW_TCR4(base, I2S_TCR4_FCOMB_MASK, I2S_TCR4_FCOMB(value)))
#define I2S_BWR_TCR4_FCOMB(base, value) (BME_BFI32(&I2S_TCR4_REG(base), ((uint32_t)(value) << I2S_TCR4_FCOMB_SHIFT), I2S_TCR4_FCOMB_SHIFT, I2S_TCR4_FCOMB_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCR4, field FCONT[28] (RW)
 *
 * Configures when the SAI will continue transmitting after a FIFO error has
 * been detected.
 *
 * Values:
 * - 0b0 - On FIFO error, the SAI will continue from the start of the next frame
 *     after the FIFO error flag has been cleared.
 * - 0b1 - On FIFO error, the SAI will continue from the same word that caused
 *     the FIFO error to set after the FIFO warning flag has been cleared.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCR4_FCONT field. */
#define I2S_RD_TCR4_FCONT(base) ((I2S_TCR4_REG(base) & I2S_TCR4_FCONT_MASK) >> I2S_TCR4_FCONT_SHIFT)
#define I2S_BRD_TCR4_FCONT(base) (BME_UBFX32(&I2S_TCR4_REG(base), I2S_TCR4_FCONT_SHIFT, I2S_TCR4_FCONT_WIDTH))

/*! @brief Set the FCONT field to a new value. */
#define I2S_WR_TCR4_FCONT(base, value) (I2S_RMW_TCR4(base, I2S_TCR4_FCONT_MASK, I2S_TCR4_FCONT(value)))
#define I2S_BWR_TCR4_FCONT(base, value) (BME_BFI32(&I2S_TCR4_REG(base), ((uint32_t)(value) << I2S_TCR4_FCONT_SHIFT), I2S_TCR4_FCONT_SHIFT, I2S_TCR4_FCONT_WIDTH))
/*@}*/

/*******************************************************************************
 * I2S_TCR5 - SAI Transmit Configuration 5 Register
 ******************************************************************************/

/*!
 * @brief I2S_TCR5 - SAI Transmit Configuration 5 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register must not be altered when TCSR[TE] is set.
 */
/*!
 * @name Constants and macros for entire I2S_TCR5 register
 */
/*@{*/
#define I2S_RD_TCR5(base)        (I2S_TCR5_REG(base))
#define I2S_WR_TCR5(base, value) (I2S_TCR5_REG(base) = (value))
#define I2S_RMW_TCR5(base, mask, value) (I2S_WR_TCR5(base, (I2S_RD_TCR5(base) & ~(mask)) | (value)))
#define I2S_SET_TCR5(base, value) (BME_OR32(&I2S_TCR5_REG(base), (uint32_t)(value)))
#define I2S_CLR_TCR5(base, value) (BME_AND32(&I2S_TCR5_REG(base), (uint32_t)(~(value))))
#define I2S_TOG_TCR5(base, value) (BME_XOR32(&I2S_TCR5_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual I2S_TCR5 bitfields
 */

/*!
 * @name Register I2S_TCR5, field FBT[12:8] (RW)
 *
 * Configures the bit index for the first bit transmitted for each word in the
 * frame. If configured for MSB First, the index of the next bit transmitted is
 * one less than the current bit transmitted. If configured for LSB First, the
 * index of the next bit transmitted is one more than the current bit transmitted.
 * The value written must be greater than or equal to the word width when
 * configured for MSB First. The value written must be less than or equal to 31-word width
 * when configured for LSB First.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCR5_FBT field. */
#define I2S_RD_TCR5_FBT(base) ((I2S_TCR5_REG(base) & I2S_TCR5_FBT_MASK) >> I2S_TCR5_FBT_SHIFT)
#define I2S_BRD_TCR5_FBT(base) (BME_UBFX32(&I2S_TCR5_REG(base), I2S_TCR5_FBT_SHIFT, I2S_TCR5_FBT_WIDTH))

/*! @brief Set the FBT field to a new value. */
#define I2S_WR_TCR5_FBT(base, value) (I2S_RMW_TCR5(base, I2S_TCR5_FBT_MASK, I2S_TCR5_FBT(value)))
#define I2S_BWR_TCR5_FBT(base, value) (BME_BFI32(&I2S_TCR5_REG(base), ((uint32_t)(value) << I2S_TCR5_FBT_SHIFT), I2S_TCR5_FBT_SHIFT, I2S_TCR5_FBT_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCR5, field W0W[20:16] (RW)
 *
 * Configures the number of bits in the first word in each frame. The value
 * written must be one less than the number of bits in the first word. Word width of
 * less than 8 bits is not supported if there is only one word per frame.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCR5_W0W field. */
#define I2S_RD_TCR5_W0W(base) ((I2S_TCR5_REG(base) & I2S_TCR5_W0W_MASK) >> I2S_TCR5_W0W_SHIFT)
#define I2S_BRD_TCR5_W0W(base) (BME_UBFX32(&I2S_TCR5_REG(base), I2S_TCR5_W0W_SHIFT, I2S_TCR5_W0W_WIDTH))

/*! @brief Set the W0W field to a new value. */
#define I2S_WR_TCR5_W0W(base, value) (I2S_RMW_TCR5(base, I2S_TCR5_W0W_MASK, I2S_TCR5_W0W(value)))
#define I2S_BWR_TCR5_W0W(base, value) (BME_BFI32(&I2S_TCR5_REG(base), ((uint32_t)(value) << I2S_TCR5_W0W_SHIFT), I2S_TCR5_W0W_SHIFT, I2S_TCR5_W0W_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TCR5, field WNW[28:24] (RW)
 *
 * Configures the number of bits in each word, for each word except the first in
 * the frame. The value written must be one less than the number of bits per
 * word. Word width of less than 8 bits is not supported.
 */
/*@{*/
/*! @brief Read current value of the I2S_TCR5_WNW field. */
#define I2S_RD_TCR5_WNW(base) ((I2S_TCR5_REG(base) & I2S_TCR5_WNW_MASK) >> I2S_TCR5_WNW_SHIFT)
#define I2S_BRD_TCR5_WNW(base) (BME_UBFX32(&I2S_TCR5_REG(base), I2S_TCR5_WNW_SHIFT, I2S_TCR5_WNW_WIDTH))

/*! @brief Set the WNW field to a new value. */
#define I2S_WR_TCR5_WNW(base, value) (I2S_RMW_TCR5(base, I2S_TCR5_WNW_MASK, I2S_TCR5_WNW(value)))
#define I2S_BWR_TCR5_WNW(base, value) (BME_BFI32(&I2S_TCR5_REG(base), ((uint32_t)(value) << I2S_TCR5_WNW_SHIFT), I2S_TCR5_WNW_SHIFT, I2S_TCR5_WNW_WIDTH))
/*@}*/

/*******************************************************************************
 * I2S_TDR - SAI Transmit Data Register
 ******************************************************************************/

/*!
 * @brief I2S_TDR - SAI Transmit Data Register (WORZ)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire I2S_TDR register
 */
/*@{*/
#define I2S_RD_TDR(base, index)  (I2S_TDR_REG(base, index))
#define I2S_WR_TDR(base, index, value) (I2S_TDR_REG(base, index) = (value))
#define I2S_RMW_TDR(base, index, mask, value) (I2S_WR_TDR(base, index, (I2S_RD_TDR(base, index) & ~(mask)) | (value)))
/*@}*/

/*******************************************************************************
 * I2S_TFR - SAI Transmit FIFO Register
 ******************************************************************************/

/*!
 * @brief I2S_TFR - SAI Transmit FIFO Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The MSB of the read and write pointers is used to distinguish between FIFO
 * full and empty conditions. If the read and write pointers are identical, then
 * the FIFO is empty. If the read and write pointers are identical except for the
 * MSB, then the FIFO is full.
 */
/*!
 * @name Constants and macros for entire I2S_TFR register
 */
/*@{*/
#define I2S_RD_TFR(base, index)  (I2S_TFR_REG(base, index))
/*@}*/

/*
 * Constants & macros for individual I2S_TFR bitfields
 */

/*!
 * @name Register I2S_TFR, field RFP[3:0] (RO)
 *
 * FIFO read pointer for transmit data channel.
 */
/*@{*/
/*! @brief Read current value of the I2S_TFR_RFP field. */
#define I2S_RD_TFR_RFP(base, index) ((I2S_TFR_REG(base, index) & I2S_TFR_RFP_MASK) >> I2S_TFR_RFP_SHIFT)
#define I2S_BRD_TFR_RFP(base, index) (BME_UBFX32(&I2S_TFR_REG(base, index), I2S_TFR_RFP_SHIFT, I2S_TFR_RFP_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TFR, field WFP[19:16] (RO)
 *
 * FIFO write pointer for transmit data channel.
 */
/*@{*/
/*! @brief Read current value of the I2S_TFR_WFP field. */
#define I2S_RD_TFR_WFP(base, index) ((I2S_TFR_REG(base, index) & I2S_TFR_WFP_MASK) >> I2S_TFR_WFP_SHIFT)
#define I2S_BRD_TFR_WFP(base, index) (BME_UBFX32(&I2S_TFR_REG(base, index), I2S_TFR_WFP_SHIFT, I2S_TFR_WFP_WIDTH))
/*@}*/

/*!
 * @name Register I2S_TFR, field WCP[31] (RO)
 *
 * When FIFO Combine mode is enabled for writes, indicates that this data
 * channel is the next FIFO to be written.
 *
 * Values:
 * - 0b0 - No effect.
 * - 0b1 - FIFO combine is enabled for FIFO writes and this FIFO will be written
 *     on the next FIFO write.
 */
/*@{*/
/*! @brief Read current value of the I2S_TFR_WCP field. */
#define I2S_RD_TFR_WCP(base, index) ((I2S_TFR_REG(base, index) & I2S_TFR_WCP_MASK) >> I2S_TFR_WCP_SHIFT)
#define I2S_BRD_TFR_WCP(base, index) (BME_UBFX32(&I2S_TFR_REG(base, index), I2S_TFR_WCP_SHIFT, I2S_TFR_WCP_WIDTH))
/*@}*/

/*******************************************************************************
 * I2S_TMR - SAI Transmit Mask Register
 ******************************************************************************/

/*!
 * @brief I2S_TMR - SAI Transmit Mask Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register is double-buffered and updates: When TCSR[TE] is first set At
 * the end of each frame. This allows the masked words in each frame to change
 * from frame to frame.
 */
/*!
 * @name Constants and macros for entire I2S_TMR register
 */
/*@{*/
#define I2S_RD_TMR(base)         (I2S_TMR_REG(base))
#define I2S_WR_TMR(base, value)  (I2S_TMR_REG(base) = (value))
#define I2S_RMW_TMR(base, mask, value) (I2S_WR_TMR(base, (I2S_RD_TMR(base) & ~(mask)) | (value)))
#define I2S_SET_TMR(base, value) (BME_OR32(&I2S_TMR_REG(base), (uint32_t)(value)))
#define I2S_CLR_TMR(base, value) (BME_AND32(&I2S_TMR_REG(base), (uint32_t)(~(value))))
#define I2S_TOG_TMR(base, value) (BME_XOR32(&I2S_TMR_REG(base), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * I2S_RCSR - SAI Receive Control Register
 ******************************************************************************/

/*!
 * @brief I2S_RCSR - SAI Receive Control Register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire I2S_RCSR register
 */
/*@{*/
#define I2S_RD_RCSR(base)        (I2S_RCSR_REG(base))
#define I2S_WR_RCSR(base, value) (I2S_RCSR_REG(base) = (value))
#define I2S_RMW_RCSR(base, mask, value) (I2S_WR_RCSR(base, (I2S_RD_RCSR(base) & ~(mask)) | (value)))
#define I2S_SET_RCSR(base, value) (BME_OR32(&I2S_RCSR_REG(base), (uint32_t)(value)))
#define I2S_CLR_RCSR(base, value) (BME_AND32(&I2S_RCSR_REG(base), (uint32_t)(~(value))))
#define I2S_TOG_RCSR(base, value) (BME_XOR32(&I2S_RCSR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual I2S_RCSR bitfields
 */

/*!
 * @name Register I2S_RCSR, field FRDE[0] (RW)
 *
 * Enables/disables DMA requests.
 *
 * Values:
 * - 0b0 - Disables the DMA request.
 * - 0b1 - Enables the DMA request.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCSR_FRDE field. */
#define I2S_RD_RCSR_FRDE(base) ((I2S_RCSR_REG(base) & I2S_RCSR_FRDE_MASK) >> I2S_RCSR_FRDE_SHIFT)
#define I2S_BRD_RCSR_FRDE(base) (BME_UBFX32(&I2S_RCSR_REG(base), I2S_RCSR_FRDE_SHIFT, I2S_RCSR_FRDE_WIDTH))

/*! @brief Set the FRDE field to a new value. */
#define I2S_WR_RCSR_FRDE(base, value) (I2S_RMW_RCSR(base, (I2S_RCSR_FRDE_MASK | I2S_RCSR_FEF_MASK | I2S_RCSR_SEF_MASK | I2S_RCSR_WSF_MASK), I2S_RCSR_FRDE(value)))
#define I2S_BWR_RCSR_FRDE(base, value) (BME_BFI32(&I2S_RCSR_REG(base), ((uint32_t)(value) << I2S_RCSR_FRDE_SHIFT), I2S_RCSR_FRDE_SHIFT, I2S_RCSR_FRDE_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCSR, field FWDE[1] (RW)
 *
 * Enables/disables DMA requests.
 *
 * Values:
 * - 0b0 - Disables the DMA request.
 * - 0b1 - Enables the DMA request.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCSR_FWDE field. */
#define I2S_RD_RCSR_FWDE(base) ((I2S_RCSR_REG(base) & I2S_RCSR_FWDE_MASK) >> I2S_RCSR_FWDE_SHIFT)
#define I2S_BRD_RCSR_FWDE(base) (BME_UBFX32(&I2S_RCSR_REG(base), I2S_RCSR_FWDE_SHIFT, I2S_RCSR_FWDE_WIDTH))

/*! @brief Set the FWDE field to a new value. */
#define I2S_WR_RCSR_FWDE(base, value) (I2S_RMW_RCSR(base, (I2S_RCSR_FWDE_MASK | I2S_RCSR_FEF_MASK | I2S_RCSR_SEF_MASK | I2S_RCSR_WSF_MASK), I2S_RCSR_FWDE(value)))
#define I2S_BWR_RCSR_FWDE(base, value) (BME_BFI32(&I2S_RCSR_REG(base), ((uint32_t)(value) << I2S_RCSR_FWDE_SHIFT), I2S_RCSR_FWDE_SHIFT, I2S_RCSR_FWDE_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCSR, field FRIE[8] (RW)
 *
 * Enables/disables FIFO request interrupts.
 *
 * Values:
 * - 0b0 - Disables the interrupt.
 * - 0b1 - Enables the interrupt.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCSR_FRIE field. */
#define I2S_RD_RCSR_FRIE(base) ((I2S_RCSR_REG(base) & I2S_RCSR_FRIE_MASK) >> I2S_RCSR_FRIE_SHIFT)
#define I2S_BRD_RCSR_FRIE(base) (BME_UBFX32(&I2S_RCSR_REG(base), I2S_RCSR_FRIE_SHIFT, I2S_RCSR_FRIE_WIDTH))

/*! @brief Set the FRIE field to a new value. */
#define I2S_WR_RCSR_FRIE(base, value) (I2S_RMW_RCSR(base, (I2S_RCSR_FRIE_MASK | I2S_RCSR_FEF_MASK | I2S_RCSR_SEF_MASK | I2S_RCSR_WSF_MASK), I2S_RCSR_FRIE(value)))
#define I2S_BWR_RCSR_FRIE(base, value) (BME_BFI32(&I2S_RCSR_REG(base), ((uint32_t)(value) << I2S_RCSR_FRIE_SHIFT), I2S_RCSR_FRIE_SHIFT, I2S_RCSR_FRIE_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCSR, field FWIE[9] (RW)
 *
 * Enables/disables FIFO warning interrupts.
 *
 * Values:
 * - 0b0 - Disables the interrupt.
 * - 0b1 - Enables the interrupt.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCSR_FWIE field. */
#define I2S_RD_RCSR_FWIE(base) ((I2S_RCSR_REG(base) & I2S_RCSR_FWIE_MASK) >> I2S_RCSR_FWIE_SHIFT)
#define I2S_BRD_RCSR_FWIE(base) (BME_UBFX32(&I2S_RCSR_REG(base), I2S_RCSR_FWIE_SHIFT, I2S_RCSR_FWIE_WIDTH))

/*! @brief Set the FWIE field to a new value. */
#define I2S_WR_RCSR_FWIE(base, value) (I2S_RMW_RCSR(base, (I2S_RCSR_FWIE_MASK | I2S_RCSR_FEF_MASK | I2S_RCSR_SEF_MASK | I2S_RCSR_WSF_MASK), I2S_RCSR_FWIE(value)))
#define I2S_BWR_RCSR_FWIE(base, value) (BME_BFI32(&I2S_RCSR_REG(base), ((uint32_t)(value) << I2S_RCSR_FWIE_SHIFT), I2S_RCSR_FWIE_SHIFT, I2S_RCSR_FWIE_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCSR, field FEIE[10] (RW)
 *
 * Enables/disables FIFO error interrupts.
 *
 * Values:
 * - 0b0 - Disables the interrupt.
 * - 0b1 - Enables the interrupt.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCSR_FEIE field. */
#define I2S_RD_RCSR_FEIE(base) ((I2S_RCSR_REG(base) & I2S_RCSR_FEIE_MASK) >> I2S_RCSR_FEIE_SHIFT)
#define I2S_BRD_RCSR_FEIE(base) (BME_UBFX32(&I2S_RCSR_REG(base), I2S_RCSR_FEIE_SHIFT, I2S_RCSR_FEIE_WIDTH))

/*! @brief Set the FEIE field to a new value. */
#define I2S_WR_RCSR_FEIE(base, value) (I2S_RMW_RCSR(base, (I2S_RCSR_FEIE_MASK | I2S_RCSR_FEF_MASK | I2S_RCSR_SEF_MASK | I2S_RCSR_WSF_MASK), I2S_RCSR_FEIE(value)))
#define I2S_BWR_RCSR_FEIE(base, value) (BME_BFI32(&I2S_RCSR_REG(base), ((uint32_t)(value) << I2S_RCSR_FEIE_SHIFT), I2S_RCSR_FEIE_SHIFT, I2S_RCSR_FEIE_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCSR, field SEIE[11] (RW)
 *
 * Enables/disables sync error interrupts.
 *
 * Values:
 * - 0b0 - Disables interrupt.
 * - 0b1 - Enables interrupt.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCSR_SEIE field. */
#define I2S_RD_RCSR_SEIE(base) ((I2S_RCSR_REG(base) & I2S_RCSR_SEIE_MASK) >> I2S_RCSR_SEIE_SHIFT)
#define I2S_BRD_RCSR_SEIE(base) (BME_UBFX32(&I2S_RCSR_REG(base), I2S_RCSR_SEIE_SHIFT, I2S_RCSR_SEIE_WIDTH))

/*! @brief Set the SEIE field to a new value. */
#define I2S_WR_RCSR_SEIE(base, value) (I2S_RMW_RCSR(base, (I2S_RCSR_SEIE_MASK | I2S_RCSR_FEF_MASK | I2S_RCSR_SEF_MASK | I2S_RCSR_WSF_MASK), I2S_RCSR_SEIE(value)))
#define I2S_BWR_RCSR_SEIE(base, value) (BME_BFI32(&I2S_RCSR_REG(base), ((uint32_t)(value) << I2S_RCSR_SEIE_SHIFT), I2S_RCSR_SEIE_SHIFT, I2S_RCSR_SEIE_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCSR, field WSIE[12] (RW)
 *
 * Enables/disables word start interrupts.
 *
 * Values:
 * - 0b0 - Disables interrupt.
 * - 0b1 - Enables interrupt.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCSR_WSIE field. */
#define I2S_RD_RCSR_WSIE(base) ((I2S_RCSR_REG(base) & I2S_RCSR_WSIE_MASK) >> I2S_RCSR_WSIE_SHIFT)
#define I2S_BRD_RCSR_WSIE(base) (BME_UBFX32(&I2S_RCSR_REG(base), I2S_RCSR_WSIE_SHIFT, I2S_RCSR_WSIE_WIDTH))

/*! @brief Set the WSIE field to a new value. */
#define I2S_WR_RCSR_WSIE(base, value) (I2S_RMW_RCSR(base, (I2S_RCSR_WSIE_MASK | I2S_RCSR_FEF_MASK | I2S_RCSR_SEF_MASK | I2S_RCSR_WSF_MASK), I2S_RCSR_WSIE(value)))
#define I2S_BWR_RCSR_WSIE(base, value) (BME_BFI32(&I2S_RCSR_REG(base), ((uint32_t)(value) << I2S_RCSR_WSIE_SHIFT), I2S_RCSR_WSIE_SHIFT, I2S_RCSR_WSIE_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCSR, field FRF[16] (RO)
 *
 * Indicates that the number of words in an enabled receive channel FIFO is
 * greater than the receive FIFO watermark.
 *
 * Values:
 * - 0b0 - Receive FIFO watermark not reached.
 * - 0b1 - Receive FIFO watermark has been reached.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCSR_FRF field. */
#define I2S_RD_RCSR_FRF(base) ((I2S_RCSR_REG(base) & I2S_RCSR_FRF_MASK) >> I2S_RCSR_FRF_SHIFT)
#define I2S_BRD_RCSR_FRF(base) (BME_UBFX32(&I2S_RCSR_REG(base), I2S_RCSR_FRF_SHIFT, I2S_RCSR_FRF_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCSR, field FWF[17] (RO)
 *
 * Indicates that an enabled receive FIFO is full.
 *
 * Values:
 * - 0b0 - No enabled receive FIFO is full.
 * - 0b1 - Enabled receive FIFO is full.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCSR_FWF field. */
#define I2S_RD_RCSR_FWF(base) ((I2S_RCSR_REG(base) & I2S_RCSR_FWF_MASK) >> I2S_RCSR_FWF_SHIFT)
#define I2S_BRD_RCSR_FWF(base) (BME_UBFX32(&I2S_RCSR_REG(base), I2S_RCSR_FWF_SHIFT, I2S_RCSR_FWF_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCSR, field FEF[18] (W1C)
 *
 * Indicates that an enabled receive FIFO has overflowed. Write a logic 1 to
 * this field to clear this flag.
 *
 * Values:
 * - 0b0 - Receive overflow not detected.
 * - 0b1 - Receive overflow detected.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCSR_FEF field. */
#define I2S_RD_RCSR_FEF(base) ((I2S_RCSR_REG(base) & I2S_RCSR_FEF_MASK) >> I2S_RCSR_FEF_SHIFT)
#define I2S_BRD_RCSR_FEF(base) (BME_UBFX32(&I2S_RCSR_REG(base), I2S_RCSR_FEF_SHIFT, I2S_RCSR_FEF_WIDTH))

/*! @brief Set the FEF field to a new value. */
#define I2S_WR_RCSR_FEF(base, value) (I2S_RMW_RCSR(base, (I2S_RCSR_FEF_MASK | I2S_RCSR_SEF_MASK | I2S_RCSR_WSF_MASK), I2S_RCSR_FEF(value)))
#define I2S_BWR_RCSR_FEF(base, value) (BME_BFI32(&I2S_RCSR_REG(base), ((uint32_t)(value) << I2S_RCSR_FEF_SHIFT), I2S_RCSR_FEF_SHIFT, I2S_RCSR_FEF_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCSR, field SEF[19] (W1C)
 *
 * Indicates that an error in the externally-generated frame sync has been
 * detected. Write a logic 1 to this field to clear this flag.
 *
 * Values:
 * - 0b0 - Sync error not detected.
 * - 0b1 - Frame sync error detected.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCSR_SEF field. */
#define I2S_RD_RCSR_SEF(base) ((I2S_RCSR_REG(base) & I2S_RCSR_SEF_MASK) >> I2S_RCSR_SEF_SHIFT)
#define I2S_BRD_RCSR_SEF(base) (BME_UBFX32(&I2S_RCSR_REG(base), I2S_RCSR_SEF_SHIFT, I2S_RCSR_SEF_WIDTH))

/*! @brief Set the SEF field to a new value. */
#define I2S_WR_RCSR_SEF(base, value) (I2S_RMW_RCSR(base, (I2S_RCSR_SEF_MASK | I2S_RCSR_FEF_MASK | I2S_RCSR_WSF_MASK), I2S_RCSR_SEF(value)))
#define I2S_BWR_RCSR_SEF(base, value) (BME_BFI32(&I2S_RCSR_REG(base), ((uint32_t)(value) << I2S_RCSR_SEF_SHIFT), I2S_RCSR_SEF_SHIFT, I2S_RCSR_SEF_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCSR, field WSF[20] (W1C)
 *
 * Indicates that the start of the configured word has been detected. Write a
 * logic 1 to this field to clear this flag.
 *
 * Values:
 * - 0b0 - Start of word not detected.
 * - 0b1 - Start of word detected.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCSR_WSF field. */
#define I2S_RD_RCSR_WSF(base) ((I2S_RCSR_REG(base) & I2S_RCSR_WSF_MASK) >> I2S_RCSR_WSF_SHIFT)
#define I2S_BRD_RCSR_WSF(base) (BME_UBFX32(&I2S_RCSR_REG(base), I2S_RCSR_WSF_SHIFT, I2S_RCSR_WSF_WIDTH))

/*! @brief Set the WSF field to a new value. */
#define I2S_WR_RCSR_WSF(base, value) (I2S_RMW_RCSR(base, (I2S_RCSR_WSF_MASK | I2S_RCSR_FEF_MASK | I2S_RCSR_SEF_MASK), I2S_RCSR_WSF(value)))
#define I2S_BWR_RCSR_WSF(base, value) (BME_BFI32(&I2S_RCSR_REG(base), ((uint32_t)(value) << I2S_RCSR_WSF_SHIFT), I2S_RCSR_WSF_SHIFT, I2S_RCSR_WSF_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCSR, field SR[24] (RW)
 *
 * Resets the internal receiver logic including the FIFO pointers.
 * Software-visible registers are not affected, except for the status registers.
 *
 * Values:
 * - 0b0 - No effect.
 * - 0b1 - Software reset.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCSR_SR field. */
#define I2S_RD_RCSR_SR(base) ((I2S_RCSR_REG(base) & I2S_RCSR_SR_MASK) >> I2S_RCSR_SR_SHIFT)
#define I2S_BRD_RCSR_SR(base) (BME_UBFX32(&I2S_RCSR_REG(base), I2S_RCSR_SR_SHIFT, I2S_RCSR_SR_WIDTH))

/*! @brief Set the SR field to a new value. */
#define I2S_WR_RCSR_SR(base, value) (I2S_RMW_RCSR(base, (I2S_RCSR_SR_MASK | I2S_RCSR_FEF_MASK | I2S_RCSR_SEF_MASK | I2S_RCSR_WSF_MASK), I2S_RCSR_SR(value)))
#define I2S_BWR_RCSR_SR(base, value) (BME_BFI32(&I2S_RCSR_REG(base), ((uint32_t)(value) << I2S_RCSR_SR_SHIFT), I2S_RCSR_SR_SHIFT, I2S_RCSR_SR_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCSR, field FR[25] (WORZ)
 *
 * Resets the FIFO pointers. Reading this field will always return zero. FIFO
 * pointers should only be reset when the receiver is disabled or the FIFO error
 * flag is set.
 *
 * Values:
 * - 0b0 - No effect.
 * - 0b1 - FIFO reset.
 */
/*@{*/
/*! @brief Set the FR field to a new value. */
#define I2S_WR_RCSR_FR(base, value) (I2S_RMW_RCSR(base, (I2S_RCSR_FR_MASK | I2S_RCSR_FEF_MASK | I2S_RCSR_SEF_MASK | I2S_RCSR_WSF_MASK), I2S_RCSR_FR(value)))
#define I2S_BWR_RCSR_FR(base, value) (BME_BFI32(&I2S_RCSR_REG(base), ((uint32_t)(value) << I2S_RCSR_FR_SHIFT), I2S_RCSR_FR_SHIFT, I2S_RCSR_FR_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCSR, field BCE[28] (RW)
 *
 * Enables the receive bit clock, separately from RE. This field is
 * automatically set whenever RE is set. When software clears this field, the receive bit
 * clock remains enabled, and this field remains set, until the end of the current
 * frame.
 *
 * Values:
 * - 0b0 - Receive bit clock is disabled.
 * - 0b1 - Receive bit clock is enabled.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCSR_BCE field. */
#define I2S_RD_RCSR_BCE(base) ((I2S_RCSR_REG(base) & I2S_RCSR_BCE_MASK) >> I2S_RCSR_BCE_SHIFT)
#define I2S_BRD_RCSR_BCE(base) (BME_UBFX32(&I2S_RCSR_REG(base), I2S_RCSR_BCE_SHIFT, I2S_RCSR_BCE_WIDTH))

/*! @brief Set the BCE field to a new value. */
#define I2S_WR_RCSR_BCE(base, value) (I2S_RMW_RCSR(base, (I2S_RCSR_BCE_MASK | I2S_RCSR_FEF_MASK | I2S_RCSR_SEF_MASK | I2S_RCSR_WSF_MASK), I2S_RCSR_BCE(value)))
#define I2S_BWR_RCSR_BCE(base, value) (BME_BFI32(&I2S_RCSR_REG(base), ((uint32_t)(value) << I2S_RCSR_BCE_SHIFT), I2S_RCSR_BCE_SHIFT, I2S_RCSR_BCE_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCSR, field DBGE[29] (RW)
 *
 * Enables/disables receiver operation in Debug mode. The receive bit clock is
 * not affected by Debug mode.
 *
 * Values:
 * - 0b0 - Receiver is disabled in Debug mode, after completing the current
 *     frame.
 * - 0b1 - Receiver is enabled in Debug mode.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCSR_DBGE field. */
#define I2S_RD_RCSR_DBGE(base) ((I2S_RCSR_REG(base) & I2S_RCSR_DBGE_MASK) >> I2S_RCSR_DBGE_SHIFT)
#define I2S_BRD_RCSR_DBGE(base) (BME_UBFX32(&I2S_RCSR_REG(base), I2S_RCSR_DBGE_SHIFT, I2S_RCSR_DBGE_WIDTH))

/*! @brief Set the DBGE field to a new value. */
#define I2S_WR_RCSR_DBGE(base, value) (I2S_RMW_RCSR(base, (I2S_RCSR_DBGE_MASK | I2S_RCSR_FEF_MASK | I2S_RCSR_SEF_MASK | I2S_RCSR_WSF_MASK), I2S_RCSR_DBGE(value)))
#define I2S_BWR_RCSR_DBGE(base, value) (BME_BFI32(&I2S_RCSR_REG(base), ((uint32_t)(value) << I2S_RCSR_DBGE_SHIFT), I2S_RCSR_DBGE_SHIFT, I2S_RCSR_DBGE_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCSR, field STOPE[30] (RW)
 *
 * Configures receiver operation in Stop mode. This bit is ignored and the
 * receiver is disabled in all low-leakage stop modes.
 *
 * Values:
 * - 0b0 - Receiver disabled in Stop mode.
 * - 0b1 - Receiver enabled in Stop mode.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCSR_STOPE field. */
#define I2S_RD_RCSR_STOPE(base) ((I2S_RCSR_REG(base) & I2S_RCSR_STOPE_MASK) >> I2S_RCSR_STOPE_SHIFT)
#define I2S_BRD_RCSR_STOPE(base) (BME_UBFX32(&I2S_RCSR_REG(base), I2S_RCSR_STOPE_SHIFT, I2S_RCSR_STOPE_WIDTH))

/*! @brief Set the STOPE field to a new value. */
#define I2S_WR_RCSR_STOPE(base, value) (I2S_RMW_RCSR(base, (I2S_RCSR_STOPE_MASK | I2S_RCSR_FEF_MASK | I2S_RCSR_SEF_MASK | I2S_RCSR_WSF_MASK), I2S_RCSR_STOPE(value)))
#define I2S_BWR_RCSR_STOPE(base, value) (BME_BFI32(&I2S_RCSR_REG(base), ((uint32_t)(value) << I2S_RCSR_STOPE_SHIFT), I2S_RCSR_STOPE_SHIFT, I2S_RCSR_STOPE_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCSR, field RE[31] (RW)
 *
 * Enables/disables the receiver. When software clears this field, the receiver
 * remains enabled, and this bit remains set, until the end of the current frame.
 *
 * Values:
 * - 0b0 - Receiver is disabled.
 * - 0b1 - Receiver is enabled, or receiver has been disabled and has not yet
 *     reached end of frame.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCSR_RE field. */
#define I2S_RD_RCSR_RE(base) ((I2S_RCSR_REG(base) & I2S_RCSR_RE_MASK) >> I2S_RCSR_RE_SHIFT)
#define I2S_BRD_RCSR_RE(base) (BME_UBFX32(&I2S_RCSR_REG(base), I2S_RCSR_RE_SHIFT, I2S_RCSR_RE_WIDTH))

/*! @brief Set the RE field to a new value. */
#define I2S_WR_RCSR_RE(base, value) (I2S_RMW_RCSR(base, (I2S_RCSR_RE_MASK | I2S_RCSR_FEF_MASK | I2S_RCSR_SEF_MASK | I2S_RCSR_WSF_MASK), I2S_RCSR_RE(value)))
#define I2S_BWR_RCSR_RE(base, value) (BME_BFI32(&I2S_RCSR_REG(base), ((uint32_t)(value) << I2S_RCSR_RE_SHIFT), I2S_RCSR_RE_SHIFT, I2S_RCSR_RE_WIDTH))
/*@}*/

/*******************************************************************************
 * I2S_RCR1 - SAI Receive Configuration 1 Register
 ******************************************************************************/

/*!
 * @brief I2S_RCR1 - SAI Receive Configuration 1 Register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire I2S_RCR1 register
 */
/*@{*/
#define I2S_RD_RCR1(base)        (I2S_RCR1_REG(base))
#define I2S_WR_RCR1(base, value) (I2S_RCR1_REG(base) = (value))
#define I2S_RMW_RCR1(base, mask, value) (I2S_WR_RCR1(base, (I2S_RD_RCR1(base) & ~(mask)) | (value)))
#define I2S_SET_RCR1(base, value) (BME_OR32(&I2S_RCR1_REG(base), (uint32_t)(value)))
#define I2S_CLR_RCR1(base, value) (BME_AND32(&I2S_RCR1_REG(base), (uint32_t)(~(value))))
#define I2S_TOG_RCR1(base, value) (BME_XOR32(&I2S_RCR1_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual I2S_RCR1 bitfields
 */

/*!
 * @name Register I2S_RCR1, field RFW[2:0] (RW)
 *
 * Configures the watermark level for all enabled receiver channels.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCR1_RFW field. */
#define I2S_RD_RCR1_RFW(base) ((I2S_RCR1_REG(base) & I2S_RCR1_RFW_MASK) >> I2S_RCR1_RFW_SHIFT)
#define I2S_BRD_RCR1_RFW(base) (BME_UBFX32(&I2S_RCR1_REG(base), I2S_RCR1_RFW_SHIFT, I2S_RCR1_RFW_WIDTH))

/*! @brief Set the RFW field to a new value. */
#define I2S_WR_RCR1_RFW(base, value) (I2S_RMW_RCR1(base, I2S_RCR1_RFW_MASK, I2S_RCR1_RFW(value)))
#define I2S_BWR_RCR1_RFW(base, value) (BME_BFI32(&I2S_RCR1_REG(base), ((uint32_t)(value) << I2S_RCR1_RFW_SHIFT), I2S_RCR1_RFW_SHIFT, I2S_RCR1_RFW_WIDTH))
/*@}*/

/*******************************************************************************
 * I2S_RCR2 - SAI Receive Configuration 2 Register
 ******************************************************************************/

/*!
 * @brief I2S_RCR2 - SAI Receive Configuration 2 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register must not be altered when RCSR[RE] is set.
 */
/*!
 * @name Constants and macros for entire I2S_RCR2 register
 */
/*@{*/
#define I2S_RD_RCR2(base)        (I2S_RCR2_REG(base))
#define I2S_WR_RCR2(base, value) (I2S_RCR2_REG(base) = (value))
#define I2S_RMW_RCR2(base, mask, value) (I2S_WR_RCR2(base, (I2S_RD_RCR2(base) & ~(mask)) | (value)))
#define I2S_SET_RCR2(base, value) (BME_OR32(&I2S_RCR2_REG(base), (uint32_t)(value)))
#define I2S_CLR_RCR2(base, value) (BME_AND32(&I2S_RCR2_REG(base), (uint32_t)(~(value))))
#define I2S_TOG_RCR2(base, value) (BME_XOR32(&I2S_RCR2_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual I2S_RCR2 bitfields
 */

/*!
 * @name Register I2S_RCR2, field DIV[7:0] (RW)
 *
 * Divides down the audio master clock to generate the bit clock when configured
 * for an internal bit clock. The division value is (DIV + 1) * 2.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCR2_DIV field. */
#define I2S_RD_RCR2_DIV(base) ((I2S_RCR2_REG(base) & I2S_RCR2_DIV_MASK) >> I2S_RCR2_DIV_SHIFT)
#define I2S_BRD_RCR2_DIV(base) (BME_UBFX32(&I2S_RCR2_REG(base), I2S_RCR2_DIV_SHIFT, I2S_RCR2_DIV_WIDTH))

/*! @brief Set the DIV field to a new value. */
#define I2S_WR_RCR2_DIV(base, value) (I2S_RMW_RCR2(base, I2S_RCR2_DIV_MASK, I2S_RCR2_DIV(value)))
#define I2S_BWR_RCR2_DIV(base, value) (BME_BFI32(&I2S_RCR2_REG(base), ((uint32_t)(value) << I2S_RCR2_DIV_SHIFT), I2S_RCR2_DIV_SHIFT, I2S_RCR2_DIV_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCR2, field BCD[24] (RW)
 *
 * Configures the direction of the bit clock.
 *
 * Values:
 * - 0b0 - Bit clock is generated externally in Slave mode.
 * - 0b1 - Bit clock is generated internally in Master mode.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCR2_BCD field. */
#define I2S_RD_RCR2_BCD(base) ((I2S_RCR2_REG(base) & I2S_RCR2_BCD_MASK) >> I2S_RCR2_BCD_SHIFT)
#define I2S_BRD_RCR2_BCD(base) (BME_UBFX32(&I2S_RCR2_REG(base), I2S_RCR2_BCD_SHIFT, I2S_RCR2_BCD_WIDTH))

/*! @brief Set the BCD field to a new value. */
#define I2S_WR_RCR2_BCD(base, value) (I2S_RMW_RCR2(base, I2S_RCR2_BCD_MASK, I2S_RCR2_BCD(value)))
#define I2S_BWR_RCR2_BCD(base, value) (BME_BFI32(&I2S_RCR2_REG(base), ((uint32_t)(value) << I2S_RCR2_BCD_SHIFT), I2S_RCR2_BCD_SHIFT, I2S_RCR2_BCD_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCR2, field BCP[25] (RW)
 *
 * Configures the polarity of the bit clock.
 *
 * Values:
 * - 0b0 - Bit Clock is active high with drive outputs on rising edge and sample
 *     inputs on falling edge.
 * - 0b1 - Bit Clock is active low with drive outputs on falling edge and sample
 *     inputs on rising edge.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCR2_BCP field. */
#define I2S_RD_RCR2_BCP(base) ((I2S_RCR2_REG(base) & I2S_RCR2_BCP_MASK) >> I2S_RCR2_BCP_SHIFT)
#define I2S_BRD_RCR2_BCP(base) (BME_UBFX32(&I2S_RCR2_REG(base), I2S_RCR2_BCP_SHIFT, I2S_RCR2_BCP_WIDTH))

/*! @brief Set the BCP field to a new value. */
#define I2S_WR_RCR2_BCP(base, value) (I2S_RMW_RCR2(base, I2S_RCR2_BCP_MASK, I2S_RCR2_BCP(value)))
#define I2S_BWR_RCR2_BCP(base, value) (BME_BFI32(&I2S_RCR2_REG(base), ((uint32_t)(value) << I2S_RCR2_BCP_SHIFT), I2S_RCR2_BCP_SHIFT, I2S_RCR2_BCP_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCR2, field MSEL[27:26] (RW)
 *
 * Selects the audio Master Clock option used to generate an internally
 * generated bit clock. This field has no effect when configured for an externally
 * generated bit clock. Depending on the device, some Master Clock options might not be
 * available. See the chip configuration details for the availability and
 * chip-specific meaning of each option.
 *
 * Values:
 * - 0b00 - Bus Clock selected.
 * - 0b01 - Master Clock (MCLK) 1 option selected.
 * - 0b10 - Master Clock (MCLK) 2 option selected.
 * - 0b11 - Master Clock (MCLK) 3 option selected.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCR2_MSEL field. */
#define I2S_RD_RCR2_MSEL(base) ((I2S_RCR2_REG(base) & I2S_RCR2_MSEL_MASK) >> I2S_RCR2_MSEL_SHIFT)
#define I2S_BRD_RCR2_MSEL(base) (BME_UBFX32(&I2S_RCR2_REG(base), I2S_RCR2_MSEL_SHIFT, I2S_RCR2_MSEL_WIDTH))

/*! @brief Set the MSEL field to a new value. */
#define I2S_WR_RCR2_MSEL(base, value) (I2S_RMW_RCR2(base, I2S_RCR2_MSEL_MASK, I2S_RCR2_MSEL(value)))
#define I2S_BWR_RCR2_MSEL(base, value) (BME_BFI32(&I2S_RCR2_REG(base), ((uint32_t)(value) << I2S_RCR2_MSEL_SHIFT), I2S_RCR2_MSEL_SHIFT, I2S_RCR2_MSEL_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCR2, field BCI[28] (RW)
 *
 * When this field is set and using an internally generated bit clock in either
 * synchronous or asynchronous mode, the bit clock actually used by the receiver
 * is delayed by the pad output delay (the receiver is clocked by the pad input
 * as if the clock was externally generated). This has the effect of decreasing
 * the data input setup time, but increasing the data output valid time. The slave
 * mode timing from the datasheet should be used for the receiver when this bit
 * is set. In synchronous mode, this bit allows the receiver to use the slave mode
 * timing from the datasheet, while the transmitter uses the master mode timing.
 * This field has no effect when configured for an externally generated bit
 * clock .
 *
 * Values:
 * - 0b0 - No effect.
 * - 0b1 - Internal logic is clocked as if bit clock was externally generated.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCR2_BCI field. */
#define I2S_RD_RCR2_BCI(base) ((I2S_RCR2_REG(base) & I2S_RCR2_BCI_MASK) >> I2S_RCR2_BCI_SHIFT)
#define I2S_BRD_RCR2_BCI(base) (BME_UBFX32(&I2S_RCR2_REG(base), I2S_RCR2_BCI_SHIFT, I2S_RCR2_BCI_WIDTH))

/*! @brief Set the BCI field to a new value. */
#define I2S_WR_RCR2_BCI(base, value) (I2S_RMW_RCR2(base, I2S_RCR2_BCI_MASK, I2S_RCR2_BCI(value)))
#define I2S_BWR_RCR2_BCI(base, value) (BME_BFI32(&I2S_RCR2_REG(base), ((uint32_t)(value) << I2S_RCR2_BCI_SHIFT), I2S_RCR2_BCI_SHIFT, I2S_RCR2_BCI_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCR2, field BCS[29] (RW)
 *
 * This field swaps the bit clock used by the receiver. When the receiver is
 * configured in asynchronous mode and this bit is set, the receiver is clocked by
 * the transmitter bit clock (SAI_TX_BCLK). This allows the transmitter and
 * receiver to share the same bit clock, but the receiver continues to use the receiver
 * frame sync (SAI_RX_SYNC). When the receiver is configured in synchronous
 * mode, the transmitter BCS field and receiver BCS field must be set to the same
 * value. When both are set, the transmitter and receiver are both clocked by the
 * receiver bit clock (SAI_RX_BCLK) but use the transmitter frame sync
 * (SAI_TX_SYNC).
 *
 * Values:
 * - 0b0 - Use the normal bit clock source.
 * - 0b1 - Swap the bit clock source.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCR2_BCS field. */
#define I2S_RD_RCR2_BCS(base) ((I2S_RCR2_REG(base) & I2S_RCR2_BCS_MASK) >> I2S_RCR2_BCS_SHIFT)
#define I2S_BRD_RCR2_BCS(base) (BME_UBFX32(&I2S_RCR2_REG(base), I2S_RCR2_BCS_SHIFT, I2S_RCR2_BCS_WIDTH))

/*! @brief Set the BCS field to a new value. */
#define I2S_WR_RCR2_BCS(base, value) (I2S_RMW_RCR2(base, I2S_RCR2_BCS_MASK, I2S_RCR2_BCS(value)))
#define I2S_BWR_RCR2_BCS(base, value) (BME_BFI32(&I2S_RCR2_REG(base), ((uint32_t)(value) << I2S_RCR2_BCS_SHIFT), I2S_RCR2_BCS_SHIFT, I2S_RCR2_BCS_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCR2, field SYNC[31:30] (RW)
 *
 * Configures between asynchronous and synchronous modes of operation. When
 * configured for a synchronous mode of operation, the transmitter must be configured
 * for asynchronous operation.
 *
 * Values:
 * - 0b00 - Asynchronous mode.
 * - 0b01 - Synchronous with transmitter.
 * - 0b10 - Synchronous with another SAI receiver.
 * - 0b11 - Synchronous with another SAI transmitter.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCR2_SYNC field. */
#define I2S_RD_RCR2_SYNC(base) ((I2S_RCR2_REG(base) & I2S_RCR2_SYNC_MASK) >> I2S_RCR2_SYNC_SHIFT)
#define I2S_BRD_RCR2_SYNC(base) (BME_UBFX32(&I2S_RCR2_REG(base), I2S_RCR2_SYNC_SHIFT, I2S_RCR2_SYNC_WIDTH))

/*! @brief Set the SYNC field to a new value. */
#define I2S_WR_RCR2_SYNC(base, value) (I2S_RMW_RCR2(base, I2S_RCR2_SYNC_MASK, I2S_RCR2_SYNC(value)))
#define I2S_BWR_RCR2_SYNC(base, value) (BME_BFI32(&I2S_RCR2_REG(base), ((uint32_t)(value) << I2S_RCR2_SYNC_SHIFT), I2S_RCR2_SYNC_SHIFT, I2S_RCR2_SYNC_WIDTH))
/*@}*/

/*******************************************************************************
 * I2S_RCR3 - SAI Receive Configuration 3 Register
 ******************************************************************************/

/*!
 * @brief I2S_RCR3 - SAI Receive Configuration 3 Register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire I2S_RCR3 register
 */
/*@{*/
#define I2S_RD_RCR3(base)        (I2S_RCR3_REG(base))
#define I2S_WR_RCR3(base, value) (I2S_RCR3_REG(base) = (value))
#define I2S_RMW_RCR3(base, mask, value) (I2S_WR_RCR3(base, (I2S_RD_RCR3(base) & ~(mask)) | (value)))
#define I2S_SET_RCR3(base, value) (BME_OR32(&I2S_RCR3_REG(base), (uint32_t)(value)))
#define I2S_CLR_RCR3(base, value) (BME_AND32(&I2S_RCR3_REG(base), (uint32_t)(~(value))))
#define I2S_TOG_RCR3(base, value) (BME_XOR32(&I2S_RCR3_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual I2S_RCR3 bitfields
 */

/*!
 * @name Register I2S_RCR3, field WDFL[4:0] (RW)
 *
 * Configures which word the start of word flag is set. The value written should
 * be one less than the word number (for example, write zero to configure for
 * the first word in the frame). When configured to a value greater than the Frame
 * Size field, then the start of word flag is never set.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCR3_WDFL field. */
#define I2S_RD_RCR3_WDFL(base) ((I2S_RCR3_REG(base) & I2S_RCR3_WDFL_MASK) >> I2S_RCR3_WDFL_SHIFT)
#define I2S_BRD_RCR3_WDFL(base) (BME_UBFX32(&I2S_RCR3_REG(base), I2S_RCR3_WDFL_SHIFT, I2S_RCR3_WDFL_WIDTH))

/*! @brief Set the WDFL field to a new value. */
#define I2S_WR_RCR3_WDFL(base, value) (I2S_RMW_RCR3(base, I2S_RCR3_WDFL_MASK, I2S_RCR3_WDFL(value)))
#define I2S_BWR_RCR3_WDFL(base, value) (BME_BFI32(&I2S_RCR3_REG(base), ((uint32_t)(value) << I2S_RCR3_WDFL_SHIFT), I2S_RCR3_WDFL_SHIFT, I2S_RCR3_WDFL_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCR3, field RCE[17:16] (RW)
 *
 * Enables the corresponding data channel for receive operation. A channel must
 * be enabled before its FIFO is accessed. Changing this field will take effect
 * immediately for generating the FIFO request and warning flags, but at the end
 * of each frame for receive operation.
 *
 * Values:
 * - 0b00 - Receive data channel N is disabled.
 * - 0b01 - Receive data channel N is enabled.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCR3_RCE field. */
#define I2S_RD_RCR3_RCE(base) ((I2S_RCR3_REG(base) & I2S_RCR3_RCE_MASK) >> I2S_RCR3_RCE_SHIFT)
#define I2S_BRD_RCR3_RCE(base) (BME_UBFX32(&I2S_RCR3_REG(base), I2S_RCR3_RCE_SHIFT, I2S_RCR3_RCE_WIDTH))

/*! @brief Set the RCE field to a new value. */
#define I2S_WR_RCR3_RCE(base, value) (I2S_RMW_RCR3(base, I2S_RCR3_RCE_MASK, I2S_RCR3_RCE(value)))
#define I2S_BWR_RCR3_RCE(base, value) (BME_BFI32(&I2S_RCR3_REG(base), ((uint32_t)(value) << I2S_RCR3_RCE_SHIFT), I2S_RCR3_RCE_SHIFT, I2S_RCR3_RCE_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCR3, field CFR[25:24] (WORZ)
 *
 * Resets the FIFO pointers for a specific channel. Reading this field will
 * always return zero. FIFO pointers should only be reset when a channel is disabled
 * or the FIFO error flag is set.
 *
 * Values:
 * - 0b00 - No effect.
 * - 0b01 - Receive data channel N FIFO is reset.
 */
/*@{*/
/*! @brief Set the CFR field to a new value. */
#define I2S_WR_RCR3_CFR(base, value) (I2S_RMW_RCR3(base, I2S_RCR3_CFR_MASK, I2S_RCR3_CFR(value)))
#define I2S_BWR_RCR3_CFR(base, value) (BME_BFI32(&I2S_RCR3_REG(base), ((uint32_t)(value) << I2S_RCR3_CFR_SHIFT), I2S_RCR3_CFR_SHIFT, I2S_RCR3_CFR_WIDTH))
/*@}*/

/*******************************************************************************
 * I2S_RCR4 - SAI Receive Configuration 4 Register
 ******************************************************************************/

/*!
 * @brief I2S_RCR4 - SAI Receive Configuration 4 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register must not be altered when RCSR[RE] is set.
 */
/*!
 * @name Constants and macros for entire I2S_RCR4 register
 */
/*@{*/
#define I2S_RD_RCR4(base)        (I2S_RCR4_REG(base))
#define I2S_WR_RCR4(base, value) (I2S_RCR4_REG(base) = (value))
#define I2S_RMW_RCR4(base, mask, value) (I2S_WR_RCR4(base, (I2S_RD_RCR4(base) & ~(mask)) | (value)))
#define I2S_SET_RCR4(base, value) (BME_OR32(&I2S_RCR4_REG(base), (uint32_t)(value)))
#define I2S_CLR_RCR4(base, value) (BME_AND32(&I2S_RCR4_REG(base), (uint32_t)(~(value))))
#define I2S_TOG_RCR4(base, value) (BME_XOR32(&I2S_RCR4_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual I2S_RCR4 bitfields
 */

/*!
 * @name Register I2S_RCR4, field FSD[0] (RW)
 *
 * Configures the direction of the frame sync.
 *
 * Values:
 * - 0b0 - Frame Sync is generated externally in Slave mode.
 * - 0b1 - Frame Sync is generated internally in Master mode.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCR4_FSD field. */
#define I2S_RD_RCR4_FSD(base) ((I2S_RCR4_REG(base) & I2S_RCR4_FSD_MASK) >> I2S_RCR4_FSD_SHIFT)
#define I2S_BRD_RCR4_FSD(base) (BME_UBFX32(&I2S_RCR4_REG(base), I2S_RCR4_FSD_SHIFT, I2S_RCR4_FSD_WIDTH))

/*! @brief Set the FSD field to a new value. */
#define I2S_WR_RCR4_FSD(base, value) (I2S_RMW_RCR4(base, I2S_RCR4_FSD_MASK, I2S_RCR4_FSD(value)))
#define I2S_BWR_RCR4_FSD(base, value) (BME_BFI32(&I2S_RCR4_REG(base), ((uint32_t)(value) << I2S_RCR4_FSD_SHIFT), I2S_RCR4_FSD_SHIFT, I2S_RCR4_FSD_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCR4, field FSP[1] (RW)
 *
 * Configures the polarity of the frame sync.
 *
 * Values:
 * - 0b0 - Frame sync is active high.
 * - 0b1 - Frame sync is active low.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCR4_FSP field. */
#define I2S_RD_RCR4_FSP(base) ((I2S_RCR4_REG(base) & I2S_RCR4_FSP_MASK) >> I2S_RCR4_FSP_SHIFT)
#define I2S_BRD_RCR4_FSP(base) (BME_UBFX32(&I2S_RCR4_REG(base), I2S_RCR4_FSP_SHIFT, I2S_RCR4_FSP_WIDTH))

/*! @brief Set the FSP field to a new value. */
#define I2S_WR_RCR4_FSP(base, value) (I2S_RMW_RCR4(base, I2S_RCR4_FSP_MASK, I2S_RCR4_FSP(value)))
#define I2S_BWR_RCR4_FSP(base, value) (BME_BFI32(&I2S_RCR4_REG(base), ((uint32_t)(value) << I2S_RCR4_FSP_SHIFT), I2S_RCR4_FSP_SHIFT, I2S_RCR4_FSP_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCR4, field ONDEM[2] (RW)
 *
 * When set, and the frame sync is generated internally, a frame sync is only
 * generated when the FIFO warning flag is clear.
 *
 * Values:
 * - 0b0 - Internal frame sync is generated continuously.
 * - 0b1 - Internal frame sync is generated when the FIFO warning flag is clear.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCR4_ONDEM field. */
#define I2S_RD_RCR4_ONDEM(base) ((I2S_RCR4_REG(base) & I2S_RCR4_ONDEM_MASK) >> I2S_RCR4_ONDEM_SHIFT)
#define I2S_BRD_RCR4_ONDEM(base) (BME_UBFX32(&I2S_RCR4_REG(base), I2S_RCR4_ONDEM_SHIFT, I2S_RCR4_ONDEM_WIDTH))

/*! @brief Set the ONDEM field to a new value. */
#define I2S_WR_RCR4_ONDEM(base, value) (I2S_RMW_RCR4(base, I2S_RCR4_ONDEM_MASK, I2S_RCR4_ONDEM(value)))
#define I2S_BWR_RCR4_ONDEM(base, value) (BME_BFI32(&I2S_RCR4_REG(base), ((uint32_t)(value) << I2S_RCR4_ONDEM_SHIFT), I2S_RCR4_ONDEM_SHIFT, I2S_RCR4_ONDEM_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCR4, field FSE[3] (RW)
 *
 * Values:
 * - 0b0 - Frame sync asserts with the first bit of the frame.
 * - 0b1 - Frame sync asserts one bit before the first bit of the frame.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCR4_FSE field. */
#define I2S_RD_RCR4_FSE(base) ((I2S_RCR4_REG(base) & I2S_RCR4_FSE_MASK) >> I2S_RCR4_FSE_SHIFT)
#define I2S_BRD_RCR4_FSE(base) (BME_UBFX32(&I2S_RCR4_REG(base), I2S_RCR4_FSE_SHIFT, I2S_RCR4_FSE_WIDTH))

/*! @brief Set the FSE field to a new value. */
#define I2S_WR_RCR4_FSE(base, value) (I2S_RMW_RCR4(base, I2S_RCR4_FSE_MASK, I2S_RCR4_FSE(value)))
#define I2S_BWR_RCR4_FSE(base, value) (BME_BFI32(&I2S_RCR4_REG(base), ((uint32_t)(value) << I2S_RCR4_FSE_SHIFT), I2S_RCR4_FSE_SHIFT, I2S_RCR4_FSE_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCR4, field MF[4] (RW)
 *
 * Configures whether the LSB or the MSB is received first.
 *
 * Values:
 * - 0b0 - LSB is received first.
 * - 0b1 - MSB is received first.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCR4_MF field. */
#define I2S_RD_RCR4_MF(base) ((I2S_RCR4_REG(base) & I2S_RCR4_MF_MASK) >> I2S_RCR4_MF_SHIFT)
#define I2S_BRD_RCR4_MF(base) (BME_UBFX32(&I2S_RCR4_REG(base), I2S_RCR4_MF_SHIFT, I2S_RCR4_MF_WIDTH))

/*! @brief Set the MF field to a new value. */
#define I2S_WR_RCR4_MF(base, value) (I2S_RMW_RCR4(base, I2S_RCR4_MF_MASK, I2S_RCR4_MF(value)))
#define I2S_BWR_RCR4_MF(base, value) (BME_BFI32(&I2S_RCR4_REG(base), ((uint32_t)(value) << I2S_RCR4_MF_SHIFT), I2S_RCR4_MF_SHIFT, I2S_RCR4_MF_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCR4, field SYWD[12:8] (RW)
 *
 * Configures the length of the frame sync in number of bit clocks. The value
 * written must be one less than the number of bit clocks. For example, write 0 for
 * the frame sync to assert for one bit clock only. The sync width cannot be
 * configured longer than the first word of the frame.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCR4_SYWD field. */
#define I2S_RD_RCR4_SYWD(base) ((I2S_RCR4_REG(base) & I2S_RCR4_SYWD_MASK) >> I2S_RCR4_SYWD_SHIFT)
#define I2S_BRD_RCR4_SYWD(base) (BME_UBFX32(&I2S_RCR4_REG(base), I2S_RCR4_SYWD_SHIFT, I2S_RCR4_SYWD_WIDTH))

/*! @brief Set the SYWD field to a new value. */
#define I2S_WR_RCR4_SYWD(base, value) (I2S_RMW_RCR4(base, I2S_RCR4_SYWD_MASK, I2S_RCR4_SYWD(value)))
#define I2S_BWR_RCR4_SYWD(base, value) (BME_BFI32(&I2S_RCR4_REG(base), ((uint32_t)(value) << I2S_RCR4_SYWD_SHIFT), I2S_RCR4_SYWD_SHIFT, I2S_RCR4_SYWD_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCR4, field FRSZ[20:16] (RW)
 *
 * Configures the number of words in each frame. The value written must be one
 * less than the number of words in the frame. For example, write 0 for one word
 * per frame. The maximum supported frame size is 32 words.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCR4_FRSZ field. */
#define I2S_RD_RCR4_FRSZ(base) ((I2S_RCR4_REG(base) & I2S_RCR4_FRSZ_MASK) >> I2S_RCR4_FRSZ_SHIFT)
#define I2S_BRD_RCR4_FRSZ(base) (BME_UBFX32(&I2S_RCR4_REG(base), I2S_RCR4_FRSZ_SHIFT, I2S_RCR4_FRSZ_WIDTH))

/*! @brief Set the FRSZ field to a new value. */
#define I2S_WR_RCR4_FRSZ(base, value) (I2S_RMW_RCR4(base, I2S_RCR4_FRSZ_MASK, I2S_RCR4_FRSZ(value)))
#define I2S_BWR_RCR4_FRSZ(base, value) (BME_BFI32(&I2S_RCR4_REG(base), ((uint32_t)(value) << I2S_RCR4_FRSZ_SHIFT), I2S_RCR4_FRSZ_SHIFT, I2S_RCR4_FRSZ_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCR4, field FPACK[25:24] (RW)
 *
 * Enables packing of 8-bit data or 16-bit data into each 32-bit FIFO word. If
 * the word size is greater than 8-bit or 16-bit then only the first 8-bit or
 * 16-bits are stored to the FIFO. The first word in each frame always starts with a
 * new 32-bit FIFO word and the first bit shifted must be configured within the
 * first packed word. When FIFO packing is enabled, the FIFO read pointer will
 * only increment when the full 32-bit FIFO word has been read by software.
 *
 * Values:
 * - 0b00 - FIFO packing is disabled
 * - 0b01 - Reserved.
 * - 0b10 - 8-bit FIFO packing is enabled
 * - 0b11 - 16-bit FIFO packing is enabled
 */
/*@{*/
/*! @brief Read current value of the I2S_RCR4_FPACK field. */
#define I2S_RD_RCR4_FPACK(base) ((I2S_RCR4_REG(base) & I2S_RCR4_FPACK_MASK) >> I2S_RCR4_FPACK_SHIFT)
#define I2S_BRD_RCR4_FPACK(base) (BME_UBFX32(&I2S_RCR4_REG(base), I2S_RCR4_FPACK_SHIFT, I2S_RCR4_FPACK_WIDTH))

/*! @brief Set the FPACK field to a new value. */
#define I2S_WR_RCR4_FPACK(base, value) (I2S_RMW_RCR4(base, I2S_RCR4_FPACK_MASK, I2S_RCR4_FPACK(value)))
#define I2S_BWR_RCR4_FPACK(base, value) (BME_BFI32(&I2S_RCR4_REG(base), ((uint32_t)(value) << I2S_RCR4_FPACK_SHIFT), I2S_RCR4_FPACK_SHIFT, I2S_RCR4_FPACK_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCR4, field FCOMB[27:26] (RW)
 *
 * When FIFO combine mode is enabled for FIFO reads, software reading any FIFO
 * data register will alternate the read among the enabled data channel FIFOs. For
 * example, if two data channels are enabled then the first read will be
 * performed to the first enabled data channel FIFO and the second read will be
 * performed to the second enabled data channel FIFO. Reseting the FIFO or disabling FIFO
 * combine mode for FIFO reads will reset the pointer back to the first enabled
 * data channel. When FIFO combine mode is enabled for FIFO writes from the
 * receive shift registers, the first enabled data channel input will alternate
 * between the enabled data channel FIFOs. For example, if two data channels are
 * enabled then the first unmasked received word will be stored in the first enabled
 * data channel FIFO and the second unmasked received word will be stored in the
 * second enabled data channel FIFO. Since the first word of the frame is always
 * stored in the first enabled data channel FIFO, it is recommended that the number
 * of unmasked words per frame is evenly divisible by the number of enabled data
 * channels.
 *
 * Values:
 * - 0b00 - FIFO combine mode disabled.
 * - 0b01 - FIFO combine mode enabled on FIFO writes (from receive shift
 *     registers).
 * - 0b10 - FIFO combine mode enabled on FIFO reads (by software).
 * - 0b11 - FIFO combine mode enabled on FIFO writes (from receive shift
 *     registers) and reads (by software).
 */
/*@{*/
/*! @brief Read current value of the I2S_RCR4_FCOMB field. */
#define I2S_RD_RCR4_FCOMB(base) ((I2S_RCR4_REG(base) & I2S_RCR4_FCOMB_MASK) >> I2S_RCR4_FCOMB_SHIFT)
#define I2S_BRD_RCR4_FCOMB(base) (BME_UBFX32(&I2S_RCR4_REG(base), I2S_RCR4_FCOMB_SHIFT, I2S_RCR4_FCOMB_WIDTH))

/*! @brief Set the FCOMB field to a new value. */
#define I2S_WR_RCR4_FCOMB(base, value) (I2S_RMW_RCR4(base, I2S_RCR4_FCOMB_MASK, I2S_RCR4_FCOMB(value)))
#define I2S_BWR_RCR4_FCOMB(base, value) (BME_BFI32(&I2S_RCR4_REG(base), ((uint32_t)(value) << I2S_RCR4_FCOMB_SHIFT), I2S_RCR4_FCOMB_SHIFT, I2S_RCR4_FCOMB_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCR4, field FCONT[28] (RW)
 *
 * Configures when the SAI will continue receiving after a FIFO error has been
 * detected.
 *
 * Values:
 * - 0b0 - On FIFO error, the SAI will continue from the start of the next frame
 *     after the FIFO error flag has been cleared.
 * - 0b1 - On FIFO error, the SAI will continue from the same word that caused
 *     the FIFO error to set after the FIFO warning flag has been cleared.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCR4_FCONT field. */
#define I2S_RD_RCR4_FCONT(base) ((I2S_RCR4_REG(base) & I2S_RCR4_FCONT_MASK) >> I2S_RCR4_FCONT_SHIFT)
#define I2S_BRD_RCR4_FCONT(base) (BME_UBFX32(&I2S_RCR4_REG(base), I2S_RCR4_FCONT_SHIFT, I2S_RCR4_FCONT_WIDTH))

/*! @brief Set the FCONT field to a new value. */
#define I2S_WR_RCR4_FCONT(base, value) (I2S_RMW_RCR4(base, I2S_RCR4_FCONT_MASK, I2S_RCR4_FCONT(value)))
#define I2S_BWR_RCR4_FCONT(base, value) (BME_BFI32(&I2S_RCR4_REG(base), ((uint32_t)(value) << I2S_RCR4_FCONT_SHIFT), I2S_RCR4_FCONT_SHIFT, I2S_RCR4_FCONT_WIDTH))
/*@}*/

/*******************************************************************************
 * I2S_RCR5 - SAI Receive Configuration 5 Register
 ******************************************************************************/

/*!
 * @brief I2S_RCR5 - SAI Receive Configuration 5 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register must not be altered when RCSR[RE] is set.
 */
/*!
 * @name Constants and macros for entire I2S_RCR5 register
 */
/*@{*/
#define I2S_RD_RCR5(base)        (I2S_RCR5_REG(base))
#define I2S_WR_RCR5(base, value) (I2S_RCR5_REG(base) = (value))
#define I2S_RMW_RCR5(base, mask, value) (I2S_WR_RCR5(base, (I2S_RD_RCR5(base) & ~(mask)) | (value)))
#define I2S_SET_RCR5(base, value) (BME_OR32(&I2S_RCR5_REG(base), (uint32_t)(value)))
#define I2S_CLR_RCR5(base, value) (BME_AND32(&I2S_RCR5_REG(base), (uint32_t)(~(value))))
#define I2S_TOG_RCR5(base, value) (BME_XOR32(&I2S_RCR5_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual I2S_RCR5 bitfields
 */

/*!
 * @name Register I2S_RCR5, field FBT[12:8] (RW)
 *
 * Configures the bit index for the first bit received for each word in the
 * frame. If configured for MSB First, the index of the next bit received is one less
 * than the current bit received. If configured for LSB First, the index of the
 * next bit received is one more than the current bit received. The value written
 * must be greater than or equal to the word width when configured for MSB
 * First. The value written must be less than or equal to 31-word width when
 * configured for LSB First.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCR5_FBT field. */
#define I2S_RD_RCR5_FBT(base) ((I2S_RCR5_REG(base) & I2S_RCR5_FBT_MASK) >> I2S_RCR5_FBT_SHIFT)
#define I2S_BRD_RCR5_FBT(base) (BME_UBFX32(&I2S_RCR5_REG(base), I2S_RCR5_FBT_SHIFT, I2S_RCR5_FBT_WIDTH))

/*! @brief Set the FBT field to a new value. */
#define I2S_WR_RCR5_FBT(base, value) (I2S_RMW_RCR5(base, I2S_RCR5_FBT_MASK, I2S_RCR5_FBT(value)))
#define I2S_BWR_RCR5_FBT(base, value) (BME_BFI32(&I2S_RCR5_REG(base), ((uint32_t)(value) << I2S_RCR5_FBT_SHIFT), I2S_RCR5_FBT_SHIFT, I2S_RCR5_FBT_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCR5, field W0W[20:16] (RW)
 *
 * Configures the number of bits in the first word in each frame. The value
 * written must be one less than the number of bits in the first word. Word width of
 * less than 8 bits is not supported if there is only one word per frame.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCR5_W0W field. */
#define I2S_RD_RCR5_W0W(base) ((I2S_RCR5_REG(base) & I2S_RCR5_W0W_MASK) >> I2S_RCR5_W0W_SHIFT)
#define I2S_BRD_RCR5_W0W(base) (BME_UBFX32(&I2S_RCR5_REG(base), I2S_RCR5_W0W_SHIFT, I2S_RCR5_W0W_WIDTH))

/*! @brief Set the W0W field to a new value. */
#define I2S_WR_RCR5_W0W(base, value) (I2S_RMW_RCR5(base, I2S_RCR5_W0W_MASK, I2S_RCR5_W0W(value)))
#define I2S_BWR_RCR5_W0W(base, value) (BME_BFI32(&I2S_RCR5_REG(base), ((uint32_t)(value) << I2S_RCR5_W0W_SHIFT), I2S_RCR5_W0W_SHIFT, I2S_RCR5_W0W_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RCR5, field WNW[28:24] (RW)
 *
 * Configures the number of bits in each word, for each word except the first in
 * the frame. The value written must be one less than the number of bits per
 * word. Word width of less than 8 bits is not supported.
 */
/*@{*/
/*! @brief Read current value of the I2S_RCR5_WNW field. */
#define I2S_RD_RCR5_WNW(base) ((I2S_RCR5_REG(base) & I2S_RCR5_WNW_MASK) >> I2S_RCR5_WNW_SHIFT)
#define I2S_BRD_RCR5_WNW(base) (BME_UBFX32(&I2S_RCR5_REG(base), I2S_RCR5_WNW_SHIFT, I2S_RCR5_WNW_WIDTH))

/*! @brief Set the WNW field to a new value. */
#define I2S_WR_RCR5_WNW(base, value) (I2S_RMW_RCR5(base, I2S_RCR5_WNW_MASK, I2S_RCR5_WNW(value)))
#define I2S_BWR_RCR5_WNW(base, value) (BME_BFI32(&I2S_RCR5_REG(base), ((uint32_t)(value) << I2S_RCR5_WNW_SHIFT), I2S_RCR5_WNW_SHIFT, I2S_RCR5_WNW_WIDTH))
/*@}*/

/*******************************************************************************
 * I2S_RDR - SAI Receive Data Register
 ******************************************************************************/

/*!
 * @brief I2S_RDR - SAI Receive Data Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * Reading this register introduces one additional peripheral clock wait state
 * on each read.
 */
/*!
 * @name Constants and macros for entire I2S_RDR register
 */
/*@{*/
#define I2S_RD_RDR(base, index)  (I2S_RDR_REG(base, index))
/*@}*/

/*******************************************************************************
 * I2S_RFR - SAI Receive FIFO Register
 ******************************************************************************/

/*!
 * @brief I2S_RFR - SAI Receive FIFO Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The MSB of the read and write pointers is used to distinguish between FIFO
 * full and empty conditions. If the read and write pointers are identical, then
 * the FIFO is empty. If the read and write pointers are identical except for the
 * MSB, then the FIFO is full.
 */
/*!
 * @name Constants and macros for entire I2S_RFR register
 */
/*@{*/
#define I2S_RD_RFR(base, index)  (I2S_RFR_REG(base, index))
/*@}*/

/*
 * Constants & macros for individual I2S_RFR bitfields
 */

/*!
 * @name Register I2S_RFR, field RFP[3:0] (RO)
 *
 * FIFO read pointer for receive data channel.
 */
/*@{*/
/*! @brief Read current value of the I2S_RFR_RFP field. */
#define I2S_RD_RFR_RFP(base, index) ((I2S_RFR_REG(base, index) & I2S_RFR_RFP_MASK) >> I2S_RFR_RFP_SHIFT)
#define I2S_BRD_RFR_RFP(base, index) (BME_UBFX32(&I2S_RFR_REG(base, index), I2S_RFR_RFP_SHIFT, I2S_RFR_RFP_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RFR, field RCP[15] (RO)
 *
 * When FIFO Combine mode is enabled for reads, indicates that this data channel
 * is the next FIFO to be read.
 *
 * Values:
 * - 0b0 - No effect.
 * - 0b1 - FIFO combine is enabled for FIFO reads and this FIFO will be read on
 *     the next FIFO read.
 */
/*@{*/
/*! @brief Read current value of the I2S_RFR_RCP field. */
#define I2S_RD_RFR_RCP(base, index) ((I2S_RFR_REG(base, index) & I2S_RFR_RCP_MASK) >> I2S_RFR_RCP_SHIFT)
#define I2S_BRD_RFR_RCP(base, index) (BME_UBFX32(&I2S_RFR_REG(base, index), I2S_RFR_RCP_SHIFT, I2S_RFR_RCP_WIDTH))
/*@}*/

/*!
 * @name Register I2S_RFR, field WFP[19:16] (RO)
 *
 * FIFO write pointer for receive data channel.
 */
/*@{*/
/*! @brief Read current value of the I2S_RFR_WFP field. */
#define I2S_RD_RFR_WFP(base, index) ((I2S_RFR_REG(base, index) & I2S_RFR_WFP_MASK) >> I2S_RFR_WFP_SHIFT)
#define I2S_BRD_RFR_WFP(base, index) (BME_UBFX32(&I2S_RFR_REG(base, index), I2S_RFR_WFP_SHIFT, I2S_RFR_WFP_WIDTH))
/*@}*/

/*******************************************************************************
 * I2S_RMR - SAI Receive Mask Register
 ******************************************************************************/

/*!
 * @brief I2S_RMR - SAI Receive Mask Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register is double-buffered and updates: When RCSR[RE] is first set At
 * the end of each frame This allows the masked words in each frame to change from
 * frame to frame.
 */
/*!
 * @name Constants and macros for entire I2S_RMR register
 */
/*@{*/
#define I2S_RD_RMR(base)         (I2S_RMR_REG(base))
#define I2S_WR_RMR(base, value)  (I2S_RMR_REG(base) = (value))
#define I2S_RMW_RMR(base, mask, value) (I2S_WR_RMR(base, (I2S_RD_RMR(base) & ~(mask)) | (value)))
#define I2S_SET_RMR(base, value) (BME_OR32(&I2S_RMR_REG(base), (uint32_t)(value)))
#define I2S_CLR_RMR(base, value) (BME_AND32(&I2S_RMR_REG(base), (uint32_t)(~(value))))
#define I2S_TOG_RMR(base, value) (BME_XOR32(&I2S_RMR_REG(base), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * I2S_MCR - SAI MCLK Control Register
 ******************************************************************************/

/*!
 * @brief I2S_MCR - SAI MCLK Control Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The MCLK Control Register (MCR) controls the clock source and direction of
 * the audio master clock.
 */
/*!
 * @name Constants and macros for entire I2S_MCR register
 */
/*@{*/
#define I2S_RD_MCR(base)         (I2S_MCR_REG(base))
#define I2S_WR_MCR(base, value)  (I2S_MCR_REG(base) = (value))
#define I2S_RMW_MCR(base, mask, value) (I2S_WR_MCR(base, (I2S_RD_MCR(base) & ~(mask)) | (value)))
#define I2S_SET_MCR(base, value) (BME_OR32(&I2S_MCR_REG(base), (uint32_t)(value)))
#define I2S_CLR_MCR(base, value) (BME_AND32(&I2S_MCR_REG(base), (uint32_t)(~(value))))
#define I2S_TOG_MCR(base, value) (BME_XOR32(&I2S_MCR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual I2S_MCR bitfields
 */

/*!
 * @name Register I2S_MCR, field MICS[25:24] (RW)
 *
 * Selects the clock input to the MCLK divider. This field cannot be changed
 * while the MCLK divider is enabled. See the chip configuration details for
 * information about the connections to these inputs.
 *
 * Values:
 * - 0b00 - MCLK divider input clock 0 is selected.
 * - 0b01 - Reserved
 * - 0b10 - MCLK divider input clock 2 is selected.
 * - 0b11 - MCLK divider input clock 3 is selected.
 */
/*@{*/
/*! @brief Read current value of the I2S_MCR_MICS field. */
#define I2S_RD_MCR_MICS(base) ((I2S_MCR_REG(base) & I2S_MCR_MICS_MASK) >> I2S_MCR_MICS_SHIFT)
#define I2S_BRD_MCR_MICS(base) (BME_UBFX32(&I2S_MCR_REG(base), I2S_MCR_MICS_SHIFT, I2S_MCR_MICS_WIDTH))

/*! @brief Set the MICS field to a new value. */
#define I2S_WR_MCR_MICS(base, value) (I2S_RMW_MCR(base, I2S_MCR_MICS_MASK, I2S_MCR_MICS(value)))
#define I2S_BWR_MCR_MICS(base, value) (BME_BFI32(&I2S_MCR_REG(base), ((uint32_t)(value) << I2S_MCR_MICS_SHIFT), I2S_MCR_MICS_SHIFT, I2S_MCR_MICS_WIDTH))
/*@}*/

/*!
 * @name Register I2S_MCR, field MOE[30] (RW)
 *
 * Enables the MCLK divider and configures the MCLK signal pin as an output.
 * When software clears this field, it remains set until the MCLK divider is fully
 * disabled.
 *
 * Values:
 * - 0b0 - MCLK signal pin is configured as an input that bypasses the MCLK
 *     divider.
 * - 0b1 - MCLK signal pin is configured as an output from the MCLK divider and
 *     the MCLK divider is enabled.
 */
/*@{*/
/*! @brief Read current value of the I2S_MCR_MOE field. */
#define I2S_RD_MCR_MOE(base) ((I2S_MCR_REG(base) & I2S_MCR_MOE_MASK) >> I2S_MCR_MOE_SHIFT)
#define I2S_BRD_MCR_MOE(base) (BME_UBFX32(&I2S_MCR_REG(base), I2S_MCR_MOE_SHIFT, I2S_MCR_MOE_WIDTH))

/*! @brief Set the MOE field to a new value. */
#define I2S_WR_MCR_MOE(base, value) (I2S_RMW_MCR(base, I2S_MCR_MOE_MASK, I2S_MCR_MOE(value)))
#define I2S_BWR_MCR_MOE(base, value) (BME_BFI32(&I2S_MCR_REG(base), ((uint32_t)(value) << I2S_MCR_MOE_SHIFT), I2S_MCR_MOE_SHIFT, I2S_MCR_MOE_WIDTH))
/*@}*/

/*!
 * @name Register I2S_MCR, field DUF[31] (RO)
 *
 * Provides the status of on-the-fly updates to the MCLK divider ratio.
 *
 * Values:
 * - 0b0 - MCLK divider ratio is not being updated currently.
 * - 0b1 - MCLK divider ratio is updating on-the-fly. Further updates to the
 *     MCLK divider ratio are blocked while this flag remains set.
 */
/*@{*/
/*! @brief Read current value of the I2S_MCR_DUF field. */
#define I2S_RD_MCR_DUF(base) ((I2S_MCR_REG(base) & I2S_MCR_DUF_MASK) >> I2S_MCR_DUF_SHIFT)
#define I2S_BRD_MCR_DUF(base) (BME_UBFX32(&I2S_MCR_REG(base), I2S_MCR_DUF_SHIFT, I2S_MCR_DUF_WIDTH))
/*@}*/

/*******************************************************************************
 * I2S_MDR - SAI MCLK Divide Register
 ******************************************************************************/

/*!
 * @brief I2S_MDR - SAI MCLK Divide Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The MCLK Divide Register (MDR) configures the MCLK divide ratio. Although the
 * MDR can be changed when the MCLK divider clock is enabled, additional writes
 * to the MDR are blocked while MCR[DUF] is set. Writes to the MDR when the MCLK
 * divided clock is disabled do not set MCR[DUF].
 */
/*!
 * @name Constants and macros for entire I2S_MDR register
 */
/*@{*/
#define I2S_RD_MDR(base)         (I2S_MDR_REG(base))
#define I2S_WR_MDR(base, value)  (I2S_MDR_REG(base) = (value))
#define I2S_RMW_MDR(base, mask, value) (I2S_WR_MDR(base, (I2S_RD_MDR(base) & ~(mask)) | (value)))
#define I2S_SET_MDR(base, value) (BME_OR32(&I2S_MDR_REG(base), (uint32_t)(value)))
#define I2S_CLR_MDR(base, value) (BME_AND32(&I2S_MDR_REG(base), (uint32_t)(~(value))))
#define I2S_TOG_MDR(base, value) (BME_XOR32(&I2S_MDR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual I2S_MDR bitfields
 */

/*!
 * @name Register I2S_MDR, field DIVIDE[11:0] (RW)
 *
 * Sets the MCLK divide ratio such that: MCLK output = MCLK input * ( (FRACT +
 * 1) / (DIVIDE + 1) ). FRACT must be set equal or less than the value in the
 * DIVIDE field. When using fractional divide values, the MCLK duty cycle will not
 * always be 50/50. See .
 */
/*@{*/
/*! @brief Read current value of the I2S_MDR_DIVIDE field. */
#define I2S_RD_MDR_DIVIDE(base) ((I2S_MDR_REG(base) & I2S_MDR_DIVIDE_MASK) >> I2S_MDR_DIVIDE_SHIFT)
#define I2S_BRD_MDR_DIVIDE(base) (I2S_RD_MDR_DIVIDE(base))

/*! @brief Set the DIVIDE field to a new value. */
#define I2S_WR_MDR_DIVIDE(base, value) (I2S_RMW_MDR(base, I2S_MDR_DIVIDE_MASK, I2S_MDR_DIVIDE(value)))
#define I2S_BWR_MDR_DIVIDE(base, value) (I2S_WR_MDR_DIVIDE(base, value))
/*@}*/

/*!
 * @name Register I2S_MDR, field FRACT[19:12] (RW)
 *
 * Sets the MCLK divide ratio such that: MCLK output = MCLK input * ( (FRACT +
 * 1) / (DIVIDE + 1) ). FRACT must be set equal or less than the value in the
 * DIVIDE field. When using fractional divide values, the MCLK duty cycle will not
 * always be 50/50. See .
 */
/*@{*/
/*! @brief Read current value of the I2S_MDR_FRACT field. */
#define I2S_RD_MDR_FRACT(base) ((I2S_MDR_REG(base) & I2S_MDR_FRACT_MASK) >> I2S_MDR_FRACT_SHIFT)
#define I2S_BRD_MDR_FRACT(base) (BME_UBFX32(&I2S_MDR_REG(base), I2S_MDR_FRACT_SHIFT, I2S_MDR_FRACT_WIDTH))

/*! @brief Set the FRACT field to a new value. */
#define I2S_WR_MDR_FRACT(base, value) (I2S_RMW_MDR(base, I2S_MDR_FRACT_MASK, I2S_MDR_FRACT(value)))
#define I2S_BWR_MDR_FRACT(base, value) (BME_BFI32(&I2S_MDR_REG(base), ((uint32_t)(value) << I2S_MDR_FRACT_SHIFT), I2S_MDR_FRACT_SHIFT, I2S_MDR_FRACT_WIDTH))
/*@}*/

/*
 * MK82F25615 LLWU
 *
 * Low leakage wakeup unit
 *
 * Registers defined in this header file:
 * - LLWU_PE1 - LLWU Pin Enable 1 register
 * - LLWU_PE2 - LLWU Pin Enable 2 register
 * - LLWU_PE3 - LLWU Pin Enable 3 register
 * - LLWU_PE4 - LLWU Pin Enable 4 register
 * - LLWU_PE5 - LLWU Pin Enable 5 register
 * - LLWU_PE6 - LLWU Pin Enable 6 register
 * - LLWU_PE7 - LLWU Pin Enable 7 register
 * - LLWU_PE8 - LLWU Pin Enable 8 register
 * - LLWU_ME - LLWU Module Enable register
 * - LLWU_PF1 - LLWU Pin Flag 1 register
 * - LLWU_PF2 - LLWU Pin Flag 2 register
 * - LLWU_PF3 - LLWU Pin Flag 3 register
 * - LLWU_PF4 - LLWU Pin Flag 4 register
 * - LLWU_MF5 - LLWU Module Flag 5 register
 * - LLWU_FILT1 - LLWU Pin Filter 1 register
 * - LLWU_FILT2 - LLWU Pin Filter 2 register
 * - LLWU_FILT3 - LLWU Pin Filter 3 register
 * - LLWU_FILT4 - LLWU Pin Filter 4 register
 */

#define LLWU_INSTANCE_COUNT (1U) /*!< Number of instances of the LLWU module. */
#define LLWU_IDX (0U) /*!< Instance number for LLWU. */

/*******************************************************************************
 * LLWU_PE1 - LLWU Pin Enable 1 register
 ******************************************************************************/

/*!
 * @brief LLWU_PE1 - LLWU Pin Enable 1 register (RW)
 *
 * Reset value: 0x00U
 *
 * LLWU_PE1 contains the field to enable and select the edge detect type for the
 * external wakeup input pins LLWU_P3-LLWU_P0. This register is reset on Chip
 * Reset not VLLS and by reset types that trigger Chip Reset not VLLS. It is
 * unaffected by reset types that do not trigger Chip Reset not VLLS. See the
 * IntroductionInformation found here describes the registers of the Reset Control Module
 * (RCM). The RCM implements many of the reset functions for the chip. See the
 * chip's reset chapter for more information. details for more information.
 */
/*!
 * @name Constants and macros for entire LLWU_PE1 register
 */
/*@{*/
#define LLWU_RD_PE1(base)        (LLWU_PE1_REG(base))
#define LLWU_WR_PE1(base, value) (LLWU_PE1_REG(base) = (value))
#define LLWU_RMW_PE1(base, mask, value) (LLWU_WR_PE1(base, (LLWU_RD_PE1(base) & ~(mask)) | (value)))
#define LLWU_SET_PE1(base, value) (BME_OR8(&LLWU_PE1_REG(base), (uint8_t)(value)))
#define LLWU_CLR_PE1(base, value) (BME_AND8(&LLWU_PE1_REG(base), (uint8_t)(~(value))))
#define LLWU_TOG_PE1(base, value) (BME_XOR8(&LLWU_PE1_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LLWU_PE1 bitfields
 */

/*!
 * @name Register LLWU_PE1, field WUPE0[1:0] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE1_WUPE0 field. */
#define LLWU_RD_PE1_WUPE0(base) ((LLWU_PE1_REG(base) & LLWU_PE1_WUPE0_MASK) >> LLWU_PE1_WUPE0_SHIFT)
#define LLWU_BRD_PE1_WUPE0(base) (BME_UBFX8(&LLWU_PE1_REG(base), LLWU_PE1_WUPE0_SHIFT, LLWU_PE1_WUPE0_WIDTH))

/*! @brief Set the WUPE0 field to a new value. */
#define LLWU_WR_PE1_WUPE0(base, value) (LLWU_RMW_PE1(base, LLWU_PE1_WUPE0_MASK, LLWU_PE1_WUPE0(value)))
#define LLWU_BWR_PE1_WUPE0(base, value) (BME_BFI8(&LLWU_PE1_REG(base), ((uint8_t)(value) << LLWU_PE1_WUPE0_SHIFT), LLWU_PE1_WUPE0_SHIFT, LLWU_PE1_WUPE0_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PE1, field WUPE1[3:2] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE1_WUPE1 field. */
#define LLWU_RD_PE1_WUPE1(base) ((LLWU_PE1_REG(base) & LLWU_PE1_WUPE1_MASK) >> LLWU_PE1_WUPE1_SHIFT)
#define LLWU_BRD_PE1_WUPE1(base) (BME_UBFX8(&LLWU_PE1_REG(base), LLWU_PE1_WUPE1_SHIFT, LLWU_PE1_WUPE1_WIDTH))

/*! @brief Set the WUPE1 field to a new value. */
#define LLWU_WR_PE1_WUPE1(base, value) (LLWU_RMW_PE1(base, LLWU_PE1_WUPE1_MASK, LLWU_PE1_WUPE1(value)))
#define LLWU_BWR_PE1_WUPE1(base, value) (BME_BFI8(&LLWU_PE1_REG(base), ((uint8_t)(value) << LLWU_PE1_WUPE1_SHIFT), LLWU_PE1_WUPE1_SHIFT, LLWU_PE1_WUPE1_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PE1, field WUPE2[5:4] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE1_WUPE2 field. */
#define LLWU_RD_PE1_WUPE2(base) ((LLWU_PE1_REG(base) & LLWU_PE1_WUPE2_MASK) >> LLWU_PE1_WUPE2_SHIFT)
#define LLWU_BRD_PE1_WUPE2(base) (BME_UBFX8(&LLWU_PE1_REG(base), LLWU_PE1_WUPE2_SHIFT, LLWU_PE1_WUPE2_WIDTH))

/*! @brief Set the WUPE2 field to a new value. */
#define LLWU_WR_PE1_WUPE2(base, value) (LLWU_RMW_PE1(base, LLWU_PE1_WUPE2_MASK, LLWU_PE1_WUPE2(value)))
#define LLWU_BWR_PE1_WUPE2(base, value) (BME_BFI8(&LLWU_PE1_REG(base), ((uint8_t)(value) << LLWU_PE1_WUPE2_SHIFT), LLWU_PE1_WUPE2_SHIFT, LLWU_PE1_WUPE2_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PE1, field WUPE3[7:6] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE1_WUPE3 field. */
#define LLWU_RD_PE1_WUPE3(base) ((LLWU_PE1_REG(base) & LLWU_PE1_WUPE3_MASK) >> LLWU_PE1_WUPE3_SHIFT)
#define LLWU_BRD_PE1_WUPE3(base) (BME_UBFX8(&LLWU_PE1_REG(base), LLWU_PE1_WUPE3_SHIFT, LLWU_PE1_WUPE3_WIDTH))

/*! @brief Set the WUPE3 field to a new value. */
#define LLWU_WR_PE1_WUPE3(base, value) (LLWU_RMW_PE1(base, LLWU_PE1_WUPE3_MASK, LLWU_PE1_WUPE3(value)))
#define LLWU_BWR_PE1_WUPE3(base, value) (BME_BFI8(&LLWU_PE1_REG(base), ((uint8_t)(value) << LLWU_PE1_WUPE3_SHIFT), LLWU_PE1_WUPE3_SHIFT, LLWU_PE1_WUPE3_WIDTH))
/*@}*/

/*******************************************************************************
 * LLWU_PE2 - LLWU Pin Enable 2 register
 ******************************************************************************/

/*!
 * @brief LLWU_PE2 - LLWU Pin Enable 2 register (RW)
 *
 * Reset value: 0x00U
 *
 * LLWU_PE2 contains the field to enable and select the edge detect type for the
 * external wakeup input pins LLWU_P7-LLWU_P4. This register is reset on Chip
 * Reset not VLLS and by reset types that trigger Chip Reset not VLLS. It is
 * unaffected by reset types that do not trigger Chip Reset not VLLS. See the
 * IntroductionInformation found here describes the registers of the Reset Control Module
 * (RCM). The RCM implements many of the reset functions for the chip. See the
 * chip's reset chapter for more information. details for more information.
 */
/*!
 * @name Constants and macros for entire LLWU_PE2 register
 */
/*@{*/
#define LLWU_RD_PE2(base)        (LLWU_PE2_REG(base))
#define LLWU_WR_PE2(base, value) (LLWU_PE2_REG(base) = (value))
#define LLWU_RMW_PE2(base, mask, value) (LLWU_WR_PE2(base, (LLWU_RD_PE2(base) & ~(mask)) | (value)))
#define LLWU_SET_PE2(base, value) (BME_OR8(&LLWU_PE2_REG(base), (uint8_t)(value)))
#define LLWU_CLR_PE2(base, value) (BME_AND8(&LLWU_PE2_REG(base), (uint8_t)(~(value))))
#define LLWU_TOG_PE2(base, value) (BME_XOR8(&LLWU_PE2_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LLWU_PE2 bitfields
 */

/*!
 * @name Register LLWU_PE2, field WUPE4[1:0] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE2_WUPE4 field. */
#define LLWU_RD_PE2_WUPE4(base) ((LLWU_PE2_REG(base) & LLWU_PE2_WUPE4_MASK) >> LLWU_PE2_WUPE4_SHIFT)
#define LLWU_BRD_PE2_WUPE4(base) (BME_UBFX8(&LLWU_PE2_REG(base), LLWU_PE2_WUPE4_SHIFT, LLWU_PE2_WUPE4_WIDTH))

/*! @brief Set the WUPE4 field to a new value. */
#define LLWU_WR_PE2_WUPE4(base, value) (LLWU_RMW_PE2(base, LLWU_PE2_WUPE4_MASK, LLWU_PE2_WUPE4(value)))
#define LLWU_BWR_PE2_WUPE4(base, value) (BME_BFI8(&LLWU_PE2_REG(base), ((uint8_t)(value) << LLWU_PE2_WUPE4_SHIFT), LLWU_PE2_WUPE4_SHIFT, LLWU_PE2_WUPE4_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PE2, field WUPE5[3:2] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE2_WUPE5 field. */
#define LLWU_RD_PE2_WUPE5(base) ((LLWU_PE2_REG(base) & LLWU_PE2_WUPE5_MASK) >> LLWU_PE2_WUPE5_SHIFT)
#define LLWU_BRD_PE2_WUPE5(base) (BME_UBFX8(&LLWU_PE2_REG(base), LLWU_PE2_WUPE5_SHIFT, LLWU_PE2_WUPE5_WIDTH))

/*! @brief Set the WUPE5 field to a new value. */
#define LLWU_WR_PE2_WUPE5(base, value) (LLWU_RMW_PE2(base, LLWU_PE2_WUPE5_MASK, LLWU_PE2_WUPE5(value)))
#define LLWU_BWR_PE2_WUPE5(base, value) (BME_BFI8(&LLWU_PE2_REG(base), ((uint8_t)(value) << LLWU_PE2_WUPE5_SHIFT), LLWU_PE2_WUPE5_SHIFT, LLWU_PE2_WUPE5_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PE2, field WUPE6[5:4] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE2_WUPE6 field. */
#define LLWU_RD_PE2_WUPE6(base) ((LLWU_PE2_REG(base) & LLWU_PE2_WUPE6_MASK) >> LLWU_PE2_WUPE6_SHIFT)
#define LLWU_BRD_PE2_WUPE6(base) (BME_UBFX8(&LLWU_PE2_REG(base), LLWU_PE2_WUPE6_SHIFT, LLWU_PE2_WUPE6_WIDTH))

/*! @brief Set the WUPE6 field to a new value. */
#define LLWU_WR_PE2_WUPE6(base, value) (LLWU_RMW_PE2(base, LLWU_PE2_WUPE6_MASK, LLWU_PE2_WUPE6(value)))
#define LLWU_BWR_PE2_WUPE6(base, value) (BME_BFI8(&LLWU_PE2_REG(base), ((uint8_t)(value) << LLWU_PE2_WUPE6_SHIFT), LLWU_PE2_WUPE6_SHIFT, LLWU_PE2_WUPE6_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PE2, field WUPE7[7:6] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE2_WUPE7 field. */
#define LLWU_RD_PE2_WUPE7(base) ((LLWU_PE2_REG(base) & LLWU_PE2_WUPE7_MASK) >> LLWU_PE2_WUPE7_SHIFT)
#define LLWU_BRD_PE2_WUPE7(base) (BME_UBFX8(&LLWU_PE2_REG(base), LLWU_PE2_WUPE7_SHIFT, LLWU_PE2_WUPE7_WIDTH))

/*! @brief Set the WUPE7 field to a new value. */
#define LLWU_WR_PE2_WUPE7(base, value) (LLWU_RMW_PE2(base, LLWU_PE2_WUPE7_MASK, LLWU_PE2_WUPE7(value)))
#define LLWU_BWR_PE2_WUPE7(base, value) (BME_BFI8(&LLWU_PE2_REG(base), ((uint8_t)(value) << LLWU_PE2_WUPE7_SHIFT), LLWU_PE2_WUPE7_SHIFT, LLWU_PE2_WUPE7_WIDTH))
/*@}*/

/*******************************************************************************
 * LLWU_PE3 - LLWU Pin Enable 3 register
 ******************************************************************************/

/*!
 * @brief LLWU_PE3 - LLWU Pin Enable 3 register (RW)
 *
 * Reset value: 0x00U
 *
 * LLWU_PE3 contains the field to enable and select the edge detect type for the
 * external wakeup input pins LLWU_P11-LLWU_P8. This register is reset on Chip
 * Reset not VLLS and by reset types that trigger Chip Reset not VLLS. It is
 * unaffected by reset types that do not trigger Chip Reset not VLLS. See the
 * IntroductionInformation found here describes the registers of the Reset Control Module
 * (RCM). The RCM implements many of the reset functions for the chip. See the
 * chip's reset chapter for more information. details for more information.
 */
/*!
 * @name Constants and macros for entire LLWU_PE3 register
 */
/*@{*/
#define LLWU_RD_PE3(base)        (LLWU_PE3_REG(base))
#define LLWU_WR_PE3(base, value) (LLWU_PE3_REG(base) = (value))
#define LLWU_RMW_PE3(base, mask, value) (LLWU_WR_PE3(base, (LLWU_RD_PE3(base) & ~(mask)) | (value)))
#define LLWU_SET_PE3(base, value) (BME_OR8(&LLWU_PE3_REG(base), (uint8_t)(value)))
#define LLWU_CLR_PE3(base, value) (BME_AND8(&LLWU_PE3_REG(base), (uint8_t)(~(value))))
#define LLWU_TOG_PE3(base, value) (BME_XOR8(&LLWU_PE3_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LLWU_PE3 bitfields
 */

/*!
 * @name Register LLWU_PE3, field WUPE8[1:0] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE3_WUPE8 field. */
#define LLWU_RD_PE3_WUPE8(base) ((LLWU_PE3_REG(base) & LLWU_PE3_WUPE8_MASK) >> LLWU_PE3_WUPE8_SHIFT)
#define LLWU_BRD_PE3_WUPE8(base) (BME_UBFX8(&LLWU_PE3_REG(base), LLWU_PE3_WUPE8_SHIFT, LLWU_PE3_WUPE8_WIDTH))

/*! @brief Set the WUPE8 field to a new value. */
#define LLWU_WR_PE3_WUPE8(base, value) (LLWU_RMW_PE3(base, LLWU_PE3_WUPE8_MASK, LLWU_PE3_WUPE8(value)))
#define LLWU_BWR_PE3_WUPE8(base, value) (BME_BFI8(&LLWU_PE3_REG(base), ((uint8_t)(value) << LLWU_PE3_WUPE8_SHIFT), LLWU_PE3_WUPE8_SHIFT, LLWU_PE3_WUPE8_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PE3, field WUPE9[3:2] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE3_WUPE9 field. */
#define LLWU_RD_PE3_WUPE9(base) ((LLWU_PE3_REG(base) & LLWU_PE3_WUPE9_MASK) >> LLWU_PE3_WUPE9_SHIFT)
#define LLWU_BRD_PE3_WUPE9(base) (BME_UBFX8(&LLWU_PE3_REG(base), LLWU_PE3_WUPE9_SHIFT, LLWU_PE3_WUPE9_WIDTH))

/*! @brief Set the WUPE9 field to a new value. */
#define LLWU_WR_PE3_WUPE9(base, value) (LLWU_RMW_PE3(base, LLWU_PE3_WUPE9_MASK, LLWU_PE3_WUPE9(value)))
#define LLWU_BWR_PE3_WUPE9(base, value) (BME_BFI8(&LLWU_PE3_REG(base), ((uint8_t)(value) << LLWU_PE3_WUPE9_SHIFT), LLWU_PE3_WUPE9_SHIFT, LLWU_PE3_WUPE9_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PE3, field WUPE10[5:4] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE3_WUPE10 field. */
#define LLWU_RD_PE3_WUPE10(base) ((LLWU_PE3_REG(base) & LLWU_PE3_WUPE10_MASK) >> LLWU_PE3_WUPE10_SHIFT)
#define LLWU_BRD_PE3_WUPE10(base) (BME_UBFX8(&LLWU_PE3_REG(base), LLWU_PE3_WUPE10_SHIFT, LLWU_PE3_WUPE10_WIDTH))

/*! @brief Set the WUPE10 field to a new value. */
#define LLWU_WR_PE3_WUPE10(base, value) (LLWU_RMW_PE3(base, LLWU_PE3_WUPE10_MASK, LLWU_PE3_WUPE10(value)))
#define LLWU_BWR_PE3_WUPE10(base, value) (BME_BFI8(&LLWU_PE3_REG(base), ((uint8_t)(value) << LLWU_PE3_WUPE10_SHIFT), LLWU_PE3_WUPE10_SHIFT, LLWU_PE3_WUPE10_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PE3, field WUPE11[7:6] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE3_WUPE11 field. */
#define LLWU_RD_PE3_WUPE11(base) ((LLWU_PE3_REG(base) & LLWU_PE3_WUPE11_MASK) >> LLWU_PE3_WUPE11_SHIFT)
#define LLWU_BRD_PE3_WUPE11(base) (BME_UBFX8(&LLWU_PE3_REG(base), LLWU_PE3_WUPE11_SHIFT, LLWU_PE3_WUPE11_WIDTH))

/*! @brief Set the WUPE11 field to a new value. */
#define LLWU_WR_PE3_WUPE11(base, value) (LLWU_RMW_PE3(base, LLWU_PE3_WUPE11_MASK, LLWU_PE3_WUPE11(value)))
#define LLWU_BWR_PE3_WUPE11(base, value) (BME_BFI8(&LLWU_PE3_REG(base), ((uint8_t)(value) << LLWU_PE3_WUPE11_SHIFT), LLWU_PE3_WUPE11_SHIFT, LLWU_PE3_WUPE11_WIDTH))
/*@}*/

/*******************************************************************************
 * LLWU_PE4 - LLWU Pin Enable 4 register
 ******************************************************************************/

/*!
 * @brief LLWU_PE4 - LLWU Pin Enable 4 register (RW)
 *
 * Reset value: 0x00U
 *
 * LLWU_PE4 contains the field to enable and select the edge detect type for the
 * external wakeup input pins LLWU_P15-LLWU_P12. This register is reset on Chip
 * Reset not VLLS and by reset types that trigger Chip Reset not VLLS. It is
 * unaffected by reset types that do not trigger Chip Reset not VLLS. See the
 * IntroductionInformation found here describes the registers of the Reset Control
 * Module (RCM). The RCM implements many of the reset functions for the chip. See the
 * chip's reset chapter for more information. details for more information.
 */
/*!
 * @name Constants and macros for entire LLWU_PE4 register
 */
/*@{*/
#define LLWU_RD_PE4(base)        (LLWU_PE4_REG(base))
#define LLWU_WR_PE4(base, value) (LLWU_PE4_REG(base) = (value))
#define LLWU_RMW_PE4(base, mask, value) (LLWU_WR_PE4(base, (LLWU_RD_PE4(base) & ~(mask)) | (value)))
#define LLWU_SET_PE4(base, value) (BME_OR8(&LLWU_PE4_REG(base), (uint8_t)(value)))
#define LLWU_CLR_PE4(base, value) (BME_AND8(&LLWU_PE4_REG(base), (uint8_t)(~(value))))
#define LLWU_TOG_PE4(base, value) (BME_XOR8(&LLWU_PE4_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LLWU_PE4 bitfields
 */

/*!
 * @name Register LLWU_PE4, field WUPE12[1:0] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE4_WUPE12 field. */
#define LLWU_RD_PE4_WUPE12(base) ((LLWU_PE4_REG(base) & LLWU_PE4_WUPE12_MASK) >> LLWU_PE4_WUPE12_SHIFT)
#define LLWU_BRD_PE4_WUPE12(base) (BME_UBFX8(&LLWU_PE4_REG(base), LLWU_PE4_WUPE12_SHIFT, LLWU_PE4_WUPE12_WIDTH))

/*! @brief Set the WUPE12 field to a new value. */
#define LLWU_WR_PE4_WUPE12(base, value) (LLWU_RMW_PE4(base, LLWU_PE4_WUPE12_MASK, LLWU_PE4_WUPE12(value)))
#define LLWU_BWR_PE4_WUPE12(base, value) (BME_BFI8(&LLWU_PE4_REG(base), ((uint8_t)(value) << LLWU_PE4_WUPE12_SHIFT), LLWU_PE4_WUPE12_SHIFT, LLWU_PE4_WUPE12_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PE4, field WUPE13[3:2] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE4_WUPE13 field. */
#define LLWU_RD_PE4_WUPE13(base) ((LLWU_PE4_REG(base) & LLWU_PE4_WUPE13_MASK) >> LLWU_PE4_WUPE13_SHIFT)
#define LLWU_BRD_PE4_WUPE13(base) (BME_UBFX8(&LLWU_PE4_REG(base), LLWU_PE4_WUPE13_SHIFT, LLWU_PE4_WUPE13_WIDTH))

/*! @brief Set the WUPE13 field to a new value. */
#define LLWU_WR_PE4_WUPE13(base, value) (LLWU_RMW_PE4(base, LLWU_PE4_WUPE13_MASK, LLWU_PE4_WUPE13(value)))
#define LLWU_BWR_PE4_WUPE13(base, value) (BME_BFI8(&LLWU_PE4_REG(base), ((uint8_t)(value) << LLWU_PE4_WUPE13_SHIFT), LLWU_PE4_WUPE13_SHIFT, LLWU_PE4_WUPE13_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PE4, field WUPE14[5:4] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE4_WUPE14 field. */
#define LLWU_RD_PE4_WUPE14(base) ((LLWU_PE4_REG(base) & LLWU_PE4_WUPE14_MASK) >> LLWU_PE4_WUPE14_SHIFT)
#define LLWU_BRD_PE4_WUPE14(base) (BME_UBFX8(&LLWU_PE4_REG(base), LLWU_PE4_WUPE14_SHIFT, LLWU_PE4_WUPE14_WIDTH))

/*! @brief Set the WUPE14 field to a new value. */
#define LLWU_WR_PE4_WUPE14(base, value) (LLWU_RMW_PE4(base, LLWU_PE4_WUPE14_MASK, LLWU_PE4_WUPE14(value)))
#define LLWU_BWR_PE4_WUPE14(base, value) (BME_BFI8(&LLWU_PE4_REG(base), ((uint8_t)(value) << LLWU_PE4_WUPE14_SHIFT), LLWU_PE4_WUPE14_SHIFT, LLWU_PE4_WUPE14_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PE4, field WUPE15[7:6] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE4_WUPE15 field. */
#define LLWU_RD_PE4_WUPE15(base) ((LLWU_PE4_REG(base) & LLWU_PE4_WUPE15_MASK) >> LLWU_PE4_WUPE15_SHIFT)
#define LLWU_BRD_PE4_WUPE15(base) (BME_UBFX8(&LLWU_PE4_REG(base), LLWU_PE4_WUPE15_SHIFT, LLWU_PE4_WUPE15_WIDTH))

/*! @brief Set the WUPE15 field to a new value. */
#define LLWU_WR_PE4_WUPE15(base, value) (LLWU_RMW_PE4(base, LLWU_PE4_WUPE15_MASK, LLWU_PE4_WUPE15(value)))
#define LLWU_BWR_PE4_WUPE15(base, value) (BME_BFI8(&LLWU_PE4_REG(base), ((uint8_t)(value) << LLWU_PE4_WUPE15_SHIFT), LLWU_PE4_WUPE15_SHIFT, LLWU_PE4_WUPE15_WIDTH))
/*@}*/

/*******************************************************************************
 * LLWU_PE5 - LLWU Pin Enable 5 register
 ******************************************************************************/

/*!
 * @brief LLWU_PE5 - LLWU Pin Enable 5 register (RW)
 *
 * Reset value: 0x00U
 *
 * LLWU_PE5 contains the field to enable and select the edge detect type for the
 * external wakeup input pins LLWU_P19-LLWU_P16. This register is reset on Chip
 * Reset not VLLS and by reset types that trigger Chip Reset not VLLS. It is
 * unaffected by reset types that do not trigger Chip Reset not VLLS. See the
 * IntroductionInformation found here describes the registers of the Reset Control
 * Module (RCM). The RCM implements many of the reset functions for the chip. See the
 * chip's reset chapter for more information. details for more information.
 */
/*!
 * @name Constants and macros for entire LLWU_PE5 register
 */
/*@{*/
#define LLWU_RD_PE5(base)        (LLWU_PE5_REG(base))
#define LLWU_WR_PE5(base, value) (LLWU_PE5_REG(base) = (value))
#define LLWU_RMW_PE5(base, mask, value) (LLWU_WR_PE5(base, (LLWU_RD_PE5(base) & ~(mask)) | (value)))
#define LLWU_SET_PE5(base, value) (BME_OR8(&LLWU_PE5_REG(base), (uint8_t)(value)))
#define LLWU_CLR_PE5(base, value) (BME_AND8(&LLWU_PE5_REG(base), (uint8_t)(~(value))))
#define LLWU_TOG_PE5(base, value) (BME_XOR8(&LLWU_PE5_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LLWU_PE5 bitfields
 */

/*!
 * @name Register LLWU_PE5, field WUPE16[1:0] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE5_WUPE16 field. */
#define LLWU_RD_PE5_WUPE16(base) ((LLWU_PE5_REG(base) & LLWU_PE5_WUPE16_MASK) >> LLWU_PE5_WUPE16_SHIFT)
#define LLWU_BRD_PE5_WUPE16(base) (BME_UBFX8(&LLWU_PE5_REG(base), LLWU_PE5_WUPE16_SHIFT, LLWU_PE5_WUPE16_WIDTH))

/*! @brief Set the WUPE16 field to a new value. */
#define LLWU_WR_PE5_WUPE16(base, value) (LLWU_RMW_PE5(base, LLWU_PE5_WUPE16_MASK, LLWU_PE5_WUPE16(value)))
#define LLWU_BWR_PE5_WUPE16(base, value) (BME_BFI8(&LLWU_PE5_REG(base), ((uint8_t)(value) << LLWU_PE5_WUPE16_SHIFT), LLWU_PE5_WUPE16_SHIFT, LLWU_PE5_WUPE16_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PE5, field WUPE17[3:2] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE5_WUPE17 field. */
#define LLWU_RD_PE5_WUPE17(base) ((LLWU_PE5_REG(base) & LLWU_PE5_WUPE17_MASK) >> LLWU_PE5_WUPE17_SHIFT)
#define LLWU_BRD_PE5_WUPE17(base) (BME_UBFX8(&LLWU_PE5_REG(base), LLWU_PE5_WUPE17_SHIFT, LLWU_PE5_WUPE17_WIDTH))

/*! @brief Set the WUPE17 field to a new value. */
#define LLWU_WR_PE5_WUPE17(base, value) (LLWU_RMW_PE5(base, LLWU_PE5_WUPE17_MASK, LLWU_PE5_WUPE17(value)))
#define LLWU_BWR_PE5_WUPE17(base, value) (BME_BFI8(&LLWU_PE5_REG(base), ((uint8_t)(value) << LLWU_PE5_WUPE17_SHIFT), LLWU_PE5_WUPE17_SHIFT, LLWU_PE5_WUPE17_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PE5, field WUPE18[5:4] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE5_WUPE18 field. */
#define LLWU_RD_PE5_WUPE18(base) ((LLWU_PE5_REG(base) & LLWU_PE5_WUPE18_MASK) >> LLWU_PE5_WUPE18_SHIFT)
#define LLWU_BRD_PE5_WUPE18(base) (BME_UBFX8(&LLWU_PE5_REG(base), LLWU_PE5_WUPE18_SHIFT, LLWU_PE5_WUPE18_WIDTH))

/*! @brief Set the WUPE18 field to a new value. */
#define LLWU_WR_PE5_WUPE18(base, value) (LLWU_RMW_PE5(base, LLWU_PE5_WUPE18_MASK, LLWU_PE5_WUPE18(value)))
#define LLWU_BWR_PE5_WUPE18(base, value) (BME_BFI8(&LLWU_PE5_REG(base), ((uint8_t)(value) << LLWU_PE5_WUPE18_SHIFT), LLWU_PE5_WUPE18_SHIFT, LLWU_PE5_WUPE18_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PE5, field WUPE19[7:6] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE5_WUPE19 field. */
#define LLWU_RD_PE5_WUPE19(base) ((LLWU_PE5_REG(base) & LLWU_PE5_WUPE19_MASK) >> LLWU_PE5_WUPE19_SHIFT)
#define LLWU_BRD_PE5_WUPE19(base) (BME_UBFX8(&LLWU_PE5_REG(base), LLWU_PE5_WUPE19_SHIFT, LLWU_PE5_WUPE19_WIDTH))

/*! @brief Set the WUPE19 field to a new value. */
#define LLWU_WR_PE5_WUPE19(base, value) (LLWU_RMW_PE5(base, LLWU_PE5_WUPE19_MASK, LLWU_PE5_WUPE19(value)))
#define LLWU_BWR_PE5_WUPE19(base, value) (BME_BFI8(&LLWU_PE5_REG(base), ((uint8_t)(value) << LLWU_PE5_WUPE19_SHIFT), LLWU_PE5_WUPE19_SHIFT, LLWU_PE5_WUPE19_WIDTH))
/*@}*/

/*******************************************************************************
 * LLWU_PE6 - LLWU Pin Enable 6 register
 ******************************************************************************/

/*!
 * @brief LLWU_PE6 - LLWU Pin Enable 6 register (RW)
 *
 * Reset value: 0x00U
 *
 * LLWU_PE6 contains the field to enable and select the edge detect type for the
 * external wakeup input pins LLWU_P23-LLWU_P20. This register is reset on Chip
 * Reset not VLLS and by reset types that trigger Chip Reset not VLLS. It is
 * unaffected by reset types that do not trigger Chip Reset not VLLS. See the
 * IntroductionInformation found here describes the registers of the Reset Control
 * Module (RCM). The RCM implements many of the reset functions for the chip. See the
 * chip's reset chapter for more information. details for more information.
 */
/*!
 * @name Constants and macros for entire LLWU_PE6 register
 */
/*@{*/
#define LLWU_RD_PE6(base)        (LLWU_PE6_REG(base))
#define LLWU_WR_PE6(base, value) (LLWU_PE6_REG(base) = (value))
#define LLWU_RMW_PE6(base, mask, value) (LLWU_WR_PE6(base, (LLWU_RD_PE6(base) & ~(mask)) | (value)))
#define LLWU_SET_PE6(base, value) (BME_OR8(&LLWU_PE6_REG(base), (uint8_t)(value)))
#define LLWU_CLR_PE6(base, value) (BME_AND8(&LLWU_PE6_REG(base), (uint8_t)(~(value))))
#define LLWU_TOG_PE6(base, value) (BME_XOR8(&LLWU_PE6_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LLWU_PE6 bitfields
 */

/*!
 * @name Register LLWU_PE6, field WUPE20[1:0] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE6_WUPE20 field. */
#define LLWU_RD_PE6_WUPE20(base) ((LLWU_PE6_REG(base) & LLWU_PE6_WUPE20_MASK) >> LLWU_PE6_WUPE20_SHIFT)
#define LLWU_BRD_PE6_WUPE20(base) (BME_UBFX8(&LLWU_PE6_REG(base), LLWU_PE6_WUPE20_SHIFT, LLWU_PE6_WUPE20_WIDTH))

/*! @brief Set the WUPE20 field to a new value. */
#define LLWU_WR_PE6_WUPE20(base, value) (LLWU_RMW_PE6(base, LLWU_PE6_WUPE20_MASK, LLWU_PE6_WUPE20(value)))
#define LLWU_BWR_PE6_WUPE20(base, value) (BME_BFI8(&LLWU_PE6_REG(base), ((uint8_t)(value) << LLWU_PE6_WUPE20_SHIFT), LLWU_PE6_WUPE20_SHIFT, LLWU_PE6_WUPE20_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PE6, field WUPE21[3:2] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE6_WUPE21 field. */
#define LLWU_RD_PE6_WUPE21(base) ((LLWU_PE6_REG(base) & LLWU_PE6_WUPE21_MASK) >> LLWU_PE6_WUPE21_SHIFT)
#define LLWU_BRD_PE6_WUPE21(base) (BME_UBFX8(&LLWU_PE6_REG(base), LLWU_PE6_WUPE21_SHIFT, LLWU_PE6_WUPE21_WIDTH))

/*! @brief Set the WUPE21 field to a new value. */
#define LLWU_WR_PE6_WUPE21(base, value) (LLWU_RMW_PE6(base, LLWU_PE6_WUPE21_MASK, LLWU_PE6_WUPE21(value)))
#define LLWU_BWR_PE6_WUPE21(base, value) (BME_BFI8(&LLWU_PE6_REG(base), ((uint8_t)(value) << LLWU_PE6_WUPE21_SHIFT), LLWU_PE6_WUPE21_SHIFT, LLWU_PE6_WUPE21_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PE6, field WUPE22[5:4] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE6_WUPE22 field. */
#define LLWU_RD_PE6_WUPE22(base) ((LLWU_PE6_REG(base) & LLWU_PE6_WUPE22_MASK) >> LLWU_PE6_WUPE22_SHIFT)
#define LLWU_BRD_PE6_WUPE22(base) (BME_UBFX8(&LLWU_PE6_REG(base), LLWU_PE6_WUPE22_SHIFT, LLWU_PE6_WUPE22_WIDTH))

/*! @brief Set the WUPE22 field to a new value. */
#define LLWU_WR_PE6_WUPE22(base, value) (LLWU_RMW_PE6(base, LLWU_PE6_WUPE22_MASK, LLWU_PE6_WUPE22(value)))
#define LLWU_BWR_PE6_WUPE22(base, value) (BME_BFI8(&LLWU_PE6_REG(base), ((uint8_t)(value) << LLWU_PE6_WUPE22_SHIFT), LLWU_PE6_WUPE22_SHIFT, LLWU_PE6_WUPE22_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PE6, field WUPE23[7:6] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE6_WUPE23 field. */
#define LLWU_RD_PE6_WUPE23(base) ((LLWU_PE6_REG(base) & LLWU_PE6_WUPE23_MASK) >> LLWU_PE6_WUPE23_SHIFT)
#define LLWU_BRD_PE6_WUPE23(base) (BME_UBFX8(&LLWU_PE6_REG(base), LLWU_PE6_WUPE23_SHIFT, LLWU_PE6_WUPE23_WIDTH))

/*! @brief Set the WUPE23 field to a new value. */
#define LLWU_WR_PE6_WUPE23(base, value) (LLWU_RMW_PE6(base, LLWU_PE6_WUPE23_MASK, LLWU_PE6_WUPE23(value)))
#define LLWU_BWR_PE6_WUPE23(base, value) (BME_BFI8(&LLWU_PE6_REG(base), ((uint8_t)(value) << LLWU_PE6_WUPE23_SHIFT), LLWU_PE6_WUPE23_SHIFT, LLWU_PE6_WUPE23_WIDTH))
/*@}*/

/*******************************************************************************
 * LLWU_PE7 - LLWU Pin Enable 7 register
 ******************************************************************************/

/*!
 * @brief LLWU_PE7 - LLWU Pin Enable 7 register (RW)
 *
 * Reset value: 0x00U
 *
 * LLWU_PE7 contains the field to enable and select the edge detect type for the
 * external wakeup input pins LLWU_P27-LLWU_P24. This register is reset on Chip
 * Reset not VLLS and by reset types that trigger Chip Reset not VLLS. It is
 * unaffected by reset types that do not trigger Chip Reset not VLLS. See the
 * IntroductionInformation found here describes the registers of the Reset Control
 * Module (RCM). The RCM implements many of the reset functions for the chip. See the
 * chip's reset chapter for more information. details for more information.
 */
/*!
 * @name Constants and macros for entire LLWU_PE7 register
 */
/*@{*/
#define LLWU_RD_PE7(base)        (LLWU_PE7_REG(base))
#define LLWU_WR_PE7(base, value) (LLWU_PE7_REG(base) = (value))
#define LLWU_RMW_PE7(base, mask, value) (LLWU_WR_PE7(base, (LLWU_RD_PE7(base) & ~(mask)) | (value)))
#define LLWU_SET_PE7(base, value) (BME_OR8(&LLWU_PE7_REG(base), (uint8_t)(value)))
#define LLWU_CLR_PE7(base, value) (BME_AND8(&LLWU_PE7_REG(base), (uint8_t)(~(value))))
#define LLWU_TOG_PE7(base, value) (BME_XOR8(&LLWU_PE7_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LLWU_PE7 bitfields
 */

/*!
 * @name Register LLWU_PE7, field WUPE24[1:0] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE7_WUPE24 field. */
#define LLWU_RD_PE7_WUPE24(base) ((LLWU_PE7_REG(base) & LLWU_PE7_WUPE24_MASK) >> LLWU_PE7_WUPE24_SHIFT)
#define LLWU_BRD_PE7_WUPE24(base) (BME_UBFX8(&LLWU_PE7_REG(base), LLWU_PE7_WUPE24_SHIFT, LLWU_PE7_WUPE24_WIDTH))

/*! @brief Set the WUPE24 field to a new value. */
#define LLWU_WR_PE7_WUPE24(base, value) (LLWU_RMW_PE7(base, LLWU_PE7_WUPE24_MASK, LLWU_PE7_WUPE24(value)))
#define LLWU_BWR_PE7_WUPE24(base, value) (BME_BFI8(&LLWU_PE7_REG(base), ((uint8_t)(value) << LLWU_PE7_WUPE24_SHIFT), LLWU_PE7_WUPE24_SHIFT, LLWU_PE7_WUPE24_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PE7, field WUPE25[3:2] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE7_WUPE25 field. */
#define LLWU_RD_PE7_WUPE25(base) ((LLWU_PE7_REG(base) & LLWU_PE7_WUPE25_MASK) >> LLWU_PE7_WUPE25_SHIFT)
#define LLWU_BRD_PE7_WUPE25(base) (BME_UBFX8(&LLWU_PE7_REG(base), LLWU_PE7_WUPE25_SHIFT, LLWU_PE7_WUPE25_WIDTH))

/*! @brief Set the WUPE25 field to a new value. */
#define LLWU_WR_PE7_WUPE25(base, value) (LLWU_RMW_PE7(base, LLWU_PE7_WUPE25_MASK, LLWU_PE7_WUPE25(value)))
#define LLWU_BWR_PE7_WUPE25(base, value) (BME_BFI8(&LLWU_PE7_REG(base), ((uint8_t)(value) << LLWU_PE7_WUPE25_SHIFT), LLWU_PE7_WUPE25_SHIFT, LLWU_PE7_WUPE25_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PE7, field WUPE26[5:4] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE7_WUPE26 field. */
#define LLWU_RD_PE7_WUPE26(base) ((LLWU_PE7_REG(base) & LLWU_PE7_WUPE26_MASK) >> LLWU_PE7_WUPE26_SHIFT)
#define LLWU_BRD_PE7_WUPE26(base) (BME_UBFX8(&LLWU_PE7_REG(base), LLWU_PE7_WUPE26_SHIFT, LLWU_PE7_WUPE26_WIDTH))

/*! @brief Set the WUPE26 field to a new value. */
#define LLWU_WR_PE7_WUPE26(base, value) (LLWU_RMW_PE7(base, LLWU_PE7_WUPE26_MASK, LLWU_PE7_WUPE26(value)))
#define LLWU_BWR_PE7_WUPE26(base, value) (BME_BFI8(&LLWU_PE7_REG(base), ((uint8_t)(value) << LLWU_PE7_WUPE26_SHIFT), LLWU_PE7_WUPE26_SHIFT, LLWU_PE7_WUPE26_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PE7, field WUPE27[7:6] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE7_WUPE27 field. */
#define LLWU_RD_PE7_WUPE27(base) ((LLWU_PE7_REG(base) & LLWU_PE7_WUPE27_MASK) >> LLWU_PE7_WUPE27_SHIFT)
#define LLWU_BRD_PE7_WUPE27(base) (BME_UBFX8(&LLWU_PE7_REG(base), LLWU_PE7_WUPE27_SHIFT, LLWU_PE7_WUPE27_WIDTH))

/*! @brief Set the WUPE27 field to a new value. */
#define LLWU_WR_PE7_WUPE27(base, value) (LLWU_RMW_PE7(base, LLWU_PE7_WUPE27_MASK, LLWU_PE7_WUPE27(value)))
#define LLWU_BWR_PE7_WUPE27(base, value) (BME_BFI8(&LLWU_PE7_REG(base), ((uint8_t)(value) << LLWU_PE7_WUPE27_SHIFT), LLWU_PE7_WUPE27_SHIFT, LLWU_PE7_WUPE27_WIDTH))
/*@}*/

/*******************************************************************************
 * LLWU_PE8 - LLWU Pin Enable 8 register
 ******************************************************************************/

/*!
 * @brief LLWU_PE8 - LLWU Pin Enable 8 register (RW)
 *
 * Reset value: 0x00U
 *
 * LLWU_PE8 contains the field to enable and select the edge detect type for the
 * external wakeup input pins LLWU_P31-LLWU_P28. This register is reset on Chip
 * Reset not VLLS and by reset types that trigger Chip Reset not VLLS. It is
 * unaffected by reset types that do not trigger Chip Reset not VLLS. See the
 * IntroductionInformation found here describes the registers of the Reset Control
 * Module (RCM). The RCM implements many of the reset functions for the chip. See the
 * chip's reset chapter for more information. details for more information.
 */
/*!
 * @name Constants and macros for entire LLWU_PE8 register
 */
/*@{*/
#define LLWU_RD_PE8(base)        (LLWU_PE8_REG(base))
#define LLWU_WR_PE8(base, value) (LLWU_PE8_REG(base) = (value))
#define LLWU_RMW_PE8(base, mask, value) (LLWU_WR_PE8(base, (LLWU_RD_PE8(base) & ~(mask)) | (value)))
#define LLWU_SET_PE8(base, value) (BME_OR8(&LLWU_PE8_REG(base), (uint8_t)(value)))
#define LLWU_CLR_PE8(base, value) (BME_AND8(&LLWU_PE8_REG(base), (uint8_t)(~(value))))
#define LLWU_TOG_PE8(base, value) (BME_XOR8(&LLWU_PE8_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LLWU_PE8 bitfields
 */

/*!
 * @name Register LLWU_PE8, field WUPE28[1:0] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE8_WUPE28 field. */
#define LLWU_RD_PE8_WUPE28(base) ((LLWU_PE8_REG(base) & LLWU_PE8_WUPE28_MASK) >> LLWU_PE8_WUPE28_SHIFT)
#define LLWU_BRD_PE8_WUPE28(base) (BME_UBFX8(&LLWU_PE8_REG(base), LLWU_PE8_WUPE28_SHIFT, LLWU_PE8_WUPE28_WIDTH))

/*! @brief Set the WUPE28 field to a new value. */
#define LLWU_WR_PE8_WUPE28(base, value) (LLWU_RMW_PE8(base, LLWU_PE8_WUPE28_MASK, LLWU_PE8_WUPE28(value)))
#define LLWU_BWR_PE8_WUPE28(base, value) (BME_BFI8(&LLWU_PE8_REG(base), ((uint8_t)(value) << LLWU_PE8_WUPE28_SHIFT), LLWU_PE8_WUPE28_SHIFT, LLWU_PE8_WUPE28_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PE8, field WUPE29[3:2] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE8_WUPE29 field. */
#define LLWU_RD_PE8_WUPE29(base) ((LLWU_PE8_REG(base) & LLWU_PE8_WUPE29_MASK) >> LLWU_PE8_WUPE29_SHIFT)
#define LLWU_BRD_PE8_WUPE29(base) (BME_UBFX8(&LLWU_PE8_REG(base), LLWU_PE8_WUPE29_SHIFT, LLWU_PE8_WUPE29_WIDTH))

/*! @brief Set the WUPE29 field to a new value. */
#define LLWU_WR_PE8_WUPE29(base, value) (LLWU_RMW_PE8(base, LLWU_PE8_WUPE29_MASK, LLWU_PE8_WUPE29(value)))
#define LLWU_BWR_PE8_WUPE29(base, value) (BME_BFI8(&LLWU_PE8_REG(base), ((uint8_t)(value) << LLWU_PE8_WUPE29_SHIFT), LLWU_PE8_WUPE29_SHIFT, LLWU_PE8_WUPE29_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PE8, field WUPE30[5:4] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE8_WUPE30 field. */
#define LLWU_RD_PE8_WUPE30(base) ((LLWU_PE8_REG(base) & LLWU_PE8_WUPE30_MASK) >> LLWU_PE8_WUPE30_SHIFT)
#define LLWU_BRD_PE8_WUPE30(base) (BME_UBFX8(&LLWU_PE8_REG(base), LLWU_PE8_WUPE30_SHIFT, LLWU_PE8_WUPE30_WIDTH))

/*! @brief Set the WUPE30 field to a new value. */
#define LLWU_WR_PE8_WUPE30(base, value) (LLWU_RMW_PE8(base, LLWU_PE8_WUPE30_MASK, LLWU_PE8_WUPE30(value)))
#define LLWU_BWR_PE8_WUPE30(base, value) (BME_BFI8(&LLWU_PE8_REG(base), ((uint8_t)(value) << LLWU_PE8_WUPE30_SHIFT), LLWU_PE8_WUPE30_SHIFT, LLWU_PE8_WUPE30_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PE8, field WUPE31[7:6] (RW)
 *
 * Enables and configures the edge detection for the wakeup pin.
 *
 * Values:
 * - 0b00 - External input pin disabled as wakeup input
 * - 0b01 - External input pin enabled with rising edge detection
 * - 0b10 - External input pin enabled with falling edge detection
 * - 0b11 - External input pin enabled with any change detection
 */
/*@{*/
/*! @brief Read current value of the LLWU_PE8_WUPE31 field. */
#define LLWU_RD_PE8_WUPE31(base) ((LLWU_PE8_REG(base) & LLWU_PE8_WUPE31_MASK) >> LLWU_PE8_WUPE31_SHIFT)
#define LLWU_BRD_PE8_WUPE31(base) (BME_UBFX8(&LLWU_PE8_REG(base), LLWU_PE8_WUPE31_SHIFT, LLWU_PE8_WUPE31_WIDTH))

/*! @brief Set the WUPE31 field to a new value. */
#define LLWU_WR_PE8_WUPE31(base, value) (LLWU_RMW_PE8(base, LLWU_PE8_WUPE31_MASK, LLWU_PE8_WUPE31(value)))
#define LLWU_BWR_PE8_WUPE31(base, value) (BME_BFI8(&LLWU_PE8_REG(base), ((uint8_t)(value) << LLWU_PE8_WUPE31_SHIFT), LLWU_PE8_WUPE31_SHIFT, LLWU_PE8_WUPE31_WIDTH))
/*@}*/

/*******************************************************************************
 * LLWU_ME - LLWU Module Enable register
 ******************************************************************************/

/*!
 * @brief LLWU_ME - LLWU Module Enable register (RW)
 *
 * Reset value: 0x00U
 *
 * LLWU_ME contains the bits to enable the internal module flag as a wakeup
 * input source for inputs MWUF7-MWUF0. This register is reset on Chip Reset not VLLS
 * and by reset types that trigger Chip Reset not VLLS. It is unaffected by
 * reset types that do not trigger Chip Reset not VLLS. See the
 * IntroductionInformation found here describes the registers of the Reset Control Module (RCM). The
 * RCM implements many of the reset functions for the chip. See the chip's reset
 * chapter for more information. details for more information.
 */
/*!
 * @name Constants and macros for entire LLWU_ME register
 */
/*@{*/
#define LLWU_RD_ME(base)         (LLWU_ME_REG(base))
#define LLWU_WR_ME(base, value)  (LLWU_ME_REG(base) = (value))
#define LLWU_RMW_ME(base, mask, value) (LLWU_WR_ME(base, (LLWU_RD_ME(base) & ~(mask)) | (value)))
#define LLWU_SET_ME(base, value) (BME_OR8(&LLWU_ME_REG(base), (uint8_t)(value)))
#define LLWU_CLR_ME(base, value) (BME_AND8(&LLWU_ME_REG(base), (uint8_t)(~(value))))
#define LLWU_TOG_ME(base, value) (BME_XOR8(&LLWU_ME_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LLWU_ME bitfields
 */

/*!
 * @name Register LLWU_ME, field WUME0[0] (RW)
 *
 * Enables an internal module as a wakeup source input.
 *
 * Values:
 * - 0b0 - Internal module flag not used as wakeup source
 * - 0b1 - Internal module flag used as wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_ME_WUME0 field. */
#define LLWU_RD_ME_WUME0(base) ((LLWU_ME_REG(base) & LLWU_ME_WUME0_MASK) >> LLWU_ME_WUME0_SHIFT)
#define LLWU_BRD_ME_WUME0(base) (BME_UBFX8(&LLWU_ME_REG(base), LLWU_ME_WUME0_SHIFT, LLWU_ME_WUME0_WIDTH))

/*! @brief Set the WUME0 field to a new value. */
#define LLWU_WR_ME_WUME0(base, value) (LLWU_RMW_ME(base, LLWU_ME_WUME0_MASK, LLWU_ME_WUME0(value)))
#define LLWU_BWR_ME_WUME0(base, value) (BME_BFI8(&LLWU_ME_REG(base), ((uint8_t)(value) << LLWU_ME_WUME0_SHIFT), LLWU_ME_WUME0_SHIFT, LLWU_ME_WUME0_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_ME, field WUME1[1] (RW)
 *
 * Enables an internal module as a wakeup source input.
 *
 * Values:
 * - 0b0 - Internal module flag not used as wakeup source
 * - 0b1 - Internal module flag used as wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_ME_WUME1 field. */
#define LLWU_RD_ME_WUME1(base) ((LLWU_ME_REG(base) & LLWU_ME_WUME1_MASK) >> LLWU_ME_WUME1_SHIFT)
#define LLWU_BRD_ME_WUME1(base) (BME_UBFX8(&LLWU_ME_REG(base), LLWU_ME_WUME1_SHIFT, LLWU_ME_WUME1_WIDTH))

/*! @brief Set the WUME1 field to a new value. */
#define LLWU_WR_ME_WUME1(base, value) (LLWU_RMW_ME(base, LLWU_ME_WUME1_MASK, LLWU_ME_WUME1(value)))
#define LLWU_BWR_ME_WUME1(base, value) (BME_BFI8(&LLWU_ME_REG(base), ((uint8_t)(value) << LLWU_ME_WUME1_SHIFT), LLWU_ME_WUME1_SHIFT, LLWU_ME_WUME1_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_ME, field WUME2[2] (RW)
 *
 * Enables an internal module as a wakeup source input.
 *
 * Values:
 * - 0b0 - Internal module flag not used as wakeup source
 * - 0b1 - Internal module flag used as wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_ME_WUME2 field. */
#define LLWU_RD_ME_WUME2(base) ((LLWU_ME_REG(base) & LLWU_ME_WUME2_MASK) >> LLWU_ME_WUME2_SHIFT)
#define LLWU_BRD_ME_WUME2(base) (BME_UBFX8(&LLWU_ME_REG(base), LLWU_ME_WUME2_SHIFT, LLWU_ME_WUME2_WIDTH))

/*! @brief Set the WUME2 field to a new value. */
#define LLWU_WR_ME_WUME2(base, value) (LLWU_RMW_ME(base, LLWU_ME_WUME2_MASK, LLWU_ME_WUME2(value)))
#define LLWU_BWR_ME_WUME2(base, value) (BME_BFI8(&LLWU_ME_REG(base), ((uint8_t)(value) << LLWU_ME_WUME2_SHIFT), LLWU_ME_WUME2_SHIFT, LLWU_ME_WUME2_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_ME, field WUME3[3] (RW)
 *
 * Enables an internal module as a wakeup source input.
 *
 * Values:
 * - 0b0 - Internal module flag not used as wakeup source
 * - 0b1 - Internal module flag used as wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_ME_WUME3 field. */
#define LLWU_RD_ME_WUME3(base) ((LLWU_ME_REG(base) & LLWU_ME_WUME3_MASK) >> LLWU_ME_WUME3_SHIFT)
#define LLWU_BRD_ME_WUME3(base) (BME_UBFX8(&LLWU_ME_REG(base), LLWU_ME_WUME3_SHIFT, LLWU_ME_WUME3_WIDTH))

/*! @brief Set the WUME3 field to a new value. */
#define LLWU_WR_ME_WUME3(base, value) (LLWU_RMW_ME(base, LLWU_ME_WUME3_MASK, LLWU_ME_WUME3(value)))
#define LLWU_BWR_ME_WUME3(base, value) (BME_BFI8(&LLWU_ME_REG(base), ((uint8_t)(value) << LLWU_ME_WUME3_SHIFT), LLWU_ME_WUME3_SHIFT, LLWU_ME_WUME3_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_ME, field WUME4[4] (RW)
 *
 * Enables an internal module as a wakeup source input.
 *
 * Values:
 * - 0b0 - Internal module flag not used as wakeup source
 * - 0b1 - Internal module flag used as wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_ME_WUME4 field. */
#define LLWU_RD_ME_WUME4(base) ((LLWU_ME_REG(base) & LLWU_ME_WUME4_MASK) >> LLWU_ME_WUME4_SHIFT)
#define LLWU_BRD_ME_WUME4(base) (BME_UBFX8(&LLWU_ME_REG(base), LLWU_ME_WUME4_SHIFT, LLWU_ME_WUME4_WIDTH))

/*! @brief Set the WUME4 field to a new value. */
#define LLWU_WR_ME_WUME4(base, value) (LLWU_RMW_ME(base, LLWU_ME_WUME4_MASK, LLWU_ME_WUME4(value)))
#define LLWU_BWR_ME_WUME4(base, value) (BME_BFI8(&LLWU_ME_REG(base), ((uint8_t)(value) << LLWU_ME_WUME4_SHIFT), LLWU_ME_WUME4_SHIFT, LLWU_ME_WUME4_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_ME, field WUME5[5] (RW)
 *
 * Enables an internal module as a wakeup source input.
 *
 * Values:
 * - 0b0 - Internal module flag not used as wakeup source
 * - 0b1 - Internal module flag used as wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_ME_WUME5 field. */
#define LLWU_RD_ME_WUME5(base) ((LLWU_ME_REG(base) & LLWU_ME_WUME5_MASK) >> LLWU_ME_WUME5_SHIFT)
#define LLWU_BRD_ME_WUME5(base) (BME_UBFX8(&LLWU_ME_REG(base), LLWU_ME_WUME5_SHIFT, LLWU_ME_WUME5_WIDTH))

/*! @brief Set the WUME5 field to a new value. */
#define LLWU_WR_ME_WUME5(base, value) (LLWU_RMW_ME(base, LLWU_ME_WUME5_MASK, LLWU_ME_WUME5(value)))
#define LLWU_BWR_ME_WUME5(base, value) (BME_BFI8(&LLWU_ME_REG(base), ((uint8_t)(value) << LLWU_ME_WUME5_SHIFT), LLWU_ME_WUME5_SHIFT, LLWU_ME_WUME5_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_ME, field WUME6[6] (RW)
 *
 * Enables an internal module as a wakeup source input.
 *
 * Values:
 * - 0b0 - Internal module flag not used as wakeup source
 * - 0b1 - Internal module flag used as wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_ME_WUME6 field. */
#define LLWU_RD_ME_WUME6(base) ((LLWU_ME_REG(base) & LLWU_ME_WUME6_MASK) >> LLWU_ME_WUME6_SHIFT)
#define LLWU_BRD_ME_WUME6(base) (BME_UBFX8(&LLWU_ME_REG(base), LLWU_ME_WUME6_SHIFT, LLWU_ME_WUME6_WIDTH))

/*! @brief Set the WUME6 field to a new value. */
#define LLWU_WR_ME_WUME6(base, value) (LLWU_RMW_ME(base, LLWU_ME_WUME6_MASK, LLWU_ME_WUME6(value)))
#define LLWU_BWR_ME_WUME6(base, value) (BME_BFI8(&LLWU_ME_REG(base), ((uint8_t)(value) << LLWU_ME_WUME6_SHIFT), LLWU_ME_WUME6_SHIFT, LLWU_ME_WUME6_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_ME, field WUME7[7] (RW)
 *
 * Enables an internal module as a wakeup source input.
 *
 * Values:
 * - 0b0 - Internal module flag not used as wakeup source
 * - 0b1 - Internal module flag used as wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_ME_WUME7 field. */
#define LLWU_RD_ME_WUME7(base) ((LLWU_ME_REG(base) & LLWU_ME_WUME7_MASK) >> LLWU_ME_WUME7_SHIFT)
#define LLWU_BRD_ME_WUME7(base) (BME_UBFX8(&LLWU_ME_REG(base), LLWU_ME_WUME7_SHIFT, LLWU_ME_WUME7_WIDTH))

/*! @brief Set the WUME7 field to a new value. */
#define LLWU_WR_ME_WUME7(base, value) (LLWU_RMW_ME(base, LLWU_ME_WUME7_MASK, LLWU_ME_WUME7(value)))
#define LLWU_BWR_ME_WUME7(base, value) (BME_BFI8(&LLWU_ME_REG(base), ((uint8_t)(value) << LLWU_ME_WUME7_SHIFT), LLWU_ME_WUME7_SHIFT, LLWU_ME_WUME7_WIDTH))
/*@}*/

/*******************************************************************************
 * LLWU_PF1 - LLWU Pin Flag 1 register
 ******************************************************************************/

/*!
 * @brief LLWU_PF1 - LLWU Pin Flag 1 register (W1C)
 *
 * Reset value: 0x00U
 *
 * LLWU_PF1 contains the wakeup flags indicating which wakeup source caused the
 * MCU to exit LLS or VLLS mode. For LLS, this is the source causing the CPU
 * interrupt flow. For VLLS, this is the source causing the MCU reset flow. The
 * external wakeup flags are read-only and clearing a flag is accomplished by a write
 * of a 1 to the corresponding WUFx bit. The wakeup flag (WUFx), if set, will
 * remain set if the associated WUPEx bit is cleared. This register is reset on Chip
 * Reset not VLLS and by reset types that trigger Chip Reset not VLLS. It is
 * unaffected by reset types that do not trigger Chip Reset not VLLS. See the
 * IntroductionInformation found here describes the registers of the Reset Control
 * Module (RCM). The RCM implements many of the reset functions for the chip. See the
 * chip's reset chapter for more information. details for more information.
 */
/*!
 * @name Constants and macros for entire LLWU_PF1 register
 */
/*@{*/
#define LLWU_RD_PF1(base)        (LLWU_PF1_REG(base))
#define LLWU_WR_PF1(base, value) (LLWU_PF1_REG(base) = (value))
#define LLWU_RMW_PF1(base, mask, value) (LLWU_WR_PF1(base, (LLWU_RD_PF1(base) & ~(mask)) | (value)))
#define LLWU_SET_PF1(base, value) (BME_OR8(&LLWU_PF1_REG(base), (uint8_t)(value)))
#define LLWU_CLR_PF1(base, value) (BME_AND8(&LLWU_PF1_REG(base), (uint8_t)(~(value))))
#define LLWU_TOG_PF1(base, value) (BME_XOR8(&LLWU_PF1_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LLWU_PF1 bitfields
 */

/*!
 * @name Register LLWU_PF1, field WUF0[0] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF0.
 *
 * Values:
 * - 0b0 - LLWU_P0 input was not a wakeup source
 * - 0b1 - LLWU_P0 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF1_WUF0 field. */
#define LLWU_RD_PF1_WUF0(base) ((LLWU_PF1_REG(base) & LLWU_PF1_WUF0_MASK) >> LLWU_PF1_WUF0_SHIFT)
#define LLWU_BRD_PF1_WUF0(base) (BME_UBFX8(&LLWU_PF1_REG(base), LLWU_PF1_WUF0_SHIFT, LLWU_PF1_WUF0_WIDTH))

/*! @brief Set the WUF0 field to a new value. */
#define LLWU_WR_PF1_WUF0(base, value) (LLWU_RMW_PF1(base, (LLWU_PF1_WUF0_MASK | LLWU_PF1_WUF1_MASK | LLWU_PF1_WUF2_MASK | LLWU_PF1_WUF3_MASK | LLWU_PF1_WUF4_MASK | LLWU_PF1_WUF5_MASK | LLWU_PF1_WUF6_MASK | LLWU_PF1_WUF7_MASK), LLWU_PF1_WUF0(value)))
#define LLWU_BWR_PF1_WUF0(base, value) (BME_BFI8(&LLWU_PF1_REG(base), ((uint8_t)(value) << LLWU_PF1_WUF0_SHIFT), LLWU_PF1_WUF0_SHIFT, LLWU_PF1_WUF0_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF1, field WUF1[1] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF1.
 *
 * Values:
 * - 0b0 - LLWU_P1 input was not a wakeup source
 * - 0b1 - LLWU_P1 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF1_WUF1 field. */
#define LLWU_RD_PF1_WUF1(base) ((LLWU_PF1_REG(base) & LLWU_PF1_WUF1_MASK) >> LLWU_PF1_WUF1_SHIFT)
#define LLWU_BRD_PF1_WUF1(base) (BME_UBFX8(&LLWU_PF1_REG(base), LLWU_PF1_WUF1_SHIFT, LLWU_PF1_WUF1_WIDTH))

/*! @brief Set the WUF1 field to a new value. */
#define LLWU_WR_PF1_WUF1(base, value) (LLWU_RMW_PF1(base, (LLWU_PF1_WUF1_MASK | LLWU_PF1_WUF0_MASK | LLWU_PF1_WUF2_MASK | LLWU_PF1_WUF3_MASK | LLWU_PF1_WUF4_MASK | LLWU_PF1_WUF5_MASK | LLWU_PF1_WUF6_MASK | LLWU_PF1_WUF7_MASK), LLWU_PF1_WUF1(value)))
#define LLWU_BWR_PF1_WUF1(base, value) (BME_BFI8(&LLWU_PF1_REG(base), ((uint8_t)(value) << LLWU_PF1_WUF1_SHIFT), LLWU_PF1_WUF1_SHIFT, LLWU_PF1_WUF1_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF1, field WUF2[2] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF2.
 *
 * Values:
 * - 0b0 - LLWU_P2 input was not a wakeup source
 * - 0b1 - LLWU_P2 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF1_WUF2 field. */
#define LLWU_RD_PF1_WUF2(base) ((LLWU_PF1_REG(base) & LLWU_PF1_WUF2_MASK) >> LLWU_PF1_WUF2_SHIFT)
#define LLWU_BRD_PF1_WUF2(base) (BME_UBFX8(&LLWU_PF1_REG(base), LLWU_PF1_WUF2_SHIFT, LLWU_PF1_WUF2_WIDTH))

/*! @brief Set the WUF2 field to a new value. */
#define LLWU_WR_PF1_WUF2(base, value) (LLWU_RMW_PF1(base, (LLWU_PF1_WUF2_MASK | LLWU_PF1_WUF0_MASK | LLWU_PF1_WUF1_MASK | LLWU_PF1_WUF3_MASK | LLWU_PF1_WUF4_MASK | LLWU_PF1_WUF5_MASK | LLWU_PF1_WUF6_MASK | LLWU_PF1_WUF7_MASK), LLWU_PF1_WUF2(value)))
#define LLWU_BWR_PF1_WUF2(base, value) (BME_BFI8(&LLWU_PF1_REG(base), ((uint8_t)(value) << LLWU_PF1_WUF2_SHIFT), LLWU_PF1_WUF2_SHIFT, LLWU_PF1_WUF2_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF1, field WUF3[3] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF3.
 *
 * Values:
 * - 0b0 - LLWU_P3 input was not a wakeup source
 * - 0b1 - LLWU_P3 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF1_WUF3 field. */
#define LLWU_RD_PF1_WUF3(base) ((LLWU_PF1_REG(base) & LLWU_PF1_WUF3_MASK) >> LLWU_PF1_WUF3_SHIFT)
#define LLWU_BRD_PF1_WUF3(base) (BME_UBFX8(&LLWU_PF1_REG(base), LLWU_PF1_WUF3_SHIFT, LLWU_PF1_WUF3_WIDTH))

/*! @brief Set the WUF3 field to a new value. */
#define LLWU_WR_PF1_WUF3(base, value) (LLWU_RMW_PF1(base, (LLWU_PF1_WUF3_MASK | LLWU_PF1_WUF0_MASK | LLWU_PF1_WUF1_MASK | LLWU_PF1_WUF2_MASK | LLWU_PF1_WUF4_MASK | LLWU_PF1_WUF5_MASK | LLWU_PF1_WUF6_MASK | LLWU_PF1_WUF7_MASK), LLWU_PF1_WUF3(value)))
#define LLWU_BWR_PF1_WUF3(base, value) (BME_BFI8(&LLWU_PF1_REG(base), ((uint8_t)(value) << LLWU_PF1_WUF3_SHIFT), LLWU_PF1_WUF3_SHIFT, LLWU_PF1_WUF3_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF1, field WUF4[4] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF4.
 *
 * Values:
 * - 0b0 - LLWU_P4 input was not a wakeup source
 * - 0b1 - LLWU_P4 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF1_WUF4 field. */
#define LLWU_RD_PF1_WUF4(base) ((LLWU_PF1_REG(base) & LLWU_PF1_WUF4_MASK) >> LLWU_PF1_WUF4_SHIFT)
#define LLWU_BRD_PF1_WUF4(base) (BME_UBFX8(&LLWU_PF1_REG(base), LLWU_PF1_WUF4_SHIFT, LLWU_PF1_WUF4_WIDTH))

/*! @brief Set the WUF4 field to a new value. */
#define LLWU_WR_PF1_WUF4(base, value) (LLWU_RMW_PF1(base, (LLWU_PF1_WUF4_MASK | LLWU_PF1_WUF0_MASK | LLWU_PF1_WUF1_MASK | LLWU_PF1_WUF2_MASK | LLWU_PF1_WUF3_MASK | LLWU_PF1_WUF5_MASK | LLWU_PF1_WUF6_MASK | LLWU_PF1_WUF7_MASK), LLWU_PF1_WUF4(value)))
#define LLWU_BWR_PF1_WUF4(base, value) (BME_BFI8(&LLWU_PF1_REG(base), ((uint8_t)(value) << LLWU_PF1_WUF4_SHIFT), LLWU_PF1_WUF4_SHIFT, LLWU_PF1_WUF4_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF1, field WUF5[5] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF5.
 *
 * Values:
 * - 0b0 - LLWU_P5 input was not a wakeup source
 * - 0b1 - LLWU_P5 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF1_WUF5 field. */
#define LLWU_RD_PF1_WUF5(base) ((LLWU_PF1_REG(base) & LLWU_PF1_WUF5_MASK) >> LLWU_PF1_WUF5_SHIFT)
#define LLWU_BRD_PF1_WUF5(base) (BME_UBFX8(&LLWU_PF1_REG(base), LLWU_PF1_WUF5_SHIFT, LLWU_PF1_WUF5_WIDTH))

/*! @brief Set the WUF5 field to a new value. */
#define LLWU_WR_PF1_WUF5(base, value) (LLWU_RMW_PF1(base, (LLWU_PF1_WUF5_MASK | LLWU_PF1_WUF0_MASK | LLWU_PF1_WUF1_MASK | LLWU_PF1_WUF2_MASK | LLWU_PF1_WUF3_MASK | LLWU_PF1_WUF4_MASK | LLWU_PF1_WUF6_MASK | LLWU_PF1_WUF7_MASK), LLWU_PF1_WUF5(value)))
#define LLWU_BWR_PF1_WUF5(base, value) (BME_BFI8(&LLWU_PF1_REG(base), ((uint8_t)(value) << LLWU_PF1_WUF5_SHIFT), LLWU_PF1_WUF5_SHIFT, LLWU_PF1_WUF5_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF1, field WUF6[6] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF6.
 *
 * Values:
 * - 0b0 - LLWU_P6 input was not a wakeup source
 * - 0b1 - LLWU_P6 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF1_WUF6 field. */
#define LLWU_RD_PF1_WUF6(base) ((LLWU_PF1_REG(base) & LLWU_PF1_WUF6_MASK) >> LLWU_PF1_WUF6_SHIFT)
#define LLWU_BRD_PF1_WUF6(base) (BME_UBFX8(&LLWU_PF1_REG(base), LLWU_PF1_WUF6_SHIFT, LLWU_PF1_WUF6_WIDTH))

/*! @brief Set the WUF6 field to a new value. */
#define LLWU_WR_PF1_WUF6(base, value) (LLWU_RMW_PF1(base, (LLWU_PF1_WUF6_MASK | LLWU_PF1_WUF0_MASK | LLWU_PF1_WUF1_MASK | LLWU_PF1_WUF2_MASK | LLWU_PF1_WUF3_MASK | LLWU_PF1_WUF4_MASK | LLWU_PF1_WUF5_MASK | LLWU_PF1_WUF7_MASK), LLWU_PF1_WUF6(value)))
#define LLWU_BWR_PF1_WUF6(base, value) (BME_BFI8(&LLWU_PF1_REG(base), ((uint8_t)(value) << LLWU_PF1_WUF6_SHIFT), LLWU_PF1_WUF6_SHIFT, LLWU_PF1_WUF6_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF1, field WUF7[7] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF7.
 *
 * Values:
 * - 0b0 - LLWU_P7 input was not a wakeup source
 * - 0b1 - LLWU_P7 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF1_WUF7 field. */
#define LLWU_RD_PF1_WUF7(base) ((LLWU_PF1_REG(base) & LLWU_PF1_WUF7_MASK) >> LLWU_PF1_WUF7_SHIFT)
#define LLWU_BRD_PF1_WUF7(base) (BME_UBFX8(&LLWU_PF1_REG(base), LLWU_PF1_WUF7_SHIFT, LLWU_PF1_WUF7_WIDTH))

/*! @brief Set the WUF7 field to a new value. */
#define LLWU_WR_PF1_WUF7(base, value) (LLWU_RMW_PF1(base, (LLWU_PF1_WUF7_MASK | LLWU_PF1_WUF0_MASK | LLWU_PF1_WUF1_MASK | LLWU_PF1_WUF2_MASK | LLWU_PF1_WUF3_MASK | LLWU_PF1_WUF4_MASK | LLWU_PF1_WUF5_MASK | LLWU_PF1_WUF6_MASK), LLWU_PF1_WUF7(value)))
#define LLWU_BWR_PF1_WUF7(base, value) (BME_BFI8(&LLWU_PF1_REG(base), ((uint8_t)(value) << LLWU_PF1_WUF7_SHIFT), LLWU_PF1_WUF7_SHIFT, LLWU_PF1_WUF7_WIDTH))
/*@}*/

/*******************************************************************************
 * LLWU_PF2 - LLWU Pin Flag 2 register
 ******************************************************************************/

/*!
 * @brief LLWU_PF2 - LLWU Pin Flag 2 register (W1C)
 *
 * Reset value: 0x00U
 *
 * LLWU_PF2 contains the wakeup flags indicating which wakeup source caused the
 * MCU to exit LLS or VLLS mode. For LLS, this is the source causing the CPU
 * interrupt flow. For VLLS, this is the source causing the MCU reset flow. The
 * external wakeup flags are read-only and clearing a flag is accomplished by a write
 * of a 1 to the corresponding WUFx bit. The wakeup flag (WUFx), if set, will
 * remain set if the associated WUPEx bit is cleared. This register is reset on Chip
 * Reset not VLLS and by reset types that trigger Chip Reset not VLLS. It is
 * unaffected by reset types that do not trigger Chip Reset not VLLS. See the
 * IntroductionInformation found here describes the registers of the Reset Control
 * Module (RCM). The RCM implements many of the reset functions for the chip. See the
 * chip's reset chapter for more information. details for more information.
 */
/*!
 * @name Constants and macros for entire LLWU_PF2 register
 */
/*@{*/
#define LLWU_RD_PF2(base)        (LLWU_PF2_REG(base))
#define LLWU_WR_PF2(base, value) (LLWU_PF2_REG(base) = (value))
#define LLWU_RMW_PF2(base, mask, value) (LLWU_WR_PF2(base, (LLWU_RD_PF2(base) & ~(mask)) | (value)))
#define LLWU_SET_PF2(base, value) (BME_OR8(&LLWU_PF2_REG(base), (uint8_t)(value)))
#define LLWU_CLR_PF2(base, value) (BME_AND8(&LLWU_PF2_REG(base), (uint8_t)(~(value))))
#define LLWU_TOG_PF2(base, value) (BME_XOR8(&LLWU_PF2_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LLWU_PF2 bitfields
 */

/*!
 * @name Register LLWU_PF2, field WUF8[0] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF8.
 *
 * Values:
 * - 0b0 - LLWU_P8 input was not a wakeup source
 * - 0b1 - LLWU_P8 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF2_WUF8 field. */
#define LLWU_RD_PF2_WUF8(base) ((LLWU_PF2_REG(base) & LLWU_PF2_WUF8_MASK) >> LLWU_PF2_WUF8_SHIFT)
#define LLWU_BRD_PF2_WUF8(base) (BME_UBFX8(&LLWU_PF2_REG(base), LLWU_PF2_WUF8_SHIFT, LLWU_PF2_WUF8_WIDTH))

/*! @brief Set the WUF8 field to a new value. */
#define LLWU_WR_PF2_WUF8(base, value) (LLWU_RMW_PF2(base, (LLWU_PF2_WUF8_MASK | LLWU_PF2_WUF9_MASK | LLWU_PF2_WUF10_MASK | LLWU_PF2_WUF11_MASK | LLWU_PF2_WUF12_MASK | LLWU_PF2_WUF13_MASK | LLWU_PF2_WUF14_MASK | LLWU_PF2_WUF15_MASK), LLWU_PF2_WUF8(value)))
#define LLWU_BWR_PF2_WUF8(base, value) (BME_BFI8(&LLWU_PF2_REG(base), ((uint8_t)(value) << LLWU_PF2_WUF8_SHIFT), LLWU_PF2_WUF8_SHIFT, LLWU_PF2_WUF8_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF2, field WUF9[1] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF9.
 *
 * Values:
 * - 0b0 - LLWU_P9 input was not a wakeup source
 * - 0b1 - LLWU_P9 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF2_WUF9 field. */
#define LLWU_RD_PF2_WUF9(base) ((LLWU_PF2_REG(base) & LLWU_PF2_WUF9_MASK) >> LLWU_PF2_WUF9_SHIFT)
#define LLWU_BRD_PF2_WUF9(base) (BME_UBFX8(&LLWU_PF2_REG(base), LLWU_PF2_WUF9_SHIFT, LLWU_PF2_WUF9_WIDTH))

/*! @brief Set the WUF9 field to a new value. */
#define LLWU_WR_PF2_WUF9(base, value) (LLWU_RMW_PF2(base, (LLWU_PF2_WUF9_MASK | LLWU_PF2_WUF8_MASK | LLWU_PF2_WUF10_MASK | LLWU_PF2_WUF11_MASK | LLWU_PF2_WUF12_MASK | LLWU_PF2_WUF13_MASK | LLWU_PF2_WUF14_MASK | LLWU_PF2_WUF15_MASK), LLWU_PF2_WUF9(value)))
#define LLWU_BWR_PF2_WUF9(base, value) (BME_BFI8(&LLWU_PF2_REG(base), ((uint8_t)(value) << LLWU_PF2_WUF9_SHIFT), LLWU_PF2_WUF9_SHIFT, LLWU_PF2_WUF9_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF2, field WUF10[2] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF10.
 *
 * Values:
 * - 0b0 - LLWU_P10 input was not a wakeup source
 * - 0b1 - LLWU_P10 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF2_WUF10 field. */
#define LLWU_RD_PF2_WUF10(base) ((LLWU_PF2_REG(base) & LLWU_PF2_WUF10_MASK) >> LLWU_PF2_WUF10_SHIFT)
#define LLWU_BRD_PF2_WUF10(base) (BME_UBFX8(&LLWU_PF2_REG(base), LLWU_PF2_WUF10_SHIFT, LLWU_PF2_WUF10_WIDTH))

/*! @brief Set the WUF10 field to a new value. */
#define LLWU_WR_PF2_WUF10(base, value) (LLWU_RMW_PF2(base, (LLWU_PF2_WUF10_MASK | LLWU_PF2_WUF8_MASK | LLWU_PF2_WUF9_MASK | LLWU_PF2_WUF11_MASK | LLWU_PF2_WUF12_MASK | LLWU_PF2_WUF13_MASK | LLWU_PF2_WUF14_MASK | LLWU_PF2_WUF15_MASK), LLWU_PF2_WUF10(value)))
#define LLWU_BWR_PF2_WUF10(base, value) (BME_BFI8(&LLWU_PF2_REG(base), ((uint8_t)(value) << LLWU_PF2_WUF10_SHIFT), LLWU_PF2_WUF10_SHIFT, LLWU_PF2_WUF10_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF2, field WUF11[3] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF11.
 *
 * Values:
 * - 0b0 - LLWU_P11 input was not a wakeup source
 * - 0b1 - LLWU_P11 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF2_WUF11 field. */
#define LLWU_RD_PF2_WUF11(base) ((LLWU_PF2_REG(base) & LLWU_PF2_WUF11_MASK) >> LLWU_PF2_WUF11_SHIFT)
#define LLWU_BRD_PF2_WUF11(base) (BME_UBFX8(&LLWU_PF2_REG(base), LLWU_PF2_WUF11_SHIFT, LLWU_PF2_WUF11_WIDTH))

/*! @brief Set the WUF11 field to a new value. */
#define LLWU_WR_PF2_WUF11(base, value) (LLWU_RMW_PF2(base, (LLWU_PF2_WUF11_MASK | LLWU_PF2_WUF8_MASK | LLWU_PF2_WUF9_MASK | LLWU_PF2_WUF10_MASK | LLWU_PF2_WUF12_MASK | LLWU_PF2_WUF13_MASK | LLWU_PF2_WUF14_MASK | LLWU_PF2_WUF15_MASK), LLWU_PF2_WUF11(value)))
#define LLWU_BWR_PF2_WUF11(base, value) (BME_BFI8(&LLWU_PF2_REG(base), ((uint8_t)(value) << LLWU_PF2_WUF11_SHIFT), LLWU_PF2_WUF11_SHIFT, LLWU_PF2_WUF11_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF2, field WUF12[4] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF12.
 *
 * Values:
 * - 0b0 - LLWU_P12 input was not a wakeup source
 * - 0b1 - LLWU_P12 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF2_WUF12 field. */
#define LLWU_RD_PF2_WUF12(base) ((LLWU_PF2_REG(base) & LLWU_PF2_WUF12_MASK) >> LLWU_PF2_WUF12_SHIFT)
#define LLWU_BRD_PF2_WUF12(base) (BME_UBFX8(&LLWU_PF2_REG(base), LLWU_PF2_WUF12_SHIFT, LLWU_PF2_WUF12_WIDTH))

/*! @brief Set the WUF12 field to a new value. */
#define LLWU_WR_PF2_WUF12(base, value) (LLWU_RMW_PF2(base, (LLWU_PF2_WUF12_MASK | LLWU_PF2_WUF8_MASK | LLWU_PF2_WUF9_MASK | LLWU_PF2_WUF10_MASK | LLWU_PF2_WUF11_MASK | LLWU_PF2_WUF13_MASK | LLWU_PF2_WUF14_MASK | LLWU_PF2_WUF15_MASK), LLWU_PF2_WUF12(value)))
#define LLWU_BWR_PF2_WUF12(base, value) (BME_BFI8(&LLWU_PF2_REG(base), ((uint8_t)(value) << LLWU_PF2_WUF12_SHIFT), LLWU_PF2_WUF12_SHIFT, LLWU_PF2_WUF12_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF2, field WUF13[5] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF13.
 *
 * Values:
 * - 0b0 - LLWU_P13 input was not a wakeup source
 * - 0b1 - LLWU_P13 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF2_WUF13 field. */
#define LLWU_RD_PF2_WUF13(base) ((LLWU_PF2_REG(base) & LLWU_PF2_WUF13_MASK) >> LLWU_PF2_WUF13_SHIFT)
#define LLWU_BRD_PF2_WUF13(base) (BME_UBFX8(&LLWU_PF2_REG(base), LLWU_PF2_WUF13_SHIFT, LLWU_PF2_WUF13_WIDTH))

/*! @brief Set the WUF13 field to a new value. */
#define LLWU_WR_PF2_WUF13(base, value) (LLWU_RMW_PF2(base, (LLWU_PF2_WUF13_MASK | LLWU_PF2_WUF8_MASK | LLWU_PF2_WUF9_MASK | LLWU_PF2_WUF10_MASK | LLWU_PF2_WUF11_MASK | LLWU_PF2_WUF12_MASK | LLWU_PF2_WUF14_MASK | LLWU_PF2_WUF15_MASK), LLWU_PF2_WUF13(value)))
#define LLWU_BWR_PF2_WUF13(base, value) (BME_BFI8(&LLWU_PF2_REG(base), ((uint8_t)(value) << LLWU_PF2_WUF13_SHIFT), LLWU_PF2_WUF13_SHIFT, LLWU_PF2_WUF13_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF2, field WUF14[6] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF14.
 *
 * Values:
 * - 0b0 - LLWU_P14 input was not a wakeup source
 * - 0b1 - LLWU_P14 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF2_WUF14 field. */
#define LLWU_RD_PF2_WUF14(base) ((LLWU_PF2_REG(base) & LLWU_PF2_WUF14_MASK) >> LLWU_PF2_WUF14_SHIFT)
#define LLWU_BRD_PF2_WUF14(base) (BME_UBFX8(&LLWU_PF2_REG(base), LLWU_PF2_WUF14_SHIFT, LLWU_PF2_WUF14_WIDTH))

/*! @brief Set the WUF14 field to a new value. */
#define LLWU_WR_PF2_WUF14(base, value) (LLWU_RMW_PF2(base, (LLWU_PF2_WUF14_MASK | LLWU_PF2_WUF8_MASK | LLWU_PF2_WUF9_MASK | LLWU_PF2_WUF10_MASK | LLWU_PF2_WUF11_MASK | LLWU_PF2_WUF12_MASK | LLWU_PF2_WUF13_MASK | LLWU_PF2_WUF15_MASK), LLWU_PF2_WUF14(value)))
#define LLWU_BWR_PF2_WUF14(base, value) (BME_BFI8(&LLWU_PF2_REG(base), ((uint8_t)(value) << LLWU_PF2_WUF14_SHIFT), LLWU_PF2_WUF14_SHIFT, LLWU_PF2_WUF14_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF2, field WUF15[7] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF15.
 *
 * Values:
 * - 0b0 - LLWU_P15 input was not a wakeup source
 * - 0b1 - LLWU_P15 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF2_WUF15 field. */
#define LLWU_RD_PF2_WUF15(base) ((LLWU_PF2_REG(base) & LLWU_PF2_WUF15_MASK) >> LLWU_PF2_WUF15_SHIFT)
#define LLWU_BRD_PF2_WUF15(base) (BME_UBFX8(&LLWU_PF2_REG(base), LLWU_PF2_WUF15_SHIFT, LLWU_PF2_WUF15_WIDTH))

/*! @brief Set the WUF15 field to a new value. */
#define LLWU_WR_PF2_WUF15(base, value) (LLWU_RMW_PF2(base, (LLWU_PF2_WUF15_MASK | LLWU_PF2_WUF8_MASK | LLWU_PF2_WUF9_MASK | LLWU_PF2_WUF10_MASK | LLWU_PF2_WUF11_MASK | LLWU_PF2_WUF12_MASK | LLWU_PF2_WUF13_MASK | LLWU_PF2_WUF14_MASK), LLWU_PF2_WUF15(value)))
#define LLWU_BWR_PF2_WUF15(base, value) (BME_BFI8(&LLWU_PF2_REG(base), ((uint8_t)(value) << LLWU_PF2_WUF15_SHIFT), LLWU_PF2_WUF15_SHIFT, LLWU_PF2_WUF15_WIDTH))
/*@}*/

/*******************************************************************************
 * LLWU_PF3 - LLWU Pin Flag 3 register
 ******************************************************************************/

/*!
 * @brief LLWU_PF3 - LLWU Pin Flag 3 register (W1C)
 *
 * Reset value: 0x00U
 *
 * LLWU_PF3 contains the wakeup flags indicating which wakeup source caused the
 * MCU to exit LLS or VLLS mode. For LLS, this is the source causing the CPU
 * interrupt flow. For VLLS, this is the source causing the MCU reset flow. The
 * external wakeup flags are read-only and clearing a flag is accomplished by a write
 * of a 1 to the corresponding WUFx bit. The wakeup flag (WUFx), if set, will
 * remain set if the associated WUPEx bit is cleared. This register is reset on Chip
 * Reset not VLLS and by reset types that trigger Chip Reset not VLLS. It is
 * unaffected by reset types that do not trigger Chip Reset not VLLS. See the
 * IntroductionInformation found here describes the registers of the Reset Control
 * Module (RCM). The RCM implements many of the reset functions for the chip. See the
 * chip's reset chapter for more information. details for more information.
 */
/*!
 * @name Constants and macros for entire LLWU_PF3 register
 */
/*@{*/
#define LLWU_RD_PF3(base)        (LLWU_PF3_REG(base))
#define LLWU_WR_PF3(base, value) (LLWU_PF3_REG(base) = (value))
#define LLWU_RMW_PF3(base, mask, value) (LLWU_WR_PF3(base, (LLWU_RD_PF3(base) & ~(mask)) | (value)))
#define LLWU_SET_PF3(base, value) (BME_OR8(&LLWU_PF3_REG(base), (uint8_t)(value)))
#define LLWU_CLR_PF3(base, value) (BME_AND8(&LLWU_PF3_REG(base), (uint8_t)(~(value))))
#define LLWU_TOG_PF3(base, value) (BME_XOR8(&LLWU_PF3_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LLWU_PF3 bitfields
 */

/*!
 * @name Register LLWU_PF3, field WUF16[0] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF16.
 *
 * Values:
 * - 0b0 - LLWU_P16 input was not a wakeup source
 * - 0b1 - LLWU_P16 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF3_WUF16 field. */
#define LLWU_RD_PF3_WUF16(base) ((LLWU_PF3_REG(base) & LLWU_PF3_WUF16_MASK) >> LLWU_PF3_WUF16_SHIFT)
#define LLWU_BRD_PF3_WUF16(base) (BME_UBFX8(&LLWU_PF3_REG(base), LLWU_PF3_WUF16_SHIFT, LLWU_PF3_WUF16_WIDTH))

/*! @brief Set the WUF16 field to a new value. */
#define LLWU_WR_PF3_WUF16(base, value) (LLWU_RMW_PF3(base, (LLWU_PF3_WUF16_MASK | LLWU_PF3_WUF17_MASK | LLWU_PF3_WUF18_MASK | LLWU_PF3_WUF19_MASK | LLWU_PF3_WUF20_MASK | LLWU_PF3_WUF21_MASK | LLWU_PF3_WUF22_MASK | LLWU_PF3_WUF23_MASK), LLWU_PF3_WUF16(value)))
#define LLWU_BWR_PF3_WUF16(base, value) (BME_BFI8(&LLWU_PF3_REG(base), ((uint8_t)(value) << LLWU_PF3_WUF16_SHIFT), LLWU_PF3_WUF16_SHIFT, LLWU_PF3_WUF16_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF3, field WUF17[1] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF17.
 *
 * Values:
 * - 0b0 - LLWU_P17 input was not a wakeup source
 * - 0b1 - LLWU_P17 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF3_WUF17 field. */
#define LLWU_RD_PF3_WUF17(base) ((LLWU_PF3_REG(base) & LLWU_PF3_WUF17_MASK) >> LLWU_PF3_WUF17_SHIFT)
#define LLWU_BRD_PF3_WUF17(base) (BME_UBFX8(&LLWU_PF3_REG(base), LLWU_PF3_WUF17_SHIFT, LLWU_PF3_WUF17_WIDTH))

/*! @brief Set the WUF17 field to a new value. */
#define LLWU_WR_PF3_WUF17(base, value) (LLWU_RMW_PF3(base, (LLWU_PF3_WUF17_MASK | LLWU_PF3_WUF16_MASK | LLWU_PF3_WUF18_MASK | LLWU_PF3_WUF19_MASK | LLWU_PF3_WUF20_MASK | LLWU_PF3_WUF21_MASK | LLWU_PF3_WUF22_MASK | LLWU_PF3_WUF23_MASK), LLWU_PF3_WUF17(value)))
#define LLWU_BWR_PF3_WUF17(base, value) (BME_BFI8(&LLWU_PF3_REG(base), ((uint8_t)(value) << LLWU_PF3_WUF17_SHIFT), LLWU_PF3_WUF17_SHIFT, LLWU_PF3_WUF17_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF3, field WUF18[2] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF18.
 *
 * Values:
 * - 0b0 - LLWU_P18 input was not a wakeup source
 * - 0b1 - LLWU_P18 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF3_WUF18 field. */
#define LLWU_RD_PF3_WUF18(base) ((LLWU_PF3_REG(base) & LLWU_PF3_WUF18_MASK) >> LLWU_PF3_WUF18_SHIFT)
#define LLWU_BRD_PF3_WUF18(base) (BME_UBFX8(&LLWU_PF3_REG(base), LLWU_PF3_WUF18_SHIFT, LLWU_PF3_WUF18_WIDTH))

/*! @brief Set the WUF18 field to a new value. */
#define LLWU_WR_PF3_WUF18(base, value) (LLWU_RMW_PF3(base, (LLWU_PF3_WUF18_MASK | LLWU_PF3_WUF16_MASK | LLWU_PF3_WUF17_MASK | LLWU_PF3_WUF19_MASK | LLWU_PF3_WUF20_MASK | LLWU_PF3_WUF21_MASK | LLWU_PF3_WUF22_MASK | LLWU_PF3_WUF23_MASK), LLWU_PF3_WUF18(value)))
#define LLWU_BWR_PF3_WUF18(base, value) (BME_BFI8(&LLWU_PF3_REG(base), ((uint8_t)(value) << LLWU_PF3_WUF18_SHIFT), LLWU_PF3_WUF18_SHIFT, LLWU_PF3_WUF18_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF3, field WUF19[3] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF19.
 *
 * Values:
 * - 0b0 - LLWU_P19 input was not a wakeup source
 * - 0b1 - LLWU_P19 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF3_WUF19 field. */
#define LLWU_RD_PF3_WUF19(base) ((LLWU_PF3_REG(base) & LLWU_PF3_WUF19_MASK) >> LLWU_PF3_WUF19_SHIFT)
#define LLWU_BRD_PF3_WUF19(base) (BME_UBFX8(&LLWU_PF3_REG(base), LLWU_PF3_WUF19_SHIFT, LLWU_PF3_WUF19_WIDTH))

/*! @brief Set the WUF19 field to a new value. */
#define LLWU_WR_PF3_WUF19(base, value) (LLWU_RMW_PF3(base, (LLWU_PF3_WUF19_MASK | LLWU_PF3_WUF16_MASK | LLWU_PF3_WUF17_MASK | LLWU_PF3_WUF18_MASK | LLWU_PF3_WUF20_MASK | LLWU_PF3_WUF21_MASK | LLWU_PF3_WUF22_MASK | LLWU_PF3_WUF23_MASK), LLWU_PF3_WUF19(value)))
#define LLWU_BWR_PF3_WUF19(base, value) (BME_BFI8(&LLWU_PF3_REG(base), ((uint8_t)(value) << LLWU_PF3_WUF19_SHIFT), LLWU_PF3_WUF19_SHIFT, LLWU_PF3_WUF19_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF3, field WUF20[4] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF20.
 *
 * Values:
 * - 0b0 - LLWU_P20 input was not a wakeup source
 * - 0b1 - LLWU_P20 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF3_WUF20 field. */
#define LLWU_RD_PF3_WUF20(base) ((LLWU_PF3_REG(base) & LLWU_PF3_WUF20_MASK) >> LLWU_PF3_WUF20_SHIFT)
#define LLWU_BRD_PF3_WUF20(base) (BME_UBFX8(&LLWU_PF3_REG(base), LLWU_PF3_WUF20_SHIFT, LLWU_PF3_WUF20_WIDTH))

/*! @brief Set the WUF20 field to a new value. */
#define LLWU_WR_PF3_WUF20(base, value) (LLWU_RMW_PF3(base, (LLWU_PF3_WUF20_MASK | LLWU_PF3_WUF16_MASK | LLWU_PF3_WUF17_MASK | LLWU_PF3_WUF18_MASK | LLWU_PF3_WUF19_MASK | LLWU_PF3_WUF21_MASK | LLWU_PF3_WUF22_MASK | LLWU_PF3_WUF23_MASK), LLWU_PF3_WUF20(value)))
#define LLWU_BWR_PF3_WUF20(base, value) (BME_BFI8(&LLWU_PF3_REG(base), ((uint8_t)(value) << LLWU_PF3_WUF20_SHIFT), LLWU_PF3_WUF20_SHIFT, LLWU_PF3_WUF20_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF3, field WUF21[5] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF21.
 *
 * Values:
 * - 0b0 - LLWU_P21 input was not a wakeup source
 * - 0b1 - LLWU_P21 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF3_WUF21 field. */
#define LLWU_RD_PF3_WUF21(base) ((LLWU_PF3_REG(base) & LLWU_PF3_WUF21_MASK) >> LLWU_PF3_WUF21_SHIFT)
#define LLWU_BRD_PF3_WUF21(base) (BME_UBFX8(&LLWU_PF3_REG(base), LLWU_PF3_WUF21_SHIFT, LLWU_PF3_WUF21_WIDTH))

/*! @brief Set the WUF21 field to a new value. */
#define LLWU_WR_PF3_WUF21(base, value) (LLWU_RMW_PF3(base, (LLWU_PF3_WUF21_MASK | LLWU_PF3_WUF16_MASK | LLWU_PF3_WUF17_MASK | LLWU_PF3_WUF18_MASK | LLWU_PF3_WUF19_MASK | LLWU_PF3_WUF20_MASK | LLWU_PF3_WUF22_MASK | LLWU_PF3_WUF23_MASK), LLWU_PF3_WUF21(value)))
#define LLWU_BWR_PF3_WUF21(base, value) (BME_BFI8(&LLWU_PF3_REG(base), ((uint8_t)(value) << LLWU_PF3_WUF21_SHIFT), LLWU_PF3_WUF21_SHIFT, LLWU_PF3_WUF21_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF3, field WUF22[6] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF22.
 *
 * Values:
 * - 0b0 - LLWU_P22 input was not a wakeup source
 * - 0b1 - LLWU_P22 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF3_WUF22 field. */
#define LLWU_RD_PF3_WUF22(base) ((LLWU_PF3_REG(base) & LLWU_PF3_WUF22_MASK) >> LLWU_PF3_WUF22_SHIFT)
#define LLWU_BRD_PF3_WUF22(base) (BME_UBFX8(&LLWU_PF3_REG(base), LLWU_PF3_WUF22_SHIFT, LLWU_PF3_WUF22_WIDTH))

/*! @brief Set the WUF22 field to a new value. */
#define LLWU_WR_PF3_WUF22(base, value) (LLWU_RMW_PF3(base, (LLWU_PF3_WUF22_MASK | LLWU_PF3_WUF16_MASK | LLWU_PF3_WUF17_MASK | LLWU_PF3_WUF18_MASK | LLWU_PF3_WUF19_MASK | LLWU_PF3_WUF20_MASK | LLWU_PF3_WUF21_MASK | LLWU_PF3_WUF23_MASK), LLWU_PF3_WUF22(value)))
#define LLWU_BWR_PF3_WUF22(base, value) (BME_BFI8(&LLWU_PF3_REG(base), ((uint8_t)(value) << LLWU_PF3_WUF22_SHIFT), LLWU_PF3_WUF22_SHIFT, LLWU_PF3_WUF22_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF3, field WUF23[7] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF23.
 *
 * Values:
 * - 0b0 - LLWU_P23 input was not a wakeup source
 * - 0b1 - LLWU_P23 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF3_WUF23 field. */
#define LLWU_RD_PF3_WUF23(base) ((LLWU_PF3_REG(base) & LLWU_PF3_WUF23_MASK) >> LLWU_PF3_WUF23_SHIFT)
#define LLWU_BRD_PF3_WUF23(base) (BME_UBFX8(&LLWU_PF3_REG(base), LLWU_PF3_WUF23_SHIFT, LLWU_PF3_WUF23_WIDTH))

/*! @brief Set the WUF23 field to a new value. */
#define LLWU_WR_PF3_WUF23(base, value) (LLWU_RMW_PF3(base, (LLWU_PF3_WUF23_MASK | LLWU_PF3_WUF16_MASK | LLWU_PF3_WUF17_MASK | LLWU_PF3_WUF18_MASK | LLWU_PF3_WUF19_MASK | LLWU_PF3_WUF20_MASK | LLWU_PF3_WUF21_MASK | LLWU_PF3_WUF22_MASK), LLWU_PF3_WUF23(value)))
#define LLWU_BWR_PF3_WUF23(base, value) (BME_BFI8(&LLWU_PF3_REG(base), ((uint8_t)(value) << LLWU_PF3_WUF23_SHIFT), LLWU_PF3_WUF23_SHIFT, LLWU_PF3_WUF23_WIDTH))
/*@}*/

/*******************************************************************************
 * LLWU_PF4 - LLWU Pin Flag 4 register
 ******************************************************************************/

/*!
 * @brief LLWU_PF4 - LLWU Pin Flag 4 register (W1C)
 *
 * Reset value: 0x00U
 *
 * LLWU_PF4 contains the wakeup flags indicating which wakeup source caused the
 * MCU to exit LLS or VLLS mode. For LLS, this is the source causing the CPU
 * interrupt flow. For VLLS, this is the source causing the MCU reset flow. The
 * external wakeup flags are read-only and clearing a flag is accomplished by a write
 * of a 1 to the corresponding WUFx bit. The wakeup flag (WUFx), if set, will
 * remain set if the associated WUPEx bit is cleared. This register is reset on Chip
 * Reset not VLLS and by reset types that trigger Chip Reset not VLLS. It is
 * unaffected by reset types that do not trigger Chip Reset not VLLS. See the
 * IntroductionInformation found here describes the registers of the Reset Control
 * Module (RCM). The RCM implements many of the reset functions for the chip. See the
 * chip's reset chapter for more information. details for more information.
 */
/*!
 * @name Constants and macros for entire LLWU_PF4 register
 */
/*@{*/
#define LLWU_RD_PF4(base)        (LLWU_PF4_REG(base))
#define LLWU_WR_PF4(base, value) (LLWU_PF4_REG(base) = (value))
#define LLWU_RMW_PF4(base, mask, value) (LLWU_WR_PF4(base, (LLWU_RD_PF4(base) & ~(mask)) | (value)))
#define LLWU_SET_PF4(base, value) (BME_OR8(&LLWU_PF4_REG(base), (uint8_t)(value)))
#define LLWU_CLR_PF4(base, value) (BME_AND8(&LLWU_PF4_REG(base), (uint8_t)(~(value))))
#define LLWU_TOG_PF4(base, value) (BME_XOR8(&LLWU_PF4_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LLWU_PF4 bitfields
 */

/*!
 * @name Register LLWU_PF4, field WUF24[0] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF24.
 *
 * Values:
 * - 0b0 - LLWU_P24 input was not a wakeup source
 * - 0b1 - LLWU_P24 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF4_WUF24 field. */
#define LLWU_RD_PF4_WUF24(base) ((LLWU_PF4_REG(base) & LLWU_PF4_WUF24_MASK) >> LLWU_PF4_WUF24_SHIFT)
#define LLWU_BRD_PF4_WUF24(base) (BME_UBFX8(&LLWU_PF4_REG(base), LLWU_PF4_WUF24_SHIFT, LLWU_PF4_WUF24_WIDTH))

/*! @brief Set the WUF24 field to a new value. */
#define LLWU_WR_PF4_WUF24(base, value) (LLWU_RMW_PF4(base, (LLWU_PF4_WUF24_MASK | LLWU_PF4_WUF25_MASK | LLWU_PF4_WUF26_MASK | LLWU_PF4_WUF27_MASK | LLWU_PF4_WUF28_MASK | LLWU_PF4_WUF29_MASK | LLWU_PF4_WUF30_MASK | LLWU_PF4_WUF31_MASK), LLWU_PF4_WUF24(value)))
#define LLWU_BWR_PF4_WUF24(base, value) (BME_BFI8(&LLWU_PF4_REG(base), ((uint8_t)(value) << LLWU_PF4_WUF24_SHIFT), LLWU_PF4_WUF24_SHIFT, LLWU_PF4_WUF24_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF4, field WUF25[1] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF25.
 *
 * Values:
 * - 0b0 - LLWU_P25 input was not a wakeup source
 * - 0b1 - LLWU_P25 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF4_WUF25 field. */
#define LLWU_RD_PF4_WUF25(base) ((LLWU_PF4_REG(base) & LLWU_PF4_WUF25_MASK) >> LLWU_PF4_WUF25_SHIFT)
#define LLWU_BRD_PF4_WUF25(base) (BME_UBFX8(&LLWU_PF4_REG(base), LLWU_PF4_WUF25_SHIFT, LLWU_PF4_WUF25_WIDTH))

/*! @brief Set the WUF25 field to a new value. */
#define LLWU_WR_PF4_WUF25(base, value) (LLWU_RMW_PF4(base, (LLWU_PF4_WUF25_MASK | LLWU_PF4_WUF24_MASK | LLWU_PF4_WUF26_MASK | LLWU_PF4_WUF27_MASK | LLWU_PF4_WUF28_MASK | LLWU_PF4_WUF29_MASK | LLWU_PF4_WUF30_MASK | LLWU_PF4_WUF31_MASK), LLWU_PF4_WUF25(value)))
#define LLWU_BWR_PF4_WUF25(base, value) (BME_BFI8(&LLWU_PF4_REG(base), ((uint8_t)(value) << LLWU_PF4_WUF25_SHIFT), LLWU_PF4_WUF25_SHIFT, LLWU_PF4_WUF25_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF4, field WUF26[2] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF26.
 *
 * Values:
 * - 0b0 - LLWU_P26 input was not a wakeup source
 * - 0b1 - LLWU_P26 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF4_WUF26 field. */
#define LLWU_RD_PF4_WUF26(base) ((LLWU_PF4_REG(base) & LLWU_PF4_WUF26_MASK) >> LLWU_PF4_WUF26_SHIFT)
#define LLWU_BRD_PF4_WUF26(base) (BME_UBFX8(&LLWU_PF4_REG(base), LLWU_PF4_WUF26_SHIFT, LLWU_PF4_WUF26_WIDTH))

/*! @brief Set the WUF26 field to a new value. */
#define LLWU_WR_PF4_WUF26(base, value) (LLWU_RMW_PF4(base, (LLWU_PF4_WUF26_MASK | LLWU_PF4_WUF24_MASK | LLWU_PF4_WUF25_MASK | LLWU_PF4_WUF27_MASK | LLWU_PF4_WUF28_MASK | LLWU_PF4_WUF29_MASK | LLWU_PF4_WUF30_MASK | LLWU_PF4_WUF31_MASK), LLWU_PF4_WUF26(value)))
#define LLWU_BWR_PF4_WUF26(base, value) (BME_BFI8(&LLWU_PF4_REG(base), ((uint8_t)(value) << LLWU_PF4_WUF26_SHIFT), LLWU_PF4_WUF26_SHIFT, LLWU_PF4_WUF26_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF4, field WUF27[3] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF27.
 *
 * Values:
 * - 0b0 - LLWU_P27 input was not a wakeup source
 * - 0b1 - LLWU_P27 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF4_WUF27 field. */
#define LLWU_RD_PF4_WUF27(base) ((LLWU_PF4_REG(base) & LLWU_PF4_WUF27_MASK) >> LLWU_PF4_WUF27_SHIFT)
#define LLWU_BRD_PF4_WUF27(base) (BME_UBFX8(&LLWU_PF4_REG(base), LLWU_PF4_WUF27_SHIFT, LLWU_PF4_WUF27_WIDTH))

/*! @brief Set the WUF27 field to a new value. */
#define LLWU_WR_PF4_WUF27(base, value) (LLWU_RMW_PF4(base, (LLWU_PF4_WUF27_MASK | LLWU_PF4_WUF24_MASK | LLWU_PF4_WUF25_MASK | LLWU_PF4_WUF26_MASK | LLWU_PF4_WUF28_MASK | LLWU_PF4_WUF29_MASK | LLWU_PF4_WUF30_MASK | LLWU_PF4_WUF31_MASK), LLWU_PF4_WUF27(value)))
#define LLWU_BWR_PF4_WUF27(base, value) (BME_BFI8(&LLWU_PF4_REG(base), ((uint8_t)(value) << LLWU_PF4_WUF27_SHIFT), LLWU_PF4_WUF27_SHIFT, LLWU_PF4_WUF27_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF4, field WUF28[4] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF28.
 *
 * Values:
 * - 0b0 - LLWU_P28 input was not a wakeup source
 * - 0b1 - LLWU_P28 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF4_WUF28 field. */
#define LLWU_RD_PF4_WUF28(base) ((LLWU_PF4_REG(base) & LLWU_PF4_WUF28_MASK) >> LLWU_PF4_WUF28_SHIFT)
#define LLWU_BRD_PF4_WUF28(base) (BME_UBFX8(&LLWU_PF4_REG(base), LLWU_PF4_WUF28_SHIFT, LLWU_PF4_WUF28_WIDTH))

/*! @brief Set the WUF28 field to a new value. */
#define LLWU_WR_PF4_WUF28(base, value) (LLWU_RMW_PF4(base, (LLWU_PF4_WUF28_MASK | LLWU_PF4_WUF24_MASK | LLWU_PF4_WUF25_MASK | LLWU_PF4_WUF26_MASK | LLWU_PF4_WUF27_MASK | LLWU_PF4_WUF29_MASK | LLWU_PF4_WUF30_MASK | LLWU_PF4_WUF31_MASK), LLWU_PF4_WUF28(value)))
#define LLWU_BWR_PF4_WUF28(base, value) (BME_BFI8(&LLWU_PF4_REG(base), ((uint8_t)(value) << LLWU_PF4_WUF28_SHIFT), LLWU_PF4_WUF28_SHIFT, LLWU_PF4_WUF28_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF4, field WUF29[5] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF29.
 *
 * Values:
 * - 0b0 - LLWU_P29 input was not a wakeup source
 * - 0b1 - LLWU_P29 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF4_WUF29 field. */
#define LLWU_RD_PF4_WUF29(base) ((LLWU_PF4_REG(base) & LLWU_PF4_WUF29_MASK) >> LLWU_PF4_WUF29_SHIFT)
#define LLWU_BRD_PF4_WUF29(base) (BME_UBFX8(&LLWU_PF4_REG(base), LLWU_PF4_WUF29_SHIFT, LLWU_PF4_WUF29_WIDTH))

/*! @brief Set the WUF29 field to a new value. */
#define LLWU_WR_PF4_WUF29(base, value) (LLWU_RMW_PF4(base, (LLWU_PF4_WUF29_MASK | LLWU_PF4_WUF24_MASK | LLWU_PF4_WUF25_MASK | LLWU_PF4_WUF26_MASK | LLWU_PF4_WUF27_MASK | LLWU_PF4_WUF28_MASK | LLWU_PF4_WUF30_MASK | LLWU_PF4_WUF31_MASK), LLWU_PF4_WUF29(value)))
#define LLWU_BWR_PF4_WUF29(base, value) (BME_BFI8(&LLWU_PF4_REG(base), ((uint8_t)(value) << LLWU_PF4_WUF29_SHIFT), LLWU_PF4_WUF29_SHIFT, LLWU_PF4_WUF29_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF4, field WUF30[6] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF30.
 *
 * Values:
 * - 0b0 - LLWU_P30 input was not a wakeup source
 * - 0b1 - LLWU_P30 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF4_WUF30 field. */
#define LLWU_RD_PF4_WUF30(base) ((LLWU_PF4_REG(base) & LLWU_PF4_WUF30_MASK) >> LLWU_PF4_WUF30_SHIFT)
#define LLWU_BRD_PF4_WUF30(base) (BME_UBFX8(&LLWU_PF4_REG(base), LLWU_PF4_WUF30_SHIFT, LLWU_PF4_WUF30_WIDTH))

/*! @brief Set the WUF30 field to a new value. */
#define LLWU_WR_PF4_WUF30(base, value) (LLWU_RMW_PF4(base, (LLWU_PF4_WUF30_MASK | LLWU_PF4_WUF24_MASK | LLWU_PF4_WUF25_MASK | LLWU_PF4_WUF26_MASK | LLWU_PF4_WUF27_MASK | LLWU_PF4_WUF28_MASK | LLWU_PF4_WUF29_MASK | LLWU_PF4_WUF31_MASK), LLWU_PF4_WUF30(value)))
#define LLWU_BWR_PF4_WUF30(base, value) (BME_BFI8(&LLWU_PF4_REG(base), ((uint8_t)(value) << LLWU_PF4_WUF30_SHIFT), LLWU_PF4_WUF30_SHIFT, LLWU_PF4_WUF30_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_PF4, field WUF31[7] (W1C)
 *
 * Indicates that an enabled external wakeup pin was a source of exiting a
 * low-leakage power mode. To clear the flag write a one to WUF31.
 *
 * Values:
 * - 0b0 - LLWU_P31 input was not a wakeup source
 * - 0b1 - LLWU_P31 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_PF4_WUF31 field. */
#define LLWU_RD_PF4_WUF31(base) ((LLWU_PF4_REG(base) & LLWU_PF4_WUF31_MASK) >> LLWU_PF4_WUF31_SHIFT)
#define LLWU_BRD_PF4_WUF31(base) (BME_UBFX8(&LLWU_PF4_REG(base), LLWU_PF4_WUF31_SHIFT, LLWU_PF4_WUF31_WIDTH))

/*! @brief Set the WUF31 field to a new value. */
#define LLWU_WR_PF4_WUF31(base, value) (LLWU_RMW_PF4(base, (LLWU_PF4_WUF31_MASK | LLWU_PF4_WUF24_MASK | LLWU_PF4_WUF25_MASK | LLWU_PF4_WUF26_MASK | LLWU_PF4_WUF27_MASK | LLWU_PF4_WUF28_MASK | LLWU_PF4_WUF29_MASK | LLWU_PF4_WUF30_MASK), LLWU_PF4_WUF31(value)))
#define LLWU_BWR_PF4_WUF31(base, value) (BME_BFI8(&LLWU_PF4_REG(base), ((uint8_t)(value) << LLWU_PF4_WUF31_SHIFT), LLWU_PF4_WUF31_SHIFT, LLWU_PF4_WUF31_WIDTH))
/*@}*/

/*******************************************************************************
 * LLWU_MF5 - LLWU Module Flag 5 register
 ******************************************************************************/

/*!
 * @brief LLWU_MF5 - LLWU Module Flag 5 register (RO)
 *
 * Reset value: 0x00U
 *
 * LLWU_MF5 contains the wakeup flags indicating which internal wakeup source
 * caused the MCU to exit LLS or VLLS mode. For LLS, this is the source causing the
 * CPU interrupt flow. For VLLS, this is the source causing the MCU reset flow.
 * For internal peripherals that are capable of running in a low-leakage power
 * mode, such as a real time clock module or CMP module, the flag from the
 * associated peripheral is accessible as the MWUFx bit. The flag will need to be cleared
 * in the peripheral instead of writing a 1 to the MWUFx bit. This register is
 * reset on Chip Reset not VLLS and by reset types that trigger Chip Reset not
 * VLLS. It is unaffected by reset types that do not trigger Chip Reset not VLLS.
 * See the IntroductionInformation found here describes the registers of the Reset
 * Control Module (RCM). The RCM implements many of the reset functions for the
 * chip. See the chip's reset chapter for more information. details for more
 * information.
 */
/*!
 * @name Constants and macros for entire LLWU_MF5 register
 */
/*@{*/
#define LLWU_RD_MF5(base)        (LLWU_MF5_REG(base))
/*@}*/

/*
 * Constants & macros for individual LLWU_MF5 bitfields
 */

/*!
 * @name Register LLWU_MF5, field MWUF0[0] (RO)
 *
 * Indicates that an enabled internal peripheral was a source of exiting a
 * low-leakage power mode. To clear the flag, follow the internal peripheral flag
 * clearing mechanism.
 *
 * Values:
 * - 0b0 - Module 0 input was not a wakeup source
 * - 0b1 - Module 0 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_MF5_MWUF0 field. */
#define LLWU_RD_MF5_MWUF0(base) ((LLWU_MF5_REG(base) & LLWU_MF5_MWUF0_MASK) >> LLWU_MF5_MWUF0_SHIFT)
#define LLWU_BRD_MF5_MWUF0(base) (BME_UBFX8(&LLWU_MF5_REG(base), LLWU_MF5_MWUF0_SHIFT, LLWU_MF5_MWUF0_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_MF5, field MWUF1[1] (RO)
 *
 * Indicates that an enabled internal peripheral was a source of exiting a
 * low-leakage power mode. To clear the flag, follow the internal peripheral flag
 * clearing mechanism.
 *
 * Values:
 * - 0b0 - Module 1 input was not a wakeup source
 * - 0b1 - Module 1 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_MF5_MWUF1 field. */
#define LLWU_RD_MF5_MWUF1(base) ((LLWU_MF5_REG(base) & LLWU_MF5_MWUF1_MASK) >> LLWU_MF5_MWUF1_SHIFT)
#define LLWU_BRD_MF5_MWUF1(base) (BME_UBFX8(&LLWU_MF5_REG(base), LLWU_MF5_MWUF1_SHIFT, LLWU_MF5_MWUF1_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_MF5, field MWUF2[2] (RO)
 *
 * Indicates that an enabled internal peripheral was a source of exiting a
 * low-leakage power mode. To clear the flag, follow the internal peripheral flag
 * clearing mechanism.
 *
 * Values:
 * - 0b0 - Module 2 input was not a wakeup source
 * - 0b1 - Module 2 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_MF5_MWUF2 field. */
#define LLWU_RD_MF5_MWUF2(base) ((LLWU_MF5_REG(base) & LLWU_MF5_MWUF2_MASK) >> LLWU_MF5_MWUF2_SHIFT)
#define LLWU_BRD_MF5_MWUF2(base) (BME_UBFX8(&LLWU_MF5_REG(base), LLWU_MF5_MWUF2_SHIFT, LLWU_MF5_MWUF2_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_MF5, field MWUF3[3] (RO)
 *
 * Indicates that an enabled internal peripheral was a source of exiting a
 * low-leakage power mode. To clear the flag, follow the internal peripheral flag
 * clearing mechanism.
 *
 * Values:
 * - 0b0 - Module 3 input was not a wakeup source
 * - 0b1 - Module 3 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_MF5_MWUF3 field. */
#define LLWU_RD_MF5_MWUF3(base) ((LLWU_MF5_REG(base) & LLWU_MF5_MWUF3_MASK) >> LLWU_MF5_MWUF3_SHIFT)
#define LLWU_BRD_MF5_MWUF3(base) (BME_UBFX8(&LLWU_MF5_REG(base), LLWU_MF5_MWUF3_SHIFT, LLWU_MF5_MWUF3_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_MF5, field MWUF4[4] (RO)
 *
 * Indicates that an enabled internal peripheral was a source of exiting a
 * low-leakage power mode. To clear the flag, follow the internal peripheral flag
 * clearing mechanism.
 *
 * Values:
 * - 0b0 - Module 4 input was not a wakeup source
 * - 0b1 - Module 4 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_MF5_MWUF4 field. */
#define LLWU_RD_MF5_MWUF4(base) ((LLWU_MF5_REG(base) & LLWU_MF5_MWUF4_MASK) >> LLWU_MF5_MWUF4_SHIFT)
#define LLWU_BRD_MF5_MWUF4(base) (BME_UBFX8(&LLWU_MF5_REG(base), LLWU_MF5_MWUF4_SHIFT, LLWU_MF5_MWUF4_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_MF5, field MWUF5[5] (RO)
 *
 * Indicates that an enabled internal peripheral was a source of exiting a
 * low-leakage power mode. To clear the flag, follow the internal peripheral flag
 * clearing mechanism.
 *
 * Values:
 * - 0b0 - Module 5 input was not a wakeup source
 * - 0b1 - Module 5 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_MF5_MWUF5 field. */
#define LLWU_RD_MF5_MWUF5(base) ((LLWU_MF5_REG(base) & LLWU_MF5_MWUF5_MASK) >> LLWU_MF5_MWUF5_SHIFT)
#define LLWU_BRD_MF5_MWUF5(base) (BME_UBFX8(&LLWU_MF5_REG(base), LLWU_MF5_MWUF5_SHIFT, LLWU_MF5_MWUF5_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_MF5, field MWUF6[6] (RO)
 *
 * Indicates that an enabled internal peripheral was a source of exiting a
 * low-leakage power mode. To clear the flag, follow the internal peripheral flag
 * clearing mechanism.
 *
 * Values:
 * - 0b0 - Module 6 input was not a wakeup source
 * - 0b1 - Module 6 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_MF5_MWUF6 field. */
#define LLWU_RD_MF5_MWUF6(base) ((LLWU_MF5_REG(base) & LLWU_MF5_MWUF6_MASK) >> LLWU_MF5_MWUF6_SHIFT)
#define LLWU_BRD_MF5_MWUF6(base) (BME_UBFX8(&LLWU_MF5_REG(base), LLWU_MF5_MWUF6_SHIFT, LLWU_MF5_MWUF6_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_MF5, field MWUF7[7] (RO)
 *
 * Indicates that an enabled internal peripheral was a source of exiting a
 * low-leakage power mode. To clear the flag, follow the internal peripheral flag
 * clearing mechanism.
 *
 * Values:
 * - 0b0 - Module 7 input was not a wakeup source
 * - 0b1 - Module 7 input was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_MF5_MWUF7 field. */
#define LLWU_RD_MF5_MWUF7(base) ((LLWU_MF5_REG(base) & LLWU_MF5_MWUF7_MASK) >> LLWU_MF5_MWUF7_SHIFT)
#define LLWU_BRD_MF5_MWUF7(base) (BME_UBFX8(&LLWU_MF5_REG(base), LLWU_MF5_MWUF7_SHIFT, LLWU_MF5_MWUF7_WIDTH))
/*@}*/

/*******************************************************************************
 * LLWU_FILT1 - LLWU Pin Filter 1 register
 ******************************************************************************/

/*!
 * @brief LLWU_FILT1 - LLWU Pin Filter 1 register (RW)
 *
 * Reset value: 0x00U
 *
 * LLWU_FILT1 is a control and status register that is used to enable/disable
 * the digital filter 1 features for an external pin. This register is reset on
 * Chip Reset not VLLS and by reset types that trigger Chip Reset not VLLS. It is
 * unaffected by reset types that do not trigger Chip Reset not VLLS. See the
 * IntroductionInformation found here describes the registers of the Reset Control
 * Module (RCM). The RCM implements many of the reset functions for the chip. See
 * the chip's reset chapter for more information. details for more information.
 */
/*!
 * @name Constants and macros for entire LLWU_FILT1 register
 */
/*@{*/
#define LLWU_RD_FILT1(base)      (LLWU_FILT1_REG(base))
#define LLWU_WR_FILT1(base, value) (LLWU_FILT1_REG(base) = (value))
#define LLWU_RMW_FILT1(base, mask, value) (LLWU_WR_FILT1(base, (LLWU_RD_FILT1(base) & ~(mask)) | (value)))
#define LLWU_SET_FILT1(base, value) (BME_OR8(&LLWU_FILT1_REG(base), (uint8_t)(value)))
#define LLWU_CLR_FILT1(base, value) (BME_AND8(&LLWU_FILT1_REG(base), (uint8_t)(~(value))))
#define LLWU_TOG_FILT1(base, value) (BME_XOR8(&LLWU_FILT1_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LLWU_FILT1 bitfields
 */

/*!
 * @name Register LLWU_FILT1, field FILTSEL[4:0] (RW)
 *
 * Selects 1 of the wakeup pins to be muxed into the filter.
 *
 * Values:
 * - 0b00000 - Select LLWU_P0 for filter
 * - 0b11111 - Select LLWU_P31 for filter
 */
/*@{*/
/*! @brief Read current value of the LLWU_FILT1_FILTSEL field. */
#define LLWU_RD_FILT1_FILTSEL(base) ((LLWU_FILT1_REG(base) & LLWU_FILT1_FILTSEL_MASK) >> LLWU_FILT1_FILTSEL_SHIFT)
#define LLWU_BRD_FILT1_FILTSEL(base) (BME_UBFX8(&LLWU_FILT1_REG(base), LLWU_FILT1_FILTSEL_SHIFT, LLWU_FILT1_FILTSEL_WIDTH))

/*! @brief Set the FILTSEL field to a new value. */
#define LLWU_WR_FILT1_FILTSEL(base, value) (LLWU_RMW_FILT1(base, (LLWU_FILT1_FILTSEL_MASK | LLWU_FILT1_FILTF_MASK), LLWU_FILT1_FILTSEL(value)))
#define LLWU_BWR_FILT1_FILTSEL(base, value) (BME_BFI8(&LLWU_FILT1_REG(base), ((uint8_t)(value) << LLWU_FILT1_FILTSEL_SHIFT), LLWU_FILT1_FILTSEL_SHIFT, LLWU_FILT1_FILTSEL_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_FILT1, field FILTE[6:5] (RW)
 *
 * Controls the digital filter options for the external pin detect.
 *
 * Values:
 * - 0b00 - Filter disabled
 * - 0b01 - Filter posedge detect enabled
 * - 0b10 - Filter negedge detect enabled
 * - 0b11 - Filter any edge detect enabled
 */
/*@{*/
/*! @brief Read current value of the LLWU_FILT1_FILTE field. */
#define LLWU_RD_FILT1_FILTE(base) ((LLWU_FILT1_REG(base) & LLWU_FILT1_FILTE_MASK) >> LLWU_FILT1_FILTE_SHIFT)
#define LLWU_BRD_FILT1_FILTE(base) (BME_UBFX8(&LLWU_FILT1_REG(base), LLWU_FILT1_FILTE_SHIFT, LLWU_FILT1_FILTE_WIDTH))

/*! @brief Set the FILTE field to a new value. */
#define LLWU_WR_FILT1_FILTE(base, value) (LLWU_RMW_FILT1(base, (LLWU_FILT1_FILTE_MASK | LLWU_FILT1_FILTF_MASK), LLWU_FILT1_FILTE(value)))
#define LLWU_BWR_FILT1_FILTE(base, value) (BME_BFI8(&LLWU_FILT1_REG(base), ((uint8_t)(value) << LLWU_FILT1_FILTE_SHIFT), LLWU_FILT1_FILTE_SHIFT, LLWU_FILT1_FILTE_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_FILT1, field FILTF[7] (W1C)
 *
 * Indicates that the filtered external wakeup pin, selected by FILTSEL, was a
 * source of exiting a low-leakage power mode. To clear the flag write a one to
 * FILTF.
 *
 * Values:
 * - 0b0 - Pin Filter 1 was not a wakeup source
 * - 0b1 - Pin Filter 1 was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_FILT1_FILTF field. */
#define LLWU_RD_FILT1_FILTF(base) ((LLWU_FILT1_REG(base) & LLWU_FILT1_FILTF_MASK) >> LLWU_FILT1_FILTF_SHIFT)
#define LLWU_BRD_FILT1_FILTF(base) (BME_UBFX8(&LLWU_FILT1_REG(base), LLWU_FILT1_FILTF_SHIFT, LLWU_FILT1_FILTF_WIDTH))

/*! @brief Set the FILTF field to a new value. */
#define LLWU_WR_FILT1_FILTF(base, value) (LLWU_RMW_FILT1(base, LLWU_FILT1_FILTF_MASK, LLWU_FILT1_FILTF(value)))
#define LLWU_BWR_FILT1_FILTF(base, value) (BME_BFI8(&LLWU_FILT1_REG(base), ((uint8_t)(value) << LLWU_FILT1_FILTF_SHIFT), LLWU_FILT1_FILTF_SHIFT, LLWU_FILT1_FILTF_WIDTH))
/*@}*/

/*******************************************************************************
 * LLWU_FILT2 - LLWU Pin Filter 2 register
 ******************************************************************************/

/*!
 * @brief LLWU_FILT2 - LLWU Pin Filter 2 register (RW)
 *
 * Reset value: 0x00U
 *
 * LLWU_FILT2 is a control and status register that is used to enable/disable
 * the digital filter 2 features for an external pin. This register is reset on
 * Chip Reset not VLLS and by reset types that trigger Chip Reset not VLLS. It is
 * unaffected by reset types that do not trigger Chip Reset not VLLS. See the
 * IntroductionInformation found here describes the registers of the Reset Control
 * Module (RCM). The RCM implements many of the reset functions for the chip. See
 * the chip's reset chapter for more information. details for more information.
 */
/*!
 * @name Constants and macros for entire LLWU_FILT2 register
 */
/*@{*/
#define LLWU_RD_FILT2(base)      (LLWU_FILT2_REG(base))
#define LLWU_WR_FILT2(base, value) (LLWU_FILT2_REG(base) = (value))
#define LLWU_RMW_FILT2(base, mask, value) (LLWU_WR_FILT2(base, (LLWU_RD_FILT2(base) & ~(mask)) | (value)))
#define LLWU_SET_FILT2(base, value) (BME_OR8(&LLWU_FILT2_REG(base), (uint8_t)(value)))
#define LLWU_CLR_FILT2(base, value) (BME_AND8(&LLWU_FILT2_REG(base), (uint8_t)(~(value))))
#define LLWU_TOG_FILT2(base, value) (BME_XOR8(&LLWU_FILT2_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LLWU_FILT2 bitfields
 */

/*!
 * @name Register LLWU_FILT2, field FILTSEL[4:0] (RW)
 *
 * Selects 1 of the wakeup pins to be muxed into the filter.
 *
 * Values:
 * - 0b00000 - Select LLWU_P0 for filter
 * - 0b11111 - Select LLWU_P31 for filter
 */
/*@{*/
/*! @brief Read current value of the LLWU_FILT2_FILTSEL field. */
#define LLWU_RD_FILT2_FILTSEL(base) ((LLWU_FILT2_REG(base) & LLWU_FILT2_FILTSEL_MASK) >> LLWU_FILT2_FILTSEL_SHIFT)
#define LLWU_BRD_FILT2_FILTSEL(base) (BME_UBFX8(&LLWU_FILT2_REG(base), LLWU_FILT2_FILTSEL_SHIFT, LLWU_FILT2_FILTSEL_WIDTH))

/*! @brief Set the FILTSEL field to a new value. */
#define LLWU_WR_FILT2_FILTSEL(base, value) (LLWU_RMW_FILT2(base, (LLWU_FILT2_FILTSEL_MASK | LLWU_FILT2_FILTF_MASK), LLWU_FILT2_FILTSEL(value)))
#define LLWU_BWR_FILT2_FILTSEL(base, value) (BME_BFI8(&LLWU_FILT2_REG(base), ((uint8_t)(value) << LLWU_FILT2_FILTSEL_SHIFT), LLWU_FILT2_FILTSEL_SHIFT, LLWU_FILT2_FILTSEL_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_FILT2, field FILTE[6:5] (RW)
 *
 * Controls the digital filter options for the external pin detect.
 *
 * Values:
 * - 0b00 - Filter disabled
 * - 0b01 - Filter posedge detect enabled
 * - 0b10 - Filter negedge detect enabled
 * - 0b11 - Filter any edge detect enabled
 */
/*@{*/
/*! @brief Read current value of the LLWU_FILT2_FILTE field. */
#define LLWU_RD_FILT2_FILTE(base) ((LLWU_FILT2_REG(base) & LLWU_FILT2_FILTE_MASK) >> LLWU_FILT2_FILTE_SHIFT)
#define LLWU_BRD_FILT2_FILTE(base) (BME_UBFX8(&LLWU_FILT2_REG(base), LLWU_FILT2_FILTE_SHIFT, LLWU_FILT2_FILTE_WIDTH))

/*! @brief Set the FILTE field to a new value. */
#define LLWU_WR_FILT2_FILTE(base, value) (LLWU_RMW_FILT2(base, (LLWU_FILT2_FILTE_MASK | LLWU_FILT2_FILTF_MASK), LLWU_FILT2_FILTE(value)))
#define LLWU_BWR_FILT2_FILTE(base, value) (BME_BFI8(&LLWU_FILT2_REG(base), ((uint8_t)(value) << LLWU_FILT2_FILTE_SHIFT), LLWU_FILT2_FILTE_SHIFT, LLWU_FILT2_FILTE_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_FILT2, field FILTF[7] (W1C)
 *
 * Indicates that the filtered external wakeup pin, selected by FILTSEL, was a
 * source of exiting a low-leakage power mode. To clear the flag write a one to
 * FILTF.
 *
 * Values:
 * - 0b0 - Pin Filter 2 was not a wakeup source
 * - 0b1 - Pin Filter 2 was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_FILT2_FILTF field. */
#define LLWU_RD_FILT2_FILTF(base) ((LLWU_FILT2_REG(base) & LLWU_FILT2_FILTF_MASK) >> LLWU_FILT2_FILTF_SHIFT)
#define LLWU_BRD_FILT2_FILTF(base) (BME_UBFX8(&LLWU_FILT2_REG(base), LLWU_FILT2_FILTF_SHIFT, LLWU_FILT2_FILTF_WIDTH))

/*! @brief Set the FILTF field to a new value. */
#define LLWU_WR_FILT2_FILTF(base, value) (LLWU_RMW_FILT2(base, LLWU_FILT2_FILTF_MASK, LLWU_FILT2_FILTF(value)))
#define LLWU_BWR_FILT2_FILTF(base, value) (BME_BFI8(&LLWU_FILT2_REG(base), ((uint8_t)(value) << LLWU_FILT2_FILTF_SHIFT), LLWU_FILT2_FILTF_SHIFT, LLWU_FILT2_FILTF_WIDTH))
/*@}*/

/*******************************************************************************
 * LLWU_FILT3 - LLWU Pin Filter 3 register
 ******************************************************************************/

/*!
 * @brief LLWU_FILT3 - LLWU Pin Filter 3 register (RW)
 *
 * Reset value: 0x00U
 *
 * LLWU_FILT3 is a control and status register that is used to enable/disable
 * the digital filter 3 features for an external pin. This register is reset on
 * Chip Reset not VLLS and by reset types that trigger Chip Reset not VLLS. It is
 * unaffected by reset types that do not trigger Chip Reset not VLLS. See the
 * IntroductionInformation found here describes the registers of the Reset Control
 * Module (RCM). The RCM implements many of the reset functions for the chip. See
 * the chip's reset chapter for more information. details for more information.
 */
/*!
 * @name Constants and macros for entire LLWU_FILT3 register
 */
/*@{*/
#define LLWU_RD_FILT3(base)      (LLWU_FILT3_REG(base))
#define LLWU_WR_FILT3(base, value) (LLWU_FILT3_REG(base) = (value))
#define LLWU_RMW_FILT3(base, mask, value) (LLWU_WR_FILT3(base, (LLWU_RD_FILT3(base) & ~(mask)) | (value)))
#define LLWU_SET_FILT3(base, value) (BME_OR8(&LLWU_FILT3_REG(base), (uint8_t)(value)))
#define LLWU_CLR_FILT3(base, value) (BME_AND8(&LLWU_FILT3_REG(base), (uint8_t)(~(value))))
#define LLWU_TOG_FILT3(base, value) (BME_XOR8(&LLWU_FILT3_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LLWU_FILT3 bitfields
 */

/*!
 * @name Register LLWU_FILT3, field FILTSEL[4:0] (RW)
 *
 * Selects 1 of the wakeup pins to be muxed into the filter.
 *
 * Values:
 * - 0b00000 - Select LLWU_P0 for filter
 * - 0b11111 - Select LLWU_P31 for filter
 */
/*@{*/
/*! @brief Read current value of the LLWU_FILT3_FILTSEL field. */
#define LLWU_RD_FILT3_FILTSEL(base) ((LLWU_FILT3_REG(base) & LLWU_FILT3_FILTSEL_MASK) >> LLWU_FILT3_FILTSEL_SHIFT)
#define LLWU_BRD_FILT3_FILTSEL(base) (BME_UBFX8(&LLWU_FILT3_REG(base), LLWU_FILT3_FILTSEL_SHIFT, LLWU_FILT3_FILTSEL_WIDTH))

/*! @brief Set the FILTSEL field to a new value. */
#define LLWU_WR_FILT3_FILTSEL(base, value) (LLWU_RMW_FILT3(base, (LLWU_FILT3_FILTSEL_MASK | LLWU_FILT3_FILTF_MASK), LLWU_FILT3_FILTSEL(value)))
#define LLWU_BWR_FILT3_FILTSEL(base, value) (BME_BFI8(&LLWU_FILT3_REG(base), ((uint8_t)(value) << LLWU_FILT3_FILTSEL_SHIFT), LLWU_FILT3_FILTSEL_SHIFT, LLWU_FILT3_FILTSEL_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_FILT3, field FILTE[6:5] (RW)
 *
 * Controls the digital filter options for the external pin detect.
 *
 * Values:
 * - 0b00 - Filter disabled
 * - 0b01 - Filter posedge detect enabled
 * - 0b10 - Filter negedge detect enabled
 * - 0b11 - Filter any edge detect enabled
 */
/*@{*/
/*! @brief Read current value of the LLWU_FILT3_FILTE field. */
#define LLWU_RD_FILT3_FILTE(base) ((LLWU_FILT3_REG(base) & LLWU_FILT3_FILTE_MASK) >> LLWU_FILT3_FILTE_SHIFT)
#define LLWU_BRD_FILT3_FILTE(base) (BME_UBFX8(&LLWU_FILT3_REG(base), LLWU_FILT3_FILTE_SHIFT, LLWU_FILT3_FILTE_WIDTH))

/*! @brief Set the FILTE field to a new value. */
#define LLWU_WR_FILT3_FILTE(base, value) (LLWU_RMW_FILT3(base, (LLWU_FILT3_FILTE_MASK | LLWU_FILT3_FILTF_MASK), LLWU_FILT3_FILTE(value)))
#define LLWU_BWR_FILT3_FILTE(base, value) (BME_BFI8(&LLWU_FILT3_REG(base), ((uint8_t)(value) << LLWU_FILT3_FILTE_SHIFT), LLWU_FILT3_FILTE_SHIFT, LLWU_FILT3_FILTE_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_FILT3, field FILTF[7] (W1C)
 *
 * Indicates that the filtered external wakeup pin, selected by FILTSEL, was a
 * source of exiting a low-leakage power mode. To clear the flag write a one to
 * FILTF.
 *
 * Values:
 * - 0b0 - Pin Filter 3 was not a wakeup source
 * - 0b1 - Pin Filter 3 was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_FILT3_FILTF field. */
#define LLWU_RD_FILT3_FILTF(base) ((LLWU_FILT3_REG(base) & LLWU_FILT3_FILTF_MASK) >> LLWU_FILT3_FILTF_SHIFT)
#define LLWU_BRD_FILT3_FILTF(base) (BME_UBFX8(&LLWU_FILT3_REG(base), LLWU_FILT3_FILTF_SHIFT, LLWU_FILT3_FILTF_WIDTH))

/*! @brief Set the FILTF field to a new value. */
#define LLWU_WR_FILT3_FILTF(base, value) (LLWU_RMW_FILT3(base, LLWU_FILT3_FILTF_MASK, LLWU_FILT3_FILTF(value)))
#define LLWU_BWR_FILT3_FILTF(base, value) (BME_BFI8(&LLWU_FILT3_REG(base), ((uint8_t)(value) << LLWU_FILT3_FILTF_SHIFT), LLWU_FILT3_FILTF_SHIFT, LLWU_FILT3_FILTF_WIDTH))
/*@}*/

/*******************************************************************************
 * LLWU_FILT4 - LLWU Pin Filter 4 register
 ******************************************************************************/

/*!
 * @brief LLWU_FILT4 - LLWU Pin Filter 4 register (RW)
 *
 * Reset value: 0x00U
 *
 * LLWU_FILT4 is a control and status register that is used to enable/disable
 * the digital filter 4 features for an external pin. This register is reset on
 * Chip Reset not VLLS and by reset types that trigger Chip Reset not VLLS. It is
 * unaffected by reset types that do not trigger Chip Reset not VLLS. See the
 * IntroductionInformation found here describes the registers of the Reset Control
 * Module (RCM). The RCM implements many of the reset functions for the chip. See
 * the chip's reset chapter for more information. details for more information.
 */
/*!
 * @name Constants and macros for entire LLWU_FILT4 register
 */
/*@{*/
#define LLWU_RD_FILT4(base)      (LLWU_FILT4_REG(base))
#define LLWU_WR_FILT4(base, value) (LLWU_FILT4_REG(base) = (value))
#define LLWU_RMW_FILT4(base, mask, value) (LLWU_WR_FILT4(base, (LLWU_RD_FILT4(base) & ~(mask)) | (value)))
#define LLWU_SET_FILT4(base, value) (BME_OR8(&LLWU_FILT4_REG(base), (uint8_t)(value)))
#define LLWU_CLR_FILT4(base, value) (BME_AND8(&LLWU_FILT4_REG(base), (uint8_t)(~(value))))
#define LLWU_TOG_FILT4(base, value) (BME_XOR8(&LLWU_FILT4_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LLWU_FILT4 bitfields
 */

/*!
 * @name Register LLWU_FILT4, field FILTSEL[4:0] (RW)
 *
 * Selects 1 of the wakeup pins to be muxed into the filter.
 *
 * Values:
 * - 0b00000 - Select LLWU_P0 for filter
 * - 0b11111 - Select LLWU_P31 for filter
 */
/*@{*/
/*! @brief Read current value of the LLWU_FILT4_FILTSEL field. */
#define LLWU_RD_FILT4_FILTSEL(base) ((LLWU_FILT4_REG(base) & LLWU_FILT4_FILTSEL_MASK) >> LLWU_FILT4_FILTSEL_SHIFT)
#define LLWU_BRD_FILT4_FILTSEL(base) (BME_UBFX8(&LLWU_FILT4_REG(base), LLWU_FILT4_FILTSEL_SHIFT, LLWU_FILT4_FILTSEL_WIDTH))

/*! @brief Set the FILTSEL field to a new value. */
#define LLWU_WR_FILT4_FILTSEL(base, value) (LLWU_RMW_FILT4(base, (LLWU_FILT4_FILTSEL_MASK | LLWU_FILT4_FILTF_MASK), LLWU_FILT4_FILTSEL(value)))
#define LLWU_BWR_FILT4_FILTSEL(base, value) (BME_BFI8(&LLWU_FILT4_REG(base), ((uint8_t)(value) << LLWU_FILT4_FILTSEL_SHIFT), LLWU_FILT4_FILTSEL_SHIFT, LLWU_FILT4_FILTSEL_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_FILT4, field FILTE[6:5] (RW)
 *
 * Controls the digital filter options for the external pin detect.
 *
 * Values:
 * - 0b00 - Filter disabled
 * - 0b01 - Filter posedge detect enabled
 * - 0b10 - Filter negedge detect enabled
 * - 0b11 - Filter any edge detect enabled
 */
/*@{*/
/*! @brief Read current value of the LLWU_FILT4_FILTE field. */
#define LLWU_RD_FILT4_FILTE(base) ((LLWU_FILT4_REG(base) & LLWU_FILT4_FILTE_MASK) >> LLWU_FILT4_FILTE_SHIFT)
#define LLWU_BRD_FILT4_FILTE(base) (BME_UBFX8(&LLWU_FILT4_REG(base), LLWU_FILT4_FILTE_SHIFT, LLWU_FILT4_FILTE_WIDTH))

/*! @brief Set the FILTE field to a new value. */
#define LLWU_WR_FILT4_FILTE(base, value) (LLWU_RMW_FILT4(base, (LLWU_FILT4_FILTE_MASK | LLWU_FILT4_FILTF_MASK), LLWU_FILT4_FILTE(value)))
#define LLWU_BWR_FILT4_FILTE(base, value) (BME_BFI8(&LLWU_FILT4_REG(base), ((uint8_t)(value) << LLWU_FILT4_FILTE_SHIFT), LLWU_FILT4_FILTE_SHIFT, LLWU_FILT4_FILTE_WIDTH))
/*@}*/

/*!
 * @name Register LLWU_FILT4, field FILTF[7] (W1C)
 *
 * Indicates that the filtered external wakeup pin, selected by FILTSEL, was a
 * source of exiting a low-leakage power mode. To clear the flag write a one to
 * FILTF.
 *
 * Values:
 * - 0b0 - Pin Filter 4 was not a wakeup source
 * - 0b1 - Pin Filter 4 was a wakeup source
 */
/*@{*/
/*! @brief Read current value of the LLWU_FILT4_FILTF field. */
#define LLWU_RD_FILT4_FILTF(base) ((LLWU_FILT4_REG(base) & LLWU_FILT4_FILTF_MASK) >> LLWU_FILT4_FILTF_SHIFT)
#define LLWU_BRD_FILT4_FILTF(base) (BME_UBFX8(&LLWU_FILT4_REG(base), LLWU_FILT4_FILTF_SHIFT, LLWU_FILT4_FILTF_WIDTH))

/*! @brief Set the FILTF field to a new value. */
#define LLWU_WR_FILT4_FILTF(base, value) (LLWU_RMW_FILT4(base, LLWU_FILT4_FILTF_MASK, LLWU_FILT4_FILTF(value)))
#define LLWU_BWR_FILT4_FILTF(base, value) (BME_BFI8(&LLWU_FILT4_REG(base), ((uint8_t)(value) << LLWU_FILT4_FILTF_SHIFT), LLWU_FILT4_FILTF_SHIFT, LLWU_FILT4_FILTF_WIDTH))
/*@}*/

/*
 * MK82F25615 LMEM
 *
 * Local Memory Controller
 *
 * Registers defined in this header file:
 * - LMEM_PCCCR - Cache control register
 * - LMEM_PCCLCR - Cache line control register
 * - LMEM_PCCSAR - Cache search address register
 * - LMEM_PCCCVR - Cache read/write value register
 * - LMEM_PCCRMR - Cache regions mode register
 * - LMEM_PSCCR - Cache control register
 * - LMEM_PSCLCR - Cache line control register
 * - LMEM_PSCSAR - Cache search address register
 * - LMEM_PSCCVR - Cache read/write value register
 * - LMEM_PSCRMR - Cache regions mode register
 */

#define LMEM_INSTANCE_COUNT (1U) /*!< Number of instances of the LMEM module. */
#define LMEM_IDX (0U) /*!< Instance number for LMEM. */

/*******************************************************************************
 * LMEM_PCCCR - Cache control register
 ******************************************************************************/

/*!
 * @brief LMEM_PCCCR - Cache control register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire LMEM_PCCCR register
 */
/*@{*/
#define LMEM_RD_PCCCR(base)      (LMEM_PCCCR_REG(base))
#define LMEM_WR_PCCCR(base, value) (LMEM_PCCCR_REG(base) = (value))
#define LMEM_RMW_PCCCR(base, mask, value) (LMEM_WR_PCCCR(base, (LMEM_RD_PCCCR(base) & ~(mask)) | (value)))
#define LMEM_SET_PCCCR(base, value) (LMEM_WR_PCCCR(base, LMEM_RD_PCCCR(base) |  (value)))
#define LMEM_CLR_PCCCR(base, value) (LMEM_WR_PCCCR(base, LMEM_RD_PCCCR(base) & ~(value)))
#define LMEM_TOG_PCCCR(base, value) (LMEM_WR_PCCCR(base, LMEM_RD_PCCCR(base) ^  (value)))
/*@}*/

/*
 * Constants & macros for individual LMEM_PCCCR bitfields
 */

/*!
 * @name Register LMEM_PCCCR, field ENCACHE[0] (RW)
 *
 * Values:
 * - 0b0 - Cache disabled
 * - 0b1 - Cache enabled
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCCR_ENCACHE field. */
#define LMEM_RD_PCCCR_ENCACHE(base) ((LMEM_PCCCR_REG(base) & LMEM_PCCCR_ENCACHE_MASK) >> LMEM_PCCCR_ENCACHE_SHIFT)
#define LMEM_BRD_PCCCR_ENCACHE(base) (LMEM_RD_PCCCR_ENCACHE(base))

/*! @brief Set the ENCACHE field to a new value. */
#define LMEM_WR_PCCCR_ENCACHE(base, value) (LMEM_RMW_PCCCR(base, LMEM_PCCCR_ENCACHE_MASK, LMEM_PCCCR_ENCACHE(value)))
#define LMEM_BWR_PCCCR_ENCACHE(base, value) (LMEM_WR_PCCCR_ENCACHE(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCCR, field ENWRBUF[1] (RW)
 *
 * Values:
 * - 0b0 - Write buffer disabled
 * - 0b1 - Write buffer enabled
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCCR_ENWRBUF field. */
#define LMEM_RD_PCCCR_ENWRBUF(base) ((LMEM_PCCCR_REG(base) & LMEM_PCCCR_ENWRBUF_MASK) >> LMEM_PCCCR_ENWRBUF_SHIFT)
#define LMEM_BRD_PCCCR_ENWRBUF(base) (LMEM_RD_PCCCR_ENWRBUF(base))

/*! @brief Set the ENWRBUF field to a new value. */
#define LMEM_WR_PCCCR_ENWRBUF(base, value) (LMEM_RMW_PCCCR(base, LMEM_PCCCR_ENWRBUF_MASK, LMEM_PCCCR_ENWRBUF(value)))
#define LMEM_BWR_PCCCR_ENWRBUF(base, value) (LMEM_WR_PCCCR_ENWRBUF(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCCR, field PCCR2[2] (RW)
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCCR_PCCR2 field. */
#define LMEM_RD_PCCCR_PCCR2(base) ((LMEM_PCCCR_REG(base) & LMEM_PCCCR_PCCR2_MASK) >> LMEM_PCCCR_PCCR2_SHIFT)
#define LMEM_BRD_PCCCR_PCCR2(base) (LMEM_RD_PCCCR_PCCR2(base))

/*! @brief Set the PCCR2 field to a new value. */
#define LMEM_WR_PCCCR_PCCR2(base, value) (LMEM_RMW_PCCCR(base, LMEM_PCCCR_PCCR2_MASK, LMEM_PCCCR_PCCR2(value)))
#define LMEM_BWR_PCCCR_PCCR2(base, value) (LMEM_WR_PCCCR_PCCR2(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCCR, field PCCR3[3] (RW)
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCCR_PCCR3 field. */
#define LMEM_RD_PCCCR_PCCR3(base) ((LMEM_PCCCR_REG(base) & LMEM_PCCCR_PCCR3_MASK) >> LMEM_PCCCR_PCCR3_SHIFT)
#define LMEM_BRD_PCCCR_PCCR3(base) (LMEM_RD_PCCCR_PCCR3(base))

/*! @brief Set the PCCR3 field to a new value. */
#define LMEM_WR_PCCCR_PCCR3(base, value) (LMEM_RMW_PCCCR(base, LMEM_PCCCR_PCCR3_MASK, LMEM_PCCCR_PCCR3(value)))
#define LMEM_BWR_PCCCR_PCCR3(base, value) (LMEM_WR_PCCCR_PCCR3(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCCR, field INVW0[24] (RW)
 *
 * If the PUSHW0 and INVW0 bits are set, then after setting the GO bit, push all
 * modified lines in way 0 and invalidate all lines in way 0 (clear way 0).
 *
 * Values:
 * - 0b0 - No operation
 * - 0b1 - When setting the GO bit, invalidate all lines in way 0.
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCCR_INVW0 field. */
#define LMEM_RD_PCCCR_INVW0(base) ((LMEM_PCCCR_REG(base) & LMEM_PCCCR_INVW0_MASK) >> LMEM_PCCCR_INVW0_SHIFT)
#define LMEM_BRD_PCCCR_INVW0(base) (LMEM_RD_PCCCR_INVW0(base))

/*! @brief Set the INVW0 field to a new value. */
#define LMEM_WR_PCCCR_INVW0(base, value) (LMEM_RMW_PCCCR(base, LMEM_PCCCR_INVW0_MASK, LMEM_PCCCR_INVW0(value)))
#define LMEM_BWR_PCCCR_INVW0(base, value) (LMEM_WR_PCCCR_INVW0(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCCR, field PUSHW0[25] (RW)
 *
 * Values:
 * - 0b0 - No operation
 * - 0b1 - When setting the GO bit, push all modified lines in way 0
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCCR_PUSHW0 field. */
#define LMEM_RD_PCCCR_PUSHW0(base) ((LMEM_PCCCR_REG(base) & LMEM_PCCCR_PUSHW0_MASK) >> LMEM_PCCCR_PUSHW0_SHIFT)
#define LMEM_BRD_PCCCR_PUSHW0(base) (LMEM_RD_PCCCR_PUSHW0(base))

/*! @brief Set the PUSHW0 field to a new value. */
#define LMEM_WR_PCCCR_PUSHW0(base, value) (LMEM_RMW_PCCCR(base, LMEM_PCCCR_PUSHW0_MASK, LMEM_PCCCR_PUSHW0(value)))
#define LMEM_BWR_PCCCR_PUSHW0(base, value) (LMEM_WR_PCCCR_PUSHW0(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCCR, field INVW1[26] (RW)
 *
 * If the PUSHW1 and INVW1 bits are set, then after setting the GO bit, push all
 * modified lines in way 1 and invalidate all lines in way 1 (clear way 1).
 *
 * Values:
 * - 0b0 - No operation
 * - 0b1 - When setting the GO bit, invalidate all lines in way 1
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCCR_INVW1 field. */
#define LMEM_RD_PCCCR_INVW1(base) ((LMEM_PCCCR_REG(base) & LMEM_PCCCR_INVW1_MASK) >> LMEM_PCCCR_INVW1_SHIFT)
#define LMEM_BRD_PCCCR_INVW1(base) (LMEM_RD_PCCCR_INVW1(base))

/*! @brief Set the INVW1 field to a new value. */
#define LMEM_WR_PCCCR_INVW1(base, value) (LMEM_RMW_PCCCR(base, LMEM_PCCCR_INVW1_MASK, LMEM_PCCCR_INVW1(value)))
#define LMEM_BWR_PCCCR_INVW1(base, value) (LMEM_WR_PCCCR_INVW1(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCCR, field PUSHW1[27] (RW)
 *
 * Values:
 * - 0b0 - No operation
 * - 0b1 - When setting the GO bit, push all modified lines in way 1
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCCR_PUSHW1 field. */
#define LMEM_RD_PCCCR_PUSHW1(base) ((LMEM_PCCCR_REG(base) & LMEM_PCCCR_PUSHW1_MASK) >> LMEM_PCCCR_PUSHW1_SHIFT)
#define LMEM_BRD_PCCCR_PUSHW1(base) (LMEM_RD_PCCCR_PUSHW1(base))

/*! @brief Set the PUSHW1 field to a new value. */
#define LMEM_WR_PCCCR_PUSHW1(base, value) (LMEM_RMW_PCCCR(base, LMEM_PCCCR_PUSHW1_MASK, LMEM_PCCCR_PUSHW1(value)))
#define LMEM_BWR_PCCCR_PUSHW1(base, value) (LMEM_WR_PCCCR_PUSHW1(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCCR, field GO[31] (RW)
 *
 * Setting this bit initiates the cache command indicated by bits 27-24. Reading
 * this bit indicates if a command is active This bit stays set until the
 * command completes. Writing zero has no effect.
 *
 * Values:
 * - 0b0 - Write: no effect. Read: no cache command active.
 * - 0b1 - Write: initiate command indicated by bits 27-24. Read: cache command
 *     active.
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCCR_GO field. */
#define LMEM_RD_PCCCR_GO(base) ((LMEM_PCCCR_REG(base) & LMEM_PCCCR_GO_MASK) >> LMEM_PCCCR_GO_SHIFT)
#define LMEM_BRD_PCCCR_GO(base) (LMEM_RD_PCCCR_GO(base))

/*! @brief Set the GO field to a new value. */
#define LMEM_WR_PCCCR_GO(base, value) (LMEM_RMW_PCCCR(base, LMEM_PCCCR_GO_MASK, LMEM_PCCCR_GO(value)))
#define LMEM_BWR_PCCCR_GO(base, value) (LMEM_WR_PCCCR_GO(base, value))
/*@}*/

/*******************************************************************************
 * LMEM_PCCLCR - Cache line control register
 ******************************************************************************/

/*!
 * @brief LMEM_PCCLCR - Cache line control register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register defines specific line-sized cache operations to be performed
 * using a specific cache line address or a physical address. If a physical address
 * is specified, both ways of the cache are searched, and the command is only
 * performed on the way which hits.
 */
/*!
 * @name Constants and macros for entire LMEM_PCCLCR register
 */
/*@{*/
#define LMEM_RD_PCCLCR(base)     (LMEM_PCCLCR_REG(base))
#define LMEM_WR_PCCLCR(base, value) (LMEM_PCCLCR_REG(base) = (value))
#define LMEM_RMW_PCCLCR(base, mask, value) (LMEM_WR_PCCLCR(base, (LMEM_RD_PCCLCR(base) & ~(mask)) | (value)))
#define LMEM_SET_PCCLCR(base, value) (LMEM_WR_PCCLCR(base, LMEM_RD_PCCLCR(base) |  (value)))
#define LMEM_CLR_PCCLCR(base, value) (LMEM_WR_PCCLCR(base, LMEM_RD_PCCLCR(base) & ~(value)))
#define LMEM_TOG_PCCLCR(base, value) (LMEM_WR_PCCLCR(base, LMEM_RD_PCCLCR(base) ^  (value)))
/*@}*/

/*
 * Constants & macros for individual LMEM_PCCLCR bitfields
 */

/*!
 * @name Register LMEM_PCCLCR, field LGO[0] (RW)
 *
 * Setting this bit initiates the cache line command indicated by bits 27-24.
 * Reading this bit indicates if a line command is active This bit stays set until
 * the command completes. Writing zero has no effect. This bit is shared with
 * CSAR[LGO]
 *
 * Values:
 * - 0b0 - Write: no effect. Read: no line command active.
 * - 0b1 - Write: initiate line command indicated by bits 27-24. Read: line
 *     command active.
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCLCR_LGO field. */
#define LMEM_RD_PCCLCR_LGO(base) ((LMEM_PCCLCR_REG(base) & LMEM_PCCLCR_LGO_MASK) >> LMEM_PCCLCR_LGO_SHIFT)
#define LMEM_BRD_PCCLCR_LGO(base) (LMEM_RD_PCCLCR_LGO(base))

/*! @brief Set the LGO field to a new value. */
#define LMEM_WR_PCCLCR_LGO(base, value) (LMEM_RMW_PCCLCR(base, LMEM_PCCLCR_LGO_MASK, LMEM_PCCLCR_LGO(value)))
#define LMEM_BWR_PCCLCR_LGO(base, value) (LMEM_WR_PCCLCR_LGO(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCLCR, field CACHEADDR[11:2] (RW)
 *
 * CLCR[11:4] bits are used to access the tag arrays CLCR[11:2] bits are used to
 * access the data arrays
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCLCR_CACHEADDR field. */
#define LMEM_RD_PCCLCR_CACHEADDR(base) ((LMEM_PCCLCR_REG(base) & LMEM_PCCLCR_CACHEADDR_MASK) >> LMEM_PCCLCR_CACHEADDR_SHIFT)
#define LMEM_BRD_PCCLCR_CACHEADDR(base) (LMEM_RD_PCCLCR_CACHEADDR(base))

/*! @brief Set the CACHEADDR field to a new value. */
#define LMEM_WR_PCCLCR_CACHEADDR(base, value) (LMEM_RMW_PCCLCR(base, LMEM_PCCLCR_CACHEADDR_MASK, LMEM_PCCLCR_CACHEADDR(value)))
#define LMEM_BWR_PCCLCR_CACHEADDR(base, value) (LMEM_WR_PCCLCR_CACHEADDR(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCLCR, field WSEL[14] (RW)
 *
 * Selects the way for line commands.
 *
 * Values:
 * - 0b0 - Way 0
 * - 0b1 - Way 1
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCLCR_WSEL field. */
#define LMEM_RD_PCCLCR_WSEL(base) ((LMEM_PCCLCR_REG(base) & LMEM_PCCLCR_WSEL_MASK) >> LMEM_PCCLCR_WSEL_SHIFT)
#define LMEM_BRD_PCCLCR_WSEL(base) (LMEM_RD_PCCLCR_WSEL(base))

/*! @brief Set the WSEL field to a new value. */
#define LMEM_WR_PCCLCR_WSEL(base, value) (LMEM_RMW_PCCLCR(base, LMEM_PCCLCR_WSEL_MASK, LMEM_PCCLCR_WSEL(value)))
#define LMEM_BWR_PCCLCR_WSEL(base, value) (LMEM_WR_PCCLCR_WSEL(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCLCR, field TDSEL[16] (RW)
 *
 * Selects tag or data for search and read or write commands.
 *
 * Values:
 * - 0b0 - Data
 * - 0b1 - Tag
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCLCR_TDSEL field. */
#define LMEM_RD_PCCLCR_TDSEL(base) ((LMEM_PCCLCR_REG(base) & LMEM_PCCLCR_TDSEL_MASK) >> LMEM_PCCLCR_TDSEL_SHIFT)
#define LMEM_BRD_PCCLCR_TDSEL(base) (LMEM_RD_PCCLCR_TDSEL(base))

/*! @brief Set the TDSEL field to a new value. */
#define LMEM_WR_PCCLCR_TDSEL(base, value) (LMEM_RMW_PCCLCR(base, LMEM_PCCLCR_TDSEL_MASK, LMEM_PCCLCR_TDSEL(value)))
#define LMEM_BWR_PCCLCR_TDSEL(base, value) (LMEM_WR_PCCLCR_TDSEL(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCLCR, field LCIVB[20] (RO)
 *
 * If command used cache address and way, then this bit shows the initial state
 * of the valid bit If command used physical address and a hit, then this bit
 * shows the initial state of the valid bit. If a miss, this bit reads zero.
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCLCR_LCIVB field. */
#define LMEM_RD_PCCLCR_LCIVB(base) ((LMEM_PCCLCR_REG(base) & LMEM_PCCLCR_LCIVB_MASK) >> LMEM_PCCLCR_LCIVB_SHIFT)
#define LMEM_BRD_PCCLCR_LCIVB(base) (LMEM_RD_PCCLCR_LCIVB(base))
/*@}*/

/*!
 * @name Register LMEM_PCCLCR, field LCIMB[21] (RO)
 *
 * If command used cache address and way, then this bit shows the initial state
 * of the modified bit If command used physical address and a hit, then this bit
 * shows the initial state of the modified bit. If a miss, this bit reads zero.
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCLCR_LCIMB field. */
#define LMEM_RD_PCCLCR_LCIMB(base) ((LMEM_PCCLCR_REG(base) & LMEM_PCCLCR_LCIMB_MASK) >> LMEM_PCCLCR_LCIMB_SHIFT)
#define LMEM_BRD_PCCLCR_LCIMB(base) (LMEM_RD_PCCLCR_LCIMB(base))
/*@}*/

/*!
 * @name Register LMEM_PCCLCR, field LCWAY[22] (RO)
 *
 * Indicates the way used by the line command.
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCLCR_LCWAY field. */
#define LMEM_RD_PCCLCR_LCWAY(base) ((LMEM_PCCLCR_REG(base) & LMEM_PCCLCR_LCWAY_MASK) >> LMEM_PCCLCR_LCWAY_SHIFT)
#define LMEM_BRD_PCCLCR_LCWAY(base) (LMEM_RD_PCCLCR_LCWAY(base))
/*@}*/

/*!
 * @name Register LMEM_PCCLCR, field LCMD[25:24] (RW)
 *
 * Values:
 * - 0b00 - Search and read or write
 * - 0b01 - Invalidate
 * - 0b10 - Push
 * - 0b11 - Clear
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCLCR_LCMD field. */
#define LMEM_RD_PCCLCR_LCMD(base) ((LMEM_PCCLCR_REG(base) & LMEM_PCCLCR_LCMD_MASK) >> LMEM_PCCLCR_LCMD_SHIFT)
#define LMEM_BRD_PCCLCR_LCMD(base) (LMEM_RD_PCCLCR_LCMD(base))

/*! @brief Set the LCMD field to a new value. */
#define LMEM_WR_PCCLCR_LCMD(base, value) (LMEM_RMW_PCCLCR(base, LMEM_PCCLCR_LCMD_MASK, LMEM_PCCLCR_LCMD(value)))
#define LMEM_BWR_PCCLCR_LCMD(base, value) (LMEM_WR_PCCLCR_LCMD(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCLCR, field LADSEL[26] (RW)
 *
 * When using the cache address, the way must also be specified in CLCR[WSEL].
 * When using the physical address, both ways are searched and the command is
 * performed only if a hit.
 *
 * Values:
 * - 0b0 - Cache address
 * - 0b1 - Physical address
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCLCR_LADSEL field. */
#define LMEM_RD_PCCLCR_LADSEL(base) ((LMEM_PCCLCR_REG(base) & LMEM_PCCLCR_LADSEL_MASK) >> LMEM_PCCLCR_LADSEL_SHIFT)
#define LMEM_BRD_PCCLCR_LADSEL(base) (LMEM_RD_PCCLCR_LADSEL(base))

/*! @brief Set the LADSEL field to a new value. */
#define LMEM_WR_PCCLCR_LADSEL(base, value) (LMEM_RMW_PCCLCR(base, LMEM_PCCLCR_LADSEL_MASK, LMEM_PCCLCR_LADSEL(value)))
#define LMEM_BWR_PCCLCR_LADSEL(base, value) (LMEM_WR_PCCLCR_LADSEL(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCLCR, field LACC[27] (RW)
 *
 * Values:
 * - 0b0 - Read
 * - 0b1 - Write
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCLCR_LACC field. */
#define LMEM_RD_PCCLCR_LACC(base) ((LMEM_PCCLCR_REG(base) & LMEM_PCCLCR_LACC_MASK) >> LMEM_PCCLCR_LACC_SHIFT)
#define LMEM_BRD_PCCLCR_LACC(base) (LMEM_RD_PCCLCR_LACC(base))

/*! @brief Set the LACC field to a new value. */
#define LMEM_WR_PCCLCR_LACC(base, value) (LMEM_RMW_PCCLCR(base, LMEM_PCCLCR_LACC_MASK, LMEM_PCCLCR_LACC(value)))
#define LMEM_BWR_PCCLCR_LACC(base, value) (LMEM_WR_PCCLCR_LACC(base, value))
/*@}*/

/*******************************************************************************
 * LMEM_PCCSAR - Cache search address register
 ******************************************************************************/

/*!
 * @brief LMEM_PCCSAR - Cache search address register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The CSAR register is used to define the explicit cache address or the
 * physical address for line-sized commands specified in the CLCR[LADSEL] bit.
 */
/*!
 * @name Constants and macros for entire LMEM_PCCSAR register
 */
/*@{*/
#define LMEM_RD_PCCSAR(base)     (LMEM_PCCSAR_REG(base))
#define LMEM_WR_PCCSAR(base, value) (LMEM_PCCSAR_REG(base) = (value))
#define LMEM_RMW_PCCSAR(base, mask, value) (LMEM_WR_PCCSAR(base, (LMEM_RD_PCCSAR(base) & ~(mask)) | (value)))
#define LMEM_SET_PCCSAR(base, value) (LMEM_WR_PCCSAR(base, LMEM_RD_PCCSAR(base) |  (value)))
#define LMEM_CLR_PCCSAR(base, value) (LMEM_WR_PCCSAR(base, LMEM_RD_PCCSAR(base) & ~(value)))
#define LMEM_TOG_PCCSAR(base, value) (LMEM_WR_PCCSAR(base, LMEM_RD_PCCSAR(base) ^  (value)))
/*@}*/

/*
 * Constants & macros for individual LMEM_PCCSAR bitfields
 */

/*!
 * @name Register LMEM_PCCSAR, field LGO[0] (RW)
 *
 * Setting this bit initiates the cache line command indicated by bits 27-24.
 * Reading this bit indicates if a line command is active This bit stays set until
 * the command completes. Writing zero has no effect. This bit is shared with
 * CLCR[LGO]
 *
 * Values:
 * - 0b0 - Write: no effect. Read: no line command active.
 * - 0b1 - Write: initiate line command indicated by bits CLCR[27:24]. Read:
 *     line command active.
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCSAR_LGO field. */
#define LMEM_RD_PCCSAR_LGO(base) ((LMEM_PCCSAR_REG(base) & LMEM_PCCSAR_LGO_MASK) >> LMEM_PCCSAR_LGO_SHIFT)
#define LMEM_BRD_PCCSAR_LGO(base) (LMEM_RD_PCCSAR_LGO(base))

/*! @brief Set the LGO field to a new value. */
#define LMEM_WR_PCCSAR_LGO(base, value) (LMEM_RMW_PCCSAR(base, LMEM_PCCSAR_LGO_MASK, LMEM_PCCSAR_LGO(value)))
#define LMEM_BWR_PCCSAR_LGO(base, value) (LMEM_WR_PCCSAR_LGO(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCSAR, field PHYADDR[31:2] (RW)
 *
 * PHYADDR represents bits [31:2] of the system address. CSAR[31:12] bits are
 * used for tag compare CSAR[11:4] bits are used to access the tag arrays
 * CSAR[11:2] bits are used to access the data arrays
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCSAR_PHYADDR field. */
#define LMEM_RD_PCCSAR_PHYADDR(base) ((LMEM_PCCSAR_REG(base) & LMEM_PCCSAR_PHYADDR_MASK) >> LMEM_PCCSAR_PHYADDR_SHIFT)
#define LMEM_BRD_PCCSAR_PHYADDR(base) (LMEM_RD_PCCSAR_PHYADDR(base))

/*! @brief Set the PHYADDR field to a new value. */
#define LMEM_WR_PCCSAR_PHYADDR(base, value) (LMEM_RMW_PCCSAR(base, LMEM_PCCSAR_PHYADDR_MASK, LMEM_PCCSAR_PHYADDR(value)))
#define LMEM_BWR_PCCSAR_PHYADDR(base, value) (LMEM_WR_PCCSAR_PHYADDR(base, value))
/*@}*/

/*******************************************************************************
 * LMEM_PCCCVR - Cache read/write value register
 ******************************************************************************/

/*!
 * @brief LMEM_PCCCVR - Cache read/write value register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The CCVR register is used to source write data or return read data for the
 * commands specified in the CLCR register.
 */
/*!
 * @name Constants and macros for entire LMEM_PCCCVR register
 */
/*@{*/
#define LMEM_RD_PCCCVR(base)     (LMEM_PCCCVR_REG(base))
#define LMEM_WR_PCCCVR(base, value) (LMEM_PCCCVR_REG(base) = (value))
#define LMEM_RMW_PCCCVR(base, mask, value) (LMEM_WR_PCCCVR(base, (LMEM_RD_PCCCVR(base) & ~(mask)) | (value)))
#define LMEM_SET_PCCCVR(base, value) (LMEM_WR_PCCCVR(base, LMEM_RD_PCCCVR(base) |  (value)))
#define LMEM_CLR_PCCCVR(base, value) (LMEM_WR_PCCCVR(base, LMEM_RD_PCCCVR(base) & ~(value)))
#define LMEM_TOG_PCCCVR(base, value) (LMEM_WR_PCCCVR(base, LMEM_RD_PCCCVR(base) ^  (value)))
/*@}*/

/*******************************************************************************
 * LMEM_PCCRMR - Cache regions mode register
 ******************************************************************************/

/*!
 * @brief LMEM_PCCRMR - Cache regions mode register (RW)
 *
 * Reset value: 0xAA0FA000U
 *
 * The CRMR register allows you to demote the cache mode of various subregions
 * within the device's memory map. Demoting the cache mode reduces the cache
 * function applied to a memory region from write-back to write-through to
 * non-cacheable. After a region is demoted, its cache mode can only be raised by a reset,
 * which returns it to its default state. To maintain cache coherency, changes to
 * the cache mode should be completed while the address space being changed is
 * not being accessed or the cache is disabled. Before a cache mode change,
 * complete a cache clear all command to push and invalidate any cache entries that may
 * have changed. The address/module assignment of the 16 subregions is
 * device-specific and are detailed in the Chip Configuration section. Some of the regions
 * may not be used (non-cacheable), and some regions may not be capable of
 * write-back.
 */
/*!
 * @name Constants and macros for entire LMEM_PCCRMR register
 */
/*@{*/
#define LMEM_RD_PCCRMR(base)     (LMEM_PCCRMR_REG(base))
#define LMEM_WR_PCCRMR(base, value) (LMEM_PCCRMR_REG(base) = (value))
#define LMEM_RMW_PCCRMR(base, mask, value) (LMEM_WR_PCCRMR(base, (LMEM_RD_PCCRMR(base) & ~(mask)) | (value)))
#define LMEM_SET_PCCRMR(base, value) (LMEM_WR_PCCRMR(base, LMEM_RD_PCCRMR(base) |  (value)))
#define LMEM_CLR_PCCRMR(base, value) (LMEM_WR_PCCRMR(base, LMEM_RD_PCCRMR(base) & ~(value)))
#define LMEM_TOG_PCCRMR(base, value) (LMEM_WR_PCCRMR(base, LMEM_RD_PCCRMR(base) ^  (value)))
/*@}*/

/*
 * Constants & macros for individual LMEM_PCCRMR bitfields
 */

/*!
 * @name Register LMEM_PCCRMR, field R15[1:0] (RW)
 *
 * Controls the cache mode for region 15
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCRMR_R15 field. */
#define LMEM_RD_PCCRMR_R15(base) ((LMEM_PCCRMR_REG(base) & LMEM_PCCRMR_R15_MASK) >> LMEM_PCCRMR_R15_SHIFT)
#define LMEM_BRD_PCCRMR_R15(base) (LMEM_RD_PCCRMR_R15(base))

/*! @brief Set the R15 field to a new value. */
#define LMEM_WR_PCCRMR_R15(base, value) (LMEM_RMW_PCCRMR(base, LMEM_PCCRMR_R15_MASK, LMEM_PCCRMR_R15(value)))
#define LMEM_BWR_PCCRMR_R15(base, value) (LMEM_WR_PCCRMR_R15(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCRMR, field R14[3:2] (RW)
 *
 * Controls the cache mode for region 14
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCRMR_R14 field. */
#define LMEM_RD_PCCRMR_R14(base) ((LMEM_PCCRMR_REG(base) & LMEM_PCCRMR_R14_MASK) >> LMEM_PCCRMR_R14_SHIFT)
#define LMEM_BRD_PCCRMR_R14(base) (LMEM_RD_PCCRMR_R14(base))

/*! @brief Set the R14 field to a new value. */
#define LMEM_WR_PCCRMR_R14(base, value) (LMEM_RMW_PCCRMR(base, LMEM_PCCRMR_R14_MASK, LMEM_PCCRMR_R14(value)))
#define LMEM_BWR_PCCRMR_R14(base, value) (LMEM_WR_PCCRMR_R14(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCRMR, field R13[5:4] (RW)
 *
 * Controls the cache mode for region 13
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCRMR_R13 field. */
#define LMEM_RD_PCCRMR_R13(base) ((LMEM_PCCRMR_REG(base) & LMEM_PCCRMR_R13_MASK) >> LMEM_PCCRMR_R13_SHIFT)
#define LMEM_BRD_PCCRMR_R13(base) (LMEM_RD_PCCRMR_R13(base))

/*! @brief Set the R13 field to a new value. */
#define LMEM_WR_PCCRMR_R13(base, value) (LMEM_RMW_PCCRMR(base, LMEM_PCCRMR_R13_MASK, LMEM_PCCRMR_R13(value)))
#define LMEM_BWR_PCCRMR_R13(base, value) (LMEM_WR_PCCRMR_R13(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCRMR, field R12[7:6] (RW)
 *
 * Controls the cache mode for region 12
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCRMR_R12 field. */
#define LMEM_RD_PCCRMR_R12(base) ((LMEM_PCCRMR_REG(base) & LMEM_PCCRMR_R12_MASK) >> LMEM_PCCRMR_R12_SHIFT)
#define LMEM_BRD_PCCRMR_R12(base) (LMEM_RD_PCCRMR_R12(base))

/*! @brief Set the R12 field to a new value. */
#define LMEM_WR_PCCRMR_R12(base, value) (LMEM_RMW_PCCRMR(base, LMEM_PCCRMR_R12_MASK, LMEM_PCCRMR_R12(value)))
#define LMEM_BWR_PCCRMR_R12(base, value) (LMEM_WR_PCCRMR_R12(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCRMR, field R11[9:8] (RW)
 *
 * Controls the cache mode for region 11
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCRMR_R11 field. */
#define LMEM_RD_PCCRMR_R11(base) ((LMEM_PCCRMR_REG(base) & LMEM_PCCRMR_R11_MASK) >> LMEM_PCCRMR_R11_SHIFT)
#define LMEM_BRD_PCCRMR_R11(base) (LMEM_RD_PCCRMR_R11(base))

/*! @brief Set the R11 field to a new value. */
#define LMEM_WR_PCCRMR_R11(base, value) (LMEM_RMW_PCCRMR(base, LMEM_PCCRMR_R11_MASK, LMEM_PCCRMR_R11(value)))
#define LMEM_BWR_PCCRMR_R11(base, value) (LMEM_WR_PCCRMR_R11(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCRMR, field R10[11:10] (RW)
 *
 * Controls the cache mode for region 10
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCRMR_R10 field. */
#define LMEM_RD_PCCRMR_R10(base) ((LMEM_PCCRMR_REG(base) & LMEM_PCCRMR_R10_MASK) >> LMEM_PCCRMR_R10_SHIFT)
#define LMEM_BRD_PCCRMR_R10(base) (LMEM_RD_PCCRMR_R10(base))

/*! @brief Set the R10 field to a new value. */
#define LMEM_WR_PCCRMR_R10(base, value) (LMEM_RMW_PCCRMR(base, LMEM_PCCRMR_R10_MASK, LMEM_PCCRMR_R10(value)))
#define LMEM_BWR_PCCRMR_R10(base, value) (LMEM_WR_PCCRMR_R10(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCRMR, field R9[13:12] (RW)
 *
 * Controls the cache mode for region 9
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCRMR_R9 field. */
#define LMEM_RD_PCCRMR_R9(base) ((LMEM_PCCRMR_REG(base) & LMEM_PCCRMR_R9_MASK) >> LMEM_PCCRMR_R9_SHIFT)
#define LMEM_BRD_PCCRMR_R9(base) (LMEM_RD_PCCRMR_R9(base))

/*! @brief Set the R9 field to a new value. */
#define LMEM_WR_PCCRMR_R9(base, value) (LMEM_RMW_PCCRMR(base, LMEM_PCCRMR_R9_MASK, LMEM_PCCRMR_R9(value)))
#define LMEM_BWR_PCCRMR_R9(base, value) (LMEM_WR_PCCRMR_R9(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCRMR, field R8[15:14] (RW)
 *
 * Controls the cache mode for region 8
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCRMR_R8 field. */
#define LMEM_RD_PCCRMR_R8(base) ((LMEM_PCCRMR_REG(base) & LMEM_PCCRMR_R8_MASK) >> LMEM_PCCRMR_R8_SHIFT)
#define LMEM_BRD_PCCRMR_R8(base) (LMEM_RD_PCCRMR_R8(base))

/*! @brief Set the R8 field to a new value. */
#define LMEM_WR_PCCRMR_R8(base, value) (LMEM_RMW_PCCRMR(base, LMEM_PCCRMR_R8_MASK, LMEM_PCCRMR_R8(value)))
#define LMEM_BWR_PCCRMR_R8(base, value) (LMEM_WR_PCCRMR_R8(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCRMR, field R7[17:16] (RW)
 *
 * Controls the cache mode for region 7
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCRMR_R7 field. */
#define LMEM_RD_PCCRMR_R7(base) ((LMEM_PCCRMR_REG(base) & LMEM_PCCRMR_R7_MASK) >> LMEM_PCCRMR_R7_SHIFT)
#define LMEM_BRD_PCCRMR_R7(base) (LMEM_RD_PCCRMR_R7(base))

/*! @brief Set the R7 field to a new value. */
#define LMEM_WR_PCCRMR_R7(base, value) (LMEM_RMW_PCCRMR(base, LMEM_PCCRMR_R7_MASK, LMEM_PCCRMR_R7(value)))
#define LMEM_BWR_PCCRMR_R7(base, value) (LMEM_WR_PCCRMR_R7(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCRMR, field R6[19:18] (RW)
 *
 * Controls the cache mode for region 6
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCRMR_R6 field. */
#define LMEM_RD_PCCRMR_R6(base) ((LMEM_PCCRMR_REG(base) & LMEM_PCCRMR_R6_MASK) >> LMEM_PCCRMR_R6_SHIFT)
#define LMEM_BRD_PCCRMR_R6(base) (LMEM_RD_PCCRMR_R6(base))

/*! @brief Set the R6 field to a new value. */
#define LMEM_WR_PCCRMR_R6(base, value) (LMEM_RMW_PCCRMR(base, LMEM_PCCRMR_R6_MASK, LMEM_PCCRMR_R6(value)))
#define LMEM_BWR_PCCRMR_R6(base, value) (LMEM_WR_PCCRMR_R6(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCRMR, field R5[21:20] (RW)
 *
 * Controls the cache mode for region 5
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCRMR_R5 field. */
#define LMEM_RD_PCCRMR_R5(base) ((LMEM_PCCRMR_REG(base) & LMEM_PCCRMR_R5_MASK) >> LMEM_PCCRMR_R5_SHIFT)
#define LMEM_BRD_PCCRMR_R5(base) (LMEM_RD_PCCRMR_R5(base))

/*! @brief Set the R5 field to a new value. */
#define LMEM_WR_PCCRMR_R5(base, value) (LMEM_RMW_PCCRMR(base, LMEM_PCCRMR_R5_MASK, LMEM_PCCRMR_R5(value)))
#define LMEM_BWR_PCCRMR_R5(base, value) (LMEM_WR_PCCRMR_R5(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCRMR, field R4[23:22] (RW)
 *
 * Controls the cache mode for region 4
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCRMR_R4 field. */
#define LMEM_RD_PCCRMR_R4(base) ((LMEM_PCCRMR_REG(base) & LMEM_PCCRMR_R4_MASK) >> LMEM_PCCRMR_R4_SHIFT)
#define LMEM_BRD_PCCRMR_R4(base) (LMEM_RD_PCCRMR_R4(base))

/*! @brief Set the R4 field to a new value. */
#define LMEM_WR_PCCRMR_R4(base, value) (LMEM_RMW_PCCRMR(base, LMEM_PCCRMR_R4_MASK, LMEM_PCCRMR_R4(value)))
#define LMEM_BWR_PCCRMR_R4(base, value) (LMEM_WR_PCCRMR_R4(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCRMR, field R3[25:24] (RW)
 *
 * Controls the cache mode for region 3
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCRMR_R3 field. */
#define LMEM_RD_PCCRMR_R3(base) ((LMEM_PCCRMR_REG(base) & LMEM_PCCRMR_R3_MASK) >> LMEM_PCCRMR_R3_SHIFT)
#define LMEM_BRD_PCCRMR_R3(base) (LMEM_RD_PCCRMR_R3(base))

/*! @brief Set the R3 field to a new value. */
#define LMEM_WR_PCCRMR_R3(base, value) (LMEM_RMW_PCCRMR(base, LMEM_PCCRMR_R3_MASK, LMEM_PCCRMR_R3(value)))
#define LMEM_BWR_PCCRMR_R3(base, value) (LMEM_WR_PCCRMR_R3(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCRMR, field R2[27:26] (RW)
 *
 * Controls the cache mode for region 2
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCRMR_R2 field. */
#define LMEM_RD_PCCRMR_R2(base) ((LMEM_PCCRMR_REG(base) & LMEM_PCCRMR_R2_MASK) >> LMEM_PCCRMR_R2_SHIFT)
#define LMEM_BRD_PCCRMR_R2(base) (LMEM_RD_PCCRMR_R2(base))

/*! @brief Set the R2 field to a new value. */
#define LMEM_WR_PCCRMR_R2(base, value) (LMEM_RMW_PCCRMR(base, LMEM_PCCRMR_R2_MASK, LMEM_PCCRMR_R2(value)))
#define LMEM_BWR_PCCRMR_R2(base, value) (LMEM_WR_PCCRMR_R2(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCRMR, field R1[29:28] (RW)
 *
 * Controls the cache mode for region 1
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCRMR_R1 field. */
#define LMEM_RD_PCCRMR_R1(base) ((LMEM_PCCRMR_REG(base) & LMEM_PCCRMR_R1_MASK) >> LMEM_PCCRMR_R1_SHIFT)
#define LMEM_BRD_PCCRMR_R1(base) (LMEM_RD_PCCRMR_R1(base))

/*! @brief Set the R1 field to a new value. */
#define LMEM_WR_PCCRMR_R1(base, value) (LMEM_RMW_PCCRMR(base, LMEM_PCCRMR_R1_MASK, LMEM_PCCRMR_R1(value)))
#define LMEM_BWR_PCCRMR_R1(base, value) (LMEM_WR_PCCRMR_R1(base, value))
/*@}*/

/*!
 * @name Register LMEM_PCCRMR, field R0[31:30] (RW)
 *
 * Controls the cache mode for region 0
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PCCRMR_R0 field. */
#define LMEM_RD_PCCRMR_R0(base) ((LMEM_PCCRMR_REG(base) & LMEM_PCCRMR_R0_MASK) >> LMEM_PCCRMR_R0_SHIFT)
#define LMEM_BRD_PCCRMR_R0(base) (LMEM_RD_PCCRMR_R0(base))

/*! @brief Set the R0 field to a new value. */
#define LMEM_WR_PCCRMR_R0(base, value) (LMEM_RMW_PCCRMR(base, LMEM_PCCRMR_R0_MASK, LMEM_PCCRMR_R0(value)))
#define LMEM_BWR_PCCRMR_R0(base, value) (LMEM_WR_PCCRMR_R0(base, value))
/*@}*/

/*******************************************************************************
 * LMEM_PSCCR - Cache control register
 ******************************************************************************/

/*!
 * @brief LMEM_PSCCR - Cache control register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire LMEM_PSCCR register
 */
/*@{*/
#define LMEM_RD_PSCCR(base)      (LMEM_PSCCR_REG(base))
#define LMEM_WR_PSCCR(base, value) (LMEM_PSCCR_REG(base) = (value))
#define LMEM_RMW_PSCCR(base, mask, value) (LMEM_WR_PSCCR(base, (LMEM_RD_PSCCR(base) & ~(mask)) | (value)))
#define LMEM_SET_PSCCR(base, value) (LMEM_WR_PSCCR(base, LMEM_RD_PSCCR(base) |  (value)))
#define LMEM_CLR_PSCCR(base, value) (LMEM_WR_PSCCR(base, LMEM_RD_PSCCR(base) & ~(value)))
#define LMEM_TOG_PSCCR(base, value) (LMEM_WR_PSCCR(base, LMEM_RD_PSCCR(base) ^  (value)))
/*@}*/

/*
 * Constants & macros for individual LMEM_PSCCR bitfields
 */

/*!
 * @name Register LMEM_PSCCR, field ENCACHE[0] (RW)
 *
 * Values:
 * - 0b0 - Cache disabled
 * - 0b1 - Cache enabled
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCCR_ENCACHE field. */
#define LMEM_RD_PSCCR_ENCACHE(base) ((LMEM_PSCCR_REG(base) & LMEM_PSCCR_ENCACHE_MASK) >> LMEM_PSCCR_ENCACHE_SHIFT)
#define LMEM_BRD_PSCCR_ENCACHE(base) (LMEM_RD_PSCCR_ENCACHE(base))

/*! @brief Set the ENCACHE field to a new value. */
#define LMEM_WR_PSCCR_ENCACHE(base, value) (LMEM_RMW_PSCCR(base, LMEM_PSCCR_ENCACHE_MASK, LMEM_PSCCR_ENCACHE(value)))
#define LMEM_BWR_PSCCR_ENCACHE(base, value) (LMEM_WR_PSCCR_ENCACHE(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCCR, field ENWRBUF[1] (RW)
 *
 * Values:
 * - 0b0 - Write buffer disabled
 * - 0b1 - Write buffer enabled
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCCR_ENWRBUF field. */
#define LMEM_RD_PSCCR_ENWRBUF(base) ((LMEM_PSCCR_REG(base) & LMEM_PSCCR_ENWRBUF_MASK) >> LMEM_PSCCR_ENWRBUF_SHIFT)
#define LMEM_BRD_PSCCR_ENWRBUF(base) (LMEM_RD_PSCCR_ENWRBUF(base))

/*! @brief Set the ENWRBUF field to a new value. */
#define LMEM_WR_PSCCR_ENWRBUF(base, value) (LMEM_RMW_PSCCR(base, LMEM_PSCCR_ENWRBUF_MASK, LMEM_PSCCR_ENWRBUF(value)))
#define LMEM_BWR_PSCCR_ENWRBUF(base, value) (LMEM_WR_PSCCR_ENWRBUF(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCCR, field INVW0[24] (RW)
 *
 * If the PUSHW0 and INVW0 bits are set, then after setting the GO bit, push all
 * modified lines in way 0 and invalidate all lines in way 0 (clear way 0).
 *
 * Values:
 * - 0b0 - No operation
 * - 0b1 - When setting the GO bit, invalidate all lines in way 0.
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCCR_INVW0 field. */
#define LMEM_RD_PSCCR_INVW0(base) ((LMEM_PSCCR_REG(base) & LMEM_PSCCR_INVW0_MASK) >> LMEM_PSCCR_INVW0_SHIFT)
#define LMEM_BRD_PSCCR_INVW0(base) (LMEM_RD_PSCCR_INVW0(base))

/*! @brief Set the INVW0 field to a new value. */
#define LMEM_WR_PSCCR_INVW0(base, value) (LMEM_RMW_PSCCR(base, LMEM_PSCCR_INVW0_MASK, LMEM_PSCCR_INVW0(value)))
#define LMEM_BWR_PSCCR_INVW0(base, value) (LMEM_WR_PSCCR_INVW0(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCCR, field PUSHW0[25] (RW)
 *
 * Values:
 * - 0b0 - No operation
 * - 0b1 - When setting the GO bit, push all modified lines in way 0
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCCR_PUSHW0 field. */
#define LMEM_RD_PSCCR_PUSHW0(base) ((LMEM_PSCCR_REG(base) & LMEM_PSCCR_PUSHW0_MASK) >> LMEM_PSCCR_PUSHW0_SHIFT)
#define LMEM_BRD_PSCCR_PUSHW0(base) (LMEM_RD_PSCCR_PUSHW0(base))

/*! @brief Set the PUSHW0 field to a new value. */
#define LMEM_WR_PSCCR_PUSHW0(base, value) (LMEM_RMW_PSCCR(base, LMEM_PSCCR_PUSHW0_MASK, LMEM_PSCCR_PUSHW0(value)))
#define LMEM_BWR_PSCCR_PUSHW0(base, value) (LMEM_WR_PSCCR_PUSHW0(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCCR, field INVW1[26] (RW)
 *
 * If the PUSHW1 and INVW1 bits are set, then after setting the GO bit, push all
 * modified lines in way 1 and invalidate all lines in way 1 (clear way 1).
 *
 * Values:
 * - 0b0 - No operation
 * - 0b1 - When setting the GO bit, invalidate all lines in way 1
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCCR_INVW1 field. */
#define LMEM_RD_PSCCR_INVW1(base) ((LMEM_PSCCR_REG(base) & LMEM_PSCCR_INVW1_MASK) >> LMEM_PSCCR_INVW1_SHIFT)
#define LMEM_BRD_PSCCR_INVW1(base) (LMEM_RD_PSCCR_INVW1(base))

/*! @brief Set the INVW1 field to a new value. */
#define LMEM_WR_PSCCR_INVW1(base, value) (LMEM_RMW_PSCCR(base, LMEM_PSCCR_INVW1_MASK, LMEM_PSCCR_INVW1(value)))
#define LMEM_BWR_PSCCR_INVW1(base, value) (LMEM_WR_PSCCR_INVW1(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCCR, field PUSHW1[27] (RW)
 *
 * Values:
 * - 0b0 - No operation
 * - 0b1 - When setting the GO bit, push all modified lines in way 1
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCCR_PUSHW1 field. */
#define LMEM_RD_PSCCR_PUSHW1(base) ((LMEM_PSCCR_REG(base) & LMEM_PSCCR_PUSHW1_MASK) >> LMEM_PSCCR_PUSHW1_SHIFT)
#define LMEM_BRD_PSCCR_PUSHW1(base) (LMEM_RD_PSCCR_PUSHW1(base))

/*! @brief Set the PUSHW1 field to a new value. */
#define LMEM_WR_PSCCR_PUSHW1(base, value) (LMEM_RMW_PSCCR(base, LMEM_PSCCR_PUSHW1_MASK, LMEM_PSCCR_PUSHW1(value)))
#define LMEM_BWR_PSCCR_PUSHW1(base, value) (LMEM_WR_PSCCR_PUSHW1(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCCR, field GO[31] (RW)
 *
 * Setting this bit initiates the cache command indicated by bits 27-24. Reading
 * this bit indicates if a command is active This bit stays set until the
 * command completes. Writing zero has no effect.
 *
 * Values:
 * - 0b0 - Write: no effect. Read: no cache command active.
 * - 0b1 - Write: initiate command indicated by bits 27-24. Read: cache command
 *     active.
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCCR_GO field. */
#define LMEM_RD_PSCCR_GO(base) ((LMEM_PSCCR_REG(base) & LMEM_PSCCR_GO_MASK) >> LMEM_PSCCR_GO_SHIFT)
#define LMEM_BRD_PSCCR_GO(base) (LMEM_RD_PSCCR_GO(base))

/*! @brief Set the GO field to a new value. */
#define LMEM_WR_PSCCR_GO(base, value) (LMEM_RMW_PSCCR(base, LMEM_PSCCR_GO_MASK, LMEM_PSCCR_GO(value)))
#define LMEM_BWR_PSCCR_GO(base, value) (LMEM_WR_PSCCR_GO(base, value))
/*@}*/

/*******************************************************************************
 * LMEM_PSCLCR - Cache line control register
 ******************************************************************************/

/*!
 * @brief LMEM_PSCLCR - Cache line control register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register defines specific line-sized cache operations to be performed
 * using a specific cache line address or a physical address. If a physical address
 * is specified, both ways of the cache are searched, and the command is only
 * performed on the way which hits.
 */
/*!
 * @name Constants and macros for entire LMEM_PSCLCR register
 */
/*@{*/
#define LMEM_RD_PSCLCR(base)     (LMEM_PSCLCR_REG(base))
#define LMEM_WR_PSCLCR(base, value) (LMEM_PSCLCR_REG(base) = (value))
#define LMEM_RMW_PSCLCR(base, mask, value) (LMEM_WR_PSCLCR(base, (LMEM_RD_PSCLCR(base) & ~(mask)) | (value)))
#define LMEM_SET_PSCLCR(base, value) (LMEM_WR_PSCLCR(base, LMEM_RD_PSCLCR(base) |  (value)))
#define LMEM_CLR_PSCLCR(base, value) (LMEM_WR_PSCLCR(base, LMEM_RD_PSCLCR(base) & ~(value)))
#define LMEM_TOG_PSCLCR(base, value) (LMEM_WR_PSCLCR(base, LMEM_RD_PSCLCR(base) ^  (value)))
/*@}*/

/*
 * Constants & macros for individual LMEM_PSCLCR bitfields
 */

/*!
 * @name Register LMEM_PSCLCR, field LGO[0] (RW)
 *
 * Setting this bit initiates the cache line command indicated by bits 27-24.
 * Reading this bit indicates if a line command is active This bit stays set until
 * the command completes. Writing zero has no effect. This bit is shared with
 * CSAR[LGO]
 *
 * Values:
 * - 0b0 - Write: no effect. Read: no line command active.
 * - 0b1 - Write: initiate line command indicated by bits 27-24. Read: line
 *     command active.
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCLCR_LGO field. */
#define LMEM_RD_PSCLCR_LGO(base) ((LMEM_PSCLCR_REG(base) & LMEM_PSCLCR_LGO_MASK) >> LMEM_PSCLCR_LGO_SHIFT)
#define LMEM_BRD_PSCLCR_LGO(base) (LMEM_RD_PSCLCR_LGO(base))

/*! @brief Set the LGO field to a new value. */
#define LMEM_WR_PSCLCR_LGO(base, value) (LMEM_RMW_PSCLCR(base, LMEM_PSCLCR_LGO_MASK, LMEM_PSCLCR_LGO(value)))
#define LMEM_BWR_PSCLCR_LGO(base, value) (LMEM_WR_PSCLCR_LGO(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCLCR, field CACHEADDR[11:2] (RW)
 *
 * CLCR[11:4] bits are used to access the tag arrays CLCR[11:2] bits are used to
 * access the data arrays
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCLCR_CACHEADDR field. */
#define LMEM_RD_PSCLCR_CACHEADDR(base) ((LMEM_PSCLCR_REG(base) & LMEM_PSCLCR_CACHEADDR_MASK) >> LMEM_PSCLCR_CACHEADDR_SHIFT)
#define LMEM_BRD_PSCLCR_CACHEADDR(base) (LMEM_RD_PSCLCR_CACHEADDR(base))

/*! @brief Set the CACHEADDR field to a new value. */
#define LMEM_WR_PSCLCR_CACHEADDR(base, value) (LMEM_RMW_PSCLCR(base, LMEM_PSCLCR_CACHEADDR_MASK, LMEM_PSCLCR_CACHEADDR(value)))
#define LMEM_BWR_PSCLCR_CACHEADDR(base, value) (LMEM_WR_PSCLCR_CACHEADDR(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCLCR, field WSEL[14] (RW)
 *
 * Selects the way for line commands.
 *
 * Values:
 * - 0b0 - Way 0
 * - 0b1 - Way 1
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCLCR_WSEL field. */
#define LMEM_RD_PSCLCR_WSEL(base) ((LMEM_PSCLCR_REG(base) & LMEM_PSCLCR_WSEL_MASK) >> LMEM_PSCLCR_WSEL_SHIFT)
#define LMEM_BRD_PSCLCR_WSEL(base) (LMEM_RD_PSCLCR_WSEL(base))

/*! @brief Set the WSEL field to a new value. */
#define LMEM_WR_PSCLCR_WSEL(base, value) (LMEM_RMW_PSCLCR(base, LMEM_PSCLCR_WSEL_MASK, LMEM_PSCLCR_WSEL(value)))
#define LMEM_BWR_PSCLCR_WSEL(base, value) (LMEM_WR_PSCLCR_WSEL(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCLCR, field TDSEL[16] (RW)
 *
 * Selects tag or data for search and read or write commands.
 *
 * Values:
 * - 0b0 - Data
 * - 0b1 - Tag
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCLCR_TDSEL field. */
#define LMEM_RD_PSCLCR_TDSEL(base) ((LMEM_PSCLCR_REG(base) & LMEM_PSCLCR_TDSEL_MASK) >> LMEM_PSCLCR_TDSEL_SHIFT)
#define LMEM_BRD_PSCLCR_TDSEL(base) (LMEM_RD_PSCLCR_TDSEL(base))

/*! @brief Set the TDSEL field to a new value. */
#define LMEM_WR_PSCLCR_TDSEL(base, value) (LMEM_RMW_PSCLCR(base, LMEM_PSCLCR_TDSEL_MASK, LMEM_PSCLCR_TDSEL(value)))
#define LMEM_BWR_PSCLCR_TDSEL(base, value) (LMEM_WR_PSCLCR_TDSEL(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCLCR, field LCIVB[20] (RO)
 *
 * If command used cache address and way, then this bit shows the initial state
 * of the valid bit If command used physical address and a hit, then this bit
 * shows the initial state of the valid bit. If a miss, this bit reads zero.
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCLCR_LCIVB field. */
#define LMEM_RD_PSCLCR_LCIVB(base) ((LMEM_PSCLCR_REG(base) & LMEM_PSCLCR_LCIVB_MASK) >> LMEM_PSCLCR_LCIVB_SHIFT)
#define LMEM_BRD_PSCLCR_LCIVB(base) (LMEM_RD_PSCLCR_LCIVB(base))
/*@}*/

/*!
 * @name Register LMEM_PSCLCR, field LCIMB[21] (RO)
 *
 * If command used cache address and way, then this bit shows the initial state
 * of the modified bit If command used physical address and a hit, then this bit
 * shows the initial state of the modified bit. If a miss, this bit reads zero.
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCLCR_LCIMB field. */
#define LMEM_RD_PSCLCR_LCIMB(base) ((LMEM_PSCLCR_REG(base) & LMEM_PSCLCR_LCIMB_MASK) >> LMEM_PSCLCR_LCIMB_SHIFT)
#define LMEM_BRD_PSCLCR_LCIMB(base) (LMEM_RD_PSCLCR_LCIMB(base))
/*@}*/

/*!
 * @name Register LMEM_PSCLCR, field LCWAY[22] (RO)
 *
 * Indicates the way used by the line command.
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCLCR_LCWAY field. */
#define LMEM_RD_PSCLCR_LCWAY(base) ((LMEM_PSCLCR_REG(base) & LMEM_PSCLCR_LCWAY_MASK) >> LMEM_PSCLCR_LCWAY_SHIFT)
#define LMEM_BRD_PSCLCR_LCWAY(base) (LMEM_RD_PSCLCR_LCWAY(base))
/*@}*/

/*!
 * @name Register LMEM_PSCLCR, field LCMD[25:24] (RW)
 *
 * Values:
 * - 0b00 - Search and read or write
 * - 0b01 - Invalidate
 * - 0b10 - Push
 * - 0b11 - Clear
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCLCR_LCMD field. */
#define LMEM_RD_PSCLCR_LCMD(base) ((LMEM_PSCLCR_REG(base) & LMEM_PSCLCR_LCMD_MASK) >> LMEM_PSCLCR_LCMD_SHIFT)
#define LMEM_BRD_PSCLCR_LCMD(base) (LMEM_RD_PSCLCR_LCMD(base))

/*! @brief Set the LCMD field to a new value. */
#define LMEM_WR_PSCLCR_LCMD(base, value) (LMEM_RMW_PSCLCR(base, LMEM_PSCLCR_LCMD_MASK, LMEM_PSCLCR_LCMD(value)))
#define LMEM_BWR_PSCLCR_LCMD(base, value) (LMEM_WR_PSCLCR_LCMD(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCLCR, field LADSEL[26] (RW)
 *
 * When using the cache address, the way must also be specified in CLCR[WSEL].
 * When using the physical address, both ways are searched and the command is
 * performed only if a hit.
 *
 * Values:
 * - 0b0 - Cache address
 * - 0b1 - Physical address
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCLCR_LADSEL field. */
#define LMEM_RD_PSCLCR_LADSEL(base) ((LMEM_PSCLCR_REG(base) & LMEM_PSCLCR_LADSEL_MASK) >> LMEM_PSCLCR_LADSEL_SHIFT)
#define LMEM_BRD_PSCLCR_LADSEL(base) (LMEM_RD_PSCLCR_LADSEL(base))

/*! @brief Set the LADSEL field to a new value. */
#define LMEM_WR_PSCLCR_LADSEL(base, value) (LMEM_RMW_PSCLCR(base, LMEM_PSCLCR_LADSEL_MASK, LMEM_PSCLCR_LADSEL(value)))
#define LMEM_BWR_PSCLCR_LADSEL(base, value) (LMEM_WR_PSCLCR_LADSEL(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCLCR, field LACC[27] (RW)
 *
 * Values:
 * - 0b0 - Read
 * - 0b1 - Write
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCLCR_LACC field. */
#define LMEM_RD_PSCLCR_LACC(base) ((LMEM_PSCLCR_REG(base) & LMEM_PSCLCR_LACC_MASK) >> LMEM_PSCLCR_LACC_SHIFT)
#define LMEM_BRD_PSCLCR_LACC(base) (LMEM_RD_PSCLCR_LACC(base))

/*! @brief Set the LACC field to a new value. */
#define LMEM_WR_PSCLCR_LACC(base, value) (LMEM_RMW_PSCLCR(base, LMEM_PSCLCR_LACC_MASK, LMEM_PSCLCR_LACC(value)))
#define LMEM_BWR_PSCLCR_LACC(base, value) (LMEM_WR_PSCLCR_LACC(base, value))
/*@}*/

/*******************************************************************************
 * LMEM_PSCSAR - Cache search address register
 ******************************************************************************/

/*!
 * @brief LMEM_PSCSAR - Cache search address register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The CSAR register is used to define the explicit cache address or the
 * physical address for line-sized commands specified in the CLCR[LADSEL] bit.
 */
/*!
 * @name Constants and macros for entire LMEM_PSCSAR register
 */
/*@{*/
#define LMEM_RD_PSCSAR(base)     (LMEM_PSCSAR_REG(base))
#define LMEM_WR_PSCSAR(base, value) (LMEM_PSCSAR_REG(base) = (value))
#define LMEM_RMW_PSCSAR(base, mask, value) (LMEM_WR_PSCSAR(base, (LMEM_RD_PSCSAR(base) & ~(mask)) | (value)))
#define LMEM_SET_PSCSAR(base, value) (LMEM_WR_PSCSAR(base, LMEM_RD_PSCSAR(base) |  (value)))
#define LMEM_CLR_PSCSAR(base, value) (LMEM_WR_PSCSAR(base, LMEM_RD_PSCSAR(base) & ~(value)))
#define LMEM_TOG_PSCSAR(base, value) (LMEM_WR_PSCSAR(base, LMEM_RD_PSCSAR(base) ^  (value)))
/*@}*/

/*
 * Constants & macros for individual LMEM_PSCSAR bitfields
 */

/*!
 * @name Register LMEM_PSCSAR, field LGO[0] (RW)
 *
 * Setting this bit initiates the cache line command indicated by bits 27-24.
 * Reading this bit indicates if a line command is active This bit stays set until
 * the command completes. Writing zero has no effect. This bit is shared with
 * CLCR[LGO]
 *
 * Values:
 * - 0b0 - Write: no effect. Read: no line command active.
 * - 0b1 - Write: initiate line command indicated by bits CLCR[27:24]. Read:
 *     line command active.
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCSAR_LGO field. */
#define LMEM_RD_PSCSAR_LGO(base) ((LMEM_PSCSAR_REG(base) & LMEM_PSCSAR_LGO_MASK) >> LMEM_PSCSAR_LGO_SHIFT)
#define LMEM_BRD_PSCSAR_LGO(base) (LMEM_RD_PSCSAR_LGO(base))

/*! @brief Set the LGO field to a new value. */
#define LMEM_WR_PSCSAR_LGO(base, value) (LMEM_RMW_PSCSAR(base, LMEM_PSCSAR_LGO_MASK, LMEM_PSCSAR_LGO(value)))
#define LMEM_BWR_PSCSAR_LGO(base, value) (LMEM_WR_PSCSAR_LGO(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCSAR, field PHYADDR[31:2] (RW)
 *
 * PHYADDR represents bits [31:2] of the system address. CSAR[31:12] bits are
 * used for tag compare CSAR[11:4] bits are used to access the tag arrays
 * CSAR[11:2] bits are used to access the data arrays
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCSAR_PHYADDR field. */
#define LMEM_RD_PSCSAR_PHYADDR(base) ((LMEM_PSCSAR_REG(base) & LMEM_PSCSAR_PHYADDR_MASK) >> LMEM_PSCSAR_PHYADDR_SHIFT)
#define LMEM_BRD_PSCSAR_PHYADDR(base) (LMEM_RD_PSCSAR_PHYADDR(base))

/*! @brief Set the PHYADDR field to a new value. */
#define LMEM_WR_PSCSAR_PHYADDR(base, value) (LMEM_RMW_PSCSAR(base, LMEM_PSCSAR_PHYADDR_MASK, LMEM_PSCSAR_PHYADDR(value)))
#define LMEM_BWR_PSCSAR_PHYADDR(base, value) (LMEM_WR_PSCSAR_PHYADDR(base, value))
/*@}*/

/*******************************************************************************
 * LMEM_PSCCVR - Cache read/write value register
 ******************************************************************************/

/*!
 * @brief LMEM_PSCCVR - Cache read/write value register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The CCVR register is used to source write data or return read data for the
 * commands specified in the CLCR register.
 */
/*!
 * @name Constants and macros for entire LMEM_PSCCVR register
 */
/*@{*/
#define LMEM_RD_PSCCVR(base)     (LMEM_PSCCVR_REG(base))
#define LMEM_WR_PSCCVR(base, value) (LMEM_PSCCVR_REG(base) = (value))
#define LMEM_RMW_PSCCVR(base, mask, value) (LMEM_WR_PSCCVR(base, (LMEM_RD_PSCCVR(base) & ~(mask)) | (value)))
#define LMEM_SET_PSCCVR(base, value) (LMEM_WR_PSCCVR(base, LMEM_RD_PSCCVR(base) |  (value)))
#define LMEM_CLR_PSCCVR(base, value) (LMEM_WR_PSCCVR(base, LMEM_RD_PSCCVR(base) & ~(value)))
#define LMEM_TOG_PSCCVR(base, value) (LMEM_WR_PSCCVR(base, LMEM_RD_PSCCVR(base) ^  (value)))
/*@}*/

/*******************************************************************************
 * LMEM_PSCRMR - Cache regions mode register
 ******************************************************************************/

/*!
 * @brief LMEM_PSCRMR - Cache regions mode register (RW)
 *
 * Reset value: 0xAA0FA000U
 *
 * The CRMR register allows you to demote the cache mode of various subregions
 * within the device's memory map. Demoting the cache mode reduces the cache
 * function applied to a memory region from write-back to write-through to
 * non-cacheable. After a region is demoted, its cache mode can only be raised by a reset,
 * which returns it to its default state. To maintain cache coherency, changes to
 * the cache mode should be completed while the address space being changed is
 * not being accessed or the cache is disabled. Before a cache mode change,
 * complete a cache clear all command to push and invalidate any cache entries that may
 * have changed. The address/module assignment of the 16 subregions is
 * device-specific and are detailed in the Chip Configuration section. Some of the regions
 * may not be used (non-cacheable), and some regions may not be capable of
 * write-back.
 */
/*!
 * @name Constants and macros for entire LMEM_PSCRMR register
 */
/*@{*/
#define LMEM_RD_PSCRMR(base)     (LMEM_PSCRMR_REG(base))
#define LMEM_WR_PSCRMR(base, value) (LMEM_PSCRMR_REG(base) = (value))
#define LMEM_RMW_PSCRMR(base, mask, value) (LMEM_WR_PSCRMR(base, (LMEM_RD_PSCRMR(base) & ~(mask)) | (value)))
#define LMEM_SET_PSCRMR(base, value) (LMEM_WR_PSCRMR(base, LMEM_RD_PSCRMR(base) |  (value)))
#define LMEM_CLR_PSCRMR(base, value) (LMEM_WR_PSCRMR(base, LMEM_RD_PSCRMR(base) & ~(value)))
#define LMEM_TOG_PSCRMR(base, value) (LMEM_WR_PSCRMR(base, LMEM_RD_PSCRMR(base) ^  (value)))
/*@}*/

/*
 * Constants & macros for individual LMEM_PSCRMR bitfields
 */

/*!
 * @name Register LMEM_PSCRMR, field R15[1:0] (RW)
 *
 * Controls the cache mode for region 15
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCRMR_R15 field. */
#define LMEM_RD_PSCRMR_R15(base) ((LMEM_PSCRMR_REG(base) & LMEM_PSCRMR_R15_MASK) >> LMEM_PSCRMR_R15_SHIFT)
#define LMEM_BRD_PSCRMR_R15(base) (LMEM_RD_PSCRMR_R15(base))

/*! @brief Set the R15 field to a new value. */
#define LMEM_WR_PSCRMR_R15(base, value) (LMEM_RMW_PSCRMR(base, LMEM_PSCRMR_R15_MASK, LMEM_PSCRMR_R15(value)))
#define LMEM_BWR_PSCRMR_R15(base, value) (LMEM_WR_PSCRMR_R15(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCRMR, field R14[3:2] (RW)
 *
 * Controls the cache mode for region 14
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCRMR_R14 field. */
#define LMEM_RD_PSCRMR_R14(base) ((LMEM_PSCRMR_REG(base) & LMEM_PSCRMR_R14_MASK) >> LMEM_PSCRMR_R14_SHIFT)
#define LMEM_BRD_PSCRMR_R14(base) (LMEM_RD_PSCRMR_R14(base))

/*! @brief Set the R14 field to a new value. */
#define LMEM_WR_PSCRMR_R14(base, value) (LMEM_RMW_PSCRMR(base, LMEM_PSCRMR_R14_MASK, LMEM_PSCRMR_R14(value)))
#define LMEM_BWR_PSCRMR_R14(base, value) (LMEM_WR_PSCRMR_R14(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCRMR, field R13[5:4] (RW)
 *
 * Controls the cache mode for region 13
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCRMR_R13 field. */
#define LMEM_RD_PSCRMR_R13(base) ((LMEM_PSCRMR_REG(base) & LMEM_PSCRMR_R13_MASK) >> LMEM_PSCRMR_R13_SHIFT)
#define LMEM_BRD_PSCRMR_R13(base) (LMEM_RD_PSCRMR_R13(base))

/*! @brief Set the R13 field to a new value. */
#define LMEM_WR_PSCRMR_R13(base, value) (LMEM_RMW_PSCRMR(base, LMEM_PSCRMR_R13_MASK, LMEM_PSCRMR_R13(value)))
#define LMEM_BWR_PSCRMR_R13(base, value) (LMEM_WR_PSCRMR_R13(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCRMR, field R12[7:6] (RW)
 *
 * Controls the cache mode for region 12
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCRMR_R12 field. */
#define LMEM_RD_PSCRMR_R12(base) ((LMEM_PSCRMR_REG(base) & LMEM_PSCRMR_R12_MASK) >> LMEM_PSCRMR_R12_SHIFT)
#define LMEM_BRD_PSCRMR_R12(base) (LMEM_RD_PSCRMR_R12(base))

/*! @brief Set the R12 field to a new value. */
#define LMEM_WR_PSCRMR_R12(base, value) (LMEM_RMW_PSCRMR(base, LMEM_PSCRMR_R12_MASK, LMEM_PSCRMR_R12(value)))
#define LMEM_BWR_PSCRMR_R12(base, value) (LMEM_WR_PSCRMR_R12(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCRMR, field R11[9:8] (RW)
 *
 * Controls the cache mode for region 11
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCRMR_R11 field. */
#define LMEM_RD_PSCRMR_R11(base) ((LMEM_PSCRMR_REG(base) & LMEM_PSCRMR_R11_MASK) >> LMEM_PSCRMR_R11_SHIFT)
#define LMEM_BRD_PSCRMR_R11(base) (LMEM_RD_PSCRMR_R11(base))

/*! @brief Set the R11 field to a new value. */
#define LMEM_WR_PSCRMR_R11(base, value) (LMEM_RMW_PSCRMR(base, LMEM_PSCRMR_R11_MASK, LMEM_PSCRMR_R11(value)))
#define LMEM_BWR_PSCRMR_R11(base, value) (LMEM_WR_PSCRMR_R11(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCRMR, field R10[11:10] (RW)
 *
 * Controls the cache mode for region 10
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCRMR_R10 field. */
#define LMEM_RD_PSCRMR_R10(base) ((LMEM_PSCRMR_REG(base) & LMEM_PSCRMR_R10_MASK) >> LMEM_PSCRMR_R10_SHIFT)
#define LMEM_BRD_PSCRMR_R10(base) (LMEM_RD_PSCRMR_R10(base))

/*! @brief Set the R10 field to a new value. */
#define LMEM_WR_PSCRMR_R10(base, value) (LMEM_RMW_PSCRMR(base, LMEM_PSCRMR_R10_MASK, LMEM_PSCRMR_R10(value)))
#define LMEM_BWR_PSCRMR_R10(base, value) (LMEM_WR_PSCRMR_R10(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCRMR, field R9[13:12] (RW)
 *
 * Controls the cache mode for region 9
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCRMR_R9 field. */
#define LMEM_RD_PSCRMR_R9(base) ((LMEM_PSCRMR_REG(base) & LMEM_PSCRMR_R9_MASK) >> LMEM_PSCRMR_R9_SHIFT)
#define LMEM_BRD_PSCRMR_R9(base) (LMEM_RD_PSCRMR_R9(base))

/*! @brief Set the R9 field to a new value. */
#define LMEM_WR_PSCRMR_R9(base, value) (LMEM_RMW_PSCRMR(base, LMEM_PSCRMR_R9_MASK, LMEM_PSCRMR_R9(value)))
#define LMEM_BWR_PSCRMR_R9(base, value) (LMEM_WR_PSCRMR_R9(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCRMR, field R8[15:14] (RW)
 *
 * Controls the cache mode for region 8
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCRMR_R8 field. */
#define LMEM_RD_PSCRMR_R8(base) ((LMEM_PSCRMR_REG(base) & LMEM_PSCRMR_R8_MASK) >> LMEM_PSCRMR_R8_SHIFT)
#define LMEM_BRD_PSCRMR_R8(base) (LMEM_RD_PSCRMR_R8(base))

/*! @brief Set the R8 field to a new value. */
#define LMEM_WR_PSCRMR_R8(base, value) (LMEM_RMW_PSCRMR(base, LMEM_PSCRMR_R8_MASK, LMEM_PSCRMR_R8(value)))
#define LMEM_BWR_PSCRMR_R8(base, value) (LMEM_WR_PSCRMR_R8(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCRMR, field R7[17:16] (RW)
 *
 * Controls the cache mode for region 7
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCRMR_R7 field. */
#define LMEM_RD_PSCRMR_R7(base) ((LMEM_PSCRMR_REG(base) & LMEM_PSCRMR_R7_MASK) >> LMEM_PSCRMR_R7_SHIFT)
#define LMEM_BRD_PSCRMR_R7(base) (LMEM_RD_PSCRMR_R7(base))

/*! @brief Set the R7 field to a new value. */
#define LMEM_WR_PSCRMR_R7(base, value) (LMEM_RMW_PSCRMR(base, LMEM_PSCRMR_R7_MASK, LMEM_PSCRMR_R7(value)))
#define LMEM_BWR_PSCRMR_R7(base, value) (LMEM_WR_PSCRMR_R7(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCRMR, field R6[19:18] (RW)
 *
 * Controls the cache mode for region 6
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCRMR_R6 field. */
#define LMEM_RD_PSCRMR_R6(base) ((LMEM_PSCRMR_REG(base) & LMEM_PSCRMR_R6_MASK) >> LMEM_PSCRMR_R6_SHIFT)
#define LMEM_BRD_PSCRMR_R6(base) (LMEM_RD_PSCRMR_R6(base))

/*! @brief Set the R6 field to a new value. */
#define LMEM_WR_PSCRMR_R6(base, value) (LMEM_RMW_PSCRMR(base, LMEM_PSCRMR_R6_MASK, LMEM_PSCRMR_R6(value)))
#define LMEM_BWR_PSCRMR_R6(base, value) (LMEM_WR_PSCRMR_R6(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCRMR, field R5[21:20] (RW)
 *
 * Controls the cache mode for region 5
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCRMR_R5 field. */
#define LMEM_RD_PSCRMR_R5(base) ((LMEM_PSCRMR_REG(base) & LMEM_PSCRMR_R5_MASK) >> LMEM_PSCRMR_R5_SHIFT)
#define LMEM_BRD_PSCRMR_R5(base) (LMEM_RD_PSCRMR_R5(base))

/*! @brief Set the R5 field to a new value. */
#define LMEM_WR_PSCRMR_R5(base, value) (LMEM_RMW_PSCRMR(base, LMEM_PSCRMR_R5_MASK, LMEM_PSCRMR_R5(value)))
#define LMEM_BWR_PSCRMR_R5(base, value) (LMEM_WR_PSCRMR_R5(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCRMR, field R4[23:22] (RW)
 *
 * Controls the cache mode for region 4
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCRMR_R4 field. */
#define LMEM_RD_PSCRMR_R4(base) ((LMEM_PSCRMR_REG(base) & LMEM_PSCRMR_R4_MASK) >> LMEM_PSCRMR_R4_SHIFT)
#define LMEM_BRD_PSCRMR_R4(base) (LMEM_RD_PSCRMR_R4(base))

/*! @brief Set the R4 field to a new value. */
#define LMEM_WR_PSCRMR_R4(base, value) (LMEM_RMW_PSCRMR(base, LMEM_PSCRMR_R4_MASK, LMEM_PSCRMR_R4(value)))
#define LMEM_BWR_PSCRMR_R4(base, value) (LMEM_WR_PSCRMR_R4(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCRMR, field R3[25:24] (RW)
 *
 * Controls the cache mode for region 3
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCRMR_R3 field. */
#define LMEM_RD_PSCRMR_R3(base) ((LMEM_PSCRMR_REG(base) & LMEM_PSCRMR_R3_MASK) >> LMEM_PSCRMR_R3_SHIFT)
#define LMEM_BRD_PSCRMR_R3(base) (LMEM_RD_PSCRMR_R3(base))

/*! @brief Set the R3 field to a new value. */
#define LMEM_WR_PSCRMR_R3(base, value) (LMEM_RMW_PSCRMR(base, LMEM_PSCRMR_R3_MASK, LMEM_PSCRMR_R3(value)))
#define LMEM_BWR_PSCRMR_R3(base, value) (LMEM_WR_PSCRMR_R3(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCRMR, field R2[27:26] (RW)
 *
 * Controls the cache mode for region 2
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCRMR_R2 field. */
#define LMEM_RD_PSCRMR_R2(base) ((LMEM_PSCRMR_REG(base) & LMEM_PSCRMR_R2_MASK) >> LMEM_PSCRMR_R2_SHIFT)
#define LMEM_BRD_PSCRMR_R2(base) (LMEM_RD_PSCRMR_R2(base))

/*! @brief Set the R2 field to a new value. */
#define LMEM_WR_PSCRMR_R2(base, value) (LMEM_RMW_PSCRMR(base, LMEM_PSCRMR_R2_MASK, LMEM_PSCRMR_R2(value)))
#define LMEM_BWR_PSCRMR_R2(base, value) (LMEM_WR_PSCRMR_R2(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCRMR, field R1[29:28] (RW)
 *
 * Controls the cache mode for region 1
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCRMR_R1 field. */
#define LMEM_RD_PSCRMR_R1(base) ((LMEM_PSCRMR_REG(base) & LMEM_PSCRMR_R1_MASK) >> LMEM_PSCRMR_R1_SHIFT)
#define LMEM_BRD_PSCRMR_R1(base) (LMEM_RD_PSCRMR_R1(base))

/*! @brief Set the R1 field to a new value. */
#define LMEM_WR_PSCRMR_R1(base, value) (LMEM_RMW_PSCRMR(base, LMEM_PSCRMR_R1_MASK, LMEM_PSCRMR_R1(value)))
#define LMEM_BWR_PSCRMR_R1(base, value) (LMEM_WR_PSCRMR_R1(base, value))
/*@}*/

/*!
 * @name Register LMEM_PSCRMR, field R0[31:30] (RW)
 *
 * Controls the cache mode for region 0
 *
 * Values:
 * - 0b00 - Non-cacheable
 * - 0b01 - Non-cacheable
 * - 0b10 - Write-through
 * - 0b11 - Write-back
 */
/*@{*/
/*! @brief Read current value of the LMEM_PSCRMR_R0 field. */
#define LMEM_RD_PSCRMR_R0(base) ((LMEM_PSCRMR_REG(base) & LMEM_PSCRMR_R0_MASK) >> LMEM_PSCRMR_R0_SHIFT)
#define LMEM_BRD_PSCRMR_R0(base) (LMEM_RD_PSCRMR_R0(base))

/*! @brief Set the R0 field to a new value. */
#define LMEM_WR_PSCRMR_R0(base, value) (LMEM_RMW_PSCRMR(base, LMEM_PSCRMR_R0_MASK, LMEM_PSCRMR_R0(value)))
#define LMEM_BWR_PSCRMR_R0(base, value) (LMEM_WR_PSCRMR_R0(base, value))
/*@}*/

/*
 * MK82F25615 LPTMR
 *
 * Low Power Timer
 *
 * Registers defined in this header file:
 * - LPTMR_CSR - Low Power Timer Control Status Register
 * - LPTMR_PSR - Low Power Timer Prescale Register
 * - LPTMR_CMR - Low Power Timer Compare Register
 * - LPTMR_CNR - Low Power Timer Counter Register
 */

#define LPTMR_INSTANCE_COUNT (2U) /*!< Number of instances of the LPTMR module. */
#define LPTMR0_IDX (0U) /*!< Instance number for LPTMR0. */
#define LPTMR1_IDX (1U) /*!< Instance number for LPTMR1. */

/*******************************************************************************
 * LPTMR_CSR - Low Power Timer Control Status Register
 ******************************************************************************/

/*!
 * @brief LPTMR_CSR - Low Power Timer Control Status Register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire LPTMR_CSR register
 */
/*@{*/
#define LPTMR_RD_CSR(base)       (LPTMR_CSR_REG(base))
#define LPTMR_WR_CSR(base, value) (LPTMR_CSR_REG(base) = (value))
#define LPTMR_RMW_CSR(base, mask, value) (LPTMR_WR_CSR(base, (LPTMR_RD_CSR(base) & ~(mask)) | (value)))
#define LPTMR_SET_CSR(base, value) (BME_OR32(&LPTMR_CSR_REG(base), (uint32_t)(value)))
#define LPTMR_CLR_CSR(base, value) (BME_AND32(&LPTMR_CSR_REG(base), (uint32_t)(~(value))))
#define LPTMR_TOG_CSR(base, value) (BME_XOR32(&LPTMR_CSR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LPTMR_CSR bitfields
 */

/*!
 * @name Register LPTMR_CSR, field TEN[0] (RW)
 *
 * When TEN is clear, it resets the LPTMR internal logic, including the CNR and
 * TCF. When TEN is set, the LPTMR is enabled. While writing 1 to this field,
 * CSR[5:1] must not be altered.
 *
 * Values:
 * - 0b0 - LPTMR is disabled and internal logic is reset.
 * - 0b1 - LPTMR is enabled.
 */
/*@{*/
/*! @brief Read current value of the LPTMR_CSR_TEN field. */
#define LPTMR_RD_CSR_TEN(base) ((LPTMR_CSR_REG(base) & LPTMR_CSR_TEN_MASK) >> LPTMR_CSR_TEN_SHIFT)
#define LPTMR_BRD_CSR_TEN(base) (BME_UBFX32(&LPTMR_CSR_REG(base), LPTMR_CSR_TEN_SHIFT, LPTMR_CSR_TEN_WIDTH))

/*! @brief Set the TEN field to a new value. */
#define LPTMR_WR_CSR_TEN(base, value) (LPTMR_RMW_CSR(base, (LPTMR_CSR_TEN_MASK | LPTMR_CSR_TCF_MASK), LPTMR_CSR_TEN(value)))
#define LPTMR_BWR_CSR_TEN(base, value) (BME_BFI32(&LPTMR_CSR_REG(base), ((uint32_t)(value) << LPTMR_CSR_TEN_SHIFT), LPTMR_CSR_TEN_SHIFT, LPTMR_CSR_TEN_WIDTH))
/*@}*/

/*!
 * @name Register LPTMR_CSR, field TMS[1] (RW)
 *
 * Configures the mode of the LPTMR. TMS must be altered only when the LPTMR is
 * disabled.
 *
 * Values:
 * - 0b0 - Time Counter mode.
 * - 0b1 - Pulse Counter mode.
 */
/*@{*/
/*! @brief Read current value of the LPTMR_CSR_TMS field. */
#define LPTMR_RD_CSR_TMS(base) ((LPTMR_CSR_REG(base) & LPTMR_CSR_TMS_MASK) >> LPTMR_CSR_TMS_SHIFT)
#define LPTMR_BRD_CSR_TMS(base) (BME_UBFX32(&LPTMR_CSR_REG(base), LPTMR_CSR_TMS_SHIFT, LPTMR_CSR_TMS_WIDTH))

/*! @brief Set the TMS field to a new value. */
#define LPTMR_WR_CSR_TMS(base, value) (LPTMR_RMW_CSR(base, (LPTMR_CSR_TMS_MASK | LPTMR_CSR_TCF_MASK), LPTMR_CSR_TMS(value)))
#define LPTMR_BWR_CSR_TMS(base, value) (BME_BFI32(&LPTMR_CSR_REG(base), ((uint32_t)(value) << LPTMR_CSR_TMS_SHIFT), LPTMR_CSR_TMS_SHIFT, LPTMR_CSR_TMS_WIDTH))
/*@}*/

/*!
 * @name Register LPTMR_CSR, field TFC[2] (RW)
 *
 * When clear, TFC configures the CNR to reset whenever TCF is set. When set,
 * TFC configures the CNR to reset on overflow. TFC must be altered only when the
 * LPTMR is disabled.
 *
 * Values:
 * - 0b0 - CNR is reset whenever TCF is set.
 * - 0b1 - CNR is reset on overflow.
 */
/*@{*/
/*! @brief Read current value of the LPTMR_CSR_TFC field. */
#define LPTMR_RD_CSR_TFC(base) ((LPTMR_CSR_REG(base) & LPTMR_CSR_TFC_MASK) >> LPTMR_CSR_TFC_SHIFT)
#define LPTMR_BRD_CSR_TFC(base) (BME_UBFX32(&LPTMR_CSR_REG(base), LPTMR_CSR_TFC_SHIFT, LPTMR_CSR_TFC_WIDTH))

/*! @brief Set the TFC field to a new value. */
#define LPTMR_WR_CSR_TFC(base, value) (LPTMR_RMW_CSR(base, (LPTMR_CSR_TFC_MASK | LPTMR_CSR_TCF_MASK), LPTMR_CSR_TFC(value)))
#define LPTMR_BWR_CSR_TFC(base, value) (BME_BFI32(&LPTMR_CSR_REG(base), ((uint32_t)(value) << LPTMR_CSR_TFC_SHIFT), LPTMR_CSR_TFC_SHIFT, LPTMR_CSR_TFC_WIDTH))
/*@}*/

/*!
 * @name Register LPTMR_CSR, field TPP[3] (RW)
 *
 * Configures the polarity of the input source in Pulse Counter mode. TPP must
 * be changed only when the LPTMR is disabled.
 *
 * Values:
 * - 0b0 - Pulse Counter input source is active-high, and the CNR will increment
 *     on the rising-edge.
 * - 0b1 - Pulse Counter input source is active-low, and the CNR will increment
 *     on the falling-edge.
 */
/*@{*/
/*! @brief Read current value of the LPTMR_CSR_TPP field. */
#define LPTMR_RD_CSR_TPP(base) ((LPTMR_CSR_REG(base) & LPTMR_CSR_TPP_MASK) >> LPTMR_CSR_TPP_SHIFT)
#define LPTMR_BRD_CSR_TPP(base) (BME_UBFX32(&LPTMR_CSR_REG(base), LPTMR_CSR_TPP_SHIFT, LPTMR_CSR_TPP_WIDTH))

/*! @brief Set the TPP field to a new value. */
#define LPTMR_WR_CSR_TPP(base, value) (LPTMR_RMW_CSR(base, (LPTMR_CSR_TPP_MASK | LPTMR_CSR_TCF_MASK), LPTMR_CSR_TPP(value)))
#define LPTMR_BWR_CSR_TPP(base, value) (BME_BFI32(&LPTMR_CSR_REG(base), ((uint32_t)(value) << LPTMR_CSR_TPP_SHIFT), LPTMR_CSR_TPP_SHIFT, LPTMR_CSR_TPP_WIDTH))
/*@}*/

/*!
 * @name Register LPTMR_CSR, field TPS[5:4] (RW)
 *
 * Configures the input source to be used in Pulse Counter mode. TPS must be
 * altered only when the LPTMR is disabled. The input connections vary by device.
 * See the for information on the connections to these inputs.
 *
 * Values:
 * - 0b00 - Pulse counter input 0 is selected.
 * - 0b01 - Pulse counter input 1 is selected.
 * - 0b10 - Pulse counter input 2 is selected.
 * - 0b11 - Pulse counter input 3 is selected.
 */
/*@{*/
/*! @brief Read current value of the LPTMR_CSR_TPS field. */
#define LPTMR_RD_CSR_TPS(base) ((LPTMR_CSR_REG(base) & LPTMR_CSR_TPS_MASK) >> LPTMR_CSR_TPS_SHIFT)
#define LPTMR_BRD_CSR_TPS(base) (BME_UBFX32(&LPTMR_CSR_REG(base), LPTMR_CSR_TPS_SHIFT, LPTMR_CSR_TPS_WIDTH))

/*! @brief Set the TPS field to a new value. */
#define LPTMR_WR_CSR_TPS(base, value) (LPTMR_RMW_CSR(base, (LPTMR_CSR_TPS_MASK | LPTMR_CSR_TCF_MASK), LPTMR_CSR_TPS(value)))
#define LPTMR_BWR_CSR_TPS(base, value) (BME_BFI32(&LPTMR_CSR_REG(base), ((uint32_t)(value) << LPTMR_CSR_TPS_SHIFT), LPTMR_CSR_TPS_SHIFT, LPTMR_CSR_TPS_WIDTH))
/*@}*/

/*!
 * @name Register LPTMR_CSR, field TIE[6] (RW)
 *
 * When TIE is set, the LPTMR Interrupt is generated whenever TCF is also set.
 *
 * Values:
 * - 0b0 - Timer interrupt disabled.
 * - 0b1 - Timer interrupt enabled.
 */
/*@{*/
/*! @brief Read current value of the LPTMR_CSR_TIE field. */
#define LPTMR_RD_CSR_TIE(base) ((LPTMR_CSR_REG(base) & LPTMR_CSR_TIE_MASK) >> LPTMR_CSR_TIE_SHIFT)
#define LPTMR_BRD_CSR_TIE(base) (BME_UBFX32(&LPTMR_CSR_REG(base), LPTMR_CSR_TIE_SHIFT, LPTMR_CSR_TIE_WIDTH))

/*! @brief Set the TIE field to a new value. */
#define LPTMR_WR_CSR_TIE(base, value) (LPTMR_RMW_CSR(base, (LPTMR_CSR_TIE_MASK | LPTMR_CSR_TCF_MASK), LPTMR_CSR_TIE(value)))
#define LPTMR_BWR_CSR_TIE(base, value) (BME_BFI32(&LPTMR_CSR_REG(base), ((uint32_t)(value) << LPTMR_CSR_TIE_SHIFT), LPTMR_CSR_TIE_SHIFT, LPTMR_CSR_TIE_WIDTH))
/*@}*/

/*!
 * @name Register LPTMR_CSR, field TCF[7] (W1C)
 *
 * TCF is set when the LPTMR is enabled and the CNR equals the CMR and
 * increments. TCF is cleared when the LPTMR is disabled or a logic 1 is written to it.
 *
 * Values:
 * - 0b0 - The value of CNR is not equal to CMR and increments.
 * - 0b1 - The value of CNR is equal to CMR and increments.
 */
/*@{*/
/*! @brief Read current value of the LPTMR_CSR_TCF field. */
#define LPTMR_RD_CSR_TCF(base) ((LPTMR_CSR_REG(base) & LPTMR_CSR_TCF_MASK) >> LPTMR_CSR_TCF_SHIFT)
#define LPTMR_BRD_CSR_TCF(base) (BME_UBFX32(&LPTMR_CSR_REG(base), LPTMR_CSR_TCF_SHIFT, LPTMR_CSR_TCF_WIDTH))

/*! @brief Set the TCF field to a new value. */
#define LPTMR_WR_CSR_TCF(base, value) (LPTMR_RMW_CSR(base, LPTMR_CSR_TCF_MASK, LPTMR_CSR_TCF(value)))
#define LPTMR_BWR_CSR_TCF(base, value) (BME_BFI32(&LPTMR_CSR_REG(base), ((uint32_t)(value) << LPTMR_CSR_TCF_SHIFT), LPTMR_CSR_TCF_SHIFT, LPTMR_CSR_TCF_WIDTH))
/*@}*/

/*******************************************************************************
 * LPTMR_PSR - Low Power Timer Prescale Register
 ******************************************************************************/

/*!
 * @brief LPTMR_PSR - Low Power Timer Prescale Register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire LPTMR_PSR register
 */
/*@{*/
#define LPTMR_RD_PSR(base)       (LPTMR_PSR_REG(base))
#define LPTMR_WR_PSR(base, value) (LPTMR_PSR_REG(base) = (value))
#define LPTMR_RMW_PSR(base, mask, value) (LPTMR_WR_PSR(base, (LPTMR_RD_PSR(base) & ~(mask)) | (value)))
#define LPTMR_SET_PSR(base, value) (BME_OR32(&LPTMR_PSR_REG(base), (uint32_t)(value)))
#define LPTMR_CLR_PSR(base, value) (BME_AND32(&LPTMR_PSR_REG(base), (uint32_t)(~(value))))
#define LPTMR_TOG_PSR(base, value) (BME_XOR32(&LPTMR_PSR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LPTMR_PSR bitfields
 */

/*!
 * @name Register LPTMR_PSR, field PCS[1:0] (RW)
 *
 * Selects the clock to be used by the LPTMR prescaler/glitch filter. PCS must
 * be altered only when the LPTMR is disabled. The clock connections vary by
 * device. See the chip configuration details for information on the connections to
 * these inputs.
 *
 * Values:
 * - 0b00 - Prescaler/glitch filter clock 0 selected.
 * - 0b01 - Prescaler/glitch filter clock 1 selected.
 * - 0b10 - Prescaler/glitch filter clock 2 selected.
 * - 0b11 - Prescaler/glitch filter clock 3 selected.
 */
/*@{*/
/*! @brief Read current value of the LPTMR_PSR_PCS field. */
#define LPTMR_RD_PSR_PCS(base) ((LPTMR_PSR_REG(base) & LPTMR_PSR_PCS_MASK) >> LPTMR_PSR_PCS_SHIFT)
#define LPTMR_BRD_PSR_PCS(base) (BME_UBFX32(&LPTMR_PSR_REG(base), LPTMR_PSR_PCS_SHIFT, LPTMR_PSR_PCS_WIDTH))

/*! @brief Set the PCS field to a new value. */
#define LPTMR_WR_PSR_PCS(base, value) (LPTMR_RMW_PSR(base, LPTMR_PSR_PCS_MASK, LPTMR_PSR_PCS(value)))
#define LPTMR_BWR_PSR_PCS(base, value) (BME_BFI32(&LPTMR_PSR_REG(base), ((uint32_t)(value) << LPTMR_PSR_PCS_SHIFT), LPTMR_PSR_PCS_SHIFT, LPTMR_PSR_PCS_WIDTH))
/*@}*/

/*!
 * @name Register LPTMR_PSR, field PBYP[2] (RW)
 *
 * When PBYP is set, the selected prescaler clock in Time Counter mode or
 * selected input source in Pulse Counter mode directly clocks the CNR. When PBYP is
 * clear, the CNR is clocked by the output of the prescaler/glitch filter. PBYP
 * must be altered only when the LPTMR is disabled.
 *
 * Values:
 * - 0b0 - Prescaler/glitch filter is enabled.
 * - 0b1 - Prescaler/glitch filter is bypassed.
 */
/*@{*/
/*! @brief Read current value of the LPTMR_PSR_PBYP field. */
#define LPTMR_RD_PSR_PBYP(base) ((LPTMR_PSR_REG(base) & LPTMR_PSR_PBYP_MASK) >> LPTMR_PSR_PBYP_SHIFT)
#define LPTMR_BRD_PSR_PBYP(base) (BME_UBFX32(&LPTMR_PSR_REG(base), LPTMR_PSR_PBYP_SHIFT, LPTMR_PSR_PBYP_WIDTH))

/*! @brief Set the PBYP field to a new value. */
#define LPTMR_WR_PSR_PBYP(base, value) (LPTMR_RMW_PSR(base, LPTMR_PSR_PBYP_MASK, LPTMR_PSR_PBYP(value)))
#define LPTMR_BWR_PSR_PBYP(base, value) (BME_BFI32(&LPTMR_PSR_REG(base), ((uint32_t)(value) << LPTMR_PSR_PBYP_SHIFT), LPTMR_PSR_PBYP_SHIFT, LPTMR_PSR_PBYP_WIDTH))
/*@}*/

/*!
 * @name Register LPTMR_PSR, field PRESCALE[6:3] (RW)
 *
 * Configures the size of the Prescaler in Time Counter mode or width of the
 * glitch filter in Pulse Counter mode. PRESCALE must be altered only when the LPTMR
 * is disabled.
 *
 * Values:
 * - 0b0000 - Prescaler divides the prescaler clock by 2; glitch filter does not
 *     support this configuration.
 * - 0b0001 - Prescaler divides the prescaler clock by 4; glitch filter
 *     recognizes change on input pin after 2 rising clock edges.
 * - 0b0010 - Prescaler divides the prescaler clock by 8; glitch filter
 *     recognizes change on input pin after 4 rising clock edges.
 * - 0b0011 - Prescaler divides the prescaler clock by 16; glitch filter
 *     recognizes change on input pin after 8 rising clock edges.
 * - 0b0100 - Prescaler divides the prescaler clock by 32; glitch filter
 *     recognizes change on input pin after 16 rising clock edges.
 * - 0b0101 - Prescaler divides the prescaler clock by 64; glitch filter
 *     recognizes change on input pin after 32 rising clock edges.
 * - 0b0110 - Prescaler divides the prescaler clock by 128; glitch filter
 *     recognizes change on input pin after 64 rising clock edges.
 * - 0b0111 - Prescaler divides the prescaler clock by 256; glitch filter
 *     recognizes change on input pin after 128 rising clock edges.
 * - 0b1000 - Prescaler divides the prescaler clock by 512; glitch filter
 *     recognizes change on input pin after 256 rising clock edges.
 * - 0b1001 - Prescaler divides the prescaler clock by 1024; glitch filter
 *     recognizes change on input pin after 512 rising clock edges.
 * - 0b1010 - Prescaler divides the prescaler clock by 2048; glitch filter
 *     recognizes change on input pin after 1024 rising clock edges.
 * - 0b1011 - Prescaler divides the prescaler clock by 4096; glitch filter
 *     recognizes change on input pin after 2048 rising clock edges.
 * - 0b1100 - Prescaler divides the prescaler clock by 8192; glitch filter
 *     recognizes change on input pin after 4096 rising clock edges.
 * - 0b1101 - Prescaler divides the prescaler clock by 16,384; glitch filter
 *     recognizes change on input pin after 8192 rising clock edges.
 * - 0b1110 - Prescaler divides the prescaler clock by 32,768; glitch filter
 *     recognizes change on input pin after 16,384 rising clock edges.
 * - 0b1111 - Prescaler divides the prescaler clock by 65,536; glitch filter
 *     recognizes change on input pin after 32,768 rising clock edges.
 */
/*@{*/
/*! @brief Read current value of the LPTMR_PSR_PRESCALE field. */
#define LPTMR_RD_PSR_PRESCALE(base) ((LPTMR_PSR_REG(base) & LPTMR_PSR_PRESCALE_MASK) >> LPTMR_PSR_PRESCALE_SHIFT)
#define LPTMR_BRD_PSR_PRESCALE(base) (BME_UBFX32(&LPTMR_PSR_REG(base), LPTMR_PSR_PRESCALE_SHIFT, LPTMR_PSR_PRESCALE_WIDTH))

/*! @brief Set the PRESCALE field to a new value. */
#define LPTMR_WR_PSR_PRESCALE(base, value) (LPTMR_RMW_PSR(base, LPTMR_PSR_PRESCALE_MASK, LPTMR_PSR_PRESCALE(value)))
#define LPTMR_BWR_PSR_PRESCALE(base, value) (BME_BFI32(&LPTMR_PSR_REG(base), ((uint32_t)(value) << LPTMR_PSR_PRESCALE_SHIFT), LPTMR_PSR_PRESCALE_SHIFT, LPTMR_PSR_PRESCALE_WIDTH))
/*@}*/

/*******************************************************************************
 * LPTMR_CMR - Low Power Timer Compare Register
 ******************************************************************************/

/*!
 * @brief LPTMR_CMR - Low Power Timer Compare Register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire LPTMR_CMR register
 */
/*@{*/
#define LPTMR_RD_CMR(base)       (LPTMR_CMR_REG(base))
#define LPTMR_WR_CMR(base, value) (LPTMR_CMR_REG(base) = (value))
#define LPTMR_RMW_CMR(base, mask, value) (LPTMR_WR_CMR(base, (LPTMR_RD_CMR(base) & ~(mask)) | (value)))
#define LPTMR_SET_CMR(base, value) (BME_OR32(&LPTMR_CMR_REG(base), (uint32_t)(value)))
#define LPTMR_CLR_CMR(base, value) (BME_AND32(&LPTMR_CMR_REG(base), (uint32_t)(~(value))))
#define LPTMR_TOG_CMR(base, value) (BME_XOR32(&LPTMR_CMR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LPTMR_CMR bitfields
 */

/*!
 * @name Register LPTMR_CMR, field COMPARE[15:0] (RW)
 *
 * When the LPTMR is enabled and the CNR equals the value in the CMR and
 * increments, TCF is set and the hardware trigger asserts until the next time the CNR
 * increments. If the CMR is 0, the hardware trigger will remain asserted until
 * the LPTMR is disabled. If the LPTMR is enabled, the CMR must be altered only
 * when TCF is set.
 */
/*@{*/
/*! @brief Read current value of the LPTMR_CMR_COMPARE field. */
#define LPTMR_RD_CMR_COMPARE(base) ((LPTMR_CMR_REG(base) & LPTMR_CMR_COMPARE_MASK) >> LPTMR_CMR_COMPARE_SHIFT)
#define LPTMR_BRD_CMR_COMPARE(base) (LPTMR_RD_CMR_COMPARE(base))

/*! @brief Set the COMPARE field to a new value. */
#define LPTMR_WR_CMR_COMPARE(base, value) (LPTMR_RMW_CMR(base, LPTMR_CMR_COMPARE_MASK, LPTMR_CMR_COMPARE(value)))
#define LPTMR_BWR_CMR_COMPARE(base, value) (LPTMR_WR_CMR_COMPARE(base, value))
/*@}*/

/*******************************************************************************
 * LPTMR_CNR - Low Power Timer Counter Register
 ******************************************************************************/

/*!
 * @brief LPTMR_CNR - Low Power Timer Counter Register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire LPTMR_CNR register
 */
/*@{*/
#define LPTMR_RD_CNR(base)       (LPTMR_CNR_REG(base))
#define LPTMR_WR_CNR(base, value) (LPTMR_CNR_REG(base) = (value))
#define LPTMR_RMW_CNR(base, mask, value) (LPTMR_WR_CNR(base, (LPTMR_RD_CNR(base) & ~(mask)) | (value)))
#define LPTMR_SET_CNR(base, value) (BME_OR32(&LPTMR_CNR_REG(base), (uint32_t)(value)))
#define LPTMR_CLR_CNR(base, value) (BME_AND32(&LPTMR_CNR_REG(base), (uint32_t)(~(value))))
#define LPTMR_TOG_CNR(base, value) (BME_XOR32(&LPTMR_CNR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LPTMR_CNR bitfields
 */

/*!
 * @name Register LPTMR_CNR, field COUNTER[15:0] (RW)
 */
/*@{*/
/*! @brief Read current value of the LPTMR_CNR_COUNTER field. */
#define LPTMR_RD_CNR_COUNTER(base) ((LPTMR_CNR_REG(base) & LPTMR_CNR_COUNTER_MASK) >> LPTMR_CNR_COUNTER_SHIFT)
#define LPTMR_BRD_CNR_COUNTER(base) (LPTMR_RD_CNR_COUNTER(base))

/*! @brief Set the COUNTER field to a new value. */
#define LPTMR_WR_CNR_COUNTER(base, value) (LPTMR_RMW_CNR(base, LPTMR_CNR_COUNTER_MASK, LPTMR_CNR_COUNTER(value)))
#define LPTMR_BWR_CNR_COUNTER(base, value) (LPTMR_WR_CNR_COUNTER(base, value))
/*@}*/

/*
 * MK82F25615 LPUART
 *
 * Universal Asynchronous Receiver/Transmitter
 *
 * Registers defined in this header file:
 * - LPUART_BAUD - LPUART Baud Rate Register
 * - LPUART_STAT - LPUART Status Register
 * - LPUART_CTRL - LPUART Control Register
 * - LPUART_DATA - LPUART Data Register
 * - LPUART_MATCH - LPUART Match Address Register
 * - LPUART_MODIR - LPUART Modem IrDA Register
 * - LPUART_FIFO - LPUART FIFO Register
 * - LPUART_WATER - LPUART Watermark Register
 */

#define LPUART_INSTANCE_COUNT (5U) /*!< Number of instances of the LPUART module. */
#define LPUART0_IDX (0U) /*!< Instance number for LPUART0. */
#define LPUART1_IDX (1U) /*!< Instance number for LPUART1. */
#define LPUART2_IDX (2U) /*!< Instance number for LPUART2. */
#define LPUART3_IDX (3U) /*!< Instance number for LPUART3. */
#define LPUART4_IDX (4U) /*!< Instance number for LPUART4. */

/*******************************************************************************
 * LPUART_BAUD - LPUART Baud Rate Register
 ******************************************************************************/

/*!
 * @brief LPUART_BAUD - LPUART Baud Rate Register (RW)
 *
 * Reset value: 0x0F000004U
 */
/*!
 * @name Constants and macros for entire LPUART_BAUD register
 */
/*@{*/
#define LPUART_RD_BAUD(base)     (LPUART_BAUD_REG(base))
#define LPUART_WR_BAUD(base, value) (LPUART_BAUD_REG(base) = (value))
#define LPUART_RMW_BAUD(base, mask, value) (LPUART_WR_BAUD(base, (LPUART_RD_BAUD(base) & ~(mask)) | (value)))
#define LPUART_SET_BAUD(base, value) (BME_OR32(&LPUART_BAUD_REG(base), (uint32_t)(value)))
#define LPUART_CLR_BAUD(base, value) (BME_AND32(&LPUART_BAUD_REG(base), (uint32_t)(~(value))))
#define LPUART_TOG_BAUD(base, value) (BME_XOR32(&LPUART_BAUD_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LPUART_BAUD bitfields
 */

/*!
 * @name Register LPUART_BAUD, field SBR[12:0] (RW)
 *
 * The 13 bits in SBR[12:0] set the modulo divide rate for the baud rate
 * generator. When SBR is 1 - 8191, the baud rate equals "baud clock / ((OSR+1) * SBR)".
 * The 13-bit baud rate setting [SBR12:SBR0] must only be updated when the
 * transmitter and receiver are both disabled (LPUART_CTRL[RE] and LPUART_CTRL[TE] are
 * both 0).
 */
/*@{*/
/*! @brief Read current value of the LPUART_BAUD_SBR field. */
#define LPUART_RD_BAUD_SBR(base) ((LPUART_BAUD_REG(base) & LPUART_BAUD_SBR_MASK) >> LPUART_BAUD_SBR_SHIFT)
#define LPUART_BRD_BAUD_SBR(base) (LPUART_RD_BAUD_SBR(base))

/*! @brief Set the SBR field to a new value. */
#define LPUART_WR_BAUD_SBR(base, value) (LPUART_RMW_BAUD(base, LPUART_BAUD_SBR_MASK, LPUART_BAUD_SBR(value)))
#define LPUART_BWR_BAUD_SBR(base, value) (LPUART_WR_BAUD_SBR(base, value))
/*@}*/

/*!
 * @name Register LPUART_BAUD, field SBNS[13] (RW)
 *
 * SBNS determines whether data characters are one or two stop bits. This bit
 * should only be changed when the transmitter and receiver are both disabled.
 *
 * Values:
 * - 0b0 - One stop bit.
 * - 0b1 - Two stop bits.
 */
/*@{*/
/*! @brief Read current value of the LPUART_BAUD_SBNS field. */
#define LPUART_RD_BAUD_SBNS(base) ((LPUART_BAUD_REG(base) & LPUART_BAUD_SBNS_MASK) >> LPUART_BAUD_SBNS_SHIFT)
#define LPUART_BRD_BAUD_SBNS(base) (BME_UBFX32(&LPUART_BAUD_REG(base), LPUART_BAUD_SBNS_SHIFT, LPUART_BAUD_SBNS_WIDTH))

/*! @brief Set the SBNS field to a new value. */
#define LPUART_WR_BAUD_SBNS(base, value) (LPUART_RMW_BAUD(base, LPUART_BAUD_SBNS_MASK, LPUART_BAUD_SBNS(value)))
#define LPUART_BWR_BAUD_SBNS(base, value) (BME_BFI32(&LPUART_BAUD_REG(base), ((uint32_t)(value) << LPUART_BAUD_SBNS_SHIFT), LPUART_BAUD_SBNS_SHIFT, LPUART_BAUD_SBNS_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_BAUD, field RXEDGIE[14] (RW)
 *
 * Enables the receive input active edge, RXEDGIF, to generate interrupt
 * requests. Changing CTRL[LOOP] or CTRL[RSRC] when RXEDGIE is set can cause the RXEDGIF
 * to set.
 *
 * Values:
 * - 0b0 - Hardware interrupts from LPUART_STAT[RXEDGIF] disabled (use polling).
 * - 0b1 - Hardware interrupt requested when LPUART_STAT[RXEDGIF] flag is 1.
 */
/*@{*/
/*! @brief Read current value of the LPUART_BAUD_RXEDGIE field. */
#define LPUART_RD_BAUD_RXEDGIE(base) ((LPUART_BAUD_REG(base) & LPUART_BAUD_RXEDGIE_MASK) >> LPUART_BAUD_RXEDGIE_SHIFT)
#define LPUART_BRD_BAUD_RXEDGIE(base) (BME_UBFX32(&LPUART_BAUD_REG(base), LPUART_BAUD_RXEDGIE_SHIFT, LPUART_BAUD_RXEDGIE_WIDTH))

/*! @brief Set the RXEDGIE field to a new value. */
#define LPUART_WR_BAUD_RXEDGIE(base, value) (LPUART_RMW_BAUD(base, LPUART_BAUD_RXEDGIE_MASK, LPUART_BAUD_RXEDGIE(value)))
#define LPUART_BWR_BAUD_RXEDGIE(base, value) (BME_BFI32(&LPUART_BAUD_REG(base), ((uint32_t)(value) << LPUART_BAUD_RXEDGIE_SHIFT), LPUART_BAUD_RXEDGIE_SHIFT, LPUART_BAUD_RXEDGIE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_BAUD, field LBKDIE[15] (RW)
 *
 * LBKDIE enables the LIN break detect flag, LBKDIF, to generate interrupt
 * requests.
 *
 * Values:
 * - 0b0 - Hardware interrupts from LPUART_STAT[LBKDIF] disabled (use polling).
 * - 0b1 - Hardware interrupt requested when LPUART_STAT[LBKDIF] flag is 1.
 */
/*@{*/
/*! @brief Read current value of the LPUART_BAUD_LBKDIE field. */
#define LPUART_RD_BAUD_LBKDIE(base) ((LPUART_BAUD_REG(base) & LPUART_BAUD_LBKDIE_MASK) >> LPUART_BAUD_LBKDIE_SHIFT)
#define LPUART_BRD_BAUD_LBKDIE(base) (BME_UBFX32(&LPUART_BAUD_REG(base), LPUART_BAUD_LBKDIE_SHIFT, LPUART_BAUD_LBKDIE_WIDTH))

/*! @brief Set the LBKDIE field to a new value. */
#define LPUART_WR_BAUD_LBKDIE(base, value) (LPUART_RMW_BAUD(base, LPUART_BAUD_LBKDIE_MASK, LPUART_BAUD_LBKDIE(value)))
#define LPUART_BWR_BAUD_LBKDIE(base, value) (BME_BFI32(&LPUART_BAUD_REG(base), ((uint32_t)(value) << LPUART_BAUD_LBKDIE_SHIFT), LPUART_BAUD_LBKDIE_SHIFT, LPUART_BAUD_LBKDIE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_BAUD, field RESYNCDIS[16] (RW)
 *
 * When set, disables the resynchronization of the received data word when a
 * data one followed by data zero transition is detected. This bit should only be
 * changed when the receiver is disabled.
 *
 * Values:
 * - 0b0 - Resynchronization during received data word is supported
 * - 0b1 - Resynchronization during received data word is disabled
 */
/*@{*/
/*! @brief Read current value of the LPUART_BAUD_RESYNCDIS field. */
#define LPUART_RD_BAUD_RESYNCDIS(base) ((LPUART_BAUD_REG(base) & LPUART_BAUD_RESYNCDIS_MASK) >> LPUART_BAUD_RESYNCDIS_SHIFT)
#define LPUART_BRD_BAUD_RESYNCDIS(base) (BME_UBFX32(&LPUART_BAUD_REG(base), LPUART_BAUD_RESYNCDIS_SHIFT, LPUART_BAUD_RESYNCDIS_WIDTH))

/*! @brief Set the RESYNCDIS field to a new value. */
#define LPUART_WR_BAUD_RESYNCDIS(base, value) (LPUART_RMW_BAUD(base, LPUART_BAUD_RESYNCDIS_MASK, LPUART_BAUD_RESYNCDIS(value)))
#define LPUART_BWR_BAUD_RESYNCDIS(base, value) (BME_BFI32(&LPUART_BAUD_REG(base), ((uint32_t)(value) << LPUART_BAUD_RESYNCDIS_SHIFT), LPUART_BAUD_RESYNCDIS_SHIFT, LPUART_BAUD_RESYNCDIS_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_BAUD, field BOTHEDGE[17] (RW)
 *
 * Enables sampling of the received data on both edges of the baud rate clock,
 * effectively doubling the number of times the receiver samples the input data
 * for a given oversampling ratio. This bit must be set for oversampling ratios
 * between x4 and x7 and is optional for higher oversampling ratios. This bit should
 * only be changed when the receiver is disabled.
 *
 * Values:
 * - 0b0 - Receiver samples input data using the rising edge of the baud rate
 *     clock.
 * - 0b1 - Receiver samples input data using the rising and falling edge of the
 *     baud rate clock.
 */
/*@{*/
/*! @brief Read current value of the LPUART_BAUD_BOTHEDGE field. */
#define LPUART_RD_BAUD_BOTHEDGE(base) ((LPUART_BAUD_REG(base) & LPUART_BAUD_BOTHEDGE_MASK) >> LPUART_BAUD_BOTHEDGE_SHIFT)
#define LPUART_BRD_BAUD_BOTHEDGE(base) (BME_UBFX32(&LPUART_BAUD_REG(base), LPUART_BAUD_BOTHEDGE_SHIFT, LPUART_BAUD_BOTHEDGE_WIDTH))

/*! @brief Set the BOTHEDGE field to a new value. */
#define LPUART_WR_BAUD_BOTHEDGE(base, value) (LPUART_RMW_BAUD(base, LPUART_BAUD_BOTHEDGE_MASK, LPUART_BAUD_BOTHEDGE(value)))
#define LPUART_BWR_BAUD_BOTHEDGE(base, value) (BME_BFI32(&LPUART_BAUD_REG(base), ((uint32_t)(value) << LPUART_BAUD_BOTHEDGE_SHIFT), LPUART_BAUD_BOTHEDGE_SHIFT, LPUART_BAUD_BOTHEDGE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_BAUD, field MATCFG[19:18] (RW)
 *
 * Configures the match addressing mode used.
 *
 * Values:
 * - 0b00 - Address Match Wakeup
 * - 0b01 - Idle Match Wakeup
 * - 0b10 - Match On and Match Off
 * - 0b11 - Enables RWU on Data Match and Match On/Off for transmitter CTS input
 */
/*@{*/
/*! @brief Read current value of the LPUART_BAUD_MATCFG field. */
#define LPUART_RD_BAUD_MATCFG(base) ((LPUART_BAUD_REG(base) & LPUART_BAUD_MATCFG_MASK) >> LPUART_BAUD_MATCFG_SHIFT)
#define LPUART_BRD_BAUD_MATCFG(base) (BME_UBFX32(&LPUART_BAUD_REG(base), LPUART_BAUD_MATCFG_SHIFT, LPUART_BAUD_MATCFG_WIDTH))

/*! @brief Set the MATCFG field to a new value. */
#define LPUART_WR_BAUD_MATCFG(base, value) (LPUART_RMW_BAUD(base, LPUART_BAUD_MATCFG_MASK, LPUART_BAUD_MATCFG(value)))
#define LPUART_BWR_BAUD_MATCFG(base, value) (BME_BFI32(&LPUART_BAUD_REG(base), ((uint32_t)(value) << LPUART_BAUD_MATCFG_SHIFT), LPUART_BAUD_MATCFG_SHIFT, LPUART_BAUD_MATCFG_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_BAUD, field RDMAE[21] (RW)
 *
 * RDMAE configures the receiver data register full flag, LPUART_STAT[RDRF], to
 * generate a DMA request.
 *
 * Values:
 * - 0b0 - DMA request disabled.
 * - 0b1 - DMA request enabled.
 */
/*@{*/
/*! @brief Read current value of the LPUART_BAUD_RDMAE field. */
#define LPUART_RD_BAUD_RDMAE(base) ((LPUART_BAUD_REG(base) & LPUART_BAUD_RDMAE_MASK) >> LPUART_BAUD_RDMAE_SHIFT)
#define LPUART_BRD_BAUD_RDMAE(base) (BME_UBFX32(&LPUART_BAUD_REG(base), LPUART_BAUD_RDMAE_SHIFT, LPUART_BAUD_RDMAE_WIDTH))

/*! @brief Set the RDMAE field to a new value. */
#define LPUART_WR_BAUD_RDMAE(base, value) (LPUART_RMW_BAUD(base, LPUART_BAUD_RDMAE_MASK, LPUART_BAUD_RDMAE(value)))
#define LPUART_BWR_BAUD_RDMAE(base, value) (BME_BFI32(&LPUART_BAUD_REG(base), ((uint32_t)(value) << LPUART_BAUD_RDMAE_SHIFT), LPUART_BAUD_RDMAE_SHIFT, LPUART_BAUD_RDMAE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_BAUD, field TDMAE[23] (RW)
 *
 * TDMAE configures the transmit data register empty flag, LPUART_STAT[TDRE], to
 * generate a DMA request.
 *
 * Values:
 * - 0b0 - DMA request disabled.
 * - 0b1 - DMA request enabled.
 */
/*@{*/
/*! @brief Read current value of the LPUART_BAUD_TDMAE field. */
#define LPUART_RD_BAUD_TDMAE(base) ((LPUART_BAUD_REG(base) & LPUART_BAUD_TDMAE_MASK) >> LPUART_BAUD_TDMAE_SHIFT)
#define LPUART_BRD_BAUD_TDMAE(base) (BME_UBFX32(&LPUART_BAUD_REG(base), LPUART_BAUD_TDMAE_SHIFT, LPUART_BAUD_TDMAE_WIDTH))

/*! @brief Set the TDMAE field to a new value. */
#define LPUART_WR_BAUD_TDMAE(base, value) (LPUART_RMW_BAUD(base, LPUART_BAUD_TDMAE_MASK, LPUART_BAUD_TDMAE(value)))
#define LPUART_BWR_BAUD_TDMAE(base, value) (BME_BFI32(&LPUART_BAUD_REG(base), ((uint32_t)(value) << LPUART_BAUD_TDMAE_SHIFT), LPUART_BAUD_TDMAE_SHIFT, LPUART_BAUD_TDMAE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_BAUD, field OSR[28:24] (RW)
 *
 * This field configures the oversampling ratio for the receiver between 4x
 * (00011) and 32x (11111). Writing an invalid oversampling ratio will default to an
 * oversampling ratio of 16 (01111). This field should only be changed when the
 * transmitter and receiver are both disabled.
 */
/*@{*/
/*! @brief Read current value of the LPUART_BAUD_OSR field. */
#define LPUART_RD_BAUD_OSR(base) ((LPUART_BAUD_REG(base) & LPUART_BAUD_OSR_MASK) >> LPUART_BAUD_OSR_SHIFT)
#define LPUART_BRD_BAUD_OSR(base) (BME_UBFX32(&LPUART_BAUD_REG(base), LPUART_BAUD_OSR_SHIFT, LPUART_BAUD_OSR_WIDTH))

/*! @brief Set the OSR field to a new value. */
#define LPUART_WR_BAUD_OSR(base, value) (LPUART_RMW_BAUD(base, LPUART_BAUD_OSR_MASK, LPUART_BAUD_OSR(value)))
#define LPUART_BWR_BAUD_OSR(base, value) (BME_BFI32(&LPUART_BAUD_REG(base), ((uint32_t)(value) << LPUART_BAUD_OSR_SHIFT), LPUART_BAUD_OSR_SHIFT, LPUART_BAUD_OSR_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_BAUD, field M10[29] (RW)
 *
 * The M10 bit causes a tenth bit to be part of the serial transmission. This
 * bit should only be changed when the transmitter and receiver are both disabled.
 *
 * Values:
 * - 0b0 - Receiver and transmitter use 8-bit or 9-bit data characters.
 * - 0b1 - Receiver and transmitter use 10-bit data characters.
 */
/*@{*/
/*! @brief Read current value of the LPUART_BAUD_M10 field. */
#define LPUART_RD_BAUD_M10(base) ((LPUART_BAUD_REG(base) & LPUART_BAUD_M10_MASK) >> LPUART_BAUD_M10_SHIFT)
#define LPUART_BRD_BAUD_M10(base) (BME_UBFX32(&LPUART_BAUD_REG(base), LPUART_BAUD_M10_SHIFT, LPUART_BAUD_M10_WIDTH))

/*! @brief Set the M10 field to a new value. */
#define LPUART_WR_BAUD_M10(base, value) (LPUART_RMW_BAUD(base, LPUART_BAUD_M10_MASK, LPUART_BAUD_M10(value)))
#define LPUART_BWR_BAUD_M10(base, value) (BME_BFI32(&LPUART_BAUD_REG(base), ((uint32_t)(value) << LPUART_BAUD_M10_SHIFT), LPUART_BAUD_M10_SHIFT, LPUART_BAUD_M10_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_BAUD, field MAEN2[30] (RW)
 *
 * Values:
 * - 0b0 - Normal operation.
 * - 0b1 - Enables automatic address matching or data matching mode for
 *     MATCH[MA2].
 */
/*@{*/
/*! @brief Read current value of the LPUART_BAUD_MAEN2 field. */
#define LPUART_RD_BAUD_MAEN2(base) ((LPUART_BAUD_REG(base) & LPUART_BAUD_MAEN2_MASK) >> LPUART_BAUD_MAEN2_SHIFT)
#define LPUART_BRD_BAUD_MAEN2(base) (BME_UBFX32(&LPUART_BAUD_REG(base), LPUART_BAUD_MAEN2_SHIFT, LPUART_BAUD_MAEN2_WIDTH))

/*! @brief Set the MAEN2 field to a new value. */
#define LPUART_WR_BAUD_MAEN2(base, value) (LPUART_RMW_BAUD(base, LPUART_BAUD_MAEN2_MASK, LPUART_BAUD_MAEN2(value)))
#define LPUART_BWR_BAUD_MAEN2(base, value) (BME_BFI32(&LPUART_BAUD_REG(base), ((uint32_t)(value) << LPUART_BAUD_MAEN2_SHIFT), LPUART_BAUD_MAEN2_SHIFT, LPUART_BAUD_MAEN2_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_BAUD, field MAEN1[31] (RW)
 *
 * Values:
 * - 0b0 - Normal operation.
 * - 0b1 - Enables automatic address matching or data matching mode for
 *     MATCH[MA1].
 */
/*@{*/
/*! @brief Read current value of the LPUART_BAUD_MAEN1 field. */
#define LPUART_RD_BAUD_MAEN1(base) ((LPUART_BAUD_REG(base) & LPUART_BAUD_MAEN1_MASK) >> LPUART_BAUD_MAEN1_SHIFT)
#define LPUART_BRD_BAUD_MAEN1(base) (BME_UBFX32(&LPUART_BAUD_REG(base), LPUART_BAUD_MAEN1_SHIFT, LPUART_BAUD_MAEN1_WIDTH))

/*! @brief Set the MAEN1 field to a new value. */
#define LPUART_WR_BAUD_MAEN1(base, value) (LPUART_RMW_BAUD(base, LPUART_BAUD_MAEN1_MASK, LPUART_BAUD_MAEN1(value)))
#define LPUART_BWR_BAUD_MAEN1(base, value) (BME_BFI32(&LPUART_BAUD_REG(base), ((uint32_t)(value) << LPUART_BAUD_MAEN1_SHIFT), LPUART_BAUD_MAEN1_SHIFT, LPUART_BAUD_MAEN1_WIDTH))
/*@}*/

/*******************************************************************************
 * LPUART_STAT - LPUART Status Register
 ******************************************************************************/

/*!
 * @brief LPUART_STAT - LPUART Status Register (RW)
 *
 * Reset value: 0x00C00000U
 */
/*!
 * @name Constants and macros for entire LPUART_STAT register
 */
/*@{*/
#define LPUART_RD_STAT(base)     (LPUART_STAT_REG(base))
#define LPUART_WR_STAT(base, value) (LPUART_STAT_REG(base) = (value))
#define LPUART_RMW_STAT(base, mask, value) (LPUART_WR_STAT(base, (LPUART_RD_STAT(base) & ~(mask)) | (value)))
#define LPUART_SET_STAT(base, value) (BME_OR32(&LPUART_STAT_REG(base), (uint32_t)(value)))
#define LPUART_CLR_STAT(base, value) (BME_AND32(&LPUART_STAT_REG(base), (uint32_t)(~(value))))
#define LPUART_TOG_STAT(base, value) (BME_XOR32(&LPUART_STAT_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LPUART_STAT bitfields
 */

/*!
 * @name Register LPUART_STAT, field MA2F[14] (W1C)
 *
 * MA2F is set whenever the next character to be read from LPUART_DATA matches
 * MA2. To clear MA2F, write a logic one to the MA2F.
 *
 * Values:
 * - 0b0 - Received data is not equal to MA2
 * - 0b1 - Received data is equal to MA2
 */
/*@{*/
/*! @brief Read current value of the LPUART_STAT_MA2F field. */
#define LPUART_RD_STAT_MA2F(base) ((LPUART_STAT_REG(base) & LPUART_STAT_MA2F_MASK) >> LPUART_STAT_MA2F_SHIFT)
#define LPUART_BRD_STAT_MA2F(base) (BME_UBFX32(&LPUART_STAT_REG(base), LPUART_STAT_MA2F_SHIFT, LPUART_STAT_MA2F_WIDTH))

/*! @brief Set the MA2F field to a new value. */
#define LPUART_WR_STAT_MA2F(base, value) (LPUART_RMW_STAT(base, (LPUART_STAT_MA2F_MASK | LPUART_STAT_MA1F_MASK | LPUART_STAT_PF_MASK | LPUART_STAT_FE_MASK | LPUART_STAT_NF_MASK | LPUART_STAT_OR_MASK | LPUART_STAT_IDLE_MASK | LPUART_STAT_RXEDGIF_MASK | LPUART_STAT_LBKDIF_MASK), LPUART_STAT_MA2F(value)))
#define LPUART_BWR_STAT_MA2F(base, value) (BME_BFI32(&LPUART_STAT_REG(base), ((uint32_t)(value) << LPUART_STAT_MA2F_SHIFT), LPUART_STAT_MA2F_SHIFT, LPUART_STAT_MA2F_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_STAT, field MA1F[15] (W1C)
 *
 * MA1F is set whenever the next character to be read from LPUART_DATA matches
 * MA1. To clear MA1F, write a logic one to the MA1F.
 *
 * Values:
 * - 0b0 - Received data is not equal to MA1
 * - 0b1 - Received data is equal to MA1
 */
/*@{*/
/*! @brief Read current value of the LPUART_STAT_MA1F field. */
#define LPUART_RD_STAT_MA1F(base) ((LPUART_STAT_REG(base) & LPUART_STAT_MA1F_MASK) >> LPUART_STAT_MA1F_SHIFT)
#define LPUART_BRD_STAT_MA1F(base) (BME_UBFX32(&LPUART_STAT_REG(base), LPUART_STAT_MA1F_SHIFT, LPUART_STAT_MA1F_WIDTH))

/*! @brief Set the MA1F field to a new value. */
#define LPUART_WR_STAT_MA1F(base, value) (LPUART_RMW_STAT(base, (LPUART_STAT_MA1F_MASK | LPUART_STAT_MA2F_MASK | LPUART_STAT_PF_MASK | LPUART_STAT_FE_MASK | LPUART_STAT_NF_MASK | LPUART_STAT_OR_MASK | LPUART_STAT_IDLE_MASK | LPUART_STAT_RXEDGIF_MASK | LPUART_STAT_LBKDIF_MASK), LPUART_STAT_MA1F(value)))
#define LPUART_BWR_STAT_MA1F(base, value) (BME_BFI32(&LPUART_STAT_REG(base), ((uint32_t)(value) << LPUART_STAT_MA1F_SHIFT), LPUART_STAT_MA1F_SHIFT, LPUART_STAT_MA1F_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_STAT, field PF[16] (W1C)
 *
 * PF is set whenever the next character to be read from LPUART_DATA was
 * received when parity is enabled (PE = 1) and the parity bit in the received character
 * does not agree with the expected parity value. To clear PF, write a logic one
 * to the PF.
 *
 * Values:
 * - 0b0 - No parity error.
 * - 0b1 - Parity error.
 */
/*@{*/
/*! @brief Read current value of the LPUART_STAT_PF field. */
#define LPUART_RD_STAT_PF(base) ((LPUART_STAT_REG(base) & LPUART_STAT_PF_MASK) >> LPUART_STAT_PF_SHIFT)
#define LPUART_BRD_STAT_PF(base) (BME_UBFX32(&LPUART_STAT_REG(base), LPUART_STAT_PF_SHIFT, LPUART_STAT_PF_WIDTH))

/*! @brief Set the PF field to a new value. */
#define LPUART_WR_STAT_PF(base, value) (LPUART_RMW_STAT(base, (LPUART_STAT_PF_MASK | LPUART_STAT_MA2F_MASK | LPUART_STAT_MA1F_MASK | LPUART_STAT_FE_MASK | LPUART_STAT_NF_MASK | LPUART_STAT_OR_MASK | LPUART_STAT_IDLE_MASK | LPUART_STAT_RXEDGIF_MASK | LPUART_STAT_LBKDIF_MASK), LPUART_STAT_PF(value)))
#define LPUART_BWR_STAT_PF(base, value) (BME_BFI32(&LPUART_STAT_REG(base), ((uint32_t)(value) << LPUART_STAT_PF_SHIFT), LPUART_STAT_PF_SHIFT, LPUART_STAT_PF_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_STAT, field FE[17] (W1C)
 *
 * FE is set whenever the next character to be read from LPUART_DATA was
 * received with logic 0 detected where a stop bit was expected. To clear FE, write
 * logic one to the FE.
 *
 * Values:
 * - 0b0 - No framing error detected. This does not guarantee the framing is
 *     correct.
 * - 0b1 - Framing error.
 */
/*@{*/
/*! @brief Read current value of the LPUART_STAT_FE field. */
#define LPUART_RD_STAT_FE(base) ((LPUART_STAT_REG(base) & LPUART_STAT_FE_MASK) >> LPUART_STAT_FE_SHIFT)
#define LPUART_BRD_STAT_FE(base) (BME_UBFX32(&LPUART_STAT_REG(base), LPUART_STAT_FE_SHIFT, LPUART_STAT_FE_WIDTH))

/*! @brief Set the FE field to a new value. */
#define LPUART_WR_STAT_FE(base, value) (LPUART_RMW_STAT(base, (LPUART_STAT_FE_MASK | LPUART_STAT_MA2F_MASK | LPUART_STAT_MA1F_MASK | LPUART_STAT_PF_MASK | LPUART_STAT_NF_MASK | LPUART_STAT_OR_MASK | LPUART_STAT_IDLE_MASK | LPUART_STAT_RXEDGIF_MASK | LPUART_STAT_LBKDIF_MASK), LPUART_STAT_FE(value)))
#define LPUART_BWR_STAT_FE(base, value) (BME_BFI32(&LPUART_STAT_REG(base), ((uint32_t)(value) << LPUART_STAT_FE_SHIFT), LPUART_STAT_FE_SHIFT, LPUART_STAT_FE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_STAT, field NF[18] (W1C)
 *
 * The advanced sampling technique used in the receiver takes three samples in
 * each of the received bits. If any of these samples disagrees with the rest of
 * the samples within any bit time in the frame then noise is detected for that
 * character. NF is set whenever the next character to be read from LPUART_DATA was
 * received with noise detected within the character. To clear NF, write logic
 * one to the NF.
 *
 * Values:
 * - 0b0 - No noise detected.
 * - 0b1 - Noise detected in the received character in LPUART_DATA.
 */
/*@{*/
/*! @brief Read current value of the LPUART_STAT_NF field. */
#define LPUART_RD_STAT_NF(base) ((LPUART_STAT_REG(base) & LPUART_STAT_NF_MASK) >> LPUART_STAT_NF_SHIFT)
#define LPUART_BRD_STAT_NF(base) (BME_UBFX32(&LPUART_STAT_REG(base), LPUART_STAT_NF_SHIFT, LPUART_STAT_NF_WIDTH))

/*! @brief Set the NF field to a new value. */
#define LPUART_WR_STAT_NF(base, value) (LPUART_RMW_STAT(base, (LPUART_STAT_NF_MASK | LPUART_STAT_MA2F_MASK | LPUART_STAT_MA1F_MASK | LPUART_STAT_PF_MASK | LPUART_STAT_FE_MASK | LPUART_STAT_OR_MASK | LPUART_STAT_IDLE_MASK | LPUART_STAT_RXEDGIF_MASK | LPUART_STAT_LBKDIF_MASK), LPUART_STAT_NF(value)))
#define LPUART_BWR_STAT_NF(base, value) (BME_BFI32(&LPUART_STAT_REG(base), ((uint32_t)(value) << LPUART_STAT_NF_SHIFT), LPUART_STAT_NF_SHIFT, LPUART_STAT_NF_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_STAT, field OR[19] (W1C)
 *
 * OR is set when software fails to prevent the receive data register from
 * overflowing with data. The OR bit is set immediately after the stop bit has been
 * completely received for the dataword that overflows the buffer and all the other
 * error flags (FE, NF, and PF) are prevented from setting. The data in the
 * shift register is lost, but the data already in the LPUART data registers is not
 * affected. If LBKDE is enabled and a LIN Break is detected, the OR field asserts
 * if LBKDIF is not cleared before the next data character is received. While
 * the OR flag is set, no additional data is stored in the data buffer even if
 * sufficient room exists. To clear OR, write logic 1 to the OR flag.
 *
 * Values:
 * - 0b0 - No overrun.
 * - 0b1 - Receive overrun (new LPUART data lost).
 */
/*@{*/
/*! @brief Read current value of the LPUART_STAT_OR field. */
#define LPUART_RD_STAT_OR(base) ((LPUART_STAT_REG(base) & LPUART_STAT_OR_MASK) >> LPUART_STAT_OR_SHIFT)
#define LPUART_BRD_STAT_OR(base) (BME_UBFX32(&LPUART_STAT_REG(base), LPUART_STAT_OR_SHIFT, LPUART_STAT_OR_WIDTH))

/*! @brief Set the OR field to a new value. */
#define LPUART_WR_STAT_OR(base, value) (LPUART_RMW_STAT(base, (LPUART_STAT_OR_MASK | LPUART_STAT_MA2F_MASK | LPUART_STAT_MA1F_MASK | LPUART_STAT_PF_MASK | LPUART_STAT_FE_MASK | LPUART_STAT_NF_MASK | LPUART_STAT_IDLE_MASK | LPUART_STAT_RXEDGIF_MASK | LPUART_STAT_LBKDIF_MASK), LPUART_STAT_OR(value)))
#define LPUART_BWR_STAT_OR(base, value) (BME_BFI32(&LPUART_STAT_REG(base), ((uint32_t)(value) << LPUART_STAT_OR_SHIFT), LPUART_STAT_OR_SHIFT, LPUART_STAT_OR_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_STAT, field IDLE[20] (W1C)
 *
 * IDLE is set when the LPUART receive line becomes idle for a full character
 * time after a period of activity. When ILT is cleared, the receiver starts
 * counting idle bit times after the start bit. If the receive character is all 1s,
 * these bit times and the stop bits time count toward the full character time of
 * logic high, 10 to 13 bit times, needed for the receiver to detect an idle line.
 * When ILT is set, the receiver doesn't start counting idle bit times until
 * after the stop bits. The stop bits and any logic high bit times at the end of the
 * previous character do not count toward the full character time of logic high
 * needed for the receiver to detect an idle line. To clear IDLE, write logic 1 to
 * the IDLE flag. After IDLE has been cleared, it cannot become set again until
 * after a new character has been stored in the receive buffer or a LIN break
 * character has set the LBKDIF flag . IDLE is set only once even if the receive
 * line remains idle for an extended period.
 *
 * Values:
 * - 0b0 - No idle line detected.
 * - 0b1 - Idle line was detected.
 */
/*@{*/
/*! @brief Read current value of the LPUART_STAT_IDLE field. */
#define LPUART_RD_STAT_IDLE(base) ((LPUART_STAT_REG(base) & LPUART_STAT_IDLE_MASK) >> LPUART_STAT_IDLE_SHIFT)
#define LPUART_BRD_STAT_IDLE(base) (BME_UBFX32(&LPUART_STAT_REG(base), LPUART_STAT_IDLE_SHIFT, LPUART_STAT_IDLE_WIDTH))

/*! @brief Set the IDLE field to a new value. */
#define LPUART_WR_STAT_IDLE(base, value) (LPUART_RMW_STAT(base, (LPUART_STAT_IDLE_MASK | LPUART_STAT_MA2F_MASK | LPUART_STAT_MA1F_MASK | LPUART_STAT_PF_MASK | LPUART_STAT_FE_MASK | LPUART_STAT_NF_MASK | LPUART_STAT_OR_MASK | LPUART_STAT_RXEDGIF_MASK | LPUART_STAT_LBKDIF_MASK), LPUART_STAT_IDLE(value)))
#define LPUART_BWR_STAT_IDLE(base, value) (BME_BFI32(&LPUART_STAT_REG(base), ((uint32_t)(value) << LPUART_STAT_IDLE_SHIFT), LPUART_STAT_IDLE_SHIFT, LPUART_STAT_IDLE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_STAT, field RDRF[21] (RO)
 *
 * RDRF is set when the receive buffer (LPUART_DATA) is full. To clear RDRF,
 * read the LPUART_DATA register. A character that is in the process of being
 * received does not cause a change in RDRF until the entire character is received.
 * Even if RDRF is set, the character will continue to be received until an overrun
 * condition occurs once the entire character is received.
 *
 * Values:
 * - 0b0 - Receive data buffer empty.
 * - 0b1 - Receive data buffer full.
 */
/*@{*/
/*! @brief Read current value of the LPUART_STAT_RDRF field. */
#define LPUART_RD_STAT_RDRF(base) ((LPUART_STAT_REG(base) & LPUART_STAT_RDRF_MASK) >> LPUART_STAT_RDRF_SHIFT)
#define LPUART_BRD_STAT_RDRF(base) (BME_UBFX32(&LPUART_STAT_REG(base), LPUART_STAT_RDRF_SHIFT, LPUART_STAT_RDRF_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_STAT, field TC[22] (RO)
 *
 * TC is cleared when there is a transmission in progress or when a preamble or
 * break character is loaded. TC is set when the transmit buffer is empty and no
 * data, preamble, or break character is being transmitted. When TC is set, the
 * transmit data output signal becomes idle (logic 1). TC is cleared by writing to
 * LPUART_DATA to transmit new data, queuing a preamble by clearing and then
 * setting LPUART_CTRL[TE], queuing a break character by writing 1 to
 * LPUART_CTRL[SBK].
 *
 * Values:
 * - 0b0 - Transmitter active (sending data, a preamble, or a break).
 * - 0b1 - Transmitter idle (transmission activity complete).
 */
/*@{*/
/*! @brief Read current value of the LPUART_STAT_TC field. */
#define LPUART_RD_STAT_TC(base) ((LPUART_STAT_REG(base) & LPUART_STAT_TC_MASK) >> LPUART_STAT_TC_SHIFT)
#define LPUART_BRD_STAT_TC(base) (BME_UBFX32(&LPUART_STAT_REG(base), LPUART_STAT_TC_SHIFT, LPUART_STAT_TC_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_STAT, field TDRE[23] (RO)
 *
 * TDRE will set when the transmit data register (LPUART_DATA) is empty. To
 * clear TDRE, write to the LPUART data register (LPUART_DATA). TDRE is not affected
 * by a character that is in the process of being transmitted, it is updated at
 * the start of each transmitted character.
 *
 * Values:
 * - 0b0 - Transmit data buffer full.
 * - 0b1 - Transmit data buffer empty.
 */
/*@{*/
/*! @brief Read current value of the LPUART_STAT_TDRE field. */
#define LPUART_RD_STAT_TDRE(base) ((LPUART_STAT_REG(base) & LPUART_STAT_TDRE_MASK) >> LPUART_STAT_TDRE_SHIFT)
#define LPUART_BRD_STAT_TDRE(base) (BME_UBFX32(&LPUART_STAT_REG(base), LPUART_STAT_TDRE_SHIFT, LPUART_STAT_TDRE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_STAT, field RAF[24] (RO)
 *
 * RAF is set when the receiver detects the beginning of a valid start bit, and
 * RAF is cleared automatically when the receiver detects an idle line.
 *
 * Values:
 * - 0b0 - LPUART receiver idle waiting for a start bit.
 * - 0b1 - LPUART receiver active (LPUART_RX input not idle).
 */
/*@{*/
/*! @brief Read current value of the LPUART_STAT_RAF field. */
#define LPUART_RD_STAT_RAF(base) ((LPUART_STAT_REG(base) & LPUART_STAT_RAF_MASK) >> LPUART_STAT_RAF_SHIFT)
#define LPUART_BRD_STAT_RAF(base) (BME_UBFX32(&LPUART_STAT_REG(base), LPUART_STAT_RAF_SHIFT, LPUART_STAT_RAF_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_STAT, field LBKDE[25] (RW)
 *
 * LBKDE selects a longer break character detection length. While LBKDE is set,
 * receive data is not stored in the receive data buffer.
 *
 * Values:
 * - 0b0 - Break character is detected at length 10 bit times (if M = 0, SBNS =
 *     0) or 11 (if M = 1, SBNS = 0 or M = 0, SBNS = 1) or 12 (if M = 1, SBNS = 1
 *     or M10 = 1, SNBS = 0) or 13 (if M10 = 1, SNBS = 1).
 * - 0b1 - Break character is detected at length of 11 bit times (if M = 0, SBNS
 *     = 0) or 12 (if M = 1, SBNS = 0 or M = 0, SBNS = 1) or 14 (if M = 1, SBNS
 *     = 1 or M10 = 1, SNBS = 0) or 15 (if M10 = 1, SNBS = 1).
 */
/*@{*/
/*! @brief Read current value of the LPUART_STAT_LBKDE field. */
#define LPUART_RD_STAT_LBKDE(base) ((LPUART_STAT_REG(base) & LPUART_STAT_LBKDE_MASK) >> LPUART_STAT_LBKDE_SHIFT)
#define LPUART_BRD_STAT_LBKDE(base) (BME_UBFX32(&LPUART_STAT_REG(base), LPUART_STAT_LBKDE_SHIFT, LPUART_STAT_LBKDE_WIDTH))

/*! @brief Set the LBKDE field to a new value. */
#define LPUART_WR_STAT_LBKDE(base, value) (LPUART_RMW_STAT(base, (LPUART_STAT_LBKDE_MASK | LPUART_STAT_MA2F_MASK | LPUART_STAT_MA1F_MASK | LPUART_STAT_PF_MASK | LPUART_STAT_FE_MASK | LPUART_STAT_NF_MASK | LPUART_STAT_OR_MASK | LPUART_STAT_IDLE_MASK | LPUART_STAT_RXEDGIF_MASK | LPUART_STAT_LBKDIF_MASK), LPUART_STAT_LBKDE(value)))
#define LPUART_BWR_STAT_LBKDE(base, value) (BME_BFI32(&LPUART_STAT_REG(base), ((uint32_t)(value) << LPUART_STAT_LBKDE_SHIFT), LPUART_STAT_LBKDE_SHIFT, LPUART_STAT_LBKDE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_STAT, field BRK13[26] (RW)
 *
 * BRK13 selects a longer transmitted break character length. Detection of a
 * framing error is not affected by the state of this bit. This bit should only be
 * changed when the transmitter is disabled.
 *
 * Values:
 * - 0b0 - Break character is transmitted with length of 10 bit times (if M = 0,
 *     SBNS = 0) or 11 (if M = 1, SBNS = 0 or M = 0, SBNS = 1) or 12 (if M = 1,
 *     SBNS = 1 or M10 = 1, SNBS = 0) or 13 (if M10 = 1, SNBS = 1).
 * - 0b1 - Break character is transmitted with length of 13 bit times (if M = 0,
 *     SBNS = 0) or 14 (if M = 1, SBNS = 0 or M = 0, SBNS = 1) or 15 (if M = 1,
 *     SBNS = 1 or M10 = 1, SNBS = 0) or 16 (if M10 = 1, SNBS = 1).
 */
/*@{*/
/*! @brief Read current value of the LPUART_STAT_BRK13 field. */
#define LPUART_RD_STAT_BRK13(base) ((LPUART_STAT_REG(base) & LPUART_STAT_BRK13_MASK) >> LPUART_STAT_BRK13_SHIFT)
#define LPUART_BRD_STAT_BRK13(base) (BME_UBFX32(&LPUART_STAT_REG(base), LPUART_STAT_BRK13_SHIFT, LPUART_STAT_BRK13_WIDTH))

/*! @brief Set the BRK13 field to a new value. */
#define LPUART_WR_STAT_BRK13(base, value) (LPUART_RMW_STAT(base, (LPUART_STAT_BRK13_MASK | LPUART_STAT_MA2F_MASK | LPUART_STAT_MA1F_MASK | LPUART_STAT_PF_MASK | LPUART_STAT_FE_MASK | LPUART_STAT_NF_MASK | LPUART_STAT_OR_MASK | LPUART_STAT_IDLE_MASK | LPUART_STAT_RXEDGIF_MASK | LPUART_STAT_LBKDIF_MASK), LPUART_STAT_BRK13(value)))
#define LPUART_BWR_STAT_BRK13(base, value) (BME_BFI32(&LPUART_STAT_REG(base), ((uint32_t)(value) << LPUART_STAT_BRK13_SHIFT), LPUART_STAT_BRK13_SHIFT, LPUART_STAT_BRK13_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_STAT, field RWUID[27] (RW)
 *
 * For RWU on idle character, RWUID controls whether the idle character that
 * wakes up the receiver sets the IDLE bit. For address match wakeup, RWUID controls
 * if the IDLE bit is set when the address does not match. This bit should only
 * be changed when the receiver is disabled.
 *
 * Values:
 * - 0b0 - During receive standby state (RWU = 1), the IDLE bit does not get set
 *     upon detection of an idle character. During address match wakeup, the
 *     IDLE bit does not get set when an address does not match.
 * - 0b1 - During receive standby state (RWU = 1), the IDLE bit gets set upon
 *     detection of an idle character. During address match wakeup, the IDLE bit
 *     does get set when an address does not match.
 */
/*@{*/
/*! @brief Read current value of the LPUART_STAT_RWUID field. */
#define LPUART_RD_STAT_RWUID(base) ((LPUART_STAT_REG(base) & LPUART_STAT_RWUID_MASK) >> LPUART_STAT_RWUID_SHIFT)
#define LPUART_BRD_STAT_RWUID(base) (BME_UBFX32(&LPUART_STAT_REG(base), LPUART_STAT_RWUID_SHIFT, LPUART_STAT_RWUID_WIDTH))

/*! @brief Set the RWUID field to a new value. */
#define LPUART_WR_STAT_RWUID(base, value) (LPUART_RMW_STAT(base, (LPUART_STAT_RWUID_MASK | LPUART_STAT_MA2F_MASK | LPUART_STAT_MA1F_MASK | LPUART_STAT_PF_MASK | LPUART_STAT_FE_MASK | LPUART_STAT_NF_MASK | LPUART_STAT_OR_MASK | LPUART_STAT_IDLE_MASK | LPUART_STAT_RXEDGIF_MASK | LPUART_STAT_LBKDIF_MASK), LPUART_STAT_RWUID(value)))
#define LPUART_BWR_STAT_RWUID(base, value) (BME_BFI32(&LPUART_STAT_REG(base), ((uint32_t)(value) << LPUART_STAT_RWUID_SHIFT), LPUART_STAT_RWUID_SHIFT, LPUART_STAT_RWUID_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_STAT, field RXINV[28] (RW)
 *
 * Setting this bit reverses the polarity of the received data input. Setting
 * RXINV inverts the LPUART_RX input for all cases: data bits, start and stop bits,
 * break, and idle.
 *
 * Values:
 * - 0b0 - Receive data not inverted.
 * - 0b1 - Receive data inverted.
 */
/*@{*/
/*! @brief Read current value of the LPUART_STAT_RXINV field. */
#define LPUART_RD_STAT_RXINV(base) ((LPUART_STAT_REG(base) & LPUART_STAT_RXINV_MASK) >> LPUART_STAT_RXINV_SHIFT)
#define LPUART_BRD_STAT_RXINV(base) (BME_UBFX32(&LPUART_STAT_REG(base), LPUART_STAT_RXINV_SHIFT, LPUART_STAT_RXINV_WIDTH))

/*! @brief Set the RXINV field to a new value. */
#define LPUART_WR_STAT_RXINV(base, value) (LPUART_RMW_STAT(base, (LPUART_STAT_RXINV_MASK | LPUART_STAT_MA2F_MASK | LPUART_STAT_MA1F_MASK | LPUART_STAT_PF_MASK | LPUART_STAT_FE_MASK | LPUART_STAT_NF_MASK | LPUART_STAT_OR_MASK | LPUART_STAT_IDLE_MASK | LPUART_STAT_RXEDGIF_MASK | LPUART_STAT_LBKDIF_MASK), LPUART_STAT_RXINV(value)))
#define LPUART_BWR_STAT_RXINV(base, value) (BME_BFI32(&LPUART_STAT_REG(base), ((uint32_t)(value) << LPUART_STAT_RXINV_SHIFT), LPUART_STAT_RXINV_SHIFT, LPUART_STAT_RXINV_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_STAT, field MSBF[29] (RW)
 *
 * Setting this bit reverses the order of the bits that are transmitted and
 * received on the wire. This bit does not affect the polarity of the bits, the
 * location of the parity bit or the location of the start or stop bits. This bit
 * should only be changed when the transmitter and receiver are both disabled.
 *
 * Values:
 * - 0b0 - LSB (bit0) is the first bit that is transmitted following the start
 *     bit. Further, the first bit received after the start bit is identified as
 *     bit0.
 * - 0b1 - MSB (bit9, bit8, bit7 or bit6) is the first bit that is transmitted
 *     following the start bit depending on the setting of CTRL[M], CTRL[PE] and
 *     BAUD[M10]. Further, the first bit received after the start bit is
 *     identified as bit9, bit8, bit7 or bit6 depending on the setting of CTRL[M] and
 *     CTRL[PE].
 */
/*@{*/
/*! @brief Read current value of the LPUART_STAT_MSBF field. */
#define LPUART_RD_STAT_MSBF(base) ((LPUART_STAT_REG(base) & LPUART_STAT_MSBF_MASK) >> LPUART_STAT_MSBF_SHIFT)
#define LPUART_BRD_STAT_MSBF(base) (BME_UBFX32(&LPUART_STAT_REG(base), LPUART_STAT_MSBF_SHIFT, LPUART_STAT_MSBF_WIDTH))

/*! @brief Set the MSBF field to a new value. */
#define LPUART_WR_STAT_MSBF(base, value) (LPUART_RMW_STAT(base, (LPUART_STAT_MSBF_MASK | LPUART_STAT_MA2F_MASK | LPUART_STAT_MA1F_MASK | LPUART_STAT_PF_MASK | LPUART_STAT_FE_MASK | LPUART_STAT_NF_MASK | LPUART_STAT_OR_MASK | LPUART_STAT_IDLE_MASK | LPUART_STAT_RXEDGIF_MASK | LPUART_STAT_LBKDIF_MASK), LPUART_STAT_MSBF(value)))
#define LPUART_BWR_STAT_MSBF(base, value) (BME_BFI32(&LPUART_STAT_REG(base), ((uint32_t)(value) << LPUART_STAT_MSBF_SHIFT), LPUART_STAT_MSBF_SHIFT, LPUART_STAT_MSBF_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_STAT, field RXEDGIF[30] (W1C)
 *
 * RXEDGIF is set when an active edge, falling if RXINV = 0, rising if RXINV=1,
 * on the LPUART_RX pin occurs. RXEDGIF is cleared by writing a 1 to it.
 *
 * Values:
 * - 0b0 - No active edge on the receive pin has occurred.
 * - 0b1 - An active edge on the receive pin has occurred.
 */
/*@{*/
/*! @brief Read current value of the LPUART_STAT_RXEDGIF field. */
#define LPUART_RD_STAT_RXEDGIF(base) ((LPUART_STAT_REG(base) & LPUART_STAT_RXEDGIF_MASK) >> LPUART_STAT_RXEDGIF_SHIFT)
#define LPUART_BRD_STAT_RXEDGIF(base) (BME_UBFX32(&LPUART_STAT_REG(base), LPUART_STAT_RXEDGIF_SHIFT, LPUART_STAT_RXEDGIF_WIDTH))

/*! @brief Set the RXEDGIF field to a new value. */
#define LPUART_WR_STAT_RXEDGIF(base, value) (LPUART_RMW_STAT(base, (LPUART_STAT_RXEDGIF_MASK | LPUART_STAT_MA2F_MASK | LPUART_STAT_MA1F_MASK | LPUART_STAT_PF_MASK | LPUART_STAT_FE_MASK | LPUART_STAT_NF_MASK | LPUART_STAT_OR_MASK | LPUART_STAT_IDLE_MASK | LPUART_STAT_LBKDIF_MASK), LPUART_STAT_RXEDGIF(value)))
#define LPUART_BWR_STAT_RXEDGIF(base, value) (BME_BFI32(&LPUART_STAT_REG(base), ((uint32_t)(value) << LPUART_STAT_RXEDGIF_SHIFT), LPUART_STAT_RXEDGIF_SHIFT, LPUART_STAT_RXEDGIF_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_STAT, field LBKDIF[31] (W1C)
 *
 * LBKDIF is set when the LIN break detect circuitry is enabled and a LIN break
 * character is detected. LBKDIF is cleared by writing a 1 to it.
 *
 * Values:
 * - 0b0 - No LIN break character has been detected.
 * - 0b1 - LIN break character has been detected.
 */
/*@{*/
/*! @brief Read current value of the LPUART_STAT_LBKDIF field. */
#define LPUART_RD_STAT_LBKDIF(base) ((LPUART_STAT_REG(base) & LPUART_STAT_LBKDIF_MASK) >> LPUART_STAT_LBKDIF_SHIFT)
#define LPUART_BRD_STAT_LBKDIF(base) (BME_UBFX32(&LPUART_STAT_REG(base), LPUART_STAT_LBKDIF_SHIFT, LPUART_STAT_LBKDIF_WIDTH))

/*! @brief Set the LBKDIF field to a new value. */
#define LPUART_WR_STAT_LBKDIF(base, value) (LPUART_RMW_STAT(base, (LPUART_STAT_LBKDIF_MASK | LPUART_STAT_MA2F_MASK | LPUART_STAT_MA1F_MASK | LPUART_STAT_PF_MASK | LPUART_STAT_FE_MASK | LPUART_STAT_NF_MASK | LPUART_STAT_OR_MASK | LPUART_STAT_IDLE_MASK | LPUART_STAT_RXEDGIF_MASK), LPUART_STAT_LBKDIF(value)))
#define LPUART_BWR_STAT_LBKDIF(base, value) (BME_BFI32(&LPUART_STAT_REG(base), ((uint32_t)(value) << LPUART_STAT_LBKDIF_SHIFT), LPUART_STAT_LBKDIF_SHIFT, LPUART_STAT_LBKDIF_WIDTH))
/*@}*/

/*******************************************************************************
 * LPUART_CTRL - LPUART Control Register
 ******************************************************************************/

/*!
 * @brief LPUART_CTRL - LPUART Control Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This read/write register controls various optional features of the LPUART
 * system. This register should only be altered when the transmitter and receiver
 * are both disabled.
 */
/*!
 * @name Constants and macros for entire LPUART_CTRL register
 */
/*@{*/
#define LPUART_RD_CTRL(base)     (LPUART_CTRL_REG(base))
#define LPUART_WR_CTRL(base, value) (LPUART_CTRL_REG(base) = (value))
#define LPUART_RMW_CTRL(base, mask, value) (LPUART_WR_CTRL(base, (LPUART_RD_CTRL(base) & ~(mask)) | (value)))
#define LPUART_SET_CTRL(base, value) (BME_OR32(&LPUART_CTRL_REG(base), (uint32_t)(value)))
#define LPUART_CLR_CTRL(base, value) (BME_AND32(&LPUART_CTRL_REG(base), (uint32_t)(~(value))))
#define LPUART_TOG_CTRL(base, value) (BME_XOR32(&LPUART_CTRL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LPUART_CTRL bitfields
 */

/*!
 * @name Register LPUART_CTRL, field PT[0] (RW)
 *
 * Provided parity is enabled (PE = 1), this bit selects even or odd parity. Odd
 * parity means the total number of 1s in the data character, including the
 * parity bit, is odd. Even parity means the total number of 1s in the data
 * character, including the parity bit, is even.
 *
 * Values:
 * - 0b0 - Even parity.
 * - 0b1 - Odd parity.
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_PT field. */
#define LPUART_RD_CTRL_PT(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_PT_MASK) >> LPUART_CTRL_PT_SHIFT)
#define LPUART_BRD_CTRL_PT(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_PT_SHIFT, LPUART_CTRL_PT_WIDTH))

/*! @brief Set the PT field to a new value. */
#define LPUART_WR_CTRL_PT(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_PT_MASK, LPUART_CTRL_PT(value)))
#define LPUART_BWR_CTRL_PT(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_PT_SHIFT), LPUART_CTRL_PT_SHIFT, LPUART_CTRL_PT_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field PE[1] (RW)
 *
 * Enables hardware parity generation and checking. When parity is enabled, the
 * bit immediately before the stop bit is treated as the parity bit.
 *
 * Values:
 * - 0b0 - No hardware parity generation or checking.
 * - 0b1 - Parity enabled.
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_PE field. */
#define LPUART_RD_CTRL_PE(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_PE_MASK) >> LPUART_CTRL_PE_SHIFT)
#define LPUART_BRD_CTRL_PE(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_PE_SHIFT, LPUART_CTRL_PE_WIDTH))

/*! @brief Set the PE field to a new value. */
#define LPUART_WR_CTRL_PE(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_PE_MASK, LPUART_CTRL_PE(value)))
#define LPUART_BWR_CTRL_PE(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_PE_SHIFT), LPUART_CTRL_PE_SHIFT, LPUART_CTRL_PE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field ILT[2] (RW)
 *
 * Determines when the receiver starts counting logic 1s as idle character bits.
 * The count begins either after a valid start bit or after the stop bit. If the
 * count begins after the start bit, then a string of logic 1s preceding the
 * stop bit can cause false recognition of an idle character. Beginning the count
 * after the stop bit avoids false idle character recognition, but requires
 * properly synchronized transmissions. In case the LPUART is programmed with ILT = 1, a
 * logic 0 is automatically shifted after a received stop bit, therefore
 * resetting the idle count.
 *
 * Values:
 * - 0b0 - Idle character bit count starts after start bit.
 * - 0b1 - Idle character bit count starts after stop bit.
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_ILT field. */
#define LPUART_RD_CTRL_ILT(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_ILT_MASK) >> LPUART_CTRL_ILT_SHIFT)
#define LPUART_BRD_CTRL_ILT(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_ILT_SHIFT, LPUART_CTRL_ILT_WIDTH))

/*! @brief Set the ILT field to a new value. */
#define LPUART_WR_CTRL_ILT(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_ILT_MASK, LPUART_CTRL_ILT(value)))
#define LPUART_BWR_CTRL_ILT(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_ILT_SHIFT), LPUART_CTRL_ILT_SHIFT, LPUART_CTRL_ILT_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field WAKE[3] (RW)
 *
 * Determines which condition wakes the LPUART when RWU=1: Address mark in the
 * most significant bit position of a received data character, or An idle
 * condition on the receive pin input signal.
 *
 * Values:
 * - 0b0 - Configures RWU for idle-line wakeup.
 * - 0b1 - Configures RWU with address-mark wakeup.
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_WAKE field. */
#define LPUART_RD_CTRL_WAKE(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_WAKE_MASK) >> LPUART_CTRL_WAKE_SHIFT)
#define LPUART_BRD_CTRL_WAKE(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_WAKE_SHIFT, LPUART_CTRL_WAKE_WIDTH))

/*! @brief Set the WAKE field to a new value. */
#define LPUART_WR_CTRL_WAKE(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_WAKE_MASK, LPUART_CTRL_WAKE(value)))
#define LPUART_BWR_CTRL_WAKE(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_WAKE_SHIFT), LPUART_CTRL_WAKE_SHIFT, LPUART_CTRL_WAKE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field M[4] (RW)
 *
 * Values:
 * - 0b0 - Receiver and transmitter use 8-bit data characters.
 * - 0b1 - Receiver and transmitter use 9-bit data characters.
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_M field. */
#define LPUART_RD_CTRL_M(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_M_MASK) >> LPUART_CTRL_M_SHIFT)
#define LPUART_BRD_CTRL_M(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_M_SHIFT, LPUART_CTRL_M_WIDTH))

/*! @brief Set the M field to a new value. */
#define LPUART_WR_CTRL_M(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_M_MASK, LPUART_CTRL_M(value)))
#define LPUART_BWR_CTRL_M(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_M_SHIFT), LPUART_CTRL_M_SHIFT, LPUART_CTRL_M_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field RSRC[5] (RW)
 *
 * This field has no meaning or effect unless the LOOPS field is set. When LOOPS
 * is set, the RSRC field determines the source for the receiver shift register
 * input.
 *
 * Values:
 * - 0b0 - Provided LOOPS is set, RSRC is cleared, selects internal loop back
 *     mode and the LPUART does not use the LPUART_RX pin.
 * - 0b1 - Single-wire LPUART mode where the LPUART_TX pin is connected to the
 *     transmitter output and receiver input.
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_RSRC field. */
#define LPUART_RD_CTRL_RSRC(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_RSRC_MASK) >> LPUART_CTRL_RSRC_SHIFT)
#define LPUART_BRD_CTRL_RSRC(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_RSRC_SHIFT, LPUART_CTRL_RSRC_WIDTH))

/*! @brief Set the RSRC field to a new value. */
#define LPUART_WR_CTRL_RSRC(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_RSRC_MASK, LPUART_CTRL_RSRC(value)))
#define LPUART_BWR_CTRL_RSRC(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_RSRC_SHIFT), LPUART_CTRL_RSRC_SHIFT, LPUART_CTRL_RSRC_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field DOZEEN[6] (RW)
 *
 * Values:
 * - 0b0 - LPUART is enabled in Doze mode.
 * - 0b1 - LPUART is disabled in Doze mode.
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_DOZEEN field. */
#define LPUART_RD_CTRL_DOZEEN(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_DOZEEN_MASK) >> LPUART_CTRL_DOZEEN_SHIFT)
#define LPUART_BRD_CTRL_DOZEEN(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_DOZEEN_SHIFT, LPUART_CTRL_DOZEEN_WIDTH))

/*! @brief Set the DOZEEN field to a new value. */
#define LPUART_WR_CTRL_DOZEEN(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_DOZEEN_MASK, LPUART_CTRL_DOZEEN(value)))
#define LPUART_BWR_CTRL_DOZEEN(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_DOZEEN_SHIFT), LPUART_CTRL_DOZEEN_SHIFT, LPUART_CTRL_DOZEEN_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field LOOPS[7] (RW)
 *
 * When LOOPS is set, the LPUART_RX pin is disconnected from the LPUART and the
 * transmitter output is internally connected to the receiver input. The
 * transmitter and the receiver must be enabled to use the loop function.
 *
 * Values:
 * - 0b0 - Normal operation - LPUART_RX and LPUART_TX use separate pins.
 * - 0b1 - Loop mode or single-wire mode where transmitter outputs are
 *     internally connected to receiver input (see RSRC bit).
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_LOOPS field. */
#define LPUART_RD_CTRL_LOOPS(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_LOOPS_MASK) >> LPUART_CTRL_LOOPS_SHIFT)
#define LPUART_BRD_CTRL_LOOPS(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_LOOPS_SHIFT, LPUART_CTRL_LOOPS_WIDTH))

/*! @brief Set the LOOPS field to a new value. */
#define LPUART_WR_CTRL_LOOPS(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_LOOPS_MASK, LPUART_CTRL_LOOPS(value)))
#define LPUART_BWR_CTRL_LOOPS(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_LOOPS_SHIFT), LPUART_CTRL_LOOPS_SHIFT, LPUART_CTRL_LOOPS_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field IDLECFG[10:8] (RW)
 *
 * Configures the number of idle characters that must be received before the
 * IDLE flag is set.
 *
 * Values:
 * - 0b000 - 1 idle character
 * - 0b001 - 2 idle characters
 * - 0b010 - 4 idle characters
 * - 0b011 - 8 idle characters
 * - 0b100 - 16 idle characters
 * - 0b101 - 32 idle characters
 * - 0b110 - 64 idle characters
 * - 0b111 - 128 idle characters
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_IDLECFG field. */
#define LPUART_RD_CTRL_IDLECFG(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_IDLECFG_MASK) >> LPUART_CTRL_IDLECFG_SHIFT)
#define LPUART_BRD_CTRL_IDLECFG(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_IDLECFG_SHIFT, LPUART_CTRL_IDLECFG_WIDTH))

/*! @brief Set the IDLECFG field to a new value. */
#define LPUART_WR_CTRL_IDLECFG(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_IDLECFG_MASK, LPUART_CTRL_IDLECFG(value)))
#define LPUART_BWR_CTRL_IDLECFG(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_IDLECFG_SHIFT), LPUART_CTRL_IDLECFG_SHIFT, LPUART_CTRL_IDLECFG_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field MA2IE[14] (RW)
 *
 * Values:
 * - 0b0 - MA2F interrupt disabled
 * - 0b1 - MA2F interrupt enabled
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_MA2IE field. */
#define LPUART_RD_CTRL_MA2IE(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_MA2IE_MASK) >> LPUART_CTRL_MA2IE_SHIFT)
#define LPUART_BRD_CTRL_MA2IE(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_MA2IE_SHIFT, LPUART_CTRL_MA2IE_WIDTH))

/*! @brief Set the MA2IE field to a new value. */
#define LPUART_WR_CTRL_MA2IE(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_MA2IE_MASK, LPUART_CTRL_MA2IE(value)))
#define LPUART_BWR_CTRL_MA2IE(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_MA2IE_SHIFT), LPUART_CTRL_MA2IE_SHIFT, LPUART_CTRL_MA2IE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field MA1IE[15] (RW)
 *
 * Values:
 * - 0b0 - MA1F interrupt disabled
 * - 0b1 - MA1F interrupt enabled
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_MA1IE field. */
#define LPUART_RD_CTRL_MA1IE(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_MA1IE_MASK) >> LPUART_CTRL_MA1IE_SHIFT)
#define LPUART_BRD_CTRL_MA1IE(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_MA1IE_SHIFT, LPUART_CTRL_MA1IE_WIDTH))

/*! @brief Set the MA1IE field to a new value. */
#define LPUART_WR_CTRL_MA1IE(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_MA1IE_MASK, LPUART_CTRL_MA1IE(value)))
#define LPUART_BWR_CTRL_MA1IE(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_MA1IE_SHIFT), LPUART_CTRL_MA1IE_SHIFT, LPUART_CTRL_MA1IE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field SBK[16] (RW)
 *
 * Writing a 1 and then a 0 to SBK queues a break character in the transmit data
 * stream. Additional break characters of 10 to 13, or 13 to 16 if
 * LPUART_STATBRK13] is set, bit times of logic 0 are queued as long as SBK is set. Depending
 * on the timing of the set and clear of SBK relative to the information
 * currently being transmitted, a second break character may be queued before software
 * clears SBK.
 *
 * Values:
 * - 0b0 - Normal transmitter operation.
 * - 0b1 - Queue break character(s) to be sent.
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_SBK field. */
#define LPUART_RD_CTRL_SBK(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_SBK_MASK) >> LPUART_CTRL_SBK_SHIFT)
#define LPUART_BRD_CTRL_SBK(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_SBK_SHIFT, LPUART_CTRL_SBK_WIDTH))

/*! @brief Set the SBK field to a new value. */
#define LPUART_WR_CTRL_SBK(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_SBK_MASK, LPUART_CTRL_SBK(value)))
#define LPUART_BWR_CTRL_SBK(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_SBK_SHIFT), LPUART_CTRL_SBK_SHIFT, LPUART_CTRL_SBK_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field RWU[17] (RW)
 *
 * This field can be set to place the LPUART receiver in a standby state. RWU
 * automatically clears when an RWU event occurs, that is, an IDLE event when
 * CTRL[WAKE] is clear or an address match when CTRL[WAKE] is set with STAT[RWUID] is
 * clear. RWU must be set only with CTRL[WAKE] = 0 (wakeup on idle) if the
 * channel is currently not idle. This can be determined by STAT[RAF]. If the flag is
 * set to wake up an IDLE event and the channel is already idle, it is possible
 * that the LPUART will discard data. This is because the data must be received or
 * a LIN break detected after an IDLE is detected before IDLE is allowed to be
 * reasserted.
 *
 * Values:
 * - 0b0 - Normal receiver operation.
 * - 0b1 - LPUART receiver in standby waiting for wakeup condition.
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_RWU field. */
#define LPUART_RD_CTRL_RWU(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_RWU_MASK) >> LPUART_CTRL_RWU_SHIFT)
#define LPUART_BRD_CTRL_RWU(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_RWU_SHIFT, LPUART_CTRL_RWU_WIDTH))

/*! @brief Set the RWU field to a new value. */
#define LPUART_WR_CTRL_RWU(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_RWU_MASK, LPUART_CTRL_RWU(value)))
#define LPUART_BWR_CTRL_RWU(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_RWU_SHIFT), LPUART_CTRL_RWU_SHIFT, LPUART_CTRL_RWU_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field RE[18] (RW)
 *
 * Enables the LPUART receiver. When RE is written to 0, this register bit will
 * read as 1 until the receiver finishes receiving the current character (if any).
 *
 * Values:
 * - 0b0 - Receiver disabled.
 * - 0b1 - Receiver enabled.
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_RE field. */
#define LPUART_RD_CTRL_RE(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_RE_MASK) >> LPUART_CTRL_RE_SHIFT)
#define LPUART_BRD_CTRL_RE(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_RE_SHIFT, LPUART_CTRL_RE_WIDTH))

/*! @brief Set the RE field to a new value. */
#define LPUART_WR_CTRL_RE(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_RE_MASK, LPUART_CTRL_RE(value)))
#define LPUART_BWR_CTRL_RE(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_RE_SHIFT), LPUART_CTRL_RE_SHIFT, LPUART_CTRL_RE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field TE[19] (RW)
 *
 * Enables the LPUART transmitter. TE can also be used to queue an idle preamble
 * by clearing and then setting TE. When TE is cleared, this register bit will
 * read as 1 until the transmitter has completed the current character and the
 * LPUART_TX pin is tristated.
 *
 * Values:
 * - 0b0 - Transmitter disabled.
 * - 0b1 - Transmitter enabled.
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_TE field. */
#define LPUART_RD_CTRL_TE(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_TE_MASK) >> LPUART_CTRL_TE_SHIFT)
#define LPUART_BRD_CTRL_TE(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_TE_SHIFT, LPUART_CTRL_TE_WIDTH))

/*! @brief Set the TE field to a new value. */
#define LPUART_WR_CTRL_TE(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_TE_MASK, LPUART_CTRL_TE(value)))
#define LPUART_BWR_CTRL_TE(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_TE_SHIFT), LPUART_CTRL_TE_SHIFT, LPUART_CTRL_TE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field ILIE[20] (RW)
 *
 * ILIE enables the idle line flag, STAT[IDLE], to generate interrupt requests.
 *
 * Values:
 * - 0b0 - Hardware interrupts from IDLE disabled; use polling.
 * - 0b1 - Hardware interrupt requested when IDLE flag is 1.
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_ILIE field. */
#define LPUART_RD_CTRL_ILIE(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_ILIE_MASK) >> LPUART_CTRL_ILIE_SHIFT)
#define LPUART_BRD_CTRL_ILIE(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_ILIE_SHIFT, LPUART_CTRL_ILIE_WIDTH))

/*! @brief Set the ILIE field to a new value. */
#define LPUART_WR_CTRL_ILIE(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_ILIE_MASK, LPUART_CTRL_ILIE(value)))
#define LPUART_BWR_CTRL_ILIE(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_ILIE_SHIFT), LPUART_CTRL_ILIE_SHIFT, LPUART_CTRL_ILIE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field RIE[21] (RW)
 *
 * Enables STAT[RDRF] to generate interrupt requests.
 *
 * Values:
 * - 0b0 - Hardware interrupts from RDRF disabled; use polling.
 * - 0b1 - Hardware interrupt requested when RDRF flag is 1.
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_RIE field. */
#define LPUART_RD_CTRL_RIE(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_RIE_MASK) >> LPUART_CTRL_RIE_SHIFT)
#define LPUART_BRD_CTRL_RIE(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_RIE_SHIFT, LPUART_CTRL_RIE_WIDTH))

/*! @brief Set the RIE field to a new value. */
#define LPUART_WR_CTRL_RIE(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_RIE_MASK, LPUART_CTRL_RIE(value)))
#define LPUART_BWR_CTRL_RIE(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_RIE_SHIFT), LPUART_CTRL_RIE_SHIFT, LPUART_CTRL_RIE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field TCIE[22] (RW)
 *
 * TCIE enables the transmission complete flag, TC, to generate interrupt
 * requests.
 *
 * Values:
 * - 0b0 - Hardware interrupts from TC disabled; use polling.
 * - 0b1 - Hardware interrupt requested when TC flag is 1.
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_TCIE field. */
#define LPUART_RD_CTRL_TCIE(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_TCIE_MASK) >> LPUART_CTRL_TCIE_SHIFT)
#define LPUART_BRD_CTRL_TCIE(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_TCIE_SHIFT, LPUART_CTRL_TCIE_WIDTH))

/*! @brief Set the TCIE field to a new value. */
#define LPUART_WR_CTRL_TCIE(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_TCIE_MASK, LPUART_CTRL_TCIE(value)))
#define LPUART_BWR_CTRL_TCIE(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_TCIE_SHIFT), LPUART_CTRL_TCIE_SHIFT, LPUART_CTRL_TCIE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field TIE[23] (RW)
 *
 * Enables STAT[TDRE] to generate interrupt requests.
 *
 * Values:
 * - 0b0 - Hardware interrupts from TDRE disabled; use polling.
 * - 0b1 - Hardware interrupt requested when TDRE flag is 1.
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_TIE field. */
#define LPUART_RD_CTRL_TIE(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_TIE_MASK) >> LPUART_CTRL_TIE_SHIFT)
#define LPUART_BRD_CTRL_TIE(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_TIE_SHIFT, LPUART_CTRL_TIE_WIDTH))

/*! @brief Set the TIE field to a new value. */
#define LPUART_WR_CTRL_TIE(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_TIE_MASK, LPUART_CTRL_TIE(value)))
#define LPUART_BWR_CTRL_TIE(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_TIE_SHIFT), LPUART_CTRL_TIE_SHIFT, LPUART_CTRL_TIE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field PEIE[24] (RW)
 *
 * This bit enables the parity error flag (PF) to generate hardware interrupt
 * requests.
 *
 * Values:
 * - 0b0 - PF interrupts disabled; use polling).
 * - 0b1 - Hardware interrupt requested when PF is set.
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_PEIE field. */
#define LPUART_RD_CTRL_PEIE(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_PEIE_MASK) >> LPUART_CTRL_PEIE_SHIFT)
#define LPUART_BRD_CTRL_PEIE(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_PEIE_SHIFT, LPUART_CTRL_PEIE_WIDTH))

/*! @brief Set the PEIE field to a new value. */
#define LPUART_WR_CTRL_PEIE(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_PEIE_MASK, LPUART_CTRL_PEIE(value)))
#define LPUART_BWR_CTRL_PEIE(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_PEIE_SHIFT), LPUART_CTRL_PEIE_SHIFT, LPUART_CTRL_PEIE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field FEIE[25] (RW)
 *
 * This bit enables the framing error flag (FE) to generate hardware interrupt
 * requests.
 *
 * Values:
 * - 0b0 - FE interrupts disabled; use polling.
 * - 0b1 - Hardware interrupt requested when FE is set.
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_FEIE field. */
#define LPUART_RD_CTRL_FEIE(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_FEIE_MASK) >> LPUART_CTRL_FEIE_SHIFT)
#define LPUART_BRD_CTRL_FEIE(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_FEIE_SHIFT, LPUART_CTRL_FEIE_WIDTH))

/*! @brief Set the FEIE field to a new value. */
#define LPUART_WR_CTRL_FEIE(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_FEIE_MASK, LPUART_CTRL_FEIE(value)))
#define LPUART_BWR_CTRL_FEIE(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_FEIE_SHIFT), LPUART_CTRL_FEIE_SHIFT, LPUART_CTRL_FEIE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field NEIE[26] (RW)
 *
 * This bit enables the noise flag (NF) to generate hardware interrupt requests.
 *
 * Values:
 * - 0b0 - NF interrupts disabled; use polling.
 * - 0b1 - Hardware interrupt requested when NF is set.
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_NEIE field. */
#define LPUART_RD_CTRL_NEIE(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_NEIE_MASK) >> LPUART_CTRL_NEIE_SHIFT)
#define LPUART_BRD_CTRL_NEIE(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_NEIE_SHIFT, LPUART_CTRL_NEIE_WIDTH))

/*! @brief Set the NEIE field to a new value. */
#define LPUART_WR_CTRL_NEIE(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_NEIE_MASK, LPUART_CTRL_NEIE(value)))
#define LPUART_BWR_CTRL_NEIE(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_NEIE_SHIFT), LPUART_CTRL_NEIE_SHIFT, LPUART_CTRL_NEIE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field ORIE[27] (RW)
 *
 * This bit enables the overrun flag (OR) to generate hardware interrupt
 * requests.
 *
 * Values:
 * - 0b0 - OR interrupts disabled; use polling.
 * - 0b1 - Hardware interrupt requested when OR is set.
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_ORIE field. */
#define LPUART_RD_CTRL_ORIE(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_ORIE_MASK) >> LPUART_CTRL_ORIE_SHIFT)
#define LPUART_BRD_CTRL_ORIE(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_ORIE_SHIFT, LPUART_CTRL_ORIE_WIDTH))

/*! @brief Set the ORIE field to a new value. */
#define LPUART_WR_CTRL_ORIE(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_ORIE_MASK, LPUART_CTRL_ORIE(value)))
#define LPUART_BWR_CTRL_ORIE(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_ORIE_SHIFT), LPUART_CTRL_ORIE_SHIFT, LPUART_CTRL_ORIE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field TXINV[28] (RW)
 *
 * Setting this bit reverses the polarity of the transmitted data output.
 * Setting TXINV inverts the LPUART_TX output for all cases: data bits, start and stop
 * bits, break, and idle.
 *
 * Values:
 * - 0b0 - Transmit data not inverted.
 * - 0b1 - Transmit data inverted.
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_TXINV field. */
#define LPUART_RD_CTRL_TXINV(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_TXINV_MASK) >> LPUART_CTRL_TXINV_SHIFT)
#define LPUART_BRD_CTRL_TXINV(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_TXINV_SHIFT, LPUART_CTRL_TXINV_WIDTH))

/*! @brief Set the TXINV field to a new value. */
#define LPUART_WR_CTRL_TXINV(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_TXINV_MASK, LPUART_CTRL_TXINV(value)))
#define LPUART_BWR_CTRL_TXINV(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_TXINV_SHIFT), LPUART_CTRL_TXINV_SHIFT, LPUART_CTRL_TXINV_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field TXDIR[29] (RW)
 *
 * When the LPUART is configured for single-wire half-duplex operation (LOOPS =
 * RSRC = 1), this bit determines the direction of data at the LPUART_TX pin.
 * When clearing TXDIR, the transmitter will finish receiving the current character
 * (if any) before the receiver starts receiving data from the LPUART_TX pin.
 *
 * Values:
 * - 0b0 - LPUART_TX pin is an input in single-wire mode.
 * - 0b1 - LPUART_TX pin is an output in single-wire mode.
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_TXDIR field. */
#define LPUART_RD_CTRL_TXDIR(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_TXDIR_MASK) >> LPUART_CTRL_TXDIR_SHIFT)
#define LPUART_BRD_CTRL_TXDIR(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_TXDIR_SHIFT, LPUART_CTRL_TXDIR_WIDTH))

/*! @brief Set the TXDIR field to a new value. */
#define LPUART_WR_CTRL_TXDIR(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_TXDIR_MASK, LPUART_CTRL_TXDIR(value)))
#define LPUART_BWR_CTRL_TXDIR(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_TXDIR_SHIFT), LPUART_CTRL_TXDIR_SHIFT, LPUART_CTRL_TXDIR_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field R9T8[30] (RW)
 *
 * R9 is the tenth data bit received when the LPUART is configured for 10-bit
 * data formats. When reading 10-bit data, read R9 before reading LPUART_DATA T8 is
 * the ninth data bit received when the LPUART is configured for 9-bit or 10-bit
 * data formats. When writing 9-bit or 10-bit data, write T8 before writing
 * LPUART_DATA. If T8 does not need to change from its previous value, such as when
 * it is used to generate address mark or parity, they it need not be written each
 * time LPUART_DATA is written.
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_R9T8 field. */
#define LPUART_RD_CTRL_R9T8(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_R9T8_MASK) >> LPUART_CTRL_R9T8_SHIFT)
#define LPUART_BRD_CTRL_R9T8(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_R9T8_SHIFT, LPUART_CTRL_R9T8_WIDTH))

/*! @brief Set the R9T8 field to a new value. */
#define LPUART_WR_CTRL_R9T8(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_R9T8_MASK, LPUART_CTRL_R9T8(value)))
#define LPUART_BWR_CTRL_R9T8(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_R9T8_SHIFT), LPUART_CTRL_R9T8_SHIFT, LPUART_CTRL_R9T8_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_CTRL, field R8T9[31] (RW)
 *
 * R8 is the ninth data bit received when the LPUART is configured for 9-bit or
 * 10-bit data formats. When reading 9-bit or 10-bit data, read R8 before reading
 * LPUART_DATA. T9 is the tenth data bit received when the LPUART is configured
 * for 10-bit data formats. When writing 10-bit data, write T9 before writing
 * LPUART_DATA. If T9 does not need to change from its previous value, such as when
 * it is used to generate address mark or parity, they it need not be written
 * each time LPUART_DATA is written.
 */
/*@{*/
/*! @brief Read current value of the LPUART_CTRL_R8T9 field. */
#define LPUART_RD_CTRL_R8T9(base) ((LPUART_CTRL_REG(base) & LPUART_CTRL_R8T9_MASK) >> LPUART_CTRL_R8T9_SHIFT)
#define LPUART_BRD_CTRL_R8T9(base) (BME_UBFX32(&LPUART_CTRL_REG(base), LPUART_CTRL_R8T9_SHIFT, LPUART_CTRL_R8T9_WIDTH))

/*! @brief Set the R8T9 field to a new value. */
#define LPUART_WR_CTRL_R8T9(base, value) (LPUART_RMW_CTRL(base, LPUART_CTRL_R8T9_MASK, LPUART_CTRL_R8T9(value)))
#define LPUART_BWR_CTRL_R8T9(base, value) (BME_BFI32(&LPUART_CTRL_REG(base), ((uint32_t)(value) << LPUART_CTRL_R8T9_SHIFT), LPUART_CTRL_R8T9_SHIFT, LPUART_CTRL_R8T9_WIDTH))
/*@}*/

/*******************************************************************************
 * LPUART_DATA - LPUART Data Register
 ******************************************************************************/

/*!
 * @brief LPUART_DATA - LPUART Data Register (RW)
 *
 * Reset value: 0x00001000U
 *
 * This register is actually two separate registers. Reads return the contents
 * of the read-only receive data buffer and writes go to the write-only transmit
 * data buffer. Reads and writes of this register are also involved in the
 * automatic flag clearing mechanisms for some of the LPUART status flags.
 */
/*!
 * @name Constants and macros for entire LPUART_DATA register
 */
/*@{*/
#define LPUART_RD_DATA(base)     (LPUART_DATA_REG(base))
#define LPUART_WR_DATA(base, value) (LPUART_DATA_REG(base) = (value))
#define LPUART_RMW_DATA(base, mask, value) (LPUART_WR_DATA(base, (LPUART_RD_DATA(base) & ~(mask)) | (value)))
#define LPUART_SET_DATA(base, value) (BME_OR32(&LPUART_DATA_REG(base), (uint32_t)(value)))
#define LPUART_CLR_DATA(base, value) (BME_AND32(&LPUART_DATA_REG(base), (uint32_t)(~(value))))
#define LPUART_TOG_DATA(base, value) (BME_XOR32(&LPUART_DATA_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LPUART_DATA bitfields
 */

/*!
 * @name Register LPUART_DATA, field R0T0[0] (RW)
 *
 * Read receive data buffer 0 or write transmit data buffer 0.
 */
/*@{*/
/*! @brief Read current value of the LPUART_DATA_R0T0 field. */
#define LPUART_RD_DATA_R0T0(base) ((LPUART_DATA_REG(base) & LPUART_DATA_R0T0_MASK) >> LPUART_DATA_R0T0_SHIFT)
#define LPUART_BRD_DATA_R0T0(base) (BME_UBFX32(&LPUART_DATA_REG(base), LPUART_DATA_R0T0_SHIFT, LPUART_DATA_R0T0_WIDTH))

/*! @brief Set the R0T0 field to a new value. */
#define LPUART_WR_DATA_R0T0(base, value) (LPUART_RMW_DATA(base, LPUART_DATA_R0T0_MASK, LPUART_DATA_R0T0(value)))
#define LPUART_BWR_DATA_R0T0(base, value) (BME_BFI32(&LPUART_DATA_REG(base), ((uint32_t)(value) << LPUART_DATA_R0T0_SHIFT), LPUART_DATA_R0T0_SHIFT, LPUART_DATA_R0T0_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_DATA, field R1T1[1] (RW)
 *
 * Read receive data buffer 1 or write transmit data buffer 1.
 */
/*@{*/
/*! @brief Read current value of the LPUART_DATA_R1T1 field. */
#define LPUART_RD_DATA_R1T1(base) ((LPUART_DATA_REG(base) & LPUART_DATA_R1T1_MASK) >> LPUART_DATA_R1T1_SHIFT)
#define LPUART_BRD_DATA_R1T1(base) (BME_UBFX32(&LPUART_DATA_REG(base), LPUART_DATA_R1T1_SHIFT, LPUART_DATA_R1T1_WIDTH))

/*! @brief Set the R1T1 field to a new value. */
#define LPUART_WR_DATA_R1T1(base, value) (LPUART_RMW_DATA(base, LPUART_DATA_R1T1_MASK, LPUART_DATA_R1T1(value)))
#define LPUART_BWR_DATA_R1T1(base, value) (BME_BFI32(&LPUART_DATA_REG(base), ((uint32_t)(value) << LPUART_DATA_R1T1_SHIFT), LPUART_DATA_R1T1_SHIFT, LPUART_DATA_R1T1_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_DATA, field R2T2[2] (RW)
 *
 * Read receive data buffer 2 or write transmit data buffer 2.
 */
/*@{*/
/*! @brief Read current value of the LPUART_DATA_R2T2 field. */
#define LPUART_RD_DATA_R2T2(base) ((LPUART_DATA_REG(base) & LPUART_DATA_R2T2_MASK) >> LPUART_DATA_R2T2_SHIFT)
#define LPUART_BRD_DATA_R2T2(base) (BME_UBFX32(&LPUART_DATA_REG(base), LPUART_DATA_R2T2_SHIFT, LPUART_DATA_R2T2_WIDTH))

/*! @brief Set the R2T2 field to a new value. */
#define LPUART_WR_DATA_R2T2(base, value) (LPUART_RMW_DATA(base, LPUART_DATA_R2T2_MASK, LPUART_DATA_R2T2(value)))
#define LPUART_BWR_DATA_R2T2(base, value) (BME_BFI32(&LPUART_DATA_REG(base), ((uint32_t)(value) << LPUART_DATA_R2T2_SHIFT), LPUART_DATA_R2T2_SHIFT, LPUART_DATA_R2T2_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_DATA, field R3T3[3] (RW)
 *
 * Read receive data buffer 3 or write transmit data buffer 3.
 */
/*@{*/
/*! @brief Read current value of the LPUART_DATA_R3T3 field. */
#define LPUART_RD_DATA_R3T3(base) ((LPUART_DATA_REG(base) & LPUART_DATA_R3T3_MASK) >> LPUART_DATA_R3T3_SHIFT)
#define LPUART_BRD_DATA_R3T3(base) (BME_UBFX32(&LPUART_DATA_REG(base), LPUART_DATA_R3T3_SHIFT, LPUART_DATA_R3T3_WIDTH))

/*! @brief Set the R3T3 field to a new value. */
#define LPUART_WR_DATA_R3T3(base, value) (LPUART_RMW_DATA(base, LPUART_DATA_R3T3_MASK, LPUART_DATA_R3T3(value)))
#define LPUART_BWR_DATA_R3T3(base, value) (BME_BFI32(&LPUART_DATA_REG(base), ((uint32_t)(value) << LPUART_DATA_R3T3_SHIFT), LPUART_DATA_R3T3_SHIFT, LPUART_DATA_R3T3_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_DATA, field R4T4[4] (RW)
 *
 * Read receive data buffer 4 or write transmit data buffer 4.
 */
/*@{*/
/*! @brief Read current value of the LPUART_DATA_R4T4 field. */
#define LPUART_RD_DATA_R4T4(base) ((LPUART_DATA_REG(base) & LPUART_DATA_R4T4_MASK) >> LPUART_DATA_R4T4_SHIFT)
#define LPUART_BRD_DATA_R4T4(base) (BME_UBFX32(&LPUART_DATA_REG(base), LPUART_DATA_R4T4_SHIFT, LPUART_DATA_R4T4_WIDTH))

/*! @brief Set the R4T4 field to a new value. */
#define LPUART_WR_DATA_R4T4(base, value) (LPUART_RMW_DATA(base, LPUART_DATA_R4T4_MASK, LPUART_DATA_R4T4(value)))
#define LPUART_BWR_DATA_R4T4(base, value) (BME_BFI32(&LPUART_DATA_REG(base), ((uint32_t)(value) << LPUART_DATA_R4T4_SHIFT), LPUART_DATA_R4T4_SHIFT, LPUART_DATA_R4T4_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_DATA, field R5T5[5] (RW)
 *
 * Read receive data buffer 5 or write transmit data buffer 5.
 */
/*@{*/
/*! @brief Read current value of the LPUART_DATA_R5T5 field. */
#define LPUART_RD_DATA_R5T5(base) ((LPUART_DATA_REG(base) & LPUART_DATA_R5T5_MASK) >> LPUART_DATA_R5T5_SHIFT)
#define LPUART_BRD_DATA_R5T5(base) (BME_UBFX32(&LPUART_DATA_REG(base), LPUART_DATA_R5T5_SHIFT, LPUART_DATA_R5T5_WIDTH))

/*! @brief Set the R5T5 field to a new value. */
#define LPUART_WR_DATA_R5T5(base, value) (LPUART_RMW_DATA(base, LPUART_DATA_R5T5_MASK, LPUART_DATA_R5T5(value)))
#define LPUART_BWR_DATA_R5T5(base, value) (BME_BFI32(&LPUART_DATA_REG(base), ((uint32_t)(value) << LPUART_DATA_R5T5_SHIFT), LPUART_DATA_R5T5_SHIFT, LPUART_DATA_R5T5_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_DATA, field R6T6[6] (RW)
 *
 * Read receive data buffer 6 or write transmit data buffer 6.
 */
/*@{*/
/*! @brief Read current value of the LPUART_DATA_R6T6 field. */
#define LPUART_RD_DATA_R6T6(base) ((LPUART_DATA_REG(base) & LPUART_DATA_R6T6_MASK) >> LPUART_DATA_R6T6_SHIFT)
#define LPUART_BRD_DATA_R6T6(base) (BME_UBFX32(&LPUART_DATA_REG(base), LPUART_DATA_R6T6_SHIFT, LPUART_DATA_R6T6_WIDTH))

/*! @brief Set the R6T6 field to a new value. */
#define LPUART_WR_DATA_R6T6(base, value) (LPUART_RMW_DATA(base, LPUART_DATA_R6T6_MASK, LPUART_DATA_R6T6(value)))
#define LPUART_BWR_DATA_R6T6(base, value) (BME_BFI32(&LPUART_DATA_REG(base), ((uint32_t)(value) << LPUART_DATA_R6T6_SHIFT), LPUART_DATA_R6T6_SHIFT, LPUART_DATA_R6T6_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_DATA, field R7T7[7] (RW)
 *
 * Read receive data buffer 7 or write transmit data buffer 7.
 */
/*@{*/
/*! @brief Read current value of the LPUART_DATA_R7T7 field. */
#define LPUART_RD_DATA_R7T7(base) ((LPUART_DATA_REG(base) & LPUART_DATA_R7T7_MASK) >> LPUART_DATA_R7T7_SHIFT)
#define LPUART_BRD_DATA_R7T7(base) (BME_UBFX32(&LPUART_DATA_REG(base), LPUART_DATA_R7T7_SHIFT, LPUART_DATA_R7T7_WIDTH))

/*! @brief Set the R7T7 field to a new value. */
#define LPUART_WR_DATA_R7T7(base, value) (LPUART_RMW_DATA(base, LPUART_DATA_R7T7_MASK, LPUART_DATA_R7T7(value)))
#define LPUART_BWR_DATA_R7T7(base, value) (BME_BFI32(&LPUART_DATA_REG(base), ((uint32_t)(value) << LPUART_DATA_R7T7_SHIFT), LPUART_DATA_R7T7_SHIFT, LPUART_DATA_R7T7_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_DATA, field R8T8[8] (RW)
 *
 * Read receive data buffer 8 or write transmit data buffer 8.
 */
/*@{*/
/*! @brief Read current value of the LPUART_DATA_R8T8 field. */
#define LPUART_RD_DATA_R8T8(base) ((LPUART_DATA_REG(base) & LPUART_DATA_R8T8_MASK) >> LPUART_DATA_R8T8_SHIFT)
#define LPUART_BRD_DATA_R8T8(base) (BME_UBFX32(&LPUART_DATA_REG(base), LPUART_DATA_R8T8_SHIFT, LPUART_DATA_R8T8_WIDTH))

/*! @brief Set the R8T8 field to a new value. */
#define LPUART_WR_DATA_R8T8(base, value) (LPUART_RMW_DATA(base, LPUART_DATA_R8T8_MASK, LPUART_DATA_R8T8(value)))
#define LPUART_BWR_DATA_R8T8(base, value) (BME_BFI32(&LPUART_DATA_REG(base), ((uint32_t)(value) << LPUART_DATA_R8T8_SHIFT), LPUART_DATA_R8T8_SHIFT, LPUART_DATA_R8T8_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_DATA, field R9T9[9] (RW)
 *
 * Read receive data buffer 9 or write transmit data buffer 9.
 */
/*@{*/
/*! @brief Read current value of the LPUART_DATA_R9T9 field. */
#define LPUART_RD_DATA_R9T9(base) ((LPUART_DATA_REG(base) & LPUART_DATA_R9T9_MASK) >> LPUART_DATA_R9T9_SHIFT)
#define LPUART_BRD_DATA_R9T9(base) (BME_UBFX32(&LPUART_DATA_REG(base), LPUART_DATA_R9T9_SHIFT, LPUART_DATA_R9T9_WIDTH))

/*! @brief Set the R9T9 field to a new value. */
#define LPUART_WR_DATA_R9T9(base, value) (LPUART_RMW_DATA(base, LPUART_DATA_R9T9_MASK, LPUART_DATA_R9T9(value)))
#define LPUART_BWR_DATA_R9T9(base, value) (BME_BFI32(&LPUART_DATA_REG(base), ((uint32_t)(value) << LPUART_DATA_R9T9_SHIFT), LPUART_DATA_R9T9_SHIFT, LPUART_DATA_R9T9_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_DATA, field IDLINE[11] (RO)
 *
 * Indicates the receiver line was idle before receiving the character in
 * DATA[9:0]. Unlike the IDLE flag, this bit can set for the first character received
 * when the receiver is first enabled.
 *
 * Values:
 * - 0b0 - Receiver was not idle before receiving this character.
 * - 0b1 - Receiver was idle before receiving this character.
 */
/*@{*/
/*! @brief Read current value of the LPUART_DATA_IDLINE field. */
#define LPUART_RD_DATA_IDLINE(base) ((LPUART_DATA_REG(base) & LPUART_DATA_IDLINE_MASK) >> LPUART_DATA_IDLINE_SHIFT)
#define LPUART_BRD_DATA_IDLINE(base) (BME_UBFX32(&LPUART_DATA_REG(base), LPUART_DATA_IDLINE_SHIFT, LPUART_DATA_IDLINE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_DATA, field RXEMPT[12] (RO)
 *
 * Asserts when there is no data in the receive buffer. This field does not take
 * into account data that is in the receive shift register.
 *
 * Values:
 * - 0b0 - Receive buffer contains valid data.
 * - 0b1 - Receive buffer is empty, data returned on read is not valid.
 */
/*@{*/
/*! @brief Read current value of the LPUART_DATA_RXEMPT field. */
#define LPUART_RD_DATA_RXEMPT(base) ((LPUART_DATA_REG(base) & LPUART_DATA_RXEMPT_MASK) >> LPUART_DATA_RXEMPT_SHIFT)
#define LPUART_BRD_DATA_RXEMPT(base) (BME_UBFX32(&LPUART_DATA_REG(base), LPUART_DATA_RXEMPT_SHIFT, LPUART_DATA_RXEMPT_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_DATA, field FRETSC[13] (RW)
 *
 * For reads, indicates the current received dataword contained in DATA[R9:R0]
 * was received with a frame error. For writes, indicates a break or idle
 * character is to be transmitted instead of the contents in DATA[T9:T0]. T9 is used to
 * indicate a break character when 0 and a idle character when 1, he contents of
 * DATA[T8:T0] should be zero.
 *
 * Values:
 * - 0b0 - The dataword was received without a frame error on read, transmit a
 *     normal character on write.
 * - 0b1 - The dataword was received with a frame error, transmit an idle or
 *     break character on transmit.
 */
/*@{*/
/*! @brief Read current value of the LPUART_DATA_FRETSC field. */
#define LPUART_RD_DATA_FRETSC(base) ((LPUART_DATA_REG(base) & LPUART_DATA_FRETSC_MASK) >> LPUART_DATA_FRETSC_SHIFT)
#define LPUART_BRD_DATA_FRETSC(base) (BME_UBFX32(&LPUART_DATA_REG(base), LPUART_DATA_FRETSC_SHIFT, LPUART_DATA_FRETSC_WIDTH))

/*! @brief Set the FRETSC field to a new value. */
#define LPUART_WR_DATA_FRETSC(base, value) (LPUART_RMW_DATA(base, LPUART_DATA_FRETSC_MASK, LPUART_DATA_FRETSC(value)))
#define LPUART_BWR_DATA_FRETSC(base, value) (BME_BFI32(&LPUART_DATA_REG(base), ((uint32_t)(value) << LPUART_DATA_FRETSC_SHIFT), LPUART_DATA_FRETSC_SHIFT, LPUART_DATA_FRETSC_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_DATA, field PARITYE[14] (RO)
 *
 * The current received dataword contained in DATA[R9:R0] was received with a
 * parity error.
 *
 * Values:
 * - 0b0 - The dataword was received without a parity error.
 * - 0b1 - The dataword was received with a parity error.
 */
/*@{*/
/*! @brief Read current value of the LPUART_DATA_PARITYE field. */
#define LPUART_RD_DATA_PARITYE(base) ((LPUART_DATA_REG(base) & LPUART_DATA_PARITYE_MASK) >> LPUART_DATA_PARITYE_SHIFT)
#define LPUART_BRD_DATA_PARITYE(base) (BME_UBFX32(&LPUART_DATA_REG(base), LPUART_DATA_PARITYE_SHIFT, LPUART_DATA_PARITYE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_DATA, field NOISY[15] (RO)
 *
 * The current received dataword contained in DATA[R9:R0] was received with
 * noise.
 *
 * Values:
 * - 0b0 - The dataword was received without noise.
 * - 0b1 - The data was received with noise.
 */
/*@{*/
/*! @brief Read current value of the LPUART_DATA_NOISY field. */
#define LPUART_RD_DATA_NOISY(base) ((LPUART_DATA_REG(base) & LPUART_DATA_NOISY_MASK) >> LPUART_DATA_NOISY_SHIFT)
#define LPUART_BRD_DATA_NOISY(base) (BME_UBFX32(&LPUART_DATA_REG(base), LPUART_DATA_NOISY_SHIFT, LPUART_DATA_NOISY_WIDTH))
/*@}*/

/*******************************************************************************
 * LPUART_MATCH - LPUART Match Address Register
 ******************************************************************************/

/*!
 * @brief LPUART_MATCH - LPUART Match Address Register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire LPUART_MATCH register
 */
/*@{*/
#define LPUART_RD_MATCH(base)    (LPUART_MATCH_REG(base))
#define LPUART_WR_MATCH(base, value) (LPUART_MATCH_REG(base) = (value))
#define LPUART_RMW_MATCH(base, mask, value) (LPUART_WR_MATCH(base, (LPUART_RD_MATCH(base) & ~(mask)) | (value)))
#define LPUART_SET_MATCH(base, value) (BME_OR32(&LPUART_MATCH_REG(base), (uint32_t)(value)))
#define LPUART_CLR_MATCH(base, value) (BME_AND32(&LPUART_MATCH_REG(base), (uint32_t)(~(value))))
#define LPUART_TOG_MATCH(base, value) (BME_XOR32(&LPUART_MATCH_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LPUART_MATCH bitfields
 */

/*!
 * @name Register LPUART_MATCH, field MA1[9:0] (RW)
 *
 * The MA1 and MA2 registers are compared to input data addresses when the most
 * significant bit is set and the associated BAUD[MAEN] bit is set. If a match
 * occurs, the following data is transferred to the data register. If a match
 * fails, the following data is discarded. Software should only write a MA register
 * when the associated BAUD[MAEN] bit is clear.
 */
/*@{*/
/*! @brief Read current value of the LPUART_MATCH_MA1 field. */
#define LPUART_RD_MATCH_MA1(base) ((LPUART_MATCH_REG(base) & LPUART_MATCH_MA1_MASK) >> LPUART_MATCH_MA1_SHIFT)
#define LPUART_BRD_MATCH_MA1(base) (LPUART_RD_MATCH_MA1(base))

/*! @brief Set the MA1 field to a new value. */
#define LPUART_WR_MATCH_MA1(base, value) (LPUART_RMW_MATCH(base, LPUART_MATCH_MA1_MASK, LPUART_MATCH_MA1(value)))
#define LPUART_BWR_MATCH_MA1(base, value) (LPUART_WR_MATCH_MA1(base, value))
/*@}*/

/*!
 * @name Register LPUART_MATCH, field MA2[25:16] (RW)
 *
 * The MA1 and MA2 registers are compared to input data addresses when the most
 * significant bit is set and the associated BAUD[MAEN] bit is set. If a match
 * occurs, the following data is transferred to the data register. If a match
 * fails, the following data is discarded. Software should only write a MA register
 * when the associated BAUD[MAEN] bit is clear.
 */
/*@{*/
/*! @brief Read current value of the LPUART_MATCH_MA2 field. */
#define LPUART_RD_MATCH_MA2(base) ((LPUART_MATCH_REG(base) & LPUART_MATCH_MA2_MASK) >> LPUART_MATCH_MA2_SHIFT)
#define LPUART_BRD_MATCH_MA2(base) (LPUART_RD_MATCH_MA2(base))

/*! @brief Set the MA2 field to a new value. */
#define LPUART_WR_MATCH_MA2(base, value) (LPUART_RMW_MATCH(base, LPUART_MATCH_MA2_MASK, LPUART_MATCH_MA2(value)))
#define LPUART_BWR_MATCH_MA2(base, value) (LPUART_WR_MATCH_MA2(base, value))
/*@}*/

/*******************************************************************************
 * LPUART_MODIR - LPUART Modem IrDA Register
 ******************************************************************************/

/*!
 * @brief LPUART_MODIR - LPUART Modem IrDA Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The MODEM register controls options for setting the modem configuration.
 */
/*!
 * @name Constants and macros for entire LPUART_MODIR register
 */
/*@{*/
#define LPUART_RD_MODIR(base)    (LPUART_MODIR_REG(base))
#define LPUART_WR_MODIR(base, value) (LPUART_MODIR_REG(base) = (value))
#define LPUART_RMW_MODIR(base, mask, value) (LPUART_WR_MODIR(base, (LPUART_RD_MODIR(base) & ~(mask)) | (value)))
#define LPUART_SET_MODIR(base, value) (BME_OR32(&LPUART_MODIR_REG(base), (uint32_t)(value)))
#define LPUART_CLR_MODIR(base, value) (BME_AND32(&LPUART_MODIR_REG(base), (uint32_t)(~(value))))
#define LPUART_TOG_MODIR(base, value) (BME_XOR32(&LPUART_MODIR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LPUART_MODIR bitfields
 */

/*!
 * @name Register LPUART_MODIR, field TXCTSE[0] (RW)
 *
 * TXCTSE controls the operation of the transmitter. TXCTSE can be set
 * independently from the state of TXRTSE and RXRTSE.
 *
 * Values:
 * - 0b0 - CTS has no effect on the transmitter.
 * - 0b1 - Enables clear-to-send operation. The transmitter checks the state of
 *     CTS each time it is ready to send a character. If CTS is asserted, the
 *     character is sent. If CTS is deasserted, the signal TXD remains in the mark
 *     state and transmission is delayed until CTS is asserted. Changes in CTS as
 *     a character is being sent do not affect its transmission.
 */
/*@{*/
/*! @brief Read current value of the LPUART_MODIR_TXCTSE field. */
#define LPUART_RD_MODIR_TXCTSE(base) ((LPUART_MODIR_REG(base) & LPUART_MODIR_TXCTSE_MASK) >> LPUART_MODIR_TXCTSE_SHIFT)
#define LPUART_BRD_MODIR_TXCTSE(base) (BME_UBFX32(&LPUART_MODIR_REG(base), LPUART_MODIR_TXCTSE_SHIFT, LPUART_MODIR_TXCTSE_WIDTH))

/*! @brief Set the TXCTSE field to a new value. */
#define LPUART_WR_MODIR_TXCTSE(base, value) (LPUART_RMW_MODIR(base, LPUART_MODIR_TXCTSE_MASK, LPUART_MODIR_TXCTSE(value)))
#define LPUART_BWR_MODIR_TXCTSE(base, value) (BME_BFI32(&LPUART_MODIR_REG(base), ((uint32_t)(value) << LPUART_MODIR_TXCTSE_SHIFT), LPUART_MODIR_TXCTSE_SHIFT, LPUART_MODIR_TXCTSE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_MODIR, field TXRTSE[1] (RW)
 *
 * Controls RTS before and after a transmission.
 *
 * Values:
 * - 0b0 - The transmitter has no effect on RTS.
 * - 0b1 - When a character is placed into an empty transmitter data buffer ,
 *     RTS asserts one bit time before the start bit is transmitted. RTS deasserts
 *     one bit time after all characters in the transmitter data buffer and shift
 *     register are completely sent, including the last stop bit.
 */
/*@{*/
/*! @brief Read current value of the LPUART_MODIR_TXRTSE field. */
#define LPUART_RD_MODIR_TXRTSE(base) ((LPUART_MODIR_REG(base) & LPUART_MODIR_TXRTSE_MASK) >> LPUART_MODIR_TXRTSE_SHIFT)
#define LPUART_BRD_MODIR_TXRTSE(base) (BME_UBFX32(&LPUART_MODIR_REG(base), LPUART_MODIR_TXRTSE_SHIFT, LPUART_MODIR_TXRTSE_WIDTH))

/*! @brief Set the TXRTSE field to a new value. */
#define LPUART_WR_MODIR_TXRTSE(base, value) (LPUART_RMW_MODIR(base, LPUART_MODIR_TXRTSE_MASK, LPUART_MODIR_TXRTSE(value)))
#define LPUART_BWR_MODIR_TXRTSE(base, value) (BME_BFI32(&LPUART_MODIR_REG(base), ((uint32_t)(value) << LPUART_MODIR_TXRTSE_SHIFT), LPUART_MODIR_TXRTSE_SHIFT, LPUART_MODIR_TXRTSE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_MODIR, field TXRTSPOL[2] (RW)
 *
 * Controls the polarity of the transmitter RTS. TXRTSPOL does not affect the
 * polarity of the receiver RTS. RTS will remain negated in the active low state
 * unless TXRTSE is set.
 *
 * Values:
 * - 0b0 - Transmitter RTS is active low.
 * - 0b1 - Transmitter RTS is active high.
 */
/*@{*/
/*! @brief Read current value of the LPUART_MODIR_TXRTSPOL field. */
#define LPUART_RD_MODIR_TXRTSPOL(base) ((LPUART_MODIR_REG(base) & LPUART_MODIR_TXRTSPOL_MASK) >> LPUART_MODIR_TXRTSPOL_SHIFT)
#define LPUART_BRD_MODIR_TXRTSPOL(base) (BME_UBFX32(&LPUART_MODIR_REG(base), LPUART_MODIR_TXRTSPOL_SHIFT, LPUART_MODIR_TXRTSPOL_WIDTH))

/*! @brief Set the TXRTSPOL field to a new value. */
#define LPUART_WR_MODIR_TXRTSPOL(base, value) (LPUART_RMW_MODIR(base, LPUART_MODIR_TXRTSPOL_MASK, LPUART_MODIR_TXRTSPOL(value)))
#define LPUART_BWR_MODIR_TXRTSPOL(base, value) (BME_BFI32(&LPUART_MODIR_REG(base), ((uint32_t)(value) << LPUART_MODIR_TXRTSPOL_SHIFT), LPUART_MODIR_TXRTSPOL_SHIFT, LPUART_MODIR_TXRTSPOL_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_MODIR, field RXRTSE[3] (RW)
 *
 * Allows the RTS output to control the CTS input of the transmitting device to
 * prevent receiver overrun. Do not set both RXRTSE and TXRTSE.
 *
 * Values:
 * - 0b0 - The receiver has no effect on RTS.
 * - 0b1 - RTS is deasserted if the receiver data register is full or a start
 *     bit has been detected that would cause the receiver data register to become
 *     full. RTS is asserted if the receiver data register is not full and has
 *     not detected a start bit that would cause the receiver data register to
 *     become full.
 */
/*@{*/
/*! @brief Read current value of the LPUART_MODIR_RXRTSE field. */
#define LPUART_RD_MODIR_RXRTSE(base) ((LPUART_MODIR_REG(base) & LPUART_MODIR_RXRTSE_MASK) >> LPUART_MODIR_RXRTSE_SHIFT)
#define LPUART_BRD_MODIR_RXRTSE(base) (BME_UBFX32(&LPUART_MODIR_REG(base), LPUART_MODIR_RXRTSE_SHIFT, LPUART_MODIR_RXRTSE_WIDTH))

/*! @brief Set the RXRTSE field to a new value. */
#define LPUART_WR_MODIR_RXRTSE(base, value) (LPUART_RMW_MODIR(base, LPUART_MODIR_RXRTSE_MASK, LPUART_MODIR_RXRTSE(value)))
#define LPUART_BWR_MODIR_RXRTSE(base, value) (BME_BFI32(&LPUART_MODIR_REG(base), ((uint32_t)(value) << LPUART_MODIR_RXRTSE_SHIFT), LPUART_MODIR_RXRTSE_SHIFT, LPUART_MODIR_RXRTSE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_MODIR, field TXCTSC[4] (RW)
 *
 * Configures if the CTS state is checked at the start of each character or only
 * when the transmitter is idle.
 *
 * Values:
 * - 0b0 - CTS input is sampled at the start of each character.
 * - 0b1 - CTS input is sampled when the transmitter is idle.
 */
/*@{*/
/*! @brief Read current value of the LPUART_MODIR_TXCTSC field. */
#define LPUART_RD_MODIR_TXCTSC(base) ((LPUART_MODIR_REG(base) & LPUART_MODIR_TXCTSC_MASK) >> LPUART_MODIR_TXCTSC_SHIFT)
#define LPUART_BRD_MODIR_TXCTSC(base) (BME_UBFX32(&LPUART_MODIR_REG(base), LPUART_MODIR_TXCTSC_SHIFT, LPUART_MODIR_TXCTSC_WIDTH))

/*! @brief Set the TXCTSC field to a new value. */
#define LPUART_WR_MODIR_TXCTSC(base, value) (LPUART_RMW_MODIR(base, LPUART_MODIR_TXCTSC_MASK, LPUART_MODIR_TXCTSC(value)))
#define LPUART_BWR_MODIR_TXCTSC(base, value) (BME_BFI32(&LPUART_MODIR_REG(base), ((uint32_t)(value) << LPUART_MODIR_TXCTSC_SHIFT), LPUART_MODIR_TXCTSC_SHIFT, LPUART_MODIR_TXCTSC_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_MODIR, field TXCTSSRC[5] (RW)
 *
 * Configures the source of the CTS input.
 *
 * Values:
 * - 0b0 - CTS input is the LPUART_CTS pin.
 * - 0b1 - CTS input is the inverted Receiver Match result.
 */
/*@{*/
/*! @brief Read current value of the LPUART_MODIR_TXCTSSRC field. */
#define LPUART_RD_MODIR_TXCTSSRC(base) ((LPUART_MODIR_REG(base) & LPUART_MODIR_TXCTSSRC_MASK) >> LPUART_MODIR_TXCTSSRC_SHIFT)
#define LPUART_BRD_MODIR_TXCTSSRC(base) (BME_UBFX32(&LPUART_MODIR_REG(base), LPUART_MODIR_TXCTSSRC_SHIFT, LPUART_MODIR_TXCTSSRC_WIDTH))

/*! @brief Set the TXCTSSRC field to a new value. */
#define LPUART_WR_MODIR_TXCTSSRC(base, value) (LPUART_RMW_MODIR(base, LPUART_MODIR_TXCTSSRC_MASK, LPUART_MODIR_TXCTSSRC(value)))
#define LPUART_BWR_MODIR_TXCTSSRC(base, value) (BME_BFI32(&LPUART_MODIR_REG(base), ((uint32_t)(value) << LPUART_MODIR_TXCTSSRC_SHIFT), LPUART_MODIR_TXCTSSRC_SHIFT, LPUART_MODIR_TXCTSSRC_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_MODIR, field RTSWATER[15:8] (RW)
 *
 * Configures the point at which the RX RTS output negates based on the number
 * of additional characters that can be stored in the Receive FIFO. When
 * configured to 0, RTS negates when the the start bit is detetected for the character
 * that will cause the FIFO to become full.
 *
 * Values:
 * - 0b00000000 - RTS asserts when the receiver FIFO is full or receiving a
 *     character that causes the FIFO to become full.
 * - 0b00000001 - RTS asserts when the receive FIFO is less than or equal to the
 *     RXWATER configuration and negates when the receive FIFO is greater than
 *     the RXWATER configuration.
 */
/*@{*/
/*! @brief Read current value of the LPUART_MODIR_RTSWATER field. */
#define LPUART_RD_MODIR_RTSWATER(base) ((LPUART_MODIR_REG(base) & LPUART_MODIR_RTSWATER_MASK) >> LPUART_MODIR_RTSWATER_SHIFT)
#define LPUART_BRD_MODIR_RTSWATER(base) (BME_UBFX32(&LPUART_MODIR_REG(base), LPUART_MODIR_RTSWATER_SHIFT, LPUART_MODIR_RTSWATER_WIDTH))

/*! @brief Set the RTSWATER field to a new value. */
#define LPUART_WR_MODIR_RTSWATER(base, value) (LPUART_RMW_MODIR(base, LPUART_MODIR_RTSWATER_MASK, LPUART_MODIR_RTSWATER(value)))
#define LPUART_BWR_MODIR_RTSWATER(base, value) (BME_BFI32(&LPUART_MODIR_REG(base), ((uint32_t)(value) << LPUART_MODIR_RTSWATER_SHIFT), LPUART_MODIR_RTSWATER_SHIFT, LPUART_MODIR_RTSWATER_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_MODIR, field TNP[17:16] (RW)
 *
 * Enables whether the LPUART transmits a 1/OSR, 2/OSR, 3/OSR or 4/OSR narrow
 * pulse.
 *
 * Values:
 * - 0b00 - 1/OSR.
 * - 0b01 - 2/OSR.
 * - 0b10 - 3/OSR.
 * - 0b11 - 4/OSR.
 */
/*@{*/
/*! @brief Read current value of the LPUART_MODIR_TNP field. */
#define LPUART_RD_MODIR_TNP(base) ((LPUART_MODIR_REG(base) & LPUART_MODIR_TNP_MASK) >> LPUART_MODIR_TNP_SHIFT)
#define LPUART_BRD_MODIR_TNP(base) (BME_UBFX32(&LPUART_MODIR_REG(base), LPUART_MODIR_TNP_SHIFT, LPUART_MODIR_TNP_WIDTH))

/*! @brief Set the TNP field to a new value. */
#define LPUART_WR_MODIR_TNP(base, value) (LPUART_RMW_MODIR(base, LPUART_MODIR_TNP_MASK, LPUART_MODIR_TNP(value)))
#define LPUART_BWR_MODIR_TNP(base, value) (BME_BFI32(&LPUART_MODIR_REG(base), ((uint32_t)(value) << LPUART_MODIR_TNP_SHIFT), LPUART_MODIR_TNP_SHIFT, LPUART_MODIR_TNP_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_MODIR, field IREN[18] (RW)
 *
 * Enables/disables the infrared modulation/demodulation.
 *
 * Values:
 * - 0b0 - IR disabled.
 * - 0b1 - IR enabled.
 */
/*@{*/
/*! @brief Read current value of the LPUART_MODIR_IREN field. */
#define LPUART_RD_MODIR_IREN(base) ((LPUART_MODIR_REG(base) & LPUART_MODIR_IREN_MASK) >> LPUART_MODIR_IREN_SHIFT)
#define LPUART_BRD_MODIR_IREN(base) (BME_UBFX32(&LPUART_MODIR_REG(base), LPUART_MODIR_IREN_SHIFT, LPUART_MODIR_IREN_WIDTH))

/*! @brief Set the IREN field to a new value. */
#define LPUART_WR_MODIR_IREN(base, value) (LPUART_RMW_MODIR(base, LPUART_MODIR_IREN_MASK, LPUART_MODIR_IREN(value)))
#define LPUART_BWR_MODIR_IREN(base, value) (BME_BFI32(&LPUART_MODIR_REG(base), ((uint32_t)(value) << LPUART_MODIR_IREN_SHIFT), LPUART_MODIR_IREN_SHIFT, LPUART_MODIR_IREN_WIDTH))
/*@}*/

/*******************************************************************************
 * LPUART_FIFO - LPUART FIFO Register
 ******************************************************************************/

/*!
 * @brief LPUART_FIFO - LPUART FIFO Register (RW)
 *
 * Reset value: 0x00000022U
 *
 * This register provides the ability for the programmer to turn on and off FIFO
 * functionality. It also provides the size of the FIFO that has been
 * implemented. This register may be read at any time. This register must be written only
 * when CTRL[RE] and CTRL[TE] are cleared/not set and when the data buffer/FIFO is
 * empty.
 */
/*!
 * @name Constants and macros for entire LPUART_FIFO register
 */
/*@{*/
#define LPUART_RD_FIFO(base)     (LPUART_FIFO_REG(base))
#define LPUART_WR_FIFO(base, value) (LPUART_FIFO_REG(base) = (value))
#define LPUART_RMW_FIFO(base, mask, value) (LPUART_WR_FIFO(base, (LPUART_RD_FIFO(base) & ~(mask)) | (value)))
#define LPUART_SET_FIFO(base, value) (BME_OR32(&LPUART_FIFO_REG(base), (uint32_t)(value)))
#define LPUART_CLR_FIFO(base, value) (BME_AND32(&LPUART_FIFO_REG(base), (uint32_t)(~(value))))
#define LPUART_TOG_FIFO(base, value) (BME_XOR32(&LPUART_FIFO_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LPUART_FIFO bitfields
 */

/*!
 * @name Register LPUART_FIFO, field RXFIFOSIZE[2:0] (RO)
 *
 * The maximum number of receive datawords that can be stored in the receive
 * buffer before an overrun occurs. This field is read only.
 *
 * Values:
 * - 0b000 - Receive FIFO/Buffer depth = 1 dataword.
 * - 0b001 - Receive FIFO/Buffer depth = 4 datawords.
 * - 0b010 - Receive FIFO/Buffer depth = 8 datawords.
 * - 0b011 - Receive FIFO/Buffer depth = 16 datawords.
 * - 0b100 - Receive FIFO/Buffer depth = 32 datawords.
 * - 0b101 - Receive FIFO/Buffer depth = 64 datawords.
 * - 0b110 - Receive FIFO/Buffer depth = 128 datawords.
 * - 0b111 - Receive FIFO/Buffer depth = 256 datawords.
 */
/*@{*/
/*! @brief Read current value of the LPUART_FIFO_RXFIFOSIZE field. */
#define LPUART_RD_FIFO_RXFIFOSIZE(base) ((LPUART_FIFO_REG(base) & LPUART_FIFO_RXFIFOSIZE_MASK) >> LPUART_FIFO_RXFIFOSIZE_SHIFT)
#define LPUART_BRD_FIFO_RXFIFOSIZE(base) (BME_UBFX32(&LPUART_FIFO_REG(base), LPUART_FIFO_RXFIFOSIZE_SHIFT, LPUART_FIFO_RXFIFOSIZE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_FIFO, field RXFE[3] (RW)
 *
 * When this field is set, the built in FIFO structure for the receive buffer is
 * enabled. The size of the FIFO structure is indicated by the RXFIFOSIZE field.
 * If this field is not set, the receive buffer operates as a FIFO of depth one
 * dataword regardless of the value in RXFIFOSIZE. Both CTRL[TE] and CTRL[RE]
 * must be cleared prior to changing this field.
 *
 * Values:
 * - 0b0 - Receive FIFO is not enabled. Buffer is depth 1. (Legacy support)
 * - 0b1 - Receive FIFO is enabled. Buffer is depth indicted by RXFIFOSIZE.
 */
/*@{*/
/*! @brief Read current value of the LPUART_FIFO_RXFE field. */
#define LPUART_RD_FIFO_RXFE(base) ((LPUART_FIFO_REG(base) & LPUART_FIFO_RXFE_MASK) >> LPUART_FIFO_RXFE_SHIFT)
#define LPUART_BRD_FIFO_RXFE(base) (BME_UBFX32(&LPUART_FIFO_REG(base), LPUART_FIFO_RXFE_SHIFT, LPUART_FIFO_RXFE_WIDTH))

/*! @brief Set the RXFE field to a new value. */
#define LPUART_WR_FIFO_RXFE(base, value) (LPUART_RMW_FIFO(base, (LPUART_FIFO_RXFE_MASK | LPUART_FIFO_RXUF_MASK | LPUART_FIFO_TXOF_MASK), LPUART_FIFO_RXFE(value)))
#define LPUART_BWR_FIFO_RXFE(base, value) (BME_BFI32(&LPUART_FIFO_REG(base), ((uint32_t)(value) << LPUART_FIFO_RXFE_SHIFT), LPUART_FIFO_RXFE_SHIFT, LPUART_FIFO_RXFE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_FIFO, field TXFIFOSIZE[6:4] (RO)
 *
 * The maximum number of transmit datawords that can be stored in the transmit
 * buffer. This field is read only.
 *
 * Values:
 * - 0b000 - Transmit FIFO/Buffer depth = 1 dataword.
 * - 0b001 - Transmit FIFO/Buffer depth = 4 datawords.
 * - 0b010 - Transmit FIFO/Buffer depth = 8 datawords.
 * - 0b011 - Transmit FIFO/Buffer depth = 16 datawords.
 * - 0b100 - Transmit FIFO/Buffer depth = 32 datawords.
 * - 0b101 - Transmit FIFO/Buffer depth = 64 datawords.
 * - 0b110 - Transmit FIFO/Buffer depth = 128 datawords.
 * - 0b111 - Transmit FIFO/Buffer depth = 256 datawords
 */
/*@{*/
/*! @brief Read current value of the LPUART_FIFO_TXFIFOSIZE field. */
#define LPUART_RD_FIFO_TXFIFOSIZE(base) ((LPUART_FIFO_REG(base) & LPUART_FIFO_TXFIFOSIZE_MASK) >> LPUART_FIFO_TXFIFOSIZE_SHIFT)
#define LPUART_BRD_FIFO_TXFIFOSIZE(base) (BME_UBFX32(&LPUART_FIFO_REG(base), LPUART_FIFO_TXFIFOSIZE_SHIFT, LPUART_FIFO_TXFIFOSIZE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_FIFO, field TXFE[7] (RW)
 *
 * When this field is set, the built in FIFO structure for the transmit buffer
 * is enabled. The size of the FIFO structure is indicated by TXFIFOSIZE. If this
 * field is not set, the transmit buffer operates as a FIFO of depth one dataword
 * regardless of the value in TXFIFOSIZE. Both CTRL[TE] and CTRL[RE] must be
 * cleared prior to changing this field.
 *
 * Values:
 * - 0b0 - Transmit FIFO is not enabled. Buffer is depth 1. (Legacy support).
 * - 0b1 - Transmit FIFO is enabled. Buffer is depth indicated by TXFIFOSIZE.
 */
/*@{*/
/*! @brief Read current value of the LPUART_FIFO_TXFE field. */
#define LPUART_RD_FIFO_TXFE(base) ((LPUART_FIFO_REG(base) & LPUART_FIFO_TXFE_MASK) >> LPUART_FIFO_TXFE_SHIFT)
#define LPUART_BRD_FIFO_TXFE(base) (BME_UBFX32(&LPUART_FIFO_REG(base), LPUART_FIFO_TXFE_SHIFT, LPUART_FIFO_TXFE_WIDTH))

/*! @brief Set the TXFE field to a new value. */
#define LPUART_WR_FIFO_TXFE(base, value) (LPUART_RMW_FIFO(base, (LPUART_FIFO_TXFE_MASK | LPUART_FIFO_RXUF_MASK | LPUART_FIFO_TXOF_MASK), LPUART_FIFO_TXFE(value)))
#define LPUART_BWR_FIFO_TXFE(base, value) (BME_BFI32(&LPUART_FIFO_REG(base), ((uint32_t)(value) << LPUART_FIFO_TXFE_SHIFT), LPUART_FIFO_TXFE_SHIFT, LPUART_FIFO_TXFE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_FIFO, field RXUFE[8] (RW)
 *
 * When this field is set, the RXUF flag generates an interrupt to the host.
 *
 * Values:
 * - 0b0 - RXUF flag does not generate an interrupt to the host.
 * - 0b1 - RXUF flag generates an interrupt to the host.
 */
/*@{*/
/*! @brief Read current value of the LPUART_FIFO_RXUFE field. */
#define LPUART_RD_FIFO_RXUFE(base) ((LPUART_FIFO_REG(base) & LPUART_FIFO_RXUFE_MASK) >> LPUART_FIFO_RXUFE_SHIFT)
#define LPUART_BRD_FIFO_RXUFE(base) (BME_UBFX32(&LPUART_FIFO_REG(base), LPUART_FIFO_RXUFE_SHIFT, LPUART_FIFO_RXUFE_WIDTH))

/*! @brief Set the RXUFE field to a new value. */
#define LPUART_WR_FIFO_RXUFE(base, value) (LPUART_RMW_FIFO(base, (LPUART_FIFO_RXUFE_MASK | LPUART_FIFO_RXUF_MASK | LPUART_FIFO_TXOF_MASK), LPUART_FIFO_RXUFE(value)))
#define LPUART_BWR_FIFO_RXUFE(base, value) (BME_BFI32(&LPUART_FIFO_REG(base), ((uint32_t)(value) << LPUART_FIFO_RXUFE_SHIFT), LPUART_FIFO_RXUFE_SHIFT, LPUART_FIFO_RXUFE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_FIFO, field TXOFE[9] (RW)
 *
 * When this field is set, the TXOF flag generates an interrupt to the host.
 *
 * Values:
 * - 0b0 - TXOF flag does not generate an interrupt to the host.
 * - 0b1 - TXOF flag generates an interrupt to the host.
 */
/*@{*/
/*! @brief Read current value of the LPUART_FIFO_TXOFE field. */
#define LPUART_RD_FIFO_TXOFE(base) ((LPUART_FIFO_REG(base) & LPUART_FIFO_TXOFE_MASK) >> LPUART_FIFO_TXOFE_SHIFT)
#define LPUART_BRD_FIFO_TXOFE(base) (BME_UBFX32(&LPUART_FIFO_REG(base), LPUART_FIFO_TXOFE_SHIFT, LPUART_FIFO_TXOFE_WIDTH))

/*! @brief Set the TXOFE field to a new value. */
#define LPUART_WR_FIFO_TXOFE(base, value) (LPUART_RMW_FIFO(base, (LPUART_FIFO_TXOFE_MASK | LPUART_FIFO_RXUF_MASK | LPUART_FIFO_TXOF_MASK), LPUART_FIFO_TXOFE(value)))
#define LPUART_BWR_FIFO_TXOFE(base, value) (BME_BFI32(&LPUART_FIFO_REG(base), ((uint32_t)(value) << LPUART_FIFO_TXOFE_SHIFT), LPUART_FIFO_TXOFE_SHIFT, LPUART_FIFO_TXOFE_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_FIFO, field RXIDEN[12:10] (RW)
 *
 * When set, enables the assertion of RDRF when the receiver is idle for a
 * number of idle characters and the FIFO is not empty.
 *
 * Values:
 * - 0b000 - Disable RDRF assertion due to partially filled FIFO when receiver
 *     is idle.
 * - 0b001 - Enable RDRF assertion due to partially filled FIFO when receiver is
 *     idle for 1 character.
 * - 0b010 - Enable RDRF assertion due to partially filled FIFO when receiver is
 *     idle for 2 characters.
 * - 0b011 - Enable RDRF assertion due to partially filled FIFO when receiver is
 *     idle for 4 characters.
 * - 0b100 - Enable RDRF assertion due to partially filled FIFO when receiver is
 *     idle for 8 characters.
 * - 0b101 - Enable RDRF assertion due to partially filled FIFO when receiver is
 *     idle for 16 characters.
 * - 0b110 - Enable RDRF assertion due to partially filled FIFO when receiver is
 *     idle for 32 characters.
 * - 0b111 - Enable RDRF assertion due to partially filled FIFO when receiver is
 *     idle for 64 characters.
 */
/*@{*/
/*! @brief Read current value of the LPUART_FIFO_RXIDEN field. */
#define LPUART_RD_FIFO_RXIDEN(base) ((LPUART_FIFO_REG(base) & LPUART_FIFO_RXIDEN_MASK) >> LPUART_FIFO_RXIDEN_SHIFT)
#define LPUART_BRD_FIFO_RXIDEN(base) (BME_UBFX32(&LPUART_FIFO_REG(base), LPUART_FIFO_RXIDEN_SHIFT, LPUART_FIFO_RXIDEN_WIDTH))

/*! @brief Set the RXIDEN field to a new value. */
#define LPUART_WR_FIFO_RXIDEN(base, value) (LPUART_RMW_FIFO(base, (LPUART_FIFO_RXIDEN_MASK | LPUART_FIFO_RXUF_MASK | LPUART_FIFO_TXOF_MASK), LPUART_FIFO_RXIDEN(value)))
#define LPUART_BWR_FIFO_RXIDEN(base, value) (BME_BFI32(&LPUART_FIFO_REG(base), ((uint32_t)(value) << LPUART_FIFO_RXIDEN_SHIFT), LPUART_FIFO_RXIDEN_SHIFT, LPUART_FIFO_RXIDEN_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_FIFO, field RXFLUSH[14] (WORZ)
 *
 * Writing to this field causes all data that is stored in the receive
 * FIFO/buffer to be flushed. This does not affect data that is in the receive shift
 * register.
 *
 * Values:
 * - 0b0 - No flush operation occurs.
 * - 0b1 - All data in the receive FIFO/buffer is cleared out.
 */
/*@{*/
/*! @brief Set the RXFLUSH field to a new value. */
#define LPUART_WR_FIFO_RXFLUSH(base, value) (LPUART_RMW_FIFO(base, (LPUART_FIFO_RXFLUSH_MASK | LPUART_FIFO_RXUF_MASK | LPUART_FIFO_TXOF_MASK), LPUART_FIFO_RXFLUSH(value)))
#define LPUART_BWR_FIFO_RXFLUSH(base, value) (BME_BFI32(&LPUART_FIFO_REG(base), ((uint32_t)(value) << LPUART_FIFO_RXFLUSH_SHIFT), LPUART_FIFO_RXFLUSH_SHIFT, LPUART_FIFO_RXFLUSH_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_FIFO, field TXFLUSH[15] (WORZ)
 *
 * Writing to this field causes all data that is stored in the transmit
 * FIFO/buffer to be flushed. This does not affect data that is in the transmit shift
 * register.
 *
 * Values:
 * - 0b0 - No flush operation occurs.
 * - 0b1 - All data in the transmit FIFO/Buffer is cleared out.
 */
/*@{*/
/*! @brief Set the TXFLUSH field to a new value. */
#define LPUART_WR_FIFO_TXFLUSH(base, value) (LPUART_RMW_FIFO(base, (LPUART_FIFO_TXFLUSH_MASK | LPUART_FIFO_RXUF_MASK | LPUART_FIFO_TXOF_MASK), LPUART_FIFO_TXFLUSH(value)))
#define LPUART_BWR_FIFO_TXFLUSH(base, value) (BME_BFI32(&LPUART_FIFO_REG(base), ((uint32_t)(value) << LPUART_FIFO_TXFLUSH_SHIFT), LPUART_FIFO_TXFLUSH_SHIFT, LPUART_FIFO_TXFLUSH_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_FIFO, field RXUF[16] (W1C)
 *
 * Indicates that more data has been read from the receive buffer than was
 * present. This field will assert regardless of the value of RXUFE. However, an
 * interrupt will be issued to the host only if RXUFE is set. This flag is cleared by
 * writing a 1.
 *
 * Values:
 * - 0b0 - No receive buffer underflow has occurred since the last time the flag
 *     was cleared.
 * - 0b1 - At least one receive buffer underflow has occurred since the last
 *     time the flag was cleared.
 */
/*@{*/
/*! @brief Read current value of the LPUART_FIFO_RXUF field. */
#define LPUART_RD_FIFO_RXUF(base) ((LPUART_FIFO_REG(base) & LPUART_FIFO_RXUF_MASK) >> LPUART_FIFO_RXUF_SHIFT)
#define LPUART_BRD_FIFO_RXUF(base) (BME_UBFX32(&LPUART_FIFO_REG(base), LPUART_FIFO_RXUF_SHIFT, LPUART_FIFO_RXUF_WIDTH))

/*! @brief Set the RXUF field to a new value. */
#define LPUART_WR_FIFO_RXUF(base, value) (LPUART_RMW_FIFO(base, (LPUART_FIFO_RXUF_MASK | LPUART_FIFO_TXOF_MASK), LPUART_FIFO_RXUF(value)))
#define LPUART_BWR_FIFO_RXUF(base, value) (BME_BFI32(&LPUART_FIFO_REG(base), ((uint32_t)(value) << LPUART_FIFO_RXUF_SHIFT), LPUART_FIFO_RXUF_SHIFT, LPUART_FIFO_RXUF_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_FIFO, field TXOF[17] (W1C)
 *
 * Indicates that more data has been written to the transmit buffer than it can
 * hold. This field will assert regardless of the value of TXOFE. However, an
 * interrupt will be issued to the host only if TXOFE is set. This flag is cleared
 * by writing a 1.
 *
 * Values:
 * - 0b0 - No transmit buffer overflow has occurred since the last time the flag
 *     was cleared.
 * - 0b1 - At least one transmit buffer overflow has occurred since the last
 *     time the flag was cleared.
 */
/*@{*/
/*! @brief Read current value of the LPUART_FIFO_TXOF field. */
#define LPUART_RD_FIFO_TXOF(base) ((LPUART_FIFO_REG(base) & LPUART_FIFO_TXOF_MASK) >> LPUART_FIFO_TXOF_SHIFT)
#define LPUART_BRD_FIFO_TXOF(base) (BME_UBFX32(&LPUART_FIFO_REG(base), LPUART_FIFO_TXOF_SHIFT, LPUART_FIFO_TXOF_WIDTH))

/*! @brief Set the TXOF field to a new value. */
#define LPUART_WR_FIFO_TXOF(base, value) (LPUART_RMW_FIFO(base, (LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK), LPUART_FIFO_TXOF(value)))
#define LPUART_BWR_FIFO_TXOF(base, value) (BME_BFI32(&LPUART_FIFO_REG(base), ((uint32_t)(value) << LPUART_FIFO_TXOF_SHIFT), LPUART_FIFO_TXOF_SHIFT, LPUART_FIFO_TXOF_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_FIFO, field RXEMPT[22] (RO)
 *
 * Asserts when there is no data in the receive FIFO/Buffer. This field does not
 * take into account data that is in the receive shift register.
 *
 * Values:
 * - 0b0 - Receive buffer is not empty.
 * - 0b1 - Receive buffer is empty.
 */
/*@{*/
/*! @brief Read current value of the LPUART_FIFO_RXEMPT field. */
#define LPUART_RD_FIFO_RXEMPT(base) ((LPUART_FIFO_REG(base) & LPUART_FIFO_RXEMPT_MASK) >> LPUART_FIFO_RXEMPT_SHIFT)
#define LPUART_BRD_FIFO_RXEMPT(base) (BME_UBFX32(&LPUART_FIFO_REG(base), LPUART_FIFO_RXEMPT_SHIFT, LPUART_FIFO_RXEMPT_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_FIFO, field TXEMPT[23] (RO)
 *
 * Asserts when there is no data in the Transmit FIFO/buffer. This field does
 * not take into account data that is in the transmit shift register.
 *
 * Values:
 * - 0b0 - Transmit buffer is not empty.
 * - 0b1 - Transmit buffer is empty.
 */
/*@{*/
/*! @brief Read current value of the LPUART_FIFO_TXEMPT field. */
#define LPUART_RD_FIFO_TXEMPT(base) ((LPUART_FIFO_REG(base) & LPUART_FIFO_TXEMPT_MASK) >> LPUART_FIFO_TXEMPT_SHIFT)
#define LPUART_BRD_FIFO_TXEMPT(base) (BME_UBFX32(&LPUART_FIFO_REG(base), LPUART_FIFO_TXEMPT_SHIFT, LPUART_FIFO_TXEMPT_WIDTH))
/*@}*/

/*******************************************************************************
 * LPUART_WATER - LPUART Watermark Register
 ******************************************************************************/

/*!
 * @brief LPUART_WATER - LPUART Watermark Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register provides the ability to set a programmable threshold for
 * notification of needing additional transmit data. This register may be read at any
 * time but must be written only when CTRL[TE] is not set.
 */
/*!
 * @name Constants and macros for entire LPUART_WATER register
 */
/*@{*/
#define LPUART_RD_WATER(base)    (LPUART_WATER_REG(base))
#define LPUART_WR_WATER(base, value) (LPUART_WATER_REG(base) = (value))
#define LPUART_RMW_WATER(base, mask, value) (LPUART_WR_WATER(base, (LPUART_RD_WATER(base) & ~(mask)) | (value)))
#define LPUART_SET_WATER(base, value) (BME_OR32(&LPUART_WATER_REG(base), (uint32_t)(value)))
#define LPUART_CLR_WATER(base, value) (BME_AND32(&LPUART_WATER_REG(base), (uint32_t)(~(value))))
#define LPUART_TOG_WATER(base, value) (BME_XOR32(&LPUART_WATER_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LPUART_WATER bitfields
 */

/*!
 * @name Register LPUART_WATER, field TXWATER[7:0] (RW)
 *
 * When the number of datawords in the transmit FIFO/buffer is equal to or less
 * than the value in this register field, an interrupt or a DMA request is
 * generated. For proper operation, the value in TXWATER must be set to be less than
 * the size of the transmit buffer/FIFO size as indicated by FIFO[TXFIFOSIZE] and
 * FIFO[TXFE].
 */
/*@{*/
/*! @brief Read current value of the LPUART_WATER_TXWATER field. */
#define LPUART_RD_WATER_TXWATER(base) ((LPUART_WATER_REG(base) & LPUART_WATER_TXWATER_MASK) >> LPUART_WATER_TXWATER_SHIFT)
#define LPUART_BRD_WATER_TXWATER(base) (BME_UBFX32(&LPUART_WATER_REG(base), LPUART_WATER_TXWATER_SHIFT, LPUART_WATER_TXWATER_WIDTH))

/*! @brief Set the TXWATER field to a new value. */
#define LPUART_WR_WATER_TXWATER(base, value) (LPUART_RMW_WATER(base, LPUART_WATER_TXWATER_MASK, LPUART_WATER_TXWATER(value)))
#define LPUART_BWR_WATER_TXWATER(base, value) (BME_BFI32(&LPUART_WATER_REG(base), ((uint32_t)(value) << LPUART_WATER_TXWATER_SHIFT), LPUART_WATER_TXWATER_SHIFT, LPUART_WATER_TXWATER_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_WATER, field TXCOUNT[15:8] (RO)
 *
 * The value in this register indicates the number of datawords that are in the
 * transmit FIFO/buffer. If a dataword is being transmitted, that is, in the
 * transmit shift register, it is not included in the count. This value may be used
 * in conjunction with FIFO[TXFIFOSIZE] to calculate how much room is left in the
 * transmit FIFO/buffer.
 */
/*@{*/
/*! @brief Read current value of the LPUART_WATER_TXCOUNT field. */
#define LPUART_RD_WATER_TXCOUNT(base) ((LPUART_WATER_REG(base) & LPUART_WATER_TXCOUNT_MASK) >> LPUART_WATER_TXCOUNT_SHIFT)
#define LPUART_BRD_WATER_TXCOUNT(base) (BME_UBFX32(&LPUART_WATER_REG(base), LPUART_WATER_TXCOUNT_SHIFT, LPUART_WATER_TXCOUNT_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_WATER, field RXWATER[23:16] (RW)
 *
 * When the number of datawords in the receive FIFO/buffer is equal to or
 * greater than the value in this register field, an interrupt or a DMA request is
 * generated. For proper operation, the value in RXWATER must be set to be less than
 * the receive FIFO/buffer size as indicated by FIFO[RXFIFOSIZE] and FIFO[RXFE]
 * and must be greater than 0.
 */
/*@{*/
/*! @brief Read current value of the LPUART_WATER_RXWATER field. */
#define LPUART_RD_WATER_RXWATER(base) ((LPUART_WATER_REG(base) & LPUART_WATER_RXWATER_MASK) >> LPUART_WATER_RXWATER_SHIFT)
#define LPUART_BRD_WATER_RXWATER(base) (BME_UBFX32(&LPUART_WATER_REG(base), LPUART_WATER_RXWATER_SHIFT, LPUART_WATER_RXWATER_WIDTH))

/*! @brief Set the RXWATER field to a new value. */
#define LPUART_WR_WATER_RXWATER(base, value) (LPUART_RMW_WATER(base, LPUART_WATER_RXWATER_MASK, LPUART_WATER_RXWATER(value)))
#define LPUART_BWR_WATER_RXWATER(base, value) (BME_BFI32(&LPUART_WATER_REG(base), ((uint32_t)(value) << LPUART_WATER_RXWATER_SHIFT), LPUART_WATER_RXWATER_SHIFT, LPUART_WATER_RXWATER_WIDTH))
/*@}*/

/*!
 * @name Register LPUART_WATER, field RXCOUNT[31:24] (RO)
 *
 * The value in this register indicates the number of datawords that are in the
 * receive FIFO/buffer. If a dataword is being received, that is, in the receive
 * shift register, it is not included in the count. This value may be used in
 * conjunction with FIFO[RXFIFOSIZE] to calculate how much room is left in the
 * receive FIFO/buffer.
 */
/*@{*/
/*! @brief Read current value of the LPUART_WATER_RXCOUNT field. */
#define LPUART_RD_WATER_RXCOUNT(base) ((LPUART_WATER_REG(base) & LPUART_WATER_RXCOUNT_MASK) >> LPUART_WATER_RXCOUNT_SHIFT)
#define LPUART_BRD_WATER_RXCOUNT(base) (BME_UBFX32(&LPUART_WATER_REG(base), LPUART_WATER_RXCOUNT_SHIFT, LPUART_WATER_RXCOUNT_WIDTH))
/*@}*/

/*
 * MK82F25615 LTC
 *
 * LTC
 *
 * Registers defined in this header file:
 * - LTC_MD - LTC Mode Register (non-PKHA/non-RNG use)
 * - LTC_MDPK - LTC Mode Register (PublicKey)
 * - LTC_KS - LTC Key Size Register
 * - LTC_DS - LTC Data Size Register
 * - LTC_ICVS - LTC ICV Size Register
 * - LTC_COM - LTC Command Register
 * - LTC_CTL - LTC Control Register
 * - LTC_CW - LTC Clear Written Register
 * - LTC_STA - LTC Status Register
 * - LTC_ESTA - LTC Error Status Register
 * - LTC_AADSZ - LTC AAD Size Register
 * - LTC_IVSZ - LTC IV Size Register
 * - LTC_DPAMS - LTC DPA Mask Seed Register
 * - LTC_PKASZ - LTC PKHA A Size Register
 * - LTC_PKBSZ - LTC PKHA B Size Register
 * - LTC_PKNSZ - LTC PKHA N Size Register
 * - LTC_PKESZ - LTC PKHA E Size Register
 * - LTC_CTX - LTC Context Register
 * - LTC_KEY - LTC Key Registers
 * - LTC_RNG4_DRNG_STATUS - LTC RNG4 DRNG Status
 * - LTC_RNG4_DRNG_INTERVAL_0 - LTC RNG4 DRNG Interval 0 Register
 * - LTC_RNG4_DRNG_INTERVAL_1 - LTC RNG4 DRNG Interval 1 Register
 * - LTC_RNG4_DRNG_HASH_CONTROL - LTC RNG4 DRNG Hash Control Register
 * - LTC_RNG4_DRNG_HASH_DIGEST - LTC RNG4 DRNG Hash Digest Register
 * - LTC_RNG4_DRNG_DEBUG_BUFFER - LTC RNG4 DRNG Debug Buffer
 * - LTC_VID1 - LTC Version ID Register
 * - LTC_CHAVID - LTC CHA Version ID Register
 * - LTC_FIFOSTA - LTC FIFO Status Register
 * - LTC_IFIFO - LTC Input Data FIFO
 * - LTC_OFIFO - LTC Output Data FIFO
 * - LTC_PKA - LTC PKHA A 0 Register
 * - LTC_PKA0 - LTC PKHA A0 0 Register
 * - LTC_PKA1 - LTC PKHA A1 0 Register
 * - LTC_PKA2 - LTC PKHA A2 0 Register
 * - LTC_PKA3 - LTC PKHA A3 0 Register
 * - LTC_PKB - LTC PKHA B 0 Register
 * - LTC_PKB0 - LTC PKHA B0 0 Register
 * - LTC_PKB1 - LTC PKHA B1 0 Register
 * - LTC_PKB2 - LTC PKHA B2 0 Register
 * - LTC_PKB3 - LTC PKHA B3 0 Register
 * - LTC_PKN - LTC PKHA N 0 Register
 * - LTC_PKN0 - LTC PKHA N0 0 Register
 * - LTC_PKN1 - LTC PKHA N1 0 Register
 * - LTC_PKN2 - LTC PKHA N2 0 Register
 * - LTC_PKN3 - LTC PKHA N3 0 Register
 * - LTC_PKE - LTC PKHA E 0 Register
 * - LTC_PKE0 - LTC PKHA E0 0 Register
 * - LTC_PKE1 - LTC PKHA E1 0 Register
 * - LTC_PKE2 - LTC PKHA E2 0 Register
 * - LTC_PKE3 - LTC PKHA E3 0 Register
 */

#define LTC_INSTANCE_COUNT (1U) /*!< Number of instances of the LTC module. */
#define LTC0_IDX (0U) /*!< Instance number for LTC0. */

/*******************************************************************************
 * LTC_MDPK - LTC Mode Register (PublicKey)
 ******************************************************************************/

/*!
 * @brief LTC_MDPK - LTC Mode Register (PublicKey) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The Mode Register is used to tell the CHAs which operation is being
 * requested. The interpretation of this register is for public key operations (PKHA)
 * only, and is described herein. The bit assignments for the PKHA_MODE will be
 * different depending on which of the three types of PKHA functions is being called.
 * The three function types are: 1) Clear Memory, 2) Modular Arithmetic, and 3)
 * Copy Memory. Detailed descriptions of their mode formats can be found in Table
 * , Table and Table .
 */
/*!
 * @name Constants and macros for entire LTC_MDPK register
 */
/*@{*/
#define LTC_RD_MDPK(base)        (LTC_MDPK_REG(base))
#define LTC_WR_MDPK(base, value) (LTC_MDPK_REG(base) = (value))
#define LTC_RMW_MDPK(base, mask, value) (LTC_WR_MDPK(base, (LTC_RD_MDPK(base) & ~(mask)) | (value)))
#define LTC_SET_MDPK(base, value) (BME_OR32(&LTC_MDPK_REG(base), (uint32_t)(value)))
#define LTC_CLR_MDPK(base, value) (BME_AND32(&LTC_MDPK_REG(base), (uint32_t)(~(value))))
#define LTC_TOG_MDPK(base, value) (BME_XOR32(&LTC_MDPK_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LTC_MDPK bitfields
 */

/*!
 * @name Register LTC_MDPK, field PKHA_MODE_LS[11:0] (RW)
 *
 * PKHA_MODE least significant 12 bits. The format of the PKHA_MODE field
 * differs depending on which of the three types of PKHA functions is being executed.
 * The three function types are: 1) Clear Memory, 2) Modular Arithmetic, and 3)
 * Copy Memory. Detailed descriptions of their mode formats can be found in Table ,
 * Table and Table .
 */
/*@{*/
/*! @brief Read current value of the LTC_MDPK_PKHA_MODE_LS field. */
#define LTC_RD_MDPK_PKHA_MODE_LS(base) ((LTC_MDPK_REG(base) & LTC_MDPK_PKHA_MODE_LS_MASK) >> LTC_MDPK_PKHA_MODE_LS_SHIFT)
#define LTC_BRD_MDPK_PKHA_MODE_LS(base) (LTC_RD_MDPK_PKHA_MODE_LS(base))

/*! @brief Set the PKHA_MODE_LS field to a new value. */
#define LTC_WR_MDPK_PKHA_MODE_LS(base, value) (LTC_RMW_MDPK(base, LTC_MDPK_PKHA_MODE_LS_MASK, LTC_MDPK_PKHA_MODE_LS(value)))
#define LTC_BWR_MDPK_PKHA_MODE_LS(base, value) (LTC_WR_MDPK_PKHA_MODE_LS(base, value))
/*@}*/

/*!
 * @name Register LTC_MDPK, field PKHA_MODE_MS[19:16] (RW)
 *
 * PKHA_MODE most-significant 4 bits. The format of the PKHA_MODE field differs
 * depending on which of the three types of PKHA functions is being executed. The
 * three function types are: 1) Clear Memory, 2) Modular Arithmetic, and 3) Copy
 * Memory. Detailed descriptions of their mode formats can be found in Table ,
 * Table and Table .
 */
/*@{*/
/*! @brief Read current value of the LTC_MDPK_PKHA_MODE_MS field. */
#define LTC_RD_MDPK_PKHA_MODE_MS(base) ((LTC_MDPK_REG(base) & LTC_MDPK_PKHA_MODE_MS_MASK) >> LTC_MDPK_PKHA_MODE_MS_SHIFT)
#define LTC_BRD_MDPK_PKHA_MODE_MS(base) (BME_UBFX32(&LTC_MDPK_REG(base), LTC_MDPK_PKHA_MODE_MS_SHIFT, LTC_MDPK_PKHA_MODE_MS_WIDTH))

/*! @brief Set the PKHA_MODE_MS field to a new value. */
#define LTC_WR_MDPK_PKHA_MODE_MS(base, value) (LTC_RMW_MDPK(base, LTC_MDPK_PKHA_MODE_MS_MASK, LTC_MDPK_PKHA_MODE_MS(value)))
#define LTC_BWR_MDPK_PKHA_MODE_MS(base, value) (BME_BFI32(&LTC_MDPK_REG(base), ((uint32_t)(value) << LTC_MDPK_PKHA_MODE_MS_SHIFT), LTC_MDPK_PKHA_MODE_MS_SHIFT, LTC_MDPK_PKHA_MODE_MS_WIDTH))
/*@}*/

/*!
 * @name Register LTC_MDPK, field ALG[23:20] (RW)
 *
 * Algorithm. This field specifies which algorithm is being selected.
 *
 * Values:
 * - 0b1000 - PKHA
 */
/*@{*/
#define LTC_MDPK_ALG_PKHA              (0x8U)        /*!< Bit field value for LTC_MDPK_ALG: PKHA */
/*! @brief Read current value of the LTC_MDPK_ALG field. */
#define LTC_RD_MDPK_ALG(base) ((LTC_MDPK_REG(base) & LTC_MDPK_ALG_MASK) >> LTC_MDPK_ALG_SHIFT)
#define LTC_BRD_MDPK_ALG(base) (BME_UBFX32(&LTC_MDPK_REG(base), LTC_MDPK_ALG_SHIFT, LTC_MDPK_ALG_WIDTH))

/*! @brief Set the ALG field to a new value. */
#define LTC_WR_MDPK_ALG(base, value) (LTC_RMW_MDPK(base, LTC_MDPK_ALG_MASK, LTC_MDPK_ALG(value)))
#define LTC_BWR_MDPK_ALG(base, value) (BME_BFI32(&LTC_MDPK_REG(base), ((uint32_t)(value) << LTC_MDPK_ALG_SHIFT), LTC_MDPK_ALG_SHIFT, LTC_MDPK_ALG_WIDTH))
/*@}*/

/*******************************************************************************
 * LTC_MD - LTC Mode Register (non-PKHA/non-RNG use)
 ******************************************************************************/

/*!
 * @brief LTC_MD - LTC Mode Register (non-PKHA/non-RNG use) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The Mode Register is used to tell the cryptographic engines which operation
 * is being requested. The interpretation of this register will be unique for each
 * CHA. This section defines the format of the Mode Register when used with
 * non-public-key algorithms and non-RNG operations.
 */
/*!
 * @name Constants and macros for entire LTC_MD register
 */
/*@{*/
#define LTC_RD_MD(base)          (LTC_MD_REG(base))
#define LTC_WR_MD(base, value)   (LTC_MD_REG(base) = (value))
#define LTC_RMW_MD(base, mask, value) (LTC_WR_MD(base, (LTC_RD_MD(base) & ~(mask)) | (value)))
#define LTC_SET_MD(base, value)  (BME_OR32(&LTC_MD_REG(base), (uint32_t)(value)))
#define LTC_CLR_MD(base, value)  (BME_AND32(&LTC_MD_REG(base), (uint32_t)(~(value))))
#define LTC_TOG_MD(base, value)  (BME_XOR32(&LTC_MD_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LTC_MD bitfields
 */

/*!
 * @name Register LTC_MD, field ENC[0] (RW)
 *
 * Encrypt/Decrypt. This bit selects encryption or decryption.
 *
 * Values:
 * - 0b0 - Decrypt.
 * - 0b1 - Encrypt.
 */
/*@{*/
#define LTC_MD_ENC_DECRYPT             (0U)          /*!< Bit field value for LTC_MD_ENC: Decrypt. */
#define LTC_MD_ENC_ENCRYPT             (0x1U)        /*!< Bit field value for LTC_MD_ENC: Encrypt. */
/*! @brief Read current value of the LTC_MD_ENC field. */
#define LTC_RD_MD_ENC(base)  ((LTC_MD_REG(base) & LTC_MD_ENC_MASK) >> LTC_MD_ENC_SHIFT)
#define LTC_BRD_MD_ENC(base) (BME_UBFX32(&LTC_MD_REG(base), LTC_MD_ENC_SHIFT, LTC_MD_ENC_WIDTH))

/*! @brief Set the ENC field to a new value. */
#define LTC_WR_MD_ENC(base, value) (LTC_RMW_MD(base, LTC_MD_ENC_MASK, LTC_MD_ENC(value)))
#define LTC_BWR_MD_ENC(base, value) (BME_BFI32(&LTC_MD_REG(base), ((uint32_t)(value) << LTC_MD_ENC_SHIFT), LTC_MD_ENC_SHIFT, LTC_MD_ENC_WIDTH))
/*@}*/

/*!
 * @name Register LTC_MD, field ICV_TEST[1] (RW)
 *
 * ICV Checking / Test AES fault detection. For algorithms other than AES ECB
 * mode: ICV CheckingThis bit selects whether the current algorithm should compare
 * the known ICV versus the calculated ICV. This bit will be ignored by
 * algorithms that do not support ICV checking.0 - Don't compare1 - CompareFor AES ECB
 * mode: Test AES fault detectionIn AES ECB mode, this bit activates fault detection
 * testing by injecting bit level errors into AES core logic as defined in the
 * first 128 bits of the context.0 - Don't inject bit errors1 - Inject bit errors
 */
/*@{*/
/*! @brief Read current value of the LTC_MD_ICV_TEST field. */
#define LTC_RD_MD_ICV_TEST(base) ((LTC_MD_REG(base) & LTC_MD_ICV_TEST_MASK) >> LTC_MD_ICV_TEST_SHIFT)
#define LTC_BRD_MD_ICV_TEST(base) (BME_UBFX32(&LTC_MD_REG(base), LTC_MD_ICV_TEST_SHIFT, LTC_MD_ICV_TEST_WIDTH))

/*! @brief Set the ICV_TEST field to a new value. */
#define LTC_WR_MD_ICV_TEST(base, value) (LTC_RMW_MD(base, LTC_MD_ICV_TEST_MASK, LTC_MD_ICV_TEST(value)))
#define LTC_BWR_MD_ICV_TEST(base, value) (BME_BFI32(&LTC_MD_REG(base), ((uint32_t)(value) << LTC_MD_ICV_TEST_SHIFT), LTC_MD_ICV_TEST_SHIFT, LTC_MD_ICV_TEST_WIDTH))
/*@}*/

/*!
 * @name Register LTC_MD, field AS[3:2] (RW)
 *
 * Algorithm State. This field defines the state of the algorithm that is being
 * executed. This may not be used by every algorithm.
 *
 * Values:
 * - 0b00 - Update
 * - 0b01 - Initialize
 * - 0b10 - Finalize
 * - 0b11 - Initialize/Finalize
 */
/*@{*/
#define LTC_MD_AS_UPDATE               (0U)          /*!< Bit field value for LTC_MD_AS: Update */
#define LTC_MD_AS_INITIALIZE           (0x1U)        /*!< Bit field value for LTC_MD_AS: Initialize */
#define LTC_MD_AS_FINALIZE             (0x2U)        /*!< Bit field value for LTC_MD_AS: Finalize */
#define LTC_MD_AS_INIT_FINAL           (0x3U)        /*!< Bit field value for LTC_MD_AS: Initialize/Finalize */
/*! @brief Read current value of the LTC_MD_AS field. */
#define LTC_RD_MD_AS(base)   ((LTC_MD_REG(base) & LTC_MD_AS_MASK) >> LTC_MD_AS_SHIFT)
#define LTC_BRD_MD_AS(base)  (BME_UBFX32(&LTC_MD_REG(base), LTC_MD_AS_SHIFT, LTC_MD_AS_WIDTH))

/*! @brief Set the AS field to a new value. */
#define LTC_WR_MD_AS(base, value) (LTC_RMW_MD(base, LTC_MD_AS_MASK, LTC_MD_AS(value)))
#define LTC_BWR_MD_AS(base, value) (BME_BFI32(&LTC_MD_REG(base), ((uint32_t)(value) << LTC_MD_AS_SHIFT), LTC_MD_AS_SHIFT, LTC_MD_AS_WIDTH))
/*@}*/

/*!
 * @name Register LTC_MD, field AAI[12:4] (RW)
 *
 * Additional Algorithm information. This field contains additional mode
 * information that is associated with the algorithm that is being executed. See also
 * the section describing the appropriate CHA. Some algorithms do not require
 * additional algorithm information and in those cases this field should be all 0s.AAI
 * Interpretation for AES Modes[For AES the MSB of AAI is the DK (Decrypt Key)
 * bit.] CodeThe codes are mutually exclusive (i.e. they cannot be ORed with each
 * other).InterpretationCodeInterpretation00h CTR (mod 2128) 80hCCM, CCM*
 * 10hCBC90hGCM20hECBA0hCBC_XCBC_MAC30hreservedB0hCTR_XCBC_MAC40hreservedC0hReserved50hReservedD0hReserved60hCMACE0hReserved70hXCBC-MACSetting
 * the DK bit (i.e. ORing 100h with any AES code above) causes Key Register to
 * be loaded with the AES Dcrypt key, rather than the AES Encrypt key.AAI
 * Interpretation for DES CodeInterpretation CodeInterpretation10hCBC30hCFB20hECB40hOFB
 * 80h ORed with any DES code above: Check odd parity
 */
/*@{*/
/*! @brief Read current value of the LTC_MD_AAI field. */
#define LTC_RD_MD_AAI(base)  ((LTC_MD_REG(base) & LTC_MD_AAI_MASK) >> LTC_MD_AAI_SHIFT)
#define LTC_BRD_MD_AAI(base) (LTC_RD_MD_AAI(base))

/*! @brief Set the AAI field to a new value. */
#define LTC_WR_MD_AAI(base, value) (LTC_RMW_MD(base, LTC_MD_AAI_MASK, LTC_MD_AAI(value)))
#define LTC_BWR_MD_AAI(base, value) (LTC_WR_MD_AAI(base, value))
/*@}*/

/*!
 * @name Register LTC_MD, field ALG[23:16] (RW)
 *
 * Algorithm. This field specifies which algorithm is being selected.
 *
 * Values:
 * - 0b00010000 - AES
 * - 0b00100000 - DES
 * - 0b00100001 - 3DES
 */
/*@{*/
#define LTC_MD_ALG_AES                 (0x10U)       /*!< Bit field value for LTC_MD_ALG: AES */
#define LTC_MD_ALG_DES                 (0x20U)       /*!< Bit field value for LTC_MD_ALG: DES */
#define LTC_MD_ALG_TRIPLE_DES          (0x21U)       /*!< Bit field value for LTC_MD_ALG: 3DES */
/*! @brief Read current value of the LTC_MD_ALG field. */
#define LTC_RD_MD_ALG(base)  ((LTC_MD_REG(base) & LTC_MD_ALG_MASK) >> LTC_MD_ALG_SHIFT)
#define LTC_BRD_MD_ALG(base) (BME_UBFX32(&LTC_MD_REG(base), LTC_MD_ALG_SHIFT, LTC_MD_ALG_WIDTH))

/*! @brief Set the ALG field to a new value. */
#define LTC_WR_MD_ALG(base, value) (LTC_RMW_MD(base, LTC_MD_ALG_MASK, LTC_MD_ALG(value)))
#define LTC_BWR_MD_ALG(base, value) (BME_BFI32(&LTC_MD_REG(base), ((uint32_t)(value) << LTC_MD_ALG_SHIFT), LTC_MD_ALG_SHIFT, LTC_MD_ALG_WIDTH))
/*@}*/

/*******************************************************************************
 * LTC_KS - LTC Key Size Register
 ******************************************************************************/

/*!
 * @brief LTC_KS - LTC Key Size Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The Key Size Register is used to tell the crypto engine(AES) the size of the
 * key that was loaded into the Key Register. The Key Size Register must be
 * written after the key is written into the Key Register. Writing to the Key Size
 * Register will prevent the user from modifying the Key Register. Only 16, 24, and
 * 32 byte keys are supported.
 */
/*!
 * @name Constants and macros for entire LTC_KS register
 */
/*@{*/
#define LTC_RD_KS(base)          (LTC_KS_REG(base))
#define LTC_WR_KS(base, value)   (LTC_KS_REG(base) = (value))
#define LTC_RMW_KS(base, mask, value) (LTC_WR_KS(base, (LTC_RD_KS(base) & ~(mask)) | (value)))
#define LTC_SET_KS(base, value)  (BME_OR32(&LTC_KS_REG(base), (uint32_t)(value)))
#define LTC_CLR_KS(base, value)  (BME_AND32(&LTC_KS_REG(base), (uint32_t)(~(value))))
#define LTC_TOG_KS(base, value)  (BME_XOR32(&LTC_KS_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LTC_KS bitfields
 */

/*!
 * @name Register LTC_KS, field KS[5:0] (RW)
 *
 * Key Size. This is the size of a Key measured in bytes
 */
/*@{*/
/*! @brief Read current value of the LTC_KS_KS field. */
#define LTC_RD_KS_KS(base)   ((LTC_KS_REG(base) & LTC_KS_KS_MASK) >> LTC_KS_KS_SHIFT)
#define LTC_BRD_KS_KS(base)  (BME_UBFX32(&LTC_KS_REG(base), LTC_KS_KS_SHIFT, LTC_KS_KS_WIDTH))

/*! @brief Set the KS field to a new value. */
#define LTC_WR_KS_KS(base, value) (LTC_RMW_KS(base, LTC_KS_KS_MASK, LTC_KS_KS(value)))
#define LTC_BWR_KS_KS(base, value) (BME_BFI32(&LTC_KS_REG(base), ((uint32_t)(value) << LTC_KS_KS_SHIFT), LTC_KS_KS_SHIFT, LTC_KS_KS_WIDTH))
/*@}*/

/*******************************************************************************
 * LTC_DS - LTC Data Size Register
 ******************************************************************************/

/*!
 * @brief LTC_DS - LTC Data Size Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The Data Size Register is used to tell the AES the amount of data that will
 * be loaded into the Input Data FIFO. This register should only be written to
 * once during a single operation. Note that writing to the , or the , will cause
 * this register to also update. When this register is then written directory to
 * then the new value will be added to the previous value in the register. That is,
 * if the DS field currently has the value 16, writing 2 to the
 * least-significant half of the Data Size register (i.e. the DS field) will result in a value of
 * 18 in the DS field. Note that AES decrements this register, so reading the
 * register may return a value less than sum of the values that were written into
 * it. This register is cleared whenever a key is decrypted or encrypted.
 */
/*!
 * @name Constants and macros for entire LTC_DS register
 */
/*@{*/
#define LTC_RD_DS(base)          (LTC_DS_REG(base))
#define LTC_WR_DS(base, value)   (LTC_DS_REG(base) = (value))
#define LTC_RMW_DS(base, mask, value) (LTC_WR_DS(base, (LTC_RD_DS(base) & ~(mask)) | (value)))
#define LTC_SET_DS(base, value)  (BME_OR32(&LTC_DS_REG(base), (uint32_t)(value)))
#define LTC_CLR_DS(base, value)  (BME_AND32(&LTC_DS_REG(base), (uint32_t)(~(value))))
#define LTC_TOG_DS(base, value)  (BME_XOR32(&LTC_DS_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LTC_DS bitfields
 */

/*!
 * @name Register LTC_DS, field DS[11:0] (RW)
 *
 * Data Size. This is the number of whole bytes of data that will be consumed by
 * the CHA. Note that writing the AAD Size Register or IV Size Register will
 * result in this register also being written to.
 */
/*@{*/
/*! @brief Read current value of the LTC_DS_DS field. */
#define LTC_RD_DS_DS(base)   ((LTC_DS_REG(base) & LTC_DS_DS_MASK) >> LTC_DS_DS_SHIFT)
#define LTC_BRD_DS_DS(base)  (LTC_RD_DS_DS(base))

/*! @brief Set the DS field to a new value. */
#define LTC_WR_DS_DS(base, value) (LTC_RMW_DS(base, LTC_DS_DS_MASK, LTC_DS_DS(value)))
#define LTC_BWR_DS_DS(base, value) (LTC_WR_DS_DS(base, value))
/*@}*/

/*******************************************************************************
 * LTC_ICVS - LTC ICV Size Register
 ******************************************************************************/

/*!
 * @brief LTC_ICVS - LTC ICV Size Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The ICV Size Register indicates how much of the last block of ICV is valid
 * when performing AES integrity check modes (e.g. AES-CMAC, AES-XCBC-MAC). This
 * register must be written prior to the corresponding word of data being consumed
 * by AES. In practical terms, this means the register must be written prior to
 * the corresponding data being written to the Input Data FIFO.
 */
/*!
 * @name Constants and macros for entire LTC_ICVS register
 */
/*@{*/
#define LTC_RD_ICVS(base)        (LTC_ICVS_REG(base))
#define LTC_WR_ICVS(base, value) (LTC_ICVS_REG(base) = (value))
#define LTC_RMW_ICVS(base, mask, value) (LTC_WR_ICVS(base, (LTC_RD_ICVS(base) & ~(mask)) | (value)))
#define LTC_SET_ICVS(base, value) (BME_OR32(&LTC_ICVS_REG(base), (uint32_t)(value)))
#define LTC_CLR_ICVS(base, value) (BME_AND32(&LTC_ICVS_REG(base), (uint32_t)(~(value))))
#define LTC_TOG_ICVS(base, value) (BME_XOR32(&LTC_ICVS_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LTC_ICVS bitfields
 */

/*!
 * @name Register LTC_ICVS, field ICVS[4:0] (RW)
 *
 * ICV Size, in Bytes.
 */
/*@{*/
/*! @brief Read current value of the LTC_ICVS_ICVS field. */
#define LTC_RD_ICVS_ICVS(base) ((LTC_ICVS_REG(base) & LTC_ICVS_ICVS_MASK) >> LTC_ICVS_ICVS_SHIFT)
#define LTC_BRD_ICVS_ICVS(base) (BME_UBFX32(&LTC_ICVS_REG(base), LTC_ICVS_ICVS_SHIFT, LTC_ICVS_ICVS_WIDTH))

/*! @brief Set the ICVS field to a new value. */
#define LTC_WR_ICVS_ICVS(base, value) (LTC_RMW_ICVS(base, LTC_ICVS_ICVS_MASK, LTC_ICVS_ICVS(value)))
#define LTC_BWR_ICVS_ICVS(base, value) (BME_BFI32(&LTC_ICVS_REG(base), ((uint32_t)(value) << LTC_ICVS_ICVS_SHIFT), LTC_ICVS_ICVS_SHIFT, LTC_ICVS_ICVS_WIDTH))
/*@}*/

/*******************************************************************************
 * LTC_COM - LTC Command Register
 ******************************************************************************/

/*!
 * @brief LTC_COM - LTC Command Register (WO)
 *
 * Reset value: 0x00000000U
 *
 * The LTC Command Register is used to send control signals to the Crypto
 * Engines.
 */
/*!
 * @name Constants and macros for entire LTC_COM register
 */
/*@{*/
#define LTC_WR_COM(base, value)  (LTC_COM_REG(base) = (value))
/*@}*/

/*
 * Constants & macros for individual LTC_COM bitfields
 */

/*!
 * @name Register LTC_COM, field ALL[0] (WO)
 *
 * Reset All Internal Logic. Writing to this bit will reset all accelerator
 * engines and as well as all the internal registers.
 *
 * Values:
 * - 0b0 - Do Not Reset
 * - 0b1 - Reset all CHAs in use by this CCB.
 */
/*@{*/
#define LTC_COM_ALL_NO_RESET           (0U)          /*!< Bit field value for LTC_COM_ALL: Do Not Reset */
#define LTC_COM_ALL_RESET_ALL          (0x1U)        /*!< Bit field value for LTC_COM_ALL: Reset all CHAs in use by this CCB. */
/*! @brief Set the ALL field to a new value. */
#define LTC_WR_COM_ALL(base, value) (LTC_WR_COM(base, LTC_COM_ALL(value)))
#define LTC_BWR_COM_ALL(base, value) (LTC_WR_COM_ALL(base, value))
/*@}*/

/*!
 * @name Register LTC_COM, field AES[1] (WO)
 *
 * Reset AESA. Writing a 1 to this bit resets the AES Accelerator core engine.
 *
 * Values:
 * - 0b0 - Do Not Reset
 * - 0b1 - Reset AES Accelerator
 */
/*@{*/
#define LTC_COM_AES_NO_RESET           (0U)          /*!< Bit field value for LTC_COM_AES: Do Not Reset */
#define LTC_COM_AES_RESET_AESA         (0x1U)        /*!< Bit field value for LTC_COM_AES: Reset AES Accelerator */
/*! @brief Set the AES field to a new value. */
#define LTC_WR_COM_AES(base, value) (LTC_WR_COM(base, LTC_COM_AES(value)))
#define LTC_BWR_COM_AES(base, value) (LTC_WR_COM_AES(base, value))
/*@}*/

/*!
 * @name Register LTC_COM, field DES[2] (WO)
 *
 * Reset DESA. Writing a 1 to this bit resets the DES Accelerator.
 *
 * Values:
 * - 0b0 - Do Not Reset
 * - 0b1 - Reset DES Accelerator
 */
/*@{*/
#define LTC_COM_DES_NO_RESET           (0U)          /*!< Bit field value for LTC_COM_DES: Do Not Reset */
#define LTC_COM_DES_RESET_DESA         (0x1U)        /*!< Bit field value for LTC_COM_DES: Reset DES Accelerator */
/*! @brief Set the DES field to a new value. */
#define LTC_WR_COM_DES(base, value) (LTC_WR_COM(base, LTC_COM_DES(value)))
#define LTC_BWR_COM_DES(base, value) (LTC_WR_COM_DES(base, value))
/*@}*/

/*!
 * @name Register LTC_COM, field PK[6] (WO)
 *
 * Reset PKHA. Writing a 1 to this bit resets the Public Key Hardware
 * Accelerator.
 *
 * Values:
 * - 0b0 - Do Not Reset
 * - 0b1 - Reset Public Key Hardware Accelerator
 */
/*@{*/
#define LTC_COM_PK_NO_RESET            (0U)          /*!< Bit field value for LTC_COM_PK: Do Not Reset */
#define LTC_COM_PK_RESET_PKHA          (0x1U)        /*!< Bit field value for LTC_COM_PK: Reset Public Key Hardware Accelerator */
/*! @brief Set the PK field to a new value. */
#define LTC_WR_COM_PK(base, value) (LTC_WR_COM(base, LTC_COM_PK(value)))
#define LTC_BWR_COM_PK(base, value) (LTC_WR_COM_PK(base, value))
/*@}*/

/*******************************************************************************
 * LTC_CTL - LTC Control Register
 ******************************************************************************/

/*!
 * @brief LTC_CTL - LTC Control Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register is used for some of the internal controls of the LTC block.
 */
/*!
 * @name Constants and macros for entire LTC_CTL register
 */
/*@{*/
#define LTC_RD_CTL(base)         (LTC_CTL_REG(base))
#define LTC_WR_CTL(base, value)  (LTC_CTL_REG(base) = (value))
#define LTC_RMW_CTL(base, mask, value) (LTC_WR_CTL(base, (LTC_RD_CTL(base) & ~(mask)) | (value)))
#define LTC_SET_CTL(base, value) (BME_OR32(&LTC_CTL_REG(base), (uint32_t)(value)))
#define LTC_CLR_CTL(base, value) (BME_AND32(&LTC_CTL_REG(base), (uint32_t)(~(value))))
#define LTC_TOG_CTL(base, value) (BME_XOR32(&LTC_CTL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LTC_CTL bitfields
 */

/*!
 * @name Register LTC_CTL, field IM[0] (RW)
 *
 * Interrupt Mask. Once this bit is set, it can only be cleared by hard reset.
 *
 * Values:
 * - 0b0 - Interrupt not masked.
 * - 0b1 - Interrupt masked
 */
/*@{*/
#define LTC_CTL_IM_INT_NOT_MASKED      (0U)          /*!< Bit field value for LTC_CTL_IM: Interrupt not masked. */
#define LTC_CTL_IM_INT_MASKED          (0x1U)        /*!< Bit field value for LTC_CTL_IM: Interrupt masked */
/*! @brief Read current value of the LTC_CTL_IM field. */
#define LTC_RD_CTL_IM(base)  ((LTC_CTL_REG(base) & LTC_CTL_IM_MASK) >> LTC_CTL_IM_SHIFT)
#define LTC_BRD_CTL_IM(base) (BME_UBFX32(&LTC_CTL_REG(base), LTC_CTL_IM_SHIFT, LTC_CTL_IM_WIDTH))

/*! @brief Set the IM field to a new value. */
#define LTC_WR_CTL_IM(base, value) (LTC_RMW_CTL(base, LTC_CTL_IM_MASK, LTC_CTL_IM(value)))
#define LTC_BWR_CTL_IM(base, value) (BME_BFI32(&LTC_CTL_REG(base), ((uint32_t)(value) << LTC_CTL_IM_SHIFT), LTC_CTL_IM_SHIFT, LTC_CTL_IM_WIDTH))
/*@}*/

/*!
 * @name Register LTC_CTL, field PDE[4] (RW)
 *
 * PKHA Register DMA Enable.
 *
 * Values:
 * - 0b0 - DMA Request and Done signals disabled for the PKHA Registers.
 * - 0b1 - DMA Request and Done signals enabled for the PKHA Registers.
 */
/*@{*/
#define LTC_CTL_PDE_PDE_DISABLED       (0U)          /*!< Bit field value for LTC_CTL_PDE: DMA Request and Done signals disabled for the PKHA Registers. */
#define LTC_CTL_PDE_PDE_ENABLED        (0x1U)        /*!< Bit field value for LTC_CTL_PDE: DMA Request and Done signals enabled for the PKHA Registers. */
/*! @brief Read current value of the LTC_CTL_PDE field. */
#define LTC_RD_CTL_PDE(base) ((LTC_CTL_REG(base) & LTC_CTL_PDE_MASK) >> LTC_CTL_PDE_SHIFT)
#define LTC_BRD_CTL_PDE(base) (BME_UBFX32(&LTC_CTL_REG(base), LTC_CTL_PDE_SHIFT, LTC_CTL_PDE_WIDTH))

/*! @brief Set the PDE field to a new value. */
#define LTC_WR_CTL_PDE(base, value) (LTC_RMW_CTL(base, LTC_CTL_PDE_MASK, LTC_CTL_PDE(value)))
#define LTC_BWR_CTL_PDE(base, value) (BME_BFI32(&LTC_CTL_REG(base), ((uint32_t)(value) << LTC_CTL_PDE_SHIFT), LTC_CTL_PDE_SHIFT, LTC_CTL_PDE_WIDTH))
/*@}*/

/*!
 * @name Register LTC_CTL, field IFE[8] (RW)
 *
 * Input FIFO DMA Enable.
 *
 * Values:
 * - 0b0 - DMA Request and Done signals disabled for the Input FIFO.
 * - 0b1 - DMA Request and Done signals enabled for the Input FIFO.
 */
/*@{*/
#define LTC_CTL_IFE_IFE_DISABLED       (0U)          /*!< Bit field value for LTC_CTL_IFE: DMA Request and Done signals disabled for the Input FIFO. */
#define LTC_CTL_IFE_IFE_ENABLED        (0x1U)        /*!< Bit field value for LTC_CTL_IFE: DMA Request and Done signals enabled for the Input FIFO. */
/*! @brief Read current value of the LTC_CTL_IFE field. */
#define LTC_RD_CTL_IFE(base) ((LTC_CTL_REG(base) & LTC_CTL_IFE_MASK) >> LTC_CTL_IFE_SHIFT)
#define LTC_BRD_CTL_IFE(base) (BME_UBFX32(&LTC_CTL_REG(base), LTC_CTL_IFE_SHIFT, LTC_CTL_IFE_WIDTH))

/*! @brief Set the IFE field to a new value. */
#define LTC_WR_CTL_IFE(base, value) (LTC_RMW_CTL(base, LTC_CTL_IFE_MASK, LTC_CTL_IFE(value)))
#define LTC_BWR_CTL_IFE(base, value) (BME_BFI32(&LTC_CTL_REG(base), ((uint32_t)(value) << LTC_CTL_IFE_SHIFT), LTC_CTL_IFE_SHIFT, LTC_CTL_IFE_WIDTH))
/*@}*/

/*!
 * @name Register LTC_CTL, field IFR[9] (RW)
 *
 * Input FIFO DMA Request Size. The DMA request logic will only request data if
 * the INPUT FIFO has enough space for the request size.
 *
 * Values:
 * - 0b0 - DMA request size is 1 entry.
 * - 0b1 - DMA request size is 4 entries.
 */
/*@{*/
#define LTC_CTL_IFR_IFR_1              (0U)          /*!< Bit field value for LTC_CTL_IFR: DMA request size is 1 entry. */
#define LTC_CTL_IFR_IFR_4              (0x1U)        /*!< Bit field value for LTC_CTL_IFR: DMA request size is 4 entries. */
/*! @brief Read current value of the LTC_CTL_IFR field. */
#define LTC_RD_CTL_IFR(base) ((LTC_CTL_REG(base) & LTC_CTL_IFR_MASK) >> LTC_CTL_IFR_SHIFT)
#define LTC_BRD_CTL_IFR(base) (BME_UBFX32(&LTC_CTL_REG(base), LTC_CTL_IFR_SHIFT, LTC_CTL_IFR_WIDTH))

/*! @brief Set the IFR field to a new value. */
#define LTC_WR_CTL_IFR(base, value) (LTC_RMW_CTL(base, LTC_CTL_IFR_MASK, LTC_CTL_IFR(value)))
#define LTC_BWR_CTL_IFR(base, value) (BME_BFI32(&LTC_CTL_REG(base), ((uint32_t)(value) << LTC_CTL_IFR_SHIFT), LTC_CTL_IFR_SHIFT, LTC_CTL_IFR_WIDTH))
/*@}*/

/*!
 * @name Register LTC_CTL, field OFE[12] (RW)
 *
 * Output FIFO DMA Enable.
 *
 * Values:
 * - 0b0 - DMA Request and Done signals disabled for the Output FIFO.
 * - 0b1 - DMA Request and Done signals enabled for the Output FIFO.
 */
/*@{*/
#define LTC_CTL_OFE_OFE_DISABLED       (0U)          /*!< Bit field value for LTC_CTL_OFE: DMA Request and Done signals disabled for the Output FIFO. */
#define LTC_CTL_OFE_OFE_ENABLED        (0x1U)        /*!< Bit field value for LTC_CTL_OFE: DMA Request and Done signals enabled for the Output FIFO. */
/*! @brief Read current value of the LTC_CTL_OFE field. */
#define LTC_RD_CTL_OFE(base) ((LTC_CTL_REG(base) & LTC_CTL_OFE_MASK) >> LTC_CTL_OFE_SHIFT)
#define LTC_BRD_CTL_OFE(base) (BME_UBFX32(&LTC_CTL_REG(base), LTC_CTL_OFE_SHIFT, LTC_CTL_OFE_WIDTH))

/*! @brief Set the OFE field to a new value. */
#define LTC_WR_CTL_OFE(base, value) (LTC_RMW_CTL(base, LTC_CTL_OFE_MASK, LTC_CTL_OFE(value)))
#define LTC_BWR_CTL_OFE(base, value) (BME_BFI32(&LTC_CTL_REG(base), ((uint32_t)(value) << LTC_CTL_OFE_SHIFT), LTC_CTL_OFE_SHIFT, LTC_CTL_OFE_WIDTH))
/*@}*/

/*!
 * @name Register LTC_CTL, field OFR[13] (RW)
 *
 * Output FIFO DMA Request Size. The DMA request logic will only request data if
 * the OUTPUT FIFO has enough data to satisfy the request.
 *
 * Values:
 * - 0b0 - DMA request size is 1 entry.
 * - 0b1 - DMA request size is 4 entries.
 */
/*@{*/
#define LTC_CTL_OFR_OFR_1              (0U)          /*!< Bit field value for LTC_CTL_OFR: DMA request size is 1 entry. */
#define LTC_CTL_OFR_OFR_4              (0x1U)        /*!< Bit field value for LTC_CTL_OFR: DMA request size is 4 entries. */
/*! @brief Read current value of the LTC_CTL_OFR field. */
#define LTC_RD_CTL_OFR(base) ((LTC_CTL_REG(base) & LTC_CTL_OFR_MASK) >> LTC_CTL_OFR_SHIFT)
#define LTC_BRD_CTL_OFR(base) (BME_UBFX32(&LTC_CTL_REG(base), LTC_CTL_OFR_SHIFT, LTC_CTL_OFR_WIDTH))

/*! @brief Set the OFR field to a new value. */
#define LTC_WR_CTL_OFR(base, value) (LTC_RMW_CTL(base, LTC_CTL_OFR_MASK, LTC_CTL_OFR(value)))
#define LTC_BWR_CTL_OFR(base, value) (BME_BFI32(&LTC_CTL_REG(base), ((uint32_t)(value) << LTC_CTL_OFR_SHIFT), LTC_CTL_OFR_SHIFT, LTC_CTL_OFR_WIDTH))
/*@}*/

/*!
 * @name Register LTC_CTL, field IFS[16] (RW)
 *
 * Input FIFO Byte Swap. Byte swap all data that is written to the Input FIFO.
 *
 * Values:
 * - 0b0 - Do Not Byte Swap Data.
 * - 0b1 - Byte Swap Data.
 */
/*@{*/
#define LTC_CTL_IFS_IFS_NO_SWAP        (0U)          /*!< Bit field value for LTC_CTL_IFS: Do Not Byte Swap Data. */
#define LTC_CTL_IFS_IFS_SWAP           (0x1U)        /*!< Bit field value for LTC_CTL_IFS: Byte Swap Data. */
/*! @brief Read current value of the LTC_CTL_IFS field. */
#define LTC_RD_CTL_IFS(base) ((LTC_CTL_REG(base) & LTC_CTL_IFS_MASK) >> LTC_CTL_IFS_SHIFT)
#define LTC_BRD_CTL_IFS(base) (BME_UBFX32(&LTC_CTL_REG(base), LTC_CTL_IFS_SHIFT, LTC_CTL_IFS_WIDTH))

/*! @brief Set the IFS field to a new value. */
#define LTC_WR_CTL_IFS(base, value) (LTC_RMW_CTL(base, LTC_CTL_IFS_MASK, LTC_CTL_IFS(value)))
#define LTC_BWR_CTL_IFS(base, value) (BME_BFI32(&LTC_CTL_REG(base), ((uint32_t)(value) << LTC_CTL_IFS_SHIFT), LTC_CTL_IFS_SHIFT, LTC_CTL_IFS_WIDTH))
/*@}*/

/*!
 * @name Register LTC_CTL, field OFS[17] (RW)
 *
 * Output FIFO Byte Swap. Byte swap all data that is read from the Onput FIFO.
 *
 * Values:
 * - 0b0 - Do Not Byte Swap Data.
 * - 0b1 - Byte Swap Data.
 */
/*@{*/
#define LTC_CTL_OFS_OFS_NO_SWAP        (0U)          /*!< Bit field value for LTC_CTL_OFS: Do Not Byte Swap Data. */
#define LTC_CTL_OFS_OFS_SWAP           (0x1U)        /*!< Bit field value for LTC_CTL_OFS: Byte Swap Data. */
/*! @brief Read current value of the LTC_CTL_OFS field. */
#define LTC_RD_CTL_OFS(base) ((LTC_CTL_REG(base) & LTC_CTL_OFS_MASK) >> LTC_CTL_OFS_SHIFT)
#define LTC_BRD_CTL_OFS(base) (BME_UBFX32(&LTC_CTL_REG(base), LTC_CTL_OFS_SHIFT, LTC_CTL_OFS_WIDTH))

/*! @brief Set the OFS field to a new value. */
#define LTC_WR_CTL_OFS(base, value) (LTC_RMW_CTL(base, LTC_CTL_OFS_MASK, LTC_CTL_OFS(value)))
#define LTC_BWR_CTL_OFS(base, value) (BME_BFI32(&LTC_CTL_REG(base), ((uint32_t)(value) << LTC_CTL_OFS_SHIFT), LTC_CTL_OFS_SHIFT, LTC_CTL_OFS_WIDTH))
/*@}*/

/*!
 * @name Register LTC_CTL, field KIS[20] (RW)
 *
 * Key Register Input Byte Swap. Byte swap all data that is written to the key
 * register. Data is byte swapped only within a single word.
 *
 * Values:
 * - 0b0 - Do Not Byte Swap Data.
 * - 0b1 - Byte Swap Data.
 */
/*@{*/
#define LTC_CTL_KIS_KIS_NO_SWAP        (0U)          /*!< Bit field value for LTC_CTL_KIS: Do Not Byte Swap Data. */
#define LTC_CTL_KIS_KIS_SWAP           (0x1U)        /*!< Bit field value for LTC_CTL_KIS: Byte Swap Data. */
/*! @brief Read current value of the LTC_CTL_KIS field. */
#define LTC_RD_CTL_KIS(base) ((LTC_CTL_REG(base) & LTC_CTL_KIS_MASK) >> LTC_CTL_KIS_SHIFT)
#define LTC_BRD_CTL_KIS(base) (BME_UBFX32(&LTC_CTL_REG(base), LTC_CTL_KIS_SHIFT, LTC_CTL_KIS_WIDTH))

/*! @brief Set the KIS field to a new value. */
#define LTC_WR_CTL_KIS(base, value) (LTC_RMW_CTL(base, LTC_CTL_KIS_MASK, LTC_CTL_KIS(value)))
#define LTC_BWR_CTL_KIS(base, value) (BME_BFI32(&LTC_CTL_REG(base), ((uint32_t)(value) << LTC_CTL_KIS_SHIFT), LTC_CTL_KIS_SHIFT, LTC_CTL_KIS_WIDTH))
/*@}*/

/*!
 * @name Register LTC_CTL, field KOS[21] (RW)
 *
 * Key Register Output Byte Swap. Byte swap all data that is read from the key
 * register. Data is byte swapped only within a single word.
 *
 * Values:
 * - 0b0 - Do Not Byte Swap Data.
 * - 0b1 - Byte Swap Data.
 */
/*@{*/
#define LTC_CTL_KOS_KOS_NO_SWAP        (0U)          /*!< Bit field value for LTC_CTL_KOS: Do Not Byte Swap Data. */
#define LTC_CTL_KOS_KOS_SWAP           (0x1U)        /*!< Bit field value for LTC_CTL_KOS: Byte Swap Data. */
/*! @brief Read current value of the LTC_CTL_KOS field. */
#define LTC_RD_CTL_KOS(base) ((LTC_CTL_REG(base) & LTC_CTL_KOS_MASK) >> LTC_CTL_KOS_SHIFT)
#define LTC_BRD_CTL_KOS(base) (BME_UBFX32(&LTC_CTL_REG(base), LTC_CTL_KOS_SHIFT, LTC_CTL_KOS_WIDTH))

/*! @brief Set the KOS field to a new value. */
#define LTC_WR_CTL_KOS(base, value) (LTC_RMW_CTL(base, LTC_CTL_KOS_MASK, LTC_CTL_KOS(value)))
#define LTC_BWR_CTL_KOS(base, value) (BME_BFI32(&LTC_CTL_REG(base), ((uint32_t)(value) << LTC_CTL_KOS_SHIFT), LTC_CTL_KOS_SHIFT, LTC_CTL_KOS_WIDTH))
/*@}*/

/*!
 * @name Register LTC_CTL, field CIS[22] (RW)
 *
 * Context Register Input Byte Swap. Byte swap all data that is written to the
 * context register. Data is byte swapped only within a single word.
 *
 * Values:
 * - 0b0 - Do Not Byte Swap Data.
 * - 0b1 - Byte Swap Data.
 */
/*@{*/
#define LTC_CTL_CIS_CIS_NO_SWAP        (0U)          /*!< Bit field value for LTC_CTL_CIS: Do Not Byte Swap Data. */
#define LTC_CTL_CIS_CIS_SWAP           (0x1U)        /*!< Bit field value for LTC_CTL_CIS: Byte Swap Data. */
/*! @brief Read current value of the LTC_CTL_CIS field. */
#define LTC_RD_CTL_CIS(base) ((LTC_CTL_REG(base) & LTC_CTL_CIS_MASK) >> LTC_CTL_CIS_SHIFT)
#define LTC_BRD_CTL_CIS(base) (BME_UBFX32(&LTC_CTL_REG(base), LTC_CTL_CIS_SHIFT, LTC_CTL_CIS_WIDTH))

/*! @brief Set the CIS field to a new value. */
#define LTC_WR_CTL_CIS(base, value) (LTC_RMW_CTL(base, LTC_CTL_CIS_MASK, LTC_CTL_CIS(value)))
#define LTC_BWR_CTL_CIS(base, value) (BME_BFI32(&LTC_CTL_REG(base), ((uint32_t)(value) << LTC_CTL_CIS_SHIFT), LTC_CTL_CIS_SHIFT, LTC_CTL_CIS_WIDTH))
/*@}*/

/*!
 * @name Register LTC_CTL, field COS[23] (RW)
 *
 * Context Register Output Byte Swap. Byte swap all data that is read from the
 * context register. Data is byte swapped only within a single word.
 *
 * Values:
 * - 0b0 - Do Not Byte Swap Data.
 * - 0b1 - Byte Swap Data.
 */
/*@{*/
#define LTC_CTL_COS_COS_NO_SWAP        (0U)          /*!< Bit field value for LTC_CTL_COS: Do Not Byte Swap Data. */
#define LTC_CTL_COS_COS_SWAP           (0x1U)        /*!< Bit field value for LTC_CTL_COS: Byte Swap Data. */
/*! @brief Read current value of the LTC_CTL_COS field. */
#define LTC_RD_CTL_COS(base) ((LTC_CTL_REG(base) & LTC_CTL_COS_MASK) >> LTC_CTL_COS_SHIFT)
#define LTC_BRD_CTL_COS(base) (BME_UBFX32(&LTC_CTL_REG(base), LTC_CTL_COS_SHIFT, LTC_CTL_COS_WIDTH))

/*! @brief Set the COS field to a new value. */
#define LTC_WR_CTL_COS(base, value) (LTC_RMW_CTL(base, LTC_CTL_COS_MASK, LTC_CTL_COS(value)))
#define LTC_BWR_CTL_COS(base, value) (BME_BFI32(&LTC_CTL_REG(base), ((uint32_t)(value) << LTC_CTL_COS_SHIFT), LTC_CTL_COS_SHIFT, LTC_CTL_COS_WIDTH))
/*@}*/

/*!
 * @name Register LTC_CTL, field KAL[31] (RW)
 *
 * Key Register Access Lock. Read access to the key register is blocked. Any
 * reads of the key register will only return zero. Once this bit is set, it can
 * only be cleared by hard reset.
 *
 * Values:
 * - 0b0 - Key Register is readable.
 * - 0b1 - Key Register is not readable.
 */
/*@{*/
#define LTC_CTL_KAL_KAL_READABLE       (0U)          /*!< Bit field value for LTC_CTL_KAL: Key Register is readable. */
#define LTC_CTL_KAL_KAL_NOT_READABLE   (0x1U)        /*!< Bit field value for LTC_CTL_KAL: Key Register is not readable. */
/*! @brief Read current value of the LTC_CTL_KAL field. */
#define LTC_RD_CTL_KAL(base) ((LTC_CTL_REG(base) & LTC_CTL_KAL_MASK) >> LTC_CTL_KAL_SHIFT)
#define LTC_BRD_CTL_KAL(base) (BME_UBFX32(&LTC_CTL_REG(base), LTC_CTL_KAL_SHIFT, LTC_CTL_KAL_WIDTH))

/*! @brief Set the KAL field to a new value. */
#define LTC_WR_CTL_KAL(base, value) (LTC_RMW_CTL(base, LTC_CTL_KAL_MASK, LTC_CTL_KAL(value)))
#define LTC_BWR_CTL_KAL(base, value) (BME_BFI32(&LTC_CTL_REG(base), ((uint32_t)(value) << LTC_CTL_KAL_SHIFT), LTC_CTL_KAL_SHIFT, LTC_CTL_KAL_WIDTH))
/*@}*/

/*******************************************************************************
 * LTC_CW - LTC Clear Written Register
 ******************************************************************************/

/*!
 * @brief LTC_CW - LTC Clear Written Register (WO)
 *
 * Reset value: 0x00000000U
 *
 * The Clear Written Register is used to clear many of the internal registers.
 * All fields of this register are self-clearing.
 */
/*!
 * @name Constants and macros for entire LTC_CW register
 */
/*@{*/
#define LTC_WR_CW(base, value)   (LTC_CW_REG(base) = (value))
/*@}*/

/*
 * Constants & macros for individual LTC_CW bitfields
 */

/*!
 * @name Register LTC_CW, field CM[0] (WO)
 *
 * Clear the Mode Register. Writing a one to this bit causes the Mode Register
 * to be cleared.
 */
/*@{*/
/*! @brief Set the CM field to a new value. */
#define LTC_WR_CW_CM(base, value) (LTC_WR_CW(base, LTC_CW_CM(value)))
#define LTC_BWR_CW_CM(base, value) (LTC_WR_CW_CM(base, value))
/*@}*/

/*!
 * @name Register LTC_CW, field CDS[2] (WO)
 *
 * Clear the Data Size Register. Writing a one to this bit causes the Data Size
 * Register to be cleared. This clears AAD Size as well.
 */
/*@{*/
/*! @brief Set the CDS field to a new value. */
#define LTC_WR_CW_CDS(base, value) (LTC_WR_CW(base, LTC_CW_CDS(value)))
#define LTC_BWR_CW_CDS(base, value) (LTC_WR_CW_CDS(base, value))
/*@}*/

/*!
 * @name Register LTC_CW, field CICV[3] (WO)
 *
 * Clear the ICV Size Register. Writing a one to this bit causes the ICV Size
 * Register to be cleared.
 */
/*@{*/
/*! @brief Set the CICV field to a new value. */
#define LTC_WR_CW_CICV(base, value) (LTC_WR_CW(base, LTC_CW_CICV(value)))
#define LTC_BWR_CW_CICV(base, value) (LTC_WR_CW_CICV(base, value))
/*@}*/

/*!
 * @name Register LTC_CW, field CCR[5] (WO)
 *
 * Clear the Context Register. Writing a one to this bit causes the Context
 * Register to be cleared.
 */
/*@{*/
/*! @brief Set the CCR field to a new value. */
#define LTC_WR_CW_CCR(base, value) (LTC_WR_CW(base, LTC_CW_CCR(value)))
#define LTC_BWR_CW_CCR(base, value) (LTC_WR_CW_CCR(base, value))
/*@}*/

/*!
 * @name Register LTC_CW, field CKR[6] (WO)
 *
 * Clear the Key Register. Writing a one to this bit causes the Key and Key Size
 * Registers to be cleared.
 */
/*@{*/
/*! @brief Set the CKR field to a new value. */
#define LTC_WR_CW_CKR(base, value) (LTC_WR_CW(base, LTC_CW_CKR(value)))
#define LTC_BWR_CW_CKR(base, value) (LTC_WR_CW_CKR(base, value))
/*@}*/

/*!
 * @name Register LTC_CW, field CPKA[12] (WO)
 *
 * Clear the PKHA A Size Register. Writing a one to this bit causes the PKHA A
 * Size Register to be cleared.
 */
/*@{*/
/*! @brief Set the CPKA field to a new value. */
#define LTC_WR_CW_CPKA(base, value) (LTC_WR_CW(base, LTC_CW_CPKA(value)))
#define LTC_BWR_CW_CPKA(base, value) (LTC_WR_CW_CPKA(base, value))
/*@}*/

/*!
 * @name Register LTC_CW, field CPKB[13] (WO)
 *
 * Clear the PKHA B Size Register. Writing a one to this bit causes the PKHA B
 * Size Register to be cleared.
 */
/*@{*/
/*! @brief Set the CPKB field to a new value. */
#define LTC_WR_CW_CPKB(base, value) (LTC_WR_CW(base, LTC_CW_CPKB(value)))
#define LTC_BWR_CW_CPKB(base, value) (LTC_WR_CW_CPKB(base, value))
/*@}*/

/*!
 * @name Register LTC_CW, field CPKN[14] (WO)
 *
 * Clear the PKHA N Size Register. Writing a one to this bit causes the PKHA N
 * Size Register to be cleared.
 */
/*@{*/
/*! @brief Set the CPKN field to a new value. */
#define LTC_WR_CW_CPKN(base, value) (LTC_WR_CW(base, LTC_CW_CPKN(value)))
#define LTC_BWR_CW_CPKN(base, value) (LTC_WR_CW_CPKN(base, value))
/*@}*/

/*!
 * @name Register LTC_CW, field CPKE[15] (WO)
 *
 * Clear the PKHA E Size Register. Writing a one to this bit causes the PKHA E
 * Size Register to be cleared.
 */
/*@{*/
/*! @brief Set the CPKE field to a new value. */
#define LTC_WR_CW_CPKE(base, value) (LTC_WR_CW(base, LTC_CW_CPKE(value)))
#define LTC_BWR_CW_CPKE(base, value) (LTC_WR_CW_CPKE(base, value))
/*@}*/

/*!
 * @name Register LTC_CW, field COF[30] (WO)
 *
 * Clear Output FIFO. Writing a 1 to this bit causes the Output FIFO to be
 * cleared.
 */
/*@{*/
/*! @brief Set the COF field to a new value. */
#define LTC_WR_CW_COF(base, value) (LTC_WR_CW(base, LTC_CW_COF(value)))
#define LTC_BWR_CW_COF(base, value) (LTC_WR_CW_COF(base, value))
/*@}*/

/*!
 * @name Register LTC_CW, field CIF[31] (WO)
 *
 * Clear Input FIFO. Writing a 1 to this bit causes the Input Data FIFO.
 */
/*@{*/
/*! @brief Set the CIF field to a new value. */
#define LTC_WR_CW_CIF(base, value) (LTC_WR_CW(base, LTC_CW_CIF(value)))
#define LTC_BWR_CW_CIF(base, value) (LTC_WR_CW_CIF(base, value))
/*@}*/

/*******************************************************************************
 * LTC_STA - LTC Status Register
 ******************************************************************************/

/*!
 * @brief LTC_STA - LTC Status Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LTC Status Register shows the status of the internal Crypto engine and
 * its internal registers.
 */
/*!
 * @name Constants and macros for entire LTC_STA register
 */
/*@{*/
#define LTC_RD_STA(base)         (LTC_STA_REG(base))
#define LTC_WR_STA(base, value)  (LTC_STA_REG(base) = (value))
#define LTC_RMW_STA(base, mask, value) (LTC_WR_STA(base, (LTC_RD_STA(base) & ~(mask)) | (value)))
#define LTC_SET_STA(base, value) (BME_OR32(&LTC_STA_REG(base), (uint32_t)(value)))
#define LTC_CLR_STA(base, value) (BME_AND32(&LTC_STA_REG(base), (uint32_t)(~(value))))
#define LTC_TOG_STA(base, value) (BME_XOR32(&LTC_STA_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LTC_STA bitfields
 */

/*!
 * @name Register LTC_STA, field AB[1] (RO)
 *
 * AESA Busy. This bit indicates that the AES Accelertor is busy. The CHA can
 * either be busy processing data or resetting.
 *
 * Values:
 * - 0b0 - AESA Idle
 * - 0b1 - AESA Busy.
 */
/*@{*/
#define LTC_STA_AB_AESA_IDLE           (0U)          /*!< Bit field value for LTC_STA_AB: AESA Idle */
#define LTC_STA_AB_AESA_BUSY           (0x1U)        /*!< Bit field value for LTC_STA_AB: AESA Busy. */
/*! @brief Read current value of the LTC_STA_AB field. */
#define LTC_RD_STA_AB(base)  ((LTC_STA_REG(base) & LTC_STA_AB_MASK) >> LTC_STA_AB_SHIFT)
#define LTC_BRD_STA_AB(base) (BME_UBFX32(&LTC_STA_REG(base), LTC_STA_AB_SHIFT, LTC_STA_AB_WIDTH))
/*@}*/

/*!
 * @name Register LTC_STA, field DB[2] (RO)
 *
 * DESA Busy. This bit indicates that the DES Accelerator is busy. The CHA can
 * either be busy processing data or resetting.
 *
 * Values:
 * - 0b0 - DESA Idle
 * - 0b1 - DESA Busy.
 */
/*@{*/
#define LTC_STA_DB_DESA_IDLE           (0U)          /*!< Bit field value for LTC_STA_DB: DESA Idle */
#define LTC_STA_DB_DESA_BUSY           (0x1U)        /*!< Bit field value for LTC_STA_DB: DESA Busy. */
/*! @brief Read current value of the LTC_STA_DB field. */
#define LTC_RD_STA_DB(base)  ((LTC_STA_REG(base) & LTC_STA_DB_MASK) >> LTC_STA_DB_SHIFT)
#define LTC_BRD_STA_DB(base) (BME_UBFX32(&LTC_STA_REG(base), LTC_STA_DB_SHIFT, LTC_STA_DB_WIDTH))
/*@}*/

/*!
 * @name Register LTC_STA, field PB[6] (RO)
 *
 * PKHA Busy. This bit indicates that the Public Key Hardware Accelerator is
 * busy. The CHA can either be busy processing data or resetting.
 *
 * Values:
 * - 0b0 - PKHA Idle
 * - 0b1 - PKHA Busy.
 */
/*@{*/
#define LTC_STA_PB_PKHA_IDLE           (0U)          /*!< Bit field value for LTC_STA_PB: PKHA Idle */
#define LTC_STA_PB_PKHA_BUSY           (0x1U)        /*!< Bit field value for LTC_STA_PB: PKHA Busy. */
/*! @brief Read current value of the LTC_STA_PB field. */
#define LTC_RD_STA_PB(base)  ((LTC_STA_REG(base) & LTC_STA_PB_MASK) >> LTC_STA_PB_SHIFT)
#define LTC_BRD_STA_PB(base) (BME_UBFX32(&LTC_STA_REG(base), LTC_STA_PB_SHIFT, LTC_STA_PB_WIDTH))
/*@}*/

/*!
 * @name Register LTC_STA, field DI[16] (W1C)
 *
 * Done Interrupt. The Done Interrupt has been asserted. ValueReadWrite0No Done
 * InterruptNo change1Done Interrupt assertedClear the Done Interrupt
 */
/*@{*/
/*! @brief Read current value of the LTC_STA_DI field. */
#define LTC_RD_STA_DI(base)  ((LTC_STA_REG(base) & LTC_STA_DI_MASK) >> LTC_STA_DI_SHIFT)
#define LTC_BRD_STA_DI(base) (BME_UBFX32(&LTC_STA_REG(base), LTC_STA_DI_SHIFT, LTC_STA_DI_WIDTH))

/*! @brief Set the DI field to a new value. */
#define LTC_WR_STA_DI(base, value) (LTC_RMW_STA(base, LTC_STA_DI_MASK, LTC_STA_DI(value)))
#define LTC_BWR_STA_DI(base, value) (BME_BFI32(&LTC_STA_REG(base), ((uint32_t)(value) << LTC_STA_DI_SHIFT), LTC_STA_DI_SHIFT, LTC_STA_DI_WIDTH))
/*@}*/

/*!
 * @name Register LTC_STA, field EI[20] (RO)
 *
 * Error Interrupt. The Error Interrupt has been asserted. This error can only
 * be cleared by resetting LTC.
 *
 * Values:
 * - 0b0 - Not Error.
 * - 0b1 - Error Interrupt.
 */
/*@{*/
#define LTC_STA_EI_NOT_ERROR_INT       (0U)          /*!< Bit field value for LTC_STA_EI: Not Error. */
#define LTC_STA_EI_ERROR_INT           (0x1U)        /*!< Bit field value for LTC_STA_EI: Error Interrupt. */
/*! @brief Read current value of the LTC_STA_EI field. */
#define LTC_RD_STA_EI(base)  ((LTC_STA_REG(base) & LTC_STA_EI_MASK) >> LTC_STA_EI_SHIFT)
#define LTC_BRD_STA_EI(base) (BME_UBFX32(&LTC_STA_REG(base), LTC_STA_EI_SHIFT, LTC_STA_EI_WIDTH))
/*@}*/

/*!
 * @name Register LTC_STA, field PKP[28] (RO)
 *
 * Public Key is Prime. The given number is probably prime (that is, it passes
 * the Miller-Rabin primality test).
 */
/*@{*/
/*! @brief Read current value of the LTC_STA_PKP field. */
#define LTC_RD_STA_PKP(base) ((LTC_STA_REG(base) & LTC_STA_PKP_MASK) >> LTC_STA_PKP_SHIFT)
#define LTC_BRD_STA_PKP(base) (BME_UBFX32(&LTC_STA_REG(base), LTC_STA_PKP_SHIFT, LTC_STA_PKP_WIDTH))
/*@}*/

/*!
 * @name Register LTC_STA, field PKO[29] (RO)
 *
 * Public Key Operation is One. The greatest common divisor of two numbers is
 * one (that is, the two numbers are relatively prime) for GCD operation, or PKHA
 * result = 1 for Finite Field operations.
 */
/*@{*/
/*! @brief Read current value of the LTC_STA_PKO field. */
#define LTC_RD_STA_PKO(base) ((LTC_STA_REG(base) & LTC_STA_PKO_MASK) >> LTC_STA_PKO_SHIFT)
#define LTC_BRD_STA_PKO(base) (BME_UBFX32(&LTC_STA_REG(base), LTC_STA_PKO_SHIFT, LTC_STA_PKO_WIDTH))
/*@}*/

/*!
 * @name Register LTC_STA, field PKZ[30] (RO)
 *
 * Public Key Operation is Zero. For Finite Field operations the result of a
 * Public Key operation is zero. For ECC operations, the result is Point at infinity.
 */
/*@{*/
/*! @brief Read current value of the LTC_STA_PKZ field. */
#define LTC_RD_STA_PKZ(base) ((LTC_STA_REG(base) & LTC_STA_PKZ_MASK) >> LTC_STA_PKZ_SHIFT)
#define LTC_BRD_STA_PKZ(base) (BME_UBFX32(&LTC_STA_REG(base), LTC_STA_PKZ_SHIFT, LTC_STA_PKZ_WIDTH))
/*@}*/

/*******************************************************************************
 * LTC_ESTA - LTC Error Status Register
 ******************************************************************************/

/*!
 * @brief LTC_ESTA - LTC Error Status Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The LTC Error Register shows the status of the internal Crypto Engine and its
 * internal registers.
 */
/*!
 * @name Constants and macros for entire LTC_ESTA register
 */
/*@{*/
#define LTC_RD_ESTA(base)        (LTC_ESTA_REG(base))
/*@}*/

/*
 * Constants & macros for individual LTC_ESTA bitfields
 */

/*!
 * @name Register LTC_ESTA, field ERRID1[3:0] (RO)
 *
 * Error ID 1. These bits indicate the type of error that was found while
 * processing the Descriptor. The Algorithm that is associated with the error can be
 * found in the CL1 field.Others reserved.
 *
 * Values:
 * - 0b0001 - Mode Error
 * - 0b0010 - Data Size Error, including PKHA N Register Size Error
 * - 0b0011 - Key Size Error, including PKHA E Register Size Error
 * - 0b0100 - PKHA A Register Size Error
 * - 0b0101 - PKHA B Register Size Error
 * - 0b0110 - Data Arrived out of Sequence Error
 * - 0b0111 - PKHA Divide by Zero Error
 * - 0b1000 - PKHA Modulus Even Error
 * - 0b1001 - DES Key Parity Error
 * - 0b1010 - ICV Check Failed
 * - 0b1011 - Internal Hardware Failure
 * - 0b1100 - CCM AAD Size Error (either 1. AAD flag in B0 =1 and no AAD type
 *     provided, 2. AAD flag in B0 = 0 and AAD povided, or 3. AAD flag in B0 =1 and
 *     not enough AAD provided - expecting more based on AAD size.)
 * - 0b1111 - Invalid Crypto Engine Selected
 */
/*@{*/
#define LTC_ESTA_ERRID1_MODE_ERROR     (0x1U)        /*!< Bit field value for LTC_ESTA_ERRID1: Mode Error */
#define LTC_ESTA_ERRID1_DATA_SIZE_ERROR (0x2U)       /*!< Bit field value for LTC_ESTA_ERRID1: Data Size Error, including PKHA N Register Size Error */
#define LTC_ESTA_ERRID1_KEY_SIZE_ERROR (0x3U)        /*!< Bit field value for LTC_ESTA_ERRID1: Key Size Error, including PKHA E Register Size Error */
#define LTC_ESTA_ERRID1_PKHA_A_SIZE_ERROR (0x4U)     /*!< Bit field value for LTC_ESTA_ERRID1: PKHA A Register Size Error */
#define LTC_ESTA_ERRID1_PKHA_B_SIZE_ERROR (0x5U)     /*!< Bit field value for LTC_ESTA_ERRID1: PKHA B Register Size Error */
#define LTC_ESTA_ERRID1_DATA_OUT_OF_SEQ_ERROR (0x6U) /*!< Bit field value for LTC_ESTA_ERRID1: Data Arrived out of Sequence Error */
#define LTC_ESTA_ERRID1_PKHA_DIV_BY_0_ERROR (0x7U)   /*!< Bit field value for LTC_ESTA_ERRID1: PKHA Divide by Zero Error */
#define LTC_ESTA_ERRID1_PKHA_MOD_EVEN_ERROR (0x8U)   /*!< Bit field value for LTC_ESTA_ERRID1: PKHA Modulus Even Error */
#define LTC_ESTA_ERRID1_DES_KEY_PARITY_ERROR (0x9U)  /*!< Bit field value for LTC_ESTA_ERRID1: DES Key Parity Error */
#define LTC_ESTA_ERRID1_ICV_CHECK_FAIL (0xAU)        /*!< Bit field value for LTC_ESTA_ERRID1: ICV Check Failed */
#define LTC_ESTA_ERRID1_INTERNAL_HARD_FAIL (0xBU)    /*!< Bit field value for LTC_ESTA_ERRID1: Internal Hardware Failure */
#define LTC_ESTA_ERRID1_CCM_AAD_SIZE_ERROR (0xCU)    /*!< Bit field value for LTC_ESTA_ERRID1: CCM AAD Size Error (either 1. AAD flag in B0 =1 and no AAD type provided, 2. AAD flag in B0 = 0 and AAD povided, or 3. AAD flag in B0 =1 and not enough AAD provided - expecting more based on AAD size.) */
#define LTC_ESTA_ERRID1_INVALID_ENGINE_SEL_ERROR (0xFU) /*!< Bit field value for LTC_ESTA_ERRID1: Invalid Crypto Engine Selected */
/*! @brief Read current value of the LTC_ESTA_ERRID1 field. */
#define LTC_RD_ESTA_ERRID1(base) ((LTC_ESTA_REG(base) & LTC_ESTA_ERRID1_MASK) >> LTC_ESTA_ERRID1_SHIFT)
#define LTC_BRD_ESTA_ERRID1(base) (BME_UBFX32(&LTC_ESTA_REG(base), LTC_ESTA_ERRID1_SHIFT, LTC_ESTA_ERRID1_WIDTH))
/*@}*/

/*!
 * @name Register LTC_ESTA, field CL1[11:8] (RO)
 *
 * algorithms. The algorithms field indicates which algorithm is asserting an
 * error.Others reserved
 *
 * Values:
 * - 0b0000 - LTC General Error
 * - 0b0001 - AES
 * - 0b0010 - DES
 * - 0b1000 - Public Key
 */
/*@{*/
#define LTC_ESTA_CL1_GEN_ERROR         (0U)          /*!< Bit field value for LTC_ESTA_CL1: LTC General Error */
#define LTC_ESTA_CL1_AES_ERROR         (0x1U)        /*!< Bit field value for LTC_ESTA_CL1: AES */
#define LTC_ESTA_CL1_DES_ERROR         (0x2U)        /*!< Bit field value for LTC_ESTA_CL1: DES */
#define LTC_ESTA_CL1_PKHA_ERROR        (0x8U)        /*!< Bit field value for LTC_ESTA_CL1: Public Key */
/*! @brief Read current value of the LTC_ESTA_CL1 field. */
#define LTC_RD_ESTA_CL1(base) ((LTC_ESTA_REG(base) & LTC_ESTA_CL1_MASK) >> LTC_ESTA_CL1_SHIFT)
#define LTC_BRD_ESTA_CL1(base) (BME_UBFX32(&LTC_ESTA_REG(base), LTC_ESTA_CL1_SHIFT, LTC_ESTA_CL1_WIDTH))
/*@}*/

/*******************************************************************************
 * LTC_AADSZ - LTC AAD Size Register
 ******************************************************************************/

/*!
 * @brief LTC_AADSZ - LTC AAD Size Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The AAD Size Register is used by AESA to determine how much of the last block
 * of AAD is valid. The write to this register should be the entire size of the
 * AAD as it is also added directly to the Data Size Register. The size added to
 * the Data Size Register is the AAD size rounded up to the next 16 byte
 * boundary. For instance a size of 20 bytes written to the AAD size register will cause
 * 32 bytes to be added to the Data Size Register. The size stored in the AADSZ
 * field represents the number of bytes valid in the final block of AAD. However
 * the entire size of AAD should be written to the Register address location. When
 * authentication only is being done then the AL bit needs to be written to tell
 * the AES engine that this is the last of the data.
 */
/*!
 * @name Constants and macros for entire LTC_AADSZ register
 */
/*@{*/
#define LTC_RD_AADSZ(base)       (LTC_AADSZ_REG(base))
#define LTC_WR_AADSZ(base, value) (LTC_AADSZ_REG(base) = (value))
#define LTC_RMW_AADSZ(base, mask, value) (LTC_WR_AADSZ(base, (LTC_RD_AADSZ(base) & ~(mask)) | (value)))
#define LTC_SET_AADSZ(base, value) (BME_OR32(&LTC_AADSZ_REG(base), (uint32_t)(value)))
#define LTC_CLR_AADSZ(base, value) (BME_AND32(&LTC_AADSZ_REG(base), (uint32_t)(~(value))))
#define LTC_TOG_AADSZ(base, value) (BME_XOR32(&LTC_AADSZ_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LTC_AADSZ bitfields
 */

/*!
 * @name Register LTC_AADSZ, field AADSZ[3:0] (RW)
 *
 * AAD size in Bytes, mod 16.
 */
/*@{*/
/*! @brief Read current value of the LTC_AADSZ_AADSZ field. */
#define LTC_RD_AADSZ_AADSZ(base) ((LTC_AADSZ_REG(base) & LTC_AADSZ_AADSZ_MASK) >> LTC_AADSZ_AADSZ_SHIFT)
#define LTC_BRD_AADSZ_AADSZ(base) (BME_UBFX32(&LTC_AADSZ_REG(base), LTC_AADSZ_AADSZ_SHIFT, LTC_AADSZ_AADSZ_WIDTH))

/*! @brief Set the AADSZ field to a new value. */
#define LTC_WR_AADSZ_AADSZ(base, value) (LTC_RMW_AADSZ(base, LTC_AADSZ_AADSZ_MASK, LTC_AADSZ_AADSZ(value)))
#define LTC_BWR_AADSZ_AADSZ(base, value) (BME_BFI32(&LTC_AADSZ_REG(base), ((uint32_t)(value) << LTC_AADSZ_AADSZ_SHIFT), LTC_AADSZ_AADSZ_SHIFT, LTC_AADSZ_AADSZ_WIDTH))
/*@}*/

/*!
 * @name Register LTC_AADSZ, field AL[31] (RW)
 *
 * AAD Last. Only AAD data will be written into the Input FIFO.
 */
/*@{*/
/*! @brief Read current value of the LTC_AADSZ_AL field. */
#define LTC_RD_AADSZ_AL(base) ((LTC_AADSZ_REG(base) & LTC_AADSZ_AL_MASK) >> LTC_AADSZ_AL_SHIFT)
#define LTC_BRD_AADSZ_AL(base) (BME_UBFX32(&LTC_AADSZ_REG(base), LTC_AADSZ_AL_SHIFT, LTC_AADSZ_AL_WIDTH))

/*! @brief Set the AL field to a new value. */
#define LTC_WR_AADSZ_AL(base, value) (LTC_RMW_AADSZ(base, LTC_AADSZ_AL_MASK, LTC_AADSZ_AL(value)))
#define LTC_BWR_AADSZ_AL(base, value) (BME_BFI32(&LTC_AADSZ_REG(base), ((uint32_t)(value) << LTC_AADSZ_AL_SHIFT), LTC_AADSZ_AL_SHIFT, LTC_AADSZ_AL_WIDTH))
/*@}*/

/*******************************************************************************
 * LTC_IVSZ - LTC IV Size Register
 ******************************************************************************/

/*!
 * @brief LTC_IVSZ - LTC IV Size Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The IV Size Register is used by AESA to determine how much of the last block
 * of IV is valid. The write to this register should be the entire size of the IV
 * as it is also added directly to the Data Size Register. The size added to the
 * Data Size Register is the IV size rounded up to the next 16 byte boundary.
 * For instance a size of 20 bytes written to the IV size register will cause 32
 * bytes to be added to the Data Size Register. The size stored in the IVSZ field
 * represents the number of bytes valid in the final block of IV. However the
 * entire size of IV should be written to the Register address location. When IV only
 * is being done then the IL bit needs to be written to tell the AES engine that
 * this is the last of the data.
 */
/*!
 * @name Constants and macros for entire LTC_IVSZ register
 */
/*@{*/
#define LTC_RD_IVSZ(base)        (LTC_IVSZ_REG(base))
#define LTC_WR_IVSZ(base, value) (LTC_IVSZ_REG(base) = (value))
#define LTC_RMW_IVSZ(base, mask, value) (LTC_WR_IVSZ(base, (LTC_RD_IVSZ(base) & ~(mask)) | (value)))
#define LTC_SET_IVSZ(base, value) (BME_OR32(&LTC_IVSZ_REG(base), (uint32_t)(value)))
#define LTC_CLR_IVSZ(base, value) (BME_AND32(&LTC_IVSZ_REG(base), (uint32_t)(~(value))))
#define LTC_TOG_IVSZ(base, value) (BME_XOR32(&LTC_IVSZ_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LTC_IVSZ bitfields
 */

/*!
 * @name Register LTC_IVSZ, field IVSZ[3:0] (RW)
 *
 * IV size in Bytes, mod 16.
 */
/*@{*/
/*! @brief Read current value of the LTC_IVSZ_IVSZ field. */
#define LTC_RD_IVSZ_IVSZ(base) ((LTC_IVSZ_REG(base) & LTC_IVSZ_IVSZ_MASK) >> LTC_IVSZ_IVSZ_SHIFT)
#define LTC_BRD_IVSZ_IVSZ(base) (BME_UBFX32(&LTC_IVSZ_REG(base), LTC_IVSZ_IVSZ_SHIFT, LTC_IVSZ_IVSZ_WIDTH))

/*! @brief Set the IVSZ field to a new value. */
#define LTC_WR_IVSZ_IVSZ(base, value) (LTC_RMW_IVSZ(base, LTC_IVSZ_IVSZ_MASK, LTC_IVSZ_IVSZ(value)))
#define LTC_BWR_IVSZ_IVSZ(base, value) (BME_BFI32(&LTC_IVSZ_REG(base), ((uint32_t)(value) << LTC_IVSZ_IVSZ_SHIFT), LTC_IVSZ_IVSZ_SHIFT, LTC_IVSZ_IVSZ_WIDTH))
/*@}*/

/*!
 * @name Register LTC_IVSZ, field IL[31] (RW)
 *
 * IV Last. Only IV data will be written into the Input FIFO.
 */
/*@{*/
/*! @brief Read current value of the LTC_IVSZ_IL field. */
#define LTC_RD_IVSZ_IL(base) ((LTC_IVSZ_REG(base) & LTC_IVSZ_IL_MASK) >> LTC_IVSZ_IL_SHIFT)
#define LTC_BRD_IVSZ_IL(base) (BME_UBFX32(&LTC_IVSZ_REG(base), LTC_IVSZ_IL_SHIFT, LTC_IVSZ_IL_WIDTH))

/*! @brief Set the IL field to a new value. */
#define LTC_WR_IVSZ_IL(base, value) (LTC_RMW_IVSZ(base, LTC_IVSZ_IL_MASK, LTC_IVSZ_IL(value)))
#define LTC_BWR_IVSZ_IL(base, value) (BME_BFI32(&LTC_IVSZ_REG(base), ((uint32_t)(value) << LTC_IVSZ_IL_SHIFT), LTC_IVSZ_IL_SHIFT, LTC_IVSZ_IL_WIDTH))
/*@}*/

/*******************************************************************************
 * LTC_DPAMS - LTC DPA Mask Seed Register
 ******************************************************************************/

/*!
 * @brief LTC_DPAMS - LTC DPA Mask Seed Register (WO)
 *
 * Reset value: 0x00000000U
 *
 * The DPA Mask Seed Register is used to reseed the mask that provides
 * resistance against Differential Power Analysis attacks on AES keys.
 */
/*!
 * @name Constants and macros for entire LTC_DPAMS register
 */
/*@{*/
#define LTC_WR_DPAMS(base, value) (LTC_DPAMS_REG(base) = (value))
/*@}*/

/*******************************************************************************
 * LTC_PKASZ - LTC PKHA A Size Register
 ******************************************************************************/

/*!
 * @brief LTC_PKASZ - LTC PKHA A Size Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LTC PKHA A Size Register is used to indicate the number of bytes of valid
 * data in the PKHA A Register. That is, it indicates the size, in bytes, of the
 * numeric value contained in the PKHA A Register. Depending on the PKHA
 * operation to be run, this register may need to be loaded prior to starting the PKHA
 * operation. Note that some PKHA operations update this value at the completion
 * of the operation.
 */
/*!
 * @name Constants and macros for entire LTC_PKASZ register
 */
/*@{*/
#define LTC_RD_PKASZ(base)       (LTC_PKASZ_REG(base))
#define LTC_WR_PKASZ(base, value) (LTC_PKASZ_REG(base) = (value))
#define LTC_RMW_PKASZ(base, mask, value) (LTC_WR_PKASZ(base, (LTC_RD_PKASZ(base) & ~(mask)) | (value)))
#define LTC_SET_PKASZ(base, value) (BME_OR32(&LTC_PKASZ_REG(base), (uint32_t)(value)))
#define LTC_CLR_PKASZ(base, value) (BME_AND32(&LTC_PKASZ_REG(base), (uint32_t)(~(value))))
#define LTC_TOG_PKASZ(base, value) (BME_XOR32(&LTC_PKASZ_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LTC_PKASZ bitfields
 */

/*!
 * @name Register LTC_PKASZ, field PKASZ[8:0] (RW)
 *
 * PKHA A Size. This is the size of the numeric value, in bytes, contained
 * within the PKHA A Register.
 */
/*@{*/
/*! @brief Read current value of the LTC_PKASZ_PKASZ field. */
#define LTC_RD_PKASZ_PKASZ(base) ((LTC_PKASZ_REG(base) & LTC_PKASZ_PKASZ_MASK) >> LTC_PKASZ_PKASZ_SHIFT)
#define LTC_BRD_PKASZ_PKASZ(base) (LTC_RD_PKASZ_PKASZ(base))

/*! @brief Set the PKASZ field to a new value. */
#define LTC_WR_PKASZ_PKASZ(base, value) (LTC_RMW_PKASZ(base, LTC_PKASZ_PKASZ_MASK, LTC_PKASZ_PKASZ(value)))
#define LTC_BWR_PKASZ_PKASZ(base, value) (LTC_WR_PKASZ_PKASZ(base, value))
/*@}*/

/*******************************************************************************
 * LTC_PKBSZ - LTC PKHA B Size Register
 ******************************************************************************/

/*!
 * @brief LTC_PKBSZ - LTC PKHA B Size Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LTC PKHA B Size Register is used to indicate the number of bytes of valid
 * data in the PKHA B Register. That is, it indicates the size, in bytes, of the
 * numeric value contained in the PKHA B Register. Depending on the PKHA
 * operation to be run, this register may need to be loaded prior to starting the PKHA
 * operation. Note that some PKHA operations update this value at the completion
 * of the operation.
 */
/*!
 * @name Constants and macros for entire LTC_PKBSZ register
 */
/*@{*/
#define LTC_RD_PKBSZ(base)       (LTC_PKBSZ_REG(base))
#define LTC_WR_PKBSZ(base, value) (LTC_PKBSZ_REG(base) = (value))
#define LTC_RMW_PKBSZ(base, mask, value) (LTC_WR_PKBSZ(base, (LTC_RD_PKBSZ(base) & ~(mask)) | (value)))
#define LTC_SET_PKBSZ(base, value) (BME_OR32(&LTC_PKBSZ_REG(base), (uint32_t)(value)))
#define LTC_CLR_PKBSZ(base, value) (BME_AND32(&LTC_PKBSZ_REG(base), (uint32_t)(~(value))))
#define LTC_TOG_PKBSZ(base, value) (BME_XOR32(&LTC_PKBSZ_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LTC_PKBSZ bitfields
 */

/*!
 * @name Register LTC_PKBSZ, field PKBSZ[8:0] (RW)
 *
 * PKHA B Size. This is the size of the numeric value, in bytes, contained
 * within the PKHA B Register.
 */
/*@{*/
/*! @brief Read current value of the LTC_PKBSZ_PKBSZ field. */
#define LTC_RD_PKBSZ_PKBSZ(base) ((LTC_PKBSZ_REG(base) & LTC_PKBSZ_PKBSZ_MASK) >> LTC_PKBSZ_PKBSZ_SHIFT)
#define LTC_BRD_PKBSZ_PKBSZ(base) (LTC_RD_PKBSZ_PKBSZ(base))

/*! @brief Set the PKBSZ field to a new value. */
#define LTC_WR_PKBSZ_PKBSZ(base, value) (LTC_RMW_PKBSZ(base, LTC_PKBSZ_PKBSZ_MASK, LTC_PKBSZ_PKBSZ(value)))
#define LTC_BWR_PKBSZ_PKBSZ(base, value) (LTC_WR_PKBSZ_PKBSZ(base, value))
/*@}*/

/*******************************************************************************
 * LTC_PKNSZ - LTC PKHA N Size Register
 ******************************************************************************/

/*!
 * @brief LTC_PKNSZ - LTC PKHA N Size Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LTC PKHA N Size Register is used to indicate the number of bytes of valid
 * data in the PKHA N Register. That is, it indicates the size, in bytes, of the
 * numeric value contained in the PKHA N Register. Depending on the PKHA
 * operation to be run, this register may need to be loaded prior to starting the PKHA
 * operation. Note that some PKHA operations update this value at the completion
 * of the operation.
 */
/*!
 * @name Constants and macros for entire LTC_PKNSZ register
 */
/*@{*/
#define LTC_RD_PKNSZ(base)       (LTC_PKNSZ_REG(base))
#define LTC_WR_PKNSZ(base, value) (LTC_PKNSZ_REG(base) = (value))
#define LTC_RMW_PKNSZ(base, mask, value) (LTC_WR_PKNSZ(base, (LTC_RD_PKNSZ(base) & ~(mask)) | (value)))
#define LTC_SET_PKNSZ(base, value) (BME_OR32(&LTC_PKNSZ_REG(base), (uint32_t)(value)))
#define LTC_CLR_PKNSZ(base, value) (BME_AND32(&LTC_PKNSZ_REG(base), (uint32_t)(~(value))))
#define LTC_TOG_PKNSZ(base, value) (BME_XOR32(&LTC_PKNSZ_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LTC_PKNSZ bitfields
 */

/*!
 * @name Register LTC_PKNSZ, field PKNSZ[8:0] (RW)
 *
 * PKHA N Size. This is the size of the numeric value, in bytes, contained
 * within the PKHA N Register.
 */
/*@{*/
/*! @brief Read current value of the LTC_PKNSZ_PKNSZ field. */
#define LTC_RD_PKNSZ_PKNSZ(base) ((LTC_PKNSZ_REG(base) & LTC_PKNSZ_PKNSZ_MASK) >> LTC_PKNSZ_PKNSZ_SHIFT)
#define LTC_BRD_PKNSZ_PKNSZ(base) (LTC_RD_PKNSZ_PKNSZ(base))

/*! @brief Set the PKNSZ field to a new value. */
#define LTC_WR_PKNSZ_PKNSZ(base, value) (LTC_RMW_PKNSZ(base, LTC_PKNSZ_PKNSZ_MASK, LTC_PKNSZ_PKNSZ(value)))
#define LTC_BWR_PKNSZ_PKNSZ(base, value) (LTC_WR_PKNSZ_PKNSZ(base, value))
/*@}*/

/*******************************************************************************
 * LTC_PKESZ - LTC PKHA E Size Register
 ******************************************************************************/

/*!
 * @brief LTC_PKESZ - LTC PKHA E Size Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LTC PKHA E Size Register is used to indicate the number of bytes of valid
 * data in the PKHA E Register. That is, it indicates the size, in bytes, of the
 * numeric value contained in the PKHA E Register. Depending on the PKHA
 * operation to be run, this register may need to be loaded prior to starting the PKHA
 * operation. Note that some PKHA operations update this value at the completion
 * of the operation.
 */
/*!
 * @name Constants and macros for entire LTC_PKESZ register
 */
/*@{*/
#define LTC_RD_PKESZ(base)       (LTC_PKESZ_REG(base))
#define LTC_WR_PKESZ(base, value) (LTC_PKESZ_REG(base) = (value))
#define LTC_RMW_PKESZ(base, mask, value) (LTC_WR_PKESZ(base, (LTC_RD_PKESZ(base) & ~(mask)) | (value)))
#define LTC_SET_PKESZ(base, value) (BME_OR32(&LTC_PKESZ_REG(base), (uint32_t)(value)))
#define LTC_CLR_PKESZ(base, value) (BME_AND32(&LTC_PKESZ_REG(base), (uint32_t)(~(value))))
#define LTC_TOG_PKESZ(base, value) (BME_XOR32(&LTC_PKESZ_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LTC_PKESZ bitfields
 */

/*!
 * @name Register LTC_PKESZ, field PKESZ[8:0] (RW)
 *
 * PKHA E Size. This is the size of the numeric value, in bytes, contained
 * within the PKHA E Register.
 */
/*@{*/
/*! @brief Read current value of the LTC_PKESZ_PKESZ field. */
#define LTC_RD_PKESZ_PKESZ(base) ((LTC_PKESZ_REG(base) & LTC_PKESZ_PKESZ_MASK) >> LTC_PKESZ_PKESZ_SHIFT)
#define LTC_BRD_PKESZ_PKESZ(base) (LTC_RD_PKESZ_PKESZ(base))

/*! @brief Set the PKESZ field to a new value. */
#define LTC_WR_PKESZ_PKESZ(base, value) (LTC_RMW_PKESZ(base, LTC_PKESZ_PKESZ_MASK, LTC_PKESZ_PKESZ(value)))
#define LTC_BWR_PKESZ_PKESZ(base, value) (LTC_WR_PKESZ_PKESZ(base, value))
/*@}*/

/*******************************************************************************
 * LTC_CTX - LTC Context Register
 ******************************************************************************/

/*!
 * @brief LTC_CTX - LTC Context Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The Context Register holds the context for the internal crypto engine. This
 * register is 512 bits in length. The IP bus write to the Context Register is
 * accessible only as full-word reads or writes to sixteen 32-bit registers. The MSB
 * is located at offset 0100h with respect to the register page. The bit
 * assignments of this register are dependent on the algorithm, and in some cases the
 * mode of that algorithm. See the appropriate section for the Context Register
 * format used for that algorithm: AES ECB: Section AES CBC: Section AES CTR:
 * Section AES CCM: Section DES: Section Triple DES: Section
 */
/*!
 * @name Constants and macros for entire LTC_CTX register
 */
/*@{*/
#define LTC_RD_CTX(base, index)  (LTC_CTX_REG(base, index))
#define LTC_WR_CTX(base, index, value) (LTC_CTX_REG(base, index) = (value))
#define LTC_RMW_CTX(base, index, mask, value) (LTC_WR_CTX(base, index, (LTC_RD_CTX(base, index) & ~(mask)) | (value)))
#define LTC_SET_CTX(base, index, value) (BME_OR32(&LTC_CTX_REG(base, index), (uint32_t)(value)))
#define LTC_CLR_CTX(base, index, value) (BME_AND32(&LTC_CTX_REG(base, index), (uint32_t)(~(value))))
#define LTC_TOG_CTX(base, index, value) (BME_XOR32(&LTC_CTX_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * LTC_KEY - LTC Key Registers
 ******************************************************************************/

/*!
 * @brief LTC_KEY - LTC Key Registers (RW)
 *
 * Reset value: 0x00000000U
 *
 * The Key Register normally holds the left-aligned key for the internal crypto
 * engine. The MSB is in offset 200h. The Key Register is 256 bits in length. The
 * IP bus write to the Context Register is accessible only as full-word reads or
 * writes to four 32-bit registers. Before the value in the Key Register can be
 * used in a cryptographic operation, the size of the key must be written into
 * the Key Size Register. Once the Key Size Register has been written, the Key
 * Register cannot be written again until the Key Size Register has been cleared.
 */
/*!
 * @name Constants and macros for entire LTC_KEY register
 */
/*@{*/
#define LTC_RD_KEY(base, index)  (LTC_KEY_REG(base, index))
#define LTC_WR_KEY(base, index, value) (LTC_KEY_REG(base, index) = (value))
#define LTC_RMW_KEY(base, index, mask, value) (LTC_WR_KEY(base, index, (LTC_RD_KEY(base, index) & ~(mask)) | (value)))
#define LTC_SET_KEY(base, index, value) (BME_OR32(&LTC_KEY_REG(base, index), (uint32_t)(value)))
#define LTC_CLR_KEY(base, index, value) (BME_AND32(&LTC_KEY_REG(base, index), (uint32_t)(~(value))))
#define LTC_TOG_KEY(base, index, value) (BME_XOR32(&LTC_KEY_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * LTC_RNG4_DRNG_STATUS - LTC RNG4 DRNG Status
 ******************************************************************************/

/*!
 * @brief LTC_RNG4_DRNG_STATUS - LTC RNG4 DRNG Status (RO)
 *
 * Reset value: 0x00000000U
 *
 * The DRNG Status Register contains information about the current status of the
 * DRNG portion of the RNG.
 */
/*!
 * @name Constants and macros for entire LTC_RNG4_DRNG_STATUS register
 */
/*@{*/
#define LTC_RD_RNG4_DRNG_STATUS(base) (LTC_RNG4_DRNG_STATUS_REG(base))
/*@}*/

/*
 * Constants & macros for individual LTC_RNG4_DRNG_STATUS bitfields
 */

/*!
 * @name Register LTC_RNG4_DRNG_STATUS, field IF0[0] (RO)
 *
 * Instantiated Flag 0. State Handle 0 has been instantiated.
 */
/*@{*/
/*! @brief Read current value of the LTC_RNG4_DRNG_STATUS_IF0 field. */
#define LTC_RD_RNG4_DRNG_STATUS_IF0(base) ((LTC_RNG4_DRNG_STATUS_REG(base) & LTC_RNG4_DRNG_STATUS_IF0_MASK) >> LTC_RNG4_DRNG_STATUS_IF0_SHIFT)
#define LTC_BRD_RNG4_DRNG_STATUS_IF0(base) (BME_UBFX32(&LTC_RNG4_DRNG_STATUS_REG(base), LTC_RNG4_DRNG_STATUS_IF0_SHIFT, LTC_RNG4_DRNG_STATUS_IF0_WIDTH))
/*@}*/

/*!
 * @name Register LTC_RNG4_DRNG_STATUS, field IF1[1] (RO)
 *
 * Instantiated Flag 1. State Handle 1 has been instantiated.
 */
/*@{*/
/*! @brief Read current value of the LTC_RNG4_DRNG_STATUS_IF1 field. */
#define LTC_RD_RNG4_DRNG_STATUS_IF1(base) ((LTC_RNG4_DRNG_STATUS_REG(base) & LTC_RNG4_DRNG_STATUS_IF1_MASK) >> LTC_RNG4_DRNG_STATUS_IF1_SHIFT)
#define LTC_BRD_RNG4_DRNG_STATUS_IF1(base) (BME_UBFX32(&LTC_RNG4_DRNG_STATUS_REG(base), LTC_RNG4_DRNG_STATUS_IF1_SHIFT, LTC_RNG4_DRNG_STATUS_IF1_WIDTH))
/*@}*/

/*!
 * @name Register LTC_RNG4_DRNG_STATUS, field PR0[4] (RO)
 *
 * Prediction Resistance State Handle 0. State Handle 0 has been instantiated to
 * support prediction resistance.
 */
/*@{*/
/*! @brief Read current value of the LTC_RNG4_DRNG_STATUS_PR0 field. */
#define LTC_RD_RNG4_DRNG_STATUS_PR0(base) ((LTC_RNG4_DRNG_STATUS_REG(base) & LTC_RNG4_DRNG_STATUS_PR0_MASK) >> LTC_RNG4_DRNG_STATUS_PR0_SHIFT)
#define LTC_BRD_RNG4_DRNG_STATUS_PR0(base) (BME_UBFX32(&LTC_RNG4_DRNG_STATUS_REG(base), LTC_RNG4_DRNG_STATUS_PR0_SHIFT, LTC_RNG4_DRNG_STATUS_PR0_WIDTH))
/*@}*/

/*!
 * @name Register LTC_RNG4_DRNG_STATUS, field PR1[5] (RO)
 *
 * Prediction Resistance State Handle 1. State Handle 1 has been instantiated to
 * support prediction resistance.
 */
/*@{*/
/*! @brief Read current value of the LTC_RNG4_DRNG_STATUS_PR1 field. */
#define LTC_RD_RNG4_DRNG_STATUS_PR1(base) ((LTC_RNG4_DRNG_STATUS_REG(base) & LTC_RNG4_DRNG_STATUS_PR1_MASK) >> LTC_RNG4_DRNG_STATUS_PR1_SHIFT)
#define LTC_BRD_RNG4_DRNG_STATUS_PR1(base) (BME_UBFX32(&LTC_RNG4_DRNG_STATUS_REG(base), LTC_RNG4_DRNG_STATUS_PR1_SHIFT, LTC_RNG4_DRNG_STATUS_PR1_WIDTH))
/*@}*/

/*!
 * @name Register LTC_RNG4_DRNG_STATUS, field TF0[8] (RO)
 *
 * Test Flag State Handle 0. State Handle 0 has been instantiated as a test
 * (deterministic) instance.
 */
/*@{*/
/*! @brief Read current value of the LTC_RNG4_DRNG_STATUS_TF0 field. */
#define LTC_RD_RNG4_DRNG_STATUS_TF0(base) ((LTC_RNG4_DRNG_STATUS_REG(base) & LTC_RNG4_DRNG_STATUS_TF0_MASK) >> LTC_RNG4_DRNG_STATUS_TF0_SHIFT)
#define LTC_BRD_RNG4_DRNG_STATUS_TF0(base) (BME_UBFX32(&LTC_RNG4_DRNG_STATUS_REG(base), LTC_RNG4_DRNG_STATUS_TF0_SHIFT, LTC_RNG4_DRNG_STATUS_TF0_WIDTH))
/*@}*/

/*!
 * @name Register LTC_RNG4_DRNG_STATUS, field TF1[9] (RO)
 *
 * Test Flag State Handle 1. State Handle 1 has been instantiated as a test
 * (deterministic) instance.
 */
/*@{*/
/*! @brief Read current value of the LTC_RNG4_DRNG_STATUS_TF1 field. */
#define LTC_RD_RNG4_DRNG_STATUS_TF1(base) ((LTC_RNG4_DRNG_STATUS_REG(base) & LTC_RNG4_DRNG_STATUS_TF1_MASK) >> LTC_RNG4_DRNG_STATUS_TF1_SHIFT)
#define LTC_BRD_RNG4_DRNG_STATUS_TF1(base) (BME_UBFX32(&LTC_RNG4_DRNG_STATUS_REG(base), LTC_RNG4_DRNG_STATUS_TF1_SHIFT, LTC_RNG4_DRNG_STATUS_TF1_WIDTH))
/*@}*/

/*!
 * @name Register LTC_RNG4_DRNG_STATUS, field ERRCODE[19:16] (RO)
 *
 * Error Code. These bits represent the current error in the RNG.No Error.Mode
 * Error.Data Size Error.Instantiate Error.No Instantiate Error.Test Instantiate
 * Error.Prediction Resistance Error.Prediction Resistance and Test Request
 * Error.Uninstantiate Error.Secure Key Generation Error.
 */
/*@{*/
/*! @brief Read current value of the LTC_RNG4_DRNG_STATUS_ERRCODE field. */
#define LTC_RD_RNG4_DRNG_STATUS_ERRCODE(base) ((LTC_RNG4_DRNG_STATUS_REG(base) & LTC_RNG4_DRNG_STATUS_ERRCODE_MASK) >> LTC_RNG4_DRNG_STATUS_ERRCODE_SHIFT)
#define LTC_BRD_RNG4_DRNG_STATUS_ERRCODE(base) (BME_UBFX32(&LTC_RNG4_DRNG_STATUS_REG(base), LTC_RNG4_DRNG_STATUS_ERRCODE_SHIFT, LTC_RNG4_DRNG_STATUS_ERRCODE_WIDTH))
/*@}*/

/*!
 * @name Register LTC_RNG4_DRNG_STATUS, field CE[20] (RO)
 *
 * Catastrophic Error. A catastrophic error will occur when the RNG gets a
 * hardware error while requesting new entropy and the current State handle is
 * instantiated as a non-test (non-deterministic) instance.
 */
/*@{*/
/*! @brief Read current value of the LTC_RNG4_DRNG_STATUS_CE field. */
#define LTC_RD_RNG4_DRNG_STATUS_CE(base) ((LTC_RNG4_DRNG_STATUS_REG(base) & LTC_RNG4_DRNG_STATUS_CE_MASK) >> LTC_RNG4_DRNG_STATUS_CE_SHIFT)
#define LTC_BRD_RNG4_DRNG_STATUS_CE(base) (BME_UBFX32(&LTC_RNG4_DRNG_STATUS_REG(base), LTC_RNG4_DRNG_STATUS_CE_SHIFT, LTC_RNG4_DRNG_STATUS_CE_WIDTH))
/*@}*/

/*******************************************************************************
 * LTC_RNG4_DRNG_INTERVAL_0 - LTC RNG4 DRNG Interval 0 Register
 ******************************************************************************/

/*!
 * @brief LTC_RNG4_DRNG_INTERVAL_0 - LTC RNG4 DRNG Interval 0 Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The RNG DRNG State Handle 0 Reseed Interval Regsiter shows the current value
 * of the reseed interval for State Handle 0. This value represents the number of
 * requests for random data from this State Handle before this State Handle is
 * automatically reseeded with entropy from the TRNG. The reset value is zero, but
 * a new reseed interval value is loaded when the RNG State Handle is
 * instantiated. If the value in the Data Size register is nonzero at the time when the
 * instantiation command is executed, Reseed Interval 0 Register will be loaded with
 * this value. If the value in the Data Size register is 0, the default reseed
 * interval value (10,000,000) is loaded into Reseed Interval 0 Register.
 */
/*!
 * @name Constants and macros for entire LTC_RNG4_DRNG_INTERVAL_0 register
 */
/*@{*/
#define LTC_RD_RNG4_DRNG_INTERVAL_0(base) (LTC_RNG4_DRNG_INTERVAL_0_REG(base))
/*@}*/

/*******************************************************************************
 * LTC_RNG4_DRNG_INTERVAL_1 - LTC RNG4 DRNG Interval 1 Register
 ******************************************************************************/

/*!
 * @brief LTC_RNG4_DRNG_INTERVAL_1 - LTC RNG4 DRNG Interval 1 Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The RNG DRNG State Handle 1 Reseed Interval Regsiter shows the current value
 * of the reseed interval for State Handle 1. This value represents the number of
 * requests for random data from this State Handle before this State Handle is
 * automatically reseeded with entropy from the TRNG. The reset value is zero, but
 * a new reseed interval value is loaded when the RNG State Handle is
 * instantiated. If the value in the Data Size register is nonzero at the time when the
 * instantiation command is executed, Reseed Interval 1 Register will be loaded with
 * this value. If the value in the Data Size register is 1, the default reseed
 * interval value (10,000,000) is loaded into Reseed Interval 1 Register.
 */
/*!
 * @name Constants and macros for entire LTC_RNG4_DRNG_INTERVAL_1 register
 */
/*@{*/
#define LTC_RD_RNG4_DRNG_INTERVAL_1(base) (LTC_RNG4_DRNG_INTERVAL_1_REG(base))
/*@}*/

/*******************************************************************************
 * LTC_RNG4_DRNG_HASH_CONTROL - LTC RNG4 DRNG Hash Control Register
 ******************************************************************************/

/*!
 * @brief LTC_RNG4_DRNG_HASH_CONTROL - LTC RNG4 DRNG Hash Control Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The RNG DRNG Hash Control Register is used to gain control of the SHA-256
 * hashing engine that is internal to the RNG. Once Hashing test mode is initialized
 * then the user can begin the hashing operation and poll for the done bit.
 */
/*!
 * @name Constants and macros for entire LTC_RNG4_DRNG_HASH_CONTROL register
 */
/*@{*/
#define LTC_RD_RNG4_DRNG_HASH_CONTROL(base) (LTC_RNG4_DRNG_HASH_CONTROL_REG(base))
#define LTC_WR_RNG4_DRNG_HASH_CONTROL(base, value) (LTC_RNG4_DRNG_HASH_CONTROL_REG(base) = (value))
#define LTC_RMW_RNG4_DRNG_HASH_CONTROL(base, mask, value) (LTC_WR_RNG4_DRNG_HASH_CONTROL(base, (LTC_RD_RNG4_DRNG_HASH_CONTROL(base) & ~(mask)) | (value)))
#define LTC_SET_RNG4_DRNG_HASH_CONTROL(base, value) (BME_OR32(&LTC_RNG4_DRNG_HASH_CONTROL_REG(base), (uint32_t)(value)))
#define LTC_CLR_RNG4_DRNG_HASH_CONTROL(base, value) (BME_AND32(&LTC_RNG4_DRNG_HASH_CONTROL_REG(base), (uint32_t)(~(value))))
#define LTC_TOG_RNG4_DRNG_HASH_CONTROL(base, value) (BME_XOR32(&LTC_RNG4_DRNG_HASH_CONTROL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual LTC_RNG4_DRNG_HASH_CONTROL bitfields
 */

/*!
 * @name Register LTC_RNG4_DRNG_HASH_CONTROL, field HD[0] (RO)
 *
 * Hashing Done. This bit asserts when the hashing engine is done.
 */
/*@{*/
/*! @brief Read current value of the LTC_RNG4_DRNG_HASH_CONTROL_HD field. */
#define LTC_RD_RNG4_DRNG_HASH_CONTROL_HD(base) ((LTC_RNG4_DRNG_HASH_CONTROL_REG(base) & LTC_RNG4_DRNG_HASH_CONTROL_HD_MASK) >> LTC_RNG4_DRNG_HASH_CONTROL_HD_SHIFT)
#define LTC_BRD_RNG4_DRNG_HASH_CONTROL_HD(base) (BME_UBFX32(&LTC_RNG4_DRNG_HASH_CONTROL_REG(base), LTC_RNG4_DRNG_HASH_CONTROL_HD_SHIFT, LTC_RNG4_DRNG_HASH_CONTROL_HD_WIDTH))
/*@}*/

/*!
 * @name Register LTC_RNG4_DRNG_HASH_CONTROL, field HB[1] (WO)
 *
 * Hashing Begin. Writing this bit will cause the Hashing Engine to begin
 * hashing.
 */
/*@{*/
/*! @brief Set the HB field to a new value. */
#define LTC_WR_RNG4_DRNG_HASH_CONTROL_HB(base, value) (LTC_RMW_RNG4_DRNG_HASH_CONTROL(base, LTC_RNG4_DRNG_HASH_CONTROL_HB_MASK, LTC_RNG4_DRNG_HASH_CONTROL_HB(value)))
#define LTC_BWR_RNG4_DRNG_HASH_CONTROL_HB(base, value) (LTC_WR_RNG4_DRNG_HASH_CONTROL_HB(base, value))
/*@}*/

/*!
 * @name Register LTC_RNG4_DRNG_HASH_CONTROL, field HI[2] (WO)
 *
 * Hashing Initialize. Writing this bit will initialize the Hashing Engine.
 */
/*@{*/
/*! @brief Set the HI field to a new value. */
#define LTC_WR_RNG4_DRNG_HASH_CONTROL_HI(base, value) (LTC_RMW_RNG4_DRNG_HASH_CONTROL(base, LTC_RNG4_DRNG_HASH_CONTROL_HI_MASK, LTC_RNG4_DRNG_HASH_CONTROL_HI(value)))
#define LTC_BWR_RNG4_DRNG_HASH_CONTROL_HI(base, value) (LTC_WR_RNG4_DRNG_HASH_CONTROL_HI(base, value))
/*@}*/

/*!
 * @name Register LTC_RNG4_DRNG_HASH_CONTROL, field HTM[3] (RW)
 *
 * Hashing Test Mode. Writing this bit will put RNG in Hashing Test Mode.
 */
/*@{*/
/*! @brief Read current value of the LTC_RNG4_DRNG_HASH_CONTROL_HTM field. */
#define LTC_RD_RNG4_DRNG_HASH_CONTROL_HTM(base) ((LTC_RNG4_DRNG_HASH_CONTROL_REG(base) & LTC_RNG4_DRNG_HASH_CONTROL_HTM_MASK) >> LTC_RNG4_DRNG_HASH_CONTROL_HTM_SHIFT)
#define LTC_BRD_RNG4_DRNG_HASH_CONTROL_HTM(base) (BME_UBFX32(&LTC_RNG4_DRNG_HASH_CONTROL_REG(base), LTC_RNG4_DRNG_HASH_CONTROL_HTM_SHIFT, LTC_RNG4_DRNG_HASH_CONTROL_HTM_WIDTH))

/*! @brief Set the HTM field to a new value. */
#define LTC_WR_RNG4_DRNG_HASH_CONTROL_HTM(base, value) (LTC_RMW_RNG4_DRNG_HASH_CONTROL(base, LTC_RNG4_DRNG_HASH_CONTROL_HTM_MASK, LTC_RNG4_DRNG_HASH_CONTROL_HTM(value)))
#define LTC_BWR_RNG4_DRNG_HASH_CONTROL_HTM(base, value) (BME_BFI32(&LTC_RNG4_DRNG_HASH_CONTROL_REG(base), ((uint32_t)(value) << LTC_RNG4_DRNG_HASH_CONTROL_HTM_SHIFT), LTC_RNG4_DRNG_HASH_CONTROL_HTM_SHIFT, LTC_RNG4_DRNG_HASH_CONTROL_HTM_WIDTH))
/*@}*/

/*!
 * @name Register LTC_RNG4_DRNG_HASH_CONTROL, field HTC[4] (WO)
 *
 * Hashing Test Mode Clear. Writing this bit will take the RNG out of hashing
 * test mode.
 */
/*@{*/
/*! @brief Set the HTC field to a new value. */
#define LTC_WR_RNG4_DRNG_HASH_CONTROL_HTC(base, value) (LTC_RMW_RNG4_DRNG_HASH_CONTROL(base, LTC_RNG4_DRNG_HASH_CONTROL_HTC_MASK, LTC_RNG4_DRNG_HASH_CONTROL_HTC(value)))
#define LTC_BWR_RNG4_DRNG_HASH_CONTROL_HTC(base, value) (LTC_WR_RNG4_DRNG_HASH_CONTROL_HTC(base, value))
/*@}*/

/*******************************************************************************
 * LTC_RNG4_DRNG_HASH_DIGEST - LTC RNG4 DRNG Hash Digest Register
 ******************************************************************************/

/*!
 * @brief LTC_RNG4_DRNG_HASH_DIGEST - LTC RNG4 DRNG Hash Digest Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The RNG DRNG Hash Digest Register allows user access to the eight 32-bit
 * message digest registers of the SHA-256 hashing engine that is internal to the
 * RNG. All eight registers are read in order from most-significant bits to
 * least-significant bits by reading this address eight times. These registers are only
 * readable while in Hashing Test Mode and when the Hashing Engine is done.
 */
/*!
 * @name Constants and macros for entire LTC_RNG4_DRNG_HASH_DIGEST register
 */
/*@{*/
#define LTC_RD_RNG4_DRNG_HASH_DIGEST(base) (LTC_RNG4_DRNG_HASH_DIGEST_REG(base))
/*@}*/

/*******************************************************************************
 * LTC_RNG4_DRNG_DEBUG_BUFFER - LTC RNG4 DRNG Debug Buffer
 ******************************************************************************/

/*!
 * @brief LTC_RNG4_DRNG_DEBUG_BUFFER - LTC RNG4 DRNG Debug Buffer (WO)
 *
 * Reset value: 0x00000000U
 *
 * The RNG DRNG Debug Buffer allows access to the SHA-256 hashing engine that is
 * internal to the RNG for the purpose of conformance testing. To fill the
 * buffer this register must be written 16 times at this address. This register is
 * writable only while the RNG is in Hashing Test mode. This mode can be selected
 * via the RNG DRNG Hash Control Register.
 */
/*!
 * @name Constants and macros for entire LTC_RNG4_DRNG_DEBUG_BUFFER register
 */
/*@{*/
#define LTC_WR_RNG4_DRNG_DEBUG_BUFFER(base, value) (LTC_RNG4_DRNG_DEBUG_BUFFER_REG(base) = (value))
/*@}*/

/*******************************************************************************
 * LTC_VID1 - LTC Version ID Register
 ******************************************************************************/

/*!
 * @brief LTC_VID1 - LTC Version ID Register (RO)
 *
 * Reset value: 0x00340100U
 *
 * This register contains the ID for LTC and major and minor revision numbers.
 */
/*!
 * @name Constants and macros for entire LTC_VID1 register
 */
/*@{*/
#define LTC_RD_VID1(base)        (LTC_VID1_REG(base))
/*@}*/

/*
 * Constants & macros for individual LTC_VID1 bitfields
 */

/*!
 * @name Register LTC_VID1, field MIN_REV[7:0] (RO)
 *
 * Minor revision number(0x00).
 */
/*@{*/
/*! @brief Read current value of the LTC_VID1_MIN_REV field. */
#define LTC_RD_VID1_MIN_REV(base) ((LTC_VID1_REG(base) & LTC_VID1_MIN_REV_MASK) >> LTC_VID1_MIN_REV_SHIFT)
#define LTC_BRD_VID1_MIN_REV(base) (BME_UBFX32(&LTC_VID1_REG(base), LTC_VID1_MIN_REV_SHIFT, LTC_VID1_MIN_REV_WIDTH))
/*@}*/

/*!
 * @name Register LTC_VID1, field MAJ_REV[15:8] (RO)
 *
 * Major revision number(0x01).
 */
/*@{*/
/*! @brief Read current value of the LTC_VID1_MAJ_REV field. */
#define LTC_RD_VID1_MAJ_REV(base) ((LTC_VID1_REG(base) & LTC_VID1_MAJ_REV_MASK) >> LTC_VID1_MAJ_REV_SHIFT)
#define LTC_BRD_VID1_MAJ_REV(base) (BME_UBFX32(&LTC_VID1_REG(base), LTC_VID1_MAJ_REV_SHIFT, LTC_VID1_MAJ_REV_WIDTH))
/*@}*/

/*!
 * @name Register LTC_VID1, field IP_ID[31:16] (RO)
 *
 * ID(0x0038).
 */
/*@{*/
/*! @brief Read current value of the LTC_VID1_IP_ID field. */
#define LTC_RD_VID1_IP_ID(base) ((LTC_VID1_REG(base) & LTC_VID1_IP_ID_MASK) >> LTC_VID1_IP_ID_SHIFT)
#define LTC_BRD_VID1_IP_ID(base) (LTC_RD_VID1_IP_ID(base))
/*@}*/

/*******************************************************************************
 * LTC_CHAVID - LTC CHA Version ID Register
 ******************************************************************************/

/*!
 * @brief LTC_CHAVID - LTC CHA Version ID Register (RO)
 *
 * Reset value: 0x00440151U
 *
 * This register contains the Version ID and Revision Number for the CHAs
 * contained within LTC.
 */
/*!
 * @name Constants and macros for entire LTC_CHAVID register
 */
/*@{*/
#define LTC_RD_CHAVID(base)      (LTC_CHAVID_REG(base))
/*@}*/

/*
 * Constants & macros for individual LTC_CHAVID bitfields
 */

/*!
 * @name Register LTC_CHAVID, field AESREV[3:0] (RO)
 *
 * AES Revision Number(0x1).
 */
/*@{*/
/*! @brief Read current value of the LTC_CHAVID_AESREV field. */
#define LTC_RD_CHAVID_AESREV(base) ((LTC_CHAVID_REG(base) & LTC_CHAVID_AESREV_MASK) >> LTC_CHAVID_AESREV_SHIFT)
#define LTC_BRD_CHAVID_AESREV(base) (BME_UBFX32(&LTC_CHAVID_REG(base), LTC_CHAVID_AESREV_SHIFT, LTC_CHAVID_AESREV_WIDTH))
/*@}*/

/*!
 * @name Register LTC_CHAVID, field AESVID[7:4] (RO)
 *
 * AES Version ID(0x5).
 */
/*@{*/
/*! @brief Read current value of the LTC_CHAVID_AESVID field. */
#define LTC_RD_CHAVID_AESVID(base) ((LTC_CHAVID_REG(base) & LTC_CHAVID_AESVID_MASK) >> LTC_CHAVID_AESVID_SHIFT)
#define LTC_BRD_CHAVID_AESVID(base) (BME_UBFX32(&LTC_CHAVID_REG(base), LTC_CHAVID_AESVID_SHIFT, LTC_CHAVID_AESVID_WIDTH))
/*@}*/

/*!
 * @name Register LTC_CHAVID, field DESREV[11:8] (RO)
 *
 * DES Revision Number(0x1).
 */
/*@{*/
/*! @brief Read current value of the LTC_CHAVID_DESREV field. */
#define LTC_RD_CHAVID_DESREV(base) ((LTC_CHAVID_REG(base) & LTC_CHAVID_DESREV_MASK) >> LTC_CHAVID_DESREV_SHIFT)
#define LTC_BRD_CHAVID_DESREV(base) (BME_UBFX32(&LTC_CHAVID_REG(base), LTC_CHAVID_DESREV_SHIFT, LTC_CHAVID_DESREV_WIDTH))
/*@}*/

/*!
 * @name Register LTC_CHAVID, field DESVID[15:12] (RO)
 *
 * DES Version ID(0x0).
 */
/*@{*/
/*! @brief Read current value of the LTC_CHAVID_DESVID field. */
#define LTC_RD_CHAVID_DESVID(base) ((LTC_CHAVID_REG(base) & LTC_CHAVID_DESVID_MASK) >> LTC_CHAVID_DESVID_SHIFT)
#define LTC_BRD_CHAVID_DESVID(base) (BME_UBFX32(&LTC_CHAVID_REG(base), LTC_CHAVID_DESVID_SHIFT, LTC_CHAVID_DESVID_WIDTH))
/*@}*/

/*!
 * @name Register LTC_CHAVID, field PKHAREV[19:16] (RO)
 *
 * PK Revision Number(0x4).
 */
/*@{*/
/*! @brief Read current value of the LTC_CHAVID_PKHAREV field. */
#define LTC_RD_CHAVID_PKHAREV(base) ((LTC_CHAVID_REG(base) & LTC_CHAVID_PKHAREV_MASK) >> LTC_CHAVID_PKHAREV_SHIFT)
#define LTC_BRD_CHAVID_PKHAREV(base) (BME_UBFX32(&LTC_CHAVID_REG(base), LTC_CHAVID_PKHAREV_SHIFT, LTC_CHAVID_PKHAREV_WIDTH))
/*@}*/

/*!
 * @name Register LTC_CHAVID, field PKHAVID[23:20] (RO)
 *
 * PK Version ID(0x4).
 */
/*@{*/
/*! @brief Read current value of the LTC_CHAVID_PKHAVID field. */
#define LTC_RD_CHAVID_PKHAVID(base) ((LTC_CHAVID_REG(base) & LTC_CHAVID_PKHAVID_MASK) >> LTC_CHAVID_PKHAVID_SHIFT)
#define LTC_BRD_CHAVID_PKHAVID(base) (BME_UBFX32(&LTC_CHAVID_REG(base), LTC_CHAVID_PKHAVID_SHIFT, LTC_CHAVID_PKHAVID_WIDTH))
/*@}*/

/*******************************************************************************
 * LTC_FIFOSTA - LTC FIFO Status Register
 ******************************************************************************/

/*!
 * @brief LTC_FIFOSTA - LTC FIFO Status Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The LTC FIFO Status shows the current levels of the Input and Output FIFO.
 */
/*!
 * @name Constants and macros for entire LTC_FIFOSTA register
 */
/*@{*/
#define LTC_RD_FIFOSTA(base)     (LTC_FIFOSTA_REG(base))
/*@}*/

/*
 * Constants & macros for individual LTC_FIFOSTA bitfields
 */

/*!
 * @name Register LTC_FIFOSTA, field IFL[6:0] (RO)
 *
 * Input FIFO Level. These bits indicate the current number of entries in the
 * Input FIFO.
 */
/*@{*/
/*! @brief Read current value of the LTC_FIFOSTA_IFL field. */
#define LTC_RD_FIFOSTA_IFL(base) ((LTC_FIFOSTA_REG(base) & LTC_FIFOSTA_IFL_MASK) >> LTC_FIFOSTA_IFL_SHIFT)
#define LTC_BRD_FIFOSTA_IFL(base) (BME_UBFX32(&LTC_FIFOSTA_REG(base), LTC_FIFOSTA_IFL_SHIFT, LTC_FIFOSTA_IFL_WIDTH))
/*@}*/

/*!
 * @name Register LTC_FIFOSTA, field IFF[15] (RO)
 *
 * Input FIFO Full. The Input FIFO is full and should not be written to.
 */
/*@{*/
/*! @brief Read current value of the LTC_FIFOSTA_IFF field. */
#define LTC_RD_FIFOSTA_IFF(base) ((LTC_FIFOSTA_REG(base) & LTC_FIFOSTA_IFF_MASK) >> LTC_FIFOSTA_IFF_SHIFT)
#define LTC_BRD_FIFOSTA_IFF(base) (BME_UBFX32(&LTC_FIFOSTA_REG(base), LTC_FIFOSTA_IFF_SHIFT, LTC_FIFOSTA_IFF_WIDTH))
/*@}*/

/*!
 * @name Register LTC_FIFOSTA, field OFL[22:16] (RO)
 *
 * Output FIFO Level. These bits indicate the current number of entries in the
 * Output FIFO.
 */
/*@{*/
/*! @brief Read current value of the LTC_FIFOSTA_OFL field. */
#define LTC_RD_FIFOSTA_OFL(base) ((LTC_FIFOSTA_REG(base) & LTC_FIFOSTA_OFL_MASK) >> LTC_FIFOSTA_OFL_SHIFT)
#define LTC_BRD_FIFOSTA_OFL(base) (BME_UBFX32(&LTC_FIFOSTA_REG(base), LTC_FIFOSTA_OFL_SHIFT, LTC_FIFOSTA_OFL_WIDTH))
/*@}*/

/*!
 * @name Register LTC_FIFOSTA, field OFF[31] (RO)
 *
 * Output FIFO Full. The Output FIFO is full and should not be written to.
 */
/*@{*/
/*! @brief Read current value of the LTC_FIFOSTA_OFF field. */
#define LTC_RD_FIFOSTA_OFF(base) ((LTC_FIFOSTA_REG(base) & LTC_FIFOSTA_OFF_MASK) >> LTC_FIFOSTA_OFF_SHIFT)
#define LTC_BRD_FIFOSTA_OFF(base) (BME_UBFX32(&LTC_FIFOSTA_REG(base), LTC_FIFOSTA_OFF_SHIFT, LTC_FIFOSTA_OFF_WIDTH))
/*@}*/

/*******************************************************************************
 * LTC_IFIFO - LTC Input Data FIFO
 ******************************************************************************/

/*!
 * @brief LTC_IFIFO - LTC Input Data FIFO (WO)
 *
 * Reset value: 0x00000000U
 *
 * Data to be processed by the various crypto engines is first pushed into the
 * Input Data FIFO. The Input Data FIFO supports byte enables, allowing one to
 * four bytes to be written to the IFIFO from the IP bus. The IFIFO is four entries
 * deep, and each entry is four bytes. Care must be used to not overflow the
 * Input Data FIFO. Reads from this address will always return 0x0.
 */
/*!
 * @name Constants and macros for entire LTC_IFIFO register
 */
/*@{*/
#define LTC_WR_IFIFO(base, value) (LTC_IFIFO_REG(base) = (value))
/*@}*/

/*******************************************************************************
 * LTC_OFIFO - LTC Output Data FIFO
 ******************************************************************************/

/*!
 * @brief LTC_OFIFO - LTC Output Data FIFO (RO)
 *
 * Reset value: 0x00000000U
 *
 * Data that is output from the AES is pushed into the Output Data FIFO. The
 * OFIFO is four entries deep, and each entry is four bytes. During normal
 * operation, the AES will never overflow the Output Data FIFO. Writes to this register
 * are ignored.
 */
/*!
 * @name Constants and macros for entire LTC_OFIFO register
 */
/*@{*/
#define LTC_RD_OFIFO(base)       (LTC_OFIFO_REG(base))
/*@}*/

/*******************************************************************************
 * LTC_PKA - LTC PKHA A 0 Register
 ******************************************************************************/

/*!
 * @brief LTC_PKA - LTC PKHA A 0 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LTC PKHA A Register contains a numeric value of up to 256 bytes,
 * right-justified. The LSByte is in offset 800h, in the right-most byte. The LTC PKHA A
 * register is 2048 bits in length. Note that PKHA A Register is a single
 * register that combines A0, A1, A2 and A3. The value in the PKHA A Register is limited
 * by the . Note that the PKHA Registers can be read/written only when the does
 * not contain a value enabling a PKHA operation. If the LTCMR_PK contains a PKHA
 * operation mode value, then writes to PKHA Registers will be ignored, and
 * reads of PKHA Registers will return a value of zero.
 */
/*!
 * @name Constants and macros for entire LTC_PKA register
 */
/*@{*/
#define LTC_RD_PKA(base, index)  (LTC_PKA_REG(base, index))
#define LTC_WR_PKA(base, index, value) (LTC_PKA_REG(base, index) = (value))
#define LTC_RMW_PKA(base, index, mask, value) (LTC_WR_PKA(base, index, (LTC_RD_PKA(base, index) & ~(mask)) | (value)))
#define LTC_SET_PKA(base, index, value) (BME_OR32(&LTC_PKA_REG(base, index), (uint32_t)(value)))
#define LTC_CLR_PKA(base, index, value) (BME_AND32(&LTC_PKA_REG(base, index), (uint32_t)(~(value))))
#define LTC_TOG_PKA(base, index, value) (BME_XOR32(&LTC_PKA_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * LTC_PKA0 - LTC PKHA A0 0 Register
 ******************************************************************************/

/*!
 * @brief LTC_PKA0 - LTC PKHA A0 0 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LTC PKHA A0 Register contains a numeric value of up to 64 bytes,
 * right-justified. The LSByte is in offset 8C0h, in the right-most byte. The LTC PKHA A0
 * register is 512 bits in length. Note that PKHA A0, A2, A1 and A0 Registers
 * may be combined to contain a value of up to 2048 bits, with A0 containing the
 * least-significant 64 bytes of this value. The value in the PKHA A0 Register, if
 * used as a separate value, is limited by the . Note that the PKHA Registers can
 * be read/written only when the does not contain a value enabling a PKHA
 * operation. If the LTCMR_PK contains a PKHA operation mode value, then writes to PKHA
 * Registers will be ignored, and reads of PKHA Registers will return a value of
 * zero.
 */
/*!
 * @name Constants and macros for entire LTC_PKA0 register
 */
/*@{*/
#define LTC_RD_PKA0(base, index) (LTC_PKA0_REG(base, index))
#define LTC_WR_PKA0(base, index, value) (LTC_PKA0_REG(base, index) = (value))
#define LTC_RMW_PKA0(base, index, mask, value) (LTC_WR_PKA0(base, index, (LTC_RD_PKA0(base, index) & ~(mask)) | (value)))
#define LTC_SET_PKA0(base, index, value) (BME_OR32(&LTC_PKA0_REG(base, index), (uint32_t)(value)))
#define LTC_CLR_PKA0(base, index, value) (BME_AND32(&LTC_PKA0_REG(base, index), (uint32_t)(~(value))))
#define LTC_TOG_PKA0(base, index, value) (BME_XOR32(&LTC_PKA0_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * LTC_PKA1 - LTC PKHA A1 0 Register
 ******************************************************************************/

/*!
 * @brief LTC_PKA1 - LTC PKHA A1 0 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LTC PKHA A1 Register contains a numeric value of up to 64 bytes,
 * right-justified. The LSByte is in offset 8C0h, in the right-most byte. The LTC PKHA A1
 * register is 512 bits in length. Note that PKHA A1, A2, A1 and A0 Registers
 * may be combined to contain a value of up to 2048 bits, with A0 containing the
 * least-significant 64 bytes of this value. The value in the PKHA A1 Register, if
 * used as a separate value, is limited by the . Note that the PKHA Registers can
 * be read/written only when the does not contain a value enabling a PKHA
 * operation. If the LTCMR_PK contains a PKHA operation mode value, then writes to PKHA
 * Registers will be ignored, and reads of PKHA Registers will return a value of
 * zero.
 */
/*!
 * @name Constants and macros for entire LTC_PKA1 register
 */
/*@{*/
#define LTC_RD_PKA1(base, index) (LTC_PKA1_REG(base, index))
#define LTC_WR_PKA1(base, index, value) (LTC_PKA1_REG(base, index) = (value))
#define LTC_RMW_PKA1(base, index, mask, value) (LTC_WR_PKA1(base, index, (LTC_RD_PKA1(base, index) & ~(mask)) | (value)))
#define LTC_SET_PKA1(base, index, value) (BME_OR32(&LTC_PKA1_REG(base, index), (uint32_t)(value)))
#define LTC_CLR_PKA1(base, index, value) (BME_AND32(&LTC_PKA1_REG(base, index), (uint32_t)(~(value))))
#define LTC_TOG_PKA1(base, index, value) (BME_XOR32(&LTC_PKA1_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * LTC_PKA2 - LTC PKHA A2 0 Register
 ******************************************************************************/

/*!
 * @brief LTC_PKA2 - LTC PKHA A2 0 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LTC PKHA A2 Register contains a numeric value of up to 64 bytes,
 * right-justified. The LSByte is in offset 8C0h, in the right-most byte. The LTC PKHA A2
 * register is 512 bits in length. Note that PKHA A2, A2, A1 and A0 Registers
 * may be combined to contain a value of up to 2048 bits, with A0 containing the
 * least-significant 64 bytes of this value. The value in the PKHA A2 Register, if
 * used as a separate value, is limited by the . Note that the PKHA Registers can
 * be read/written only when the does not contain a value enabling a PKHA
 * operation. If the LTCMR_PK contains a PKHA operation mode value, then writes to PKHA
 * Registers will be ignored, and reads of PKHA Registers will return a value of
 * zero.
 */
/*!
 * @name Constants and macros for entire LTC_PKA2 register
 */
/*@{*/
#define LTC_RD_PKA2(base, index) (LTC_PKA2_REG(base, index))
#define LTC_WR_PKA2(base, index, value) (LTC_PKA2_REG(base, index) = (value))
#define LTC_RMW_PKA2(base, index, mask, value) (LTC_WR_PKA2(base, index, (LTC_RD_PKA2(base, index) & ~(mask)) | (value)))
#define LTC_SET_PKA2(base, index, value) (BME_OR32(&LTC_PKA2_REG(base, index), (uint32_t)(value)))
#define LTC_CLR_PKA2(base, index, value) (BME_AND32(&LTC_PKA2_REG(base, index), (uint32_t)(~(value))))
#define LTC_TOG_PKA2(base, index, value) (BME_XOR32(&LTC_PKA2_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * LTC_PKA3 - LTC PKHA A3 0 Register
 ******************************************************************************/

/*!
 * @brief LTC_PKA3 - LTC PKHA A3 0 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LTC PKHA A3 Register contains a numeric value of up to 64 bytes,
 * right-justified. The LSByte is in offset 8C0h, in the right-most byte. The LTC PKHA A3
 * register is 512 bits in length. Note that PKHA A3, A2, A1 and A0 Registers
 * may be combined to contain a value of up to 2048 bits, with A0 containing the
 * least-significant 64 bytes of this value. The value in the PKHA A3 Register, if
 * used as a separate value, is limited by the . Note that the PKHA Registers can
 * be read/written only when the does not contain a value enabling a PKHA
 * operation. If the LTCMR_PK contains a PKHA operation mode value, then writes to PKHA
 * Registers will be ignored, and reads of PKHA Registers will return a value of
 * zero.
 */
/*!
 * @name Constants and macros for entire LTC_PKA3 register
 */
/*@{*/
#define LTC_RD_PKA3(base, index) (LTC_PKA3_REG(base, index))
#define LTC_WR_PKA3(base, index, value) (LTC_PKA3_REG(base, index) = (value))
#define LTC_RMW_PKA3(base, index, mask, value) (LTC_WR_PKA3(base, index, (LTC_RD_PKA3(base, index) & ~(mask)) | (value)))
#define LTC_SET_PKA3(base, index, value) (BME_OR32(&LTC_PKA3_REG(base, index), (uint32_t)(value)))
#define LTC_CLR_PKA3(base, index, value) (BME_AND32(&LTC_PKA3_REG(base, index), (uint32_t)(~(value))))
#define LTC_TOG_PKA3(base, index, value) (BME_XOR32(&LTC_PKA3_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * LTC_PKB0 - LTC PKHA B0 0 Register
 ******************************************************************************/

/*!
 * @brief LTC_PKB0 - LTC PKHA B0 0 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LTC PKHA B0 Register contains a numeric value of up to 64 bytes,
 * right-justified. The LSByte is in offset 8C0h, in the right-most byte. The LTC PKHA B0
 * register is 512 bits in length. Note that PKHA B0, A2, A1 and A0 Registers
 * may be combined to contain a value of up to 2048 bits, with A0 containing the
 * least-significant 64 bytes of this value. The value in the PKHA B0 Register, if
 * used as a separate value, is limited by the . Note that the PKHA Registers can
 * be read/written only when the does not contain a value enabling a PKHA
 * operation. If the LTCMR_PK contains a PKHA operation mode value, then writes to PKHA
 * Registers will be ignored, and reads of PKHA Registers will return a value of
 * zero.
 */
/*!
 * @name Constants and macros for entire LTC_PKB0 register
 */
/*@{*/
#define LTC_RD_PKB0(base, index) (LTC_PKB0_REG(base, index))
#define LTC_WR_PKB0(base, index, value) (LTC_PKB0_REG(base, index) = (value))
#define LTC_RMW_PKB0(base, index, mask, value) (LTC_WR_PKB0(base, index, (LTC_RD_PKB0(base, index) & ~(mask)) | (value)))
#define LTC_SET_PKB0(base, index, value) (BME_OR32(&LTC_PKB0_REG(base, index), (uint32_t)(value)))
#define LTC_CLR_PKB0(base, index, value) (BME_AND32(&LTC_PKB0_REG(base, index), (uint32_t)(~(value))))
#define LTC_TOG_PKB0(base, index, value) (BME_XOR32(&LTC_PKB0_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * LTC_PKB - LTC PKHA B 0 Register
 ******************************************************************************/

/*!
 * @brief LTC_PKB - LTC PKHA B 0 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LTC PKHA B Register contains a numeric value of up to 256 bytes,
 * right-justified. The LSByte is in offset 800h, in the right-most byte. The LTC PKHA B
 * register is 2048 bits in length. Note that PKHA B Register is a single
 * register that combines A0, A1, A2 and A3. The value in the PKHA B Register is limited
 * by the . Note that the PKHA Registers can be read/written only when the does
 * not contain a value enabling a PKHA operation. If the LTCMR_PK contains a PKHA
 * operation mode value, then writes to PKHA Registers will be ignored, and
 * reads of PKHA Registers will return a value of zero.
 */
/*!
 * @name Constants and macros for entire LTC_PKB register
 */
/*@{*/
#define LTC_RD_PKB(base, index)  (LTC_PKB_REG(base, index))
#define LTC_WR_PKB(base, index, value) (LTC_PKB_REG(base, index) = (value))
#define LTC_RMW_PKB(base, index, mask, value) (LTC_WR_PKB(base, index, (LTC_RD_PKB(base, index) & ~(mask)) | (value)))
#define LTC_SET_PKB(base, index, value) (BME_OR32(&LTC_PKB_REG(base, index), (uint32_t)(value)))
#define LTC_CLR_PKB(base, index, value) (BME_AND32(&LTC_PKB_REG(base, index), (uint32_t)(~(value))))
#define LTC_TOG_PKB(base, index, value) (BME_XOR32(&LTC_PKB_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * LTC_PKB1 - LTC PKHA B1 0 Register
 ******************************************************************************/

/*!
 * @brief LTC_PKB1 - LTC PKHA B1 0 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LTC PKHA B1 Register contains a numeric value of up to 64 bytes,
 * right-justified. The LSByte is in offset 8C0h, in the right-most byte. The LTC PKHA B1
 * register is 512 bits in length. Note that PKHA B1, A2, A1 and A0 Registers
 * may be combined to contain a value of up to 2048 bits, with A0 containing the
 * least-significant 64 bytes of this value. The value in the PKHA B1 Register, if
 * used as a separate value, is limited by the . Note that the PKHA Registers can
 * be read/written only when the does not contain a value enabling a PKHA
 * operation. If the LTCMR_PK contains a PKHA operation mode value, then writes to PKHA
 * Registers will be ignored, and reads of PKHA Registers will return a value of
 * zero.
 */
/*!
 * @name Constants and macros for entire LTC_PKB1 register
 */
/*@{*/
#define LTC_RD_PKB1(base, index) (LTC_PKB1_REG(base, index))
#define LTC_WR_PKB1(base, index, value) (LTC_PKB1_REG(base, index) = (value))
#define LTC_RMW_PKB1(base, index, mask, value) (LTC_WR_PKB1(base, index, (LTC_RD_PKB1(base, index) & ~(mask)) | (value)))
#define LTC_SET_PKB1(base, index, value) (BME_OR32(&LTC_PKB1_REG(base, index), (uint32_t)(value)))
#define LTC_CLR_PKB1(base, index, value) (BME_AND32(&LTC_PKB1_REG(base, index), (uint32_t)(~(value))))
#define LTC_TOG_PKB1(base, index, value) (BME_XOR32(&LTC_PKB1_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * LTC_PKB2 - LTC PKHA B2 0 Register
 ******************************************************************************/

/*!
 * @brief LTC_PKB2 - LTC PKHA B2 0 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LTC PKHA B2 Register contains a numeric value of up to 64 bytes,
 * right-justified. The LSByte is in offset 8C0h, in the right-most byte. The LTC PKHA B2
 * register is 512 bits in length. Note that PKHA B2, A2, A1 and A0 Registers
 * may be combined to contain a value of up to 2048 bits, with A0 containing the
 * least-significant 64 bytes of this value. The value in the PKHA B2 Register, if
 * used as a separate value, is limited by the . Note that the PKHA Registers can
 * be read/written only when the does not contain a value enabling a PKHA
 * operation. If the LTCMR_PK contains a PKHA operation mode value, then writes to PKHA
 * Registers will be ignored, and reads of PKHA Registers will return a value of
 * zero.
 */
/*!
 * @name Constants and macros for entire LTC_PKB2 register
 */
/*@{*/
#define LTC_RD_PKB2(base, index) (LTC_PKB2_REG(base, index))
#define LTC_WR_PKB2(base, index, value) (LTC_PKB2_REG(base, index) = (value))
#define LTC_RMW_PKB2(base, index, mask, value) (LTC_WR_PKB2(base, index, (LTC_RD_PKB2(base, index) & ~(mask)) | (value)))
#define LTC_SET_PKB2(base, index, value) (BME_OR32(&LTC_PKB2_REG(base, index), (uint32_t)(value)))
#define LTC_CLR_PKB2(base, index, value) (BME_AND32(&LTC_PKB2_REG(base, index), (uint32_t)(~(value))))
#define LTC_TOG_PKB2(base, index, value) (BME_XOR32(&LTC_PKB2_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * LTC_PKB3 - LTC PKHA B3 0 Register
 ******************************************************************************/

/*!
 * @brief LTC_PKB3 - LTC PKHA B3 0 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LTC PKHA B3 Register contains a numeric value of up to 64 bytes,
 * right-justified. The LSByte is in offset 8C0h, in the right-most byte. The LTC PKHA B3
 * register is 512 bits in length. Note that PKHA B3, A2, A1 and A0 Registers
 * may be combined to contain a value of up to 2048 bits, with A0 containing the
 * least-significant 64 bytes of this value. The value in the PKHA B3 Register, if
 * used as a separate value, is limited by the . Note that the PKHA Registers can
 * be read/written only when the does not contain a value enabling a PKHA
 * operation. If the LTCMR_PK contains a PKHA operation mode value, then writes to PKHA
 * Registers will be ignored, and reads of PKHA Registers will return a value of
 * zero.
 */
/*!
 * @name Constants and macros for entire LTC_PKB3 register
 */
/*@{*/
#define LTC_RD_PKB3(base, index) (LTC_PKB3_REG(base, index))
#define LTC_WR_PKB3(base, index, value) (LTC_PKB3_REG(base, index) = (value))
#define LTC_RMW_PKB3(base, index, mask, value) (LTC_WR_PKB3(base, index, (LTC_RD_PKB3(base, index) & ~(mask)) | (value)))
#define LTC_SET_PKB3(base, index, value) (BME_OR32(&LTC_PKB3_REG(base, index), (uint32_t)(value)))
#define LTC_CLR_PKB3(base, index, value) (BME_AND32(&LTC_PKB3_REG(base, index), (uint32_t)(~(value))))
#define LTC_TOG_PKB3(base, index, value) (BME_XOR32(&LTC_PKB3_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * LTC_PKN - LTC PKHA N 0 Register
 ******************************************************************************/

/*!
 * @brief LTC_PKN - LTC PKHA N 0 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LTC PKHA N Register contains a numeric value of up to 256 bytes,
 * right-justified. The LSByte is in offset 800h, in the right-most byte. The LTC PKHA N
 * register is 2048 bits in length. Note that PKHA N Register is a single
 * register that combines A0, A1, A2 and A3. The value in the PKHA N Register is limited
 * by the . Note that the PKHA Registers can be read/written only when the does
 * not contain a value enabling a PKHA operation. If the LTCMR_PK contains a PKHA
 * operation mode value, then writes to PKHA Registers will be ignored, and
 * reads of PKHA Registers will return a value of zero.
 */
/*!
 * @name Constants and macros for entire LTC_PKN register
 */
/*@{*/
#define LTC_RD_PKN(base, index)  (LTC_PKN_REG(base, index))
#define LTC_WR_PKN(base, index, value) (LTC_PKN_REG(base, index) = (value))
#define LTC_RMW_PKN(base, index, mask, value) (LTC_WR_PKN(base, index, (LTC_RD_PKN(base, index) & ~(mask)) | (value)))
#define LTC_SET_PKN(base, index, value) (BME_OR32(&LTC_PKN_REG(base, index), (uint32_t)(value)))
#define LTC_CLR_PKN(base, index, value) (BME_AND32(&LTC_PKN_REG(base, index), (uint32_t)(~(value))))
#define LTC_TOG_PKN(base, index, value) (BME_XOR32(&LTC_PKN_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * LTC_PKN0 - LTC PKHA N0 0 Register
 ******************************************************************************/

/*!
 * @brief LTC_PKN0 - LTC PKHA N0 0 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LTC PKHA N0 Register contains a numeric value of up to 64 bytes,
 * right-justified. The LSByte is in offset 8C0h, in the right-most byte. The LTC PKHA N0
 * register is 512 bits in length. Note that PKHA N0, A2, A1 and A0 Registers
 * may be combined to contain a value of up to 2048 bits, with A0 containing the
 * least-significant 64 bytes of this value. The value in the PKHA N0 Register, if
 * used as a separate value, is limited by the . Note that the PKHA Registers can
 * be read/written only when the does not contain a value enabling a PKHA
 * operation. If the LTCMR_PK contains a PKHA operation mode value, then writes to PKHA
 * Registers will be ignored, and reads of PKHA Registers will return a value of
 * zero.
 */
/*!
 * @name Constants and macros for entire LTC_PKN0 register
 */
/*@{*/
#define LTC_RD_PKN0(base, index) (LTC_PKN0_REG(base, index))
#define LTC_WR_PKN0(base, index, value) (LTC_PKN0_REG(base, index) = (value))
#define LTC_RMW_PKN0(base, index, mask, value) (LTC_WR_PKN0(base, index, (LTC_RD_PKN0(base, index) & ~(mask)) | (value)))
#define LTC_SET_PKN0(base, index, value) (BME_OR32(&LTC_PKN0_REG(base, index), (uint32_t)(value)))
#define LTC_CLR_PKN0(base, index, value) (BME_AND32(&LTC_PKN0_REG(base, index), (uint32_t)(~(value))))
#define LTC_TOG_PKN0(base, index, value) (BME_XOR32(&LTC_PKN0_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * LTC_PKN1 - LTC PKHA N1 0 Register
 ******************************************************************************/

/*!
 * @brief LTC_PKN1 - LTC PKHA N1 0 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LTC PKHA N1 Register contains a numeric value of up to 64 bytes,
 * right-justified. The LSByte is in offset 8C0h, in the right-most byte. The LTC PKHA N1
 * register is 512 bits in length. Note that PKHA N1, A2, A1 and A0 Registers
 * may be combined to contain a value of up to 2048 bits, with A0 containing the
 * least-significant 64 bytes of this value. The value in the PKHA N1 Register, if
 * used as a separate value, is limited by the . Note that the PKHA Registers can
 * be read/written only when the does not contain a value enabling a PKHA
 * operation. If the LTCMR_PK contains a PKHA operation mode value, then writes to PKHA
 * Registers will be ignored, and reads of PKHA Registers will return a value of
 * zero.
 */
/*!
 * @name Constants and macros for entire LTC_PKN1 register
 */
/*@{*/
#define LTC_RD_PKN1(base, index) (LTC_PKN1_REG(base, index))
#define LTC_WR_PKN1(base, index, value) (LTC_PKN1_REG(base, index) = (value))
#define LTC_RMW_PKN1(base, index, mask, value) (LTC_WR_PKN1(base, index, (LTC_RD_PKN1(base, index) & ~(mask)) | (value)))
#define LTC_SET_PKN1(base, index, value) (BME_OR32(&LTC_PKN1_REG(base, index), (uint32_t)(value)))
#define LTC_CLR_PKN1(base, index, value) (BME_AND32(&LTC_PKN1_REG(base, index), (uint32_t)(~(value))))
#define LTC_TOG_PKN1(base, index, value) (BME_XOR32(&LTC_PKN1_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * LTC_PKN2 - LTC PKHA N2 0 Register
 ******************************************************************************/

/*!
 * @brief LTC_PKN2 - LTC PKHA N2 0 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LTC PKHA N2 Register contains a numeric value of up to 64 bytes,
 * right-justified. The LSByte is in offset 8C0h, in the right-most byte. The LTC PKHA N2
 * register is 512 bits in length. Note that PKHA N2, A2, A1 and A0 Registers
 * may be combined to contain a value of up to 2048 bits, with A0 containing the
 * least-significant 64 bytes of this value. The value in the PKHA N2 Register, if
 * used as a separate value, is limited by the . Note that the PKHA Registers can
 * be read/written only when the does not contain a value enabling a PKHA
 * operation. If the LTCMR_PK contains a PKHA operation mode value, then writes to PKHA
 * Registers will be ignored, and reads of PKHA Registers will return a value of
 * zero.
 */
/*!
 * @name Constants and macros for entire LTC_PKN2 register
 */
/*@{*/
#define LTC_RD_PKN2(base, index) (LTC_PKN2_REG(base, index))
#define LTC_WR_PKN2(base, index, value) (LTC_PKN2_REG(base, index) = (value))
#define LTC_RMW_PKN2(base, index, mask, value) (LTC_WR_PKN2(base, index, (LTC_RD_PKN2(base, index) & ~(mask)) | (value)))
#define LTC_SET_PKN2(base, index, value) (BME_OR32(&LTC_PKN2_REG(base, index), (uint32_t)(value)))
#define LTC_CLR_PKN2(base, index, value) (BME_AND32(&LTC_PKN2_REG(base, index), (uint32_t)(~(value))))
#define LTC_TOG_PKN2(base, index, value) (BME_XOR32(&LTC_PKN2_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * LTC_PKN3 - LTC PKHA N3 0 Register
 ******************************************************************************/

/*!
 * @brief LTC_PKN3 - LTC PKHA N3 0 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LTC PKHA N3 Register contains a numeric value of up to 64 bytes,
 * right-justified. The LSByte is in offset 8C0h, in the right-most byte. The LTC PKHA N3
 * register is 512 bits in length. Note that PKHA N3, A2, A1 and A0 Registers
 * may be combined to contain a value of up to 2048 bits, with A0 containing the
 * least-significant 64 bytes of this value. The value in the PKHA N3 Register, if
 * used as a separate value, is limited by the . Note that the PKHA Registers can
 * be read/written only when the does not contain a value enabling a PKHA
 * operation. If the LTCMR_PK contains a PKHA operation mode value, then writes to PKHA
 * Registers will be ignored, and reads of PKHA Registers will return a value of
 * zero.
 */
/*!
 * @name Constants and macros for entire LTC_PKN3 register
 */
/*@{*/
#define LTC_RD_PKN3(base, index) (LTC_PKN3_REG(base, index))
#define LTC_WR_PKN3(base, index, value) (LTC_PKN3_REG(base, index) = (value))
#define LTC_RMW_PKN3(base, index, mask, value) (LTC_WR_PKN3(base, index, (LTC_RD_PKN3(base, index) & ~(mask)) | (value)))
#define LTC_SET_PKN3(base, index, value) (BME_OR32(&LTC_PKN3_REG(base, index), (uint32_t)(value)))
#define LTC_CLR_PKN3(base, index, value) (BME_AND32(&LTC_PKN3_REG(base, index), (uint32_t)(~(value))))
#define LTC_TOG_PKN3(base, index, value) (BME_XOR32(&LTC_PKN3_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * LTC_PKE - LTC PKHA E 0 Register
 ******************************************************************************/

/*!
 * @brief LTC_PKE - LTC PKHA E 0 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LTC PKHA E Register contains a numeric value of up to 256 bytes,
 * right-justified. The LSByte is in offset 800h, in the right-most byte. The LTC PKHA E
 * register is 2048 bits in length. Note that PKHA E Register is a single
 * register that combines A0, A1, A2 and A3. The value in the PKHA E Register is limited
 * by the . Note that the PKHA Registers can be read/written only when the does
 * not contain a value enabling a PKHA operation. If the LTCMR_PK contains a PKHA
 * operation mode value, then writes to PKHA Registers will be ignored, and
 * reads of PKHA Registers will return a value of zero.
 */
/*!
 * @name Constants and macros for entire LTC_PKE register
 */
/*@{*/
#define LTC_RD_PKE(base, index)  (LTC_PKE_REG(base, index))
#define LTC_WR_PKE(base, index, value) (LTC_PKE_REG(base, index) = (value))
#define LTC_RMW_PKE(base, index, mask, value) (LTC_WR_PKE(base, index, (LTC_RD_PKE(base, index) & ~(mask)) | (value)))
#define LTC_SET_PKE(base, index, value) (BME_OR32(&LTC_PKE_REG(base, index), (uint32_t)(value)))
#define LTC_CLR_PKE(base, index, value) (BME_AND32(&LTC_PKE_REG(base, index), (uint32_t)(~(value))))
#define LTC_TOG_PKE(base, index, value) (BME_XOR32(&LTC_PKE_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * LTC_PKE0 - LTC PKHA E0 0 Register
 ******************************************************************************/

/*!
 * @brief LTC_PKE0 - LTC PKHA E0 0 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LTC PKHA E0 Register contains a numeric value of up to 64 bytes,
 * right-justified. The LSByte is in offset 8C0h, in the right-most byte. The LTC PKHA E0
 * register is 512 bits in length. Note that PKHA E0, A2, A1 and A0 Registers
 * may be combined to contain a value of up to 2048 bits, with A0 containing the
 * least-significant 64 bytes of this value. The value in the PKHA E0 Register, if
 * used as a separate value, is limited by the . Note that the PKHA Registers can
 * be read/written only when the does not contain a value enabling a PKHA
 * operation. If the LTCMR_PK contains a PKHA operation mode value, then writes to PKHA
 * Registers will be ignored, and reads of PKHA Registers will return a value of
 * zero.
 */
/*!
 * @name Constants and macros for entire LTC_PKE0 register
 */
/*@{*/
#define LTC_RD_PKE0(base, index) (LTC_PKE0_REG(base, index))
#define LTC_WR_PKE0(base, index, value) (LTC_PKE0_REG(base, index) = (value))
#define LTC_RMW_PKE0(base, index, mask, value) (LTC_WR_PKE0(base, index, (LTC_RD_PKE0(base, index) & ~(mask)) | (value)))
#define LTC_SET_PKE0(base, index, value) (BME_OR32(&LTC_PKE0_REG(base, index), (uint32_t)(value)))
#define LTC_CLR_PKE0(base, index, value) (BME_AND32(&LTC_PKE0_REG(base, index), (uint32_t)(~(value))))
#define LTC_TOG_PKE0(base, index, value) (BME_XOR32(&LTC_PKE0_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * LTC_PKE1 - LTC PKHA E1 0 Register
 ******************************************************************************/

/*!
 * @brief LTC_PKE1 - LTC PKHA E1 0 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LTC PKHA E1 Register contains a numeric value of up to 64 bytes,
 * right-justified. The LSByte is in offset 8C0h, in the right-most byte. The LTC PKHA E1
 * register is 512 bits in length. Note that PKHA E1, A2, A1 and A0 Registers
 * may be combined to contain a value of up to 2048 bits, with A0 containing the
 * least-significant 64 bytes of this value. The value in the PKHA E1 Register, if
 * used as a separate value, is limited by the . Note that the PKHA Registers can
 * be read/written only when the does not contain a value enabling a PKHA
 * operation. If the LTCMR_PK contains a PKHA operation mode value, then writes to PKHA
 * Registers will be ignored, and reads of PKHA Registers will return a value of
 * zero.
 */
/*!
 * @name Constants and macros for entire LTC_PKE1 register
 */
/*@{*/
#define LTC_RD_PKE1(base, index) (LTC_PKE1_REG(base, index))
#define LTC_WR_PKE1(base, index, value) (LTC_PKE1_REG(base, index) = (value))
#define LTC_RMW_PKE1(base, index, mask, value) (LTC_WR_PKE1(base, index, (LTC_RD_PKE1(base, index) & ~(mask)) | (value)))
#define LTC_SET_PKE1(base, index, value) (BME_OR32(&LTC_PKE1_REG(base, index), (uint32_t)(value)))
#define LTC_CLR_PKE1(base, index, value) (BME_AND32(&LTC_PKE1_REG(base, index), (uint32_t)(~(value))))
#define LTC_TOG_PKE1(base, index, value) (BME_XOR32(&LTC_PKE1_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * LTC_PKE2 - LTC PKHA E2 0 Register
 ******************************************************************************/

/*!
 * @brief LTC_PKE2 - LTC PKHA E2 0 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LTC PKHA E2 Register contains a numeric value of up to 64 bytes,
 * right-justified. The LSByte is in offset 8C0h, in the right-most byte. The LTC PKHA E2
 * register is 512 bits in length. Note that PKHA E2, A2, A1 and A0 Registers
 * may be combined to contain a value of up to 2048 bits, with A0 containing the
 * least-significant 64 bytes of this value. The value in the PKHA E2 Register, if
 * used as a separate value, is limited by the . Note that the PKHA Registers can
 * be read/written only when the does not contain a value enabling a PKHA
 * operation. If the LTCMR_PK contains a PKHA operation mode value, then writes to PKHA
 * Registers will be ignored, and reads of PKHA Registers will return a value of
 * zero.
 */
/*!
 * @name Constants and macros for entire LTC_PKE2 register
 */
/*@{*/
#define LTC_RD_PKE2(base, index) (LTC_PKE2_REG(base, index))
#define LTC_WR_PKE2(base, index, value) (LTC_PKE2_REG(base, index) = (value))
#define LTC_RMW_PKE2(base, index, mask, value) (LTC_WR_PKE2(base, index, (LTC_RD_PKE2(base, index) & ~(mask)) | (value)))
#define LTC_SET_PKE2(base, index, value) (BME_OR32(&LTC_PKE2_REG(base, index), (uint32_t)(value)))
#define LTC_CLR_PKE2(base, index, value) (BME_AND32(&LTC_PKE2_REG(base, index), (uint32_t)(~(value))))
#define LTC_TOG_PKE2(base, index, value) (BME_XOR32(&LTC_PKE2_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * LTC_PKE3 - LTC PKHA E3 0 Register
 ******************************************************************************/

/*!
 * @brief LTC_PKE3 - LTC PKHA E3 0 Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LTC PKHA E3 Register contains a numeric value of up to 64 bytes,
 * right-justified. The LSByte is in offset 8C0h, in the right-most byte. The LTC PKHA E3
 * register is 512 bits in length. Note that PKHA E3, A2, A1 and A0 Registers
 * may be combined to contain a value of up to 2048 bits, with A0 containing the
 * least-significant 64 bytes of this value. The value in the PKHA E3 Register, if
 * used as a separate value, is limited by the . Note that the PKHA Registers can
 * be read/written only when the does not contain a value enabling a PKHA
 * operation. If the LTCMR_PK contains a PKHA operation mode value, then writes to PKHA
 * Registers will be ignored, and reads of PKHA Registers will return a value of
 * zero.
 */
/*!
 * @name Constants and macros for entire LTC_PKE3 register
 */
/*@{*/
#define LTC_RD_PKE3(base, index) (LTC_PKE3_REG(base, index))
#define LTC_WR_PKE3(base, index, value) (LTC_PKE3_REG(base, index) = (value))
#define LTC_RMW_PKE3(base, index, mask, value) (LTC_WR_PKE3(base, index, (LTC_RD_PKE3(base, index) & ~(mask)) | (value)))
#define LTC_SET_PKE3(base, index, value) (BME_OR32(&LTC_PKE3_REG(base, index), (uint32_t)(value)))
#define LTC_CLR_PKE3(base, index, value) (BME_AND32(&LTC_PKE3_REG(base, index), (uint32_t)(~(value))))
#define LTC_TOG_PKE3(base, index, value) (BME_XOR32(&LTC_PKE3_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * MK82F25615 MCG
 *
 * Multipurpose Clock Generator module
 *
 * Registers defined in this header file:
 * - MCG_C1 - MCG Control 1 Register
 * - MCG_C2 - MCG Control 2 Register
 * - MCG_C3 - MCG Control 3 Register
 * - MCG_C4 - MCG Control 4 Register
 * - MCG_C5 - MCG Control 5 Register
 * - MCG_C6 - MCG Control 6 Register
 * - MCG_S - MCG Status Register
 * - MCG_SC - MCG Status and Control Register
 * - MCG_ATCVH - MCG Auto Trim Compare Value High Register
 * - MCG_ATCVL - MCG Auto Trim Compare Value Low Register
 * - MCG_C7 - MCG Control 7 Register
 * - MCG_C8 - MCG Control 8 Register
 */

#define MCG_INSTANCE_COUNT (1U) /*!< Number of instances of the MCG module. */
#define MCG_IDX (0U) /*!< Instance number for MCG. */

/*******************************************************************************
 * MCG_C1 - MCG Control 1 Register
 ******************************************************************************/

/*!
 * @brief MCG_C1 - MCG Control 1 Register (RW)
 *
 * Reset value: 0x04U
 */
/*!
 * @name Constants and macros for entire MCG_C1 register
 */
/*@{*/
#define MCG_RD_C1(base)          (MCG_C1_REG(base))
#define MCG_WR_C1(base, value)   (MCG_C1_REG(base) = (value))
#define MCG_RMW_C1(base, mask, value) (MCG_WR_C1(base, (MCG_RD_C1(base) & ~(mask)) | (value)))
#define MCG_SET_C1(base, value)  (BME_OR8(&MCG_C1_REG(base), (uint8_t)(value)))
#define MCG_CLR_C1(base, value)  (BME_AND8(&MCG_C1_REG(base), (uint8_t)(~(value))))
#define MCG_TOG_C1(base, value)  (BME_XOR8(&MCG_C1_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual MCG_C1 bitfields
 */

/*!
 * @name Register MCG_C1, field IREFSTEN[0] (RW)
 *
 * Controls whether or not the internal reference clock remains enabled when the
 * MCG enters Stop mode.
 *
 * Values:
 * - 0b0 - Internal reference clock is disabled in Stop mode.
 * - 0b1 - Internal reference clock is enabled in Stop mode if IRCLKEN is set or
 *     if MCG is in FEI, FBI, or BLPI modes before entering Stop mode.
 */
/*@{*/
/*! @brief Read current value of the MCG_C1_IREFSTEN field. */
#define MCG_RD_C1_IREFSTEN(base) ((MCG_C1_REG(base) & MCG_C1_IREFSTEN_MASK) >> MCG_C1_IREFSTEN_SHIFT)
#define MCG_BRD_C1_IREFSTEN(base) (BME_UBFX8(&MCG_C1_REG(base), MCG_C1_IREFSTEN_SHIFT, MCG_C1_IREFSTEN_WIDTH))

/*! @brief Set the IREFSTEN field to a new value. */
#define MCG_WR_C1_IREFSTEN(base, value) (MCG_RMW_C1(base, MCG_C1_IREFSTEN_MASK, MCG_C1_IREFSTEN(value)))
#define MCG_BWR_C1_IREFSTEN(base, value) (BME_BFI8(&MCG_C1_REG(base), ((uint8_t)(value) << MCG_C1_IREFSTEN_SHIFT), MCG_C1_IREFSTEN_SHIFT, MCG_C1_IREFSTEN_WIDTH))
/*@}*/

/*!
 * @name Register MCG_C1, field IRCLKEN[1] (RW)
 *
 * Enables the internal reference clock for use as MCGIRCLK.
 *
 * Values:
 * - 0b0 - MCGIRCLK inactive.
 * - 0b1 - MCGIRCLK active.
 */
/*@{*/
/*! @brief Read current value of the MCG_C1_IRCLKEN field. */
#define MCG_RD_C1_IRCLKEN(base) ((MCG_C1_REG(base) & MCG_C1_IRCLKEN_MASK) >> MCG_C1_IRCLKEN_SHIFT)
#define MCG_BRD_C1_IRCLKEN(base) (BME_UBFX8(&MCG_C1_REG(base), MCG_C1_IRCLKEN_SHIFT, MCG_C1_IRCLKEN_WIDTH))

/*! @brief Set the IRCLKEN field to a new value. */
#define MCG_WR_C1_IRCLKEN(base, value) (MCG_RMW_C1(base, MCG_C1_IRCLKEN_MASK, MCG_C1_IRCLKEN(value)))
#define MCG_BWR_C1_IRCLKEN(base, value) (BME_BFI8(&MCG_C1_REG(base), ((uint8_t)(value) << MCG_C1_IRCLKEN_SHIFT), MCG_C1_IRCLKEN_SHIFT, MCG_C1_IRCLKEN_WIDTH))
/*@}*/

/*!
 * @name Register MCG_C1, field IREFS[2] (RW)
 *
 * Selects the reference clock source for the FLL.
 *
 * Values:
 * - 0b0 - External reference clock is selected.
 * - 0b1 - The slow internal reference clock is selected.
 */
/*@{*/
/*! @brief Read current value of the MCG_C1_IREFS field. */
#define MCG_RD_C1_IREFS(base) ((MCG_C1_REG(base) & MCG_C1_IREFS_MASK) >> MCG_C1_IREFS_SHIFT)
#define MCG_BRD_C1_IREFS(base) (BME_UBFX8(&MCG_C1_REG(base), MCG_C1_IREFS_SHIFT, MCG_C1_IREFS_WIDTH))

/*! @brief Set the IREFS field to a new value. */
#define MCG_WR_C1_IREFS(base, value) (MCG_RMW_C1(base, MCG_C1_IREFS_MASK, MCG_C1_IREFS(value)))
#define MCG_BWR_C1_IREFS(base, value) (BME_BFI8(&MCG_C1_REG(base), ((uint8_t)(value) << MCG_C1_IREFS_SHIFT), MCG_C1_IREFS_SHIFT, MCG_C1_IREFS_WIDTH))
/*@}*/

/*!
 * @name Register MCG_C1, field FRDIV[5:3] (RW)
 *
 * Selects the amount to divide down the external reference clock for the FLL.
 * The resulting frequency must be in the range 31.25 kHz to 39.0625 kHz (This is
 * required when FLL/DCO is the clock source for MCGOUTCLK . In FBE mode, it is
 * not required to meet this range, but it is recommended in the cases when trying
 * to enter a FLL mode from FBE).
 *
 * Values:
 * - 0b000 - If RANGE = 0 or OSCSEL=1 , Divide Factor is 1; for all other RANGE
 *     values, Divide Factor is 32.
 * - 0b001 - If RANGE = 0 or OSCSEL=1 , Divide Factor is 2; for all other RANGE
 *     values, Divide Factor is 64.
 * - 0b010 - If RANGE = 0 or OSCSEL=1 , Divide Factor is 4; for all other RANGE
 *     values, Divide Factor is 128.
 * - 0b011 - If RANGE = 0 or OSCSEL=1 , Divide Factor is 8; for all other RANGE
 *     values, Divide Factor is 256.
 * - 0b100 - If RANGE = 0 or OSCSEL=1 , Divide Factor is 16; for all other RANGE
 *     values, Divide Factor is 512.
 * - 0b101 - If RANGE = 0 or OSCSEL=1 , Divide Factor is 32; for all other RANGE
 *     values, Divide Factor is 1024.
 * - 0b110 - If RANGE = 0 or OSCSEL=1 , Divide Factor is 64; for all other RANGE
 *     values, Divide Factor is 1280 .
 * - 0b111 - If RANGE = 0 or OSCSEL=1 , Divide Factor is 128; for all other
 *     RANGE values, Divide Factor is 1536 .
 */
/*@{*/
/*! @brief Read current value of the MCG_C1_FRDIV field. */
#define MCG_RD_C1_FRDIV(base) ((MCG_C1_REG(base) & MCG_C1_FRDIV_MASK) >> MCG_C1_FRDIV_SHIFT)
#define MCG_BRD_C1_FRDIV(base) (BME_UBFX8(&MCG_C1_REG(base), MCG_C1_FRDIV_SHIFT, MCG_C1_FRDIV_WIDTH))

/*! @brief Set the FRDIV field to a new value. */
#define MCG_WR_C1_FRDIV(base, value) (MCG_RMW_C1(base, MCG_C1_FRDIV_MASK, MCG_C1_FRDIV(value)))
#define MCG_BWR_C1_FRDIV(base, value) (BME_BFI8(&MCG_C1_REG(base), ((uint8_t)(value) << MCG_C1_FRDIV_SHIFT), MCG_C1_FRDIV_SHIFT, MCG_C1_FRDIV_WIDTH))
/*@}*/

/*!
 * @name Register MCG_C1, field CLKS[7:6] (RW)
 *
 * Selects the clock source for MCGOUTCLK .
 *
 * Values:
 * - 0b00 - Encoding 0 - Output of FLL or PLL is selected (depends on PLLS
 *     control bit).
 * - 0b01 - Encoding 1 - Internal reference clock is selected.
 * - 0b10 - Encoding 2 - External reference clock is selected.
 * - 0b11 - Encoding 3 - Reserved.
 */
/*@{*/
/*! @brief Read current value of the MCG_C1_CLKS field. */
#define MCG_RD_C1_CLKS(base) ((MCG_C1_REG(base) & MCG_C1_CLKS_MASK) >> MCG_C1_CLKS_SHIFT)
#define MCG_BRD_C1_CLKS(base) (BME_UBFX8(&MCG_C1_REG(base), MCG_C1_CLKS_SHIFT, MCG_C1_CLKS_WIDTH))

/*! @brief Set the CLKS field to a new value. */
#define MCG_WR_C1_CLKS(base, value) (MCG_RMW_C1(base, MCG_C1_CLKS_MASK, MCG_C1_CLKS(value)))
#define MCG_BWR_C1_CLKS(base, value) (BME_BFI8(&MCG_C1_REG(base), ((uint8_t)(value) << MCG_C1_CLKS_SHIFT), MCG_C1_CLKS_SHIFT, MCG_C1_CLKS_WIDTH))
/*@}*/

/*******************************************************************************
 * MCG_C2 - MCG Control 2 Register
 ******************************************************************************/

/*!
 * @brief MCG_C2 - MCG Control 2 Register (RW)
 *
 * Reset value: 0x80U
 */
/*!
 * @name Constants and macros for entire MCG_C2 register
 */
/*@{*/
#define MCG_RD_C2(base)          (MCG_C2_REG(base))
#define MCG_WR_C2(base, value)   (MCG_C2_REG(base) = (value))
#define MCG_RMW_C2(base, mask, value) (MCG_WR_C2(base, (MCG_RD_C2(base) & ~(mask)) | (value)))
#define MCG_SET_C2(base, value)  (BME_OR8(&MCG_C2_REG(base), (uint8_t)(value)))
#define MCG_CLR_C2(base, value)  (BME_AND8(&MCG_C2_REG(base), (uint8_t)(~(value))))
#define MCG_TOG_C2(base, value)  (BME_XOR8(&MCG_C2_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual MCG_C2 bitfields
 */

/*!
 * @name Register MCG_C2, field IRCS[0] (RW)
 *
 * Selects between the fast or slow internal reference clock source.
 *
 * Values:
 * - 0b0 - Slow internal reference clock selected.
 * - 0b1 - Fast internal reference clock selected.
 */
/*@{*/
/*! @brief Read current value of the MCG_C2_IRCS field. */
#define MCG_RD_C2_IRCS(base) ((MCG_C2_REG(base) & MCG_C2_IRCS_MASK) >> MCG_C2_IRCS_SHIFT)
#define MCG_BRD_C2_IRCS(base) (BME_UBFX8(&MCG_C2_REG(base), MCG_C2_IRCS_SHIFT, MCG_C2_IRCS_WIDTH))

/*! @brief Set the IRCS field to a new value. */
#define MCG_WR_C2_IRCS(base, value) (MCG_RMW_C2(base, MCG_C2_IRCS_MASK, MCG_C2_IRCS(value)))
#define MCG_BWR_C2_IRCS(base, value) (BME_BFI8(&MCG_C2_REG(base), ((uint8_t)(value) << MCG_C2_IRCS_SHIFT), MCG_C2_IRCS_SHIFT, MCG_C2_IRCS_WIDTH))
/*@}*/

/*!
 * @name Register MCG_C2, field LP[1] (RW)
 *
 * Controls whether the FLL or PLL is disabled in BLPI and BLPE modes. In FBE or
 * PBE modes, setting this bit to 1 will transition the MCG into BLPE mode; in
 * FBI mode, setting this bit to 1 will transition the MCG into BLPI mode. In any
 * other MCG mode, LP bit has no affect.
 *
 * Values:
 * - 0b0 - FLL or PLL is not disabled in bypass modes.
 * - 0b1 - FLL or PLL is disabled in bypass modes (lower power)
 */
/*@{*/
/*! @brief Read current value of the MCG_C2_LP field. */
#define MCG_RD_C2_LP(base)   ((MCG_C2_REG(base) & MCG_C2_LP_MASK) >> MCG_C2_LP_SHIFT)
#define MCG_BRD_C2_LP(base)  (BME_UBFX8(&MCG_C2_REG(base), MCG_C2_LP_SHIFT, MCG_C2_LP_WIDTH))

/*! @brief Set the LP field to a new value. */
#define MCG_WR_C2_LP(base, value) (MCG_RMW_C2(base, MCG_C2_LP_MASK, MCG_C2_LP(value)))
#define MCG_BWR_C2_LP(base, value) (BME_BFI8(&MCG_C2_REG(base), ((uint8_t)(value) << MCG_C2_LP_SHIFT), MCG_C2_LP_SHIFT, MCG_C2_LP_WIDTH))
/*@}*/

/*!
 * @name Register MCG_C2, field EREFS[2] (RW)
 *
 * Selects the source for the external reference clock. See the Oscillator (OSC)
 * chapter for more details.
 *
 * Values:
 * - 0b0 - External reference clock requested.
 * - 0b1 - Oscillator requested.
 */
/*@{*/
/*! @brief Read current value of the MCG_C2_EREFS field. */
#define MCG_RD_C2_EREFS(base) ((MCG_C2_REG(base) & MCG_C2_EREFS_MASK) >> MCG_C2_EREFS_SHIFT)
#define MCG_BRD_C2_EREFS(base) (BME_UBFX8(&MCG_C2_REG(base), MCG_C2_EREFS_SHIFT, MCG_C2_EREFS_WIDTH))

/*! @brief Set the EREFS field to a new value. */
#define MCG_WR_C2_EREFS(base, value) (MCG_RMW_C2(base, MCG_C2_EREFS_MASK, MCG_C2_EREFS(value)))
#define MCG_BWR_C2_EREFS(base, value) (BME_BFI8(&MCG_C2_REG(base), ((uint8_t)(value) << MCG_C2_EREFS_SHIFT), MCG_C2_EREFS_SHIFT, MCG_C2_EREFS_WIDTH))
/*@}*/

/*!
 * @name Register MCG_C2, field HGO[3] (RW)
 *
 * Controls the crystal oscillator mode of operation. See the Oscillator (OSC)
 * chapter for more details.
 *
 * Values:
 * - 0b0 - Configure crystal oscillator for low-power operation.
 * - 0b1 - Configure crystal oscillator for high-gain operation.
 */
/*@{*/
/*! @brief Read current value of the MCG_C2_HGO field. */
#define MCG_RD_C2_HGO(base)  ((MCG_C2_REG(base) & MCG_C2_HGO_MASK) >> MCG_C2_HGO_SHIFT)
#define MCG_BRD_C2_HGO(base) (BME_UBFX8(&MCG_C2_REG(base), MCG_C2_HGO_SHIFT, MCG_C2_HGO_WIDTH))

/*! @brief Set the HGO field to a new value. */
#define MCG_WR_C2_HGO(base, value) (MCG_RMW_C2(base, MCG_C2_HGO_MASK, MCG_C2_HGO(value)))
#define MCG_BWR_C2_HGO(base, value) (BME_BFI8(&MCG_C2_REG(base), ((uint8_t)(value) << MCG_C2_HGO_SHIFT), MCG_C2_HGO_SHIFT, MCG_C2_HGO_WIDTH))
/*@}*/

/*!
 * @name Register MCG_C2, field RANGE[5:4] (RW)
 *
 * Selects the frequency range for the crystal oscillator or external clock
 * source. See the Oscillator (OSC) chapter for more details and the device data
 * sheet for the frequency ranges used.
 *
 * Values:
 * - 0b00 - Encoding 0 - Low frequency range selected for the crystal oscillator
 *     .
 * - 0b01 - Encoding 1 - High frequency range selected for the crystal
 *     oscillator .
 */
/*@{*/
/*! @brief Read current value of the MCG_C2_RANGE field. */
#define MCG_RD_C2_RANGE(base) ((MCG_C2_REG(base) & MCG_C2_RANGE_MASK) >> MCG_C2_RANGE_SHIFT)
#define MCG_BRD_C2_RANGE(base) (BME_UBFX8(&MCG_C2_REG(base), MCG_C2_RANGE_SHIFT, MCG_C2_RANGE_WIDTH))

/*! @brief Set the RANGE field to a new value. */
#define MCG_WR_C2_RANGE(base, value) (MCG_RMW_C2(base, MCG_C2_RANGE_MASK, MCG_C2_RANGE(value)))
#define MCG_BWR_C2_RANGE(base, value) (BME_BFI8(&MCG_C2_REG(base), ((uint8_t)(value) << MCG_C2_RANGE_SHIFT), MCG_C2_RANGE_SHIFT, MCG_C2_RANGE_WIDTH))
/*@}*/

/*!
 * @name Register MCG_C2, field FCFTRIM[6] (RW)
 *
 * FCFTRIM controls the smallest adjustment of the fast internal reference clock
 * frequency. Setting FCFTRIM increases the period and clearing FCFTRIM
 * decreases the period by the smallest amount possible. If an FCFTRIM value stored in
 * nonvolatile memory is to be used, it is your responsibility to copy that value
 * from the nonvolatile memory location to this bit.
 */
/*@{*/
/*! @brief Read current value of the MCG_C2_FCFTRIM field. */
#define MCG_RD_C2_FCFTRIM(base) ((MCG_C2_REG(base) & MCG_C2_FCFTRIM_MASK) >> MCG_C2_FCFTRIM_SHIFT)
#define MCG_BRD_C2_FCFTRIM(base) (BME_UBFX8(&MCG_C2_REG(base), MCG_C2_FCFTRIM_SHIFT, MCG_C2_FCFTRIM_WIDTH))

/*! @brief Set the FCFTRIM field to a new value. */
#define MCG_WR_C2_FCFTRIM(base, value) (MCG_RMW_C2(base, MCG_C2_FCFTRIM_MASK, MCG_C2_FCFTRIM(value)))
#define MCG_BWR_C2_FCFTRIM(base, value) (BME_BFI8(&MCG_C2_REG(base), ((uint8_t)(value) << MCG_C2_FCFTRIM_SHIFT), MCG_C2_FCFTRIM_SHIFT, MCG_C2_FCFTRIM_WIDTH))
/*@}*/

/*!
 * @name Register MCG_C2, field LOCRE0[7] (RW)
 *
 * Determines whether an interrupt or a reset request is made following a loss
 * of OSC0 external reference clock. The LOCRE0 only has an affect when CME0 is
 * set.
 *
 * Values:
 * - 0b0 - Interrupt request is generated on a loss of OSC0 external reference
 *     clock.
 * - 0b1 - Generate a reset request on a loss of OSC0 external reference clock.
 */
/*@{*/
/*! @brief Read current value of the MCG_C2_LOCRE0 field. */
#define MCG_RD_C2_LOCRE0(base) ((MCG_C2_REG(base) & MCG_C2_LOCRE0_MASK) >> MCG_C2_LOCRE0_SHIFT)
#define MCG_BRD_C2_LOCRE0(base) (BME_UBFX8(&MCG_C2_REG(base), MCG_C2_LOCRE0_SHIFT, MCG_C2_LOCRE0_WIDTH))

/*! @brief Set the LOCRE0 field to a new value. */
#define MCG_WR_C2_LOCRE0(base, value) (MCG_RMW_C2(base, MCG_C2_LOCRE0_MASK, MCG_C2_LOCRE0(value)))
#define MCG_BWR_C2_LOCRE0(base, value) (BME_BFI8(&MCG_C2_REG(base), ((uint8_t)(value) << MCG_C2_LOCRE0_SHIFT), MCG_C2_LOCRE0_SHIFT, MCG_C2_LOCRE0_WIDTH))
/*@}*/

/*******************************************************************************
 * MCG_C3 - MCG Control 3 Register
 ******************************************************************************/

/*!
 * @brief MCG_C3 - MCG Control 3 Register (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire MCG_C3 register
 */
/*@{*/
#define MCG_RD_C3(base)          (MCG_C3_REG(base))
#define MCG_WR_C3(base, value)   (MCG_C3_REG(base) = (value))
#define MCG_RMW_C3(base, mask, value) (MCG_WR_C3(base, (MCG_RD_C3(base) & ~(mask)) | (value)))
#define MCG_SET_C3(base, value)  (BME_OR8(&MCG_C3_REG(base), (uint8_t)(value)))
#define MCG_CLR_C3(base, value)  (BME_AND8(&MCG_C3_REG(base), (uint8_t)(~(value))))
#define MCG_TOG_C3(base, value)  (BME_XOR8(&MCG_C3_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * MCG_C4 - MCG Control 4 Register
 ******************************************************************************/

/*!
 * @brief MCG_C4 - MCG Control 4 Register (RW)
 *
 * Reset value: 0x00U
 *
 * Reset values for DRST and DMX32 bits are 0.
 */
/*!
 * @name Constants and macros for entire MCG_C4 register
 */
/*@{*/
#define MCG_RD_C4(base)          (MCG_C4_REG(base))
#define MCG_WR_C4(base, value)   (MCG_C4_REG(base) = (value))
#define MCG_RMW_C4(base, mask, value) (MCG_WR_C4(base, (MCG_RD_C4(base) & ~(mask)) | (value)))
#define MCG_SET_C4(base, value)  (BME_OR8(&MCG_C4_REG(base), (uint8_t)(value)))
#define MCG_CLR_C4(base, value)  (BME_AND8(&MCG_C4_REG(base), (uint8_t)(~(value))))
#define MCG_TOG_C4(base, value)  (BME_XOR8(&MCG_C4_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual MCG_C4 bitfields
 */

/*!
 * @name Register MCG_C4, field SCFTRIM[0] (RW)
 *
 * SCFTRIM A value for SCFTRIM is loaded during reset from a factory programmed
 * location . controls the smallest adjustment of the slow internal reference
 * clock frequency. Setting SCFTRIM increases the period and clearing SCFTRIM
 * decreases the period by the smallest amount possible. If an SCFTRIM value stored in
 * nonvolatile memory is to be used, it is your responsibility to copy that value
 * from the nonvolatile memory location to this bit.
 */
/*@{*/
/*! @brief Read current value of the MCG_C4_SCFTRIM field. */
#define MCG_RD_C4_SCFTRIM(base) ((MCG_C4_REG(base) & MCG_C4_SCFTRIM_MASK) >> MCG_C4_SCFTRIM_SHIFT)
#define MCG_BRD_C4_SCFTRIM(base) (BME_UBFX8(&MCG_C4_REG(base), MCG_C4_SCFTRIM_SHIFT, MCG_C4_SCFTRIM_WIDTH))

/*! @brief Set the SCFTRIM field to a new value. */
#define MCG_WR_C4_SCFTRIM(base, value) (MCG_RMW_C4(base, MCG_C4_SCFTRIM_MASK, MCG_C4_SCFTRIM(value)))
#define MCG_BWR_C4_SCFTRIM(base, value) (BME_BFI8(&MCG_C4_REG(base), ((uint8_t)(value) << MCG_C4_SCFTRIM_SHIFT), MCG_C4_SCFTRIM_SHIFT, MCG_C4_SCFTRIM_WIDTH))
/*@}*/

/*!
 * @name Register MCG_C4, field FCTRIM[4:1] (RW)
 *
 * FCTRIM A value for FCTRIM is loaded during reset from a factory programmed
 * location. controls the fast internal reference clock frequency by controlling
 * the fast internal reference clock period. The FCTRIM bits are binary weighted,
 * that is, bit 1 adjusts twice as much as bit 0. Increasing the binary value
 * increases the period, and decreasing the value decreases the period. If an
 * FCTRIM[3:0] value stored in nonvolatile memory is to be used, it is your
 * responsibility to copy that value from the nonvolatile memory location to this register.
 */
/*@{*/
/*! @brief Read current value of the MCG_C4_FCTRIM field. */
#define MCG_RD_C4_FCTRIM(base) ((MCG_C4_REG(base) & MCG_C4_FCTRIM_MASK) >> MCG_C4_FCTRIM_SHIFT)
#define MCG_BRD_C4_FCTRIM(base) (BME_UBFX8(&MCG_C4_REG(base), MCG_C4_FCTRIM_SHIFT, MCG_C4_FCTRIM_WIDTH))

/*! @brief Set the FCTRIM field to a new value. */
#define MCG_WR_C4_FCTRIM(base, value) (MCG_RMW_C4(base, MCG_C4_FCTRIM_MASK, MCG_C4_FCTRIM(value)))
#define MCG_BWR_C4_FCTRIM(base, value) (BME_BFI8(&MCG_C4_REG(base), ((uint8_t)(value) << MCG_C4_FCTRIM_SHIFT), MCG_C4_FCTRIM_SHIFT, MCG_C4_FCTRIM_WIDTH))
/*@}*/

/*!
 * @name Register MCG_C4, field DRST_DRS[6:5] (RW)
 *
 * The DRS bits select the frequency range for the FLL output, DCOOUT. When the
 * LP bit is set, writes to the DRS bits are ignored. The DRST read field
 * indicates the current frequency range for DCOOUT. The DRST field does not update
 * immediately after a write to the DRS field due to internal synchronization between
 * clock domains. See the DCO Frequency Range table for more details.
 *
 * Values:
 * - 0b00 - Encoding 0 - Low range (reset default).
 * - 0b01 - Encoding 1 - Mid range.
 * - 0b10 - Encoding 2 - Mid-high range.
 * - 0b11 - Encoding 3 - High range.
 */
/*@{*/
/*! @brief Read current value of the MCG_C4_DRST_DRS field. */
#define MCG_RD_C4_DRST_DRS(base) ((MCG_C4_REG(base) & MCG_C4_DRST_DRS_MASK) >> MCG_C4_DRST_DRS_SHIFT)
#define MCG_BRD_C4_DRST_DRS(base) (BME_UBFX8(&MCG_C4_REG(base), MCG_C4_DRST_DRS_SHIFT, MCG_C4_DRST_DRS_WIDTH))

/*! @brief Set the DRST_DRS field to a new value. */
#define MCG_WR_C4_DRST_DRS(base, value) (MCG_RMW_C4(base, MCG_C4_DRST_DRS_MASK, MCG_C4_DRST_DRS(value)))
#define MCG_BWR_C4_DRST_DRS(base, value) (BME_BFI8(&MCG_C4_REG(base), ((uint8_t)(value) << MCG_C4_DRST_DRS_SHIFT), MCG_C4_DRST_DRS_SHIFT, MCG_C4_DRST_DRS_WIDTH))
/*@}*/

/*!
 * @name Register MCG_C4, field DMX32[7] (RW)
 *
 * The DMX32 bit controls whether the DCO frequency range is narrowed to its
 * maximum frequency with a 32.768 kHz reference. The following table identifies
 * settings for the DCO frequency range. The system clocks derived from this source
 * should not exceed their specified maximums. DRST_DRS DMX32 Reference Range FLL
 * Factor DCO Range 00 0 31.25-39.0625 kHz 640 20-25 MHz 1 32.768 kHz 732 24 MHz
 * 01 0 31.25-39.0625 kHz 1280 40-50 MHz 1 32.768 kHz 1464 48 MHz 10 0
 * 31.25-39.0625 kHz 1920 60-75 MHz 1 32.768 kHz 2197 72 MHz 11 0 31.25-39.0625 kHz 2560
 * 80-100 MHz 1 32.768 kHz 2929 96 MHz
 *
 * Values:
 * - 0b0 - DCO has a default range of 25%.
 * - 0b1 - DCO is fine-tuned for maximum frequency with 32.768 kHz reference.
 */
/*@{*/
/*! @brief Read current value of the MCG_C4_DMX32 field. */
#define MCG_RD_C4_DMX32(base) ((MCG_C4_REG(base) & MCG_C4_DMX32_MASK) >> MCG_C4_DMX32_SHIFT)
#define MCG_BRD_C4_DMX32(base) (BME_UBFX8(&MCG_C4_REG(base), MCG_C4_DMX32_SHIFT, MCG_C4_DMX32_WIDTH))

/*! @brief Set the DMX32 field to a new value. */
#define MCG_WR_C4_DMX32(base, value) (MCG_RMW_C4(base, MCG_C4_DMX32_MASK, MCG_C4_DMX32(value)))
#define MCG_BWR_C4_DMX32(base, value) (BME_BFI8(&MCG_C4_REG(base), ((uint8_t)(value) << MCG_C4_DMX32_SHIFT), MCG_C4_DMX32_SHIFT, MCG_C4_DMX32_WIDTH))
/*@}*/

/*******************************************************************************
 * MCG_C5 - MCG Control 5 Register
 ******************************************************************************/

/*!
 * @brief MCG_C5 - MCG Control 5 Register (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire MCG_C5 register
 */
/*@{*/
#define MCG_RD_C5(base)          (MCG_C5_REG(base))
#define MCG_WR_C5(base, value)   (MCG_C5_REG(base) = (value))
#define MCG_RMW_C5(base, mask, value) (MCG_WR_C5(base, (MCG_RD_C5(base) & ~(mask)) | (value)))
#define MCG_SET_C5(base, value)  (BME_OR8(&MCG_C5_REG(base), (uint8_t)(value)))
#define MCG_CLR_C5(base, value)  (BME_AND8(&MCG_C5_REG(base), (uint8_t)(~(value))))
#define MCG_TOG_C5(base, value)  (BME_XOR8(&MCG_C5_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual MCG_C5 bitfields
 */

/*!
 * @name Register MCG_C5, field PRDIV[2:0] (RW)
 *
 * Selects the amount to divide down the external reference clock for the PLL0.
 * The resulting frequency must be in the range of 8 MHz to 16 MHz. After the
 * PLL0 is enabled (by setting either PLLCLKEN0 or PLLS), the PRDIV0 value must not
 * be changed when LOCK0 is zero. PLL External Reference Divide Factor PRDIV
 * Divide Factor 000 1 001 2 010 3 011 4 100 5 101 6 110 7 111 8
 */
/*@{*/
/*! @brief Read current value of the MCG_C5_PRDIV field. */
#define MCG_RD_C5_PRDIV(base) ((MCG_C5_REG(base) & MCG_C5_PRDIV_MASK) >> MCG_C5_PRDIV_SHIFT)
#define MCG_BRD_C5_PRDIV(base) (BME_UBFX8(&MCG_C5_REG(base), MCG_C5_PRDIV_SHIFT, MCG_C5_PRDIV_WIDTH))

/*! @brief Set the PRDIV field to a new value. */
#define MCG_WR_C5_PRDIV(base, value) (MCG_RMW_C5(base, MCG_C5_PRDIV_MASK, MCG_C5_PRDIV(value)))
#define MCG_BWR_C5_PRDIV(base, value) (BME_BFI8(&MCG_C5_REG(base), ((uint8_t)(value) << MCG_C5_PRDIV_SHIFT), MCG_C5_PRDIV_SHIFT, MCG_C5_PRDIV_WIDTH))
/*@}*/

/*!
 * @name Register MCG_C5, field PLLSTEN[5] (RW)
 *
 * Enables the PLL Clock during Normal Stop (In Low Power Stop mode, the PLL
 * clock gets disabled even if PLLSTEN=1). All other power modes, PLLSTEN bit has no
 * affect and does not enable the PLL Clock to run if it is written to 1.
 *
 * Values:
 * - 0b0 - MCGPLLCLK and MCGPLLCLK2X are disabled in any of the Stop modes.
 * - 0b1 - MCGPLLCLK and MCGPLLCLK2X are enabled if system is in Normal Stop
 *     mode.
 */
/*@{*/
/*! @brief Read current value of the MCG_C5_PLLSTEN field. */
#define MCG_RD_C5_PLLSTEN(base) ((MCG_C5_REG(base) & MCG_C5_PLLSTEN_MASK) >> MCG_C5_PLLSTEN_SHIFT)
#define MCG_BRD_C5_PLLSTEN(base) (BME_UBFX8(&MCG_C5_REG(base), MCG_C5_PLLSTEN_SHIFT, MCG_C5_PLLSTEN_WIDTH))

/*! @brief Set the PLLSTEN field to a new value. */
#define MCG_WR_C5_PLLSTEN(base, value) (MCG_RMW_C5(base, MCG_C5_PLLSTEN_MASK, MCG_C5_PLLSTEN(value)))
#define MCG_BWR_C5_PLLSTEN(base, value) (BME_BFI8(&MCG_C5_REG(base), ((uint8_t)(value) << MCG_C5_PLLSTEN_SHIFT), MCG_C5_PLLSTEN_SHIFT, MCG_C5_PLLSTEN_WIDTH))
/*@}*/

/*!
 * @name Register MCG_C5, field PLLCLKEN[6] (RW)
 *
 * Enables PLL independent of PLLS and enables the PLL clock for use as
 * MCGPLLCLK. (PRDIV needs to be programmed to the correct divider to generate a PLL
 * reference clock in a valid reference range prior to setting the PLLCLKEN bit).
 * Setting PLLCLKEN will enable the external oscillator if not already enabled.
 * Whenever the PLL is being enabled by means of the PLLCLKEN bit, and the external
 * oscillator is being used as the reference clock, the OSCINIT 0 bit should be
 * checked to make sure it is set.
 *
 * Values:
 * - 0b0 - MCGPLLCLK is inactive.
 * - 0b1 - MCGPLLCLK is active.
 */
/*@{*/
/*! @brief Read current value of the MCG_C5_PLLCLKEN field. */
#define MCG_RD_C5_PLLCLKEN(base) ((MCG_C5_REG(base) & MCG_C5_PLLCLKEN_MASK) >> MCG_C5_PLLCLKEN_SHIFT)
#define MCG_BRD_C5_PLLCLKEN(base) (BME_UBFX8(&MCG_C5_REG(base), MCG_C5_PLLCLKEN_SHIFT, MCG_C5_PLLCLKEN_WIDTH))

/*! @brief Set the PLLCLKEN field to a new value. */
#define MCG_WR_C5_PLLCLKEN(base, value) (MCG_RMW_C5(base, MCG_C5_PLLCLKEN_MASK, MCG_C5_PLLCLKEN(value)))
#define MCG_BWR_C5_PLLCLKEN(base, value) (BME_BFI8(&MCG_C5_REG(base), ((uint8_t)(value) << MCG_C5_PLLCLKEN_SHIFT), MCG_C5_PLLCLKEN_SHIFT, MCG_C5_PLLCLKEN_WIDTH))
/*@}*/

/*******************************************************************************
 * MCG_C6 - MCG Control 6 Register
 ******************************************************************************/

/*!
 * @brief MCG_C6 - MCG Control 6 Register (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire MCG_C6 register
 */
/*@{*/
#define MCG_RD_C6(base)          (MCG_C6_REG(base))
#define MCG_WR_C6(base, value)   (MCG_C6_REG(base) = (value))
#define MCG_RMW_C6(base, mask, value) (MCG_WR_C6(base, (MCG_RD_C6(base) & ~(mask)) | (value)))
#define MCG_SET_C6(base, value)  (BME_OR8(&MCG_C6_REG(base), (uint8_t)(value)))
#define MCG_CLR_C6(base, value)  (BME_AND8(&MCG_C6_REG(base), (uint8_t)(~(value))))
#define MCG_TOG_C6(base, value)  (BME_XOR8(&MCG_C6_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual MCG_C6 bitfields
 */

/*!
 * @name Register MCG_C6, field VDIV[4:0] (RW)
 *
 * Selects the amount to divide the VCO output of the PLL. The VDIV bits
 * establish the multiplication factor (M) applied to the reference clock frequency.
 * After the PLL is enabled (by setting either PLLCLKEN or PLLS), the VDIV value
 * must not be changed when LOCK is zero. PLL VCO Divide Factor VDIV Multiply Factor
 * VDIV Multiply Factor VDIV Multiply Factor VDIV Multiply Factor 00000 16 01000
 * 24 10000 32 11000 40 00001 17 01001 25 10001 33 11001 41 00010 18 01010 26
 * 10010 34 11010 42 00011 19 01011 27 10011 35 11011 43 00100 20 01100 28 10100 36
 * 11100 44 00101 21 01101 29 10101 37 11101 45 00110 22 01110 30 10110 38 11110
 * 46 00111 23 01111 31 10111 39 11111 47
 */
/*@{*/
/*! @brief Read current value of the MCG_C6_VDIV field. */
#define MCG_RD_C6_VDIV(base) ((MCG_C6_REG(base) & MCG_C6_VDIV_MASK) >> MCG_C6_VDIV_SHIFT)
#define MCG_BRD_C6_VDIV(base) (BME_UBFX8(&MCG_C6_REG(base), MCG_C6_VDIV_SHIFT, MCG_C6_VDIV_WIDTH))

/*! @brief Set the VDIV field to a new value. */
#define MCG_WR_C6_VDIV(base, value) (MCG_RMW_C6(base, MCG_C6_VDIV_MASK, MCG_C6_VDIV(value)))
#define MCG_BWR_C6_VDIV(base, value) (BME_BFI8(&MCG_C6_REG(base), ((uint8_t)(value) << MCG_C6_VDIV_SHIFT), MCG_C6_VDIV_SHIFT, MCG_C6_VDIV_WIDTH))
/*@}*/

/*!
 * @name Register MCG_C6, field CME0[5] (RW)
 *
 * Enables the loss of clock monitoring circuit for the OSC0 external reference
 * mux select. The LOCRE0 bit will determine if a interrupt or a reset request is
 * generated following a loss of OSC0 indication. The CME0 bit must only be set
 * to a logic 1 when the MCG is in an operational mode that uses the external
 * clock (FEE, FBE, PEE, PBE, or BLPE) . Whenever the CME0 bit is set to a logic 1,
 * the value of the RANGE0 bits in the C2 register should not be changed. CME0
 * bit should be set to a logic 0 before the MCG enters any Stop mode. Otherwise, a
 * reset request may occur while in Stop mode. CME0 should also be set to a
 * logic 0 before entering VLPR or VLPW power modes if the MCG is in BLPE mode.
 *
 * Values:
 * - 0b0 - External clock monitor is disabled for OSC0.
 * - 0b1 - External clock monitor is enabled for OSC0.
 */
/*@{*/
/*! @brief Read current value of the MCG_C6_CME0 field. */
#define MCG_RD_C6_CME0(base) ((MCG_C6_REG(base) & MCG_C6_CME0_MASK) >> MCG_C6_CME0_SHIFT)
#define MCG_BRD_C6_CME0(base) (BME_UBFX8(&MCG_C6_REG(base), MCG_C6_CME0_SHIFT, MCG_C6_CME0_WIDTH))

/*! @brief Set the CME0 field to a new value. */
#define MCG_WR_C6_CME0(base, value) (MCG_RMW_C6(base, MCG_C6_CME0_MASK, MCG_C6_CME0(value)))
#define MCG_BWR_C6_CME0(base, value) (BME_BFI8(&MCG_C6_REG(base), ((uint8_t)(value) << MCG_C6_CME0_SHIFT), MCG_C6_CME0_SHIFT, MCG_C6_CME0_WIDTH))
/*@}*/

/*!
 * @name Register MCG_C6, field PLLS[6] (RW)
 *
 * Controls whether the PLL or FLL output is selected as the MCG source when
 * CLKS[1:0]=00. If the PLLS bit is cleared and PLLCLKEN 0 is not set, the PLL is
 * disabled in all modes. If the PLLS is set, the FLL is disabled in all modes.
 *
 * Values:
 * - 0b0 - FLL is selected.
 * - 0b1 - PLL is selected (PRDIV 0 need to be programmed to the correct divider
 *     to generate a PLL reference clock in the range of 8-16 MHz prior to
 *     setting the PLLS bit).
 */
/*@{*/
/*! @brief Read current value of the MCG_C6_PLLS field. */
#define MCG_RD_C6_PLLS(base) ((MCG_C6_REG(base) & MCG_C6_PLLS_MASK) >> MCG_C6_PLLS_SHIFT)
#define MCG_BRD_C6_PLLS(base) (BME_UBFX8(&MCG_C6_REG(base), MCG_C6_PLLS_SHIFT, MCG_C6_PLLS_WIDTH))

/*! @brief Set the PLLS field to a new value. */
#define MCG_WR_C6_PLLS(base, value) (MCG_RMW_C6(base, MCG_C6_PLLS_MASK, MCG_C6_PLLS(value)))
#define MCG_BWR_C6_PLLS(base, value) (BME_BFI8(&MCG_C6_REG(base), ((uint8_t)(value) << MCG_C6_PLLS_SHIFT), MCG_C6_PLLS_SHIFT, MCG_C6_PLLS_WIDTH))
/*@}*/

/*!
 * @name Register MCG_C6, field LOLIE0[7] (RW)
 *
 * Determines if an interrupt request is made following a loss of lock
 * indication. This bit only has an effect when LOLS 0 is set.
 *
 * Values:
 * - 0b0 - No interrupt request is generated on loss of lock.
 * - 0b1 - Generate an interrupt request on loss of lock.
 */
/*@{*/
/*! @brief Read current value of the MCG_C6_LOLIE0 field. */
#define MCG_RD_C6_LOLIE0(base) ((MCG_C6_REG(base) & MCG_C6_LOLIE0_MASK) >> MCG_C6_LOLIE0_SHIFT)
#define MCG_BRD_C6_LOLIE0(base) (BME_UBFX8(&MCG_C6_REG(base), MCG_C6_LOLIE0_SHIFT, MCG_C6_LOLIE0_WIDTH))

/*! @brief Set the LOLIE0 field to a new value. */
#define MCG_WR_C6_LOLIE0(base, value) (MCG_RMW_C6(base, MCG_C6_LOLIE0_MASK, MCG_C6_LOLIE0(value)))
#define MCG_BWR_C6_LOLIE0(base, value) (BME_BFI8(&MCG_C6_REG(base), ((uint8_t)(value) << MCG_C6_LOLIE0_SHIFT), MCG_C6_LOLIE0_SHIFT, MCG_C6_LOLIE0_WIDTH))
/*@}*/

/*******************************************************************************
 * MCG_S - MCG Status Register
 ******************************************************************************/

/*!
 * @brief MCG_S - MCG Status Register (RW)
 *
 * Reset value: 0x10U
 */
/*!
 * @name Constants and macros for entire MCG_S register
 */
/*@{*/
#define MCG_RD_S(base)           (MCG_S_REG(base))
#define MCG_WR_S(base, value)    (MCG_S_REG(base) = (value))
#define MCG_RMW_S(base, mask, value) (MCG_WR_S(base, (MCG_RD_S(base) & ~(mask)) | (value)))
#define MCG_SET_S(base, value)   (BME_OR8(&MCG_S_REG(base), (uint8_t)(value)))
#define MCG_CLR_S(base, value)   (BME_AND8(&MCG_S_REG(base), (uint8_t)(~(value))))
#define MCG_TOG_S(base, value)   (BME_XOR8(&MCG_S_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual MCG_S bitfields
 */

/*!
 * @name Register MCG_S, field IRCST[0] (RO)
 *
 * The IRCST bit indicates the current source for the internal reference clock
 * select clock (IRCSCLK). The IRCST bit does not update immediately after a write
 * to the IRCS bit due to internal synchronization between clock domains. The
 * IRCST bit will only be updated if the internal reference clock is enabled,
 * either by the MCG being in a mode that uses the IRC or by setting the C1[IRCLKEN]
 * bit .
 *
 * Values:
 * - 0b0 - Source of internal reference clock is the slow clock (32 kHz IRC).
 * - 0b1 - Source of internal reference clock is the fast clock (4 MHz IRC).
 */
/*@{*/
/*! @brief Read current value of the MCG_S_IRCST field. */
#define MCG_RD_S_IRCST(base) ((MCG_S_REG(base) & MCG_S_IRCST_MASK) >> MCG_S_IRCST_SHIFT)
#define MCG_BRD_S_IRCST(base) (BME_UBFX8(&MCG_S_REG(base), MCG_S_IRCST_SHIFT, MCG_S_IRCST_WIDTH))
/*@}*/

/*!
 * @name Register MCG_S, field OSCINIT0[1] (RO)
 *
 * This bit, which resets to 0, is set to 1 after the initialization cycles of
 * the crystal oscillator clock have completed. After being set, the bit is
 * cleared to 0 if the OSC is subsequently disabled. See the OSC module's detailed
 * description for more information.
 */
/*@{*/
/*! @brief Read current value of the MCG_S_OSCINIT0 field. */
#define MCG_RD_S_OSCINIT0(base) ((MCG_S_REG(base) & MCG_S_OSCINIT0_MASK) >> MCG_S_OSCINIT0_SHIFT)
#define MCG_BRD_S_OSCINIT0(base) (BME_UBFX8(&MCG_S_REG(base), MCG_S_OSCINIT0_SHIFT, MCG_S_OSCINIT0_WIDTH))
/*@}*/

/*!
 * @name Register MCG_S, field CLKST[3:2] (RO)
 *
 * These bits indicate the current clock mode. The CLKST bits do not update
 * immediately after a write to the CLKS bits due to internal synchronization between
 * clock domains.
 *
 * Values:
 * - 0b00 - Encoding 0 - Output of the FLL is selected (reset default).
 * - 0b01 - Encoding 1 - Internal reference clock is selected.
 * - 0b10 - Encoding 2 - External reference clock is selected.
 * - 0b11 - Encoding 3 - Output of the PLL is selected.
 */
/*@{*/
/*! @brief Read current value of the MCG_S_CLKST field. */
#define MCG_RD_S_CLKST(base) ((MCG_S_REG(base) & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT)
#define MCG_BRD_S_CLKST(base) (BME_UBFX8(&MCG_S_REG(base), MCG_S_CLKST_SHIFT, MCG_S_CLKST_WIDTH))
/*@}*/

/*!
 * @name Register MCG_S, field IREFST[4] (RO)
 *
 * This bit indicates the current source for the FLL reference clock. The IREFST
 * bit does not update immediately after a write to the IREFS bit due to
 * internal synchronization between clock domains.
 *
 * Values:
 * - 0b0 - Source of FLL reference clock is the external reference clock.
 * - 0b1 - Source of FLL reference clock is the internal reference clock.
 */
/*@{*/
/*! @brief Read current value of the MCG_S_IREFST field. */
#define MCG_RD_S_IREFST(base) ((MCG_S_REG(base) & MCG_S_IREFST_MASK) >> MCG_S_IREFST_SHIFT)
#define MCG_BRD_S_IREFST(base) (BME_UBFX8(&MCG_S_REG(base), MCG_S_IREFST_SHIFT, MCG_S_IREFST_WIDTH))
/*@}*/

/*!
 * @name Register MCG_S, field PLLST[5] (RO)
 *
 * This bit indicates the clock source selected by PLLS . The PLLST bit does not
 * update immediately after a write to the PLLS bit due to internal
 * synchronization between clock domains.
 *
 * Values:
 * - 0b0 - Source of PLLS clock is FLL clock.
 * - 0b1 - Source of PLLS clock is PLL output clock.
 */
/*@{*/
/*! @brief Read current value of the MCG_S_PLLST field. */
#define MCG_RD_S_PLLST(base) ((MCG_S_REG(base) & MCG_S_PLLST_MASK) >> MCG_S_PLLST_SHIFT)
#define MCG_BRD_S_PLLST(base) (BME_UBFX8(&MCG_S_REG(base), MCG_S_PLLST_SHIFT, MCG_S_PLLST_WIDTH))
/*@}*/

/*!
 * @name Register MCG_S, field LOCK0[6] (RO)
 *
 * This bit indicates whether the PLL has acquired lock. Lock detection is
 * disabled when not operating in either PBE or PEE mode unless PLLCLKEN=1 and the MCG
 * is not configured in BLPI or BLPE mode. While the PLL clock is locking to the
 * desired frequency, MCGPLLCLK and MCGPLLCLK2X will be gated off until the LOCK
 * bit gets asserted. If the lock status bit is set, changing the value of the
 * PRDIV[2:0] bits in the C5 register or the VDIV[4:0] bits in the C6 register
 * causes the lock status bit to clear and stay cleared until the PLL has reacquired
 * lock. Loss of PLL reference clock will also cause the LOCK bit to clear until
 * PLL has reacquired lock Entry into LLS, VLPS, or regular Stop with PLLSTEN=0
 * also causes the lock status bit to clear and stay cleared until the Stop mode
 * is exited and the PLL has reacquired lock. Any time the PLL is enabled and the
 * LOCK bit is cleared, the MCGPLLCLK and MCGPLLCLK2X will be gated off until
 * the LOCK bit is asserted again.
 *
 * Values:
 * - 0b0 - PLL is currently unlocked.
 * - 0b1 - PLL is currently locked.
 */
/*@{*/
/*! @brief Read current value of the MCG_S_LOCK0 field. */
#define MCG_RD_S_LOCK0(base) ((MCG_S_REG(base) & MCG_S_LOCK0_MASK) >> MCG_S_LOCK0_SHIFT)
#define MCG_BRD_S_LOCK0(base) (BME_UBFX8(&MCG_S_REG(base), MCG_S_LOCK0_SHIFT, MCG_S_LOCK0_WIDTH))
/*@}*/

/*!
 * @name Register MCG_S, field LOLS0[7] (W1C)
 *
 * This bit is a sticky bit indicating the lock status for the PLL. LOLS is set
 * if after acquiring lock, the PLL output frequency has fallen outside the lock
 * exit frequency tolerance, D unl . LOLIE determines whether an interrupt
 * request is made when LOLS is set. LOLRE determines whether a reset request is made
 * when LOLS is set. This bit is cleared by reset or by writing a logic 1 to it
 * when set. Writing a logic 0 to this bit has no effect.
 *
 * Values:
 * - 0b0 - PLL has not lost lock since LOLS 0 was last cleared.
 * - 0b1 - PLL has lost lock since LOLS 0 was last cleared.
 */
/*@{*/
/*! @brief Read current value of the MCG_S_LOLS0 field. */
#define MCG_RD_S_LOLS0(base) ((MCG_S_REG(base) & MCG_S_LOLS0_MASK) >> MCG_S_LOLS0_SHIFT)
#define MCG_BRD_S_LOLS0(base) (BME_UBFX8(&MCG_S_REG(base), MCG_S_LOLS0_SHIFT, MCG_S_LOLS0_WIDTH))

/*! @brief Set the LOLS0 field to a new value. */
#define MCG_WR_S_LOLS0(base, value) (MCG_RMW_S(base, MCG_S_LOLS0_MASK, MCG_S_LOLS0(value)))
#define MCG_BWR_S_LOLS0(base, value) (BME_BFI8(&MCG_S_REG(base), ((uint8_t)(value) << MCG_S_LOLS0_SHIFT), MCG_S_LOLS0_SHIFT, MCG_S_LOLS0_WIDTH))
/*@}*/

/*******************************************************************************
 * MCG_SC - MCG Status and Control Register
 ******************************************************************************/

/*!
 * @brief MCG_SC - MCG Status and Control Register (RW)
 *
 * Reset value: 0x02U
 */
/*!
 * @name Constants and macros for entire MCG_SC register
 */
/*@{*/
#define MCG_RD_SC(base)          (MCG_SC_REG(base))
#define MCG_WR_SC(base, value)   (MCG_SC_REG(base) = (value))
#define MCG_RMW_SC(base, mask, value) (MCG_WR_SC(base, (MCG_RD_SC(base) & ~(mask)) | (value)))
#define MCG_SET_SC(base, value)  (BME_OR8(&MCG_SC_REG(base), (uint8_t)(value)))
#define MCG_CLR_SC(base, value)  (BME_AND8(&MCG_SC_REG(base), (uint8_t)(~(value))))
#define MCG_TOG_SC(base, value)  (BME_XOR8(&MCG_SC_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual MCG_SC bitfields
 */

/*!
 * @name Register MCG_SC, field LOCS0[0] (W1C)
 *
 * The LOCS0 indicates when a loss of OSC0 reference clock has occurred. The
 * LOCS0 bit only has an effect when CME0 is set. This bit is cleared by writing a
 * logic 1 to it when set.
 *
 * Values:
 * - 0b0 - Loss of OSC0 has not occurred.
 * - 0b1 - Loss of OSC0 has occurred.
 */
/*@{*/
/*! @brief Read current value of the MCG_SC_LOCS0 field. */
#define MCG_RD_SC_LOCS0(base) ((MCG_SC_REG(base) & MCG_SC_LOCS0_MASK) >> MCG_SC_LOCS0_SHIFT)
#define MCG_BRD_SC_LOCS0(base) (BME_UBFX8(&MCG_SC_REG(base), MCG_SC_LOCS0_SHIFT, MCG_SC_LOCS0_WIDTH))

/*! @brief Set the LOCS0 field to a new value. */
#define MCG_WR_SC_LOCS0(base, value) (MCG_RMW_SC(base, (MCG_SC_LOCS0_MASK | MCG_SC_ATMF_MASK), MCG_SC_LOCS0(value)))
#define MCG_BWR_SC_LOCS0(base, value) (BME_BFI8(&MCG_SC_REG(base), ((uint8_t)(value) << MCG_SC_LOCS0_SHIFT), MCG_SC_LOCS0_SHIFT, MCG_SC_LOCS0_WIDTH))
/*@}*/

/*!
 * @name Register MCG_SC, field FCRDIV[3:1] (RW)
 *
 * Selects the amount to divide down the fast internal reference clock. The
 * resulting frequency will be in the range 31.25 kHz to 4 MHz (Note: Changing the
 * divider when the Fast IRC is enabled is not supported).
 *
 * Values:
 * - 0b000 - Divide Factor is 1
 * - 0b001 - Divide Factor is 2.
 * - 0b010 - Divide Factor is 4.
 * - 0b011 - Divide Factor is 8.
 * - 0b100 - Divide Factor is 16
 * - 0b101 - Divide Factor is 32
 * - 0b110 - Divide Factor is 64
 * - 0b111 - Divide Factor is 128.
 */
/*@{*/
/*! @brief Read current value of the MCG_SC_FCRDIV field. */
#define MCG_RD_SC_FCRDIV(base) ((MCG_SC_REG(base) & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT)
#define MCG_BRD_SC_FCRDIV(base) (BME_UBFX8(&MCG_SC_REG(base), MCG_SC_FCRDIV_SHIFT, MCG_SC_FCRDIV_WIDTH))

/*! @brief Set the FCRDIV field to a new value. */
#define MCG_WR_SC_FCRDIV(base, value) (MCG_RMW_SC(base, (MCG_SC_FCRDIV_MASK | MCG_SC_LOCS0_MASK | MCG_SC_ATMF_MASK), MCG_SC_FCRDIV(value)))
#define MCG_BWR_SC_FCRDIV(base, value) (BME_BFI8(&MCG_SC_REG(base), ((uint8_t)(value) << MCG_SC_FCRDIV_SHIFT), MCG_SC_FCRDIV_SHIFT, MCG_SC_FCRDIV_WIDTH))
/*@}*/

/*!
 * @name Register MCG_SC, field FLTPRSRV[4] (RW)
 *
 * This bit will prevent the FLL filter values from resetting allowing the FLL
 * output frequency to remain the same during clock mode changes where the FLL/DCO
 * output is still valid. (Note: This requires that the FLL reference frequency
 * to remain the same as what it was prior to the new clock mode switch.
 * Otherwise FLL filter and frequency values will change.)
 *
 * Values:
 * - 0b0 - FLL filter and FLL frequency will reset on changes to currect clock
 *     mode.
 * - 0b1 - Fll filter and FLL frequency retain their previous values during new
 *     clock mode change.
 */
/*@{*/
/*! @brief Read current value of the MCG_SC_FLTPRSRV field. */
#define MCG_RD_SC_FLTPRSRV(base) ((MCG_SC_REG(base) & MCG_SC_FLTPRSRV_MASK) >> MCG_SC_FLTPRSRV_SHIFT)
#define MCG_BRD_SC_FLTPRSRV(base) (BME_UBFX8(&MCG_SC_REG(base), MCG_SC_FLTPRSRV_SHIFT, MCG_SC_FLTPRSRV_WIDTH))

/*! @brief Set the FLTPRSRV field to a new value. */
#define MCG_WR_SC_FLTPRSRV(base, value) (MCG_RMW_SC(base, (MCG_SC_FLTPRSRV_MASK | MCG_SC_LOCS0_MASK | MCG_SC_ATMF_MASK), MCG_SC_FLTPRSRV(value)))
#define MCG_BWR_SC_FLTPRSRV(base, value) (BME_BFI8(&MCG_SC_REG(base), ((uint8_t)(value) << MCG_SC_FLTPRSRV_SHIFT), MCG_SC_FLTPRSRV_SHIFT, MCG_SC_FLTPRSRV_WIDTH))
/*@}*/

/*!
 * @name Register MCG_SC, field ATMF[5] (W1C)
 *
 * Fail flag for the Automatic Trim Machine (ATM). This bit asserts when the
 * Automatic Trim Machine is enabled, ATME=1, and a write to the C1, C3, C4, and SC
 * registers is detected or the MCG enters into any Stop mode. A write to ATMF
 * clears the flag.
 *
 * Values:
 * - 0b0 - Automatic Trim Machine completed normally.
 * - 0b1 - Automatic Trim Machine failed.
 */
/*@{*/
/*! @brief Read current value of the MCG_SC_ATMF field. */
#define MCG_RD_SC_ATMF(base) ((MCG_SC_REG(base) & MCG_SC_ATMF_MASK) >> MCG_SC_ATMF_SHIFT)
#define MCG_BRD_SC_ATMF(base) (BME_UBFX8(&MCG_SC_REG(base), MCG_SC_ATMF_SHIFT, MCG_SC_ATMF_WIDTH))

/*! @brief Set the ATMF field to a new value. */
#define MCG_WR_SC_ATMF(base, value) (MCG_RMW_SC(base, (MCG_SC_ATMF_MASK | MCG_SC_LOCS0_MASK), MCG_SC_ATMF(value)))
#define MCG_BWR_SC_ATMF(base, value) (BME_BFI8(&MCG_SC_REG(base), ((uint8_t)(value) << MCG_SC_ATMF_SHIFT), MCG_SC_ATMF_SHIFT, MCG_SC_ATMF_WIDTH))
/*@}*/

/*!
 * @name Register MCG_SC, field ATMS[6] (RW)
 *
 * Selects the IRCS clock for Auto Trim Test.
 *
 * Values:
 * - 0b0 - 32 kHz Internal Reference Clock selected.
 * - 0b1 - 4 MHz Internal Reference Clock selected.
 */
/*@{*/
/*! @brief Read current value of the MCG_SC_ATMS field. */
#define MCG_RD_SC_ATMS(base) ((MCG_SC_REG(base) & MCG_SC_ATMS_MASK) >> MCG_SC_ATMS_SHIFT)
#define MCG_BRD_SC_ATMS(base) (BME_UBFX8(&MCG_SC_REG(base), MCG_SC_ATMS_SHIFT, MCG_SC_ATMS_WIDTH))

/*! @brief Set the ATMS field to a new value. */
#define MCG_WR_SC_ATMS(base, value) (MCG_RMW_SC(base, (MCG_SC_ATMS_MASK | MCG_SC_LOCS0_MASK | MCG_SC_ATMF_MASK), MCG_SC_ATMS(value)))
#define MCG_BWR_SC_ATMS(base, value) (BME_BFI8(&MCG_SC_REG(base), ((uint8_t)(value) << MCG_SC_ATMS_SHIFT), MCG_SC_ATMS_SHIFT, MCG_SC_ATMS_WIDTH))
/*@}*/

/*!
 * @name Register MCG_SC, field ATME[7] (RW)
 *
 * Enables the Auto Trim Machine to start automatically trimming the selected
 * Internal Reference Clock. ATME deasserts after the Auto Trim Machine has
 * completed trimming all trim bits of the IRCS clock selected by the ATMS bit. Writing
 * to C1, C3, C4, and SC registers or entering Stop mode aborts the auto trim
 * operation and clears this bit.
 *
 * Values:
 * - 0b0 - Auto Trim Machine disabled.
 * - 0b1 - Auto Trim Machine enabled.
 */
/*@{*/
/*! @brief Read current value of the MCG_SC_ATME field. */
#define MCG_RD_SC_ATME(base) ((MCG_SC_REG(base) & MCG_SC_ATME_MASK) >> MCG_SC_ATME_SHIFT)
#define MCG_BRD_SC_ATME(base) (BME_UBFX8(&MCG_SC_REG(base), MCG_SC_ATME_SHIFT, MCG_SC_ATME_WIDTH))

/*! @brief Set the ATME field to a new value. */
#define MCG_WR_SC_ATME(base, value) (MCG_RMW_SC(base, (MCG_SC_ATME_MASK | MCG_SC_LOCS0_MASK | MCG_SC_ATMF_MASK), MCG_SC_ATME(value)))
#define MCG_BWR_SC_ATME(base, value) (BME_BFI8(&MCG_SC_REG(base), ((uint8_t)(value) << MCG_SC_ATME_SHIFT), MCG_SC_ATME_SHIFT, MCG_SC_ATME_WIDTH))
/*@}*/

/*******************************************************************************
 * MCG_ATCVH - MCG Auto Trim Compare Value High Register
 ******************************************************************************/

/*!
 * @brief MCG_ATCVH - MCG Auto Trim Compare Value High Register (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire MCG_ATCVH register
 */
/*@{*/
#define MCG_RD_ATCVH(base)       (MCG_ATCVH_REG(base))
#define MCG_WR_ATCVH(base, value) (MCG_ATCVH_REG(base) = (value))
#define MCG_RMW_ATCVH(base, mask, value) (MCG_WR_ATCVH(base, (MCG_RD_ATCVH(base) & ~(mask)) | (value)))
#define MCG_SET_ATCVH(base, value) (BME_OR8(&MCG_ATCVH_REG(base), (uint8_t)(value)))
#define MCG_CLR_ATCVH(base, value) (BME_AND8(&MCG_ATCVH_REG(base), (uint8_t)(~(value))))
#define MCG_TOG_ATCVH(base, value) (BME_XOR8(&MCG_ATCVH_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * MCG_ATCVL - MCG Auto Trim Compare Value Low Register
 ******************************************************************************/

/*!
 * @brief MCG_ATCVL - MCG Auto Trim Compare Value Low Register (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire MCG_ATCVL register
 */
/*@{*/
#define MCG_RD_ATCVL(base)       (MCG_ATCVL_REG(base))
#define MCG_WR_ATCVL(base, value) (MCG_ATCVL_REG(base) = (value))
#define MCG_RMW_ATCVL(base, mask, value) (MCG_WR_ATCVL(base, (MCG_RD_ATCVL(base) & ~(mask)) | (value)))
#define MCG_SET_ATCVL(base, value) (BME_OR8(&MCG_ATCVL_REG(base), (uint8_t)(value)))
#define MCG_CLR_ATCVL(base, value) (BME_AND8(&MCG_ATCVL_REG(base), (uint8_t)(~(value))))
#define MCG_TOG_ATCVL(base, value) (BME_XOR8(&MCG_ATCVL_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * MCG_C7 - MCG Control 7 Register
 ******************************************************************************/

/*!
 * @brief MCG_C7 - MCG Control 7 Register (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire MCG_C7 register
 */
/*@{*/
#define MCG_RD_C7(base)          (MCG_C7_REG(base))
#define MCG_WR_C7(base, value)   (MCG_C7_REG(base) = (value))
#define MCG_RMW_C7(base, mask, value) (MCG_WR_C7(base, (MCG_RD_C7(base) & ~(mask)) | (value)))
#define MCG_SET_C7(base, value)  (BME_OR8(&MCG_C7_REG(base), (uint8_t)(value)))
#define MCG_CLR_C7(base, value)  (BME_AND8(&MCG_C7_REG(base), (uint8_t)(~(value))))
#define MCG_TOG_C7(base, value)  (BME_XOR8(&MCG_C7_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual MCG_C7 bitfields
 */

/*!
 * @name Register MCG_C7, field OSCSEL[1:0] (RW)
 *
 * Selects the MCG FLL external reference clock The OSCSEL field can't be
 * changed during MCG modes (like PBE), when external clock is serving as the clock
 * source for MCG.
 *
 * Values:
 * - 0b00 - Selects Oscillator (OSCCLK0).
 * - 0b01 - Selects 32 kHz RTC Oscillator.
 * - 0b10 - Selects Oscillator (OSCCLK1).
 * - 0b11 - RESERVED
 */
/*@{*/
/*! @brief Read current value of the MCG_C7_OSCSEL field. */
#define MCG_RD_C7_OSCSEL(base) ((MCG_C7_REG(base) & MCG_C7_OSCSEL_MASK) >> MCG_C7_OSCSEL_SHIFT)
#define MCG_BRD_C7_OSCSEL(base) (BME_UBFX8(&MCG_C7_REG(base), MCG_C7_OSCSEL_SHIFT, MCG_C7_OSCSEL_WIDTH))

/*! @brief Set the OSCSEL field to a new value. */
#define MCG_WR_C7_OSCSEL(base, value) (MCG_RMW_C7(base, MCG_C7_OSCSEL_MASK, MCG_C7_OSCSEL(value)))
#define MCG_BWR_C7_OSCSEL(base, value) (BME_BFI8(&MCG_C7_REG(base), ((uint8_t)(value) << MCG_C7_OSCSEL_SHIFT), MCG_C7_OSCSEL_SHIFT, MCG_C7_OSCSEL_WIDTH))
/*@}*/

/*******************************************************************************
 * MCG_C8 - MCG Control 8 Register
 ******************************************************************************/

/*!
 * @brief MCG_C8 - MCG Control 8 Register (RW)
 *
 * Reset value: 0x80U
 */
/*!
 * @name Constants and macros for entire MCG_C8 register
 */
/*@{*/
#define MCG_RD_C8(base)          (MCG_C8_REG(base))
#define MCG_WR_C8(base, value)   (MCG_C8_REG(base) = (value))
#define MCG_RMW_C8(base, mask, value) (MCG_WR_C8(base, (MCG_RD_C8(base) & ~(mask)) | (value)))
#define MCG_SET_C8(base, value)  (BME_OR8(&MCG_C8_REG(base), (uint8_t)(value)))
#define MCG_CLR_C8(base, value)  (BME_AND8(&MCG_C8_REG(base), (uint8_t)(~(value))))
#define MCG_TOG_C8(base, value)  (BME_XOR8(&MCG_C8_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual MCG_C8 bitfields
 */

/*!
 * @name Register MCG_C8, field LOCS1[0] (W1C)
 *
 * This bit indicates when a loss of clock has occurred. This bit is cleared by
 * writing a logic 1 to it when set.
 *
 * Values:
 * - 0b0 - Loss of RTC has not occur.
 * - 0b1 - Loss of RTC has occur
 */
/*@{*/
/*! @brief Read current value of the MCG_C8_LOCS1 field. */
#define MCG_RD_C8_LOCS1(base) ((MCG_C8_REG(base) & MCG_C8_LOCS1_MASK) >> MCG_C8_LOCS1_SHIFT)
#define MCG_BRD_C8_LOCS1(base) (BME_UBFX8(&MCG_C8_REG(base), MCG_C8_LOCS1_SHIFT, MCG_C8_LOCS1_WIDTH))

/*! @brief Set the LOCS1 field to a new value. */
#define MCG_WR_C8_LOCS1(base, value) (MCG_RMW_C8(base, MCG_C8_LOCS1_MASK, MCG_C8_LOCS1(value)))
#define MCG_BWR_C8_LOCS1(base, value) (BME_BFI8(&MCG_C8_REG(base), ((uint8_t)(value) << MCG_C8_LOCS1_SHIFT), MCG_C8_LOCS1_SHIFT, MCG_C8_LOCS1_WIDTH))
/*@}*/

/*!
 * @name Register MCG_C8, field CME1[5] (RW)
 *
 * Enables the loss of clock monitoring circuit for the output of the RTC
 * external reference clock. The LOCRE1 bit will determine whether an interrupt or a
 * reset request is generated following a loss of RTC clock indication. The CME1
 * bit should be set to a logic 1 when the MCG is in an operational mode that uses
 * the RTC as its external reference clock or if the RTC is operational. CME1 bit
 * must be set to a logic 0 before the MCG enters any Stop mode. Otherwise, a
 * reset request may occur when in Stop mode. CME1 should also be set to a logic 0
 * before entering VLPR or VLPW power modes.
 *
 * Values:
 * - 0b0 - External clock monitor is disabled for RTC clock.
 * - 0b1 - External clock monitor is enabled for RTC clock.
 */
/*@{*/
/*! @brief Read current value of the MCG_C8_CME1 field. */
#define MCG_RD_C8_CME1(base) ((MCG_C8_REG(base) & MCG_C8_CME1_MASK) >> MCG_C8_CME1_SHIFT)
#define MCG_BRD_C8_CME1(base) (BME_UBFX8(&MCG_C8_REG(base), MCG_C8_CME1_SHIFT, MCG_C8_CME1_WIDTH))

/*! @brief Set the CME1 field to a new value. */
#define MCG_WR_C8_CME1(base, value) (MCG_RMW_C8(base, (MCG_C8_CME1_MASK | MCG_C8_LOCS1_MASK), MCG_C8_CME1(value)))
#define MCG_BWR_C8_CME1(base, value) (BME_BFI8(&MCG_C8_REG(base), ((uint8_t)(value) << MCG_C8_CME1_SHIFT), MCG_C8_CME1_SHIFT, MCG_C8_CME1_WIDTH))
/*@}*/

/*!
 * @name Register MCG_C8, field LOLRE[6] (RW)
 *
 * Determines if an interrupt or a reset request is made following a PLL loss of
 * lock.
 *
 * Values:
 * - 0b0 - Interrupt request is generated on a PLL loss of lock indication. The
 *     PLL loss of lock interrupt enable bit must also be set to generate the
 *     interrupt request.
 * - 0b1 - Generate a reset request on a PLL loss of lock indication.
 */
/*@{*/
/*! @brief Read current value of the MCG_C8_LOLRE field. */
#define MCG_RD_C8_LOLRE(base) ((MCG_C8_REG(base) & MCG_C8_LOLRE_MASK) >> MCG_C8_LOLRE_SHIFT)
#define MCG_BRD_C8_LOLRE(base) (BME_UBFX8(&MCG_C8_REG(base), MCG_C8_LOLRE_SHIFT, MCG_C8_LOLRE_WIDTH))

/*! @brief Set the LOLRE field to a new value. */
#define MCG_WR_C8_LOLRE(base, value) (MCG_RMW_C8(base, (MCG_C8_LOLRE_MASK | MCG_C8_LOCS1_MASK), MCG_C8_LOLRE(value)))
#define MCG_BWR_C8_LOLRE(base, value) (BME_BFI8(&MCG_C8_REG(base), ((uint8_t)(value) << MCG_C8_LOLRE_SHIFT), MCG_C8_LOLRE_SHIFT, MCG_C8_LOLRE_WIDTH))
/*@}*/

/*!
 * @name Register MCG_C8, field LOCRE1[7] (RW)
 *
 * Determines if a interrupt or a reset request is made following a loss of RTC
 * external reference clock. The LOCRE1 only has an affect when CME1 is set.
 *
 * Values:
 * - 0b0 - Interrupt request is generated on a loss of RTC external reference
 *     clock.
 * - 0b1 - Generate a reset request on a loss of RTC external reference clock
 */
/*@{*/
/*! @brief Read current value of the MCG_C8_LOCRE1 field. */
#define MCG_RD_C8_LOCRE1(base) ((MCG_C8_REG(base) & MCG_C8_LOCRE1_MASK) >> MCG_C8_LOCRE1_SHIFT)
#define MCG_BRD_C8_LOCRE1(base) (BME_UBFX8(&MCG_C8_REG(base), MCG_C8_LOCRE1_SHIFT, MCG_C8_LOCRE1_WIDTH))

/*! @brief Set the LOCRE1 field to a new value. */
#define MCG_WR_C8_LOCRE1(base, value) (MCG_RMW_C8(base, (MCG_C8_LOCRE1_MASK | MCG_C8_LOCS1_MASK), MCG_C8_LOCRE1(value)))
#define MCG_BWR_C8_LOCRE1(base, value) (BME_BFI8(&MCG_C8_REG(base), ((uint8_t)(value) << MCG_C8_LOCRE1_SHIFT), MCG_C8_LOCRE1_SHIFT, MCG_C8_LOCRE1_WIDTH))
/*@}*/

/* MCG C5[PLLCLKEN0] backward compatibility */
#define MCG_RD_C5_PLLCLKEN0(base)         (MCG_RD_C5_PLLCLKEN(base))
#define MCG_BRD_C5_PLLCLKEN0(base)        (MCG_BRD_C5_PLLCLKEN(base))
#define MCG_WR_C5_PLLCLKEN0(base, value)  (MCG_WR_C5_PLLCLKEN((base), (value)))
#define MCG_BWR_C5_PLLCLKEN0(base, value) (MCG_BWR_C5_PLLCLKEN((base), (value)))
/* MCG C5[PLLSTEN0] backward compatibility */
#define MCG_RD_C5_PLLSTEN0(base)         (MCG_RD_C5_PLLSTEN(base))
#define MCG_BRD_C5_PLLSTEN0(base)        (MCG_BRD_C5_PLLSTEN(base))
#define MCG_WR_C5_PLLSTEN0(base, value)  (MCG_WR_C5_PLLSTEN((base), (value)))
#define MCG_BWR_C5_PLLSTEN0(base, value) (MCG_BWR_C5_PLLSTEN((base), (value)))
/* MCG C5[PRDIV0] backward compatibility */
#define MCG_RD_C5_PRDIV0(base)         (MCG_RD_C5_PRDIV(base))
#define MCG_BRD_C5_PRDIV0(base)        (MCG_BRD_C5_PRDIV(base))
#define MCG_WR_C5_PRDIV0(base, value)  (MCG_WR_C5_PRDIV((base), (value)))
#define MCG_BWR_C5_PRDIV0(base, value) (MCG_BWR_C5_PRDIV((base), (value)))
/* MCG C6[VDIV0] backward compatibility */
#define MCG_RD_C6_VDIV0(base)         (MCG_RD_C6_VDIV(base))
#define MCG_BRD_C6_VDIV0(base)        (MCG_BRD_C6_VDIV(base))
#define MCG_WR_C6_VDIV0(base, value)  (MCG_WR_C6_VDIV((base), (value)))
#define MCG_BWR_C6_VDIV0(base, value) (MCG_BWR_C6_VDIV((base), (value)))

/*
 * MK82F25615 MCM
 *
 * Core Platform Miscellaneous Control Module
 *
 * Registers defined in this header file:
 * - MCM_PLASC - Crossbar Switch (AXBS) Slave Configuration
 * - MCM_PLAMC - Crossbar Switch (AXBS) Master Configuration
 * - MCM_CR - Control Register
 * - MCM_ISCR - Interrupt Status Register
 * - MCM_FADR - Fault address register
 * - MCM_FATR - Fault attributes register
 * - MCM_FDR - Fault data register
 * - MCM_PID - Process ID register
 * - MCM_CPO - Compute Operation Control Register
 */

#define MCM_INSTANCE_COUNT (1U) /*!< Number of instances of the MCM module. */
#define MCM_IDX (0U) /*!< Instance number for MCM. */

/*******************************************************************************
 * MCM_PLASC - Crossbar Switch (AXBS) Slave Configuration
 ******************************************************************************/

/*!
 * @brief MCM_PLASC - Crossbar Switch (AXBS) Slave Configuration (RO)
 *
 * Reset value: 0x003FU
 *
 * PLASC is a 16-bit read-only register identifying the presence/absence of bus
 * slave connections to the device's crossbar switch.
 */
/*!
 * @name Constants and macros for entire MCM_PLASC register
 */
/*@{*/
#define MCM_RD_PLASC(base)       (MCM_PLASC_REG(base))
/*@}*/

/*
 * Constants & macros for individual MCM_PLASC bitfields
 */

/*!
 * @name Register MCM_PLASC, field ASC[7:0] (RO)
 *
 * Values:
 * - 0b00000000 - A bus slave connection to AXBS input port n is absent
 * - 0b00000001 - A bus slave connection to AXBS input port n is present
 */
/*@{*/
/*! @brief Read current value of the MCM_PLASC_ASC field. */
#define MCM_RD_PLASC_ASC(base) ((MCM_PLASC_REG(base) & MCM_PLASC_ASC_MASK) >> MCM_PLASC_ASC_SHIFT)
#define MCM_BRD_PLASC_ASC(base) (MCM_RD_PLASC_ASC(base))
/*@}*/

/*******************************************************************************
 * MCM_PLAMC - Crossbar Switch (AXBS) Master Configuration
 ******************************************************************************/

/*!
 * @brief MCM_PLAMC - Crossbar Switch (AXBS) Master Configuration (RO)
 *
 * Reset value: 0x001FU
 *
 * PLAMC is a 16-bit read-only register identifying the presence/absence of bus
 * master connections to the device's crossbar switch.
 */
/*!
 * @name Constants and macros for entire MCM_PLAMC register
 */
/*@{*/
#define MCM_RD_PLAMC(base)       (MCM_PLAMC_REG(base))
/*@}*/

/*
 * Constants & macros for individual MCM_PLAMC bitfields
 */

/*!
 * @name Register MCM_PLAMC, field AMC[7:0] (RO)
 *
 * Values:
 * - 0b00000000 - A bus master connection to AXBS input port n is absent
 * - 0b00000001 - A bus master connection to AXBS input port n is present
 */
/*@{*/
/*! @brief Read current value of the MCM_PLAMC_AMC field. */
#define MCM_RD_PLAMC_AMC(base) ((MCM_PLAMC_REG(base) & MCM_PLAMC_AMC_MASK) >> MCM_PLAMC_AMC_SHIFT)
#define MCM_BRD_PLAMC_AMC(base) (MCM_RD_PLAMC_AMC(base))
/*@}*/

/*******************************************************************************
 * MCM_CR - Control Register
 ******************************************************************************/

/*!
 * @brief MCM_CR - Control Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * CR defines the arbitration and protection schemes for the two system RAM
 * arrays.
 */
/*!
 * @name Constants and macros for entire MCM_CR register
 */
/*@{*/
#define MCM_RD_CR(base)          (MCM_CR_REG(base))
#define MCM_WR_CR(base, value)   (MCM_CR_REG(base) = (value))
#define MCM_RMW_CR(base, mask, value) (MCM_WR_CR(base, (MCM_RD_CR(base) & ~(mask)) | (value)))
#define MCM_SET_CR(base, value)  (MCM_WR_CR(base, MCM_RD_CR(base) |  (value)))
#define MCM_CLR_CR(base, value)  (MCM_WR_CR(base, MCM_RD_CR(base) & ~(value)))
#define MCM_TOG_CR(base, value)  (MCM_WR_CR(base, MCM_RD_CR(base) ^  (value)))
/*@}*/

/*
 * Constants & macros for individual MCM_CR bitfields
 */

/*!
 * @name Register MCM_CR, field SRAMUAP[25:24] (RW)
 *
 * Defines the arbitration scheme and priority for the processor and SRAM
 * backdoor accesses to the SRAM_U array.
 *
 * Values:
 * - 0b00 - Round robin
 * - 0b01 - Special round robin (favors SRAM backoor accesses over the processor)
 * - 0b10 - Fixed priority. Processor has highest, backdoor has lowest
 * - 0b11 - Fixed priority. Backdoor has highest, processor has lowest
 */
/*@{*/
/*! @brief Read current value of the MCM_CR_SRAMUAP field. */
#define MCM_RD_CR_SRAMUAP(base) ((MCM_CR_REG(base) & MCM_CR_SRAMUAP_MASK) >> MCM_CR_SRAMUAP_SHIFT)
#define MCM_BRD_CR_SRAMUAP(base) (MCM_RD_CR_SRAMUAP(base))

/*! @brief Set the SRAMUAP field to a new value. */
#define MCM_WR_CR_SRAMUAP(base, value) (MCM_RMW_CR(base, MCM_CR_SRAMUAP_MASK, MCM_CR_SRAMUAP(value)))
#define MCM_BWR_CR_SRAMUAP(base, value) (MCM_WR_CR_SRAMUAP(base, value))
/*@}*/

/*!
 * @name Register MCM_CR, field SRAMUWP[26] (RW)
 *
 * When this bit is set, writes to SRAM_U array generates a bus error.
 */
/*@{*/
/*! @brief Read current value of the MCM_CR_SRAMUWP field. */
#define MCM_RD_CR_SRAMUWP(base) ((MCM_CR_REG(base) & MCM_CR_SRAMUWP_MASK) >> MCM_CR_SRAMUWP_SHIFT)
#define MCM_BRD_CR_SRAMUWP(base) (MCM_RD_CR_SRAMUWP(base))

/*! @brief Set the SRAMUWP field to a new value. */
#define MCM_WR_CR_SRAMUWP(base, value) (MCM_RMW_CR(base, MCM_CR_SRAMUWP_MASK, MCM_CR_SRAMUWP(value)))
#define MCM_BWR_CR_SRAMUWP(base, value) (MCM_WR_CR_SRAMUWP(base, value))
/*@}*/

/*!
 * @name Register MCM_CR, field SRAMLAP[29:28] (RW)
 *
 * Defines the arbitration scheme and priority for the processor and SRAM
 * backdoor accesses to the SRAM_L array.
 *
 * Values:
 * - 0b00 - Round robin
 * - 0b01 - Special round robin (favors SRAM backoor accesses over the processor)
 * - 0b10 - Fixed priority. Processor has highest, backdoor has lowest
 * - 0b11 - Fixed priority. Backdoor has highest, processor has lowest
 */
/*@{*/
/*! @brief Read current value of the MCM_CR_SRAMLAP field. */
#define MCM_RD_CR_SRAMLAP(base) ((MCM_CR_REG(base) & MCM_CR_SRAMLAP_MASK) >> MCM_CR_SRAMLAP_SHIFT)
#define MCM_BRD_CR_SRAMLAP(base) (MCM_RD_CR_SRAMLAP(base))

/*! @brief Set the SRAMLAP field to a new value. */
#define MCM_WR_CR_SRAMLAP(base, value) (MCM_RMW_CR(base, MCM_CR_SRAMLAP_MASK, MCM_CR_SRAMLAP(value)))
#define MCM_BWR_CR_SRAMLAP(base, value) (MCM_WR_CR_SRAMLAP(base, value))
/*@}*/

/*!
 * @name Register MCM_CR, field SRAMLWP[30] (RW)
 *
 * When this bit is set, writes to SRAM_L array generates a bus error.
 */
/*@{*/
/*! @brief Read current value of the MCM_CR_SRAMLWP field. */
#define MCM_RD_CR_SRAMLWP(base) ((MCM_CR_REG(base) & MCM_CR_SRAMLWP_MASK) >> MCM_CR_SRAMLWP_SHIFT)
#define MCM_BRD_CR_SRAMLWP(base) (MCM_RD_CR_SRAMLWP(base))

/*! @brief Set the SRAMLWP field to a new value. */
#define MCM_WR_CR_SRAMLWP(base, value) (MCM_RMW_CR(base, MCM_CR_SRAMLWP_MASK, MCM_CR_SRAMLWP(value)))
#define MCM_BWR_CR_SRAMLWP(base, value) (MCM_WR_CR_SRAMLWP(base, value))
/*@}*/

/*******************************************************************************
 * MCM_ISCR - Interrupt Status Register
 ******************************************************************************/

/*!
 * @brief MCM_ISCR - Interrupt Status Register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire MCM_ISCR register
 */
/*@{*/
#define MCM_RD_ISCR(base)        (MCM_ISCR_REG(base))
#define MCM_WR_ISCR(base, value) (MCM_ISCR_REG(base) = (value))
#define MCM_RMW_ISCR(base, mask, value) (MCM_WR_ISCR(base, (MCM_RD_ISCR(base) & ~(mask)) | (value)))
#define MCM_SET_ISCR(base, value) (MCM_WR_ISCR(base, MCM_RD_ISCR(base) |  (value)))
#define MCM_CLR_ISCR(base, value) (MCM_WR_ISCR(base, MCM_RD_ISCR(base) & ~(value)))
#define MCM_TOG_ISCR(base, value) (MCM_WR_ISCR(base, MCM_RD_ISCR(base) ^  (value)))
/*@}*/

/*
 * Constants & macros for individual MCM_ISCR bitfields
 */

/*!
 * @name Register MCM_ISCR, field FIOC[8] (RO)
 *
 * This read-only bit is a copy of the core's FPSCR[IOC] bit and signals an
 * illegal operation has been detected in the processor's FPU. Once set, this bit
 * remains set until software clears the FPSCR[IOC] bit.
 *
 * Values:
 * - 0b0 - No interrupt
 * - 0b1 - Interrupt occurred
 */
/*@{*/
/*! @brief Read current value of the MCM_ISCR_FIOC field. */
#define MCM_RD_ISCR_FIOC(base) ((MCM_ISCR_REG(base) & MCM_ISCR_FIOC_MASK) >> MCM_ISCR_FIOC_SHIFT)
#define MCM_BRD_ISCR_FIOC(base) (MCM_RD_ISCR_FIOC(base))
/*@}*/

/*!
 * @name Register MCM_ISCR, field FDZC[9] (RO)
 *
 * This read-only bit is a copy of the core's FPSCR[DZC] bit and signals a
 * divide by zero has been detected in the processor's FPU. Once set, this bit remains
 * set until software clears the FPSCR[DZC] bit.
 *
 * Values:
 * - 0b0 - No interrupt
 * - 0b1 - Interrupt occurred
 */
/*@{*/
/*! @brief Read current value of the MCM_ISCR_FDZC field. */
#define MCM_RD_ISCR_FDZC(base) ((MCM_ISCR_REG(base) & MCM_ISCR_FDZC_MASK) >> MCM_ISCR_FDZC_SHIFT)
#define MCM_BRD_ISCR_FDZC(base) (MCM_RD_ISCR_FDZC(base))
/*@}*/

/*!
 * @name Register MCM_ISCR, field FOFC[10] (RO)
 *
 * This read-only bit is a copy of the core's FPSCR[OFC] bit and signals an
 * overflow has been detected in the processor's FPU. Once set, this bit remains set
 * until software clears the FPSCR[OFC] bit.
 *
 * Values:
 * - 0b0 - No interrupt
 * - 0b1 - Interrupt occurred
 */
/*@{*/
/*! @brief Read current value of the MCM_ISCR_FOFC field. */
#define MCM_RD_ISCR_FOFC(base) ((MCM_ISCR_REG(base) & MCM_ISCR_FOFC_MASK) >> MCM_ISCR_FOFC_SHIFT)
#define MCM_BRD_ISCR_FOFC(base) (MCM_RD_ISCR_FOFC(base))
/*@}*/

/*!
 * @name Register MCM_ISCR, field FUFC[11] (RO)
 *
 * This read-only bit is a copy of the core's FPSCR[UFC] bit and signals an
 * underflow has been detected in the processor's FPU. Once set, this bit remains set
 * until software clears the FPSCR[UFC] bit.
 *
 * Values:
 * - 0b0 - No interrupt
 * - 0b1 - Interrupt occurred
 */
/*@{*/
/*! @brief Read current value of the MCM_ISCR_FUFC field. */
#define MCM_RD_ISCR_FUFC(base) ((MCM_ISCR_REG(base) & MCM_ISCR_FUFC_MASK) >> MCM_ISCR_FUFC_SHIFT)
#define MCM_BRD_ISCR_FUFC(base) (MCM_RD_ISCR_FUFC(base))
/*@}*/

/*!
 * @name Register MCM_ISCR, field FIXC[12] (RO)
 *
 * This read-only bit is a copy of the core's FPSCR[IXC] bit and signals an
 * inexact number has been detected in the processor's FPU. Once set, this bit
 * remains set until software clears the FPSCR[IXC] bit.
 *
 * Values:
 * - 0b0 - No interrupt
 * - 0b1 - Interrupt occurred
 */
/*@{*/
/*! @brief Read current value of the MCM_ISCR_FIXC field. */
#define MCM_RD_ISCR_FIXC(base) ((MCM_ISCR_REG(base) & MCM_ISCR_FIXC_MASK) >> MCM_ISCR_FIXC_SHIFT)
#define MCM_BRD_ISCR_FIXC(base) (MCM_RD_ISCR_FIXC(base))
/*@}*/

/*!
 * @name Register MCM_ISCR, field FIDC[15] (RO)
 *
 * This read-only bit is a copy of the core's FPSCR[IDC] bit and signals input
 * denormalized number has been detected in the processor's FPU. Once set, this
 * bit remains set until software clears the FPSCR[IDC] bit.
 *
 * Values:
 * - 0b0 - No interrupt
 * - 0b1 - Interrupt occurred
 */
/*@{*/
/*! @brief Read current value of the MCM_ISCR_FIDC field. */
#define MCM_RD_ISCR_FIDC(base) ((MCM_ISCR_REG(base) & MCM_ISCR_FIDC_MASK) >> MCM_ISCR_FIDC_SHIFT)
#define MCM_BRD_ISCR_FIDC(base) (MCM_RD_ISCR_FIDC(base))
/*@}*/

/*!
 * @name Register MCM_ISCR, field FIOCE[24] (RW)
 *
 * Values:
 * - 0b0 - Disable interrupt
 * - 0b1 - Enable interrupt
 */
/*@{*/
/*! @brief Read current value of the MCM_ISCR_FIOCE field. */
#define MCM_RD_ISCR_FIOCE(base) ((MCM_ISCR_REG(base) & MCM_ISCR_FIOCE_MASK) >> MCM_ISCR_FIOCE_SHIFT)
#define MCM_BRD_ISCR_FIOCE(base) (MCM_RD_ISCR_FIOCE(base))

/*! @brief Set the FIOCE field to a new value. */
#define MCM_WR_ISCR_FIOCE(base, value) (MCM_RMW_ISCR(base, MCM_ISCR_FIOCE_MASK, MCM_ISCR_FIOCE(value)))
#define MCM_BWR_ISCR_FIOCE(base, value) (MCM_WR_ISCR_FIOCE(base, value))
/*@}*/

/*!
 * @name Register MCM_ISCR, field FDZCE[25] (RW)
 *
 * Values:
 * - 0b0 - Disable interrupt
 * - 0b1 - Enable interrupt
 */
/*@{*/
/*! @brief Read current value of the MCM_ISCR_FDZCE field. */
#define MCM_RD_ISCR_FDZCE(base) ((MCM_ISCR_REG(base) & MCM_ISCR_FDZCE_MASK) >> MCM_ISCR_FDZCE_SHIFT)
#define MCM_BRD_ISCR_FDZCE(base) (MCM_RD_ISCR_FDZCE(base))

/*! @brief Set the FDZCE field to a new value. */
#define MCM_WR_ISCR_FDZCE(base, value) (MCM_RMW_ISCR(base, MCM_ISCR_FDZCE_MASK, MCM_ISCR_FDZCE(value)))
#define MCM_BWR_ISCR_FDZCE(base, value) (MCM_WR_ISCR_FDZCE(base, value))
/*@}*/

/*!
 * @name Register MCM_ISCR, field FOFCE[26] (RW)
 *
 * Values:
 * - 0b0 - Disable interrupt
 * - 0b1 - Enable interrupt
 */
/*@{*/
/*! @brief Read current value of the MCM_ISCR_FOFCE field. */
#define MCM_RD_ISCR_FOFCE(base) ((MCM_ISCR_REG(base) & MCM_ISCR_FOFCE_MASK) >> MCM_ISCR_FOFCE_SHIFT)
#define MCM_BRD_ISCR_FOFCE(base) (MCM_RD_ISCR_FOFCE(base))

/*! @brief Set the FOFCE field to a new value. */
#define MCM_WR_ISCR_FOFCE(base, value) (MCM_RMW_ISCR(base, MCM_ISCR_FOFCE_MASK, MCM_ISCR_FOFCE(value)))
#define MCM_BWR_ISCR_FOFCE(base, value) (MCM_WR_ISCR_FOFCE(base, value))
/*@}*/

/*!
 * @name Register MCM_ISCR, field FUFCE[27] (RW)
 *
 * Values:
 * - 0b0 - Disable interrupt
 * - 0b1 - Enable interrupt
 */
/*@{*/
/*! @brief Read current value of the MCM_ISCR_FUFCE field. */
#define MCM_RD_ISCR_FUFCE(base) ((MCM_ISCR_REG(base) & MCM_ISCR_FUFCE_MASK) >> MCM_ISCR_FUFCE_SHIFT)
#define MCM_BRD_ISCR_FUFCE(base) (MCM_RD_ISCR_FUFCE(base))

/*! @brief Set the FUFCE field to a new value. */
#define MCM_WR_ISCR_FUFCE(base, value) (MCM_RMW_ISCR(base, MCM_ISCR_FUFCE_MASK, MCM_ISCR_FUFCE(value)))
#define MCM_BWR_ISCR_FUFCE(base, value) (MCM_WR_ISCR_FUFCE(base, value))
/*@}*/

/*!
 * @name Register MCM_ISCR, field FIXCE[28] (RW)
 *
 * Values:
 * - 0b0 - Disable interrupt
 * - 0b1 - Enable interrupt
 */
/*@{*/
/*! @brief Read current value of the MCM_ISCR_FIXCE field. */
#define MCM_RD_ISCR_FIXCE(base) ((MCM_ISCR_REG(base) & MCM_ISCR_FIXCE_MASK) >> MCM_ISCR_FIXCE_SHIFT)
#define MCM_BRD_ISCR_FIXCE(base) (MCM_RD_ISCR_FIXCE(base))

/*! @brief Set the FIXCE field to a new value. */
#define MCM_WR_ISCR_FIXCE(base, value) (MCM_RMW_ISCR(base, MCM_ISCR_FIXCE_MASK, MCM_ISCR_FIXCE(value)))
#define MCM_BWR_ISCR_FIXCE(base, value) (MCM_WR_ISCR_FIXCE(base, value))
/*@}*/

/*!
 * @name Register MCM_ISCR, field FIDCE[31] (RW)
 *
 * Values:
 * - 0b0 - Disable interrupt
 * - 0b1 - Enable interrupt
 */
/*@{*/
/*! @brief Read current value of the MCM_ISCR_FIDCE field. */
#define MCM_RD_ISCR_FIDCE(base) ((MCM_ISCR_REG(base) & MCM_ISCR_FIDCE_MASK) >> MCM_ISCR_FIDCE_SHIFT)
#define MCM_BRD_ISCR_FIDCE(base) (MCM_RD_ISCR_FIDCE(base))

/*! @brief Set the FIDCE field to a new value. */
#define MCM_WR_ISCR_FIDCE(base, value) (MCM_RMW_ISCR(base, MCM_ISCR_FIDCE_MASK, MCM_ISCR_FIDCE(value)))
#define MCM_BWR_ISCR_FIDCE(base, value) (MCM_WR_ISCR_FIDCE(base, value))
/*@}*/

/*******************************************************************************
 * MCM_FADR - Fault address register
 ******************************************************************************/

/*!
 * @brief MCM_FADR - Fault address register (RO)
 *
 * Reset value: 0x00000000U
 *
 * When a properly-enabled cache write buffer error interrupt event is detected,
 * the faulting address is captured in the MCM_FADR register. The MCM logic
 * supports capturing a single cache write buffer bus error event; if a subsequent
 * error is detected before the captured error information has been read from the
 * corresponding registers and the MCM_ISCR[CWBER] indicator cleared, the
 * MCM_FATR[BEOVR] flag is set. However, no additional information is captured. The bits
 * in this register are set by hardware and signaled by the assertion of
 * MCM_ISCR[CWBER]. Attempted writes have no effect.
 */
/*!
 * @name Constants and macros for entire MCM_FADR register
 */
/*@{*/
#define MCM_RD_FADR(base)        (MCM_FADR_REG(base))
/*@}*/

/*******************************************************************************
 * MCM_FATR - Fault attributes register
 ******************************************************************************/

/*!
 * @brief MCM_FATR - Fault attributes register (RO)
 *
 * Reset value: 0x00000000U
 *
 * When a properly-enabled cache write buffer error interrupt event is detected,
 * the faulting attributes are captured in the MCM_FATR register. The bits in
 * this register are set by hardware and signaled by the assertion of
 * MCM_ISCR[CWBER]. Attempted writes have no effect.
 */
/*!
 * @name Constants and macros for entire MCM_FATR register
 */
/*@{*/
#define MCM_RD_FATR(base)        (MCM_FATR_REG(base))
/*@}*/

/*
 * Constants & macros for individual MCM_FATR bitfields
 */

/*!
 * @name Register MCM_FATR, field BEDA[0] (RO)
 *
 * Indicates the type of cache write buffer access when the error was detected.
 * This attribute is always a logical one signaling a data reference.
 *
 * Values:
 * - 0b0 - Instruction
 * - 0b1 - Data
 */
/*@{*/
/*! @brief Read current value of the MCM_FATR_BEDA field. */
#define MCM_RD_FATR_BEDA(base) ((MCM_FATR_REG(base) & MCM_FATR_BEDA_MASK) >> MCM_FATR_BEDA_SHIFT)
#define MCM_BRD_FATR_BEDA(base) (MCM_RD_FATR_BEDA(base))
/*@}*/

/*!
 * @name Register MCM_FATR, field BEMD[1] (RO)
 *
 * Indicates the privilege level of the cache write buffer access when the error
 * was detected.
 *
 * Values:
 * - 0b0 - User mode
 * - 0b1 - Supervisor/privileged mode
 */
/*@{*/
/*! @brief Read current value of the MCM_FATR_BEMD field. */
#define MCM_RD_FATR_BEMD(base) ((MCM_FATR_REG(base) & MCM_FATR_BEMD_MASK) >> MCM_FATR_BEMD_SHIFT)
#define MCM_BRD_FATR_BEMD(base) (MCM_RD_FATR_BEMD(base))
/*@}*/

/*!
 * @name Register MCM_FATR, field BESZ[5:4] (RO)
 *
 * Indicates the size of the cache write buffer access when the error was
 * detected.
 *
 * Values:
 * - 0b00 - 8-bit access
 * - 0b01 - 16-bit access
 * - 0b10 - 32-bit access
 * - 0b11 - Reserved
 */
/*@{*/
/*! @brief Read current value of the MCM_FATR_BESZ field. */
#define MCM_RD_FATR_BESZ(base) ((MCM_FATR_REG(base) & MCM_FATR_BESZ_MASK) >> MCM_FATR_BESZ_SHIFT)
#define MCM_BRD_FATR_BESZ(base) (MCM_RD_FATR_BESZ(base))
/*@}*/

/*!
 * @name Register MCM_FATR, field BEWT[7] (RO)
 *
 * Indicates the type of system bus access when the error was detected. Since
 * this logic is monitoring data transfers from the cache write buffer, this bit is
 * always a logical one, signaling a write operation.
 *
 * Values:
 * - 0b0 - Read access
 * - 0b1 - Write access
 */
/*@{*/
/*! @brief Read current value of the MCM_FATR_BEWT field. */
#define MCM_RD_FATR_BEWT(base) ((MCM_FATR_REG(base) & MCM_FATR_BEWT_MASK) >> MCM_FATR_BEWT_SHIFT)
#define MCM_BRD_FATR_BEWT(base) (MCM_RD_FATR_BEWT(base))
/*@}*/

/*!
 * @name Register MCM_FATR, field BEMN[11:8] (RO)
 *
 * Crossbar switch bus master number of the captured cache write buffer bus
 * error. For this device, this value is always 0x1.
 */
/*@{*/
/*! @brief Read current value of the MCM_FATR_BEMN field. */
#define MCM_RD_FATR_BEMN(base) ((MCM_FATR_REG(base) & MCM_FATR_BEMN_MASK) >> MCM_FATR_BEMN_SHIFT)
#define MCM_BRD_FATR_BEMN(base) (MCM_RD_FATR_BEMN(base))
/*@}*/

/*!
 * @name Register MCM_FATR, field BEOVR[31] (RO)
 *
 * Indicates if another cache write buffer bus error is detected before system
 * software has retrieved all the error information from the original event, this
 * overrun flag is set. The window of time is defined from the detection of the
 * original cache write buffer error termination until the MCM_ISCR[CWBER] is
 * written with a 1 to clear it and rearm the capture logic. This bit is set by the
 * hardware and cleared whenever software writes a 1 to the CWBER bit.
 *
 * Values:
 * - 0b0 - No bus error overrun
 * - 0b1 - Bus error overrun occurred. The FADR and FDR registers and the other
 *     FATR bits are not updated to reflect this new bus error.
 */
/*@{*/
/*! @brief Read current value of the MCM_FATR_BEOVR field. */
#define MCM_RD_FATR_BEOVR(base) ((MCM_FATR_REG(base) & MCM_FATR_BEOVR_MASK) >> MCM_FATR_BEOVR_SHIFT)
#define MCM_BRD_FATR_BEOVR(base) (MCM_RD_FATR_BEOVR(base))
/*@}*/

/*******************************************************************************
 * MCM_FDR - Fault data register
 ******************************************************************************/

/*!
 * @brief MCM_FDR - Fault data register (RO)
 *
 * Reset value: 0x00000000U
 *
 * When a properly-enabled cache write buffer error interrupt event is detected,
 * the faulting data is captured in the MCM_FDR register. The bits in this
 * register are set by hardware and signaled by the assertion of MCM_ISCR[CWBER]. For
 * byte and halfword writes, only the accessed byte lanes contain valid data; the
 * contents of the other bytes are undefined. Attempted writes have no effect.
 */
/*!
 * @name Constants and macros for entire MCM_FDR register
 */
/*@{*/
#define MCM_RD_FDR(base)         (MCM_FDR_REG(base))
/*@}*/

/*******************************************************************************
 * MCM_PID - Process ID register
 ******************************************************************************/

/*!
 * @brief MCM_PID - Process ID register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register drives the M0_PID and M1_PID values in the Memory Protection
 * Unit(MPU). System software loads this register before passing control to a given
 * user mode process. If the PID of the process does not match the value in this
 * register, a bus error occurs. See the MPU chapter for more details.
 */
/*!
 * @name Constants and macros for entire MCM_PID register
 */
/*@{*/
#define MCM_RD_PID(base)         (MCM_PID_REG(base))
#define MCM_WR_PID(base, value)  (MCM_PID_REG(base) = (value))
#define MCM_RMW_PID(base, mask, value) (MCM_WR_PID(base, (MCM_RD_PID(base) & ~(mask)) | (value)))
#define MCM_SET_PID(base, value) (MCM_WR_PID(base, MCM_RD_PID(base) |  (value)))
#define MCM_CLR_PID(base, value) (MCM_WR_PID(base, MCM_RD_PID(base) & ~(value)))
#define MCM_TOG_PID(base, value) (MCM_WR_PID(base, MCM_RD_PID(base) ^  (value)))
/*@}*/

/*
 * Constants & macros for individual MCM_PID bitfields
 */

/*!
 * @name Register MCM_PID, field PID[7:0] (RW)
 *
 * Drives the M0_PID and M1_PID values in the MPU.
 */
/*@{*/
/*! @brief Read current value of the MCM_PID_PID field. */
#define MCM_RD_PID_PID(base) ((MCM_PID_REG(base) & MCM_PID_PID_MASK) >> MCM_PID_PID_SHIFT)
#define MCM_BRD_PID_PID(base) (MCM_RD_PID_PID(base))

/*! @brief Set the PID field to a new value. */
#define MCM_WR_PID_PID(base, value) (MCM_RMW_PID(base, MCM_PID_PID_MASK, MCM_PID_PID(value)))
#define MCM_BWR_PID_PID(base, value) (MCM_WR_PID_PID(base, value))
/*@}*/

/*******************************************************************************
 * MCM_CPO - Compute Operation Control Register
 ******************************************************************************/

/*!
 * @brief MCM_CPO - Compute Operation Control Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register controls the Compute Operation.
 */
/*!
 * @name Constants and macros for entire MCM_CPO register
 */
/*@{*/
#define MCM_RD_CPO(base)         (MCM_CPO_REG(base))
#define MCM_WR_CPO(base, value)  (MCM_CPO_REG(base) = (value))
#define MCM_RMW_CPO(base, mask, value) (MCM_WR_CPO(base, (MCM_RD_CPO(base) & ~(mask)) | (value)))
#define MCM_SET_CPO(base, value) (MCM_WR_CPO(base, MCM_RD_CPO(base) |  (value)))
#define MCM_CLR_CPO(base, value) (MCM_WR_CPO(base, MCM_RD_CPO(base) & ~(value)))
#define MCM_TOG_CPO(base, value) (MCM_WR_CPO(base, MCM_RD_CPO(base) ^  (value)))
/*@}*/

/*
 * Constants & macros for individual MCM_CPO bitfields
 */

/*!
 * @name Register MCM_CPO, field CPOREQ[0] (RW)
 *
 * This bit is auto-cleared by vector fetching if CPOWOI = 1.
 *
 * Values:
 * - 0b0 - Request is cleared.
 * - 0b1 - Request Compute Operation.
 */
/*@{*/
/*! @brief Read current value of the MCM_CPO_CPOREQ field. */
#define MCM_RD_CPO_CPOREQ(base) ((MCM_CPO_REG(base) & MCM_CPO_CPOREQ_MASK) >> MCM_CPO_CPOREQ_SHIFT)
#define MCM_BRD_CPO_CPOREQ(base) (MCM_RD_CPO_CPOREQ(base))

/*! @brief Set the CPOREQ field to a new value. */
#define MCM_WR_CPO_CPOREQ(base, value) (MCM_RMW_CPO(base, MCM_CPO_CPOREQ_MASK, MCM_CPO_CPOREQ(value)))
#define MCM_BWR_CPO_CPOREQ(base, value) (MCM_WR_CPO_CPOREQ(base, value))
/*@}*/

/*!
 * @name Register MCM_CPO, field CPOACK[1] (RO)
 *
 * Values:
 * - 0b0 - Compute operation entry has not completed or compute operation exit
 *     has completed.
 * - 0b1 - Compute operation entry has completed or compute operation exit has
 *     not completed.
 */
/*@{*/
/*! @brief Read current value of the MCM_CPO_CPOACK field. */
#define MCM_RD_CPO_CPOACK(base) ((MCM_CPO_REG(base) & MCM_CPO_CPOACK_MASK) >> MCM_CPO_CPOACK_SHIFT)
#define MCM_BRD_CPO_CPOACK(base) (MCM_RD_CPO_CPOACK(base))
/*@}*/

/*!
 * @name Register MCM_CPO, field CPOWOI[2] (RW)
 *
 * Values:
 * - 0b0 - No effect.
 * - 0b1 - When set, the CPOREQ is cleared on any interrupt or exception vector
 *     fetch.
 */
/*@{*/
/*! @brief Read current value of the MCM_CPO_CPOWOI field. */
#define MCM_RD_CPO_CPOWOI(base) ((MCM_CPO_REG(base) & MCM_CPO_CPOWOI_MASK) >> MCM_CPO_CPOWOI_SHIFT)
#define MCM_BRD_CPO_CPOWOI(base) (MCM_RD_CPO_CPOWOI(base))

/*! @brief Set the CPOWOI field to a new value. */
#define MCM_WR_CPO_CPOWOI(base, value) (MCM_RMW_CPO(base, MCM_CPO_CPOWOI_MASK, MCM_CPO_CPOWOI(value)))
#define MCM_BWR_CPO_CPOWOI(base, value) (MCM_WR_CPO_CPOWOI(base, value))
/*@}*/

/*
 * MK82F25615 MPU
 *
 * Memory protection unit
 *
 * Registers defined in this header file:
 * - MPU_CESR - Control/Error Status Register
 * - MPU_EAR - Error Address Register, slave port n
 * - MPU_EDR - Error Detail Register, slave port n
 * - MPU_WORD - Region Descriptor n, Word 0
 * - MPU_RGDAAC - Region Descriptor Alternate Access Control n
 */

#define MPU_INSTANCE_COUNT (1U) /*!< Number of instances of the MPU module. */
#define MPU_IDX (0U) /*!< Instance number for MPU. */

/*******************************************************************************
 * MPU_CESR - Control/Error Status Register
 ******************************************************************************/

/*!
 * @brief MPU_CESR - Control/Error Status Register (RW)
 *
 * Reset value: 0x00815101U
 */
/*!
 * @name Constants and macros for entire MPU_CESR register
 */
/*@{*/
#define MPU_RD_CESR(base)        (MPU_CESR_REG(base))
#define MPU_WR_CESR(base, value) (MPU_CESR_REG(base) = (value))
#define MPU_RMW_CESR(base, mask, value) (MPU_WR_CESR(base, (MPU_RD_CESR(base) & ~(mask)) | (value)))
#define MPU_SET_CESR(base, value) (BME_OR32(&MPU_CESR_REG(base), (uint32_t)(value)))
#define MPU_CLR_CESR(base, value) (BME_AND32(&MPU_CESR_REG(base), (uint32_t)(~(value))))
#define MPU_TOG_CESR(base, value) (BME_XOR32(&MPU_CESR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual MPU_CESR bitfields
 */

/*!
 * @name Register MPU_CESR, field VLD[0] (RW)
 *
 * Global enable/disable for the MPU.
 *
 * Values:
 * - 0b0 - MPU is disabled. All accesses from all bus masters are allowed.
 * - 0b1 - MPU is enabled
 */
/*@{*/
/*! @brief Read current value of the MPU_CESR_VLD field. */
#define MPU_RD_CESR_VLD(base) ((MPU_CESR_REG(base) & MPU_CESR_VLD_MASK) >> MPU_CESR_VLD_SHIFT)
#define MPU_BRD_CESR_VLD(base) (BME_UBFX32(&MPU_CESR_REG(base), MPU_CESR_VLD_SHIFT, MPU_CESR_VLD_WIDTH))

/*! @brief Set the VLD field to a new value. */
#define MPU_WR_CESR_VLD(base, value) (MPU_RMW_CESR(base, (MPU_CESR_VLD_MASK | MPU_CESR_SPERR_MASK), MPU_CESR_VLD(value)))
#define MPU_BWR_CESR_VLD(base, value) (BME_BFI32(&MPU_CESR_REG(base), ((uint32_t)(value) << MPU_CESR_VLD_SHIFT), MPU_CESR_VLD_SHIFT, MPU_CESR_VLD_WIDTH))
/*@}*/

/*!
 * @name Register MPU_CESR, field NRGD[11:8] (RO)
 *
 * Indicates the number of region descriptors implemented in the MPU.
 *
 * Values:
 * - 0b0000 - 8 region descriptors
 * - 0b0001 - 12 region descriptors
 * - 0b0010 - 16 region descriptors
 */
/*@{*/
/*! @brief Read current value of the MPU_CESR_NRGD field. */
#define MPU_RD_CESR_NRGD(base) ((MPU_CESR_REG(base) & MPU_CESR_NRGD_MASK) >> MPU_CESR_NRGD_SHIFT)
#define MPU_BRD_CESR_NRGD(base) (BME_UBFX32(&MPU_CESR_REG(base), MPU_CESR_NRGD_SHIFT, MPU_CESR_NRGD_WIDTH))
/*@}*/

/*!
 * @name Register MPU_CESR, field NSP[15:12] (RO)
 *
 * Specifies the number of slave ports connected to the MPU.
 */
/*@{*/
/*! @brief Read current value of the MPU_CESR_NSP field. */
#define MPU_RD_CESR_NSP(base) ((MPU_CESR_REG(base) & MPU_CESR_NSP_MASK) >> MPU_CESR_NSP_SHIFT)
#define MPU_BRD_CESR_NSP(base) (BME_UBFX32(&MPU_CESR_REG(base), MPU_CESR_NSP_SHIFT, MPU_CESR_NSP_WIDTH))
/*@}*/

/*!
 * @name Register MPU_CESR, field HRL[19:16] (RO)
 *
 * Specifies the MPU's hardware and definition revision level. It can be read by
 * software to determine the functional definition of the module.
 */
/*@{*/
/*! @brief Read current value of the MPU_CESR_HRL field. */
#define MPU_RD_CESR_HRL(base) ((MPU_CESR_REG(base) & MPU_CESR_HRL_MASK) >> MPU_CESR_HRL_SHIFT)
#define MPU_BRD_CESR_HRL(base) (BME_UBFX32(&MPU_CESR_REG(base), MPU_CESR_HRL_SHIFT, MPU_CESR_HRL_WIDTH))
/*@}*/

/*!
 * @name Register MPU_CESR, field SPERR[31:27] (W1C)
 *
 * Indicates a captured error in EARn and EDRn. This bit is set when the
 * hardware detects an error and records the faulting address and attributes. It is
 * cleared by writing one to it. If another error is captured at the exact same cycle
 * as the write, the flag remains set. A find-first-one instruction or
 * equivalent can detect the presence of a captured error. The following shows the
 * correspondence between the bit number and slave port number: Bit 31 corresponds to
 * slave port 0. Bit 30 corresponds to slave port 1. Bit 29 corresponds to slave
 * port 2. Bit 28 corresponds to slave port 3. Bit 27 corresponds to slave port 4.
 *
 * Values:
 * - 0b00000 - No error has occurred for slave port n.
 * - 0b00001 - An error has occurred for slave port n.
 */
/*@{*/
/*! @brief Read current value of the MPU_CESR_SPERR field. */
#define MPU_RD_CESR_SPERR(base) ((MPU_CESR_REG(base) & MPU_CESR_SPERR_MASK) >> MPU_CESR_SPERR_SHIFT)
#define MPU_BRD_CESR_SPERR(base) (BME_UBFX32(&MPU_CESR_REG(base), MPU_CESR_SPERR_SHIFT, MPU_CESR_SPERR_WIDTH))

/*! @brief Set the SPERR field to a new value. */
#define MPU_WR_CESR_SPERR(base, value) (MPU_RMW_CESR(base, MPU_CESR_SPERR_MASK, MPU_CESR_SPERR(value)))
#define MPU_BWR_CESR_SPERR(base, value) (BME_BFI32(&MPU_CESR_REG(base), ((uint32_t)(value) << MPU_CESR_SPERR_SHIFT), MPU_CESR_SPERR_SHIFT, MPU_CESR_SPERR_WIDTH))
/*@}*/

/*******************************************************************************
 * MPU_EAR - Error Address Register, slave port n
 ******************************************************************************/

/*!
 * @brief MPU_EAR - Error Address Register, slave port n (RO)
 *
 * Reset value: 0x00000000U
 *
 * When the MPU detects an access error on slave port n, the 32-bit reference
 * address is captured in this read-only register and the corresponding bit in
 * CESR[SPERR] set. Additional information about the faulting access is captured in
 * the corresponding EDRn at the same time. This register and the corresponding
 * EDRn contain the most recent access error; there are no hardware interlocks with
 * CESR[SPERR], as the error registers are always loaded upon the occurrence of
 * each protection violation.
 */
/*!
 * @name Constants and macros for entire MPU_EAR register
 */
/*@{*/
#define MPU_RD_EAR(base, index)  (MPU_EAR_REG(base, index))
/*@}*/

/*******************************************************************************
 * MPU_EDR - Error Detail Register, slave port n
 ******************************************************************************/

/*!
 * @brief MPU_EDR - Error Detail Register, slave port n (RO)
 *
 * Reset value: 0x00000000U
 *
 * When the MPU detects an access error on slave port n, 32 bits of error detail
 * are captured in this read-only register and the corresponding bit in
 * CESR[SPERR] is set. Information on the faulting address is captured in the
 * corresponding EARn register at the same time. This register and the corresponding EARn
 * register contain the most recent access error; there are no hardware interlocks
 * with CESR[SPERR] as the error registers are always loaded upon the occurrence
 * of each protection violation.
 */
/*!
 * @name Constants and macros for entire MPU_EDR register
 */
/*@{*/
#define MPU_RD_EDR(base, index)  (MPU_EDR_REG(base, index))
/*@}*/

/*
 * Constants & macros for individual MPU_EDR bitfields
 */

/*!
 * @name Register MPU_EDR, field ERW[0] (RO)
 *
 * Indicates the access type of the faulting reference.
 *
 * Values:
 * - 0b0 - Read
 * - 0b1 - Write
 */
/*@{*/
/*! @brief Read current value of the MPU_EDR_ERW field. */
#define MPU_RD_EDR_ERW(base, index) ((MPU_EDR_REG(base, index) & MPU_EDR_ERW_MASK) >> MPU_EDR_ERW_SHIFT)
#define MPU_BRD_EDR_ERW(base, index) (BME_UBFX32(&MPU_EDR_REG(base, index), MPU_EDR_ERW_SHIFT, MPU_EDR_ERW_WIDTH))
/*@}*/

/*!
 * @name Register MPU_EDR, field EATTR[3:1] (RO)
 *
 * Indicates attribute information about the faulting reference. All other
 * encodings are reserved.
 *
 * Values:
 * - 0b000 - User mode, instruction access
 * - 0b001 - User mode, data access
 * - 0b010 - Supervisor mode, instruction access
 * - 0b011 - Supervisor mode, data access
 */
/*@{*/
/*! @brief Read current value of the MPU_EDR_EATTR field. */
#define MPU_RD_EDR_EATTR(base, index) ((MPU_EDR_REG(base, index) & MPU_EDR_EATTR_MASK) >> MPU_EDR_EATTR_SHIFT)
#define MPU_BRD_EDR_EATTR(base, index) (BME_UBFX32(&MPU_EDR_REG(base, index), MPU_EDR_EATTR_SHIFT, MPU_EDR_EATTR_WIDTH))
/*@}*/

/*!
 * @name Register MPU_EDR, field EMN[7:4] (RO)
 *
 * Indicates the bus master that generated the access error.
 */
/*@{*/
/*! @brief Read current value of the MPU_EDR_EMN field. */
#define MPU_RD_EDR_EMN(base, index) ((MPU_EDR_REG(base, index) & MPU_EDR_EMN_MASK) >> MPU_EDR_EMN_SHIFT)
#define MPU_BRD_EDR_EMN(base, index) (BME_UBFX32(&MPU_EDR_REG(base, index), MPU_EDR_EMN_SHIFT, MPU_EDR_EMN_WIDTH))
/*@}*/

/*!
 * @name Register MPU_EDR, field EPID[15:8] (RO)
 *
 * Records the process identifier of the faulting reference. The process
 * identifier is typically driven only by processor cores; for other bus masters, this
 * field is cleared.
 */
/*@{*/
/*! @brief Read current value of the MPU_EDR_EPID field. */
#define MPU_RD_EDR_EPID(base, index) ((MPU_EDR_REG(base, index) & MPU_EDR_EPID_MASK) >> MPU_EDR_EPID_SHIFT)
#define MPU_BRD_EDR_EPID(base, index) (BME_UBFX32(&MPU_EDR_REG(base, index), MPU_EDR_EPID_SHIFT, MPU_EDR_EPID_WIDTH))
/*@}*/

/*!
 * @name Register MPU_EDR, field EACD[31:16] (RO)
 *
 * Indicates the region descriptor with the access error. If EDRn contains a
 * captured error and EACD is cleared, an access did not hit in any region
 * descriptor. If only a single EACD bit is set, the protection error was caused by a
 * single non-overlapping region descriptor. If two or more EACD bits are set, the
 * protection error was caused by an overlapping set of region descriptors.
 */
/*@{*/
/*! @brief Read current value of the MPU_EDR_EACD field. */
#define MPU_RD_EDR_EACD(base, index) ((MPU_EDR_REG(base, index) & MPU_EDR_EACD_MASK) >> MPU_EDR_EACD_SHIFT)
#define MPU_BRD_EDR_EACD(base, index) (MPU_RD_EDR_EACD(base, index))
/*@}*/

/*******************************************************************************
 * MPU_WORD - Region Descriptor n, Word 0
 ******************************************************************************/

/*!
 * @brief MPU_WORD - Region Descriptor n, Word 0 (RW)
 *
 * Reset value: 0x00000000U
 *
 * The first word of the region descriptor defines the 0-modulo-32 byte start
 * address of the memory region. Writes to this register clear the region
 * descriptor's valid bit (RGDn_WORD3[VLD]).
 */
/*!
 * @name Constants and macros for entire MPU_WORD register
 */
/*@{*/
#define MPU_RD_WORD(base, index, index2) (MPU_WORD_REG(base, index, index2))
#define MPU_WR_WORD(base, index, index2, value) (MPU_WORD_REG(base, index, index2) = (value))
#define MPU_RMW_WORD(base, index, index2, mask, value) (MPU_WR_WORD(base, index, index2, (MPU_RD_WORD(base, index, index2) & ~(mask)) | (value)))
#define MPU_SET_WORD(base, index, index2, value) (BME_OR32(&MPU_WORD_REG(base, index, index2), (uint32_t)(value)))
#define MPU_CLR_WORD(base, index, index2, value) (BME_AND32(&MPU_WORD_REG(base, index, index2), (uint32_t)(~(value))))
#define MPU_TOG_WORD(base, index, index2, value) (BME_XOR32(&MPU_WORD_REG(base, index, index2), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual MPU_WORD bitfields
 */

/*!
 * @name Register MPU_WORD, field VLD[0] (RW)
 *
 * Signals the region descriptor is valid. Any write to RGDn_WORD0-2 clears this
 * bit.
 *
 * Values:
 * - 0b0 - Region descriptor is invalid
 * - 0b1 - Region descriptor is valid
 */
/*@{*/
/*! @brief Read current value of the MPU_WORD_VLD field. */
#define MPU_RD_WORD_VLD(base, index, index2) ((MPU_WORD_REG(base, index, index2) & MPU_WORD_VLD_MASK) >> MPU_WORD_VLD_SHIFT)
#define MPU_BRD_WORD_VLD(base, index, index2) (BME_UBFX32(&MPU_WORD_REG(base, index, index2), MPU_WORD_VLD_SHIFT, MPU_WORD_VLD_WIDTH))

/*! @brief Set the VLD field to a new value. */
#define MPU_WR_WORD_VLD(base, index, index2, value) (MPU_RMW_WORD(base, index, index2, MPU_WORD_VLD_MASK, MPU_WORD_VLD(value)))
#define MPU_BWR_WORD_VLD(base, index, index2, value) (BME_BFI32(&MPU_WORD_REG(base, index, index2), ((uint32_t)(value) << MPU_WORD_VLD_SHIFT), MPU_WORD_VLD_SHIFT, MPU_WORD_VLD_WIDTH))
/*@}*/

/*!
 * @name Register MPU_WORD, field M0UM[2:0] (RW)
 *
 * See M3UM description.
 */
/*@{*/
/*! @brief Read current value of the MPU_WORD_M0UM field. */
#define MPU_RD_WORD_M0UM(base, index, index2) ((MPU_WORD_REG(base, index, index2) & MPU_WORD_M0UM_MASK) >> MPU_WORD_M0UM_SHIFT)
#define MPU_BRD_WORD_M0UM(base, index, index2) (BME_UBFX32(&MPU_WORD_REG(base, index, index2), MPU_WORD_M0UM_SHIFT, MPU_WORD_M0UM_WIDTH))

/*! @brief Set the M0UM field to a new value. */
#define MPU_WR_WORD_M0UM(base, index, index2, value) (MPU_RMW_WORD(base, index, index2, MPU_WORD_M0UM_MASK, MPU_WORD_M0UM(value)))
#define MPU_BWR_WORD_M0UM(base, index, index2, value) (BME_BFI32(&MPU_WORD_REG(base, index, index2), ((uint32_t)(value) << MPU_WORD_M0UM_SHIFT), MPU_WORD_M0UM_SHIFT, MPU_WORD_M0UM_WIDTH))
/*@}*/

/*!
 * @name Register MPU_WORD, field M0SM[4:3] (RW)
 *
 * See M3SM description.
 */
/*@{*/
/*! @brief Read current value of the MPU_WORD_M0SM field. */
#define MPU_RD_WORD_M0SM(base, index, index2) ((MPU_WORD_REG(base, index, index2) & MPU_WORD_M0SM_MASK) >> MPU_WORD_M0SM_SHIFT)
#define MPU_BRD_WORD_M0SM(base, index, index2) (BME_UBFX32(&MPU_WORD_REG(base, index, index2), MPU_WORD_M0SM_SHIFT, MPU_WORD_M0SM_WIDTH))

/*! @brief Set the M0SM field to a new value. */
#define MPU_WR_WORD_M0SM(base, index, index2, value) (MPU_RMW_WORD(base, index, index2, MPU_WORD_M0SM_MASK, MPU_WORD_M0SM(value)))
#define MPU_BWR_WORD_M0SM(base, index, index2, value) (BME_BFI32(&MPU_WORD_REG(base, index, index2), ((uint32_t)(value) << MPU_WORD_M0SM_SHIFT), MPU_WORD_M0SM_SHIFT, MPU_WORD_M0SM_WIDTH))
/*@}*/

/*!
 * @name Register MPU_WORD, field M0PE[5] (RW)
 *
 * See M0PE description.
 */
/*@{*/
/*! @brief Read current value of the MPU_WORD_M0PE field. */
#define MPU_RD_WORD_M0PE(base, index, index2) ((MPU_WORD_REG(base, index, index2) & MPU_WORD_M0PE_MASK) >> MPU_WORD_M0PE_SHIFT)
#define MPU_BRD_WORD_M0PE(base, index, index2) (BME_UBFX32(&MPU_WORD_REG(base, index, index2), MPU_WORD_M0PE_SHIFT, MPU_WORD_M0PE_WIDTH))

/*! @brief Set the M0PE field to a new value. */
#define MPU_WR_WORD_M0PE(base, index, index2, value) (MPU_RMW_WORD(base, index, index2, MPU_WORD_M0PE_MASK, MPU_WORD_M0PE(value)))
#define MPU_BWR_WORD_M0PE(base, index, index2, value) (BME_BFI32(&MPU_WORD_REG(base, index, index2), ((uint32_t)(value) << MPU_WORD_M0PE_SHIFT), MPU_WORD_M0PE_SHIFT, MPU_WORD_M0PE_WIDTH))
/*@}*/

/*!
 * @name Register MPU_WORD, field ENDADDR[31:5] (RW)
 *
 * Defines the most significant bits of the 31-modulo-32 byte end address of the
 * memory region. The MPU does not verify that ENDADDR >= SRTADDR.
 */
/*@{*/
/*! @brief Read current value of the MPU_WORD_ENDADDR field. */
#define MPU_RD_WORD_ENDADDR(base, index, index2) ((MPU_WORD_REG(base, index, index2) & MPU_WORD_ENDADDR_MASK) >> MPU_WORD_ENDADDR_SHIFT)
#define MPU_BRD_WORD_ENDADDR(base, index, index2) (MPU_RD_WORD_ENDADDR(base, index, index2))

/*! @brief Set the ENDADDR field to a new value. */
#define MPU_WR_WORD_ENDADDR(base, index, index2, value) (MPU_RMW_WORD(base, index, index2, MPU_WORD_ENDADDR_MASK, MPU_WORD_ENDADDR(value)))
#define MPU_BWR_WORD_ENDADDR(base, index, index2, value) (MPU_WR_WORD_ENDADDR(base, index, index2, value))
/*@}*/

/*!
 * @name Register MPU_WORD, field SRTADDR[31:5] (RW)
 *
 * Defines the most significant bits of the 0-modulo-32 byte start address of
 * the memory region.
 */
/*@{*/
/*! @brief Read current value of the MPU_WORD_SRTADDR field. */
#define MPU_RD_WORD_SRTADDR(base, index, index2) ((MPU_WORD_REG(base, index, index2) & MPU_WORD_SRTADDR_MASK) >> MPU_WORD_SRTADDR_SHIFT)
#define MPU_BRD_WORD_SRTADDR(base, index, index2) (MPU_RD_WORD_SRTADDR(base, index, index2))

/*! @brief Set the SRTADDR field to a new value. */
#define MPU_WR_WORD_SRTADDR(base, index, index2, value) (MPU_RMW_WORD(base, index, index2, MPU_WORD_SRTADDR_MASK, MPU_WORD_SRTADDR(value)))
#define MPU_BWR_WORD_SRTADDR(base, index, index2, value) (MPU_WR_WORD_SRTADDR(base, index, index2, value))
/*@}*/

/*!
 * @name Register MPU_WORD, field M1UM[8:6] (RW)
 *
 * See M3UM description.
 */
/*@{*/
/*! @brief Read current value of the MPU_WORD_M1UM field. */
#define MPU_RD_WORD_M1UM(base, index, index2) ((MPU_WORD_REG(base, index, index2) & MPU_WORD_M1UM_MASK) >> MPU_WORD_M1UM_SHIFT)
#define MPU_BRD_WORD_M1UM(base, index, index2) (BME_UBFX32(&MPU_WORD_REG(base, index, index2), MPU_WORD_M1UM_SHIFT, MPU_WORD_M1UM_WIDTH))

/*! @brief Set the M1UM field to a new value. */
#define MPU_WR_WORD_M1UM(base, index, index2, value) (MPU_RMW_WORD(base, index, index2, MPU_WORD_M1UM_MASK, MPU_WORD_M1UM(value)))
#define MPU_BWR_WORD_M1UM(base, index, index2, value) (BME_BFI32(&MPU_WORD_REG(base, index, index2), ((uint32_t)(value) << MPU_WORD_M1UM_SHIFT), MPU_WORD_M1UM_SHIFT, MPU_WORD_M1UM_WIDTH))
/*@}*/

/*!
 * @name Register MPU_WORD, field M1SM[10:9] (RW)
 *
 * See M3SM description.
 */
/*@{*/
/*! @brief Read current value of the MPU_WORD_M1SM field. */
#define MPU_RD_WORD_M1SM(base, index, index2) ((MPU_WORD_REG(base, index, index2) & MPU_WORD_M1SM_MASK) >> MPU_WORD_M1SM_SHIFT)
#define MPU_BRD_WORD_M1SM(base, index, index2) (BME_UBFX32(&MPU_WORD_REG(base, index, index2), MPU_WORD_M1SM_SHIFT, MPU_WORD_M1SM_WIDTH))

/*! @brief Set the M1SM field to a new value. */
#define MPU_WR_WORD_M1SM(base, index, index2, value) (MPU_RMW_WORD(base, index, index2, MPU_WORD_M1SM_MASK, MPU_WORD_M1SM(value)))
#define MPU_BWR_WORD_M1SM(base, index, index2, value) (BME_BFI32(&MPU_WORD_REG(base, index, index2), ((uint32_t)(value) << MPU_WORD_M1SM_SHIFT), MPU_WORD_M1SM_SHIFT, MPU_WORD_M1SM_WIDTH))
/*@}*/

/*!
 * @name Register MPU_WORD, field M1PE[11] (RW)
 *
 * See M3PE description.
 */
/*@{*/
/*! @brief Read current value of the MPU_WORD_M1PE field. */
#define MPU_RD_WORD_M1PE(base, index, index2) ((MPU_WORD_REG(base, index, index2) & MPU_WORD_M1PE_MASK) >> MPU_WORD_M1PE_SHIFT)
#define MPU_BRD_WORD_M1PE(base, index, index2) (BME_UBFX32(&MPU_WORD_REG(base, index, index2), MPU_WORD_M1PE_SHIFT, MPU_WORD_M1PE_WIDTH))

/*! @brief Set the M1PE field to a new value. */
#define MPU_WR_WORD_M1PE(base, index, index2, value) (MPU_RMW_WORD(base, index, index2, MPU_WORD_M1PE_MASK, MPU_WORD_M1PE(value)))
#define MPU_BWR_WORD_M1PE(base, index, index2, value) (BME_BFI32(&MPU_WORD_REG(base, index, index2), ((uint32_t)(value) << MPU_WORD_M1PE_SHIFT), MPU_WORD_M1PE_SHIFT, MPU_WORD_M1PE_WIDTH))
/*@}*/

/*!
 * @name Register MPU_WORD, field M2UM[14:12] (RW)
 *
 * See M3UM description.
 */
/*@{*/
/*! @brief Read current value of the MPU_WORD_M2UM field. */
#define MPU_RD_WORD_M2UM(base, index, index2) ((MPU_WORD_REG(base, index, index2) & MPU_WORD_M2UM_MASK) >> MPU_WORD_M2UM_SHIFT)
#define MPU_BRD_WORD_M2UM(base, index, index2) (BME_UBFX32(&MPU_WORD_REG(base, index, index2), MPU_WORD_M2UM_SHIFT, MPU_WORD_M2UM_WIDTH))

/*! @brief Set the M2UM field to a new value. */
#define MPU_WR_WORD_M2UM(base, index, index2, value) (MPU_RMW_WORD(base, index, index2, MPU_WORD_M2UM_MASK, MPU_WORD_M2UM(value)))
#define MPU_BWR_WORD_M2UM(base, index, index2, value) (BME_BFI32(&MPU_WORD_REG(base, index, index2), ((uint32_t)(value) << MPU_WORD_M2UM_SHIFT), MPU_WORD_M2UM_SHIFT, MPU_WORD_M2UM_WIDTH))
/*@}*/

/*!
 * @name Register MPU_WORD, field M2SM[16:15] (RW)
 *
 * See M3SM description.
 */
/*@{*/
/*! @brief Read current value of the MPU_WORD_M2SM field. */
#define MPU_RD_WORD_M2SM(base, index, index2) ((MPU_WORD_REG(base, index, index2) & MPU_WORD_M2SM_MASK) >> MPU_WORD_M2SM_SHIFT)
#define MPU_BRD_WORD_M2SM(base, index, index2) (BME_UBFX32(&MPU_WORD_REG(base, index, index2), MPU_WORD_M2SM_SHIFT, MPU_WORD_M2SM_WIDTH))

/*! @brief Set the M2SM field to a new value. */
#define MPU_WR_WORD_M2SM(base, index, index2, value) (MPU_RMW_WORD(base, index, index2, MPU_WORD_M2SM_MASK, MPU_WORD_M2SM(value)))
#define MPU_BWR_WORD_M2SM(base, index, index2, value) (BME_BFI32(&MPU_WORD_REG(base, index, index2), ((uint32_t)(value) << MPU_WORD_M2SM_SHIFT), MPU_WORD_M2SM_SHIFT, MPU_WORD_M2SM_WIDTH))
/*@}*/

/*!
 * @name Register MPU_WORD, field PIDMASK[23:16] (RW)
 *
 * Provides a masking capability so that multiple process identifiers can be
 * included as part of the region hit determination. If a bit in PIDMASK is set,
 * then the corresponding PID bit is ignored in the comparison. This field and PID
 * are included in the region hit determination if RGDn_WORD2[MxPE] is set. For
 * more information on the handling of the PID and PIDMASK, see "Access Evaluation
 * - Hit Determination."
 */
/*@{*/
/*! @brief Read current value of the MPU_WORD_PIDMASK field. */
#define MPU_RD_WORD_PIDMASK(base, index, index2) ((MPU_WORD_REG(base, index, index2) & MPU_WORD_PIDMASK_MASK) >> MPU_WORD_PIDMASK_SHIFT)
#define MPU_BRD_WORD_PIDMASK(base, index, index2) (BME_UBFX32(&MPU_WORD_REG(base, index, index2), MPU_WORD_PIDMASK_SHIFT, MPU_WORD_PIDMASK_WIDTH))

/*! @brief Set the PIDMASK field to a new value. */
#define MPU_WR_WORD_PIDMASK(base, index, index2, value) (MPU_RMW_WORD(base, index, index2, MPU_WORD_PIDMASK_MASK, MPU_WORD_PIDMASK(value)))
#define MPU_BWR_WORD_PIDMASK(base, index, index2, value) (BME_BFI32(&MPU_WORD_REG(base, index, index2), ((uint32_t)(value) << MPU_WORD_PIDMASK_SHIFT), MPU_WORD_PIDMASK_SHIFT, MPU_WORD_PIDMASK_WIDTH))
/*@}*/

/*!
 * @name Register MPU_WORD, field M2PE[17] (RW)
 *
 * See M3PE description.
 */
/*@{*/
/*! @brief Read current value of the MPU_WORD_M2PE field. */
#define MPU_RD_WORD_M2PE(base, index, index2) ((MPU_WORD_REG(base, index, index2) & MPU_WORD_M2PE_MASK) >> MPU_WORD_M2PE_SHIFT)
#define MPU_BRD_WORD_M2PE(base, index, index2) (BME_UBFX32(&MPU_WORD_REG(base, index, index2), MPU_WORD_M2PE_SHIFT, MPU_WORD_M2PE_WIDTH))

/*! @brief Set the M2PE field to a new value. */
#define MPU_WR_WORD_M2PE(base, index, index2, value) (MPU_RMW_WORD(base, index, index2, MPU_WORD_M2PE_MASK, MPU_WORD_M2PE(value)))
#define MPU_BWR_WORD_M2PE(base, index, index2, value) (BME_BFI32(&MPU_WORD_REG(base, index, index2), ((uint32_t)(value) << MPU_WORD_M2PE_SHIFT), MPU_WORD_M2PE_SHIFT, MPU_WORD_M2PE_WIDTH))
/*@}*/

/*!
 * @name Register MPU_WORD, field M3UM[20:18] (RW)
 *
 * Defines the access controls for bus master 3 in User mode. M3UM consists of
 * three independent bits, enabling read (r), write (w), and execute (x)
 * permissions.
 *
 * Values:
 * - 0b000 - An attempted access of that mode may be terminated with an access
 *     error (if not allowed by another descriptor) and the access not performed.
 * - 0b001 - Allows the given access type to occur
 */
/*@{*/
/*! @brief Read current value of the MPU_WORD_M3UM field. */
#define MPU_RD_WORD_M3UM(base, index, index2) ((MPU_WORD_REG(base, index, index2) & MPU_WORD_M3UM_MASK) >> MPU_WORD_M3UM_SHIFT)
#define MPU_BRD_WORD_M3UM(base, index, index2) (BME_UBFX32(&MPU_WORD_REG(base, index, index2), MPU_WORD_M3UM_SHIFT, MPU_WORD_M3UM_WIDTH))

/*! @brief Set the M3UM field to a new value. */
#define MPU_WR_WORD_M3UM(base, index, index2, value) (MPU_RMW_WORD(base, index, index2, MPU_WORD_M3UM_MASK, MPU_WORD_M3UM(value)))
#define MPU_BWR_WORD_M3UM(base, index, index2, value) (BME_BFI32(&MPU_WORD_REG(base, index, index2), ((uint32_t)(value) << MPU_WORD_M3UM_SHIFT), MPU_WORD_M3UM_SHIFT, MPU_WORD_M3UM_WIDTH))
/*@}*/

/*!
 * @name Register MPU_WORD, field M3SM[22:21] (RW)
 *
 * Defines the access controls for bus master 3 in Supervisor mode.
 *
 * Values:
 * - 0b00 - r/w/x; read, write and execute allowed
 * - 0b01 - r/x; read and execute allowed, but no write
 * - 0b10 - r/w; read and write allowed, but no execute
 * - 0b11 - Same as User mode defined in M3UM
 */
/*@{*/
/*! @brief Read current value of the MPU_WORD_M3SM field. */
#define MPU_RD_WORD_M3SM(base, index, index2) ((MPU_WORD_REG(base, index, index2) & MPU_WORD_M3SM_MASK) >> MPU_WORD_M3SM_SHIFT)
#define MPU_BRD_WORD_M3SM(base, index, index2) (BME_UBFX32(&MPU_WORD_REG(base, index, index2), MPU_WORD_M3SM_SHIFT, MPU_WORD_M3SM_WIDTH))

/*! @brief Set the M3SM field to a new value. */
#define MPU_WR_WORD_M3SM(base, index, index2, value) (MPU_RMW_WORD(base, index, index2, MPU_WORD_M3SM_MASK, MPU_WORD_M3SM(value)))
#define MPU_BWR_WORD_M3SM(base, index, index2, value) (BME_BFI32(&MPU_WORD_REG(base, index, index2), ((uint32_t)(value) << MPU_WORD_M3SM_SHIFT), MPU_WORD_M3SM_SHIFT, MPU_WORD_M3SM_WIDTH))
/*@}*/

/*!
 * @name Register MPU_WORD, field M3PE[23] (RW)
 *
 * Values:
 * - 0b0 - Do not include the process identifier in the evaluation
 * - 0b1 - Include the process identifier and mask (RGDn_WORD3) in the region
 *     hit evaluation
 */
/*@{*/
/*! @brief Read current value of the MPU_WORD_M3PE field. */
#define MPU_RD_WORD_M3PE(base, index, index2) ((MPU_WORD_REG(base, index, index2) & MPU_WORD_M3PE_MASK) >> MPU_WORD_M3PE_SHIFT)
#define MPU_BRD_WORD_M3PE(base, index, index2) (BME_UBFX32(&MPU_WORD_REG(base, index, index2), MPU_WORD_M3PE_SHIFT, MPU_WORD_M3PE_WIDTH))

/*! @brief Set the M3PE field to a new value. */
#define MPU_WR_WORD_M3PE(base, index, index2, value) (MPU_RMW_WORD(base, index, index2, MPU_WORD_M3PE_MASK, MPU_WORD_M3PE(value)))
#define MPU_BWR_WORD_M3PE(base, index, index2, value) (BME_BFI32(&MPU_WORD_REG(base, index, index2), ((uint32_t)(value) << MPU_WORD_M3PE_SHIFT), MPU_WORD_M3PE_SHIFT, MPU_WORD_M3PE_WIDTH))
/*@}*/

/*!
 * @name Register MPU_WORD, field PID[31:24] (RW)
 *
 * Specifies the process identifier that is included in the region hit
 * determination if RGDn_WORD2[MxPE] is set. PIDMASK can mask individual bits in this
 * field.
 */
/*@{*/
/*! @brief Read current value of the MPU_WORD_PID field. */
#define MPU_RD_WORD_PID(base, index, index2) ((MPU_WORD_REG(base, index, index2) & MPU_WORD_PID_MASK) >> MPU_WORD_PID_SHIFT)
#define MPU_BRD_WORD_PID(base, index, index2) (BME_UBFX32(&MPU_WORD_REG(base, index, index2), MPU_WORD_PID_SHIFT, MPU_WORD_PID_WIDTH))

/*! @brief Set the PID field to a new value. */
#define MPU_WR_WORD_PID(base, index, index2, value) (MPU_RMW_WORD(base, index, index2, MPU_WORD_PID_MASK, MPU_WORD_PID(value)))
#define MPU_BWR_WORD_PID(base, index, index2, value) (BME_BFI32(&MPU_WORD_REG(base, index, index2), ((uint32_t)(value) << MPU_WORD_PID_SHIFT), MPU_WORD_PID_SHIFT, MPU_WORD_PID_WIDTH))
/*@}*/

/*!
 * @name Register MPU_WORD, field M4WE[24] (RW)
 *
 * Values:
 * - 0b0 - Bus master 4 writes terminate with an access error and the write is
 *     not performed
 * - 0b1 - Bus master 4 writes allowed
 */
/*@{*/
/*! @brief Read current value of the MPU_WORD_M4WE field. */
#define MPU_RD_WORD_M4WE(base, index, index2) ((MPU_WORD_REG(base, index, index2) & MPU_WORD_M4WE_MASK) >> MPU_WORD_M4WE_SHIFT)
#define MPU_BRD_WORD_M4WE(base, index, index2) (BME_UBFX32(&MPU_WORD_REG(base, index, index2), MPU_WORD_M4WE_SHIFT, MPU_WORD_M4WE_WIDTH))

/*! @brief Set the M4WE field to a new value. */
#define MPU_WR_WORD_M4WE(base, index, index2, value) (MPU_RMW_WORD(base, index, index2, MPU_WORD_M4WE_MASK, MPU_WORD_M4WE(value)))
#define MPU_BWR_WORD_M4WE(base, index, index2, value) (BME_BFI32(&MPU_WORD_REG(base, index, index2), ((uint32_t)(value) << MPU_WORD_M4WE_SHIFT), MPU_WORD_M4WE_SHIFT, MPU_WORD_M4WE_WIDTH))
/*@}*/

/*!
 * @name Register MPU_WORD, field M4RE[25] (RW)
 *
 * Values:
 * - 0b0 - Bus master 4 reads terminate with an access error and the read is not
 *     performed
 * - 0b1 - Bus master 4 reads allowed
 */
/*@{*/
/*! @brief Read current value of the MPU_WORD_M4RE field. */
#define MPU_RD_WORD_M4RE(base, index, index2) ((MPU_WORD_REG(base, index, index2) & MPU_WORD_M4RE_MASK) >> MPU_WORD_M4RE_SHIFT)
#define MPU_BRD_WORD_M4RE(base, index, index2) (BME_UBFX32(&MPU_WORD_REG(base, index, index2), MPU_WORD_M4RE_SHIFT, MPU_WORD_M4RE_WIDTH))

/*! @brief Set the M4RE field to a new value. */
#define MPU_WR_WORD_M4RE(base, index, index2, value) (MPU_RMW_WORD(base, index, index2, MPU_WORD_M4RE_MASK, MPU_WORD_M4RE(value)))
#define MPU_BWR_WORD_M4RE(base, index, index2, value) (BME_BFI32(&MPU_WORD_REG(base, index, index2), ((uint32_t)(value) << MPU_WORD_M4RE_SHIFT), MPU_WORD_M4RE_SHIFT, MPU_WORD_M4RE_WIDTH))
/*@}*/

/*!
 * @name Register MPU_WORD, field M5WE[26] (RW)
 *
 * Values:
 * - 0b0 - Bus master 5 writes terminate with an access error and the write is
 *     not performed
 * - 0b1 - Bus master 5 writes allowed
 */
/*@{*/
/*! @brief Read current value of the MPU_WORD_M5WE field. */
#define MPU_RD_WORD_M5WE(base, index, index2) ((MPU_WORD_REG(base, index, index2) & MPU_WORD_M5WE_MASK) >> MPU_WORD_M5WE_SHIFT)
#define MPU_BRD_WORD_M5WE(base, index, index2) (BME_UBFX32(&MPU_WORD_REG(base, index, index2), MPU_WORD_M5WE_SHIFT, MPU_WORD_M5WE_WIDTH))

/*! @brief Set the M5WE field to a new value. */
#define MPU_WR_WORD_M5WE(base, index, index2, value) (MPU_RMW_WORD(base, index, index2, MPU_WORD_M5WE_MASK, MPU_WORD_M5WE(value)))
#define MPU_BWR_WORD_M5WE(base, index, index2, value) (BME_BFI32(&MPU_WORD_REG(base, index, index2), ((uint32_t)(value) << MPU_WORD_M5WE_SHIFT), MPU_WORD_M5WE_SHIFT, MPU_WORD_M5WE_WIDTH))
/*@}*/

/*!
 * @name Register MPU_WORD, field M5RE[27] (RW)
 *
 * Values:
 * - 0b0 - Bus master 5 reads terminate with an access error and the read is not
 *     performed
 * - 0b1 - Bus master 5 reads allowed
 */
/*@{*/
/*! @brief Read current value of the MPU_WORD_M5RE field. */
#define MPU_RD_WORD_M5RE(base, index, index2) ((MPU_WORD_REG(base, index, index2) & MPU_WORD_M5RE_MASK) >> MPU_WORD_M5RE_SHIFT)
#define MPU_BRD_WORD_M5RE(base, index, index2) (BME_UBFX32(&MPU_WORD_REG(base, index, index2), MPU_WORD_M5RE_SHIFT, MPU_WORD_M5RE_WIDTH))

/*! @brief Set the M5RE field to a new value. */
#define MPU_WR_WORD_M5RE(base, index, index2, value) (MPU_RMW_WORD(base, index, index2, MPU_WORD_M5RE_MASK, MPU_WORD_M5RE(value)))
#define MPU_BWR_WORD_M5RE(base, index, index2, value) (BME_BFI32(&MPU_WORD_REG(base, index, index2), ((uint32_t)(value) << MPU_WORD_M5RE_SHIFT), MPU_WORD_M5RE_SHIFT, MPU_WORD_M5RE_WIDTH))
/*@}*/

/*!
 * @name Register MPU_WORD, field M6WE[28] (RW)
 *
 * Values:
 * - 0b0 - Bus master 6 writes terminate with an access error and the write is
 *     not performed
 * - 0b1 - Bus master 6 writes allowed
 */
/*@{*/
/*! @brief Read current value of the MPU_WORD_M6WE field. */
#define MPU_RD_WORD_M6WE(base, index, index2) ((MPU_WORD_REG(base, index, index2) & MPU_WORD_M6WE_MASK) >> MPU_WORD_M6WE_SHIFT)
#define MPU_BRD_WORD_M6WE(base, index, index2) (BME_UBFX32(&MPU_WORD_REG(base, index, index2), MPU_WORD_M6WE_SHIFT, MPU_WORD_M6WE_WIDTH))

/*! @brief Set the M6WE field to a new value. */
#define MPU_WR_WORD_M6WE(base, index, index2, value) (MPU_RMW_WORD(base, index, index2, MPU_WORD_M6WE_MASK, MPU_WORD_M6WE(value)))
#define MPU_BWR_WORD_M6WE(base, index, index2, value) (BME_BFI32(&MPU_WORD_REG(base, index, index2), ((uint32_t)(value) << MPU_WORD_M6WE_SHIFT), MPU_WORD_M6WE_SHIFT, MPU_WORD_M6WE_WIDTH))
/*@}*/

/*!
 * @name Register MPU_WORD, field M6RE[29] (RW)
 *
 * Values:
 * - 0b0 - Bus master 6 reads terminate with an access error and the read is not
 *     performed
 * - 0b1 - Bus master 6 reads allowed
 */
/*@{*/
/*! @brief Read current value of the MPU_WORD_M6RE field. */
#define MPU_RD_WORD_M6RE(base, index, index2) ((MPU_WORD_REG(base, index, index2) & MPU_WORD_M6RE_MASK) >> MPU_WORD_M6RE_SHIFT)
#define MPU_BRD_WORD_M6RE(base, index, index2) (BME_UBFX32(&MPU_WORD_REG(base, index, index2), MPU_WORD_M6RE_SHIFT, MPU_WORD_M6RE_WIDTH))

/*! @brief Set the M6RE field to a new value. */
#define MPU_WR_WORD_M6RE(base, index, index2, value) (MPU_RMW_WORD(base, index, index2, MPU_WORD_M6RE_MASK, MPU_WORD_M6RE(value)))
#define MPU_BWR_WORD_M6RE(base, index, index2, value) (BME_BFI32(&MPU_WORD_REG(base, index, index2), ((uint32_t)(value) << MPU_WORD_M6RE_SHIFT), MPU_WORD_M6RE_SHIFT, MPU_WORD_M6RE_WIDTH))
/*@}*/

/*!
 * @name Register MPU_WORD, field M7WE[30] (RW)
 *
 * Values:
 * - 0b0 - Bus master 7 writes terminate with an access error and the write is
 *     not performed
 * - 0b1 - Bus master 7 writes allowed
 */
/*@{*/
/*! @brief Read current value of the MPU_WORD_M7WE field. */
#define MPU_RD_WORD_M7WE(base, index, index2) ((MPU_WORD_REG(base, index, index2) & MPU_WORD_M7WE_MASK) >> MPU_WORD_M7WE_SHIFT)
#define MPU_BRD_WORD_M7WE(base, index, index2) (BME_UBFX32(&MPU_WORD_REG(base, index, index2), MPU_WORD_M7WE_SHIFT, MPU_WORD_M7WE_WIDTH))

/*! @brief Set the M7WE field to a new value. */
#define MPU_WR_WORD_M7WE(base, index, index2, value) (MPU_RMW_WORD(base, index, index2, MPU_WORD_M7WE_MASK, MPU_WORD_M7WE(value)))
#define MPU_BWR_WORD_M7WE(base, index, index2, value) (BME_BFI32(&MPU_WORD_REG(base, index, index2), ((uint32_t)(value) << MPU_WORD_M7WE_SHIFT), MPU_WORD_M7WE_SHIFT, MPU_WORD_M7WE_WIDTH))
/*@}*/

/*!
 * @name Register MPU_WORD, field M7RE[31] (RW)
 *
 * Values:
 * - 0b0 - Bus master 7 reads terminate with an access error and the read is not
 *     performed
 * - 0b1 - Bus master 7 reads allowed
 */
/*@{*/
/*! @brief Read current value of the MPU_WORD_M7RE field. */
#define MPU_RD_WORD_M7RE(base, index, index2) ((MPU_WORD_REG(base, index, index2) & MPU_WORD_M7RE_MASK) >> MPU_WORD_M7RE_SHIFT)
#define MPU_BRD_WORD_M7RE(base, index, index2) (BME_UBFX32(&MPU_WORD_REG(base, index, index2), MPU_WORD_M7RE_SHIFT, MPU_WORD_M7RE_WIDTH))

/*! @brief Set the M7RE field to a new value. */
#define MPU_WR_WORD_M7RE(base, index, index2, value) (MPU_RMW_WORD(base, index, index2, MPU_WORD_M7RE_MASK, MPU_WORD_M7RE(value)))
#define MPU_BWR_WORD_M7RE(base, index, index2, value) (BME_BFI32(&MPU_WORD_REG(base, index, index2), ((uint32_t)(value) << MPU_WORD_M7RE_SHIFT), MPU_WORD_M7RE_SHIFT, MPU_WORD_M7RE_WIDTH))
/*@}*/

/*******************************************************************************
 * MPU_RGDAAC - Region Descriptor Alternate Access Control n
 ******************************************************************************/

/*!
 * @brief MPU_RGDAAC - Region Descriptor Alternate Access Control n (RW)
 *
 * Reset value: 0x0061F7DFU
 *
 * Because software may adjust only the access controls within a region
 * descriptor (RGDn_WORD2) as different tasks execute, an alternate programming view of
 * this 32-bit entity is available. Writing to this register does not affect the
 * descriptor's valid bit.
 */
/*!
 * @name Constants and macros for entire MPU_RGDAAC register
 */
/*@{*/
#define MPU_RD_RGDAAC(base, index) (MPU_RGDAAC_REG(base, index))
#define MPU_WR_RGDAAC(base, index, value) (MPU_RGDAAC_REG(base, index) = (value))
#define MPU_RMW_RGDAAC(base, index, mask, value) (MPU_WR_RGDAAC(base, index, (MPU_RD_RGDAAC(base, index) & ~(mask)) | (value)))
#define MPU_SET_RGDAAC(base, index, value) (BME_OR32(&MPU_RGDAAC_REG(base, index), (uint32_t)(value)))
#define MPU_CLR_RGDAAC(base, index, value) (BME_AND32(&MPU_RGDAAC_REG(base, index), (uint32_t)(~(value))))
#define MPU_TOG_RGDAAC(base, index, value) (BME_XOR32(&MPU_RGDAAC_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual MPU_RGDAAC bitfields
 */

/*!
 * @name Register MPU_RGDAAC, field M0UM[2:0] (RW)
 *
 * See M3UM description.
 */
/*@{*/
/*! @brief Read current value of the MPU_RGDAAC_M0UM field. */
#define MPU_RD_RGDAAC_M0UM(base, index) ((MPU_RGDAAC_REG(base, index) & MPU_RGDAAC_M0UM_MASK) >> MPU_RGDAAC_M0UM_SHIFT)
#define MPU_BRD_RGDAAC_M0UM(base, index) (BME_UBFX32(&MPU_RGDAAC_REG(base, index), MPU_RGDAAC_M0UM_SHIFT, MPU_RGDAAC_M0UM_WIDTH))

/*! @brief Set the M0UM field to a new value. */
#define MPU_WR_RGDAAC_M0UM(base, index, value) (MPU_RMW_RGDAAC(base, index, MPU_RGDAAC_M0UM_MASK, MPU_RGDAAC_M0UM(value)))
#define MPU_BWR_RGDAAC_M0UM(base, index, value) (BME_BFI32(&MPU_RGDAAC_REG(base, index), ((uint32_t)(value) << MPU_RGDAAC_M0UM_SHIFT), MPU_RGDAAC_M0UM_SHIFT, MPU_RGDAAC_M0UM_WIDTH))
/*@}*/

/*!
 * @name Register MPU_RGDAAC, field M0SM[4:3] (RW)
 *
 * See M3SM description.
 */
/*@{*/
/*! @brief Read current value of the MPU_RGDAAC_M0SM field. */
#define MPU_RD_RGDAAC_M0SM(base, index) ((MPU_RGDAAC_REG(base, index) & MPU_RGDAAC_M0SM_MASK) >> MPU_RGDAAC_M0SM_SHIFT)
#define MPU_BRD_RGDAAC_M0SM(base, index) (BME_UBFX32(&MPU_RGDAAC_REG(base, index), MPU_RGDAAC_M0SM_SHIFT, MPU_RGDAAC_M0SM_WIDTH))

/*! @brief Set the M0SM field to a new value. */
#define MPU_WR_RGDAAC_M0SM(base, index, value) (MPU_RMW_RGDAAC(base, index, MPU_RGDAAC_M0SM_MASK, MPU_RGDAAC_M0SM(value)))
#define MPU_BWR_RGDAAC_M0SM(base, index, value) (BME_BFI32(&MPU_RGDAAC_REG(base, index), ((uint32_t)(value) << MPU_RGDAAC_M0SM_SHIFT), MPU_RGDAAC_M0SM_SHIFT, MPU_RGDAAC_M0SM_WIDTH))
/*@}*/

/*!
 * @name Register MPU_RGDAAC, field M0PE[5] (RW)
 *
 * See M3PE description.
 */
/*@{*/
/*! @brief Read current value of the MPU_RGDAAC_M0PE field. */
#define MPU_RD_RGDAAC_M0PE(base, index) ((MPU_RGDAAC_REG(base, index) & MPU_RGDAAC_M0PE_MASK) >> MPU_RGDAAC_M0PE_SHIFT)
#define MPU_BRD_RGDAAC_M0PE(base, index) (BME_UBFX32(&MPU_RGDAAC_REG(base, index), MPU_RGDAAC_M0PE_SHIFT, MPU_RGDAAC_M0PE_WIDTH))

/*! @brief Set the M0PE field to a new value. */
#define MPU_WR_RGDAAC_M0PE(base, index, value) (MPU_RMW_RGDAAC(base, index, MPU_RGDAAC_M0PE_MASK, MPU_RGDAAC_M0PE(value)))
#define MPU_BWR_RGDAAC_M0PE(base, index, value) (BME_BFI32(&MPU_RGDAAC_REG(base, index), ((uint32_t)(value) << MPU_RGDAAC_M0PE_SHIFT), MPU_RGDAAC_M0PE_SHIFT, MPU_RGDAAC_M0PE_WIDTH))
/*@}*/

/*!
 * @name Register MPU_RGDAAC, field M1UM[8:6] (RW)
 *
 * See M3UM description.
 */
/*@{*/
/*! @brief Read current value of the MPU_RGDAAC_M1UM field. */
#define MPU_RD_RGDAAC_M1UM(base, index) ((MPU_RGDAAC_REG(base, index) & MPU_RGDAAC_M1UM_MASK) >> MPU_RGDAAC_M1UM_SHIFT)
#define MPU_BRD_RGDAAC_M1UM(base, index) (BME_UBFX32(&MPU_RGDAAC_REG(base, index), MPU_RGDAAC_M1UM_SHIFT, MPU_RGDAAC_M1UM_WIDTH))

/*! @brief Set the M1UM field to a new value. */
#define MPU_WR_RGDAAC_M1UM(base, index, value) (MPU_RMW_RGDAAC(base, index, MPU_RGDAAC_M1UM_MASK, MPU_RGDAAC_M1UM(value)))
#define MPU_BWR_RGDAAC_M1UM(base, index, value) (BME_BFI32(&MPU_RGDAAC_REG(base, index), ((uint32_t)(value) << MPU_RGDAAC_M1UM_SHIFT), MPU_RGDAAC_M1UM_SHIFT, MPU_RGDAAC_M1UM_WIDTH))
/*@}*/

/*!
 * @name Register MPU_RGDAAC, field M1SM[10:9] (RW)
 *
 * See M3SM description.
 */
/*@{*/
/*! @brief Read current value of the MPU_RGDAAC_M1SM field. */
#define MPU_RD_RGDAAC_M1SM(base, index) ((MPU_RGDAAC_REG(base, index) & MPU_RGDAAC_M1SM_MASK) >> MPU_RGDAAC_M1SM_SHIFT)
#define MPU_BRD_RGDAAC_M1SM(base, index) (BME_UBFX32(&MPU_RGDAAC_REG(base, index), MPU_RGDAAC_M1SM_SHIFT, MPU_RGDAAC_M1SM_WIDTH))

/*! @brief Set the M1SM field to a new value. */
#define MPU_WR_RGDAAC_M1SM(base, index, value) (MPU_RMW_RGDAAC(base, index, MPU_RGDAAC_M1SM_MASK, MPU_RGDAAC_M1SM(value)))
#define MPU_BWR_RGDAAC_M1SM(base, index, value) (BME_BFI32(&MPU_RGDAAC_REG(base, index), ((uint32_t)(value) << MPU_RGDAAC_M1SM_SHIFT), MPU_RGDAAC_M1SM_SHIFT, MPU_RGDAAC_M1SM_WIDTH))
/*@}*/

/*!
 * @name Register MPU_RGDAAC, field M1PE[11] (RW)
 *
 * See M3PE description.
 */
/*@{*/
/*! @brief Read current value of the MPU_RGDAAC_M1PE field. */
#define MPU_RD_RGDAAC_M1PE(base, index) ((MPU_RGDAAC_REG(base, index) & MPU_RGDAAC_M1PE_MASK) >> MPU_RGDAAC_M1PE_SHIFT)
#define MPU_BRD_RGDAAC_M1PE(base, index) (BME_UBFX32(&MPU_RGDAAC_REG(base, index), MPU_RGDAAC_M1PE_SHIFT, MPU_RGDAAC_M1PE_WIDTH))

/*! @brief Set the M1PE field to a new value. */
#define MPU_WR_RGDAAC_M1PE(base, index, value) (MPU_RMW_RGDAAC(base, index, MPU_RGDAAC_M1PE_MASK, MPU_RGDAAC_M1PE(value)))
#define MPU_BWR_RGDAAC_M1PE(base, index, value) (BME_BFI32(&MPU_RGDAAC_REG(base, index), ((uint32_t)(value) << MPU_RGDAAC_M1PE_SHIFT), MPU_RGDAAC_M1PE_SHIFT, MPU_RGDAAC_M1PE_WIDTH))
/*@}*/

/*!
 * @name Register MPU_RGDAAC, field M2UM[14:12] (RW)
 *
 * See M3UM description.
 */
/*@{*/
/*! @brief Read current value of the MPU_RGDAAC_M2UM field. */
#define MPU_RD_RGDAAC_M2UM(base, index) ((MPU_RGDAAC_REG(base, index) & MPU_RGDAAC_M2UM_MASK) >> MPU_RGDAAC_M2UM_SHIFT)
#define MPU_BRD_RGDAAC_M2UM(base, index) (BME_UBFX32(&MPU_RGDAAC_REG(base, index), MPU_RGDAAC_M2UM_SHIFT, MPU_RGDAAC_M2UM_WIDTH))

/*! @brief Set the M2UM field to a new value. */
#define MPU_WR_RGDAAC_M2UM(base, index, value) (MPU_RMW_RGDAAC(base, index, MPU_RGDAAC_M2UM_MASK, MPU_RGDAAC_M2UM(value)))
#define MPU_BWR_RGDAAC_M2UM(base, index, value) (BME_BFI32(&MPU_RGDAAC_REG(base, index), ((uint32_t)(value) << MPU_RGDAAC_M2UM_SHIFT), MPU_RGDAAC_M2UM_SHIFT, MPU_RGDAAC_M2UM_WIDTH))
/*@}*/

/*!
 * @name Register MPU_RGDAAC, field M2SM[16:15] (RW)
 *
 * See M3SM description.
 */
/*@{*/
/*! @brief Read current value of the MPU_RGDAAC_M2SM field. */
#define MPU_RD_RGDAAC_M2SM(base, index) ((MPU_RGDAAC_REG(base, index) & MPU_RGDAAC_M2SM_MASK) >> MPU_RGDAAC_M2SM_SHIFT)
#define MPU_BRD_RGDAAC_M2SM(base, index) (BME_UBFX32(&MPU_RGDAAC_REG(base, index), MPU_RGDAAC_M2SM_SHIFT, MPU_RGDAAC_M2SM_WIDTH))

/*! @brief Set the M2SM field to a new value. */
#define MPU_WR_RGDAAC_M2SM(base, index, value) (MPU_RMW_RGDAAC(base, index, MPU_RGDAAC_M2SM_MASK, MPU_RGDAAC_M2SM(value)))
#define MPU_BWR_RGDAAC_M2SM(base, index, value) (BME_BFI32(&MPU_RGDAAC_REG(base, index), ((uint32_t)(value) << MPU_RGDAAC_M2SM_SHIFT), MPU_RGDAAC_M2SM_SHIFT, MPU_RGDAAC_M2SM_WIDTH))
/*@}*/

/*!
 * @name Register MPU_RGDAAC, field M2PE[17] (RW)
 *
 * See M3PE description.
 */
/*@{*/
/*! @brief Read current value of the MPU_RGDAAC_M2PE field. */
#define MPU_RD_RGDAAC_M2PE(base, index) ((MPU_RGDAAC_REG(base, index) & MPU_RGDAAC_M2PE_MASK) >> MPU_RGDAAC_M2PE_SHIFT)
#define MPU_BRD_RGDAAC_M2PE(base, index) (BME_UBFX32(&MPU_RGDAAC_REG(base, index), MPU_RGDAAC_M2PE_SHIFT, MPU_RGDAAC_M2PE_WIDTH))

/*! @brief Set the M2PE field to a new value. */
#define MPU_WR_RGDAAC_M2PE(base, index, value) (MPU_RMW_RGDAAC(base, index, MPU_RGDAAC_M2PE_MASK, MPU_RGDAAC_M2PE(value)))
#define MPU_BWR_RGDAAC_M2PE(base, index, value) (BME_BFI32(&MPU_RGDAAC_REG(base, index), ((uint32_t)(value) << MPU_RGDAAC_M2PE_SHIFT), MPU_RGDAAC_M2PE_SHIFT, MPU_RGDAAC_M2PE_WIDTH))
/*@}*/

/*!
 * @name Register MPU_RGDAAC, field M3UM[20:18] (RW)
 *
 * Defines the access controls for bus master 3 in user mode. M3UM consists of
 * three independent bits, enabling read (r), write (w), and execute (x)
 * permissions. The bit assignment sequence is as M3UM[2:0] -> rwx.
 *
 * Values:
 * - 0b000 - An attempted access of that mode may be terminated with an access
 *     error (if not allowed by another descriptor) and the access not performed.
 * - 0b001 - Allows the given access type to occur
 */
/*@{*/
/*! @brief Read current value of the MPU_RGDAAC_M3UM field. */
#define MPU_RD_RGDAAC_M3UM(base, index) ((MPU_RGDAAC_REG(base, index) & MPU_RGDAAC_M3UM_MASK) >> MPU_RGDAAC_M3UM_SHIFT)
#define MPU_BRD_RGDAAC_M3UM(base, index) (BME_UBFX32(&MPU_RGDAAC_REG(base, index), MPU_RGDAAC_M3UM_SHIFT, MPU_RGDAAC_M3UM_WIDTH))

/*! @brief Set the M3UM field to a new value. */
#define MPU_WR_RGDAAC_M3UM(base, index, value) (MPU_RMW_RGDAAC(base, index, MPU_RGDAAC_M3UM_MASK, MPU_RGDAAC_M3UM(value)))
#define MPU_BWR_RGDAAC_M3UM(base, index, value) (BME_BFI32(&MPU_RGDAAC_REG(base, index), ((uint32_t)(value) << MPU_RGDAAC_M3UM_SHIFT), MPU_RGDAAC_M3UM_SHIFT, MPU_RGDAAC_M3UM_WIDTH))
/*@}*/

/*!
 * @name Register MPU_RGDAAC, field M3SM[22:21] (RW)
 *
 * Defines the access controls for bus master 3 in Supervisor mode.
 *
 * Values:
 * - 0b00 - r/w/x; read, write and execute allowed
 * - 0b01 - r/x; read and execute allowed, but no write
 * - 0b10 - r/w; read and write allowed, but no execute
 * - 0b11 - Same as User mode defined in M3UM
 */
/*@{*/
/*! @brief Read current value of the MPU_RGDAAC_M3SM field. */
#define MPU_RD_RGDAAC_M3SM(base, index) ((MPU_RGDAAC_REG(base, index) & MPU_RGDAAC_M3SM_MASK) >> MPU_RGDAAC_M3SM_SHIFT)
#define MPU_BRD_RGDAAC_M3SM(base, index) (BME_UBFX32(&MPU_RGDAAC_REG(base, index), MPU_RGDAAC_M3SM_SHIFT, MPU_RGDAAC_M3SM_WIDTH))

/*! @brief Set the M3SM field to a new value. */
#define MPU_WR_RGDAAC_M3SM(base, index, value) (MPU_RMW_RGDAAC(base, index, MPU_RGDAAC_M3SM_MASK, MPU_RGDAAC_M3SM(value)))
#define MPU_BWR_RGDAAC_M3SM(base, index, value) (BME_BFI32(&MPU_RGDAAC_REG(base, index), ((uint32_t)(value) << MPU_RGDAAC_M3SM_SHIFT), MPU_RGDAAC_M3SM_SHIFT, MPU_RGDAAC_M3SM_WIDTH))
/*@}*/

/*!
 * @name Register MPU_RGDAAC, field M3PE[23] (RW)
 *
 * Values:
 * - 0b0 - Do not include the process identifier in the evaluation
 * - 0b1 - Include the process identifier and mask (RGDn.RGDAAC) in the region
 *     hit evaluation
 */
/*@{*/
/*! @brief Read current value of the MPU_RGDAAC_M3PE field. */
#define MPU_RD_RGDAAC_M3PE(base, index) ((MPU_RGDAAC_REG(base, index) & MPU_RGDAAC_M3PE_MASK) >> MPU_RGDAAC_M3PE_SHIFT)
#define MPU_BRD_RGDAAC_M3PE(base, index) (BME_UBFX32(&MPU_RGDAAC_REG(base, index), MPU_RGDAAC_M3PE_SHIFT, MPU_RGDAAC_M3PE_WIDTH))

/*! @brief Set the M3PE field to a new value. */
#define MPU_WR_RGDAAC_M3PE(base, index, value) (MPU_RMW_RGDAAC(base, index, MPU_RGDAAC_M3PE_MASK, MPU_RGDAAC_M3PE(value)))
#define MPU_BWR_RGDAAC_M3PE(base, index, value) (BME_BFI32(&MPU_RGDAAC_REG(base, index), ((uint32_t)(value) << MPU_RGDAAC_M3PE_SHIFT), MPU_RGDAAC_M3PE_SHIFT, MPU_RGDAAC_M3PE_WIDTH))
/*@}*/

/*!
 * @name Register MPU_RGDAAC, field M4WE[24] (RW)
 *
 * Values:
 * - 0b0 - Bus master 4 writes terminate with an access error and the write is
 *     not performed
 * - 0b1 - Bus master 4 writes allowed
 */
/*@{*/
/*! @brief Read current value of the MPU_RGDAAC_M4WE field. */
#define MPU_RD_RGDAAC_M4WE(base, index) ((MPU_RGDAAC_REG(base, index) & MPU_RGDAAC_M4WE_MASK) >> MPU_RGDAAC_M4WE_SHIFT)
#define MPU_BRD_RGDAAC_M4WE(base, index) (BME_UBFX32(&MPU_RGDAAC_REG(base, index), MPU_RGDAAC_M4WE_SHIFT, MPU_RGDAAC_M4WE_WIDTH))

/*! @brief Set the M4WE field to a new value. */
#define MPU_WR_RGDAAC_M4WE(base, index, value) (MPU_RMW_RGDAAC(base, index, MPU_RGDAAC_M4WE_MASK, MPU_RGDAAC_M4WE(value)))
#define MPU_BWR_RGDAAC_M4WE(base, index, value) (BME_BFI32(&MPU_RGDAAC_REG(base, index), ((uint32_t)(value) << MPU_RGDAAC_M4WE_SHIFT), MPU_RGDAAC_M4WE_SHIFT, MPU_RGDAAC_M4WE_WIDTH))
/*@}*/

/*!
 * @name Register MPU_RGDAAC, field M4RE[25] (RW)
 *
 * Values:
 * - 0b0 - Bus master 4 reads terminate with an access error and the read is not
 *     performed
 * - 0b1 - Bus master 4 reads allowed
 */
/*@{*/
/*! @brief Read current value of the MPU_RGDAAC_M4RE field. */
#define MPU_RD_RGDAAC_M4RE(base, index) ((MPU_RGDAAC_REG(base, index) & MPU_RGDAAC_M4RE_MASK) >> MPU_RGDAAC_M4RE_SHIFT)
#define MPU_BRD_RGDAAC_M4RE(base, index) (BME_UBFX32(&MPU_RGDAAC_REG(base, index), MPU_RGDAAC_M4RE_SHIFT, MPU_RGDAAC_M4RE_WIDTH))

/*! @brief Set the M4RE field to a new value. */
#define MPU_WR_RGDAAC_M4RE(base, index, value) (MPU_RMW_RGDAAC(base, index, MPU_RGDAAC_M4RE_MASK, MPU_RGDAAC_M4RE(value)))
#define MPU_BWR_RGDAAC_M4RE(base, index, value) (BME_BFI32(&MPU_RGDAAC_REG(base, index), ((uint32_t)(value) << MPU_RGDAAC_M4RE_SHIFT), MPU_RGDAAC_M4RE_SHIFT, MPU_RGDAAC_M4RE_WIDTH))
/*@}*/

/*!
 * @name Register MPU_RGDAAC, field M5WE[26] (RW)
 *
 * Values:
 * - 0b0 - Bus master 5 writes terminate with an access error and the write is
 *     not performed
 * - 0b1 - Bus master 5 writes allowed
 */
/*@{*/
/*! @brief Read current value of the MPU_RGDAAC_M5WE field. */
#define MPU_RD_RGDAAC_M5WE(base, index) ((MPU_RGDAAC_REG(base, index) & MPU_RGDAAC_M5WE_MASK) >> MPU_RGDAAC_M5WE_SHIFT)
#define MPU_BRD_RGDAAC_M5WE(base, index) (BME_UBFX32(&MPU_RGDAAC_REG(base, index), MPU_RGDAAC_M5WE_SHIFT, MPU_RGDAAC_M5WE_WIDTH))

/*! @brief Set the M5WE field to a new value. */
#define MPU_WR_RGDAAC_M5WE(base, index, value) (MPU_RMW_RGDAAC(base, index, MPU_RGDAAC_M5WE_MASK, MPU_RGDAAC_M5WE(value)))
#define MPU_BWR_RGDAAC_M5WE(base, index, value) (BME_BFI32(&MPU_RGDAAC_REG(base, index), ((uint32_t)(value) << MPU_RGDAAC_M5WE_SHIFT), MPU_RGDAAC_M5WE_SHIFT, MPU_RGDAAC_M5WE_WIDTH))
/*@}*/

/*!
 * @name Register MPU_RGDAAC, field M5RE[27] (RW)
 *
 * Values:
 * - 0b0 - Bus master 5 reads terminate with an access error and the read is not
 *     performed
 * - 0b1 - Bus master 5 reads allowed
 */
/*@{*/
/*! @brief Read current value of the MPU_RGDAAC_M5RE field. */
#define MPU_RD_RGDAAC_M5RE(base, index) ((MPU_RGDAAC_REG(base, index) & MPU_RGDAAC_M5RE_MASK) >> MPU_RGDAAC_M5RE_SHIFT)
#define MPU_BRD_RGDAAC_M5RE(base, index) (BME_UBFX32(&MPU_RGDAAC_REG(base, index), MPU_RGDAAC_M5RE_SHIFT, MPU_RGDAAC_M5RE_WIDTH))

/*! @brief Set the M5RE field to a new value. */
#define MPU_WR_RGDAAC_M5RE(base, index, value) (MPU_RMW_RGDAAC(base, index, MPU_RGDAAC_M5RE_MASK, MPU_RGDAAC_M5RE(value)))
#define MPU_BWR_RGDAAC_M5RE(base, index, value) (BME_BFI32(&MPU_RGDAAC_REG(base, index), ((uint32_t)(value) << MPU_RGDAAC_M5RE_SHIFT), MPU_RGDAAC_M5RE_SHIFT, MPU_RGDAAC_M5RE_WIDTH))
/*@}*/

/*!
 * @name Register MPU_RGDAAC, field M6WE[28] (RW)
 *
 * Values:
 * - 0b0 - Bus master 6 writes terminate with an access error and the write is
 *     not performed
 * - 0b1 - Bus master 6 writes allowed
 */
/*@{*/
/*! @brief Read current value of the MPU_RGDAAC_M6WE field. */
#define MPU_RD_RGDAAC_M6WE(base, index) ((MPU_RGDAAC_REG(base, index) & MPU_RGDAAC_M6WE_MASK) >> MPU_RGDAAC_M6WE_SHIFT)
#define MPU_BRD_RGDAAC_M6WE(base, index) (BME_UBFX32(&MPU_RGDAAC_REG(base, index), MPU_RGDAAC_M6WE_SHIFT, MPU_RGDAAC_M6WE_WIDTH))

/*! @brief Set the M6WE field to a new value. */
#define MPU_WR_RGDAAC_M6WE(base, index, value) (MPU_RMW_RGDAAC(base, index, MPU_RGDAAC_M6WE_MASK, MPU_RGDAAC_M6WE(value)))
#define MPU_BWR_RGDAAC_M6WE(base, index, value) (BME_BFI32(&MPU_RGDAAC_REG(base, index), ((uint32_t)(value) << MPU_RGDAAC_M6WE_SHIFT), MPU_RGDAAC_M6WE_SHIFT, MPU_RGDAAC_M6WE_WIDTH))
/*@}*/

/*!
 * @name Register MPU_RGDAAC, field M6RE[29] (RW)
 *
 * Values:
 * - 0b0 - Bus master 6 reads terminate with an access error and the read is not
 *     performed
 * - 0b1 - Bus master 6 reads allowed
 */
/*@{*/
/*! @brief Read current value of the MPU_RGDAAC_M6RE field. */
#define MPU_RD_RGDAAC_M6RE(base, index) ((MPU_RGDAAC_REG(base, index) & MPU_RGDAAC_M6RE_MASK) >> MPU_RGDAAC_M6RE_SHIFT)
#define MPU_BRD_RGDAAC_M6RE(base, index) (BME_UBFX32(&MPU_RGDAAC_REG(base, index), MPU_RGDAAC_M6RE_SHIFT, MPU_RGDAAC_M6RE_WIDTH))

/*! @brief Set the M6RE field to a new value. */
#define MPU_WR_RGDAAC_M6RE(base, index, value) (MPU_RMW_RGDAAC(base, index, MPU_RGDAAC_M6RE_MASK, MPU_RGDAAC_M6RE(value)))
#define MPU_BWR_RGDAAC_M6RE(base, index, value) (BME_BFI32(&MPU_RGDAAC_REG(base, index), ((uint32_t)(value) << MPU_RGDAAC_M6RE_SHIFT), MPU_RGDAAC_M6RE_SHIFT, MPU_RGDAAC_M6RE_WIDTH))
/*@}*/

/*!
 * @name Register MPU_RGDAAC, field M7WE[30] (RW)
 *
 * Values:
 * - 0b0 - Bus master 7 writes terminate with an access error and the write is
 *     not performed
 * - 0b1 - Bus master 7 writes allowed
 */
/*@{*/
/*! @brief Read current value of the MPU_RGDAAC_M7WE field. */
#define MPU_RD_RGDAAC_M7WE(base, index) ((MPU_RGDAAC_REG(base, index) & MPU_RGDAAC_M7WE_MASK) >> MPU_RGDAAC_M7WE_SHIFT)
#define MPU_BRD_RGDAAC_M7WE(base, index) (BME_UBFX32(&MPU_RGDAAC_REG(base, index), MPU_RGDAAC_M7WE_SHIFT, MPU_RGDAAC_M7WE_WIDTH))

/*! @brief Set the M7WE field to a new value. */
#define MPU_WR_RGDAAC_M7WE(base, index, value) (MPU_RMW_RGDAAC(base, index, MPU_RGDAAC_M7WE_MASK, MPU_RGDAAC_M7WE(value)))
#define MPU_BWR_RGDAAC_M7WE(base, index, value) (BME_BFI32(&MPU_RGDAAC_REG(base, index), ((uint32_t)(value) << MPU_RGDAAC_M7WE_SHIFT), MPU_RGDAAC_M7WE_SHIFT, MPU_RGDAAC_M7WE_WIDTH))
/*@}*/

/*!
 * @name Register MPU_RGDAAC, field M7RE[31] (RW)
 *
 * Values:
 * - 0b0 - Bus master 7 reads terminate with an access error and the read is not
 *     performed
 * - 0b1 - Bus master 7 reads allowed
 */
/*@{*/
/*! @brief Read current value of the MPU_RGDAAC_M7RE field. */
#define MPU_RD_RGDAAC_M7RE(base, index) ((MPU_RGDAAC_REG(base, index) & MPU_RGDAAC_M7RE_MASK) >> MPU_RGDAAC_M7RE_SHIFT)
#define MPU_BRD_RGDAAC_M7RE(base, index) (BME_UBFX32(&MPU_RGDAAC_REG(base, index), MPU_RGDAAC_M7RE_SHIFT, MPU_RGDAAC_M7RE_WIDTH))

/*! @brief Set the M7RE field to a new value. */
#define MPU_WR_RGDAAC_M7RE(base, index, value) (MPU_RMW_RGDAAC(base, index, MPU_RGDAAC_M7RE_MASK, MPU_RGDAAC_M7RE(value)))
#define MPU_BWR_RGDAAC_M7RE(base, index, value) (BME_BFI32(&MPU_RGDAAC_REG(base, index), ((uint32_t)(value) << MPU_RGDAAC_M7RE_SHIFT), MPU_RGDAAC_M7RE_SHIFT, MPU_RGDAAC_M7RE_WIDTH))
/*@}*/

/*
 * MK82F25615 NV
 *
 * Flash configuration field
 *
 * Registers defined in this header file:
 * - NV_BACKKEY3 - Backdoor Comparison Key 3.
 * - NV_BACKKEY2 - Backdoor Comparison Key 2.
 * - NV_BACKKEY1 - Backdoor Comparison Key 1.
 * - NV_BACKKEY0 - Backdoor Comparison Key 0.
 * - NV_BACKKEY7 - Backdoor Comparison Key 7.
 * - NV_BACKKEY6 - Backdoor Comparison Key 6.
 * - NV_BACKKEY5 - Backdoor Comparison Key 5.
 * - NV_BACKKEY4 - Backdoor Comparison Key 4.
 * - NV_FPROT3 - Non-volatile P-Flash Protection 1 - Low Register
 * - NV_FPROT2 - Non-volatile P-Flash Protection 1 - High Register
 * - NV_FPROT1 - Non-volatile P-Flash Protection 0 - Low Register
 * - NV_FPROT0 - Non-volatile P-Flash Protection 0 - High Register
 * - NV_FSEC - Non-volatile Flash Security Register
 * - NV_FOPT - Non-volatile Flash Option Register
 */

#define NV_INSTANCE_COUNT (1U) /*!< Number of instances of the NV module. */
#define FTFA_FlashConfig_IDX (0U) /*!< Instance number for FTFA_FlashConfig. */

/*******************************************************************************
 * NV_BACKKEY3 - Backdoor Comparison Key 3.
 ******************************************************************************/

/*!
 * @brief NV_BACKKEY3 - Backdoor Comparison Key 3. (RO)
 *
 * Reset value: 0xFFU
 */
/*!
 * @name Constants and macros for entire NV_BACKKEY3 register
 */
/*@{*/
#define NV_RD_BACKKEY3(base)     (NV_BACKKEY3_REG(base))
/*@}*/

/*******************************************************************************
 * NV_BACKKEY2 - Backdoor Comparison Key 2.
 ******************************************************************************/

/*!
 * @brief NV_BACKKEY2 - Backdoor Comparison Key 2. (RO)
 *
 * Reset value: 0xFFU
 */
/*!
 * @name Constants and macros for entire NV_BACKKEY2 register
 */
/*@{*/
#define NV_RD_BACKKEY2(base)     (NV_BACKKEY2_REG(base))
/*@}*/

/*******************************************************************************
 * NV_BACKKEY1 - Backdoor Comparison Key 1.
 ******************************************************************************/

/*!
 * @brief NV_BACKKEY1 - Backdoor Comparison Key 1. (RO)
 *
 * Reset value: 0xFFU
 */
/*!
 * @name Constants and macros for entire NV_BACKKEY1 register
 */
/*@{*/
#define NV_RD_BACKKEY1(base)     (NV_BACKKEY1_REG(base))
/*@}*/

/*******************************************************************************
 * NV_BACKKEY0 - Backdoor Comparison Key 0.
 ******************************************************************************/

/*!
 * @brief NV_BACKKEY0 - Backdoor Comparison Key 0. (RO)
 *
 * Reset value: 0xFFU
 */
/*!
 * @name Constants and macros for entire NV_BACKKEY0 register
 */
/*@{*/
#define NV_RD_BACKKEY0(base)     (NV_BACKKEY0_REG(base))
/*@}*/

/*******************************************************************************
 * NV_BACKKEY7 - Backdoor Comparison Key 7.
 ******************************************************************************/

/*!
 * @brief NV_BACKKEY7 - Backdoor Comparison Key 7. (RO)
 *
 * Reset value: 0xFFU
 */
/*!
 * @name Constants and macros for entire NV_BACKKEY7 register
 */
/*@{*/
#define NV_RD_BACKKEY7(base)     (NV_BACKKEY7_REG(base))
/*@}*/

/*******************************************************************************
 * NV_BACKKEY6 - Backdoor Comparison Key 6.
 ******************************************************************************/

/*!
 * @brief NV_BACKKEY6 - Backdoor Comparison Key 6. (RO)
 *
 * Reset value: 0xFFU
 */
/*!
 * @name Constants and macros for entire NV_BACKKEY6 register
 */
/*@{*/
#define NV_RD_BACKKEY6(base)     (NV_BACKKEY6_REG(base))
/*@}*/

/*******************************************************************************
 * NV_BACKKEY5 - Backdoor Comparison Key 5.
 ******************************************************************************/

/*!
 * @brief NV_BACKKEY5 - Backdoor Comparison Key 5. (RO)
 *
 * Reset value: 0xFFU
 */
/*!
 * @name Constants and macros for entire NV_BACKKEY5 register
 */
/*@{*/
#define NV_RD_BACKKEY5(base)     (NV_BACKKEY5_REG(base))
/*@}*/

/*******************************************************************************
 * NV_BACKKEY4 - Backdoor Comparison Key 4.
 ******************************************************************************/

/*!
 * @brief NV_BACKKEY4 - Backdoor Comparison Key 4. (RO)
 *
 * Reset value: 0xFFU
 */
/*!
 * @name Constants and macros for entire NV_BACKKEY4 register
 */
/*@{*/
#define NV_RD_BACKKEY4(base)     (NV_BACKKEY4_REG(base))
/*@}*/

/*******************************************************************************
 * NV_FPROT3 - Non-volatile P-Flash Protection 1 - Low Register
 ******************************************************************************/

/*!
 * @brief NV_FPROT3 - Non-volatile P-Flash Protection 1 - Low Register (RO)
 *
 * Reset value: 0xFFU
 */
/*!
 * @name Constants and macros for entire NV_FPROT3 register
 */
/*@{*/
#define NV_RD_FPROT3(base)       (NV_FPROT3_REG(base))
/*@}*/

/*******************************************************************************
 * NV_FPROT2 - Non-volatile P-Flash Protection 1 - High Register
 ******************************************************************************/

/*!
 * @brief NV_FPROT2 - Non-volatile P-Flash Protection 1 - High Register (RO)
 *
 * Reset value: 0xFFU
 */
/*!
 * @name Constants and macros for entire NV_FPROT2 register
 */
/*@{*/
#define NV_RD_FPROT2(base)       (NV_FPROT2_REG(base))
/*@}*/

/*******************************************************************************
 * NV_FPROT1 - Non-volatile P-Flash Protection 0 - Low Register
 ******************************************************************************/

/*!
 * @brief NV_FPROT1 - Non-volatile P-Flash Protection 0 - Low Register (RO)
 *
 * Reset value: 0xFFU
 */
/*!
 * @name Constants and macros for entire NV_FPROT1 register
 */
/*@{*/
#define NV_RD_FPROT1(base)       (NV_FPROT1_REG(base))
/*@}*/

/*******************************************************************************
 * NV_FPROT0 - Non-volatile P-Flash Protection 0 - High Register
 ******************************************************************************/

/*!
 * @brief NV_FPROT0 - Non-volatile P-Flash Protection 0 - High Register (RO)
 *
 * Reset value: 0xFFU
 */
/*!
 * @name Constants and macros for entire NV_FPROT0 register
 */
/*@{*/
#define NV_RD_FPROT0(base)       (NV_FPROT0_REG(base))
/*@}*/

/*******************************************************************************
 * NV_FSEC - Non-volatile Flash Security Register
 ******************************************************************************/

/*!
 * @brief NV_FSEC - Non-volatile Flash Security Register (RO)
 *
 * Reset value: 0xFFU
 *
 * Allows the user to customize the operation of the MCU at boot time
 */
/*!
 * @name Constants and macros for entire NV_FSEC register
 */
/*@{*/
#define NV_RD_FSEC(base)         (NV_FSEC_REG(base))
/*@}*/

/*
 * Constants & macros for individual NV_FSEC bitfields
 */

/*!
 * @name Register NV_FSEC, field SEC[1:0] (RO)
 *
 * Values:
 * - 0b10 - MCU security status is unsecure
 * - 0b11 - MCU security status is secure
 */
/*@{*/
/*! @brief Read current value of the NV_FSEC_SEC field. */
#define NV_RD_FSEC_SEC(base) ((NV_FSEC_REG(base) & NV_FSEC_SEC_MASK) >> NV_FSEC_SEC_SHIFT)
#define NV_BRD_FSEC_SEC(base) (NV_RD_FSEC_SEC(base))
/*@}*/

/*!
 * @name Register NV_FSEC, field FSLACC[3:2] (RO)
 *
 * Values:
 * - 0b10 - Freescale factory access denied
 * - 0b11 - Freescale factory access granted
 */
/*@{*/
/*! @brief Read current value of the NV_FSEC_FSLACC field. */
#define NV_RD_FSEC_FSLACC(base) ((NV_FSEC_REG(base) & NV_FSEC_FSLACC_MASK) >> NV_FSEC_FSLACC_SHIFT)
#define NV_BRD_FSEC_FSLACC(base) (NV_RD_FSEC_FSLACC(base))
/*@}*/

/*!
 * @name Register NV_FSEC, field MEEN[5:4] (RO)
 *
 * Values:
 * - 0b10 - Mass erase is disabled
 * - 0b11 - Mass erase is enabled
 */
/*@{*/
/*! @brief Read current value of the NV_FSEC_MEEN field. */
#define NV_RD_FSEC_MEEN(base) ((NV_FSEC_REG(base) & NV_FSEC_MEEN_MASK) >> NV_FSEC_MEEN_SHIFT)
#define NV_BRD_FSEC_MEEN(base) (NV_RD_FSEC_MEEN(base))
/*@}*/

/*!
 * @name Register NV_FSEC, field KEYEN[7:6] (RO)
 *
 * Values:
 * - 0b10 - Backdoor key access enabled
 * - 0b11 - Backdoor key access disabled
 */
/*@{*/
/*! @brief Read current value of the NV_FSEC_KEYEN field. */
#define NV_RD_FSEC_KEYEN(base) ((NV_FSEC_REG(base) & NV_FSEC_KEYEN_MASK) >> NV_FSEC_KEYEN_SHIFT)
#define NV_BRD_FSEC_KEYEN(base) (NV_RD_FSEC_KEYEN(base))
/*@}*/

/*******************************************************************************
 * NV_FOPT - Non-volatile Flash Option Register
 ******************************************************************************/

/*!
 * @brief NV_FOPT - Non-volatile Flash Option Register (RO)
 *
 * Reset value: 0x3DU
 */
/*!
 * @name Constants and macros for entire NV_FOPT register
 */
/*@{*/
#define NV_RD_FOPT(base)         (NV_FOPT_REG(base))
/*@}*/

/*
 * Constants & macros for individual NV_FOPT bitfields
 */

/*!
 * @name Register NV_FOPT, field LPBOOT[0] (RO)
 *
 * Values:
 * - 0b0 - Low-power boot
 * - 0b1 - Normal boot
 */
/*@{*/
/*! @brief Read current value of the NV_FOPT_LPBOOT field. */
#define NV_RD_FOPT_LPBOOT(base) ((NV_FOPT_REG(base) & NV_FOPT_LPBOOT_MASK) >> NV_FOPT_LPBOOT_SHIFT)
#define NV_BRD_FOPT_LPBOOT(base) (BITBAND_ACCESS8(&NV_FOPT_REG(base), NV_FOPT_LPBOOT_SHIFT))
/*@}*/

/*!
 * @name Register NV_FOPT, field BOOTPIN_OPT[1] (RO)
 *
 * Values:
 * - 0b0 - Force Boot from ROM if BOOTCFG0 asserted, where BOOTCFG0 is the boot
 *     config function which is muxed with NMI pin
 * - 0b1 - Boot source configured by FOPT (BOOTSRC_SEL) bits
 */
/*@{*/
/*! @brief Read current value of the NV_FOPT_BOOTPIN_OPT field. */
#define NV_RD_FOPT_BOOTPIN_OPT(base) ((NV_FOPT_REG(base) & NV_FOPT_BOOTPIN_OPT_MASK) >> NV_FOPT_BOOTPIN_OPT_SHIFT)
#define NV_BRD_FOPT_BOOTPIN_OPT(base) (BITBAND_ACCESS8(&NV_FOPT_REG(base), NV_FOPT_BOOTPIN_OPT_SHIFT))
/*@}*/

/*!
 * @name Register NV_FOPT, field NMI_DIS[2] (RO)
 *
 * Values:
 * - 0b0 - NMI interrupts are always blocked
 * - 0b1 - NMI_b pin/interrupts reset default to enabled
 */
/*@{*/
/*! @brief Read current value of the NV_FOPT_NMI_DIS field. */
#define NV_RD_FOPT_NMI_DIS(base) ((NV_FOPT_REG(base) & NV_FOPT_NMI_DIS_MASK) >> NV_FOPT_NMI_DIS_SHIFT)
#define NV_BRD_FOPT_NMI_DIS(base) (BITBAND_ACCESS8(&NV_FOPT_REG(base), NV_FOPT_NMI_DIS_SHIFT))
/*@}*/

/*!
 * @name Register NV_FOPT, field FAST_INIT[5] (RO)
 *
 * Values:
 * - 0b0 - Slower initialization
 * - 0b1 - Fast Initialization
 */
/*@{*/
/*! @brief Read current value of the NV_FOPT_FAST_INIT field. */
#define NV_RD_FOPT_FAST_INIT(base) ((NV_FOPT_REG(base) & NV_FOPT_FAST_INIT_MASK) >> NV_FOPT_FAST_INIT_SHIFT)
#define NV_BRD_FOPT_FAST_INIT(base) (BITBAND_ACCESS8(&NV_FOPT_REG(base), NV_FOPT_FAST_INIT_SHIFT))
/*@}*/

/*!
 * @name Register NV_FOPT, field BOOTSRC_SEL[7:6] (RO)
 *
 * Values:
 * - 0b00 - Boot from Flash
 * - 0b10 - Boot from ROM, configure QSPI0, and enter boot loader mode.
 * - 0b11 - Boot from ROM and enter boot loader mode.
 */
/*@{*/
/*! @brief Read current value of the NV_FOPT_BOOTSRC_SEL field. */
#define NV_RD_FOPT_BOOTSRC_SEL(base) ((NV_FOPT_REG(base) & NV_FOPT_BOOTSRC_SEL_MASK) >> NV_FOPT_BOOTSRC_SEL_SHIFT)
#define NV_BRD_FOPT_BOOTSRC_SEL(base) (NV_RD_FOPT_BOOTSRC_SEL(base))
/*@}*/

/*
 * MK82F25615 OSC
 *
 * Oscillator
 *
 * Registers defined in this header file:
 * - OSC_CR - OSC Control Register
 * - OSC_DIV - OSC_DIV
 */

#define OSC_INSTANCE_COUNT (1U) /*!< Number of instances of the OSC module. */
#define OSC_IDX (0U) /*!< Instance number for OSC. */

/*******************************************************************************
 * OSC_CR - OSC Control Register
 ******************************************************************************/

/*!
 * @brief OSC_CR - OSC Control Register (RW)
 *
 * Reset value: 0x00U
 *
 * After OSC is enabled and starts generating the clocks, the configurations
 * such as low power and frequency range, must not be changed.
 */
/*!
 * @name Constants and macros for entire OSC_CR register
 */
/*@{*/
#define OSC_RD_CR(base)          (OSC_CR_REG(base))
#define OSC_WR_CR(base, value)   (OSC_CR_REG(base) = (value))
#define OSC_RMW_CR(base, mask, value) (OSC_WR_CR(base, (OSC_RD_CR(base) & ~(mask)) | (value)))
#define OSC_SET_CR(base, value)  (BME_OR8(&OSC_CR_REG(base), (uint8_t)(value)))
#define OSC_CLR_CR(base, value)  (BME_AND8(&OSC_CR_REG(base), (uint8_t)(~(value))))
#define OSC_TOG_CR(base, value)  (BME_XOR8(&OSC_CR_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual OSC_CR bitfields
 */

/*!
 * @name Register OSC_CR, field SC16P[0] (RW)
 *
 * Configures the oscillator load.
 *
 * Values:
 * - 0b0 - Disable the selection.
 * - 0b1 - Add 16 pF capacitor to the oscillator load.
 */
/*@{*/
/*! @brief Read current value of the OSC_CR_SC16P field. */
#define OSC_RD_CR_SC16P(base) ((OSC_CR_REG(base) & OSC_CR_SC16P_MASK) >> OSC_CR_SC16P_SHIFT)
#define OSC_BRD_CR_SC16P(base) (BME_UBFX8(&OSC_CR_REG(base), OSC_CR_SC16P_SHIFT, OSC_CR_SC16P_WIDTH))

/*! @brief Set the SC16P field to a new value. */
#define OSC_WR_CR_SC16P(base, value) (OSC_RMW_CR(base, OSC_CR_SC16P_MASK, OSC_CR_SC16P(value)))
#define OSC_BWR_CR_SC16P(base, value) (BME_BFI8(&OSC_CR_REG(base), ((uint8_t)(value) << OSC_CR_SC16P_SHIFT), OSC_CR_SC16P_SHIFT, OSC_CR_SC16P_WIDTH))
/*@}*/

/*!
 * @name Register OSC_CR, field SC8P[1] (RW)
 *
 * Configures the oscillator load.
 *
 * Values:
 * - 0b0 - Disable the selection.
 * - 0b1 - Add 8 pF capacitor to the oscillator load.
 */
/*@{*/
/*! @brief Read current value of the OSC_CR_SC8P field. */
#define OSC_RD_CR_SC8P(base) ((OSC_CR_REG(base) & OSC_CR_SC8P_MASK) >> OSC_CR_SC8P_SHIFT)
#define OSC_BRD_CR_SC8P(base) (BME_UBFX8(&OSC_CR_REG(base), OSC_CR_SC8P_SHIFT, OSC_CR_SC8P_WIDTH))

/*! @brief Set the SC8P field to a new value. */
#define OSC_WR_CR_SC8P(base, value) (OSC_RMW_CR(base, OSC_CR_SC8P_MASK, OSC_CR_SC8P(value)))
#define OSC_BWR_CR_SC8P(base, value) (BME_BFI8(&OSC_CR_REG(base), ((uint8_t)(value) << OSC_CR_SC8P_SHIFT), OSC_CR_SC8P_SHIFT, OSC_CR_SC8P_WIDTH))
/*@}*/

/*!
 * @name Register OSC_CR, field SC4P[2] (RW)
 *
 * Configures the oscillator load.
 *
 * Values:
 * - 0b0 - Disable the selection.
 * - 0b1 - Add 4 pF capacitor to the oscillator load.
 */
/*@{*/
/*! @brief Read current value of the OSC_CR_SC4P field. */
#define OSC_RD_CR_SC4P(base) ((OSC_CR_REG(base) & OSC_CR_SC4P_MASK) >> OSC_CR_SC4P_SHIFT)
#define OSC_BRD_CR_SC4P(base) (BME_UBFX8(&OSC_CR_REG(base), OSC_CR_SC4P_SHIFT, OSC_CR_SC4P_WIDTH))

/*! @brief Set the SC4P field to a new value. */
#define OSC_WR_CR_SC4P(base, value) (OSC_RMW_CR(base, OSC_CR_SC4P_MASK, OSC_CR_SC4P(value)))
#define OSC_BWR_CR_SC4P(base, value) (BME_BFI8(&OSC_CR_REG(base), ((uint8_t)(value) << OSC_CR_SC4P_SHIFT), OSC_CR_SC4P_SHIFT, OSC_CR_SC4P_WIDTH))
/*@}*/

/*!
 * @name Register OSC_CR, field SC2P[3] (RW)
 *
 * Configures the oscillator load.
 *
 * Values:
 * - 0b0 - Disable the selection.
 * - 0b1 - Add 2 pF capacitor to the oscillator load.
 */
/*@{*/
/*! @brief Read current value of the OSC_CR_SC2P field. */
#define OSC_RD_CR_SC2P(base) ((OSC_CR_REG(base) & OSC_CR_SC2P_MASK) >> OSC_CR_SC2P_SHIFT)
#define OSC_BRD_CR_SC2P(base) (BME_UBFX8(&OSC_CR_REG(base), OSC_CR_SC2P_SHIFT, OSC_CR_SC2P_WIDTH))

/*! @brief Set the SC2P field to a new value. */
#define OSC_WR_CR_SC2P(base, value) (OSC_RMW_CR(base, OSC_CR_SC2P_MASK, OSC_CR_SC2P(value)))
#define OSC_BWR_CR_SC2P(base, value) (BME_BFI8(&OSC_CR_REG(base), ((uint8_t)(value) << OSC_CR_SC2P_SHIFT), OSC_CR_SC2P_SHIFT, OSC_CR_SC2P_WIDTH))
/*@}*/

/*!
 * @name Register OSC_CR, field EREFSTEN[5] (RW)
 *
 * Controls whether or not the external reference clock (OSCERCLK) remains
 * enabled when MCU enters Stop mode.
 *
 * Values:
 * - 0b0 - External reference clock is disabled in Stop mode.
 * - 0b1 - External reference clock stays enabled in Stop mode if ERCLKEN is set
 *     before entering Stop mode.
 */
/*@{*/
/*! @brief Read current value of the OSC_CR_EREFSTEN field. */
#define OSC_RD_CR_EREFSTEN(base) ((OSC_CR_REG(base) & OSC_CR_EREFSTEN_MASK) >> OSC_CR_EREFSTEN_SHIFT)
#define OSC_BRD_CR_EREFSTEN(base) (BME_UBFX8(&OSC_CR_REG(base), OSC_CR_EREFSTEN_SHIFT, OSC_CR_EREFSTEN_WIDTH))

/*! @brief Set the EREFSTEN field to a new value. */
#define OSC_WR_CR_EREFSTEN(base, value) (OSC_RMW_CR(base, OSC_CR_EREFSTEN_MASK, OSC_CR_EREFSTEN(value)))
#define OSC_BWR_CR_EREFSTEN(base, value) (BME_BFI8(&OSC_CR_REG(base), ((uint8_t)(value) << OSC_CR_EREFSTEN_SHIFT), OSC_CR_EREFSTEN_SHIFT, OSC_CR_EREFSTEN_WIDTH))
/*@}*/

/*!
 * @name Register OSC_CR, field ERCLKEN[7] (RW)
 *
 * Enables external reference clock (OSCERCLK) .
 *
 * Values:
 * - 0b0 - External reference clock is inactive.
 * - 0b1 - External reference clock is enabled.
 */
/*@{*/
/*! @brief Read current value of the OSC_CR_ERCLKEN field. */
#define OSC_RD_CR_ERCLKEN(base) ((OSC_CR_REG(base) & OSC_CR_ERCLKEN_MASK) >> OSC_CR_ERCLKEN_SHIFT)
#define OSC_BRD_CR_ERCLKEN(base) (BME_UBFX8(&OSC_CR_REG(base), OSC_CR_ERCLKEN_SHIFT, OSC_CR_ERCLKEN_WIDTH))

/*! @brief Set the ERCLKEN field to a new value. */
#define OSC_WR_CR_ERCLKEN(base, value) (OSC_RMW_CR(base, OSC_CR_ERCLKEN_MASK, OSC_CR_ERCLKEN(value)))
#define OSC_BWR_CR_ERCLKEN(base, value) (BME_BFI8(&OSC_CR_REG(base), ((uint8_t)(value) << OSC_CR_ERCLKEN_SHIFT), OSC_CR_ERCLKEN_SHIFT, OSC_CR_ERCLKEN_WIDTH))
/*@}*/

/*******************************************************************************
 * OSC_DIV - OSC_DIV
 ******************************************************************************/

/*!
 * @brief OSC_DIV - OSC_DIV (RW)
 *
 * Reset value: 0x00U
 *
 * OSC Clock divider register.
 */
/*!
 * @name Constants and macros for entire OSC_DIV register
 */
/*@{*/
#define OSC_RD_DIV(base)         (OSC_DIV_REG(base))
#define OSC_WR_DIV(base, value)  (OSC_DIV_REG(base) = (value))
#define OSC_RMW_DIV(base, mask, value) (OSC_WR_DIV(base, (OSC_RD_DIV(base) & ~(mask)) | (value)))
#define OSC_SET_DIV(base, value) (BME_OR8(&OSC_DIV_REG(base), (uint8_t)(value)))
#define OSC_CLR_DIV(base, value) (BME_AND8(&OSC_DIV_REG(base), (uint8_t)(~(value))))
#define OSC_TOG_DIV(base, value) (BME_XOR8(&OSC_DIV_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual OSC_DIV bitfields
 */

/*!
 * @name Register OSC_DIV, field ERPS[7:6] (RW)
 *
 * ERCLK prescaler. These two bits are used to divide the ERCLK output. The
 * un-divided ERCLK output is not affected by these two bits.
 *
 * Values:
 * - 0b00 - The divisor ratio is 1.
 * - 0b01 - The divisor ratio is 2.
 * - 0b10 - The divisor ratio is 4.
 * - 0b11 - The divisor ratio is 8.
 */
/*@{*/
/*! @brief Read current value of the OSC_DIV_ERPS field. */
#define OSC_RD_DIV_ERPS(base) ((OSC_DIV_REG(base) & OSC_DIV_ERPS_MASK) >> OSC_DIV_ERPS_SHIFT)
#define OSC_BRD_DIV_ERPS(base) (BME_UBFX8(&OSC_DIV_REG(base), OSC_DIV_ERPS_SHIFT, OSC_DIV_ERPS_WIDTH))

/*! @brief Set the ERPS field to a new value. */
#define OSC_WR_DIV_ERPS(base, value) (OSC_RMW_DIV(base, OSC_DIV_ERPS_MASK, OSC_DIV_ERPS(value)))
#define OSC_BWR_DIV_ERPS(base, value) (BME_BFI8(&OSC_DIV_REG(base), ((uint8_t)(value) << OSC_DIV_ERPS_SHIFT), OSC_DIV_ERPS_SHIFT, OSC_DIV_ERPS_WIDTH))
/*@}*/

/*
 * MK82F25615 OTFAD
 *
 * OTFAD
 *
 * Registers defined in this header file:
 * - OTFAD_CR - Control Register
 * - OTFAD_SR - Status Register
 * - OTFAD_CRC - Cyclic Redundancy Check Register
 * - OTFAD_CTX_KEY - AES Key Word0
 * - OTFAD_CTX_CTR - AES Counter Word0
 * - OTFAD_CTX_RGD - AES Region Descriptor Word0
 */

#define OTFAD_INSTANCE_COUNT (1U) /*!< Number of instances of the OTFAD module. */
#define OTFAD_IDX (0U) /*!< Instance number for OTFAD. */

/*******************************************************************************
 * OTFAD_CR - Control Register
 ******************************************************************************/

/*!
 * @brief OTFAD_CR - Control Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register defines the operating configuration of the OTFAD including a
 * global enable indicator. There are 2 register fields in the CR that control the
 * OTFAD configuration. These fields (GE, RRAE) are generated based on both the
 * contents of the CR plus static input configuration signals. For both bits, the
 * contents of the CR flag is logically summed (OR'd) with the static input
 * configuration signals to form the actual control used by the OTFAD. Reads of the CR
 * return the logical summation of these configuration controls. Entry into the
 * LDM or SVM modes clears both indicators. For more details, see OTFAD
 * configuration details.
 */
/*!
 * @name Constants and macros for entire OTFAD_CR register
 */
/*@{*/
#define OTFAD_RD_CR(base)        (OTFAD_CR_REG(base))
#define OTFAD_WR_CR(base, value) (OTFAD_CR_REG(base) = (value))
#define OTFAD_RMW_CR(base, mask, value) (OTFAD_WR_CR(base, (OTFAD_RD_CR(base) & ~(mask)) | (value)))
#define OTFAD_SET_CR(base, value) (BME_OR32(&OTFAD_CR_REG(base), (uint32_t)(value)))
#define OTFAD_CLR_CR(base, value) (BME_AND32(&OTFAD_CR_REG(base), (uint32_t)(~(value))))
#define OTFAD_TOG_CR(base, value) (BME_XOR32(&OTFAD_CR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual OTFAD_CR bitfields
 */

/*!
 * @name Register OTFAD_CR, field FSVM[2] (RW)
 *
 * This field is intended to provide a mechanism for software testing of entry
 * into the Security Violation Mode (SVM). This indicator is sticky; once set, it
 * remains asserted until the next system reset, when it is cleared.
 *
 * Values:
 * - 0b0 - No effect on the operating mode.
 * - 0b1 - Force entry into SVM after a write with this data bit set and the
 *     data bit associated with FLDM cleared. SR[MODE] signals the operating mode.
 */
/*@{*/
/*! @brief Read current value of the OTFAD_CR_FSVM field. */
#define OTFAD_RD_CR_FSVM(base) ((OTFAD_CR_REG(base) & OTFAD_CR_FSVM_MASK) >> OTFAD_CR_FSVM_SHIFT)
#define OTFAD_BRD_CR_FSVM(base) (BME_UBFX32(&OTFAD_CR_REG(base), OTFAD_CR_FSVM_SHIFT, OTFAD_CR_FSVM_WIDTH))

/*! @brief Set the FSVM field to a new value. */
#define OTFAD_WR_CR_FSVM(base, value) (OTFAD_RMW_CR(base, OTFAD_CR_FSVM_MASK, OTFAD_CR_FSVM(value)))
#define OTFAD_BWR_CR_FSVM(base, value) (BME_BFI32(&OTFAD_CR_REG(base), ((uint32_t)(value) << OTFAD_CR_FSVM_SHIFT), OTFAD_CR_FSVM_SHIFT, OTFAD_CR_FSVM_WIDTH))
/*@}*/

/*!
 * @name Register OTFAD_CR, field FLDM[3] (RW)
 *
 * This field is intended to provide a mechanism for software testing of entry
 * into the Logically Disabled Mode (LDM). This indicator is sticky; once set, it
 * remains asserted until the next system reset, when it is cleared.
 *
 * Values:
 * - 0b0 - No effect on the operating mode.
 * - 0b1 - Force entry into LDM after a write with this data bit set. SR[MODE]
 *     signals the operating mode.
 */
/*@{*/
/*! @brief Read current value of the OTFAD_CR_FLDM field. */
#define OTFAD_RD_CR_FLDM(base) ((OTFAD_CR_REG(base) & OTFAD_CR_FLDM_MASK) >> OTFAD_CR_FLDM_SHIFT)
#define OTFAD_BRD_CR_FLDM(base) (BME_UBFX32(&OTFAD_CR_REG(base), OTFAD_CR_FLDM_SHIFT, OTFAD_CR_FLDM_WIDTH))

/*! @brief Set the FLDM field to a new value. */
#define OTFAD_WR_CR_FLDM(base, value) (OTFAD_RMW_CR(base, OTFAD_CR_FLDM_MASK, OTFAD_CR_FLDM(value)))
#define OTFAD_BWR_CR_FLDM(base, value) (BME_BFI32(&OTFAD_CR_REG(base), ((uint32_t)(value) << OTFAD_CR_FLDM_SHIFT), OTFAD_CR_FLDM_SHIFT, OTFAD_CR_FLDM_WIDTH))
/*@}*/

/*!
 * @name Register OTFAD_CR, field RRAE[7] (RW)
 *
 * If this bit is asserted, only the CR, SR and CRC registers can be accessed;
 * attempted accesses of all other registers are treated as RAZ/WI
 * (read-as-zero/write-ignore). This indicator is sticky; once set, it remains asserted until
 * the next system reset, when it is cleared. It is also asserted by entry into the
 * LDM or SVM modes. The value of this field is reflected in the SR[RRAM] flag.
 *
 * Values:
 * - 0b0 - Register access is fully enabled. The OTFAD programming model
 *     registers can be accessed "normally".
 * - 0b1 - Register access is restricted and only the CR, SR and CRC can be
 *     accessed; others are treated as RAZ/WI.
 */
/*@{*/
/*! @brief Read current value of the OTFAD_CR_RRAE field. */
#define OTFAD_RD_CR_RRAE(base) ((OTFAD_CR_REG(base) & OTFAD_CR_RRAE_MASK) >> OTFAD_CR_RRAE_SHIFT)
#define OTFAD_BRD_CR_RRAE(base) (BME_UBFX32(&OTFAD_CR_REG(base), OTFAD_CR_RRAE_SHIFT, OTFAD_CR_RRAE_WIDTH))

/*! @brief Set the RRAE field to a new value. */
#define OTFAD_WR_CR_RRAE(base, value) (OTFAD_RMW_CR(base, OTFAD_CR_RRAE_MASK, OTFAD_CR_RRAE(value)))
#define OTFAD_BWR_CR_RRAE(base, value) (BME_BFI32(&OTFAD_CR_REG(base), ((uint32_t)(value) << OTFAD_CR_RRAE_SHIFT), OTFAD_CR_RRAE_SHIFT, OTFAD_CR_RRAE_WIDTH))
/*@}*/

/*!
 * @name Register OTFAD_CR, field CCTX[17:16] (RW)
 *
 * This field defines which context has its CRC check enabled when CR[CRCE] = 1.
 *
 * Values:
 * - 0b00 - Enable CTX0 CRC check.
 * - 0b01 - Enable CTX1 CRC check.
 * - 0b10 - Enable CTX2 CRC check.
 * - 0b11 - Enable CTX3 CRC check.
 */
/*@{*/
/*! @brief Read current value of the OTFAD_CR_CCTX field. */
#define OTFAD_RD_CR_CCTX(base) ((OTFAD_CR_REG(base) & OTFAD_CR_CCTX_MASK) >> OTFAD_CR_CCTX_SHIFT)
#define OTFAD_BRD_CR_CCTX(base) (BME_UBFX32(&OTFAD_CR_REG(base), OTFAD_CR_CCTX_SHIFT, OTFAD_CR_CCTX_WIDTH))

/*! @brief Set the CCTX field to a new value. */
#define OTFAD_WR_CR_CCTX(base, value) (OTFAD_RMW_CR(base, OTFAD_CR_CCTX_MASK, OTFAD_CR_CCTX(value)))
#define OTFAD_BWR_CR_CCTX(base, value) (BME_BFI32(&OTFAD_CR_REG(base), ((uint32_t)(value) << OTFAD_CR_CCTX_SHIFT), OTFAD_CR_CCTX_SHIFT, OTFAD_CR_CCTX_WIDTH))
/*@}*/

/*!
 * @name Register OTFAD_CR, field CRCE[20] (RW)
 *
 * This field controls if the standard 32-bit Ethernet cyclic redundancy check
 * (CRC) for a given context is enabled. It is cleared by entry into the LDM or
 * SVM modes.
 *
 * Values:
 * - 0b0 - CRC-32 is disabled.
 * - 0b1 - CRC-32 for the context defined by CR[CCTRX] is enabled.
 */
/*@{*/
/*! @brief Read current value of the OTFAD_CR_CRCE field. */
#define OTFAD_RD_CR_CRCE(base) ((OTFAD_CR_REG(base) & OTFAD_CR_CRCE_MASK) >> OTFAD_CR_CRCE_SHIFT)
#define OTFAD_BRD_CR_CRCE(base) (BME_UBFX32(&OTFAD_CR_REG(base), OTFAD_CR_CRCE_SHIFT, OTFAD_CR_CRCE_WIDTH))

/*! @brief Set the CRCE field to a new value. */
#define OTFAD_WR_CR_CRCE(base, value) (OTFAD_RMW_CR(base, OTFAD_CR_CRCE_MASK, OTFAD_CR_CRCE(value)))
#define OTFAD_BWR_CR_CRCE(base, value) (BME_BFI32(&OTFAD_CR_REG(base), ((uint32_t)(value) << OTFAD_CR_CRCE_SHIFT), OTFAD_CR_CRCE_SHIFT, OTFAD_CR_CRCE_WIDTH))
/*@}*/

/*!
 * @name Register OTFAD_CR, field CRCI[21] (WORZ)
 *
 * When set, this field forces an initialization of the CRC data register to all
 * ones. This field always reads as zero.
 *
 * Values:
 * - 0b0 - CRC data register is unaffected.
 * - 0b1 - CRC data register is immediately initialized after a write with this
 *     data bit set.
 */
/*@{*/
/*! @brief Set the CRCI field to a new value. */
#define OTFAD_WR_CR_CRCI(base, value) (OTFAD_RMW_CR(base, OTFAD_CR_CRCI_MASK, OTFAD_CR_CRCI(value)))
#define OTFAD_BWR_CR_CRCI(base, value) (BME_BFI32(&OTFAD_CR_REG(base), ((uint32_t)(value) << OTFAD_CR_CRCI_SHIFT), OTFAD_CR_CRCI_SHIFT, OTFAD_CR_CRCI_WIDTH))
/*@}*/

/*!
 * @name Register OTFAD_CR, field GE[31] (RW)
 *
 * This field enables the OTFAD operation. It is cleared by entry into the LDM
 * or SVM modes.
 *
 * Values:
 * - 0b0 - OTFAD has decryption disabled, and bypasses all data fetched by the
 *     QuadSPI.
 * - 0b1 - OTFAD has decryption enabled, and processes fetched data as defined
 *     by the hardware configuration.
 */
/*@{*/
/*! @brief Read current value of the OTFAD_CR_GE field. */
#define OTFAD_RD_CR_GE(base) ((OTFAD_CR_REG(base) & OTFAD_CR_GE_MASK) >> OTFAD_CR_GE_SHIFT)
#define OTFAD_BRD_CR_GE(base) (BME_UBFX32(&OTFAD_CR_REG(base), OTFAD_CR_GE_SHIFT, OTFAD_CR_GE_WIDTH))

/*! @brief Set the GE field to a new value. */
#define OTFAD_WR_CR_GE(base, value) (OTFAD_RMW_CR(base, OTFAD_CR_GE_MASK, OTFAD_CR_GE(value)))
#define OTFAD_BWR_CR_GE(base, value) (BME_BFI32(&OTFAD_CR_REG(base), ((uint32_t)(value) << OTFAD_CR_GE_SHIFT), OTFAD_CR_GE_SHIFT, OTFAD_CR_GE_WIDTH))
/*@}*/

/*******************************************************************************
 * OTFAD_SR - Status Register
 ******************************************************************************/

/*!
 * @brief OTFAD_SR - Status Register (RO)
 *
 * Reset value: 0x00000040U
 *
 * This register provides OTFAD status information.
 */
/*!
 * @name Constants and macros for entire OTFAD_SR register
 */
/*@{*/
#define OTFAD_RD_SR(base)        (OTFAD_SR_REG(base))
/*@}*/

/*
 * Constants & macros for individual OTFAD_SR bitfields
 */

/*!
 * @name Register OTFAD_SR, field MDPCP[1] (RO)
 *
 * This field signals the presence of the Multi-Dimensional Parity Checker. For
 * this device, it always has the value 0.
 */
/*@{*/
/*! @brief Read current value of the OTFAD_SR_MDPCP field. */
#define OTFAD_RD_SR_MDPCP(base) ((OTFAD_SR_REG(base) & OTFAD_SR_MDPCP_MASK) >> OTFAD_SR_MDPCP_SHIFT)
#define OTFAD_BRD_SR_MDPCP(base) (BME_UBFX32(&OTFAD_SR_REG(base), OTFAD_SR_MDPCP_SHIFT, OTFAD_SR_MDPCP_WIDTH))
/*@}*/

/*!
 * @name Register OTFAD_SR, field MODE[3:2] (RO)
 *
 * This field specifies the OTFAD's operating mode. Input configuration and
 * control signals force entry from normal mode (NRM) into one of the two special
 * operating modes (LDM, SVM). See Modes of operation for more details.
 *
 * Values:
 * - 0b00 - Operating in Normal mode (NRM)
 * - 0b01 - Unused (reserved)
 * - 0b10 - Operating in Security Violation Mode (SVM)
 * - 0b11 - Operating in Logically Disabled Mode (LDM)
 */
/*@{*/
/*! @brief Read current value of the OTFAD_SR_MODE field. */
#define OTFAD_RD_SR_MODE(base) ((OTFAD_SR_REG(base) & OTFAD_SR_MODE_MASK) >> OTFAD_SR_MODE_SHIFT)
#define OTFAD_BRD_SR_MODE(base) (BME_UBFX32(&OTFAD_SR_REG(base), OTFAD_SR_MODE_SHIFT, OTFAD_SR_MODE_WIDTH))
/*@}*/

/*!
 * @name Register OTFAD_SR, field NCTX[7:4] (RO)
 *
 * This field signals the number of implemented hardware contexts. It reads as 4.
 */
/*@{*/
/*! @brief Read current value of the OTFAD_SR_NCTX field. */
#define OTFAD_RD_SR_NCTX(base) ((OTFAD_SR_REG(base) & OTFAD_SR_NCTX_MASK) >> OTFAD_SR_NCTX_SHIFT)
#define OTFAD_BRD_SR_NCTX(base) (BME_UBFX32(&OTFAD_SR_REG(base), OTFAD_SR_NCTX_SHIFT, OTFAD_SR_NCTX_WIDTH))
/*@}*/

/*!
 * @name Register OTFAD_SR, field HRL[27:24] (RO)
 *
 * This field reads as zero.
 */
/*@{*/
/*! @brief Read current value of the OTFAD_SR_HRL field. */
#define OTFAD_RD_SR_HRL(base) ((OTFAD_SR_REG(base) & OTFAD_SR_HRL_MASK) >> OTFAD_SR_HRL_SHIFT)
#define OTFAD_BRD_SR_HRL(base) (BME_UBFX32(&OTFAD_SR_REG(base), OTFAD_SR_HRL_SHIFT, OTFAD_SR_HRL_WIDTH))
/*@}*/

/*!
 * @name Register OTFAD_SR, field RRAM[28] (RO)
 *
 * This indicator signals that accesses to the slave peripheral bus are
 * operating in a restricted mode, where only the CR, SR and CRC registers can be
 * referenced. This access mode can be defined by the assertion of CR[RRAE] = 1.
 * Attempted accesses to other registers are treated as RAZ/WI. This flag is identical
 * to the read value of CR[RRAE].
 *
 * Values:
 * - 0b0 - Register access is fully enabled. The OTFAD programming model
 *     registers can be accessed "normally".
 * - 0b1 - Register access is restricted and only the CR, SR and CRC can be
 *     accessed; others are treated as RAZ/WI.
 */
/*@{*/
/*! @brief Read current value of the OTFAD_SR_RRAM field. */
#define OTFAD_RD_SR_RRAM(base) ((OTFAD_SR_REG(base) & OTFAD_SR_RRAM_MASK) >> OTFAD_SR_RRAM_SHIFT)
#define OTFAD_BRD_SR_RRAM(base) (BME_UBFX32(&OTFAD_SR_REG(base), OTFAD_SR_RRAM_SHIFT, OTFAD_SR_RRAM_WIDTH))
/*@}*/

/*!
 * @name Register OTFAD_SR, field GEM[29] (RO)
 *
 * This indicator signals the global enabled/disabled state of the OTFAD. This
 * flag is identical to the read value of CR[GE].
 *
 * Values:
 * - 0b0 - OTFAD is disabled, and bypasses all data fetched by the QuadSPI.
 * - 0b1 - OTFAD is enabled, and processes data fetched by the QuadSPI as
 *     defined by the hardware configuration.
 */
/*@{*/
/*! @brief Read current value of the OTFAD_SR_GEM field. */
#define OTFAD_RD_SR_GEM(base) ((OTFAD_SR_REG(base) & OTFAD_SR_GEM_MASK) >> OTFAD_SR_GEM_SHIFT)
#define OTFAD_BRD_SR_GEM(base) (BME_UBFX32(&OTFAD_SR_REG(base), OTFAD_SR_GEM_SHIFT, OTFAD_SR_GEM_WIDTH))
/*@}*/

/*******************************************************************************
 * OTFAD_CRC - Cyclic Redundancy Check Register
 ******************************************************************************/

/*!
 * @brief OTFAD_CRC - Cyclic Redundancy Check Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The CRC register is the data register used during OTFAD cyclic redundancy
 * check operations. The CRC implements the standard 32-bit "Ethernet" polynomial,
 * commonly expressed as 0x04C1_1DB7 or mathematically as x32 + x26 + x23 + x22 +
 * x16 + x12 + x11 + x10 + x8 + x7 + x5 + x4 + x2 + x + 1. The OTFAD supports
 * optional CRC calculations for a selected context. For all uses, the data being
 * checked is the plaintext output, processed as a little endian array of 8-bit
 * bytes. It must be accessed sequentially from the lowest address to the highest
 * address. For CRC checking on a selected context, the hardware must be configured
 * by writing the CR[CRCI = 1, CRCE = 1, CCTX = n] bit fields. This initializes
 * the CRC to 0xFFFF_FFFF, enables it and selects context n as the data source.
 * See Context CRC for additional information. It should also be noted that the
 * CRC hardware implements a data pipeline and the CRC register is not updated with
 * its final value until 2 clocks after the last input data is presented to the
 * OTFAD. For typical system use cases, this exposed pipeline time is not visible
 * to reads of this register on the slave peripheral bus.
 */
/*!
 * @name Constants and macros for entire OTFAD_CRC register
 */
/*@{*/
#define OTFAD_RD_CRC(base)       (OTFAD_CRC_REG(base))
#define OTFAD_WR_CRC(base, value) (OTFAD_CRC_REG(base) = (value))
#define OTFAD_RMW_CRC(base, mask, value) (OTFAD_WR_CRC(base, (OTFAD_RD_CRC(base) & ~(mask)) | (value)))
#define OTFAD_SET_CRC(base, value) (BME_OR32(&OTFAD_CRC_REG(base), (uint32_t)(value)))
#define OTFAD_CLR_CRC(base, value) (BME_AND32(&OTFAD_CRC_REG(base), (uint32_t)(~(value))))
#define OTFAD_TOG_CRC(base, value) (BME_XOR32(&OTFAD_CRC_REG(base), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * OTFAD_CTX_KEY - AES Key Word0
 ******************************************************************************/

/*!
 * @brief OTFAD_CTX_KEY - AES Key Word0 (RW)
 *
 * Reset value: 0x00000000U
 *
 * The CTXn_KEY_Wm registers provide a 2-dimensional data structure for local
 * OTFAD storage of the 128-bit key for context "n". There are four consecutive
 * memory-mapped register words containing the key used for the AES calculations
 * associated with the given context. The programming model view of the CTXn_KEY_Wm
 * registers is a little-endian 16-element byte data array, while the 128-bit key
 * is defined as the concatenation of {A0, A1, A2,..., A14, A15}.
 */
/*!
 * @name Constants and macros for entire OTFAD_CTX_KEY register
 */
/*@{*/
#define OTFAD_RD_CTX_KEY(base, index, index2) (OTFAD_CTX_KEY_REG(base, index, index2))
#define OTFAD_WR_CTX_KEY(base, index, index2, value) (OTFAD_CTX_KEY_REG(base, index, index2) = (value))
#define OTFAD_RMW_CTX_KEY(base, index, index2, mask, value) (OTFAD_WR_CTX_KEY(base, index, index2, (OTFAD_RD_CTX_KEY(base, index, index2) & ~(mask)) | (value)))
#define OTFAD_SET_CTX_KEY(base, index, index2, value) (BME_OR32(&OTFAD_CTX_KEY_REG(base, index, index2), (uint32_t)(value)))
#define OTFAD_CLR_CTX_KEY(base, index, index2, value) (BME_AND32(&OTFAD_CTX_KEY_REG(base, index, index2), (uint32_t)(~(value))))
#define OTFAD_TOG_CTX_KEY(base, index, index2, value) (BME_XOR32(&OTFAD_CTX_KEY_REG(base, index, index2), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * OTFAD_CTX_CTR - AES Counter Word0
 ******************************************************************************/

/*!
 * @brief OTFAD_CTX_CTR - AES Counter Word0 (RW)
 *
 * Reset value: 0x00000000U
 *
 * The CTXn_CTR_Wm registers provide a 2-dimensional data structure for local
 * OTFAD storage of 64 bits of the counter value for context "n". There are two
 * consecutive memory-mapped register words defining the upper 96 bits of the
 * counter used for the AES calculations associated with the given context. The
 * programming model view of the CTXn_CTR_Wm registers is a little-endian 8-element byte
 * data array. The entire 128-bit counter value is defined as the concatenation
 * of four 32-bit values: CTR[127-0] = {CTR_W0[C0...C3], CTR_W1[C4...C7],
 * CTR_W0[C0...C3] ^ CTR_W1[C4...C7], systemAddress[31-4], 0h}
 */
/*!
 * @name Constants and macros for entire OTFAD_CTX_CTR register
 */
/*@{*/
#define OTFAD_RD_CTX_CTR(base, index, index2) (OTFAD_CTX_CTR_REG(base, index, index2))
#define OTFAD_WR_CTX_CTR(base, index, index2, value) (OTFAD_CTX_CTR_REG(base, index, index2) = (value))
#define OTFAD_RMW_CTX_CTR(base, index, index2, mask, value) (OTFAD_WR_CTX_CTR(base, index, index2, (OTFAD_RD_CTX_CTR(base, index, index2) & ~(mask)) | (value)))
#define OTFAD_SET_CTX_CTR(base, index, index2, value) (BME_OR32(&OTFAD_CTX_CTR_REG(base, index, index2), (uint32_t)(value)))
#define OTFAD_CLR_CTX_CTR(base, index, index2, value) (BME_AND32(&OTFAD_CTX_CTR_REG(base, index, index2), (uint32_t)(~(value))))
#define OTFAD_TOG_CTX_CTR(base, index, index2, value) (BME_XOR32(&OTFAD_CTX_CTR_REG(base, index, index2), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * OTFAD_CTX_RGD - AES Region Descriptor Word0
 ******************************************************************************/

/*!
 * @brief OTFAD_CTX_RGD - AES Region Descriptor Word0 (RW)
 *
 * Reset value: 0x00000000U
 *
 * The CTXn_RGD_Wm registers provide a 2-dimensional data structure for local
 * OTFAD storage of 64 bits of memory region descriptor for context "n". There are
 * two consecutive memory-mapped register words defining the starting and ending
 * addresses for the external flash memory region associated with the given
 * context. Each memory region context defines a specified section of external flash
 * memory associated with the given context and its associated 128-bit key and
 * 128-bit counter values. The context memory regions are defined as modulo-1024
 * bytes to match the AMBA-AHB protocol requirement that no bursting transfer cross
 * that boundary. As a result, no AHB command, either single transfer, or any
 * type of wrapping or incrementing burst, can cross any 1 KB boundary. This means
 * that any AHB transfer is limited to a single context for purposes of AES
 * decryption.
 */
/*!
 * @name Constants and macros for entire OTFAD_CTX_RGD register
 */
/*@{*/
#define OTFAD_RD_CTX_RGD(base, index, index2) (OTFAD_CTX_RGD_REG(base, index, index2))
#define OTFAD_WR_CTX_RGD(base, index, index2, value) (OTFAD_CTX_RGD_REG(base, index, index2) = (value))
#define OTFAD_RMW_CTX_RGD(base, index, index2, mask, value) (OTFAD_WR_CTX_RGD(base, index, index2, (OTFAD_RD_CTX_RGD(base, index, index2) & ~(mask)) | (value)))
#define OTFAD_SET_CTX_RGD(base, index, index2, value) (BME_OR32(&OTFAD_CTX_RGD_REG(base, index, index2), (uint32_t)(value)))
#define OTFAD_CLR_CTX_RGD(base, index, index2, value) (BME_AND32(&OTFAD_CTX_RGD_REG(base, index, index2), (uint32_t)(~(value))))
#define OTFAD_TOG_CTX_RGD(base, index, index2, value) (BME_XOR32(&OTFAD_CTX_RGD_REG(base, index, index2), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual OTFAD_CTX_RGD bitfields
 */

/*!
 * @name Register OTFAD_CTX_RGD, field VLD[0] (RW)
 *
 * This field signals if the context is valid or not.
 *
 * Values:
 * - 0b0 - Context is invalid.
 * - 0b1 - Context is valid.
 */
/*@{*/
/*! @brief Read current value of the OTFAD_CTX_RGD_VLD field. */
#define OTFAD_RD_CTX_RGD_VLD(base, index, index2) ((OTFAD_CTX_RGD_REG(base, index, index2) & OTFAD_CTX_RGD_VLD_MASK) >> OTFAD_CTX_RGD_VLD_SHIFT)
#define OTFAD_BRD_CTX_RGD_VLD(base, index, index2) (BME_UBFX32(&OTFAD_CTX_RGD_REG(base, index, index2), OTFAD_CTX_RGD_VLD_SHIFT, OTFAD_CTX_RGD_VLD_WIDTH))

/*! @brief Set the VLD field to a new value. */
#define OTFAD_WR_CTX_RGD_VLD(base, index, index2, value) (OTFAD_RMW_CTX_RGD(base, index, index2, OTFAD_CTX_RGD_VLD_MASK, OTFAD_CTX_RGD_VLD(value)))
#define OTFAD_BWR_CTX_RGD_VLD(base, index, index2, value) (BME_BFI32(&OTFAD_CTX_RGD_REG(base, index, index2), ((uint32_t)(value) << OTFAD_CTX_RGD_VLD_SHIFT), OTFAD_CTX_RGD_VLD_SHIFT, OTFAD_CTX_RGD_VLD_WIDTH))
/*@}*/

/*!
 * @name Register OTFAD_CTX_RGD, field ADE[1] (RW)
 *
 * For accesses hitting in a valid context, this bit indicates if the fetched
 * data is to be decrypted or simply bypassed.
 *
 * Values:
 * - 0b0 - Bypass the fetched data.
 * - 0b1 - Perform the CTR-AES128 mode decryption on the fetched data.
 */
/*@{*/
/*! @brief Read current value of the OTFAD_CTX_RGD_ADE field. */
#define OTFAD_RD_CTX_RGD_ADE(base, index, index2) ((OTFAD_CTX_RGD_REG(base, index, index2) & OTFAD_CTX_RGD_ADE_MASK) >> OTFAD_CTX_RGD_ADE_SHIFT)
#define OTFAD_BRD_CTX_RGD_ADE(base, index, index2) (BME_UBFX32(&OTFAD_CTX_RGD_REG(base, index, index2), OTFAD_CTX_RGD_ADE_SHIFT, OTFAD_CTX_RGD_ADE_WIDTH))

/*! @brief Set the ADE field to a new value. */
#define OTFAD_WR_CTX_RGD_ADE(base, index, index2, value) (OTFAD_RMW_CTX_RGD(base, index, index2, OTFAD_CTX_RGD_ADE_MASK, OTFAD_CTX_RGD_ADE(value)))
#define OTFAD_BWR_CTX_RGD_ADE(base, index, index2, value) (BME_BFI32(&OTFAD_CTX_RGD_REG(base, index, index2), ((uint32_t)(value) << OTFAD_CTX_RGD_ADE_SHIFT), OTFAD_CTX_RGD_ADE_SHIFT, OTFAD_CTX_RGD_ADE_WIDTH))
/*@}*/

/*!
 * @name Register OTFAD_CTX_RGD, field RO[2] (RW)
 *
 * This field signals that the entire set of context registers (CTXn_KEY_W[0-3],
 * CTXn_CTR_W[0-1], CTXn_RGD_W[0-1] are read-only and cannot be modified. This
 * field is sticky and remains asserted until the next system reset. SR[RRAM]
 * provides another level of register access control and is independent of the RO
 * indicator.
 *
 * Values:
 * - 0b0 - The context registers can be accessed normally (as defined by
 *     SR[RRAM]).
 * - 0b1 - The context registers are read-only and accesses may be further
 *     restricted based on SR[RRAM].
 */
/*@{*/
/*! @brief Read current value of the OTFAD_CTX_RGD_RO field. */
#define OTFAD_RD_CTX_RGD_RO(base, index, index2) ((OTFAD_CTX_RGD_REG(base, index, index2) & OTFAD_CTX_RGD_RO_MASK) >> OTFAD_CTX_RGD_RO_SHIFT)
#define OTFAD_BRD_CTX_RGD_RO(base, index, index2) (BME_UBFX32(&OTFAD_CTX_RGD_REG(base, index, index2), OTFAD_CTX_RGD_RO_SHIFT, OTFAD_CTX_RGD_RO_WIDTH))

/*! @brief Set the RO field to a new value. */
#define OTFAD_WR_CTX_RGD_RO(base, index, index2, value) (OTFAD_RMW_CTX_RGD(base, index, index2, OTFAD_CTX_RGD_RO_MASK, OTFAD_CTX_RGD_RO(value)))
#define OTFAD_BWR_CTX_RGD_RO(base, index, index2, value) (BME_BFI32(&OTFAD_CTX_RGD_REG(base, index, index2), ((uint32_t)(value) << OTFAD_CTX_RGD_RO_SHIFT), OTFAD_CTX_RGD_RO_SHIFT, OTFAD_CTX_RGD_RO_WIDTH))
/*@}*/

/*!
 * @name Register OTFAD_CTX_RGD, field ENDADDR[31:10] (RW)
 *
 * This field defines the most significant bits of the 1023-modulo-1024 byte end
 * address of the memory region for context n.
 */
/*@{*/
/*! @brief Read current value of the OTFAD_CTX_RGD_ENDADDR field. */
#define OTFAD_RD_CTX_RGD_ENDADDR(base, index, index2) ((OTFAD_CTX_RGD_REG(base, index, index2) & OTFAD_CTX_RGD_ENDADDR_MASK) >> OTFAD_CTX_RGD_ENDADDR_SHIFT)
#define OTFAD_BRD_CTX_RGD_ENDADDR(base, index, index2) (OTFAD_RD_CTX_RGD_ENDADDR(base, index, index2))

/*! @brief Set the ENDADDR field to a new value. */
#define OTFAD_WR_CTX_RGD_ENDADDR(base, index, index2, value) (OTFAD_RMW_CTX_RGD(base, index, index2, OTFAD_CTX_RGD_ENDADDR_MASK, OTFAD_CTX_RGD_ENDADDR(value)))
#define OTFAD_BWR_CTX_RGD_ENDADDR(base, index, index2, value) (OTFAD_WR_CTX_RGD_ENDADDR(base, index, index2, value))
/*@}*/

/*!
 * @name Register OTFAD_CTX_RGD, field SRTADDR[31:10] (RW)
 *
 * This field defines the most significant bits of the 0-modulo-1024 byte start
 * address of the memory region for context n.
 */
/*@{*/
/*! @brief Read current value of the OTFAD_CTX_RGD_SRTADDR field. */
#define OTFAD_RD_CTX_RGD_SRTADDR(base, index, index2) ((OTFAD_CTX_RGD_REG(base, index, index2) & OTFAD_CTX_RGD_SRTADDR_MASK) >> OTFAD_CTX_RGD_SRTADDR_SHIFT)
#define OTFAD_BRD_CTX_RGD_SRTADDR(base, index, index2) (OTFAD_RD_CTX_RGD_SRTADDR(base, index, index2))

/*! @brief Set the SRTADDR field to a new value. */
#define OTFAD_WR_CTX_RGD_SRTADDR(base, index, index2, value) (OTFAD_RMW_CTX_RGD(base, index, index2, OTFAD_CTX_RGD_SRTADDR_MASK, OTFAD_CTX_RGD_SRTADDR(value)))
#define OTFAD_BWR_CTX_RGD_SRTADDR(base, index, index2, value) (OTFAD_WR_CTX_RGD_SRTADDR(base, index, index2, value))
/*@}*/

/*
 * MK82F25615 PDB
 *
 * Programmable Delay Block
 *
 * Registers defined in this header file:
 * - PDB_SC - Status and Control register
 * - PDB_MOD - Modulus register
 * - PDB_CNT - Counter register
 * - PDB_IDLY - Interrupt Delay register
 * - PDB_C1 - Channel n Control register 1
 * - PDB_S - Channel n Status register
 * - PDB_DLY - Channel n Delay 0 register
 * - PDB_INTC - DAC Interval Trigger n Control register
 * - PDB_INT - DAC Interval n register
 * - PDB_POEN - Pulse-Out n Enable register
 * - PDB_PODLY - Pulse-Out n Delay register
 */

#define PDB_INSTANCE_COUNT (1U) /*!< Number of instances of the PDB module. */
#define PDB0_IDX (0U) /*!< Instance number for PDB0. */

/*******************************************************************************
 * PDB_SC - Status and Control register
 ******************************************************************************/

/*!
 * @brief PDB_SC - Status and Control register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire PDB_SC register
 */
/*@{*/
#define PDB_RD_SC(base)          (PDB_SC_REG(base))
#define PDB_WR_SC(base, value)   (PDB_SC_REG(base) = (value))
#define PDB_RMW_SC(base, mask, value) (PDB_WR_SC(base, (PDB_RD_SC(base) & ~(mask)) | (value)))
#define PDB_SET_SC(base, value)  (BME_OR32(&PDB_SC_REG(base), (uint32_t)(value)))
#define PDB_CLR_SC(base, value)  (BME_AND32(&PDB_SC_REG(base), (uint32_t)(~(value))))
#define PDB_TOG_SC(base, value)  (BME_XOR32(&PDB_SC_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual PDB_SC bitfields
 */

/*!
 * @name Register PDB_SC, field LDOK[0] (RW)
 *
 * Writing 1 to this bit updates the internal registers of MOD, IDLY, CHnDLYm,
 * DACINTx,and POyDLY with the values written to their buffers. The MOD, IDLY,
 * CHnDLYm, DACINTx, and POyDLY will take effect according to the LDMOD. After 1 is
 * written to the LDOK field, the values in the buffers of above registers are
 * not effective and the buffers cannot be written until the values in buffers are
 * loaded into their internal registers. LDOK can be written only when PDBEN is
 * set or it can be written at the same time with PDBEN being written to 1. It is
 * automatically cleared when the values in buffers are loaded into the internal
 * registers or the PDBEN is cleared. Writing 0 to it has no effect.
 */
/*@{*/
/*! @brief Read current value of the PDB_SC_LDOK field. */
#define PDB_RD_SC_LDOK(base) ((PDB_SC_REG(base) & PDB_SC_LDOK_MASK) >> PDB_SC_LDOK_SHIFT)
#define PDB_BRD_SC_LDOK(base) (BME_UBFX32(&PDB_SC_REG(base), PDB_SC_LDOK_SHIFT, PDB_SC_LDOK_WIDTH))

/*! @brief Set the LDOK field to a new value. */
#define PDB_WR_SC_LDOK(base, value) (PDB_RMW_SC(base, PDB_SC_LDOK_MASK, PDB_SC_LDOK(value)))
#define PDB_BWR_SC_LDOK(base, value) (BME_BFI32(&PDB_SC_REG(base), ((uint32_t)(value) << PDB_SC_LDOK_SHIFT), PDB_SC_LDOK_SHIFT, PDB_SC_LDOK_WIDTH))
/*@}*/

/*!
 * @name Register PDB_SC, field CONT[1] (RW)
 *
 * Enables the PDB operation in Continuous mode.
 *
 * Values:
 * - 0b0 - PDB operation in One-Shot mode
 * - 0b1 - PDB operation in Continuous mode
 */
/*@{*/
/*! @brief Read current value of the PDB_SC_CONT field. */
#define PDB_RD_SC_CONT(base) ((PDB_SC_REG(base) & PDB_SC_CONT_MASK) >> PDB_SC_CONT_SHIFT)
#define PDB_BRD_SC_CONT(base) (BME_UBFX32(&PDB_SC_REG(base), PDB_SC_CONT_SHIFT, PDB_SC_CONT_WIDTH))

/*! @brief Set the CONT field to a new value. */
#define PDB_WR_SC_CONT(base, value) (PDB_RMW_SC(base, PDB_SC_CONT_MASK, PDB_SC_CONT(value)))
#define PDB_BWR_SC_CONT(base, value) (BME_BFI32(&PDB_SC_REG(base), ((uint32_t)(value) << PDB_SC_CONT_SHIFT), PDB_SC_CONT_SHIFT, PDB_SC_CONT_WIDTH))
/*@}*/

/*!
 * @name Register PDB_SC, field MULT[3:2] (RW)
 *
 * Selects the multiplication factor of the prescaler divider for the counter
 * clock.
 *
 * Values:
 * - 0b00 - Multiplication factor is 1.
 * - 0b01 - Multiplication factor is 10.
 * - 0b10 - Multiplication factor is 20.
 * - 0b11 - Multiplication factor is 40.
 */
/*@{*/
/*! @brief Read current value of the PDB_SC_MULT field. */
#define PDB_RD_SC_MULT(base) ((PDB_SC_REG(base) & PDB_SC_MULT_MASK) >> PDB_SC_MULT_SHIFT)
#define PDB_BRD_SC_MULT(base) (BME_UBFX32(&PDB_SC_REG(base), PDB_SC_MULT_SHIFT, PDB_SC_MULT_WIDTH))

/*! @brief Set the MULT field to a new value. */
#define PDB_WR_SC_MULT(base, value) (PDB_RMW_SC(base, PDB_SC_MULT_MASK, PDB_SC_MULT(value)))
#define PDB_BWR_SC_MULT(base, value) (BME_BFI32(&PDB_SC_REG(base), ((uint32_t)(value) << PDB_SC_MULT_SHIFT), PDB_SC_MULT_SHIFT, PDB_SC_MULT_WIDTH))
/*@}*/

/*!
 * @name Register PDB_SC, field PDBIE[5] (RW)
 *
 * Enables the PDB interrupt. When this field is set and DMAEN is cleared, PDBIF
 * generates a PDB interrupt.
 *
 * Values:
 * - 0b0 - PDB interrupt disabled.
 * - 0b1 - PDB interrupt enabled.
 */
/*@{*/
/*! @brief Read current value of the PDB_SC_PDBIE field. */
#define PDB_RD_SC_PDBIE(base) ((PDB_SC_REG(base) & PDB_SC_PDBIE_MASK) >> PDB_SC_PDBIE_SHIFT)
#define PDB_BRD_SC_PDBIE(base) (BME_UBFX32(&PDB_SC_REG(base), PDB_SC_PDBIE_SHIFT, PDB_SC_PDBIE_WIDTH))

/*! @brief Set the PDBIE field to a new value. */
#define PDB_WR_SC_PDBIE(base, value) (PDB_RMW_SC(base, PDB_SC_PDBIE_MASK, PDB_SC_PDBIE(value)))
#define PDB_BWR_SC_PDBIE(base, value) (BME_BFI32(&PDB_SC_REG(base), ((uint32_t)(value) << PDB_SC_PDBIE_SHIFT), PDB_SC_PDBIE_SHIFT, PDB_SC_PDBIE_WIDTH))
/*@}*/

/*!
 * @name Register PDB_SC, field PDBIF[6] (RW)
 *
 * This field is set when the counter value is equal to the IDLY register.
 * Writing zero clears this field.
 */
/*@{*/
/*! @brief Read current value of the PDB_SC_PDBIF field. */
#define PDB_RD_SC_PDBIF(base) ((PDB_SC_REG(base) & PDB_SC_PDBIF_MASK) >> PDB_SC_PDBIF_SHIFT)
#define PDB_BRD_SC_PDBIF(base) (BME_UBFX32(&PDB_SC_REG(base), PDB_SC_PDBIF_SHIFT, PDB_SC_PDBIF_WIDTH))

/*! @brief Set the PDBIF field to a new value. */
#define PDB_WR_SC_PDBIF(base, value) (PDB_RMW_SC(base, PDB_SC_PDBIF_MASK, PDB_SC_PDBIF(value)))
#define PDB_BWR_SC_PDBIF(base, value) (BME_BFI32(&PDB_SC_REG(base), ((uint32_t)(value) << PDB_SC_PDBIF_SHIFT), PDB_SC_PDBIF_SHIFT, PDB_SC_PDBIF_WIDTH))
/*@}*/

/*!
 * @name Register PDB_SC, field PDBEN[7] (RW)
 *
 * Values:
 * - 0b0 - PDB disabled. Counter is off.
 * - 0b1 - PDB enabled.
 */
/*@{*/
/*! @brief Read current value of the PDB_SC_PDBEN field. */
#define PDB_RD_SC_PDBEN(base) ((PDB_SC_REG(base) & PDB_SC_PDBEN_MASK) >> PDB_SC_PDBEN_SHIFT)
#define PDB_BRD_SC_PDBEN(base) (BME_UBFX32(&PDB_SC_REG(base), PDB_SC_PDBEN_SHIFT, PDB_SC_PDBEN_WIDTH))

/*! @brief Set the PDBEN field to a new value. */
#define PDB_WR_SC_PDBEN(base, value) (PDB_RMW_SC(base, PDB_SC_PDBEN_MASK, PDB_SC_PDBEN(value)))
#define PDB_BWR_SC_PDBEN(base, value) (BME_BFI32(&PDB_SC_REG(base), ((uint32_t)(value) << PDB_SC_PDBEN_SHIFT), PDB_SC_PDBEN_SHIFT, PDB_SC_PDBEN_WIDTH))
/*@}*/

/*!
 * @name Register PDB_SC, field TRGSEL[11:8] (RW)
 *
 * Selects the trigger input source for the PDB. The trigger input source can be
 * internal or external (EXTRG pin), or the software trigger. Refer to chip
 * configuration details for the actual PDB input trigger connections.
 *
 * Values:
 * - 0b0000 - Trigger-In 0 is selected.
 * - 0b0001 - Trigger-In 1 is selected.
 * - 0b0010 - Trigger-In 2 is selected.
 * - 0b0011 - Trigger-In 3 is selected.
 * - 0b0100 - Trigger-In 4 is selected.
 * - 0b0101 - Trigger-In 5 is selected.
 * - 0b0110 - Trigger-In 6 is selected.
 * - 0b0111 - Trigger-In 7 is selected.
 * - 0b1000 - Trigger-In 8 is selected.
 * - 0b1001 - Trigger-In 9 is selected.
 * - 0b1010 - Trigger-In 10 is selected.
 * - 0b1011 - Trigger-In 11 is selected.
 * - 0b1100 - Trigger-In 12 is selected.
 * - 0b1101 - Trigger-In 13 is selected.
 * - 0b1110 - Trigger-In 14 is selected.
 * - 0b1111 - Software trigger is selected.
 */
/*@{*/
/*! @brief Read current value of the PDB_SC_TRGSEL field. */
#define PDB_RD_SC_TRGSEL(base) ((PDB_SC_REG(base) & PDB_SC_TRGSEL_MASK) >> PDB_SC_TRGSEL_SHIFT)
#define PDB_BRD_SC_TRGSEL(base) (BME_UBFX32(&PDB_SC_REG(base), PDB_SC_TRGSEL_SHIFT, PDB_SC_TRGSEL_WIDTH))

/*! @brief Set the TRGSEL field to a new value. */
#define PDB_WR_SC_TRGSEL(base, value) (PDB_RMW_SC(base, PDB_SC_TRGSEL_MASK, PDB_SC_TRGSEL(value)))
#define PDB_BWR_SC_TRGSEL(base, value) (BME_BFI32(&PDB_SC_REG(base), ((uint32_t)(value) << PDB_SC_TRGSEL_SHIFT), PDB_SC_TRGSEL_SHIFT, PDB_SC_TRGSEL_WIDTH))
/*@}*/

/*!
 * @name Register PDB_SC, field PRESCALER[14:12] (RW)
 *
 * Values:
 * - 0b000 - Counting uses the peripheral clock divided by multiplication factor
 *     selected by MULT.
 * - 0b001 - Counting uses the peripheral clock divided by twice of the
 *     multiplication factor selected by MULT.
 * - 0b010 - Counting uses the peripheral clock divided by four times of the
 *     multiplication factor selected by MULT.
 * - 0b011 - Counting uses the peripheral clock divided by eight times of the
 *     multiplication factor selected by MULT.
 * - 0b100 - Counting uses the peripheral clock divided by 16 times of the
 *     multiplication factor selected by MULT.
 * - 0b101 - Counting uses the peripheral clock divided by 32 times of the
 *     multiplication factor selected by MULT.
 * - 0b110 - Counting uses the peripheral clock divided by 64 times of the
 *     multiplication factor selected by MULT.
 * - 0b111 - Counting uses the peripheral clock divided by 128 times of the
 *     multiplication factor selected by MULT.
 */
/*@{*/
/*! @brief Read current value of the PDB_SC_PRESCALER field. */
#define PDB_RD_SC_PRESCALER(base) ((PDB_SC_REG(base) & PDB_SC_PRESCALER_MASK) >> PDB_SC_PRESCALER_SHIFT)
#define PDB_BRD_SC_PRESCALER(base) (BME_UBFX32(&PDB_SC_REG(base), PDB_SC_PRESCALER_SHIFT, PDB_SC_PRESCALER_WIDTH))

/*! @brief Set the PRESCALER field to a new value. */
#define PDB_WR_SC_PRESCALER(base, value) (PDB_RMW_SC(base, PDB_SC_PRESCALER_MASK, PDB_SC_PRESCALER(value)))
#define PDB_BWR_SC_PRESCALER(base, value) (BME_BFI32(&PDB_SC_REG(base), ((uint32_t)(value) << PDB_SC_PRESCALER_SHIFT), PDB_SC_PRESCALER_SHIFT, PDB_SC_PRESCALER_WIDTH))
/*@}*/

/*!
 * @name Register PDB_SC, field DMAEN[15] (RW)
 *
 * When DMA is enabled, the PDBIF flag generates a DMA request instead of an
 * interrupt.
 *
 * Values:
 * - 0b0 - DMA disabled.
 * - 0b1 - DMA enabled.
 */
/*@{*/
/*! @brief Read current value of the PDB_SC_DMAEN field. */
#define PDB_RD_SC_DMAEN(base) ((PDB_SC_REG(base) & PDB_SC_DMAEN_MASK) >> PDB_SC_DMAEN_SHIFT)
#define PDB_BRD_SC_DMAEN(base) (BME_UBFX32(&PDB_SC_REG(base), PDB_SC_DMAEN_SHIFT, PDB_SC_DMAEN_WIDTH))

/*! @brief Set the DMAEN field to a new value. */
#define PDB_WR_SC_DMAEN(base, value) (PDB_RMW_SC(base, PDB_SC_DMAEN_MASK, PDB_SC_DMAEN(value)))
#define PDB_BWR_SC_DMAEN(base, value) (BME_BFI32(&PDB_SC_REG(base), ((uint32_t)(value) << PDB_SC_DMAEN_SHIFT), PDB_SC_DMAEN_SHIFT, PDB_SC_DMAEN_WIDTH))
/*@}*/

/*!
 * @name Register PDB_SC, field SWTRIG[16] (WORZ)
 *
 * When PDB is enabled and the software trigger is selected as the trigger input
 * source, writing 1 to this field resets and restarts the counter. Writing 0 to
 * this field has no effect. Reading this field results 0.
 */
/*@{*/
/*! @brief Set the SWTRIG field to a new value. */
#define PDB_WR_SC_SWTRIG(base, value) (PDB_RMW_SC(base, PDB_SC_SWTRIG_MASK, PDB_SC_SWTRIG(value)))
#define PDB_BWR_SC_SWTRIG(base, value) (BME_BFI32(&PDB_SC_REG(base), ((uint32_t)(value) << PDB_SC_SWTRIG_SHIFT), PDB_SC_SWTRIG_SHIFT, PDB_SC_SWTRIG_WIDTH))
/*@}*/

/*!
 * @name Register PDB_SC, field PDBEIE[17] (RW)
 *
 * Enables the PDB sequence error interrupt. When this field is set, any of the
 * PDB channel sequence error flags generates a PDB sequence error interrupt.
 *
 * Values:
 * - 0b0 - PDB sequence error interrupt disabled.
 * - 0b1 - PDB sequence error interrupt enabled.
 */
/*@{*/
/*! @brief Read current value of the PDB_SC_PDBEIE field. */
#define PDB_RD_SC_PDBEIE(base) ((PDB_SC_REG(base) & PDB_SC_PDBEIE_MASK) >> PDB_SC_PDBEIE_SHIFT)
#define PDB_BRD_SC_PDBEIE(base) (BME_UBFX32(&PDB_SC_REG(base), PDB_SC_PDBEIE_SHIFT, PDB_SC_PDBEIE_WIDTH))

/*! @brief Set the PDBEIE field to a new value. */
#define PDB_WR_SC_PDBEIE(base, value) (PDB_RMW_SC(base, PDB_SC_PDBEIE_MASK, PDB_SC_PDBEIE(value)))
#define PDB_BWR_SC_PDBEIE(base, value) (BME_BFI32(&PDB_SC_REG(base), ((uint32_t)(value) << PDB_SC_PDBEIE_SHIFT), PDB_SC_PDBEIE_SHIFT, PDB_SC_PDBEIE_WIDTH))
/*@}*/

/*!
 * @name Register PDB_SC, field LDMOD[19:18] (RW)
 *
 * Selects the mode to load the MOD, IDLY, CHnDLYm, INTx, and POyDLY registers,
 * after 1 is written to LDOK.
 *
 * Values:
 * - 0b00 - The internal registers are loaded with the values from their buffers
 *     immediately after 1 is written to LDOK.
 * - 0b01 - The internal registers are loaded with the values from their buffers
 *     when the PDB counter reaches the MOD register value after 1 is written to
 *     LDOK.
 * - 0b10 - The internal registers are loaded with the values from their buffers
 *     when a trigger input event is detected after 1 is written to LDOK.
 * - 0b11 - The internal registers are loaded with the values from their buffers
 *     when either the PDB counter reaches the MOD register value or a trigger
 *     input event is detected, after 1 is written to LDOK.
 */
/*@{*/
/*! @brief Read current value of the PDB_SC_LDMOD field. */
#define PDB_RD_SC_LDMOD(base) ((PDB_SC_REG(base) & PDB_SC_LDMOD_MASK) >> PDB_SC_LDMOD_SHIFT)
#define PDB_BRD_SC_LDMOD(base) (BME_UBFX32(&PDB_SC_REG(base), PDB_SC_LDMOD_SHIFT, PDB_SC_LDMOD_WIDTH))

/*! @brief Set the LDMOD field to a new value. */
#define PDB_WR_SC_LDMOD(base, value) (PDB_RMW_SC(base, PDB_SC_LDMOD_MASK, PDB_SC_LDMOD(value)))
#define PDB_BWR_SC_LDMOD(base, value) (BME_BFI32(&PDB_SC_REG(base), ((uint32_t)(value) << PDB_SC_LDMOD_SHIFT), PDB_SC_LDMOD_SHIFT, PDB_SC_LDMOD_WIDTH))
/*@}*/

/*******************************************************************************
 * PDB_MOD - Modulus register
 ******************************************************************************/

/*!
 * @brief PDB_MOD - Modulus register (RW)
 *
 * Reset value: 0x0000FFFFU
 */
/*!
 * @name Constants and macros for entire PDB_MOD register
 */
/*@{*/
#define PDB_RD_MOD(base)         (PDB_MOD_REG(base))
#define PDB_WR_MOD(base, value)  (PDB_MOD_REG(base) = (value))
#define PDB_RMW_MOD(base, mask, value) (PDB_WR_MOD(base, (PDB_RD_MOD(base) & ~(mask)) | (value)))
#define PDB_SET_MOD(base, value) (BME_OR32(&PDB_MOD_REG(base), (uint32_t)(value)))
#define PDB_CLR_MOD(base, value) (BME_AND32(&PDB_MOD_REG(base), (uint32_t)(~(value))))
#define PDB_TOG_MOD(base, value) (BME_XOR32(&PDB_MOD_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual PDB_MOD bitfields
 */

/*!
 * @name Register PDB_MOD, field MOD[15:0] (RW)
 *
 * Specifies the period of the counter. When the counter reaches this value, it
 * will be reset back to zero. If the PDB is in Continuous mode, the count begins
 * anew. Reading this field returns the value of the internal register that is
 * effective for the current cycle of PDB.
 */
/*@{*/
/*! @brief Read current value of the PDB_MOD_MOD field. */
#define PDB_RD_MOD_MOD(base) ((PDB_MOD_REG(base) & PDB_MOD_MOD_MASK) >> PDB_MOD_MOD_SHIFT)
#define PDB_BRD_MOD_MOD(base) (PDB_RD_MOD_MOD(base))

/*! @brief Set the MOD field to a new value. */
#define PDB_WR_MOD_MOD(base, value) (PDB_RMW_MOD(base, PDB_MOD_MOD_MASK, PDB_MOD_MOD(value)))
#define PDB_BWR_MOD_MOD(base, value) (PDB_WR_MOD_MOD(base, value))
/*@}*/

/*******************************************************************************
 * PDB_CNT - Counter register
 ******************************************************************************/

/*!
 * @brief PDB_CNT - Counter register (RO)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire PDB_CNT register
 */
/*@{*/
#define PDB_RD_CNT(base)         (PDB_CNT_REG(base))
/*@}*/

/*
 * Constants & macros for individual PDB_CNT bitfields
 */

/*!
 * @name Register PDB_CNT, field CNT[15:0] (RO)
 *
 * Contains the current value of the counter.
 */
/*@{*/
/*! @brief Read current value of the PDB_CNT_CNT field. */
#define PDB_RD_CNT_CNT(base) ((PDB_CNT_REG(base) & PDB_CNT_CNT_MASK) >> PDB_CNT_CNT_SHIFT)
#define PDB_BRD_CNT_CNT(base) (PDB_RD_CNT_CNT(base))
/*@}*/

/*******************************************************************************
 * PDB_IDLY - Interrupt Delay register
 ******************************************************************************/

/*!
 * @brief PDB_IDLY - Interrupt Delay register (RW)
 *
 * Reset value: 0x0000FFFFU
 */
/*!
 * @name Constants and macros for entire PDB_IDLY register
 */
/*@{*/
#define PDB_RD_IDLY(base)        (PDB_IDLY_REG(base))
#define PDB_WR_IDLY(base, value) (PDB_IDLY_REG(base) = (value))
#define PDB_RMW_IDLY(base, mask, value) (PDB_WR_IDLY(base, (PDB_RD_IDLY(base) & ~(mask)) | (value)))
#define PDB_SET_IDLY(base, value) (BME_OR32(&PDB_IDLY_REG(base), (uint32_t)(value)))
#define PDB_CLR_IDLY(base, value) (BME_AND32(&PDB_IDLY_REG(base), (uint32_t)(~(value))))
#define PDB_TOG_IDLY(base, value) (BME_XOR32(&PDB_IDLY_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual PDB_IDLY bitfields
 */

/*!
 * @name Register PDB_IDLY, field IDLY[15:0] (RW)
 *
 * Specifies the delay value to schedule the PDB interrupt. It can be used to
 * schedule an independent interrupt at some point in the PDB cycle. If enabled, a
 * PDB interrupt is generated, when the counter is equal to the IDLY. Reading
 * this field returns the value of internal register that is effective for the
 * current cycle of the PDB.
 */
/*@{*/
/*! @brief Read current value of the PDB_IDLY_IDLY field. */
#define PDB_RD_IDLY_IDLY(base) ((PDB_IDLY_REG(base) & PDB_IDLY_IDLY_MASK) >> PDB_IDLY_IDLY_SHIFT)
#define PDB_BRD_IDLY_IDLY(base) (PDB_RD_IDLY_IDLY(base))

/*! @brief Set the IDLY field to a new value. */
#define PDB_WR_IDLY_IDLY(base, value) (PDB_RMW_IDLY(base, PDB_IDLY_IDLY_MASK, PDB_IDLY_IDLY(value)))
#define PDB_BWR_IDLY_IDLY(base, value) (PDB_WR_IDLY_IDLY(base, value))
/*@}*/

/*******************************************************************************
 * PDB_C1 - Channel n Control register 1
 ******************************************************************************/

/*!
 * @brief PDB_C1 - Channel n Control register 1 (RW)
 *
 * Reset value: 0x00000000U
 *
 * Each PDB channel has one control register, CHnC1. The fields in this register
 * control the functionality of each PDB channel operation.
 */
/*!
 * @name Constants and macros for entire PDB_C1 register
 */
/*@{*/
#define PDB_RD_C1(base, index)   (PDB_C1_REG(base, index))
#define PDB_WR_C1(base, index, value) (PDB_C1_REG(base, index) = (value))
#define PDB_RMW_C1(base, index, mask, value) (PDB_WR_C1(base, index, (PDB_RD_C1(base, index) & ~(mask)) | (value)))
#define PDB_SET_C1(base, index, value) (BME_OR32(&PDB_C1_REG(base, index), (uint32_t)(value)))
#define PDB_CLR_C1(base, index, value) (BME_AND32(&PDB_C1_REG(base, index), (uint32_t)(~(value))))
#define PDB_TOG_C1(base, index, value) (BME_XOR32(&PDB_C1_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual PDB_C1 bitfields
 */

/*!
 * @name Register PDB_C1, field EN[7:0] (RW)
 *
 * Enables the PDB ADC pre-trigger outputs. Only lower M pre-trigger fields are
 * implemented in this MCU.
 *
 * Values:
 * - 0b00000000 - PDB channel's corresponding pre-trigger disabled.
 * - 0b00000001 - PDB channel's corresponding pre-trigger enabled.
 */
/*@{*/
/*! @brief Read current value of the PDB_C1_EN field. */
#define PDB_RD_C1_EN(base, index) ((PDB_C1_REG(base, index) & PDB_C1_EN_MASK) >> PDB_C1_EN_SHIFT)
#define PDB_BRD_C1_EN(base, index) (BME_UBFX32(&PDB_C1_REG(base, index), PDB_C1_EN_SHIFT, PDB_C1_EN_WIDTH))

/*! @brief Set the EN field to a new value. */
#define PDB_WR_C1_EN(base, index, value) (PDB_RMW_C1(base, index, PDB_C1_EN_MASK, PDB_C1_EN(value)))
#define PDB_BWR_C1_EN(base, index, value) (BME_BFI32(&PDB_C1_REG(base, index), ((uint32_t)(value) << PDB_C1_EN_SHIFT), PDB_C1_EN_SHIFT, PDB_C1_EN_WIDTH))
/*@}*/

/*!
 * @name Register PDB_C1, field TOS[15:8] (RW)
 *
 * These bits select the PDB ADC pre-trigger outputs. Only lower M pre-trigger
 * bits are implemented in this MCU.
 *
 * Values:
 * - 0b00000000 - PDB channel's corresponding pre-trigger is in bypassed mode.
 *     The pre-trigger asserts one peripheral clock cycle after a rising edge is
 *     detected on selected trigger input source or software trigger is selected
 *     and SWTRIG is written with 1.
 * - 0b00000001 - PDB channel's corresponding pre-trigger asserts when the
 *     counter reaches the channel delay register plus one peripheral clock cycle
 *     after a rising edge is detected on selected trigger input source or software
 *     trigger is selected and SETRIG is written with 1.
 */
/*@{*/
/*! @brief Read current value of the PDB_C1_TOS field. */
#define PDB_RD_C1_TOS(base, index) ((PDB_C1_REG(base, index) & PDB_C1_TOS_MASK) >> PDB_C1_TOS_SHIFT)
#define PDB_BRD_C1_TOS(base, index) (BME_UBFX32(&PDB_C1_REG(base, index), PDB_C1_TOS_SHIFT, PDB_C1_TOS_WIDTH))

/*! @brief Set the TOS field to a new value. */
#define PDB_WR_C1_TOS(base, index, value) (PDB_RMW_C1(base, index, PDB_C1_TOS_MASK, PDB_C1_TOS(value)))
#define PDB_BWR_C1_TOS(base, index, value) (BME_BFI32(&PDB_C1_REG(base, index), ((uint32_t)(value) << PDB_C1_TOS_SHIFT), PDB_C1_TOS_SHIFT, PDB_C1_TOS_WIDTH))
/*@}*/

/*!
 * @name Register PDB_C1, field BB[23:16] (RW)
 *
 * Enables the PDB ADC pre-trigger operation as back-to-back mode. Only lower M
 * pre-trigger bits are implemented in this MCU. Back-to-back operation enables
 * the ADC conversions complete to trigger the next PDB channel pre-trigger and
 * trigger output, so that the ADC conversions can be triggered on the next set of
 * configuration and results registers. Application code must enable only the
 * back-to-back operation of the PDB pre-triggers at the leading of the back-to-back
 * connection chain.
 *
 * Values:
 * - 0b00000000 - PDB channel's corresponding pre-trigger back-to-back operation
 *     disabled.
 * - 0b00000001 - PDB channel's corresponding pre-trigger back-to-back operation
 *     enabled.
 */
/*@{*/
/*! @brief Read current value of the PDB_C1_BB field. */
#define PDB_RD_C1_BB(base, index) ((PDB_C1_REG(base, index) & PDB_C1_BB_MASK) >> PDB_C1_BB_SHIFT)
#define PDB_BRD_C1_BB(base, index) (BME_UBFX32(&PDB_C1_REG(base, index), PDB_C1_BB_SHIFT, PDB_C1_BB_WIDTH))

/*! @brief Set the BB field to a new value. */
#define PDB_WR_C1_BB(base, index, value) (PDB_RMW_C1(base, index, PDB_C1_BB_MASK, PDB_C1_BB(value)))
#define PDB_BWR_C1_BB(base, index, value) (BME_BFI32(&PDB_C1_REG(base, index), ((uint32_t)(value) << PDB_C1_BB_SHIFT), PDB_C1_BB_SHIFT, PDB_C1_BB_WIDTH))
/*@}*/

/*******************************************************************************
 * PDB_S - Channel n Status register
 ******************************************************************************/

/*!
 * @brief PDB_S - Channel n Status register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire PDB_S register
 */
/*@{*/
#define PDB_RD_S(base, index)    (PDB_S_REG(base, index))
#define PDB_WR_S(base, index, value) (PDB_S_REG(base, index) = (value))
#define PDB_RMW_S(base, index, mask, value) (PDB_WR_S(base, index, (PDB_RD_S(base, index) & ~(mask)) | (value)))
#define PDB_SET_S(base, index, value) (BME_OR32(&PDB_S_REG(base, index), (uint32_t)(value)))
#define PDB_CLR_S(base, index, value) (BME_AND32(&PDB_S_REG(base, index), (uint32_t)(~(value))))
#define PDB_TOG_S(base, index, value) (BME_XOR32(&PDB_S_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual PDB_S bitfields
 */

/*!
 * @name Register PDB_S, field ERR[7:0] (RW)
 *
 * Only the lower M bits are implemented in this MCU.
 *
 * Values:
 * - 0b00000000 - Sequence error not detected on PDB channel's corresponding
 *     pre-trigger.
 * - 0b00000001 - Sequence error detected on PDB channel's corresponding
 *     pre-trigger. ADCn block can be triggered for a conversion by one pre-trigger from
 *     PDB channel n. When one conversion, which is triggered by one of the
 *     pre-triggers from PDB channel n, is in progress, new trigger from PDB
 *     channel's corresponding pre-trigger m cannot be accepted by ADCn, and ERR[m] is
 *     set. Writing 0's to clear the sequence error flags.
 */
/*@{*/
/*! @brief Read current value of the PDB_S_ERR field. */
#define PDB_RD_S_ERR(base, index) ((PDB_S_REG(base, index) & PDB_S_ERR_MASK) >> PDB_S_ERR_SHIFT)
#define PDB_BRD_S_ERR(base, index) (BME_UBFX32(&PDB_S_REG(base, index), PDB_S_ERR_SHIFT, PDB_S_ERR_WIDTH))

/*! @brief Set the ERR field to a new value. */
#define PDB_WR_S_ERR(base, index, value) (PDB_RMW_S(base, index, PDB_S_ERR_MASK, PDB_S_ERR(value)))
#define PDB_BWR_S_ERR(base, index, value) (BME_BFI32(&PDB_S_REG(base, index), ((uint32_t)(value) << PDB_S_ERR_SHIFT), PDB_S_ERR_SHIFT, PDB_S_ERR_WIDTH))
/*@}*/

/*!
 * @name Register PDB_S, field CF[23:16] (RW)
 *
 * The CF[m] field is set when the PDB counter matches the CHnDLYm. Write 0 to
 * clear these bits.
 */
/*@{*/
/*! @brief Read current value of the PDB_S_CF field. */
#define PDB_RD_S_CF(base, index) ((PDB_S_REG(base, index) & PDB_S_CF_MASK) >> PDB_S_CF_SHIFT)
#define PDB_BRD_S_CF(base, index) (BME_UBFX32(&PDB_S_REG(base, index), PDB_S_CF_SHIFT, PDB_S_CF_WIDTH))

/*! @brief Set the CF field to a new value. */
#define PDB_WR_S_CF(base, index, value) (PDB_RMW_S(base, index, PDB_S_CF_MASK, PDB_S_CF(value)))
#define PDB_BWR_S_CF(base, index, value) (BME_BFI32(&PDB_S_REG(base, index), ((uint32_t)(value) << PDB_S_CF_SHIFT), PDB_S_CF_SHIFT, PDB_S_CF_WIDTH))
/*@}*/

/*******************************************************************************
 * PDB_DLY - Channel n Delay 0 register
 ******************************************************************************/

/*!
 * @brief PDB_DLY - Channel n Delay 0 register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire PDB_DLY register
 */
/*@{*/
#define PDB_RD_DLY(base, index, index2) (PDB_DLY_REG(base, index, index2))
#define PDB_WR_DLY(base, index, index2, value) (PDB_DLY_REG(base, index, index2) = (value))
#define PDB_RMW_DLY(base, index, index2, mask, value) (PDB_WR_DLY(base, index, index2, (PDB_RD_DLY(base, index, index2) & ~(mask)) | (value)))
#define PDB_SET_DLY(base, index, index2, value) (BME_OR32(&PDB_DLY_REG(base, index, index2), (uint32_t)(value)))
#define PDB_CLR_DLY(base, index, index2, value) (BME_AND32(&PDB_DLY_REG(base, index, index2), (uint32_t)(~(value))))
#define PDB_TOG_DLY(base, index, index2, value) (BME_XOR32(&PDB_DLY_REG(base, index, index2), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual PDB_DLY bitfields
 */

/*!
 * @name Register PDB_DLY, field DLY[15:0] (RW)
 *
 * Specifies the delay value for the channel's corresponding pre-trigger. The
 * pre-trigger asserts when the counter is equal to DLY. Reading this field returns
 * the value of internal register that is effective for the current PDB cycle.
 */
/*@{*/
/*! @brief Read current value of the PDB_DLY_DLY field. */
#define PDB_RD_DLY_DLY(base, index, index2) ((PDB_DLY_REG(base, index, index2) & PDB_DLY_DLY_MASK) >> PDB_DLY_DLY_SHIFT)
#define PDB_BRD_DLY_DLY(base, index, index2) (PDB_RD_DLY_DLY(base, index, index2))

/*! @brief Set the DLY field to a new value. */
#define PDB_WR_DLY_DLY(base, index, index2, value) (PDB_RMW_DLY(base, index, index2, PDB_DLY_DLY_MASK, PDB_DLY_DLY(value)))
#define PDB_BWR_DLY_DLY(base, index, index2, value) (PDB_WR_DLY_DLY(base, index, index2, value))
/*@}*/

/*******************************************************************************
 * PDB_INTC - DAC Interval Trigger n Control register
 ******************************************************************************/

/*!
 * @brief PDB_INTC - DAC Interval Trigger n Control register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire PDB_INTC register
 */
/*@{*/
#define PDB_RD_INTC(base, index) (PDB_INTC_REG(base, index))
#define PDB_WR_INTC(base, index, value) (PDB_INTC_REG(base, index) = (value))
#define PDB_RMW_INTC(base, index, mask, value) (PDB_WR_INTC(base, index, (PDB_RD_INTC(base, index) & ~(mask)) | (value)))
#define PDB_SET_INTC(base, index, value) (BME_OR32(&PDB_INTC_REG(base, index), (uint32_t)(value)))
#define PDB_CLR_INTC(base, index, value) (BME_AND32(&PDB_INTC_REG(base, index), (uint32_t)(~(value))))
#define PDB_TOG_INTC(base, index, value) (BME_XOR32(&PDB_INTC_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual PDB_INTC bitfields
 */

/*!
 * @name Register PDB_INTC, field TOE[0] (RW)
 *
 * Enables the DAC interval trigger.
 *
 * Values:
 * - 0b0 - DAC interval trigger disabled.
 * - 0b1 - DAC interval trigger enabled.
 */
/*@{*/
/*! @brief Read current value of the PDB_INTC_TOE field. */
#define PDB_RD_INTC_TOE(base, index) ((PDB_INTC_REG(base, index) & PDB_INTC_TOE_MASK) >> PDB_INTC_TOE_SHIFT)
#define PDB_BRD_INTC_TOE(base, index) (BME_UBFX32(&PDB_INTC_REG(base, index), PDB_INTC_TOE_SHIFT, PDB_INTC_TOE_WIDTH))

/*! @brief Set the TOE field to a new value. */
#define PDB_WR_INTC_TOE(base, index, value) (PDB_RMW_INTC(base, index, PDB_INTC_TOE_MASK, PDB_INTC_TOE(value)))
#define PDB_BWR_INTC_TOE(base, index, value) (BME_BFI32(&PDB_INTC_REG(base, index), ((uint32_t)(value) << PDB_INTC_TOE_SHIFT), PDB_INTC_TOE_SHIFT, PDB_INTC_TOE_WIDTH))
/*@}*/

/*!
 * @name Register PDB_INTC, field EXT[1] (RW)
 *
 * This bit enables the external trigger for DAC interval counter.
 *
 * Values:
 * - 0b0 - DAC external trigger input disabled. DAC interval counter is reset
 *     and started counting when a rising edge is detected on selected trigger
 *     input source or software trigger is selected and SWTRIG is written with 1.
 * - 0b1 - DAC external trigger input enabled. DAC interval counter is bypassed
 *     and DAC external trigger input triggers the DAC interval trigger.
 */
/*@{*/
/*! @brief Read current value of the PDB_INTC_EXT field. */
#define PDB_RD_INTC_EXT(base, index) ((PDB_INTC_REG(base, index) & PDB_INTC_EXT_MASK) >> PDB_INTC_EXT_SHIFT)
#define PDB_BRD_INTC_EXT(base, index) (BME_UBFX32(&PDB_INTC_REG(base, index), PDB_INTC_EXT_SHIFT, PDB_INTC_EXT_WIDTH))

/*! @brief Set the EXT field to a new value. */
#define PDB_WR_INTC_EXT(base, index, value) (PDB_RMW_INTC(base, index, PDB_INTC_EXT_MASK, PDB_INTC_EXT(value)))
#define PDB_BWR_INTC_EXT(base, index, value) (BME_BFI32(&PDB_INTC_REG(base, index), ((uint32_t)(value) << PDB_INTC_EXT_SHIFT), PDB_INTC_EXT_SHIFT, PDB_INTC_EXT_WIDTH))
/*@}*/

/*******************************************************************************
 * PDB_INT - DAC Interval n register
 ******************************************************************************/

/*!
 * @brief PDB_INT - DAC Interval n register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire PDB_INT register
 */
/*@{*/
#define PDB_RD_INT(base, index)  (PDB_INT_REG(base, index))
#define PDB_WR_INT(base, index, value) (PDB_INT_REG(base, index) = (value))
#define PDB_RMW_INT(base, index, mask, value) (PDB_WR_INT(base, index, (PDB_RD_INT(base, index) & ~(mask)) | (value)))
#define PDB_SET_INT(base, index, value) (BME_OR32(&PDB_INT_REG(base, index), (uint32_t)(value)))
#define PDB_CLR_INT(base, index, value) (BME_AND32(&PDB_INT_REG(base, index), (uint32_t)(~(value))))
#define PDB_TOG_INT(base, index, value) (BME_XOR32(&PDB_INT_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual PDB_INT bitfields
 */

/*!
 * @name Register PDB_INT, field INT[15:0] (RW)
 *
 * These bits specify the interval value for DAC interval trigger. DAC interval
 * trigger triggers DAC[1:0] update when the DAC interval counter is equal to the
 * DACINT. Reading these bits returns the value of internal register that is
 * effective for the current PDB cycle.
 */
/*@{*/
/*! @brief Read current value of the PDB_INT_INT field. */
#define PDB_RD_INT_INT(base, index) ((PDB_INT_REG(base, index) & PDB_INT_INT_MASK) >> PDB_INT_INT_SHIFT)
#define PDB_BRD_INT_INT(base, index) (PDB_RD_INT_INT(base, index))

/*! @brief Set the INT field to a new value. */
#define PDB_WR_INT_INT(base, index, value) (PDB_RMW_INT(base, index, PDB_INT_INT_MASK, PDB_INT_INT(value)))
#define PDB_BWR_INT_INT(base, index, value) (PDB_WR_INT_INT(base, index, value))
/*@}*/

/*******************************************************************************
 * PDB_POEN - Pulse-Out n Enable register
 ******************************************************************************/

/*!
 * @brief PDB_POEN - Pulse-Out n Enable register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire PDB_POEN register
 */
/*@{*/
#define PDB_RD_POEN(base)        (PDB_POEN_REG(base))
#define PDB_WR_POEN(base, value) (PDB_POEN_REG(base) = (value))
#define PDB_RMW_POEN(base, mask, value) (PDB_WR_POEN(base, (PDB_RD_POEN(base) & ~(mask)) | (value)))
#define PDB_SET_POEN(base, value) (BME_OR32(&PDB_POEN_REG(base), (uint32_t)(value)))
#define PDB_CLR_POEN(base, value) (BME_AND32(&PDB_POEN_REG(base), (uint32_t)(~(value))))
#define PDB_TOG_POEN(base, value) (BME_XOR32(&PDB_POEN_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual PDB_POEN bitfields
 */

/*!
 * @name Register PDB_POEN, field POEN[7:0] (RW)
 *
 * Enables the pulse output. Only lower Y bits are implemented in this MCU.
 *
 * Values:
 * - 0b00000000 - PDB Pulse-Out disabled
 * - 0b00000001 - PDB Pulse-Out enabled
 */
/*@{*/
/*! @brief Read current value of the PDB_POEN_POEN field. */
#define PDB_RD_POEN_POEN(base) ((PDB_POEN_REG(base) & PDB_POEN_POEN_MASK) >> PDB_POEN_POEN_SHIFT)
#define PDB_BRD_POEN_POEN(base) (BME_UBFX32(&PDB_POEN_REG(base), PDB_POEN_POEN_SHIFT, PDB_POEN_POEN_WIDTH))

/*! @brief Set the POEN field to a new value. */
#define PDB_WR_POEN_POEN(base, value) (PDB_RMW_POEN(base, PDB_POEN_POEN_MASK, PDB_POEN_POEN(value)))
#define PDB_BWR_POEN_POEN(base, value) (BME_BFI32(&PDB_POEN_REG(base), ((uint32_t)(value) << PDB_POEN_POEN_SHIFT), PDB_POEN_POEN_SHIFT, PDB_POEN_POEN_WIDTH))
/*@}*/

/*******************************************************************************
 * PDB_PODLY - Pulse-Out n Delay register
 ******************************************************************************/

/*!
 * @brief PDB_PODLY - Pulse-Out n Delay register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire PDB_PODLY register
 */
/*@{*/
#define PDB_RD_PODLY(base, index) (PDB_PODLY_REG(base, index))
#define PDB_WR_PODLY(base, index, value) (PDB_PODLY_REG(base, index) = (value))
#define PDB_RMW_PODLY(base, index, mask, value) (PDB_WR_PODLY(base, index, (PDB_RD_PODLY(base, index) & ~(mask)) | (value)))
#define PDB_SET_PODLY(base, index, value) (BME_OR32(&PDB_PODLY_REG(base, index), (uint32_t)(value)))
#define PDB_CLR_PODLY(base, index, value) (BME_AND32(&PDB_PODLY_REG(base, index), (uint32_t)(~(value))))
#define PDB_TOG_PODLY(base, index, value) (BME_XOR32(&PDB_PODLY_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual PDB_PODLY bitfields
 */

/*!
 * @name Register PDB_PODLY, field DLY2[15:0] (RW)
 *
 * Specifies the delay 2 value for the PDB Pulse-Out. Pulse-Out goes low when
 * the PDB counter is equal to the DLY2. Reading this field returns the value of
 * internal register that is effective for the current PDB cycle.
 */
/*@{*/
/*! @brief Read current value of the PDB_PODLY_DLY2 field. */
#define PDB_RD_PODLY_DLY2(base, index) ((PDB_PODLY_REG(base, index) & PDB_PODLY_DLY2_MASK) >> PDB_PODLY_DLY2_SHIFT)
#define PDB_BRD_PODLY_DLY2(base, index) (PDB_RD_PODLY_DLY2(base, index))

/*! @brief Set the DLY2 field to a new value. */
#define PDB_WR_PODLY_DLY2(base, index, value) (PDB_RMW_PODLY(base, index, PDB_PODLY_DLY2_MASK, PDB_PODLY_DLY2(value)))
#define PDB_BWR_PODLY_DLY2(base, index, value) (PDB_WR_PODLY_DLY2(base, index, value))
/*@}*/

/*!
 * @name Register PDB_PODLY, field DLY1[31:16] (RW)
 *
 * Specifies the delay 1 value for the PDB Pulse-Out. Pulse-Out goes high when
 * the PDB counter is equal to the DLY1. Reading this field returns the value of
 * internal register that is effective for the current PDB cycle.
 */
/*@{*/
/*! @brief Read current value of the PDB_PODLY_DLY1 field. */
#define PDB_RD_PODLY_DLY1(base, index) ((PDB_PODLY_REG(base, index) & PDB_PODLY_DLY1_MASK) >> PDB_PODLY_DLY1_SHIFT)
#define PDB_BRD_PODLY_DLY1(base, index) (PDB_RD_PODLY_DLY1(base, index))

/*! @brief Set the DLY1 field to a new value. */
#define PDB_WR_PODLY_DLY1(base, index, value) (PDB_RMW_PODLY(base, index, PDB_PODLY_DLY1_MASK, PDB_PODLY_DLY1(value)))
#define PDB_BWR_PODLY_DLY1(base, index, value) (PDB_WR_PODLY_DLY1(base, index, value))
/*@}*/

/*
 * MK82F25615 PIT
 *
 * Periodic Interrupt Timer
 *
 * Registers defined in this header file:
 * - PIT_MCR - PIT Module Control Register
 * - PIT_LDVAL - Timer Load Value Register
 * - PIT_CVAL - Current Timer Value Register
 * - PIT_TCTRL - Timer Control Register
 * - PIT_TFLG - Timer Flag Register
 */

#define PIT_INSTANCE_COUNT (1U) /*!< Number of instances of the PIT module. */
#define PIT0_IDX (0U) /*!< Instance number for PIT0. */

/*******************************************************************************
 * PIT_MCR - PIT Module Control Register
 ******************************************************************************/

/*!
 * @brief PIT_MCR - PIT Module Control Register (RW)
 *
 * Reset value: 0x00000002U
 *
 * This register enables or disables the PIT timer clocks and controls the
 * timers when the PIT enters the Debug mode. Access: User read/write
 */
/*!
 * @name Constants and macros for entire PIT_MCR register
 */
/*@{*/
#define PIT_RD_MCR(base)         (PIT_MCR_REG(base))
#define PIT_WR_MCR(base, value)  (PIT_MCR_REG(base) = (value))
#define PIT_RMW_MCR(base, mask, value) (PIT_WR_MCR(base, (PIT_RD_MCR(base) & ~(mask)) | (value)))
#define PIT_SET_MCR(base, value) (BME_OR32(&PIT_MCR_REG(base), (uint32_t)(value)))
#define PIT_CLR_MCR(base, value) (BME_AND32(&PIT_MCR_REG(base), (uint32_t)(~(value))))
#define PIT_TOG_MCR(base, value) (BME_XOR32(&PIT_MCR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual PIT_MCR bitfields
 */

/*!
 * @name Register PIT_MCR, field FRZ[0] (RW)
 *
 * Allows the timers to be stopped when the device enters the Debug mode.
 *
 * Values:
 * - 0b0 - Timers continue to run in Debug mode.
 * - 0b1 - Timers are stopped in Debug mode.
 */
/*@{*/
/*! @brief Read current value of the PIT_MCR_FRZ field. */
#define PIT_RD_MCR_FRZ(base) ((PIT_MCR_REG(base) & PIT_MCR_FRZ_MASK) >> PIT_MCR_FRZ_SHIFT)
#define PIT_BRD_MCR_FRZ(base) (BME_UBFX32(&PIT_MCR_REG(base), PIT_MCR_FRZ_SHIFT, PIT_MCR_FRZ_WIDTH))

/*! @brief Set the FRZ field to a new value. */
#define PIT_WR_MCR_FRZ(base, value) (PIT_RMW_MCR(base, PIT_MCR_FRZ_MASK, PIT_MCR_FRZ(value)))
#define PIT_BWR_MCR_FRZ(base, value) (BME_BFI32(&PIT_MCR_REG(base), ((uint32_t)(value) << PIT_MCR_FRZ_SHIFT), PIT_MCR_FRZ_SHIFT, PIT_MCR_FRZ_WIDTH))
/*@}*/

/*!
 * @name Register PIT_MCR, field MDIS[1] (RW)
 *
 * Disables the standard timers. This field must be enabled before any other
 * setup is done.Always write to this bit after at least 3 bus clock cycles of
 * enabling the PIT clock gate in the device clock generation module.
 *
 * Values:
 * - 0b0 - Clock for standard PIT timers is enabled.
 * - 0b1 - Clock for standard PIT timers is disabled.
 */
/*@{*/
/*! @brief Read current value of the PIT_MCR_MDIS field. */
#define PIT_RD_MCR_MDIS(base) ((PIT_MCR_REG(base) & PIT_MCR_MDIS_MASK) >> PIT_MCR_MDIS_SHIFT)
#define PIT_BRD_MCR_MDIS(base) (BME_UBFX32(&PIT_MCR_REG(base), PIT_MCR_MDIS_SHIFT, PIT_MCR_MDIS_WIDTH))

/*! @brief Set the MDIS field to a new value. */
#define PIT_WR_MCR_MDIS(base, value) (PIT_RMW_MCR(base, PIT_MCR_MDIS_MASK, PIT_MCR_MDIS(value)))
#define PIT_BWR_MCR_MDIS(base, value) (BME_BFI32(&PIT_MCR_REG(base), ((uint32_t)(value) << PIT_MCR_MDIS_SHIFT), PIT_MCR_MDIS_SHIFT, PIT_MCR_MDIS_WIDTH))
/*@}*/

/*******************************************************************************
 * PIT_LDVAL - Timer Load Value Register
 ******************************************************************************/

/*!
 * @brief PIT_LDVAL - Timer Load Value Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * These registers select the timeout period for the timer interrupts. Access:
 * User read/write
 */
/*!
 * @name Constants and macros for entire PIT_LDVAL register
 */
/*@{*/
#define PIT_RD_LDVAL(base, index) (PIT_LDVAL_REG(base, index))
#define PIT_WR_LDVAL(base, index, value) (PIT_LDVAL_REG(base, index) = (value))
#define PIT_RMW_LDVAL(base, index, mask, value) (PIT_WR_LDVAL(base, index, (PIT_RD_LDVAL(base, index) & ~(mask)) | (value)))
#define PIT_SET_LDVAL(base, index, value) (BME_OR32(&PIT_LDVAL_REG(base, index), (uint32_t)(value)))
#define PIT_CLR_LDVAL(base, index, value) (BME_AND32(&PIT_LDVAL_REG(base, index), (uint32_t)(~(value))))
#define PIT_TOG_LDVAL(base, index, value) (BME_XOR32(&PIT_LDVAL_REG(base, index), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * PIT_CVAL - Current Timer Value Register
 ******************************************************************************/

/*!
 * @brief PIT_CVAL - Current Timer Value Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * These registers indicate the current timer position. Access: User read only
 */
/*!
 * @name Constants and macros for entire PIT_CVAL register
 */
/*@{*/
#define PIT_RD_CVAL(base, index) (PIT_CVAL_REG(base, index))
/*@}*/

/*******************************************************************************
 * PIT_TCTRL - Timer Control Register
 ******************************************************************************/

/*!
 * @brief PIT_TCTRL - Timer Control Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * These registers contain the control bits for each timer. Access: User
 * read/write
 */
/*!
 * @name Constants and macros for entire PIT_TCTRL register
 */
/*@{*/
#define PIT_RD_TCTRL(base, index) (PIT_TCTRL_REG(base, index))
#define PIT_WR_TCTRL(base, index, value) (PIT_TCTRL_REG(base, index) = (value))
#define PIT_RMW_TCTRL(base, index, mask, value) (PIT_WR_TCTRL(base, index, (PIT_RD_TCTRL(base, index) & ~(mask)) | (value)))
#define PIT_SET_TCTRL(base, index, value) (BME_OR32(&PIT_TCTRL_REG(base, index), (uint32_t)(value)))
#define PIT_CLR_TCTRL(base, index, value) (BME_AND32(&PIT_TCTRL_REG(base, index), (uint32_t)(~(value))))
#define PIT_TOG_TCTRL(base, index, value) (BME_XOR32(&PIT_TCTRL_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual PIT_TCTRL bitfields
 */

/*!
 * @name Register PIT_TCTRL, field TEN[0] (RW)
 *
 * Enables or disables the timer.
 *
 * Values:
 * - 0b0 - Timer n is disabled.
 * - 0b1 - Timer n is enabled.
 */
/*@{*/
/*! @brief Read current value of the PIT_TCTRL_TEN field. */
#define PIT_RD_TCTRL_TEN(base, index) ((PIT_TCTRL_REG(base, index) & PIT_TCTRL_TEN_MASK) >> PIT_TCTRL_TEN_SHIFT)
#define PIT_BRD_TCTRL_TEN(base, index) (BME_UBFX32(&PIT_TCTRL_REG(base, index), PIT_TCTRL_TEN_SHIFT, PIT_TCTRL_TEN_WIDTH))

/*! @brief Set the TEN field to a new value. */
#define PIT_WR_TCTRL_TEN(base, index, value) (PIT_RMW_TCTRL(base, index, PIT_TCTRL_TEN_MASK, PIT_TCTRL_TEN(value)))
#define PIT_BWR_TCTRL_TEN(base, index, value) (BME_BFI32(&PIT_TCTRL_REG(base, index), ((uint32_t)(value) << PIT_TCTRL_TEN_SHIFT), PIT_TCTRL_TEN_SHIFT, PIT_TCTRL_TEN_WIDTH))
/*@}*/

/*!
 * @name Register PIT_TCTRL, field TIE[1] (RW)
 *
 * When an interrupt is pending, or, TFLGn[TIF] is set, enabling the interrupt
 * will immediately cause an interrupt event. To avoid this, the associated
 * TFLGn[TIF] must be cleared first.
 *
 * Values:
 * - 0b0 - Interrupt requests from Timer n are disabled.
 * - 0b1 - Interrupt will be requested whenever TIF is set.
 */
/*@{*/
/*! @brief Read current value of the PIT_TCTRL_TIE field. */
#define PIT_RD_TCTRL_TIE(base, index) ((PIT_TCTRL_REG(base, index) & PIT_TCTRL_TIE_MASK) >> PIT_TCTRL_TIE_SHIFT)
#define PIT_BRD_TCTRL_TIE(base, index) (BME_UBFX32(&PIT_TCTRL_REG(base, index), PIT_TCTRL_TIE_SHIFT, PIT_TCTRL_TIE_WIDTH))

/*! @brief Set the TIE field to a new value. */
#define PIT_WR_TCTRL_TIE(base, index, value) (PIT_RMW_TCTRL(base, index, PIT_TCTRL_TIE_MASK, PIT_TCTRL_TIE(value)))
#define PIT_BWR_TCTRL_TIE(base, index, value) (BME_BFI32(&PIT_TCTRL_REG(base, index), ((uint32_t)(value) << PIT_TCTRL_TIE_SHIFT), PIT_TCTRL_TIE_SHIFT, PIT_TCTRL_TIE_WIDTH))
/*@}*/

/*!
 * @name Register PIT_TCTRL, field CHN[2] (RW)
 *
 * When activated, Timer n-1 needs to expire before timer n can decrement by 1.
 * Timer 0 cannot be chained.
 *
 * Values:
 * - 0b0 - Timer is not chained.
 * - 0b1 - Timer is chained to previous timer. For example, for Channel 2, if
 *     this field is set, Timer 2 is chained to Timer 1.
 */
/*@{*/
/*! @brief Read current value of the PIT_TCTRL_CHN field. */
#define PIT_RD_TCTRL_CHN(base, index) ((PIT_TCTRL_REG(base, index) & PIT_TCTRL_CHN_MASK) >> PIT_TCTRL_CHN_SHIFT)
#define PIT_BRD_TCTRL_CHN(base, index) (BME_UBFX32(&PIT_TCTRL_REG(base, index), PIT_TCTRL_CHN_SHIFT, PIT_TCTRL_CHN_WIDTH))

/*! @brief Set the CHN field to a new value. */
#define PIT_WR_TCTRL_CHN(base, index, value) (PIT_RMW_TCTRL(base, index, PIT_TCTRL_CHN_MASK, PIT_TCTRL_CHN(value)))
#define PIT_BWR_TCTRL_CHN(base, index, value) (BME_BFI32(&PIT_TCTRL_REG(base, index), ((uint32_t)(value) << PIT_TCTRL_CHN_SHIFT), PIT_TCTRL_CHN_SHIFT, PIT_TCTRL_CHN_WIDTH))
/*@}*/

/*******************************************************************************
 * PIT_TFLG - Timer Flag Register
 ******************************************************************************/

/*!
 * @brief PIT_TFLG - Timer Flag Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * These registers hold the PIT interrupt flags. Access: User read/write
 */
/*!
 * @name Constants and macros for entire PIT_TFLG register
 */
/*@{*/
#define PIT_RD_TFLG(base, index) (PIT_TFLG_REG(base, index))
#define PIT_WR_TFLG(base, index, value) (PIT_TFLG_REG(base, index) = (value))
#define PIT_RMW_TFLG(base, index, mask, value) (PIT_WR_TFLG(base, index, (PIT_RD_TFLG(base, index) & ~(mask)) | (value)))
#define PIT_SET_TFLG(base, index, value) (BME_OR32(&PIT_TFLG_REG(base, index), (uint32_t)(value)))
#define PIT_CLR_TFLG(base, index, value) (BME_AND32(&PIT_TFLG_REG(base, index), (uint32_t)(~(value))))
#define PIT_TOG_TFLG(base, index, value) (BME_XOR32(&PIT_TFLG_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual PIT_TFLG bitfields
 */

/*!
 * @name Register PIT_TFLG, field TIF[0] (W1C)
 *
 * Sets to 1 at the end of the timer period. Writing 1 to this flag clears it.
 * Writing 0 has no effect. If enabled, or, when TCTRLn[TIE] = 1, TIF causes an
 * interrupt request.
 *
 * Values:
 * - 0b0 - Timeout has not yet occurred.
 * - 0b1 - Timeout has occurred.
 */
/*@{*/
/*! @brief Read current value of the PIT_TFLG_TIF field. */
#define PIT_RD_TFLG_TIF(base, index) ((PIT_TFLG_REG(base, index) & PIT_TFLG_TIF_MASK) >> PIT_TFLG_TIF_SHIFT)
#define PIT_BRD_TFLG_TIF(base, index) (BME_UBFX32(&PIT_TFLG_REG(base, index), PIT_TFLG_TIF_SHIFT, PIT_TFLG_TIF_WIDTH))

/*! @brief Set the TIF field to a new value. */
#define PIT_WR_TFLG_TIF(base, index, value) (PIT_RMW_TFLG(base, index, PIT_TFLG_TIF_MASK, PIT_TFLG_TIF(value)))
#define PIT_BWR_TFLG_TIF(base, index, value) (BME_BFI32(&PIT_TFLG_REG(base, index), ((uint32_t)(value) << PIT_TFLG_TIF_SHIFT), PIT_TFLG_TIF_SHIFT, PIT_TFLG_TIF_WIDTH))
/*@}*/

/*
 * MK82F25615 PMC
 *
 * Power Management Controller
 *
 * Registers defined in this header file:
 * - PMC_LVDSC1 - Low Voltage Detect Status And Control 1 register
 * - PMC_LVDSC2 - Low Voltage Detect Status And Control 2 register
 * - PMC_REGSC - Regulator Status And Control register
 * - PMC_HVDSC1 - High Voltage Detect Status And Control 1 register
 */

#define PMC_INSTANCE_COUNT (1U) /*!< Number of instances of the PMC module. */
#define PMC_IDX (0U) /*!< Instance number for PMC. */

/*******************************************************************************
 * PMC_LVDSC1 - Low Voltage Detect Status And Control 1 register
 ******************************************************************************/

/*!
 * @brief PMC_LVDSC1 - Low Voltage Detect Status And Control 1 register (RW)
 *
 * Reset value: 0x10U
 *
 * This register contains status and control bits to support the low voltage
 * detect function. This register should be written during the reset initialization
 * program to set the desired controls even if the desired settings are the same
 * as the reset settings. While the device is in the very low power or low
 * leakage modes, the LVD system is disabled regardless of LVDSC1 settings. To protect
 * systems that must have LVD always on, configure the Power Mode Protection
 * (PMPROT) register of the SMC module (SMC_PMPROT) to disallow any very low power or
 * low leakage modes from being enabled. See the device's data sheet for the
 * exact LVD trip voltages. The LVDV bits are reset solely on a POR Only event. The
 * register's other bits are reset on Chip Reset Not VLLS. For more information
 * about these reset types, refer to the Reset section details.
 */
/*!
 * @name Constants and macros for entire PMC_LVDSC1 register
 */
/*@{*/
#define PMC_RD_LVDSC1(base)      (PMC_LVDSC1_REG(base))
#define PMC_WR_LVDSC1(base, value) (PMC_LVDSC1_REG(base) = (value))
#define PMC_RMW_LVDSC1(base, mask, value) (PMC_WR_LVDSC1(base, (PMC_RD_LVDSC1(base) & ~(mask)) | (value)))
#define PMC_SET_LVDSC1(base, value) (BME_OR8(&PMC_LVDSC1_REG(base), (uint8_t)(value)))
#define PMC_CLR_LVDSC1(base, value) (BME_AND8(&PMC_LVDSC1_REG(base), (uint8_t)(~(value))))
#define PMC_TOG_LVDSC1(base, value) (BME_XOR8(&PMC_LVDSC1_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual PMC_LVDSC1 bitfields
 */

/*!
 * @name Register PMC_LVDSC1, field LVDV[1:0] (RW)
 *
 * Selects the LVD trip point voltage (V LVD ).
 *
 * Values:
 * - 0b00 - Low trip point selected (V LVD = V LVDL )
 * - 0b01 - High trip point selected (V LVD = V LVDH )
 * - 0b10 - Reserved
 * - 0b11 - Reserved
 */
/*@{*/
/*! @brief Read current value of the PMC_LVDSC1_LVDV field. */
#define PMC_RD_LVDSC1_LVDV(base) ((PMC_LVDSC1_REG(base) & PMC_LVDSC1_LVDV_MASK) >> PMC_LVDSC1_LVDV_SHIFT)
#define PMC_BRD_LVDSC1_LVDV(base) (BME_UBFX8(&PMC_LVDSC1_REG(base), PMC_LVDSC1_LVDV_SHIFT, PMC_LVDSC1_LVDV_WIDTH))

/*! @brief Set the LVDV field to a new value. */
#define PMC_WR_LVDSC1_LVDV(base, value) (PMC_RMW_LVDSC1(base, PMC_LVDSC1_LVDV_MASK, PMC_LVDSC1_LVDV(value)))
#define PMC_BWR_LVDSC1_LVDV(base, value) (BME_BFI8(&PMC_LVDSC1_REG(base), ((uint8_t)(value) << PMC_LVDSC1_LVDV_SHIFT), PMC_LVDSC1_LVDV_SHIFT, PMC_LVDSC1_LVDV_WIDTH))
/*@}*/

/*!
 * @name Register PMC_LVDSC1, field LVDRE[4] (RW)
 *
 * This write-once bit enables LVDF events to generate a hardware reset.
 * Additional writes are ignored.
 *
 * Values:
 * - 0b0 - LVDF does not generate hardware resets
 * - 0b1 - Force an MCU reset when LVDF = 1
 */
/*@{*/
/*! @brief Read current value of the PMC_LVDSC1_LVDRE field. */
#define PMC_RD_LVDSC1_LVDRE(base) ((PMC_LVDSC1_REG(base) & PMC_LVDSC1_LVDRE_MASK) >> PMC_LVDSC1_LVDRE_SHIFT)
#define PMC_BRD_LVDSC1_LVDRE(base) (BME_UBFX8(&PMC_LVDSC1_REG(base), PMC_LVDSC1_LVDRE_SHIFT, PMC_LVDSC1_LVDRE_WIDTH))

/*! @brief Set the LVDRE field to a new value. */
#define PMC_WR_LVDSC1_LVDRE(base, value) (PMC_RMW_LVDSC1(base, PMC_LVDSC1_LVDRE_MASK, PMC_LVDSC1_LVDRE(value)))
#define PMC_BWR_LVDSC1_LVDRE(base, value) (BME_BFI8(&PMC_LVDSC1_REG(base), ((uint8_t)(value) << PMC_LVDSC1_LVDRE_SHIFT), PMC_LVDSC1_LVDRE_SHIFT, PMC_LVDSC1_LVDRE_WIDTH))
/*@}*/

/*!
 * @name Register PMC_LVDSC1, field LVDIE[5] (RW)
 *
 * Enables hardware interrupt requests for LVDF.
 *
 * Values:
 * - 0b0 - Hardware interrupt disabled (use polling)
 * - 0b1 - Request a hardware interrupt when LVDF = 1
 */
/*@{*/
/*! @brief Read current value of the PMC_LVDSC1_LVDIE field. */
#define PMC_RD_LVDSC1_LVDIE(base) ((PMC_LVDSC1_REG(base) & PMC_LVDSC1_LVDIE_MASK) >> PMC_LVDSC1_LVDIE_SHIFT)
#define PMC_BRD_LVDSC1_LVDIE(base) (BME_UBFX8(&PMC_LVDSC1_REG(base), PMC_LVDSC1_LVDIE_SHIFT, PMC_LVDSC1_LVDIE_WIDTH))

/*! @brief Set the LVDIE field to a new value. */
#define PMC_WR_LVDSC1_LVDIE(base, value) (PMC_RMW_LVDSC1(base, PMC_LVDSC1_LVDIE_MASK, PMC_LVDSC1_LVDIE(value)))
#define PMC_BWR_LVDSC1_LVDIE(base, value) (BME_BFI8(&PMC_LVDSC1_REG(base), ((uint8_t)(value) << PMC_LVDSC1_LVDIE_SHIFT), PMC_LVDSC1_LVDIE_SHIFT, PMC_LVDSC1_LVDIE_WIDTH))
/*@}*/

/*!
 * @name Register PMC_LVDSC1, field LVDACK[6] (WORZ)
 *
 * This write-only field is used to acknowledge low voltage detection errors.
 * Write 1 to clear LVDF. Reads always return 0.
 */
/*@{*/
/*! @brief Set the LVDACK field to a new value. */
#define PMC_WR_LVDSC1_LVDACK(base, value) (PMC_RMW_LVDSC1(base, PMC_LVDSC1_LVDACK_MASK, PMC_LVDSC1_LVDACK(value)))
#define PMC_BWR_LVDSC1_LVDACK(base, value) (BME_BFI8(&PMC_LVDSC1_REG(base), ((uint8_t)(value) << PMC_LVDSC1_LVDACK_SHIFT), PMC_LVDSC1_LVDACK_SHIFT, PMC_LVDSC1_LVDACK_WIDTH))
/*@}*/

/*!
 * @name Register PMC_LVDSC1, field LVDF[7] (RO)
 *
 * This read-only status field indicates a low-voltage detect event.
 *
 * Values:
 * - 0b0 - Low-voltage event not detected
 * - 0b1 - Low-voltage event detected
 */
/*@{*/
/*! @brief Read current value of the PMC_LVDSC1_LVDF field. */
#define PMC_RD_LVDSC1_LVDF(base) ((PMC_LVDSC1_REG(base) & PMC_LVDSC1_LVDF_MASK) >> PMC_LVDSC1_LVDF_SHIFT)
#define PMC_BRD_LVDSC1_LVDF(base) (BME_UBFX8(&PMC_LVDSC1_REG(base), PMC_LVDSC1_LVDF_SHIFT, PMC_LVDSC1_LVDF_WIDTH))
/*@}*/

/*******************************************************************************
 * PMC_LVDSC2 - Low Voltage Detect Status And Control 2 register
 ******************************************************************************/

/*!
 * @brief PMC_LVDSC2 - Low Voltage Detect Status And Control 2 register (RW)
 *
 * Reset value: 0x00U
 *
 * This register contains status and control bits to support the low voltage
 * warning function. While the device is in the very low power or low leakage modes,
 * the LVD system is disabled regardless of LVDSC2 settings. See the device's
 * data sheet for the exact LVD trip voltages. The LVW trip voltages depend on LVWV
 * and LVDV. LVWV is reset solely on a POR Only event. The other fields of the
 * register are reset on Chip Reset Not VLLS. For more information about these
 * reset types, refer to the Reset section details.
 */
/*!
 * @name Constants and macros for entire PMC_LVDSC2 register
 */
/*@{*/
#define PMC_RD_LVDSC2(base)      (PMC_LVDSC2_REG(base))
#define PMC_WR_LVDSC2(base, value) (PMC_LVDSC2_REG(base) = (value))
#define PMC_RMW_LVDSC2(base, mask, value) (PMC_WR_LVDSC2(base, (PMC_RD_LVDSC2(base) & ~(mask)) | (value)))
#define PMC_SET_LVDSC2(base, value) (BME_OR8(&PMC_LVDSC2_REG(base), (uint8_t)(value)))
#define PMC_CLR_LVDSC2(base, value) (BME_AND8(&PMC_LVDSC2_REG(base), (uint8_t)(~(value))))
#define PMC_TOG_LVDSC2(base, value) (BME_XOR8(&PMC_LVDSC2_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual PMC_LVDSC2 bitfields
 */

/*!
 * @name Register PMC_LVDSC2, field LVWV[1:0] (RW)
 *
 * Selects the LVW trip point voltage (VLVW). The actual voltage for the warning
 * depends on LVDSC1[LVDV].
 *
 * Values:
 * - 0b00 - Low trip point selected (VLVW = VLVW1)
 * - 0b01 - Mid 1 trip point selected (VLVW = VLVW2)
 * - 0b10 - Mid 2 trip point selected (VLVW = VLVW3)
 * - 0b11 - High trip point selected (VLVW = VLVW4)
 */
/*@{*/
/*! @brief Read current value of the PMC_LVDSC2_LVWV field. */
#define PMC_RD_LVDSC2_LVWV(base) ((PMC_LVDSC2_REG(base) & PMC_LVDSC2_LVWV_MASK) >> PMC_LVDSC2_LVWV_SHIFT)
#define PMC_BRD_LVDSC2_LVWV(base) (BME_UBFX8(&PMC_LVDSC2_REG(base), PMC_LVDSC2_LVWV_SHIFT, PMC_LVDSC2_LVWV_WIDTH))

/*! @brief Set the LVWV field to a new value. */
#define PMC_WR_LVDSC2_LVWV(base, value) (PMC_RMW_LVDSC2(base, PMC_LVDSC2_LVWV_MASK, PMC_LVDSC2_LVWV(value)))
#define PMC_BWR_LVDSC2_LVWV(base, value) (BME_BFI8(&PMC_LVDSC2_REG(base), ((uint8_t)(value) << PMC_LVDSC2_LVWV_SHIFT), PMC_LVDSC2_LVWV_SHIFT, PMC_LVDSC2_LVWV_WIDTH))
/*@}*/

/*!
 * @name Register PMC_LVDSC2, field LVWIE[5] (RW)
 *
 * Enables hardware interrupt requests for LVWF.
 *
 * Values:
 * - 0b0 - Hardware interrupt disabled (use polling)
 * - 0b1 - Request a hardware interrupt when LVWF = 1
 */
/*@{*/
/*! @brief Read current value of the PMC_LVDSC2_LVWIE field. */
#define PMC_RD_LVDSC2_LVWIE(base) ((PMC_LVDSC2_REG(base) & PMC_LVDSC2_LVWIE_MASK) >> PMC_LVDSC2_LVWIE_SHIFT)
#define PMC_BRD_LVDSC2_LVWIE(base) (BME_UBFX8(&PMC_LVDSC2_REG(base), PMC_LVDSC2_LVWIE_SHIFT, PMC_LVDSC2_LVWIE_WIDTH))

/*! @brief Set the LVWIE field to a new value. */
#define PMC_WR_LVDSC2_LVWIE(base, value) (PMC_RMW_LVDSC2(base, PMC_LVDSC2_LVWIE_MASK, PMC_LVDSC2_LVWIE(value)))
#define PMC_BWR_LVDSC2_LVWIE(base, value) (BME_BFI8(&PMC_LVDSC2_REG(base), ((uint8_t)(value) << PMC_LVDSC2_LVWIE_SHIFT), PMC_LVDSC2_LVWIE_SHIFT, PMC_LVDSC2_LVWIE_WIDTH))
/*@}*/

/*!
 * @name Register PMC_LVDSC2, field LVWACK[6] (WORZ)
 *
 * This write-only field is used to acknowledge low voltage warning errors.
 * Write 1 to clear LVWF. Reads always return 0.
 */
/*@{*/
/*! @brief Set the LVWACK field to a new value. */
#define PMC_WR_LVDSC2_LVWACK(base, value) (PMC_RMW_LVDSC2(base, PMC_LVDSC2_LVWACK_MASK, PMC_LVDSC2_LVWACK(value)))
#define PMC_BWR_LVDSC2_LVWACK(base, value) (BME_BFI8(&PMC_LVDSC2_REG(base), ((uint8_t)(value) << PMC_LVDSC2_LVWACK_SHIFT), PMC_LVDSC2_LVWACK_SHIFT, PMC_LVDSC2_LVWACK_WIDTH))
/*@}*/

/*!
 * @name Register PMC_LVDSC2, field LVWF[7] (RO)
 *
 * This read-only status field indicates a low-voltage warning event. LVWF is
 * set when VSupply transitions below the trip point, or after reset and VSupply is
 * already below VLVW. LVWF may be 1 after power-on reset, therefore, to use LVW
 * interrupt function, before enabling LVWIE, LVWF must be cleared by writing
 * LVWACK first.
 *
 * Values:
 * - 0b0 - Low-voltage warning event not detected
 * - 0b1 - Low-voltage warning event detected
 */
/*@{*/
/*! @brief Read current value of the PMC_LVDSC2_LVWF field. */
#define PMC_RD_LVDSC2_LVWF(base) ((PMC_LVDSC2_REG(base) & PMC_LVDSC2_LVWF_MASK) >> PMC_LVDSC2_LVWF_SHIFT)
#define PMC_BRD_LVDSC2_LVWF(base) (BME_UBFX8(&PMC_LVDSC2_REG(base), PMC_LVDSC2_LVWF_SHIFT, PMC_LVDSC2_LVWF_WIDTH))
/*@}*/

/*******************************************************************************
 * PMC_REGSC - Regulator Status And Control register
 ******************************************************************************/

/*!
 * @brief PMC_REGSC - Regulator Status And Control register (RW)
 *
 * Reset value: 0x04U
 *
 * The PMC contains an internal voltage regulator. The voltage regulator design
 * uses a bandgap reference that is also available through a buffer as input to
 * certain internal peripherals, such as the CMP and ADC. The internal regulator
 * provides a status bit (REGONS) indicating the regulator is in run regulation.
 * This register is reset on Chip Reset Not VLLS and by reset types that trigger
 * Chip Reset not VLLS. See the Reset section details for more information.
 */
/*!
 * @name Constants and macros for entire PMC_REGSC register
 */
/*@{*/
#define PMC_RD_REGSC(base)       (PMC_REGSC_REG(base))
#define PMC_WR_REGSC(base, value) (PMC_REGSC_REG(base) = (value))
#define PMC_RMW_REGSC(base, mask, value) (PMC_WR_REGSC(base, (PMC_RD_REGSC(base) & ~(mask)) | (value)))
#define PMC_SET_REGSC(base, value) (BME_OR8(&PMC_REGSC_REG(base), (uint8_t)(value)))
#define PMC_CLR_REGSC(base, value) (BME_AND8(&PMC_REGSC_REG(base), (uint8_t)(~(value))))
#define PMC_TOG_REGSC(base, value) (BME_XOR8(&PMC_REGSC_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual PMC_REGSC bitfields
 */

/*!
 * @name Register PMC_REGSC, field BGBE[0] (RW)
 *
 * Enables the bandgap buffer.
 *
 * Values:
 * - 0b0 - Bandgap buffer not enabled
 * - 0b1 - Bandgap buffer enabled
 */
/*@{*/
/*! @brief Read current value of the PMC_REGSC_BGBE field. */
#define PMC_RD_REGSC_BGBE(base) ((PMC_REGSC_REG(base) & PMC_REGSC_BGBE_MASK) >> PMC_REGSC_BGBE_SHIFT)
#define PMC_BRD_REGSC_BGBE(base) (BME_UBFX8(&PMC_REGSC_REG(base), PMC_REGSC_BGBE_SHIFT, PMC_REGSC_BGBE_WIDTH))

/*! @brief Set the BGBE field to a new value. */
#define PMC_WR_REGSC_BGBE(base, value) (PMC_RMW_REGSC(base, (PMC_REGSC_BGBE_MASK | PMC_REGSC_ACKISO_MASK), PMC_REGSC_BGBE(value)))
#define PMC_BWR_REGSC_BGBE(base, value) (BME_BFI8(&PMC_REGSC_REG(base), ((uint8_t)(value) << PMC_REGSC_BGBE_SHIFT), PMC_REGSC_BGBE_SHIFT, PMC_REGSC_BGBE_WIDTH))
/*@}*/

/*!
 * @name Register PMC_REGSC, field REGONS[2] (RO)
 *
 * This read-only field provides the current status of the internal voltage
 * regulator.
 *
 * Values:
 * - 0b0 - Regulator is in stop regulation or in transition to/from it
 * - 0b1 - Regulator is in run regulation
 */
/*@{*/
/*! @brief Read current value of the PMC_REGSC_REGONS field. */
#define PMC_RD_REGSC_REGONS(base) ((PMC_REGSC_REG(base) & PMC_REGSC_REGONS_MASK) >> PMC_REGSC_REGONS_SHIFT)
#define PMC_BRD_REGSC_REGONS(base) (BME_UBFX8(&PMC_REGSC_REG(base), PMC_REGSC_REGONS_SHIFT, PMC_REGSC_REGONS_WIDTH))
/*@}*/

/*!
 * @name Register PMC_REGSC, field ACKISO[3] (W1C)
 *
 * Reading this field indicates whether certain peripherals and the I/O pads are
 * in a latched state as a result of having been in a VLLS mode. Writing 1 to
 * this field when it is set releases the I/O pads and certain peripherals to their
 * normal run mode state. After recovering from a VLLS mode, user should restore
 * chip configuration before clearing ACKISO. In particular, pin configuration
 * for enabled LLWU wakeup pins should be restored to avoid any LLWU flag from
 * being falsely set when ACKISO is cleared.
 *
 * Values:
 * - 0b0 - Peripherals and I/O pads are in normal run state.
 * - 0b1 - Certain peripherals and I/O pads are in an isolated and latched state.
 */
/*@{*/
/*! @brief Read current value of the PMC_REGSC_ACKISO field. */
#define PMC_RD_REGSC_ACKISO(base) ((PMC_REGSC_REG(base) & PMC_REGSC_ACKISO_MASK) >> PMC_REGSC_ACKISO_SHIFT)
#define PMC_BRD_REGSC_ACKISO(base) (BME_UBFX8(&PMC_REGSC_REG(base), PMC_REGSC_ACKISO_SHIFT, PMC_REGSC_ACKISO_WIDTH))

/*! @brief Set the ACKISO field to a new value. */
#define PMC_WR_REGSC_ACKISO(base, value) (PMC_RMW_REGSC(base, PMC_REGSC_ACKISO_MASK, PMC_REGSC_ACKISO(value)))
#define PMC_BWR_REGSC_ACKISO(base, value) (BME_BFI8(&PMC_REGSC_REG(base), ((uint8_t)(value) << PMC_REGSC_ACKISO_SHIFT), PMC_REGSC_ACKISO_SHIFT, PMC_REGSC_ACKISO_WIDTH))
/*@}*/

/*!
 * @name Register PMC_REGSC, field BGEN[4] (RW)
 *
 * BGEN controls whether the bandgap is enabled in lower power modes of
 * operation (VLPx, LLS, and VLLSx). When on-chip peripherals require the bandgap voltage
 * reference in low power modes of operation, set BGEN to continue to enable the
 * bandgap operation. When the bandgap voltage reference is not needed in low
 * power modes, clear BGEN to avoid excess power consumption.
 *
 * Values:
 * - 0b0 - Bandgap voltage reference is disabled in VLPx , LLS , and VLLSx modes.
 * - 0b1 - Bandgap voltage reference is enabled in VLPx , LLS , and VLLSx modes.
 */
/*@{*/
/*! @brief Read current value of the PMC_REGSC_BGEN field. */
#define PMC_RD_REGSC_BGEN(base) ((PMC_REGSC_REG(base) & PMC_REGSC_BGEN_MASK) >> PMC_REGSC_BGEN_SHIFT)
#define PMC_BRD_REGSC_BGEN(base) (BME_UBFX8(&PMC_REGSC_REG(base), PMC_REGSC_BGEN_SHIFT, PMC_REGSC_BGEN_WIDTH))

/*! @brief Set the BGEN field to a new value. */
#define PMC_WR_REGSC_BGEN(base, value) (PMC_RMW_REGSC(base, (PMC_REGSC_BGEN_MASK | PMC_REGSC_ACKISO_MASK), PMC_REGSC_BGEN(value)))
#define PMC_BWR_REGSC_BGEN(base, value) (BME_BFI8(&PMC_REGSC_REG(base), ((uint8_t)(value) << PMC_REGSC_BGEN_SHIFT), PMC_REGSC_BGEN_SHIFT, PMC_REGSC_BGEN_WIDTH))
/*@}*/

/*******************************************************************************
 * PMC_HVDSC1 - High Voltage Detect Status And Control 1 register
 ******************************************************************************/

/*!
 * @brief PMC_HVDSC1 - High Voltage Detect Status And Control 1 register (RW)
 *
 * Reset value: 0x01U
 *
 * This register contains status and control bits to support the high voltage
 * detect function. This register should be written during the reset initialization
 * program to set the desired controls even if the desired settings are the same
 * as the reset settings. While the device is in the very low power or low
 * leakage modes, the HVD system is disabled regardless of HVDSC1 settings. To protect
 * systems that must have HVD always on, configure the Power Mode Protection
 * (PMPROT) register of the SMC module (SMC_PMPROT) to disallow any very low power
 * or low leakage modes from being enabled. See the device's data sheet for the
 * exact HVD trip voltages. This register is reset solely on a POR Only event.For
 * more information about these reset types, refer to the Reset section details.
 */
/*!
 * @name Constants and macros for entire PMC_HVDSC1 register
 */
/*@{*/
#define PMC_RD_HVDSC1(base)      (PMC_HVDSC1_REG(base))
#define PMC_WR_HVDSC1(base, value) (PMC_HVDSC1_REG(base) = (value))
#define PMC_RMW_HVDSC1(base, mask, value) (PMC_WR_HVDSC1(base, (PMC_RD_HVDSC1(base) & ~(mask)) | (value)))
#define PMC_SET_HVDSC1(base, value) (BME_OR8(&PMC_HVDSC1_REG(base), (uint8_t)(value)))
#define PMC_CLR_HVDSC1(base, value) (BME_AND8(&PMC_HVDSC1_REG(base), (uint8_t)(~(value))))
#define PMC_TOG_HVDSC1(base, value) (BME_XOR8(&PMC_HVDSC1_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual PMC_HVDSC1 bitfields
 */

/*!
 * @name Register PMC_HVDSC1, field HVDV[0] (RW)
 *
 * Selects the HVD trip point voltage (V HVD ).
 *
 * Values:
 * - 0b0 - Low trip point selected (V HVD = V HVDL )
 * - 0b1 - High trip point selected (V HVD = V HVDH )
 */
/*@{*/
/*! @brief Read current value of the PMC_HVDSC1_HVDV field. */
#define PMC_RD_HVDSC1_HVDV(base) ((PMC_HVDSC1_REG(base) & PMC_HVDSC1_HVDV_MASK) >> PMC_HVDSC1_HVDV_SHIFT)
#define PMC_BRD_HVDSC1_HVDV(base) (BME_UBFX8(&PMC_HVDSC1_REG(base), PMC_HVDSC1_HVDV_SHIFT, PMC_HVDSC1_HVDV_WIDTH))

/*! @brief Set the HVDV field to a new value. */
#define PMC_WR_HVDSC1_HVDV(base, value) (PMC_RMW_HVDSC1(base, PMC_HVDSC1_HVDV_MASK, PMC_HVDSC1_HVDV(value)))
#define PMC_BWR_HVDSC1_HVDV(base, value) (BME_BFI8(&PMC_HVDSC1_REG(base), ((uint8_t)(value) << PMC_HVDSC1_HVDV_SHIFT), PMC_HVDSC1_HVDV_SHIFT, PMC_HVDSC1_HVDV_WIDTH))
/*@}*/

/*!
 * @name Register PMC_HVDSC1, field HVDRE[4] (RW)
 *
 * This write-once bit enables HVDF events to generate a hardware reset.
 * Additional writes are ignored until the next chip reset.
 *
 * Values:
 * - 0b0 - HVDF does not generate hardware resets
 * - 0b1 - Force an MCU reset when HVDF = 1
 */
/*@{*/
/*! @brief Read current value of the PMC_HVDSC1_HVDRE field. */
#define PMC_RD_HVDSC1_HVDRE(base) ((PMC_HVDSC1_REG(base) & PMC_HVDSC1_HVDRE_MASK) >> PMC_HVDSC1_HVDRE_SHIFT)
#define PMC_BRD_HVDSC1_HVDRE(base) (BME_UBFX8(&PMC_HVDSC1_REG(base), PMC_HVDSC1_HVDRE_SHIFT, PMC_HVDSC1_HVDRE_WIDTH))

/*! @brief Set the HVDRE field to a new value. */
#define PMC_WR_HVDSC1_HVDRE(base, value) (PMC_RMW_HVDSC1(base, PMC_HVDSC1_HVDRE_MASK, PMC_HVDSC1_HVDRE(value)))
#define PMC_BWR_HVDSC1_HVDRE(base, value) (BME_BFI8(&PMC_HVDSC1_REG(base), ((uint8_t)(value) << PMC_HVDSC1_HVDRE_SHIFT), PMC_HVDSC1_HVDRE_SHIFT, PMC_HVDSC1_HVDRE_WIDTH))
/*@}*/

/*!
 * @name Register PMC_HVDSC1, field HVDIE[5] (RW)
 *
 * Enables hardware interrupt requests for HVDF.
 *
 * Values:
 * - 0b0 - Hardware interrupt disabled (use polling)
 * - 0b1 - Request a hardware interrupt when HVDF = 1
 */
/*@{*/
/*! @brief Read current value of the PMC_HVDSC1_HVDIE field. */
#define PMC_RD_HVDSC1_HVDIE(base) ((PMC_HVDSC1_REG(base) & PMC_HVDSC1_HVDIE_MASK) >> PMC_HVDSC1_HVDIE_SHIFT)
#define PMC_BRD_HVDSC1_HVDIE(base) (BME_UBFX8(&PMC_HVDSC1_REG(base), PMC_HVDSC1_HVDIE_SHIFT, PMC_HVDSC1_HVDIE_WIDTH))

/*! @brief Set the HVDIE field to a new value. */
#define PMC_WR_HVDSC1_HVDIE(base, value) (PMC_RMW_HVDSC1(base, PMC_HVDSC1_HVDIE_MASK, PMC_HVDSC1_HVDIE(value)))
#define PMC_BWR_HVDSC1_HVDIE(base, value) (BME_BFI8(&PMC_HVDSC1_REG(base), ((uint8_t)(value) << PMC_HVDSC1_HVDIE_SHIFT), PMC_HVDSC1_HVDIE_SHIFT, PMC_HVDSC1_HVDIE_WIDTH))
/*@}*/

/*!
 * @name Register PMC_HVDSC1, field HVDACK[6] (WORZ)
 *
 * This write-only field is used to acknowledge high voltage detection errors.
 * Write 1 to clear HVDF. Reads always return 0.
 */
/*@{*/
/*! @brief Set the HVDACK field to a new value. */
#define PMC_WR_HVDSC1_HVDACK(base, value) (PMC_RMW_HVDSC1(base, PMC_HVDSC1_HVDACK_MASK, PMC_HVDSC1_HVDACK(value)))
#define PMC_BWR_HVDSC1_HVDACK(base, value) (BME_BFI8(&PMC_HVDSC1_REG(base), ((uint8_t)(value) << PMC_HVDSC1_HVDACK_SHIFT), PMC_HVDSC1_HVDACK_SHIFT, PMC_HVDSC1_HVDACK_WIDTH))
/*@}*/

/*!
 * @name Register PMC_HVDSC1, field HVDF[7] (RO)
 *
 * This read-only status field indicates a high-voltage detect event.
 *
 * Values:
 * - 0b0 - High-voltage event not detected
 * - 0b1 - High-voltage event detected
 */
/*@{*/
/*! @brief Read current value of the PMC_HVDSC1_HVDF field. */
#define PMC_RD_HVDSC1_HVDF(base) ((PMC_HVDSC1_REG(base) & PMC_HVDSC1_HVDF_MASK) >> PMC_HVDSC1_HVDF_SHIFT)
#define PMC_BRD_HVDSC1_HVDF(base) (BME_UBFX8(&PMC_HVDSC1_REG(base), PMC_HVDSC1_HVDF_SHIFT, PMC_HVDSC1_HVDF_WIDTH))
/*@}*/

/*
 * MK82F25615 PORT
 *
 * Pin Control and Interrupts
 *
 * Registers defined in this header file:
 * - PORT_PCR - Pin Control Register n
 * - PORT_GPCLR - Global Pin Control Low Register
 * - PORT_GPCHR - Global Pin Control High Register
 * - PORT_ISFR - Interrupt Status Flag Register
 * - PORT_DFER - Digital Filter Enable Register
 * - PORT_DFCR - Digital Filter Clock Register
 * - PORT_DFWR - Digital Filter Width Register
 */

#define PORT_INSTANCE_COUNT (5U) /*!< Number of instances of the PORT module. */
#define PORTA_IDX (0U) /*!< Instance number for PORTA. */
#define PORTB_IDX (1U) /*!< Instance number for PORTB. */
#define PORTC_IDX (2U) /*!< Instance number for PORTC. */
#define PORTD_IDX (3U) /*!< Instance number for PORTD. */
#define PORTE_IDX (4U) /*!< Instance number for PORTE. */

/*******************************************************************************
 * PORT_PCR - Pin Control Register n
 ******************************************************************************/

/*!
 * @brief PORT_PCR - Pin Control Register n (RW)
 *
 * Reset value: 0x00000702U
 *
 * See the Signal Multiplexing and Pin Assignment chapter for the reset value of
 * this device. See the GPIO Configuration section for details on the available
 * functions for each pin. Do not modify pin configuration registers associated
 * with pins not available in your selected package. All unbonded pins not
 * available in your package will default to DISABLE state for lowest power consumption.
 */
/*!
 * @name Constants and macros for entire PORT_PCR register
 */
/*@{*/
#define PORT_RD_PCR(base, index) (PORT_PCR_REG(base, index))
#define PORT_WR_PCR(base, index, value) (PORT_PCR_REG(base, index) = (value))
#define PORT_RMW_PCR(base, index, mask, value) (PORT_WR_PCR(base, index, (PORT_RD_PCR(base, index) & ~(mask)) | (value)))
#define PORT_SET_PCR(base, index, value) (BME_OR32(&PORT_PCR_REG(base, index), (uint32_t)(value)))
#define PORT_CLR_PCR(base, index, value) (BME_AND32(&PORT_PCR_REG(base, index), (uint32_t)(~(value))))
#define PORT_TOG_PCR(base, index, value) (BME_XOR32(&PORT_PCR_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual PORT_PCR bitfields
 */

/*!
 * @name Register PORT_PCR, field PS[0] (RW)
 *
 * Pull configuration is valid in all digital pin muxing modes.
 *
 * Values:
 * - 0b0 - Internal pulldown resistor is enabled on the corresponding pin, if
 *     the corresponding PE field is set.
 * - 0b1 - Internal pullup resistor is enabled on the corresponding pin, if the
 *     corresponding PE field is set.
 */
/*@{*/
/*! @brief Read current value of the PORT_PCR_PS field. */
#define PORT_RD_PCR_PS(base, index) ((PORT_PCR_REG(base, index) & PORT_PCR_PS_MASK) >> PORT_PCR_PS_SHIFT)
#define PORT_BRD_PCR_PS(base, index) (BME_UBFX32(&PORT_PCR_REG(base, index), PORT_PCR_PS_SHIFT, PORT_PCR_PS_WIDTH))

/*! @brief Set the PS field to a new value. */
#define PORT_WR_PCR_PS(base, index, value) (PORT_RMW_PCR(base, index, (PORT_PCR_PS_MASK | PORT_PCR_ISF_MASK), PORT_PCR_PS(value)))
#define PORT_BWR_PCR_PS(base, index, value) (BME_BFI32(&PORT_PCR_REG(base, index), ((uint32_t)(value) << PORT_PCR_PS_SHIFT), PORT_PCR_PS_SHIFT, PORT_PCR_PS_WIDTH))
/*@}*/

/*!
 * @name Register PORT_PCR, field PE[1] (RW)
 *
 * Pull configuration is valid in all digital pin muxing modes.
 *
 * Values:
 * - 0b0 - Internal pullup or pulldown resistor is not enabled on the
 *     corresponding pin.
 * - 0b1 - Internal pullup or pulldown resistor is enabled on the corresponding
 *     pin, if the pin is configured as a digital input.
 */
/*@{*/
/*! @brief Read current value of the PORT_PCR_PE field. */
#define PORT_RD_PCR_PE(base, index) ((PORT_PCR_REG(base, index) & PORT_PCR_PE_MASK) >> PORT_PCR_PE_SHIFT)
#define PORT_BRD_PCR_PE(base, index) (BME_UBFX32(&PORT_PCR_REG(base, index), PORT_PCR_PE_SHIFT, PORT_PCR_PE_WIDTH))

/*! @brief Set the PE field to a new value. */
#define PORT_WR_PCR_PE(base, index, value) (PORT_RMW_PCR(base, index, (PORT_PCR_PE_MASK | PORT_PCR_ISF_MASK), PORT_PCR_PE(value)))
#define PORT_BWR_PCR_PE(base, index, value) (BME_BFI32(&PORT_PCR_REG(base, index), ((uint32_t)(value) << PORT_PCR_PE_SHIFT), PORT_PCR_PE_SHIFT, PORT_PCR_PE_WIDTH))
/*@}*/

/*!
 * @name Register PORT_PCR, field SRE[2] (RW)
 *
 * Slew rate configuration is valid in all digital pin muxing modes.
 *
 * Values:
 * - 0b0 - Fast slew rate is configured on the corresponding pin, if the pin is
 *     configured as a digital output.
 * - 0b1 - Slow slew rate is configured on the corresponding pin, if the pin is
 *     configured as a digital output.
 */
/*@{*/
/*! @brief Read current value of the PORT_PCR_SRE field. */
#define PORT_RD_PCR_SRE(base, index) ((PORT_PCR_REG(base, index) & PORT_PCR_SRE_MASK) >> PORT_PCR_SRE_SHIFT)
#define PORT_BRD_PCR_SRE(base, index) (BME_UBFX32(&PORT_PCR_REG(base, index), PORT_PCR_SRE_SHIFT, PORT_PCR_SRE_WIDTH))

/*! @brief Set the SRE field to a new value. */
#define PORT_WR_PCR_SRE(base, index, value) (PORT_RMW_PCR(base, index, (PORT_PCR_SRE_MASK | PORT_PCR_ISF_MASK), PORT_PCR_SRE(value)))
#define PORT_BWR_PCR_SRE(base, index, value) (BME_BFI32(&PORT_PCR_REG(base, index), ((uint32_t)(value) << PORT_PCR_SRE_SHIFT), PORT_PCR_SRE_SHIFT, PORT_PCR_SRE_WIDTH))
/*@}*/

/*!
 * @name Register PORT_PCR, field PFE[4] (RW)
 *
 * Passive filter configuration is valid in all digital pin muxing modes.
 *
 * Values:
 * - 0b0 - Passive input filter is disabled on the corresponding pin.
 * - 0b1 - Passive input filter is enabled on the corresponding pin, if the pin
 *     is configured as a digital input. Refer to the device data sheet for
 *     filter characteristics.
 */
/*@{*/
/*! @brief Read current value of the PORT_PCR_PFE field. */
#define PORT_RD_PCR_PFE(base, index) ((PORT_PCR_REG(base, index) & PORT_PCR_PFE_MASK) >> PORT_PCR_PFE_SHIFT)
#define PORT_BRD_PCR_PFE(base, index) (BME_UBFX32(&PORT_PCR_REG(base, index), PORT_PCR_PFE_SHIFT, PORT_PCR_PFE_WIDTH))

/*! @brief Set the PFE field to a new value. */
#define PORT_WR_PCR_PFE(base, index, value) (PORT_RMW_PCR(base, index, (PORT_PCR_PFE_MASK | PORT_PCR_ISF_MASK), PORT_PCR_PFE(value)))
#define PORT_BWR_PCR_PFE(base, index, value) (BME_BFI32(&PORT_PCR_REG(base, index), ((uint32_t)(value) << PORT_PCR_PFE_SHIFT), PORT_PCR_PFE_SHIFT, PORT_PCR_PFE_WIDTH))
/*@}*/

/*!
 * @name Register PORT_PCR, field ODE[5] (RW)
 *
 * Open drain configuration is valid in all digital pin muxing modes.
 *
 * Values:
 * - 0b0 - Open drain output is disabled on the corresponding pin.
 * - 0b1 - Open drain output is enabled on the corresponding pin, if the pin is
 *     configured as a digital output.
 */
/*@{*/
/*! @brief Read current value of the PORT_PCR_ODE field. */
#define PORT_RD_PCR_ODE(base, index) ((PORT_PCR_REG(base, index) & PORT_PCR_ODE_MASK) >> PORT_PCR_ODE_SHIFT)
#define PORT_BRD_PCR_ODE(base, index) (BME_UBFX32(&PORT_PCR_REG(base, index), PORT_PCR_ODE_SHIFT, PORT_PCR_ODE_WIDTH))

/*! @brief Set the ODE field to a new value. */
#define PORT_WR_PCR_ODE(base, index, value) (PORT_RMW_PCR(base, index, (PORT_PCR_ODE_MASK | PORT_PCR_ISF_MASK), PORT_PCR_ODE(value)))
#define PORT_BWR_PCR_ODE(base, index, value) (BME_BFI32(&PORT_PCR_REG(base, index), ((uint32_t)(value) << PORT_PCR_ODE_SHIFT), PORT_PCR_ODE_SHIFT, PORT_PCR_ODE_WIDTH))
/*@}*/

/*!
 * @name Register PORT_PCR, field DSE[6] (RW)
 *
 * Drive strength configuration is valid in all digital pin muxing modes.
 *
 * Values:
 * - 0b0 - Low drive strength is configured on the corresponding pin, if pin is
 *     configured as a digital output.
 * - 0b1 - High drive strength is configured on the corresponding pin, if pin is
 *     configured as a digital output.
 */
/*@{*/
/*! @brief Read current value of the PORT_PCR_DSE field. */
#define PORT_RD_PCR_DSE(base, index) ((PORT_PCR_REG(base, index) & PORT_PCR_DSE_MASK) >> PORT_PCR_DSE_SHIFT)
#define PORT_BRD_PCR_DSE(base, index) (BME_UBFX32(&PORT_PCR_REG(base, index), PORT_PCR_DSE_SHIFT, PORT_PCR_DSE_WIDTH))

/*! @brief Set the DSE field to a new value. */
#define PORT_WR_PCR_DSE(base, index, value) (PORT_RMW_PCR(base, index, (PORT_PCR_DSE_MASK | PORT_PCR_ISF_MASK), PORT_PCR_DSE(value)))
#define PORT_BWR_PCR_DSE(base, index, value) (BME_BFI32(&PORT_PCR_REG(base, index), ((uint32_t)(value) << PORT_PCR_DSE_SHIFT), PORT_PCR_DSE_SHIFT, PORT_PCR_DSE_WIDTH))
/*@}*/

/*!
 * @name Register PORT_PCR, field MUX[10:8] (RW)
 *
 * Not all pins support all pin muxing slots. Unimplemented pin muxing slots are
 * reserved and may result in configuring the pin for a different pin muxing
 * slot. The corresponding pin is configured in the following pin muxing slot as
 * follows:
 *
 * Values:
 * - 0b000 - Pin disabled (Alternative 0) (analog).
 * - 0b001 - Alternative 1 (GPIO).
 * - 0b010 - Alternative 2 (chip-specific).
 * - 0b011 - Alternative 3 (chip-specific).
 * - 0b100 - Alternative 4 (chip-specific).
 * - 0b101 - Alternative 5 (chip-specific).
 * - 0b110 - Alternative 6 (chip-specific).
 * - 0b111 - Alternative 7 (chip-specific).
 */
/*@{*/
/*! @brief Read current value of the PORT_PCR_MUX field. */
#define PORT_RD_PCR_MUX(base, index) ((PORT_PCR_REG(base, index) & PORT_PCR_MUX_MASK) >> PORT_PCR_MUX_SHIFT)
#define PORT_BRD_PCR_MUX(base, index) (BME_UBFX32(&PORT_PCR_REG(base, index), PORT_PCR_MUX_SHIFT, PORT_PCR_MUX_WIDTH))

/*! @brief Set the MUX field to a new value. */
#define PORT_WR_PCR_MUX(base, index, value) (PORT_RMW_PCR(base, index, (PORT_PCR_MUX_MASK | PORT_PCR_ISF_MASK), PORT_PCR_MUX(value)))
#define PORT_BWR_PCR_MUX(base, index, value) (BME_BFI32(&PORT_PCR_REG(base, index), ((uint32_t)(value) << PORT_PCR_MUX_SHIFT), PORT_PCR_MUX_SHIFT, PORT_PCR_MUX_WIDTH))
/*@}*/

/*!
 * @name Register PORT_PCR, field LK[15] (RW)
 *
 * Values:
 * - 0b0 - Pin Control Register fields [15:0] are not locked.
 * - 0b1 - Pin Control Register fields [15:0] are locked and cannot be updated
 *     until the next system reset.
 */
/*@{*/
/*! @brief Read current value of the PORT_PCR_LK field. */
#define PORT_RD_PCR_LK(base, index) ((PORT_PCR_REG(base, index) & PORT_PCR_LK_MASK) >> PORT_PCR_LK_SHIFT)
#define PORT_BRD_PCR_LK(base, index) (BME_UBFX32(&PORT_PCR_REG(base, index), PORT_PCR_LK_SHIFT, PORT_PCR_LK_WIDTH))

/*! @brief Set the LK field to a new value. */
#define PORT_WR_PCR_LK(base, index, value) (PORT_RMW_PCR(base, index, (PORT_PCR_LK_MASK | PORT_PCR_ISF_MASK), PORT_PCR_LK(value)))
#define PORT_BWR_PCR_LK(base, index, value) (BME_BFI32(&PORT_PCR_REG(base, index), ((uint32_t)(value) << PORT_PCR_LK_SHIFT), PORT_PCR_LK_SHIFT, PORT_PCR_LK_WIDTH))
/*@}*/

/*!
 * @name Register PORT_PCR, field IRQC[19:16] (RW)
 *
 * The pin interrupt configuration is valid in all digital pin muxing modes. The
 * corresponding pin is configured to generate interrupt/DMA request as follows:
 *
 * Values:
 * - 0b0000 - Interrupt Status Flag (ISF) is disabled.
 * - 0b0001 - ISF flag and DMA request on rising edge.
 * - 0b0010 - ISF flag and DMA request on falling edge.
 * - 0b0011 - ISF flag and DMA request on either edge.
 * - 0b0100 - Reserved.
 * - 0b0101 - Reserved.
 * - 0b0110 - Reserved.
 * - 0b0111 - Reserved.
 * - 0b1000 - ISF flag and Interrupt when logic 0.
 * - 0b1001 - ISF flag and Interrupt on rising-edge.
 * - 0b1010 - ISF flag and Interrupt on falling-edge.
 * - 0b1011 - ISF flag and Interrupt on either edge.
 * - 0b1100 - ISF flag and Interrupt when logic 1.
 * - 0b1101 - Reserved.
 * - 0b1110 - Reserved.
 * - 0b1111 - Reserved.
 */
/*@{*/
/*! @brief Read current value of the PORT_PCR_IRQC field. */
#define PORT_RD_PCR_IRQC(base, index) ((PORT_PCR_REG(base, index) & PORT_PCR_IRQC_MASK) >> PORT_PCR_IRQC_SHIFT)
#define PORT_BRD_PCR_IRQC(base, index) (BME_UBFX32(&PORT_PCR_REG(base, index), PORT_PCR_IRQC_SHIFT, PORT_PCR_IRQC_WIDTH))

/*! @brief Set the IRQC field to a new value. */
#define PORT_WR_PCR_IRQC(base, index, value) (PORT_RMW_PCR(base, index, (PORT_PCR_IRQC_MASK | PORT_PCR_ISF_MASK), PORT_PCR_IRQC(value)))
#define PORT_BWR_PCR_IRQC(base, index, value) (BME_BFI32(&PORT_PCR_REG(base, index), ((uint32_t)(value) << PORT_PCR_IRQC_SHIFT), PORT_PCR_IRQC_SHIFT, PORT_PCR_IRQC_WIDTH))
/*@}*/

/*!
 * @name Register PORT_PCR, field ISF[24] (W1C)
 *
 * The pin interrupt configuration is valid in all digital pin muxing modes.
 *
 * Values:
 * - 0b0 - Configured interrupt is not detected.
 * - 0b1 - Configured interrupt is detected. If the pin is configured to
 *     generate a DMA request, then the corresponding flag will be cleared automatically
 *     at the completion of the requested DMA transfer. Otherwise, the flag
 *     remains set until a logic 1 is written to the flag. If the pin is configured
 *     for a level sensitive interrupt and the pin remains asserted, then the flag
 *     is set again immediately after it is cleared.
 */
/*@{*/
/*! @brief Read current value of the PORT_PCR_ISF field. */
#define PORT_RD_PCR_ISF(base, index) ((PORT_PCR_REG(base, index) & PORT_PCR_ISF_MASK) >> PORT_PCR_ISF_SHIFT)
#define PORT_BRD_PCR_ISF(base, index) (BME_UBFX32(&PORT_PCR_REG(base, index), PORT_PCR_ISF_SHIFT, PORT_PCR_ISF_WIDTH))

/*! @brief Set the ISF field to a new value. */
#define PORT_WR_PCR_ISF(base, index, value) (PORT_RMW_PCR(base, index, PORT_PCR_ISF_MASK, PORT_PCR_ISF(value)))
#define PORT_BWR_PCR_ISF(base, index, value) (BME_BFI32(&PORT_PCR_REG(base, index), ((uint32_t)(value) << PORT_PCR_ISF_SHIFT), PORT_PCR_ISF_SHIFT, PORT_PCR_ISF_WIDTH))
/*@}*/

/*******************************************************************************
 * PORT_GPCLR - Global Pin Control Low Register
 ******************************************************************************/

/*!
 * @brief PORT_GPCLR - Global Pin Control Low Register (WORZ)
 *
 * Reset value: 0x00000000U
 *
 * Only 32-bit writes are supported to this register.
 */
/*!
 * @name Constants and macros for entire PORT_GPCLR register
 */
/*@{*/
#define PORT_RD_GPCLR(base)      (PORT_GPCLR_REG(base))
#define PORT_WR_GPCLR(base, value) (PORT_GPCLR_REG(base) = (value))
#define PORT_RMW_GPCLR(base, mask, value) (PORT_WR_GPCLR(base, (PORT_RD_GPCLR(base) & ~(mask)) | (value)))
/*@}*/

/*
 * Constants & macros for individual PORT_GPCLR bitfields
 */

/*!
 * @name Register PORT_GPCLR, field GPWD[15:0] (WORZ)
 *
 * Write value that is written to all Pin Control Registers bits [15:0] that are
 * selected by GPWE.
 */
/*@{*/
/*! @brief Set the GPWD field to a new value. */
#define PORT_WR_GPCLR_GPWD(base, value) (PORT_RMW_GPCLR(base, PORT_GPCLR_GPWD_MASK, PORT_GPCLR_GPWD(value)))
#define PORT_BWR_GPCLR_GPWD(base, value) (PORT_WR_GPCLR_GPWD(base, value))
/*@}*/

/*!
 * @name Register PORT_GPCLR, field GPWE[31:16] (WORZ)
 *
 * Selects which Pin Control Registers (15 through 0) bits [15:0] update with
 * the value in GPWD. If a selected Pin Control Register is locked then the write
 * to that register is ignored.
 *
 * Values:
 * - 0b0000000000000000 - Corresponding Pin Control Register is not updated with
 *     the value in GPWD.
 * - 0b0000000000000001 - Corresponding Pin Control Register is updated with the
 *     value in GPWD.
 */
/*@{*/
/*! @brief Set the GPWE field to a new value. */
#define PORT_WR_GPCLR_GPWE(base, value) (PORT_RMW_GPCLR(base, PORT_GPCLR_GPWE_MASK, PORT_GPCLR_GPWE(value)))
#define PORT_BWR_GPCLR_GPWE(base, value) (PORT_WR_GPCLR_GPWE(base, value))
/*@}*/

/*******************************************************************************
 * PORT_GPCHR - Global Pin Control High Register
 ******************************************************************************/

/*!
 * @brief PORT_GPCHR - Global Pin Control High Register (WORZ)
 *
 * Reset value: 0x00000000U
 *
 * Only 32-bit writes are supported to this register.
 */
/*!
 * @name Constants and macros for entire PORT_GPCHR register
 */
/*@{*/
#define PORT_RD_GPCHR(base)      (PORT_GPCHR_REG(base))
#define PORT_WR_GPCHR(base, value) (PORT_GPCHR_REG(base) = (value))
#define PORT_RMW_GPCHR(base, mask, value) (PORT_WR_GPCHR(base, (PORT_RD_GPCHR(base) & ~(mask)) | (value)))
/*@}*/

/*
 * Constants & macros for individual PORT_GPCHR bitfields
 */

/*!
 * @name Register PORT_GPCHR, field GPWD[15:0] (WORZ)
 *
 * Write value that is written to all Pin Control Registers bits [15:0] that are
 * selected by GPWE.
 */
/*@{*/
/*! @brief Set the GPWD field to a new value. */
#define PORT_WR_GPCHR_GPWD(base, value) (PORT_RMW_GPCHR(base, PORT_GPCHR_GPWD_MASK, PORT_GPCHR_GPWD(value)))
#define PORT_BWR_GPCHR_GPWD(base, value) (PORT_WR_GPCHR_GPWD(base, value))
/*@}*/

/*!
 * @name Register PORT_GPCHR, field GPWE[31:16] (WORZ)
 *
 * Selects which Pin Control Registers (31 through 16) bits [15:0] update with
 * the value in GPWD. If a selected Pin Control Register is locked then the write
 * to that register is ignored.
 *
 * Values:
 * - 0b0000000000000000 - Corresponding Pin Control Register is not updated with
 *     the value in GPWD.
 * - 0b0000000000000001 - Corresponding Pin Control Register is updated with the
 *     value in GPWD.
 */
/*@{*/
/*! @brief Set the GPWE field to a new value. */
#define PORT_WR_GPCHR_GPWE(base, value) (PORT_RMW_GPCHR(base, PORT_GPCHR_GPWE_MASK, PORT_GPCHR_GPWE(value)))
#define PORT_BWR_GPCHR_GPWE(base, value) (PORT_WR_GPCHR_GPWE(base, value))
/*@}*/

/*******************************************************************************
 * PORT_ISFR - Interrupt Status Flag Register
 ******************************************************************************/

/*!
 * @brief PORT_ISFR - Interrupt Status Flag Register (W1C)
 *
 * Reset value: 0x00000000U
 *
 * The pin interrupt configuration is valid in all digital pin muxing modes. The
 * Interrupt Status Flag for each pin is also visible in the corresponding Pin
 * Control Register, and each flag can be cleared in either location.
 */
/*!
 * @name Constants and macros for entire PORT_ISFR register
 */
/*@{*/
#define PORT_RD_ISFR(base)       (PORT_ISFR_REG(base))
#define PORT_WR_ISFR(base, value) (PORT_ISFR_REG(base) = (value))
#define PORT_RMW_ISFR(base, mask, value) (PORT_WR_ISFR(base, (PORT_RD_ISFR(base) & ~(mask)) | (value)))
#define PORT_SET_ISFR(base, value) (BME_OR32(&PORT_ISFR_REG(base), (uint32_t)(value)))
#define PORT_CLR_ISFR(base, value) (BME_AND32(&PORT_ISFR_REG(base), (uint32_t)(~(value))))
#define PORT_TOG_ISFR(base, value) (BME_XOR32(&PORT_ISFR_REG(base), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * PORT_DFER - Digital Filter Enable Register
 ******************************************************************************/

/*!
 * @brief PORT_DFER - Digital Filter Enable Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The corresponding bit is read only for pins that do not support a digital
 * filter. Refer to the Chapter of Signal Multiplexing and Signal Descriptions for
 * the pins that support digital filter. The digital filter configuration is valid
 * in all digital pin muxing modes.
 */
/*!
 * @name Constants and macros for entire PORT_DFER register
 */
/*@{*/
#define PORT_RD_DFER(base)       (PORT_DFER_REG(base))
#define PORT_WR_DFER(base, value) (PORT_DFER_REG(base) = (value))
#define PORT_RMW_DFER(base, mask, value) (PORT_WR_DFER(base, (PORT_RD_DFER(base) & ~(mask)) | (value)))
#define PORT_SET_DFER(base, value) (BME_OR32(&PORT_DFER_REG(base), (uint32_t)(value)))
#define PORT_CLR_DFER(base, value) (BME_AND32(&PORT_DFER_REG(base), (uint32_t)(~(value))))
#define PORT_TOG_DFER(base, value) (BME_XOR32(&PORT_DFER_REG(base), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * PORT_DFCR - Digital Filter Clock Register
 ******************************************************************************/

/*!
 * @brief PORT_DFCR - Digital Filter Clock Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register is read only for ports that do not support a digital filter.
 * The digital filter configuration is valid in all digital pin muxing modes.
 */
/*!
 * @name Constants and macros for entire PORT_DFCR register
 */
/*@{*/
#define PORT_RD_DFCR(base)       (PORT_DFCR_REG(base))
#define PORT_WR_DFCR(base, value) (PORT_DFCR_REG(base) = (value))
#define PORT_RMW_DFCR(base, mask, value) (PORT_WR_DFCR(base, (PORT_RD_DFCR(base) & ~(mask)) | (value)))
#define PORT_SET_DFCR(base, value) (BME_OR32(&PORT_DFCR_REG(base), (uint32_t)(value)))
#define PORT_CLR_DFCR(base, value) (BME_AND32(&PORT_DFCR_REG(base), (uint32_t)(~(value))))
#define PORT_TOG_DFCR(base, value) (BME_XOR32(&PORT_DFCR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual PORT_DFCR bitfields
 */

/*!
 * @name Register PORT_DFCR, field CS[0] (RW)
 *
 * The digital filter configuration is valid in all digital pin muxing modes.
 * Configures the clock source for the digital input filters. Changing the filter
 * clock source must be done only when all digital filters are disabled.
 *
 * Values:
 * - 0b0 - Digital filters are clocked by the bus clock.
 * - 0b1 - Digital filters are clocked by the LPO clock.
 */
/*@{*/
/*! @brief Read current value of the PORT_DFCR_CS field. */
#define PORT_RD_DFCR_CS(base) ((PORT_DFCR_REG(base) & PORT_DFCR_CS_MASK) >> PORT_DFCR_CS_SHIFT)
#define PORT_BRD_DFCR_CS(base) (BME_UBFX32(&PORT_DFCR_REG(base), PORT_DFCR_CS_SHIFT, PORT_DFCR_CS_WIDTH))

/*! @brief Set the CS field to a new value. */
#define PORT_WR_DFCR_CS(base, value) (PORT_RMW_DFCR(base, PORT_DFCR_CS_MASK, PORT_DFCR_CS(value)))
#define PORT_BWR_DFCR_CS(base, value) (BME_BFI32(&PORT_DFCR_REG(base), ((uint32_t)(value) << PORT_DFCR_CS_SHIFT), PORT_DFCR_CS_SHIFT, PORT_DFCR_CS_WIDTH))
/*@}*/

/*******************************************************************************
 * PORT_DFWR - Digital Filter Width Register
 ******************************************************************************/

/*!
 * @brief PORT_DFWR - Digital Filter Width Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register is read only for ports that do not support a digital filter.
 * The digital filter configuration is valid in all digital pin muxing modes.
 */
/*!
 * @name Constants and macros for entire PORT_DFWR register
 */
/*@{*/
#define PORT_RD_DFWR(base)       (PORT_DFWR_REG(base))
#define PORT_WR_DFWR(base, value) (PORT_DFWR_REG(base) = (value))
#define PORT_RMW_DFWR(base, mask, value) (PORT_WR_DFWR(base, (PORT_RD_DFWR(base) & ~(mask)) | (value)))
#define PORT_SET_DFWR(base, value) (BME_OR32(&PORT_DFWR_REG(base), (uint32_t)(value)))
#define PORT_CLR_DFWR(base, value) (BME_AND32(&PORT_DFWR_REG(base), (uint32_t)(~(value))))
#define PORT_TOG_DFWR(base, value) (BME_XOR32(&PORT_DFWR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual PORT_DFWR bitfields
 */

/*!
 * @name Register PORT_DFWR, field FILT[4:0] (RW)
 *
 * The digital filter configuration is valid in all digital pin muxing modes.
 * Configures the maximum size of the glitches, in clock cycles, that the digital
 * filter absorbs for the enabled digital filters. Glitches that are longer than
 * this register setting will pass through the digital filter, and glitches that
 * are equal to or less than this register setting are filtered. Changing the
 * filter length must be done only after all filters are disabled.
 */
/*@{*/
/*! @brief Read current value of the PORT_DFWR_FILT field. */
#define PORT_RD_DFWR_FILT(base) ((PORT_DFWR_REG(base) & PORT_DFWR_FILT_MASK) >> PORT_DFWR_FILT_SHIFT)
#define PORT_BRD_DFWR_FILT(base) (BME_UBFX32(&PORT_DFWR_REG(base), PORT_DFWR_FILT_SHIFT, PORT_DFWR_FILT_WIDTH))

/*! @brief Set the FILT field to a new value. */
#define PORT_WR_DFWR_FILT(base, value) (PORT_RMW_DFWR(base, PORT_DFWR_FILT_MASK, PORT_DFWR_FILT(value)))
#define PORT_BWR_DFWR_FILT(base, value) (BME_BFI32(&PORT_DFWR_REG(base), ((uint32_t)(value) << PORT_DFWR_FILT_SHIFT), PORT_DFWR_FILT_SHIFT, PORT_DFWR_FILT_WIDTH))
/*@}*/

/*
 * MK82F25615 QuadSPI
 *
 * QuadSPI
 *
 * Registers defined in this header file:
 * - QuadSPI_MCR - Module Configuration Register
 * - QuadSPI_IPCR - IP Configuration Register
 * - QuadSPI_FLSHCR - Flash Configuration Register
 * - QuadSPI_BUF0CR - Buffer0 Configuration Register
 * - QuadSPI_BUF1CR - Buffer1 Configuration Register
 * - QuadSPI_BUF2CR - Buffer2 Configuration Register
 * - QuadSPI_BUF3CR - Buffer3 Configuration Register
 * - QuadSPI_BFGENCR - Buffer Generic Configuration Register
 * - QuadSPI_SOCCR - SOC Configuration Register
 * - QuadSPI_BUF0IND - Buffer0 Top Index Register
 * - QuadSPI_BUF1IND - Buffer1 Top Index Register
 * - QuadSPI_BUF2IND - Buffer2 Top Index Register
 * - QuadSPI_SFAR - Serial Flash Address Register
 * - QuadSPI_SFACR - Serial Flash Address Configuration Register
 * - QuadSPI_SMPR - Sampling Register
 * - QuadSPI_RBSR - RX Buffer Status Register
 * - QuadSPI_RBCT - RX Buffer Control Register
 * - QuadSPI_TBSR - TX Buffer Status Register
 * - QuadSPI_TBDR - TX Buffer Data Register
 * - QuadSPI_TBCT - Tx Buffer Control Register
 * - QuadSPI_SR - Status Register
 * - QuadSPI_FR - Flag Register
 * - QuadSPI_RSER - Interrupt and DMA Request Select and Enable Register
 * - QuadSPI_SPNDST - Sequence Suspend Status Register
 * - QuadSPI_SPTRCLR - Sequence Pointer Clear Register
 * - QuadSPI_SFA1AD - Serial Flash A1 Top Address
 * - QuadSPI_SFA2AD - Serial Flash A2 Top Address
 * - QuadSPI_SFB1AD - Serial Flash B1Top Address
 * - QuadSPI_SFB2AD - Serial Flash B2Top Address
 * - QuadSPI_DLPR - Data Learn Pattern Register
 * - QuadSPI_RBDR - RX Buffer Data Register
 * - QuadSPI_LUTKEY - LUT Key Register
 * - QuadSPI_LCKCR - LUT Lock Configuration Register
 * - QuadSPI_LUT - Look-up Table register
 */

#define QuadSPI_INSTANCE_COUNT (1U) /*!< Number of instances of the QuadSPI module. */
#define QuadSPI0_IDX (0U) /*!< Instance number for QuadSPI0. */

/*******************************************************************************
 * QuadSPI_MCR - Module Configuration Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_MCR - Module Configuration Register (RW)
 *
 * Reset value: 0x000F400CU
 *
 * The QuadSPI_MCR holds configuration data associated with QuadSPI operation.
 * Write: All other fields: Anytime
 */
/*!
 * @name Constants and macros for entire QuadSPI_MCR register
 */
/*@{*/
#define QuadSPI_RD_MCR(base)     (QuadSPI_MCR_REG(base))
#define QuadSPI_WR_MCR(base, value) (QuadSPI_MCR_REG(base) = (value))
#define QuadSPI_RMW_MCR(base, mask, value) (QuadSPI_WR_MCR(base, (QuadSPI_RD_MCR(base) & ~(mask)) | (value)))
#define QuadSPI_SET_MCR(base, value) (BME_OR32(&QuadSPI_MCR_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_MCR(base, value) (BME_AND32(&QuadSPI_MCR_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_MCR(base, value) (BME_XOR32(&QuadSPI_MCR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_MCR bitfields
 */

/*!
 * @name Register QuadSPI_MCR, field SWRSTSD[0] (RW)
 *
 * Software reset for Serial Flash domain
 *
 * Values:
 * - 0b0 - No action
 * - 0b1 - Serial Flash domain flops are reset. Does not reset configuration
 *     registers. It is advisable to reset both the serial flash domain and AHB
 *     domain at the same time. Resetting only one domain might lead to side effects.
 *     The software resets need the clock to be running to propagate to the
 *     design. The MCR[MDIS] should therefore be set to 0 when the software reset
 *     bits are asserted. Also, before they can be deasserted again (by setting
 *     MCR[SWRSTSD] to 0), it is recommended to set the MCR[MDIS] bit to 1. Once the
 *     software resets have been deasserted, the normal operation can be started
 *     by setting the MCR[MDIS] bit to 0.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_MCR_SWRSTSD field. */
#define QuadSPI_RD_MCR_SWRSTSD(base) ((QuadSPI_MCR_REG(base) & QuadSPI_MCR_SWRSTSD_MASK) >> QuadSPI_MCR_SWRSTSD_SHIFT)
#define QuadSPI_BRD_MCR_SWRSTSD(base) (BME_UBFX32(&QuadSPI_MCR_REG(base), QuadSPI_MCR_SWRSTSD_SHIFT, QuadSPI_MCR_SWRSTSD_WIDTH))

/*! @brief Set the SWRSTSD field to a new value. */
#define QuadSPI_WR_MCR_SWRSTSD(base, value) (QuadSPI_RMW_MCR(base, QuadSPI_MCR_SWRSTSD_MASK, QuadSPI_MCR_SWRSTSD(value)))
#define QuadSPI_BWR_MCR_SWRSTSD(base, value) (BME_BFI32(&QuadSPI_MCR_REG(base), ((uint32_t)(value) << QuadSPI_MCR_SWRSTSD_SHIFT), QuadSPI_MCR_SWRSTSD_SHIFT, QuadSPI_MCR_SWRSTSD_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_MCR, field SWRSTHD[1] (RW)
 *
 * Software reset for AHB domain
 *
 * Values:
 * - 0b0 - No action
 * - 0b1 - AHB domain flops are reset. Does not reset configuration registers.
 *     It is advisable to reset both the serial flash domain and AHB domain at the
 *     same time. Resetting only one domain might lead to side effects. The
 *     software resets need the clock to be running to propagate to the design. The
 *     MCR[MDIS] should therefore be set to 0 when the software reset bits are
 *     asserted. Also, before they can be deasserted again (by setting MCR[SWRSTHD]
 *     to 0), it is recommended to set the MCR[MDIS] bit to 1. Once the software
 *     resets have been deasserted, the normal operation can be started by
 *     setting the MCR[MDIS] bit to 0.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_MCR_SWRSTHD field. */
#define QuadSPI_RD_MCR_SWRSTHD(base) ((QuadSPI_MCR_REG(base) & QuadSPI_MCR_SWRSTHD_MASK) >> QuadSPI_MCR_SWRSTHD_SHIFT)
#define QuadSPI_BRD_MCR_SWRSTHD(base) (BME_UBFX32(&QuadSPI_MCR_REG(base), QuadSPI_MCR_SWRSTHD_SHIFT, QuadSPI_MCR_SWRSTHD_WIDTH))

/*! @brief Set the SWRSTHD field to a new value. */
#define QuadSPI_WR_MCR_SWRSTHD(base, value) (QuadSPI_RMW_MCR(base, QuadSPI_MCR_SWRSTHD_MASK, QuadSPI_MCR_SWRSTHD(value)))
#define QuadSPI_BWR_MCR_SWRSTHD(base, value) (BME_BFI32(&QuadSPI_MCR_REG(base), ((uint32_t)(value) << QuadSPI_MCR_SWRSTHD_SHIFT), QuadSPI_MCR_SWRSTHD_SHIFT, QuadSPI_MCR_SWRSTHD_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_MCR, field END_CFG[3:2] (RW)
 *
 * Defines the endianness of the QSPI module.For more details refer to Byte
 * Ordering Endianess
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_MCR_END_CFG field. */
#define QuadSPI_RD_MCR_END_CFG(base) ((QuadSPI_MCR_REG(base) & QuadSPI_MCR_END_CFG_MASK) >> QuadSPI_MCR_END_CFG_SHIFT)
#define QuadSPI_BRD_MCR_END_CFG(base) (BME_UBFX32(&QuadSPI_MCR_REG(base), QuadSPI_MCR_END_CFG_SHIFT, QuadSPI_MCR_END_CFG_WIDTH))

/*! @brief Set the END_CFG field to a new value. */
#define QuadSPI_WR_MCR_END_CFG(base, value) (QuadSPI_RMW_MCR(base, QuadSPI_MCR_END_CFG_MASK, QuadSPI_MCR_END_CFG(value)))
#define QuadSPI_BWR_MCR_END_CFG(base, value) (BME_BFI32(&QuadSPI_MCR_REG(base), ((uint32_t)(value) << QuadSPI_MCR_END_CFG_SHIFT), QuadSPI_MCR_END_CFG_SHIFT, QuadSPI_MCR_END_CFG_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_MCR, field DQS_LAT_EN[5] (RW)
 *
 * DQS Latency Enable: This field is valid when latency is included in between
 * read access from FLash in case when QSPI_MCR[DQS_EN] is 1.For more details
 * Refer Data Strobe Signal Functionality
 *
 * Values:
 * - 0b0 - DQS Latency disabled
 * - 0b1 - DQS feature with latency included enabled
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_MCR_DQS_LAT_EN field. */
#define QuadSPI_RD_MCR_DQS_LAT_EN(base) ((QuadSPI_MCR_REG(base) & QuadSPI_MCR_DQS_LAT_EN_MASK) >> QuadSPI_MCR_DQS_LAT_EN_SHIFT)
#define QuadSPI_BRD_MCR_DQS_LAT_EN(base) (BME_UBFX32(&QuadSPI_MCR_REG(base), QuadSPI_MCR_DQS_LAT_EN_SHIFT, QuadSPI_MCR_DQS_LAT_EN_WIDTH))

/*! @brief Set the DQS_LAT_EN field to a new value. */
#define QuadSPI_WR_MCR_DQS_LAT_EN(base, value) (QuadSPI_RMW_MCR(base, QuadSPI_MCR_DQS_LAT_EN_MASK, QuadSPI_MCR_DQS_LAT_EN(value)))
#define QuadSPI_BWR_MCR_DQS_LAT_EN(base, value) (BME_BFI32(&QuadSPI_MCR_REG(base), ((uint32_t)(value) << QuadSPI_MCR_DQS_LAT_EN_SHIFT), QuadSPI_MCR_DQS_LAT_EN_SHIFT, QuadSPI_MCR_DQS_LAT_EN_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_MCR, field DQS_EN[6] (RW)
 *
 * DQS enable: This field is valid for both SDR and DDR mode.For more details
 * Refer Data Strobe Signal Functionality
 *
 * Values:
 * - 0b0 - DQS disabled.
 * - 0b1 - DQS enabled- When enabled, the incoming data is sampled on both the
 *     edges of DQS input when QSPI_MCR[DDR_EN] is set, else, on only one edge
 *     when QSPI_MCR[DDR_EN] is 0. The QSPI_SMPR[DDR_SMP] values are ignored.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_MCR_DQS_EN field. */
#define QuadSPI_RD_MCR_DQS_EN(base) ((QuadSPI_MCR_REG(base) & QuadSPI_MCR_DQS_EN_MASK) >> QuadSPI_MCR_DQS_EN_SHIFT)
#define QuadSPI_BRD_MCR_DQS_EN(base) (BME_UBFX32(&QuadSPI_MCR_REG(base), QuadSPI_MCR_DQS_EN_SHIFT, QuadSPI_MCR_DQS_EN_WIDTH))

/*! @brief Set the DQS_EN field to a new value. */
#define QuadSPI_WR_MCR_DQS_EN(base, value) (QuadSPI_RMW_MCR(base, QuadSPI_MCR_DQS_EN_MASK, QuadSPI_MCR_DQS_EN(value)))
#define QuadSPI_BWR_MCR_DQS_EN(base, value) (BME_BFI32(&QuadSPI_MCR_REG(base), ((uint32_t)(value) << QuadSPI_MCR_DQS_EN_SHIFT), QuadSPI_MCR_DQS_EN_SHIFT, QuadSPI_MCR_DQS_EN_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_MCR, field DDR_EN[7] (RW)
 *
 * DDR mode enable:
 *
 * Values:
 * - 0b0 - 2x and 4x clocks are disabled for SDR instructions only
 * - 0b1 - 2x and 4x clocks are enabled supports both SDR and DDR instruction.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_MCR_DDR_EN field. */
#define QuadSPI_RD_MCR_DDR_EN(base) ((QuadSPI_MCR_REG(base) & QuadSPI_MCR_DDR_EN_MASK) >> QuadSPI_MCR_DDR_EN_SHIFT)
#define QuadSPI_BRD_MCR_DDR_EN(base) (BME_UBFX32(&QuadSPI_MCR_REG(base), QuadSPI_MCR_DDR_EN_SHIFT, QuadSPI_MCR_DDR_EN_WIDTH))

/*! @brief Set the DDR_EN field to a new value. */
#define QuadSPI_WR_MCR_DDR_EN(base, value) (QuadSPI_RMW_MCR(base, QuadSPI_MCR_DDR_EN_MASK, QuadSPI_MCR_DDR_EN(value)))
#define QuadSPI_BWR_MCR_DDR_EN(base, value) (BME_BFI32(&QuadSPI_MCR_REG(base), ((uint32_t)(value) << QuadSPI_MCR_DDR_EN_SHIFT), QuadSPI_MCR_DDR_EN_SHIFT, QuadSPI_MCR_DDR_EN_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_MCR, field CLR_RXF[10] (WORZ)
 *
 * Clear RX FIFO. Invalidate the RX Buffer. This is a self-clearing field.
 *
 * Values:
 * - 0b0 - No action.
 * - 0b1 - Read and write pointers of the RX Buffer are reset to 0.
 *     QSPI_RBSR[RDBFL] is reset to 0.
 */
/*@{*/
/*! @brief Set the CLR_RXF field to a new value. */
#define QuadSPI_WR_MCR_CLR_RXF(base, value) (QuadSPI_RMW_MCR(base, QuadSPI_MCR_CLR_RXF_MASK, QuadSPI_MCR_CLR_RXF(value)))
#define QuadSPI_BWR_MCR_CLR_RXF(base, value) (BME_BFI32(&QuadSPI_MCR_REG(base), ((uint32_t)(value) << QuadSPI_MCR_CLR_RXF_SHIFT), QuadSPI_MCR_CLR_RXF_SHIFT, QuadSPI_MCR_CLR_RXF_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_MCR, field CLR_TXF[11] (WORZ)
 *
 * Clear TX FIFO/Buffer. Invalidate the TX Buffer content. This is a
 * self-clearing field.
 *
 * Values:
 * - 0b0 - No action.
 * - 0b1 - Read and write pointers of the TX Buffer are reset to 0.
 *     QSPI_TBSR[TRCTR] is reset to 0.
 */
/*@{*/
/*! @brief Set the CLR_TXF field to a new value. */
#define QuadSPI_WR_MCR_CLR_TXF(base, value) (QuadSPI_RMW_MCR(base, QuadSPI_MCR_CLR_TXF_MASK, QuadSPI_MCR_CLR_TXF(value)))
#define QuadSPI_BWR_MCR_CLR_TXF(base, value) (BME_BFI32(&QuadSPI_MCR_REG(base), ((uint32_t)(value) << QuadSPI_MCR_CLR_TXF_SHIFT), QuadSPI_MCR_CLR_TXF_SHIFT, QuadSPI_MCR_CLR_TXF_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_MCR, field MDIS[14] (RW)
 *
 * Module Disable. The MDIS bit allows the clock to the non-memory mapped logic
 * in the QuadSPI to be stopped, putting the QuadSPI in a software controlled
 * power-saving state.
 *
 * Values:
 * - 0b0 - Enable QuadSPI clocks.
 * - 0b1 - Allow external logic to disable QuadSPI clocks.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_MCR_MDIS field. */
#define QuadSPI_RD_MCR_MDIS(base) ((QuadSPI_MCR_REG(base) & QuadSPI_MCR_MDIS_MASK) >> QuadSPI_MCR_MDIS_SHIFT)
#define QuadSPI_BRD_MCR_MDIS(base) (BME_UBFX32(&QuadSPI_MCR_REG(base), QuadSPI_MCR_MDIS_SHIFT, QuadSPI_MCR_MDIS_WIDTH))

/*! @brief Set the MDIS field to a new value. */
#define QuadSPI_WR_MCR_MDIS(base, value) (QuadSPI_RMW_MCR(base, QuadSPI_MCR_MDIS_MASK, QuadSPI_MCR_MDIS(value)))
#define QuadSPI_BWR_MCR_MDIS(base, value) (BME_BFI32(&QuadSPI_MCR_REG(base), ((uint32_t)(value) << QuadSPI_MCR_MDIS_SHIFT), QuadSPI_MCR_MDIS_SHIFT, QuadSPI_MCR_MDIS_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_MCR, field SCLKCFG[31:24] (RW)
 *
 * Serial Clock Configuration. This field configuration is chip specific. For
 * details, refer to chip-specific QuadSPI information. It may be used for dividing
 * clocks.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_MCR_SCLKCFG field. */
#define QuadSPI_RD_MCR_SCLKCFG(base) ((QuadSPI_MCR_REG(base) & QuadSPI_MCR_SCLKCFG_MASK) >> QuadSPI_MCR_SCLKCFG_SHIFT)
#define QuadSPI_BRD_MCR_SCLKCFG(base) (BME_UBFX32(&QuadSPI_MCR_REG(base), QuadSPI_MCR_SCLKCFG_SHIFT, QuadSPI_MCR_SCLKCFG_WIDTH))

/*! @brief Set the SCLKCFG field to a new value. */
#define QuadSPI_WR_MCR_SCLKCFG(base, value) (QuadSPI_RMW_MCR(base, QuadSPI_MCR_SCLKCFG_MASK, QuadSPI_MCR_SCLKCFG(value)))
#define QuadSPI_BWR_MCR_SCLKCFG(base, value) (BME_BFI32(&QuadSPI_MCR_REG(base), ((uint32_t)(value) << QuadSPI_MCR_SCLKCFG_SHIFT), QuadSPI_MCR_SCLKCFG_SHIFT, QuadSPI_MCR_SCLKCFG_WIDTH))
/*@}*/

/*******************************************************************************
 * QuadSPI_IPCR - IP Configuration Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_IPCR - IP Configuration Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The IP configuration register provides all the configuration required for an
 * IP initiated command. An IP command can be triggered by writing in the SEQID
 * field of this register. If the SEQID field is written successfully, a new
 * command to the external serial flash is started as per the sequence pointed to by
 * the SEQID field. Refer to Normal Mode , for details about the command
 * triggering and command execution. Write: QSPI_SR[IP_ACC]=0
 */
/*!
 * @name Constants and macros for entire QuadSPI_IPCR register
 */
/*@{*/
#define QuadSPI_RD_IPCR(base)    (QuadSPI_IPCR_REG(base))
#define QuadSPI_WR_IPCR(base, value) (QuadSPI_IPCR_REG(base) = (value))
#define QuadSPI_RMW_IPCR(base, mask, value) (QuadSPI_WR_IPCR(base, (QuadSPI_RD_IPCR(base) & ~(mask)) | (value)))
#define QuadSPI_SET_IPCR(base, value) (BME_OR32(&QuadSPI_IPCR_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_IPCR(base, value) (BME_AND32(&QuadSPI_IPCR_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_IPCR(base, value) (BME_XOR32(&QuadSPI_IPCR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_IPCR bitfields
 */

/*!
 * @name Register QuadSPI_IPCR, field IDATSZ[15:0] (RW)
 *
 * IP data transfer size: Defines the data transfer size in bytes of the IP
 * command.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_IPCR_IDATSZ field. */
#define QuadSPI_RD_IPCR_IDATSZ(base) ((QuadSPI_IPCR_REG(base) & QuadSPI_IPCR_IDATSZ_MASK) >> QuadSPI_IPCR_IDATSZ_SHIFT)
#define QuadSPI_BRD_IPCR_IDATSZ(base) (QuadSPI_RD_IPCR_IDATSZ(base))

/*! @brief Set the IDATSZ field to a new value. */
#define QuadSPI_WR_IPCR_IDATSZ(base, value) (QuadSPI_RMW_IPCR(base, QuadSPI_IPCR_IDATSZ_MASK, QuadSPI_IPCR_IDATSZ(value)))
#define QuadSPI_BWR_IPCR_IDATSZ(base, value) (QuadSPI_WR_IPCR_IDATSZ(base, value))
/*@}*/

/*!
 * @name Register QuadSPI_IPCR, field PAR_EN[16] (RW)
 *
 * When set, a transaction to two serial flash devices is triggered in parallel
 * mode. Refer to Parallel Flash Modefor more details.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_IPCR_PAR_EN field. */
#define QuadSPI_RD_IPCR_PAR_EN(base) ((QuadSPI_IPCR_REG(base) & QuadSPI_IPCR_PAR_EN_MASK) >> QuadSPI_IPCR_PAR_EN_SHIFT)
#define QuadSPI_BRD_IPCR_PAR_EN(base) (BME_UBFX32(&QuadSPI_IPCR_REG(base), QuadSPI_IPCR_PAR_EN_SHIFT, QuadSPI_IPCR_PAR_EN_WIDTH))

/*! @brief Set the PAR_EN field to a new value. */
#define QuadSPI_WR_IPCR_PAR_EN(base, value) (QuadSPI_RMW_IPCR(base, QuadSPI_IPCR_PAR_EN_MASK, QuadSPI_IPCR_PAR_EN(value)))
#define QuadSPI_BWR_IPCR_PAR_EN(base, value) (BME_BFI32(&QuadSPI_IPCR_REG(base), ((uint32_t)(value) << QuadSPI_IPCR_PAR_EN_SHIFT), QuadSPI_IPCR_PAR_EN_SHIFT, QuadSPI_IPCR_PAR_EN_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_IPCR, field SEQID[27:24] (RW)
 *
 * Points to a sequence in the Look-up-table. The SEQID defines the bits [6:2]
 * of the LUT index. The bits [1:0] are always assumed to be 0. Refer to Look-up
 * Table for more details. A write to this bit -field triggers a transaction on
 * the serial flash interface.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_IPCR_SEQID field. */
#define QuadSPI_RD_IPCR_SEQID(base) ((QuadSPI_IPCR_REG(base) & QuadSPI_IPCR_SEQID_MASK) >> QuadSPI_IPCR_SEQID_SHIFT)
#define QuadSPI_BRD_IPCR_SEQID(base) (BME_UBFX32(&QuadSPI_IPCR_REG(base), QuadSPI_IPCR_SEQID_SHIFT, QuadSPI_IPCR_SEQID_WIDTH))

/*! @brief Set the SEQID field to a new value. */
#define QuadSPI_WR_IPCR_SEQID(base, value) (QuadSPI_RMW_IPCR(base, QuadSPI_IPCR_SEQID_MASK, QuadSPI_IPCR_SEQID(value)))
#define QuadSPI_BWR_IPCR_SEQID(base, value) (BME_BFI32(&QuadSPI_IPCR_REG(base), ((uint32_t)(value) << QuadSPI_IPCR_SEQID_SHIFT), QuadSPI_IPCR_SEQID_SHIFT, QuadSPI_IPCR_SEQID_WIDTH))
/*@}*/

/*******************************************************************************
 * QuadSPI_FLSHCR - Flash Configuration Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_FLSHCR - Flash Configuration Register (RW)
 *
 * Reset value: 0x00000303U
 *
 * The Flash configuration register contains the flash device specific timings
 * that must be met by the QuadSPI controller for the device to function
 * correctly. Write: QSPI_SR[AHB_ACC] = 0 QSPI_SR[IP_ACC] = 0
 */
/*!
 * @name Constants and macros for entire QuadSPI_FLSHCR register
 */
/*@{*/
#define QuadSPI_RD_FLSHCR(base)  (QuadSPI_FLSHCR_REG(base))
#define QuadSPI_WR_FLSHCR(base, value) (QuadSPI_FLSHCR_REG(base) = (value))
#define QuadSPI_RMW_FLSHCR(base, mask, value) (QuadSPI_WR_FLSHCR(base, (QuadSPI_RD_FLSHCR(base) & ~(mask)) | (value)))
#define QuadSPI_SET_FLSHCR(base, value) (BME_OR32(&QuadSPI_FLSHCR_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_FLSHCR(base, value) (BME_AND32(&QuadSPI_FLSHCR_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_FLSHCR(base, value) (BME_XOR32(&QuadSPI_FLSHCR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_FLSHCR bitfields
 */

/*!
 * @name Register QuadSPI_FLSHCR, field TCSS[3:0] (RW)
 *
 * Serial flash CS setup time in terms of serial flash clock cycles. The actual
 * delay between chip select and clock is defined as: TCSS= 0.5 SCK clk if N= 0/1
 * else, N+0.5 SCK clk if N>1, where N is the setting of TCSS Any update to the
 * TCSS register bits is visible on the flash interface only from the second
 * transaction following the update
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_FLSHCR_TCSS field. */
#define QuadSPI_RD_FLSHCR_TCSS(base) ((QuadSPI_FLSHCR_REG(base) & QuadSPI_FLSHCR_TCSS_MASK) >> QuadSPI_FLSHCR_TCSS_SHIFT)
#define QuadSPI_BRD_FLSHCR_TCSS(base) (BME_UBFX32(&QuadSPI_FLSHCR_REG(base), QuadSPI_FLSHCR_TCSS_SHIFT, QuadSPI_FLSHCR_TCSS_WIDTH))

/*! @brief Set the TCSS field to a new value. */
#define QuadSPI_WR_FLSHCR_TCSS(base, value) (QuadSPI_RMW_FLSHCR(base, QuadSPI_FLSHCR_TCSS_MASK, QuadSPI_FLSHCR_TCSS(value)))
#define QuadSPI_BWR_FLSHCR_TCSS(base, value) (BME_BFI32(&QuadSPI_FLSHCR_REG(base), ((uint32_t)(value) << QuadSPI_FLSHCR_TCSS_SHIFT), QuadSPI_FLSHCR_TCSS_SHIFT, QuadSPI_FLSHCR_TCSS_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_FLSHCR, field TCSH[11:8] (RW)
 *
 * Serial flash CS hold time in terms of serial flash clock cycles. The actual
 * delay between chip select and clock is defined as: TCSH= 1 SCK clk if N= 0/1
 * else, N SCK clk if N>1, where N is the setting of TCSH
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_FLSHCR_TCSH field. */
#define QuadSPI_RD_FLSHCR_TCSH(base) ((QuadSPI_FLSHCR_REG(base) & QuadSPI_FLSHCR_TCSH_MASK) >> QuadSPI_FLSHCR_TCSH_SHIFT)
#define QuadSPI_BRD_FLSHCR_TCSH(base) (BME_UBFX32(&QuadSPI_FLSHCR_REG(base), QuadSPI_FLSHCR_TCSH_SHIFT, QuadSPI_FLSHCR_TCSH_WIDTH))

/*! @brief Set the TCSH field to a new value. */
#define QuadSPI_WR_FLSHCR_TCSH(base, value) (QuadSPI_RMW_FLSHCR(base, QuadSPI_FLSHCR_TCSH_MASK, QuadSPI_FLSHCR_TCSH(value)))
#define QuadSPI_BWR_FLSHCR_TCSH(base, value) (BME_BFI32(&QuadSPI_FLSHCR_REG(base), ((uint32_t)(value) << QuadSPI_FLSHCR_TCSH_SHIFT), QuadSPI_FLSHCR_TCSH_SHIFT, QuadSPI_FLSHCR_TCSH_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_FLSHCR, field TDH[17:16] (RW)
 *
 * Serial flash Data In hold time: This helps in meeting the Data In Hold time
 * requirement of a Flash. This is valid only in DDR mode.Refer to Data input hold
 * requirement of Flash for details.
 *
 * Values:
 * - 0b00 - Data aligned with the posedge of Internal reference clock of QuadSPI
 * - 0b01 - Data aligned with 2x serial flash half clock
 * - 0b10 - Data aligned with 4x serial flash half clock
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_FLSHCR_TDH field. */
#define QuadSPI_RD_FLSHCR_TDH(base) ((QuadSPI_FLSHCR_REG(base) & QuadSPI_FLSHCR_TDH_MASK) >> QuadSPI_FLSHCR_TDH_SHIFT)
#define QuadSPI_BRD_FLSHCR_TDH(base) (BME_UBFX32(&QuadSPI_FLSHCR_REG(base), QuadSPI_FLSHCR_TDH_SHIFT, QuadSPI_FLSHCR_TDH_WIDTH))

/*! @brief Set the TDH field to a new value. */
#define QuadSPI_WR_FLSHCR_TDH(base, value) (QuadSPI_RMW_FLSHCR(base, QuadSPI_FLSHCR_TDH_MASK, QuadSPI_FLSHCR_TDH(value)))
#define QuadSPI_BWR_FLSHCR_TDH(base, value) (BME_BFI32(&QuadSPI_FLSHCR_REG(base), ((uint32_t)(value) << QuadSPI_FLSHCR_TDH_SHIFT), QuadSPI_FLSHCR_TDH_SHIFT, QuadSPI_FLSHCR_TDH_WIDTH))
/*@}*/

/*******************************************************************************
 * QuadSPI_BUF0CR - Buffer0 Configuration Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_BUF0CR - Buffer0 Configuration Register (RW)
 *
 * Reset value: 0x00000002U
 *
 * This register provides the configuration for any access to buffer0. An access
 * is routed to buffer0 when the master port number of the incoming AHB request
 * matches the MSTRID field of the BUF0CR. Any buffer "miss" leads to a serial
 * flash transaction being triggered as per the sequence pointed to the SEQID
 * field. Buffer0 may also be configured as a high priority buffer by setting the
 * HP_EN field of this register. Write: QSPI_SR[AHB_ACC] = 0
 */
/*!
 * @name Constants and macros for entire QuadSPI_BUF0CR register
 */
/*@{*/
#define QuadSPI_RD_BUF0CR(base)  (QuadSPI_BUF0CR_REG(base))
#define QuadSPI_WR_BUF0CR(base, value) (QuadSPI_BUF0CR_REG(base) = (value))
#define QuadSPI_RMW_BUF0CR(base, mask, value) (QuadSPI_WR_BUF0CR(base, (QuadSPI_RD_BUF0CR(base) & ~(mask)) | (value)))
#define QuadSPI_SET_BUF0CR(base, value) (BME_OR32(&QuadSPI_BUF0CR_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_BUF0CR(base, value) (BME_AND32(&QuadSPI_BUF0CR_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_BUF0CR(base, value) (BME_XOR32(&QuadSPI_BUF0CR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_BUF0CR bitfields
 */

/*!
 * @name Register QuadSPI_BUF0CR, field MSTRID[3:0] (RW)
 *
 * Master ID: The ID of the AHB master associated with BUFFER0. Any AHB access
 * with this master port number is routed to this buffer. It must be ensured that
 * the master id's associated with all buffers must be different.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_BUF0CR_MSTRID field. */
#define QuadSPI_RD_BUF0CR_MSTRID(base) ((QuadSPI_BUF0CR_REG(base) & QuadSPI_BUF0CR_MSTRID_MASK) >> QuadSPI_BUF0CR_MSTRID_SHIFT)
#define QuadSPI_BRD_BUF0CR_MSTRID(base) (BME_UBFX32(&QuadSPI_BUF0CR_REG(base), QuadSPI_BUF0CR_MSTRID_SHIFT, QuadSPI_BUF0CR_MSTRID_WIDTH))

/*! @brief Set the MSTRID field to a new value. */
#define QuadSPI_WR_BUF0CR_MSTRID(base, value) (QuadSPI_RMW_BUF0CR(base, QuadSPI_BUF0CR_MSTRID_MASK, QuadSPI_BUF0CR_MSTRID(value)))
#define QuadSPI_BWR_BUF0CR_MSTRID(base, value) (BME_BFI32(&QuadSPI_BUF0CR_REG(base), ((uint32_t)(value) << QuadSPI_BUF0CR_MSTRID_SHIFT), QuadSPI_BUF0CR_MSTRID_SHIFT, QuadSPI_BUF0CR_MSTRID_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_BUF0CR, field ADATSZ[14:8] (RW)
 *
 * Defines the data transfer size in 8 bytes of an AHB triggered access to
 * serial flash. For example,a value of 0x2 will set transfer size to 16bytes.When
 * ADATSZ = 0, the data size mentioned the sequence pointed to by the SEQID field
 * overrides this value. SW should ensure that this transfer size is not greater
 * than the size of this buffer.If OTFAD is enabled, the QuadSPI module prefetches
 * only those many data's from Flash such that the prefetch never crosses the 1KB
 * boundary.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_BUF0CR_ADATSZ field. */
#define QuadSPI_RD_BUF0CR_ADATSZ(base) ((QuadSPI_BUF0CR_REG(base) & QuadSPI_BUF0CR_ADATSZ_MASK) >> QuadSPI_BUF0CR_ADATSZ_SHIFT)
#define QuadSPI_BRD_BUF0CR_ADATSZ(base) (BME_UBFX32(&QuadSPI_BUF0CR_REG(base), QuadSPI_BUF0CR_ADATSZ_SHIFT, QuadSPI_BUF0CR_ADATSZ_WIDTH))

/*! @brief Set the ADATSZ field to a new value. */
#define QuadSPI_WR_BUF0CR_ADATSZ(base, value) (QuadSPI_RMW_BUF0CR(base, QuadSPI_BUF0CR_ADATSZ_MASK, QuadSPI_BUF0CR_ADATSZ(value)))
#define QuadSPI_BWR_BUF0CR_ADATSZ(base, value) (BME_BFI32(&QuadSPI_BUF0CR_REG(base), ((uint32_t)(value) << QuadSPI_BUF0CR_ADATSZ_SHIFT), QuadSPI_BUF0CR_ADATSZ_SHIFT, QuadSPI_BUF0CR_ADATSZ_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_BUF0CR, field HP_EN[31] (RW)
 *
 * High Priority Enable: When set, the master associated with this buffer is
 * assigned a priority higher than the rest of the masters. An access by a high
 * priority master will suspend any ongoing prefetch by another AHB master and will
 * be serviced on high priority.The high priority feature is disabled if OTFAD is
 * enabled in the system. Refer to Flexible AHB Buffersfor details.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_BUF0CR_HP_EN field. */
#define QuadSPI_RD_BUF0CR_HP_EN(base) ((QuadSPI_BUF0CR_REG(base) & QuadSPI_BUF0CR_HP_EN_MASK) >> QuadSPI_BUF0CR_HP_EN_SHIFT)
#define QuadSPI_BRD_BUF0CR_HP_EN(base) (BME_UBFX32(&QuadSPI_BUF0CR_REG(base), QuadSPI_BUF0CR_HP_EN_SHIFT, QuadSPI_BUF0CR_HP_EN_WIDTH))

/*! @brief Set the HP_EN field to a new value. */
#define QuadSPI_WR_BUF0CR_HP_EN(base, value) (QuadSPI_RMW_BUF0CR(base, QuadSPI_BUF0CR_HP_EN_MASK, QuadSPI_BUF0CR_HP_EN(value)))
#define QuadSPI_BWR_BUF0CR_HP_EN(base, value) (BME_BFI32(&QuadSPI_BUF0CR_REG(base), ((uint32_t)(value) << QuadSPI_BUF0CR_HP_EN_SHIFT), QuadSPI_BUF0CR_HP_EN_SHIFT, QuadSPI_BUF0CR_HP_EN_WIDTH))
/*@}*/

/*******************************************************************************
 * QuadSPI_BUF1CR - Buffer1 Configuration Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_BUF1CR - Buffer1 Configuration Register (RW)
 *
 * Reset value: 0x00000003U
 *
 * This register provides the configuration for any access to buffer1. An access
 * is routed to buffer1 when the master port number of the incoming AHB request
 * matches the MSTRID field of the BUF1CR. Any buffer "miss" leads to the buffer
 * being flushed and a serial flash transaction being triggered as per the
 * sequence pointed to by the SEQID field. Write: QSPI_SR[AHB_ACC] = 0
 */
/*!
 * @name Constants and macros for entire QuadSPI_BUF1CR register
 */
/*@{*/
#define QuadSPI_RD_BUF1CR(base)  (QuadSPI_BUF1CR_REG(base))
#define QuadSPI_WR_BUF1CR(base, value) (QuadSPI_BUF1CR_REG(base) = (value))
#define QuadSPI_RMW_BUF1CR(base, mask, value) (QuadSPI_WR_BUF1CR(base, (QuadSPI_RD_BUF1CR(base) & ~(mask)) | (value)))
#define QuadSPI_SET_BUF1CR(base, value) (BME_OR32(&QuadSPI_BUF1CR_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_BUF1CR(base, value) (BME_AND32(&QuadSPI_BUF1CR_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_BUF1CR(base, value) (BME_XOR32(&QuadSPI_BUF1CR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_BUF1CR bitfields
 */

/*!
 * @name Register QuadSPI_BUF1CR, field MSTRID[3:0] (RW)
 *
 * Master ID: The ID of the AHB master associated with BUFFER1. Any AHB access
 * with this master port number is routed to this buffer.It must be ensured that
 * the master id's associated with all buffers must be different.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_BUF1CR_MSTRID field. */
#define QuadSPI_RD_BUF1CR_MSTRID(base) ((QuadSPI_BUF1CR_REG(base) & QuadSPI_BUF1CR_MSTRID_MASK) >> QuadSPI_BUF1CR_MSTRID_SHIFT)
#define QuadSPI_BRD_BUF1CR_MSTRID(base) (BME_UBFX32(&QuadSPI_BUF1CR_REG(base), QuadSPI_BUF1CR_MSTRID_SHIFT, QuadSPI_BUF1CR_MSTRID_WIDTH))

/*! @brief Set the MSTRID field to a new value. */
#define QuadSPI_WR_BUF1CR_MSTRID(base, value) (QuadSPI_RMW_BUF1CR(base, QuadSPI_BUF1CR_MSTRID_MASK, QuadSPI_BUF1CR_MSTRID(value)))
#define QuadSPI_BWR_BUF1CR_MSTRID(base, value) (BME_BFI32(&QuadSPI_BUF1CR_REG(base), ((uint32_t)(value) << QuadSPI_BUF1CR_MSTRID_SHIFT), QuadSPI_BUF1CR_MSTRID_SHIFT, QuadSPI_BUF1CR_MSTRID_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_BUF1CR, field ADATSZ[14:8] (RW)
 *
 * Defines the data transfer size in 8 bytes of an AHB triggered access to
 * serial flash.For example, a value of 0x2 will set transfer size to 16bytes. When
 * ADATSZ = 0, the data size mentioned the sequence pointed to by the SEQID field
 * overrides this value.SW should ensure that this transfer size is not greater
 * than the size of this buffer.If OTFAD is enabled, the QuadSPI module prefetches
 * only those many data's from Flash such that the prefetch never crosses the 1KB
 * boundary.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_BUF1CR_ADATSZ field. */
#define QuadSPI_RD_BUF1CR_ADATSZ(base) ((QuadSPI_BUF1CR_REG(base) & QuadSPI_BUF1CR_ADATSZ_MASK) >> QuadSPI_BUF1CR_ADATSZ_SHIFT)
#define QuadSPI_BRD_BUF1CR_ADATSZ(base) (BME_UBFX32(&QuadSPI_BUF1CR_REG(base), QuadSPI_BUF1CR_ADATSZ_SHIFT, QuadSPI_BUF1CR_ADATSZ_WIDTH))

/*! @brief Set the ADATSZ field to a new value. */
#define QuadSPI_WR_BUF1CR_ADATSZ(base, value) (QuadSPI_RMW_BUF1CR(base, QuadSPI_BUF1CR_ADATSZ_MASK, QuadSPI_BUF1CR_ADATSZ(value)))
#define QuadSPI_BWR_BUF1CR_ADATSZ(base, value) (BME_BFI32(&QuadSPI_BUF1CR_REG(base), ((uint32_t)(value) << QuadSPI_BUF1CR_ADATSZ_SHIFT), QuadSPI_BUF1CR_ADATSZ_SHIFT, QuadSPI_BUF1CR_ADATSZ_WIDTH))
/*@}*/

/*******************************************************************************
 * QuadSPI_BUF2CR - Buffer2 Configuration Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_BUF2CR - Buffer2 Configuration Register (RW)
 *
 * Reset value: 0x00000004U
 *
 * This register provides the configuration for any access to buffer2. An access
 * is routed to buffer2 when the master port number of the incoming AHB request
 * matches the MSTRID field of the BUF2CR. Any buffer "miss" leads to the buffer
 * being flushed and a serial flash transaction being triggered as per the
 * sequence pointed to by the SEQID field. Write: QSPI_SR[AHB_ACC] = 0
 */
/*!
 * @name Constants and macros for entire QuadSPI_BUF2CR register
 */
/*@{*/
#define QuadSPI_RD_BUF2CR(base)  (QuadSPI_BUF2CR_REG(base))
#define QuadSPI_WR_BUF2CR(base, value) (QuadSPI_BUF2CR_REG(base) = (value))
#define QuadSPI_RMW_BUF2CR(base, mask, value) (QuadSPI_WR_BUF2CR(base, (QuadSPI_RD_BUF2CR(base) & ~(mask)) | (value)))
#define QuadSPI_SET_BUF2CR(base, value) (BME_OR32(&QuadSPI_BUF2CR_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_BUF2CR(base, value) (BME_AND32(&QuadSPI_BUF2CR_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_BUF2CR(base, value) (BME_XOR32(&QuadSPI_BUF2CR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_BUF2CR bitfields
 */

/*!
 * @name Register QuadSPI_BUF2CR, field MSTRID[3:0] (RW)
 *
 * Master ID: The ID of the AHB master associated with BUFFER2. Any AHB access
 * with this master port number is routed to this buffer.It must be ensured that
 * the master id's associated with all buffers must be different.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_BUF2CR_MSTRID field. */
#define QuadSPI_RD_BUF2CR_MSTRID(base) ((QuadSPI_BUF2CR_REG(base) & QuadSPI_BUF2CR_MSTRID_MASK) >> QuadSPI_BUF2CR_MSTRID_SHIFT)
#define QuadSPI_BRD_BUF2CR_MSTRID(base) (BME_UBFX32(&QuadSPI_BUF2CR_REG(base), QuadSPI_BUF2CR_MSTRID_SHIFT, QuadSPI_BUF2CR_MSTRID_WIDTH))

/*! @brief Set the MSTRID field to a new value. */
#define QuadSPI_WR_BUF2CR_MSTRID(base, value) (QuadSPI_RMW_BUF2CR(base, QuadSPI_BUF2CR_MSTRID_MASK, QuadSPI_BUF2CR_MSTRID(value)))
#define QuadSPI_BWR_BUF2CR_MSTRID(base, value) (BME_BFI32(&QuadSPI_BUF2CR_REG(base), ((uint32_t)(value) << QuadSPI_BUF2CR_MSTRID_SHIFT), QuadSPI_BUF2CR_MSTRID_SHIFT, QuadSPI_BUF2CR_MSTRID_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_BUF2CR, field ADATSZ[14:8] (RW)
 *
 * Defines the data transfer size in 8 Bytes of an AHB triggered access to
 * serial flash. For example, a value of 0x2 will set transfer size to 16bytes.When
 * ADATSZ = 0, the data size mentioned the sequence pointed to by the SEQID field
 * overrides this value.SW should ensure that this transfer size is not greater
 * than the size of this buffer.If OTFAD is enabled, the QuadSPI module prefetches
 * only those many data's from Flash such that the prefetch never crosses the 1KB
 * boundary.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_BUF2CR_ADATSZ field. */
#define QuadSPI_RD_BUF2CR_ADATSZ(base) ((QuadSPI_BUF2CR_REG(base) & QuadSPI_BUF2CR_ADATSZ_MASK) >> QuadSPI_BUF2CR_ADATSZ_SHIFT)
#define QuadSPI_BRD_BUF2CR_ADATSZ(base) (BME_UBFX32(&QuadSPI_BUF2CR_REG(base), QuadSPI_BUF2CR_ADATSZ_SHIFT, QuadSPI_BUF2CR_ADATSZ_WIDTH))

/*! @brief Set the ADATSZ field to a new value. */
#define QuadSPI_WR_BUF2CR_ADATSZ(base, value) (QuadSPI_RMW_BUF2CR(base, QuadSPI_BUF2CR_ADATSZ_MASK, QuadSPI_BUF2CR_ADATSZ(value)))
#define QuadSPI_BWR_BUF2CR_ADATSZ(base, value) (BME_BFI32(&QuadSPI_BUF2CR_REG(base), ((uint32_t)(value) << QuadSPI_BUF2CR_ADATSZ_SHIFT), QuadSPI_BUF2CR_ADATSZ_SHIFT, QuadSPI_BUF2CR_ADATSZ_WIDTH))
/*@}*/

/*******************************************************************************
 * QuadSPI_BUF3CR - Buffer3 Configuration Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_BUF3CR - Buffer3 Configuration Register (RW)
 *
 * Reset value: 0x80000000U
 *
 * This register provides the configuration for any access to buffer3. An access
 * is routed to buffer3 when the master port number of the incoming AHB request
 * matches the MSTRID field of the BUF3CR. Any buffer "miss" leads to the buffer
 * being flushed a serial flash transaction being triggered as per the sequence
 * pointed to by the SEQID field. In the case that the ALLMST field is not set,
 * any such transaction (where master port number does not match any of the MSTRID
 * fields) will be returned an ERROR response. Write: QSPI_SR[AHB_ACC] = 0
 */
/*!
 * @name Constants and macros for entire QuadSPI_BUF3CR register
 */
/*@{*/
#define QuadSPI_RD_BUF3CR(base)  (QuadSPI_BUF3CR_REG(base))
#define QuadSPI_WR_BUF3CR(base, value) (QuadSPI_BUF3CR_REG(base) = (value))
#define QuadSPI_RMW_BUF3CR(base, mask, value) (QuadSPI_WR_BUF3CR(base, (QuadSPI_RD_BUF3CR(base) & ~(mask)) | (value)))
#define QuadSPI_SET_BUF3CR(base, value) (BME_OR32(&QuadSPI_BUF3CR_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_BUF3CR(base, value) (BME_AND32(&QuadSPI_BUF3CR_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_BUF3CR(base, value) (BME_XOR32(&QuadSPI_BUF3CR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_BUF3CR bitfields
 */

/*!
 * @name Register QuadSPI_BUF3CR, field MSTRID[3:0] (RW)
 *
 * Master ID: The ID of the AHB master associated with BUFFER3. Any AHB access
 * with this master port number is routed to this buffer. It must be ensured that
 * the master id's associated with all buffers must be different.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_BUF3CR_MSTRID field. */
#define QuadSPI_RD_BUF3CR_MSTRID(base) ((QuadSPI_BUF3CR_REG(base) & QuadSPI_BUF3CR_MSTRID_MASK) >> QuadSPI_BUF3CR_MSTRID_SHIFT)
#define QuadSPI_BRD_BUF3CR_MSTRID(base) (BME_UBFX32(&QuadSPI_BUF3CR_REG(base), QuadSPI_BUF3CR_MSTRID_SHIFT, QuadSPI_BUF3CR_MSTRID_WIDTH))

/*! @brief Set the MSTRID field to a new value. */
#define QuadSPI_WR_BUF3CR_MSTRID(base, value) (QuadSPI_RMW_BUF3CR(base, QuadSPI_BUF3CR_MSTRID_MASK, QuadSPI_BUF3CR_MSTRID(value)))
#define QuadSPI_BWR_BUF3CR_MSTRID(base, value) (BME_BFI32(&QuadSPI_BUF3CR_REG(base), ((uint32_t)(value) << QuadSPI_BUF3CR_MSTRID_SHIFT), QuadSPI_BUF3CR_MSTRID_SHIFT, QuadSPI_BUF3CR_MSTRID_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_BUF3CR, field ADATSZ[14:8] (RW)
 *
 * Defines the data transfer size in 8 Bytes of an AHB triggered access to
 * serial flash. When ADATSZ = 0, the data size mentioned the sequence pointed to by
 * the SEQID field overrides this value. SW should ensure that this transfer size
 * is not greater than the size of this buffer.If OTFAD is enabled, the QuadSPI
 * module prefetches only those many data's from Flash such that the prefetch
 * never crosses the 1KB boundary.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_BUF3CR_ADATSZ field. */
#define QuadSPI_RD_BUF3CR_ADATSZ(base) ((QuadSPI_BUF3CR_REG(base) & QuadSPI_BUF3CR_ADATSZ_MASK) >> QuadSPI_BUF3CR_ADATSZ_SHIFT)
#define QuadSPI_BRD_BUF3CR_ADATSZ(base) (BME_UBFX32(&QuadSPI_BUF3CR_REG(base), QuadSPI_BUF3CR_ADATSZ_SHIFT, QuadSPI_BUF3CR_ADATSZ_WIDTH))

/*! @brief Set the ADATSZ field to a new value. */
#define QuadSPI_WR_BUF3CR_ADATSZ(base, value) (QuadSPI_RMW_BUF3CR(base, QuadSPI_BUF3CR_ADATSZ_MASK, QuadSPI_BUF3CR_ADATSZ(value)))
#define QuadSPI_BWR_BUF3CR_ADATSZ(base, value) (BME_BFI32(&QuadSPI_BUF3CR_REG(base), ((uint32_t)(value) << QuadSPI_BUF3CR_ADATSZ_SHIFT), QuadSPI_BUF3CR_ADATSZ_SHIFT, QuadSPI_BUF3CR_ADATSZ_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_BUF3CR, field ALLMST[31] (RW)
 *
 * All master enable: When set, buffer3 acts as an all-master buffer. Any AHB
 * access with a master port number not matching with the master ID of buffer0 or
 * buffer1 or buffer2 is routed to buffer3. When set, the MSTRID field of this
 * register is ignored.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_BUF3CR_ALLMST field. */
#define QuadSPI_RD_BUF3CR_ALLMST(base) ((QuadSPI_BUF3CR_REG(base) & QuadSPI_BUF3CR_ALLMST_MASK) >> QuadSPI_BUF3CR_ALLMST_SHIFT)
#define QuadSPI_BRD_BUF3CR_ALLMST(base) (BME_UBFX32(&QuadSPI_BUF3CR_REG(base), QuadSPI_BUF3CR_ALLMST_SHIFT, QuadSPI_BUF3CR_ALLMST_WIDTH))

/*! @brief Set the ALLMST field to a new value. */
#define QuadSPI_WR_BUF3CR_ALLMST(base, value) (QuadSPI_RMW_BUF3CR(base, QuadSPI_BUF3CR_ALLMST_MASK, QuadSPI_BUF3CR_ALLMST(value)))
#define QuadSPI_BWR_BUF3CR_ALLMST(base, value) (BME_BFI32(&QuadSPI_BUF3CR_REG(base), ((uint32_t)(value) << QuadSPI_BUF3CR_ALLMST_SHIFT), QuadSPI_BUF3CR_ALLMST_SHIFT, QuadSPI_BUF3CR_ALLMST_WIDTH))
/*@}*/

/*******************************************************************************
 * QuadSPI_BFGENCR - Buffer Generic Configuration Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_BFGENCR - Buffer Generic Configuration Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register provides the generic configuration to any of the buffer
 * accesses. Any buffer "miss" leads to the buffer being flushed and a serial flash
 * transaction being triggered as per the sequence pointed to by the SEQID field. If
 * the PAR_EN field is set, all the buffer accesses result in parallel accesses
 * to the flashes. Write: QSPI_SR[AHB_ACC] = 0
 */
/*!
 * @name Constants and macros for entire QuadSPI_BFGENCR register
 */
/*@{*/
#define QuadSPI_RD_BFGENCR(base) (QuadSPI_BFGENCR_REG(base))
#define QuadSPI_WR_BFGENCR(base, value) (QuadSPI_BFGENCR_REG(base) = (value))
#define QuadSPI_RMW_BFGENCR(base, mask, value) (QuadSPI_WR_BFGENCR(base, (QuadSPI_RD_BFGENCR(base) & ~(mask)) | (value)))
#define QuadSPI_SET_BFGENCR(base, value) (BME_OR32(&QuadSPI_BFGENCR_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_BFGENCR(base, value) (BME_AND32(&QuadSPI_BFGENCR_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_BFGENCR(base, value) (BME_XOR32(&QuadSPI_BFGENCR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_BFGENCR bitfields
 */

/*!
 * @name Register QuadSPI_BFGENCR, field SEQID[15:12] (RW)
 *
 * Points to a sequence in the Look-up-table. The SEQID defines the bits [6:2]
 * of the LUT index. The bits [1:0] are always assumed to be 0. Refer to Look-up
 * Table. If the sequence pointer differs between the new and previous sequence
 * then the user should reset this. See QSPI_SPTRCLR for more information.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_BFGENCR_SEQID field. */
#define QuadSPI_RD_BFGENCR_SEQID(base) ((QuadSPI_BFGENCR_REG(base) & QuadSPI_BFGENCR_SEQID_MASK) >> QuadSPI_BFGENCR_SEQID_SHIFT)
#define QuadSPI_BRD_BFGENCR_SEQID(base) (BME_UBFX32(&QuadSPI_BFGENCR_REG(base), QuadSPI_BFGENCR_SEQID_SHIFT, QuadSPI_BFGENCR_SEQID_WIDTH))

/*! @brief Set the SEQID field to a new value. */
#define QuadSPI_WR_BFGENCR_SEQID(base, value) (QuadSPI_RMW_BFGENCR(base, QuadSPI_BFGENCR_SEQID_MASK, QuadSPI_BFGENCR_SEQID(value)))
#define QuadSPI_BWR_BFGENCR_SEQID(base, value) (BME_BFI32(&QuadSPI_BFGENCR_REG(base), ((uint32_t)(value) << QuadSPI_BFGENCR_SEQID_SHIFT), QuadSPI_BFGENCR_SEQID_SHIFT, QuadSPI_BFGENCR_SEQID_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_BFGENCR, field PAR_EN[16] (RW)
 *
 * When set, a transaction to two serial flash devices is triggered in parallel
 * mode. Refer to Parallel Flash Mode for more details.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_BFGENCR_PAR_EN field. */
#define QuadSPI_RD_BFGENCR_PAR_EN(base) ((QuadSPI_BFGENCR_REG(base) & QuadSPI_BFGENCR_PAR_EN_MASK) >> QuadSPI_BFGENCR_PAR_EN_SHIFT)
#define QuadSPI_BRD_BFGENCR_PAR_EN(base) (BME_UBFX32(&QuadSPI_BFGENCR_REG(base), QuadSPI_BFGENCR_PAR_EN_SHIFT, QuadSPI_BFGENCR_PAR_EN_WIDTH))

/*! @brief Set the PAR_EN field to a new value. */
#define QuadSPI_WR_BFGENCR_PAR_EN(base, value) (QuadSPI_RMW_BFGENCR(base, QuadSPI_BFGENCR_PAR_EN_MASK, QuadSPI_BFGENCR_PAR_EN(value)))
#define QuadSPI_BWR_BFGENCR_PAR_EN(base, value) (BME_BFI32(&QuadSPI_BFGENCR_REG(base), ((uint32_t)(value) << QuadSPI_BFGENCR_PAR_EN_SHIFT), QuadSPI_BFGENCR_PAR_EN_SHIFT, QuadSPI_BFGENCR_PAR_EN_WIDTH))
/*@}*/

/*******************************************************************************
 * QuadSPI_SOCCR - SOC Configuration Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_SOCCR - SOC Configuration Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register is programmed at chip level for QuadSPI delay chain
 * configuration. For details, refer to chip-specific QuadSPI information. Write:
 * QSPI_SR[AHB_ACC] = 0
 */
/*!
 * @name Constants and macros for entire QuadSPI_SOCCR register
 */
/*@{*/
#define QuadSPI_RD_SOCCR(base)   (QuadSPI_SOCCR_REG(base))
#define QuadSPI_WR_SOCCR(base, value) (QuadSPI_SOCCR_REG(base) = (value))
#define QuadSPI_RMW_SOCCR(base, mask, value) (QuadSPI_WR_SOCCR(base, (QuadSPI_RD_SOCCR(base) & ~(mask)) | (value)))
#define QuadSPI_SET_SOCCR(base, value) (BME_OR32(&QuadSPI_SOCCR_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_SOCCR(base, value) (BME_AND32(&QuadSPI_SOCCR_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_SOCCR(base, value) (BME_XOR32(&QuadSPI_SOCCR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_SOCCR bitfields
 */

/*!
 * @name Register QuadSPI_SOCCR, field QSPISRC[2:0] (RW)
 *
 * Values:
 * - 0b000 - Core/system clock
 * - 0b001 - MCGFLL clock
 * - 0b010 - MCGPLL clock
 * - 0b011 - MCGPLL 2x clock (DDR mode specific)
 * - 0b100 - IRC48M clock
 * - 0b101 - OSCERCLK clock
 * - 0b110 - MCGIRCLK clock
 * - 0b111 - Reserved
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SOCCR_QSPISRC field. */
#define QuadSPI_RD_SOCCR_QSPISRC(base) ((QuadSPI_SOCCR_REG(base) & QuadSPI_SOCCR_QSPISRC_MASK) >> QuadSPI_SOCCR_QSPISRC_SHIFT)
#define QuadSPI_BRD_SOCCR_QSPISRC(base) (BME_UBFX32(&QuadSPI_SOCCR_REG(base), QuadSPI_SOCCR_QSPISRC_SHIFT, QuadSPI_SOCCR_QSPISRC_WIDTH))

/*! @brief Set the QSPISRC field to a new value. */
#define QuadSPI_WR_SOCCR_QSPISRC(base, value) (QuadSPI_RMW_SOCCR(base, QuadSPI_SOCCR_QSPISRC_MASK, QuadSPI_SOCCR_QSPISRC(value)))
#define QuadSPI_BWR_SOCCR_QSPISRC(base, value) (BME_BFI32(&QuadSPI_SOCCR_REG(base), ((uint32_t)(value) << QuadSPI_SOCCR_QSPISRC_SHIFT), QuadSPI_SOCCR_QSPISRC_SHIFT, QuadSPI_SOCCR_QSPISRC_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SOCCR, field DQSLPEN[8] (RW)
 *
 * Values:
 * - 0b0 - DQS loop back is disabled
 * - 0b1 - DQS loop back is enabled
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SOCCR_DQSLPEN field. */
#define QuadSPI_RD_SOCCR_DQSLPEN(base) ((QuadSPI_SOCCR_REG(base) & QuadSPI_SOCCR_DQSLPEN_MASK) >> QuadSPI_SOCCR_DQSLPEN_SHIFT)
#define QuadSPI_BRD_SOCCR_DQSLPEN(base) (BME_UBFX32(&QuadSPI_SOCCR_REG(base), QuadSPI_SOCCR_DQSLPEN_SHIFT, QuadSPI_SOCCR_DQSLPEN_WIDTH))

/*! @brief Set the DQSLPEN field to a new value. */
#define QuadSPI_WR_SOCCR_DQSLPEN(base, value) (QuadSPI_RMW_SOCCR(base, QuadSPI_SOCCR_DQSLPEN_MASK, QuadSPI_SOCCR_DQSLPEN(value)))
#define QuadSPI_BWR_SOCCR_DQSLPEN(base, value) (BME_BFI32(&QuadSPI_SOCCR_REG(base), ((uint32_t)(value) << QuadSPI_SOCCR_DQSLPEN_SHIFT), QuadSPI_SOCCR_DQSLPEN_SHIFT, QuadSPI_SOCCR_DQSLPEN_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SOCCR, field DQSPADLPEN[9] (RW)
 *
 * Values:
 * - 0b0 - DQS loop back from DQS pad is disabled
 * - 0b1 - DQS loop back from DQS pad is enabled
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SOCCR_DQSPADLPEN field. */
#define QuadSPI_RD_SOCCR_DQSPADLPEN(base) ((QuadSPI_SOCCR_REG(base) & QuadSPI_SOCCR_DQSPADLPEN_MASK) >> QuadSPI_SOCCR_DQSPADLPEN_SHIFT)
#define QuadSPI_BRD_SOCCR_DQSPADLPEN(base) (BME_UBFX32(&QuadSPI_SOCCR_REG(base), QuadSPI_SOCCR_DQSPADLPEN_SHIFT, QuadSPI_SOCCR_DQSPADLPEN_WIDTH))

/*! @brief Set the DQSPADLPEN field to a new value. */
#define QuadSPI_WR_SOCCR_DQSPADLPEN(base, value) (QuadSPI_RMW_SOCCR(base, QuadSPI_SOCCR_DQSPADLPEN_MASK, QuadSPI_SOCCR_DQSPADLPEN(value)))
#define QuadSPI_BWR_SOCCR_DQSPADLPEN(base, value) (BME_BFI32(&QuadSPI_SOCCR_REG(base), ((uint32_t)(value) << QuadSPI_SOCCR_DQSPADLPEN_SHIFT), QuadSPI_SOCCR_DQSPADLPEN_SHIFT, QuadSPI_SOCCR_DQSPADLPEN_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SOCCR, field DQSPHASEL[11:10] (RW)
 *
 * Values:
 * - 0b00 - No phase shift
 * - 0b01 - Select 45 degree phase shift
 * - 0b10 - Select 90 degree phase shift
 * - 0b11 - Select 135 degree phase shift
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SOCCR_DQSPHASEL field. */
#define QuadSPI_RD_SOCCR_DQSPHASEL(base) ((QuadSPI_SOCCR_REG(base) & QuadSPI_SOCCR_DQSPHASEL_MASK) >> QuadSPI_SOCCR_DQSPHASEL_SHIFT)
#define QuadSPI_BRD_SOCCR_DQSPHASEL(base) (BME_UBFX32(&QuadSPI_SOCCR_REG(base), QuadSPI_SOCCR_DQSPHASEL_SHIFT, QuadSPI_SOCCR_DQSPHASEL_WIDTH))

/*! @brief Set the DQSPHASEL field to a new value. */
#define QuadSPI_WR_SOCCR_DQSPHASEL(base, value) (QuadSPI_RMW_SOCCR(base, QuadSPI_SOCCR_DQSPHASEL_MASK, QuadSPI_SOCCR_DQSPHASEL(value)))
#define QuadSPI_BWR_SOCCR_DQSPHASEL(base, value) (BME_BFI32(&QuadSPI_SOCCR_REG(base), ((uint32_t)(value) << QuadSPI_SOCCR_DQSPHASEL_SHIFT), QuadSPI_SOCCR_DQSPHASEL_SHIFT, QuadSPI_SOCCR_DQSPHASEL_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SOCCR, field DQSINVSEL[12] (RW)
 *
 * Values:
 * - 0b0 - Use 1x internal reference clock for the DQS generation
 * - 0b1 - Use inverse 1x internal reference clock for the DQS generation
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SOCCR_DQSINVSEL field. */
#define QuadSPI_RD_SOCCR_DQSINVSEL(base) ((QuadSPI_SOCCR_REG(base) & QuadSPI_SOCCR_DQSINVSEL_MASK) >> QuadSPI_SOCCR_DQSINVSEL_SHIFT)
#define QuadSPI_BRD_SOCCR_DQSINVSEL(base) (BME_UBFX32(&QuadSPI_SOCCR_REG(base), QuadSPI_SOCCR_DQSINVSEL_SHIFT, QuadSPI_SOCCR_DQSINVSEL_WIDTH))

/*! @brief Set the DQSINVSEL field to a new value. */
#define QuadSPI_WR_SOCCR_DQSINVSEL(base, value) (QuadSPI_RMW_SOCCR(base, QuadSPI_SOCCR_DQSINVSEL_MASK, QuadSPI_SOCCR_DQSINVSEL(value)))
#define QuadSPI_BWR_SOCCR_DQSINVSEL(base, value) (BME_BFI32(&QuadSPI_SOCCR_REG(base), ((uint32_t)(value) << QuadSPI_SOCCR_DQSINVSEL_SHIFT), QuadSPI_SOCCR_DQSINVSEL_SHIFT, QuadSPI_SOCCR_DQSINVSEL_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SOCCR, field CK2EN[13] (RW)
 *
 * Values:
 * - 0b0 - CK2 flash clock is disabled
 * - 0b1 - CK2 flash clock is enabled
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SOCCR_CK2EN field. */
#define QuadSPI_RD_SOCCR_CK2EN(base) ((QuadSPI_SOCCR_REG(base) & QuadSPI_SOCCR_CK2EN_MASK) >> QuadSPI_SOCCR_CK2EN_SHIFT)
#define QuadSPI_BRD_SOCCR_CK2EN(base) (BME_UBFX32(&QuadSPI_SOCCR_REG(base), QuadSPI_SOCCR_CK2EN_SHIFT, QuadSPI_SOCCR_CK2EN_WIDTH))

/*! @brief Set the CK2EN field to a new value. */
#define QuadSPI_WR_SOCCR_CK2EN(base, value) (QuadSPI_RMW_SOCCR(base, QuadSPI_SOCCR_CK2EN_MASK, QuadSPI_SOCCR_CK2EN(value)))
#define QuadSPI_BWR_SOCCR_CK2EN(base, value) (BME_BFI32(&QuadSPI_SOCCR_REG(base), ((uint32_t)(value) << QuadSPI_SOCCR_CK2EN_SHIFT), QuadSPI_SOCCR_CK2EN_SHIFT, QuadSPI_SOCCR_CK2EN_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SOCCR, field DIFFCKEN[14] (RW)
 *
 * Values:
 * - 0b0 - Differential flash clock is disabled
 * - 0b1 - Differential flash clock is enabled
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SOCCR_DIFFCKEN field. */
#define QuadSPI_RD_SOCCR_DIFFCKEN(base) ((QuadSPI_SOCCR_REG(base) & QuadSPI_SOCCR_DIFFCKEN_MASK) >> QuadSPI_SOCCR_DIFFCKEN_SHIFT)
#define QuadSPI_BRD_SOCCR_DIFFCKEN(base) (BME_UBFX32(&QuadSPI_SOCCR_REG(base), QuadSPI_SOCCR_DIFFCKEN_SHIFT, QuadSPI_SOCCR_DIFFCKEN_WIDTH))

/*! @brief Set the DIFFCKEN field to a new value. */
#define QuadSPI_WR_SOCCR_DIFFCKEN(base, value) (QuadSPI_RMW_SOCCR(base, QuadSPI_SOCCR_DIFFCKEN_MASK, QuadSPI_SOCCR_DIFFCKEN(value)))
#define QuadSPI_BWR_SOCCR_DIFFCKEN(base, value) (BME_BFI32(&QuadSPI_SOCCR_REG(base), ((uint32_t)(value) << QuadSPI_SOCCR_DIFFCKEN_SHIFT), QuadSPI_SOCCR_DIFFCKEN_SHIFT, QuadSPI_SOCCR_DIFFCKEN_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SOCCR, field OCTEN[15] (RW)
 *
 * Values:
 * - 0b0 - QSPI0B_DATAx pins are assigned to QSPI Port B
 * - 0b1 - QSPI0B_DATAx pins are assigned to QSPI Port A
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SOCCR_OCTEN field. */
#define QuadSPI_RD_SOCCR_OCTEN(base) ((QuadSPI_SOCCR_REG(base) & QuadSPI_SOCCR_OCTEN_MASK) >> QuadSPI_SOCCR_OCTEN_SHIFT)
#define QuadSPI_BRD_SOCCR_OCTEN(base) (BME_UBFX32(&QuadSPI_SOCCR_REG(base), QuadSPI_SOCCR_OCTEN_SHIFT, QuadSPI_SOCCR_OCTEN_WIDTH))

/*! @brief Set the OCTEN field to a new value. */
#define QuadSPI_WR_SOCCR_OCTEN(base, value) (QuadSPI_RMW_SOCCR(base, QuadSPI_SOCCR_OCTEN_MASK, QuadSPI_SOCCR_OCTEN(value)))
#define QuadSPI_BWR_SOCCR_OCTEN(base, value) (BME_BFI32(&QuadSPI_SOCCR_REG(base), ((uint32_t)(value) << QuadSPI_SOCCR_OCTEN_SHIFT), QuadSPI_SOCCR_OCTEN_SHIFT, QuadSPI_SOCCR_OCTEN_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SOCCR, field DLYTAPSELA[21:16] (RW)
 *
 * Values:
 * - 0b000000 - Select 1 delay chain tap
 * - 0b000001 - Select 2 delay chain tap
 * - 0b000010 - Select 3 delay chain tap
 * - 0b000011 - Select 4 delay chain tap
 * - 0b000100 - Select 5 delay chain tap
 * - 0b000101 - Select 6 delay chain tap
 * - 0b000110 - Select 7 delay chain tap
 * - 0b000111 - Select 8 delay chain tap
 * - 0b001000 - Select 9 delay chain tap
 * - 0b001001 - Select 10 delay chain tap
 * - 0b001010 - Select 11 delay chain tap
 * - 0b001011 - Select 12 delay chain tap
 * - 0b001100 - Select 13 delay chain tap
 * - 0b001101 - Select 14 delay chain tap
 * - 0b001110 - Select 15 delay chain tap
 * - 0b001111 - Select 16 delay chain tap
 * - 0b010000 - Select 17 delay chain tap
 * - 0b010001 - Select 18 delay chain tap
 * - 0b010010 - Select 19 delay chain tap
 * - 0b010011 - Select 20 delay chain tap
 * - 0b010100 - Select 21 delay chain tap
 * - 0b010101 - Select 22 delay chain tap
 * - 0b010110 - Select 23 delay chain tap
 * - 0b010111 - Select 24 delay chain tap
 * - 0b011000 - Select 25 delay chain tap
 * - 0b011001 - Select 26 delay chain tap
 * - 0b011010 - Select 27 delay chain tap
 * - 0b011011 - Select 28 delay chain tap
 * - 0b011100 - Select 29 delay chain tap
 * - 0b011101 - Select 30 delay chain tap
 * - 0b011110 - Select 31 delay chain tap
 * - 0b011111 - Select 32 delay chain tap
 * - 0b100000 - Select 33 delay chain tap
 * - 0b100001 - Select 34 delay chain tap
 * - 0b100010 - Select 35 delay chain tap
 * - 0b100011 - Select 36 delay chain tap
 * - 0b100100 - Select 37 delay chain tap
 * - 0b100101 - Select 38 delay chain tap
 * - 0b100110 - Select 39 delay chain tap
 * - 0b100111 - Select 40 delay chain tap
 * - 0b101000 - Select 41 delay chain tap
 * - 0b101001 - Select 42 delay chain tap
 * - 0b101010 - Select 43 delay chain tap
 * - 0b101011 - Select 44 delay chain tap
 * - 0b101100 - Select 45 delay chain tap
 * - 0b101101 - Select 46 delay chain tap
 * - 0b101110 - Select 47 delay chain tap
 * - 0b101111 - Select 48 delay chain tap
 * - 0b110000 - Select 49 delay chain tap
 * - 0b110001 - Select 50 delay chain tap
 * - 0b110010 - Select 51 delay chain tap
 * - 0b110011 - Select 52 delay chain tap
 * - 0b110100 - Select 53 delay chain tap
 * - 0b110101 - Select 54 delay chain tap
 * - 0b110110 - Select 55 delay chain tap
 * - 0b110111 - Select 56 delay chain tap
 * - 0b111000 - Select 57 delay chain tap
 * - 0b111001 - Select 58 delay chain tap
 * - 0b111010 - Select 59 delay chain tap
 * - 0b111011 - Select 60 delay chain tap
 * - 0b111100 - Select 61 delay chain tap
 * - 0b111101 - Select 62 delay chain tap
 * - 0b111110 - Select 63 delay chain tap
 * - 0b111111 - Select 64 delay chain tap
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SOCCR_DLYTAPSELA field. */
#define QuadSPI_RD_SOCCR_DLYTAPSELA(base) ((QuadSPI_SOCCR_REG(base) & QuadSPI_SOCCR_DLYTAPSELA_MASK) >> QuadSPI_SOCCR_DLYTAPSELA_SHIFT)
#define QuadSPI_BRD_SOCCR_DLYTAPSELA(base) (BME_UBFX32(&QuadSPI_SOCCR_REG(base), QuadSPI_SOCCR_DLYTAPSELA_SHIFT, QuadSPI_SOCCR_DLYTAPSELA_WIDTH))

/*! @brief Set the DLYTAPSELA field to a new value. */
#define QuadSPI_WR_SOCCR_DLYTAPSELA(base, value) (QuadSPI_RMW_SOCCR(base, QuadSPI_SOCCR_DLYTAPSELA_MASK, QuadSPI_SOCCR_DLYTAPSELA(value)))
#define QuadSPI_BWR_SOCCR_DLYTAPSELA(base, value) (BME_BFI32(&QuadSPI_SOCCR_REG(base), ((uint32_t)(value) << QuadSPI_SOCCR_DLYTAPSELA_SHIFT), QuadSPI_SOCCR_DLYTAPSELA_SHIFT, QuadSPI_SOCCR_DLYTAPSELA_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SOCCR, field DLYTAPSELB[29:24] (RW)
 *
 * Values:
 * - 0b000000 - Select 1 delay chain tap
 * - 0b000001 - Select 2 delay chain tap
 * - 0b000010 - Select 3 delay chain tap
 * - 0b000011 - Select 4 delay chain tap
 * - 0b000100 - Select 5 delay chain tap
 * - 0b000101 - Select 6 delay chain tap
 * - 0b000110 - Select 7 delay chain tap
 * - 0b000111 - Select 8 delay chain tap
 * - 0b001000 - Select 9 delay chain tap
 * - 0b001001 - Select 10 delay chain tap
 * - 0b001010 - Select 11 delay chain tap
 * - 0b001011 - Select 12 delay chain tap
 * - 0b001100 - Select 13 delay chain tap
 * - 0b001101 - Select 14 delay chain tap
 * - 0b001110 - Select 15 delay chain tap
 * - 0b001111 - Select 16 delay chain tap
 * - 0b010000 - Select 17 delay chain tap
 * - 0b010001 - Select 18 delay chain tap
 * - 0b010010 - Select 19 delay chain tap
 * - 0b010011 - Select 20 delay chain tap
 * - 0b010100 - Select 21 delay chain tap
 * - 0b010101 - Select 22 delay chain tap
 * - 0b010110 - Select 23 delay chain tap
 * - 0b010111 - Select 24 delay chain tap
 * - 0b011000 - Select 25 delay chain tap
 * - 0b011001 - Select 26 delay chain tap
 * - 0b011010 - Select 27 delay chain tap
 * - 0b011011 - Select 28 delay chain tap
 * - 0b011100 - Select 29 delay chain tap
 * - 0b011101 - Select 30 delay chain tap
 * - 0b011110 - Select 31 delay chain tap
 * - 0b011111 - Select 32 delay chain tap
 * - 0b100000 - Select 33 delay chain tap
 * - 0b100001 - Select 34 delay chain tap
 * - 0b100010 - Select 35 delay chain tap
 * - 0b100011 - Select 36 delay chain tap
 * - 0b100100 - Select 37 delay chain tap
 * - 0b100101 - Select 38 delay chain tap
 * - 0b100110 - Select 39 delay chain tap
 * - 0b100111 - Select 40 delay chain tap
 * - 0b101000 - Select 41 delay chain tap
 * - 0b101001 - Select 42 delay chain tap
 * - 0b101010 - Select 43 delay chain tap
 * - 0b101011 - Select 44 delay chain tap
 * - 0b101100 - Select 45 delay chain tap
 * - 0b101101 - Select 46 delay chain tap
 * - 0b101110 - Select 47 delay chain tap
 * - 0b101111 - Select 48 delay chain tap
 * - 0b110000 - Select 49 delay chain tap
 * - 0b110001 - Select 50 delay chain tap
 * - 0b110010 - Select 51 delay chain tap
 * - 0b110011 - Select 52 delay chain tap
 * - 0b110100 - Select 53 delay chain tap
 * - 0b110101 - Select 54 delay chain tap
 * - 0b110110 - Select 55 delay chain tap
 * - 0b110111 - Select 56 delay chain tap
 * - 0b111000 - Select 57 delay chain tap
 * - 0b111001 - Select 58 delay chain tap
 * - 0b111010 - Select 59 delay chain tap
 * - 0b111011 - Select 60 delay chain tap
 * - 0b111100 - Select 61 delay chain tap
 * - 0b111101 - Select 62 delay chain tap
 * - 0b111110 - Select 63 delay chain tap
 * - 0b111111 - Select 64 delay chain tap
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SOCCR_DLYTAPSELB field. */
#define QuadSPI_RD_SOCCR_DLYTAPSELB(base) ((QuadSPI_SOCCR_REG(base) & QuadSPI_SOCCR_DLYTAPSELB_MASK) >> QuadSPI_SOCCR_DLYTAPSELB_SHIFT)
#define QuadSPI_BRD_SOCCR_DLYTAPSELB(base) (BME_UBFX32(&QuadSPI_SOCCR_REG(base), QuadSPI_SOCCR_DLYTAPSELB_SHIFT, QuadSPI_SOCCR_DLYTAPSELB_WIDTH))

/*! @brief Set the DLYTAPSELB field to a new value. */
#define QuadSPI_WR_SOCCR_DLYTAPSELB(base, value) (QuadSPI_RMW_SOCCR(base, QuadSPI_SOCCR_DLYTAPSELB_MASK, QuadSPI_SOCCR_DLYTAPSELB(value)))
#define QuadSPI_BWR_SOCCR_DLYTAPSELB(base, value) (BME_BFI32(&QuadSPI_SOCCR_REG(base), ((uint32_t)(value) << QuadSPI_SOCCR_DLYTAPSELB_SHIFT), QuadSPI_SOCCR_DLYTAPSELB_SHIFT, QuadSPI_SOCCR_DLYTAPSELB_WIDTH))
/*@}*/

/*******************************************************************************
 * QuadSPI_BUF0IND - Buffer0 Top Index Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_BUF0IND - Buffer0 Top Index Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register specifies the top index of buffer0, which defines its size.
 * Note that that the 3 LSBs of this register are set to zero - this ensures that
 * the buffer is 64bit aligned, as each buffer entry is 64bits long. The register
 * value should be set to the desired number of bytes less 8. For example, setting
 * BUF0IND to 0 gives 8 bytes, 1 gives 16 bytes etc. The size of buffer0 is the
 * difference between BUF0IND+8 and 0. It is the responsibility of the software
 * to ensure that BUF0IND value is not greater than the overall size of the
 * buffer. The hardware does not provide any protection against illegal programming.
 * Write: QSPI_SR[AHB_ACC] = 0
 */
/*!
 * @name Constants and macros for entire QuadSPI_BUF0IND register
 */
/*@{*/
#define QuadSPI_RD_BUF0IND(base) (QuadSPI_BUF0IND_REG(base))
#define QuadSPI_WR_BUF0IND(base, value) (QuadSPI_BUF0IND_REG(base) = (value))
#define QuadSPI_RMW_BUF0IND(base, mask, value) (QuadSPI_WR_BUF0IND(base, (QuadSPI_RD_BUF0IND(base) & ~(mask)) | (value)))
#define QuadSPI_SET_BUF0IND(base, value) (BME_OR32(&QuadSPI_BUF0IND_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_BUF0IND(base, value) (BME_AND32(&QuadSPI_BUF0IND_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_BUF0IND(base, value) (BME_XOR32(&QuadSPI_BUF0IND_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_BUF0IND bitfields
 */

/*!
 * @name Register QuadSPI_BUF0IND, field TPINDX0[31:3] (RW)
 *
 * Top index of buffer 0.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_BUF0IND_TPINDX0 field. */
#define QuadSPI_RD_BUF0IND_TPINDX0(base) ((QuadSPI_BUF0IND_REG(base) & QuadSPI_BUF0IND_TPINDX0_MASK) >> QuadSPI_BUF0IND_TPINDX0_SHIFT)
#define QuadSPI_BRD_BUF0IND_TPINDX0(base) (QuadSPI_RD_BUF0IND_TPINDX0(base))

/*! @brief Set the TPINDX0 field to a new value. */
#define QuadSPI_WR_BUF0IND_TPINDX0(base, value) (QuadSPI_RMW_BUF0IND(base, QuadSPI_BUF0IND_TPINDX0_MASK, QuadSPI_BUF0IND_TPINDX0(value)))
#define QuadSPI_BWR_BUF0IND_TPINDX0(base, value) (QuadSPI_WR_BUF0IND_TPINDX0(base, value))
/*@}*/

/*******************************************************************************
 * QuadSPI_BUF1IND - Buffer1 Top Index Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_BUF1IND - Buffer1 Top Index Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register specifies the top index of buffer1, which defines its size.
 * Note that the 3 LSBs of this register are set to zero - this ensures that the
 * buffer is 64bit aligned as each buffer entry is 64bits long. The size of buffer1
 * is the difference between the BUF1IND and BUF0IND. The register value should
 * be entered in bytes. For example, If BUF0IND = 0x100 then setting BUF1IND =
 * 0x130 will set buffer1 size to 0x30bytes. It is the responsibility of the
 * software to ensure that BUF1IND value is not greater than the overall size of the
 * buffer. The hardware does not provide any protection against illegal programming.
 * Write: QSPI_SR[AHB_ACC] = 0
 */
/*!
 * @name Constants and macros for entire QuadSPI_BUF1IND register
 */
/*@{*/
#define QuadSPI_RD_BUF1IND(base) (QuadSPI_BUF1IND_REG(base))
#define QuadSPI_WR_BUF1IND(base, value) (QuadSPI_BUF1IND_REG(base) = (value))
#define QuadSPI_RMW_BUF1IND(base, mask, value) (QuadSPI_WR_BUF1IND(base, (QuadSPI_RD_BUF1IND(base) & ~(mask)) | (value)))
#define QuadSPI_SET_BUF1IND(base, value) (BME_OR32(&QuadSPI_BUF1IND_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_BUF1IND(base, value) (BME_AND32(&QuadSPI_BUF1IND_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_BUF1IND(base, value) (BME_XOR32(&QuadSPI_BUF1IND_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_BUF1IND bitfields
 */

/*!
 * @name Register QuadSPI_BUF1IND, field TPINDX1[31:3] (RW)
 *
 * Top index of buffer 1.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_BUF1IND_TPINDX1 field. */
#define QuadSPI_RD_BUF1IND_TPINDX1(base) ((QuadSPI_BUF1IND_REG(base) & QuadSPI_BUF1IND_TPINDX1_MASK) >> QuadSPI_BUF1IND_TPINDX1_SHIFT)
#define QuadSPI_BRD_BUF1IND_TPINDX1(base) (QuadSPI_RD_BUF1IND_TPINDX1(base))

/*! @brief Set the TPINDX1 field to a new value. */
#define QuadSPI_WR_BUF1IND_TPINDX1(base, value) (QuadSPI_RMW_BUF1IND(base, QuadSPI_BUF1IND_TPINDX1_MASK, QuadSPI_BUF1IND_TPINDX1(value)))
#define QuadSPI_BWR_BUF1IND_TPINDX1(base, value) (QuadSPI_WR_BUF1IND_TPINDX1(base, value))
/*@}*/

/*******************************************************************************
 * QuadSPI_BUF2IND - Buffer2 Top Index Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_BUF2IND - Buffer2 Top Index Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register specifies the top index of buffer2, which defines its size.
 * Note that that the 3 LSBs of this register are set to zero - this ensures that
 * the buffer is 64bit aligned as each buffer entry is 64bits long. The size of
 * buffer2 is the difference between the BUF2IND and BUF1IND. The register value
 * should be entered in bytes. For example, if BUF1IND = 0x130 then setting BUF2IND
 * = 0x180 will set buffer2 size to 0x50 bytes. It is the responsibility of the
 * software to ensure that BUF2IND value is not greater than the overall size of
 * the buffer. The hardware does not provide any protection against illegal
 * programming. Write: QSPI_SR[AHB_ACC] = 0
 */
/*!
 * @name Constants and macros for entire QuadSPI_BUF2IND register
 */
/*@{*/
#define QuadSPI_RD_BUF2IND(base) (QuadSPI_BUF2IND_REG(base))
#define QuadSPI_WR_BUF2IND(base, value) (QuadSPI_BUF2IND_REG(base) = (value))
#define QuadSPI_RMW_BUF2IND(base, mask, value) (QuadSPI_WR_BUF2IND(base, (QuadSPI_RD_BUF2IND(base) & ~(mask)) | (value)))
#define QuadSPI_SET_BUF2IND(base, value) (BME_OR32(&QuadSPI_BUF2IND_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_BUF2IND(base, value) (BME_AND32(&QuadSPI_BUF2IND_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_BUF2IND(base, value) (BME_XOR32(&QuadSPI_BUF2IND_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_BUF2IND bitfields
 */

/*!
 * @name Register QuadSPI_BUF2IND, field TPINDX2[31:3] (RW)
 *
 * Top index of buffer 2.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_BUF2IND_TPINDX2 field. */
#define QuadSPI_RD_BUF2IND_TPINDX2(base) ((QuadSPI_BUF2IND_REG(base) & QuadSPI_BUF2IND_TPINDX2_MASK) >> QuadSPI_BUF2IND_TPINDX2_SHIFT)
#define QuadSPI_BRD_BUF2IND_TPINDX2(base) (QuadSPI_RD_BUF2IND_TPINDX2(base))

/*! @brief Set the TPINDX2 field to a new value. */
#define QuadSPI_WR_BUF2IND_TPINDX2(base, value) (QuadSPI_RMW_BUF2IND(base, QuadSPI_BUF2IND_TPINDX2_MASK, QuadSPI_BUF2IND_TPINDX2(value)))
#define QuadSPI_BWR_BUF2IND_TPINDX2(base, value) (QuadSPI_WR_BUF2IND_TPINDX2(base, value))
/*@}*/

/*******************************************************************************
 * QuadSPI_SFAR - Serial Flash Address Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_SFAR - Serial Flash Address Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The module automatically translates this address on the memory map to the
 * address on the flash itself. When operating in 24bit mode, only bits 23-0 are
 * sent to the flash, in 32bit mode, bits 27-0 are used with bits 31-28 driven to 0
 * when QSPI_SFACR[CAS] is set to 0. Say, if QSPI_SFACR[CAS] is 3 then bits 26-3
 * are sent to flash as it page address in case flash is operating in 24bit mode.
 * Total number of address bits request by flash as it page and column address
 * must not be more than 32 bit. Refer to for the mapping between the access mode
 * and the QSPI_SFAR content and to Normal Modefor details about the command
 * triggering and command execution. The software should ensure that the serial flash
 * address provided in the QSPI_SFAR register lies in the valid flash address
 * range as defined in . Write: QSPI_SR[IP_ACC] = 0
 */
/*!
 * @name Constants and macros for entire QuadSPI_SFAR register
 */
/*@{*/
#define QuadSPI_RD_SFAR(base)    (QuadSPI_SFAR_REG(base))
#define QuadSPI_WR_SFAR(base, value) (QuadSPI_SFAR_REG(base) = (value))
#define QuadSPI_RMW_SFAR(base, mask, value) (QuadSPI_WR_SFAR(base, (QuadSPI_RD_SFAR(base) & ~(mask)) | (value)))
#define QuadSPI_SET_SFAR(base, value) (BME_OR32(&QuadSPI_SFAR_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_SFAR(base, value) (BME_AND32(&QuadSPI_SFAR_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_SFAR(base, value) (BME_XOR32(&QuadSPI_SFAR_REG(base), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * QuadSPI_SFACR - Serial Flash Address Configuration Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_SFACR - Serial Flash Address Configuration Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This serial flash address configuration register contains the serial flash
 * specific address requirements that must be configured according to the flash
 * connected, for the controller to function properly.The module automatically
 * translates the address QSPI_SFAR on the memory map or the incoming address on the
 * AHB bus to the column address on the flash itself. Say, a flash needs 3 bits as
 * its column address than only the lower 3 bits of QSPI_SFAR/AHB address are
 * send to Flash as its column address. The software should ensure that the serial
 * flash address provided in the QSPI_SFAR register or the incoming AHB address
 * lies in the valid flash address range. Write: QSPI_SR[IP_ACC] = 0
 * QSPI_SR[AHB_ACC] = 0
 */
/*!
 * @name Constants and macros for entire QuadSPI_SFACR register
 */
/*@{*/
#define QuadSPI_RD_SFACR(base)   (QuadSPI_SFACR_REG(base))
#define QuadSPI_WR_SFACR(base, value) (QuadSPI_SFACR_REG(base) = (value))
#define QuadSPI_RMW_SFACR(base, mask, value) (QuadSPI_WR_SFACR(base, (QuadSPI_RD_SFACR(base) & ~(mask)) | (value)))
#define QuadSPI_SET_SFACR(base, value) (BME_OR32(&QuadSPI_SFACR_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_SFACR(base, value) (BME_AND32(&QuadSPI_SFACR_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_SFACR(base, value) (BME_XOR32(&QuadSPI_SFACR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_SFACR bitfields
 */

/*!
 * @name Register QuadSPI_SFACR, field CAS[3:0] (RW)
 *
 * It defines the width of the column address. If the coulmn address is say
 * [2:0] of QSPI_SFAR/AHB address, then CAS must be 3. If there is no column address
 * separation in any serial flash this bit must be programmed to 0.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SFACR_CAS field. */
#define QuadSPI_RD_SFACR_CAS(base) ((QuadSPI_SFACR_REG(base) & QuadSPI_SFACR_CAS_MASK) >> QuadSPI_SFACR_CAS_SHIFT)
#define QuadSPI_BRD_SFACR_CAS(base) (BME_UBFX32(&QuadSPI_SFACR_REG(base), QuadSPI_SFACR_CAS_SHIFT, QuadSPI_SFACR_CAS_WIDTH))

/*! @brief Set the CAS field to a new value. */
#define QuadSPI_WR_SFACR_CAS(base, value) (QuadSPI_RMW_SFACR(base, QuadSPI_SFACR_CAS_MASK, QuadSPI_SFACR_CAS(value)))
#define QuadSPI_BWR_SFACR_CAS(base, value) (BME_BFI32(&QuadSPI_SFACR_REG(base), ((uint32_t)(value) << QuadSPI_SFACR_CAS_SHIFT), QuadSPI_SFACR_CAS_SHIFT, QuadSPI_SFACR_CAS_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SFACR, field WA[16] (RW)
 *
 * It defines whether the serial flash is a byte addressable flash or a word
 * addressable flash. According to this bit configuration the address is re-mapped
 * to the flash interface. Refer to Address scheme for details
 *
 * Values:
 * - 0b0 - Byte addressable serial flash mode.
 * - 0b1 - Word (2 byte) addressable serial flash mode.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SFACR_WA field. */
#define QuadSPI_RD_SFACR_WA(base) ((QuadSPI_SFACR_REG(base) & QuadSPI_SFACR_WA_MASK) >> QuadSPI_SFACR_WA_SHIFT)
#define QuadSPI_BRD_SFACR_WA(base) (BME_UBFX32(&QuadSPI_SFACR_REG(base), QuadSPI_SFACR_WA_SHIFT, QuadSPI_SFACR_WA_WIDTH))

/*! @brief Set the WA field to a new value. */
#define QuadSPI_WR_SFACR_WA(base, value) (QuadSPI_RMW_SFACR(base, QuadSPI_SFACR_WA_MASK, QuadSPI_SFACR_WA(value)))
#define QuadSPI_BWR_SFACR_WA(base, value) (BME_BFI32(&QuadSPI_SFACR_REG(base), ((uint32_t)(value) << QuadSPI_SFACR_WA_SHIFT), QuadSPI_SFACR_WA_SHIFT, QuadSPI_SFACR_WA_WIDTH))
/*@}*/

/*******************************************************************************
 * QuadSPI_SMPR - Sampling Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_SMPR - Sampling Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The Sampling Register allows configuration of how the incoming data from the
 * external serial flash devices are sampled in the QuadSPI module. Write:
 * Disabled Mode
 */
/*!
 * @name Constants and macros for entire QuadSPI_SMPR register
 */
/*@{*/
#define QuadSPI_RD_SMPR(base)    (QuadSPI_SMPR_REG(base))
#define QuadSPI_WR_SMPR(base, value) (QuadSPI_SMPR_REG(base) = (value))
#define QuadSPI_RMW_SMPR(base, mask, value) (QuadSPI_WR_SMPR(base, (QuadSPI_RD_SMPR(base) & ~(mask)) | (value)))
#define QuadSPI_SET_SMPR(base, value) (BME_OR32(&QuadSPI_SMPR_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_SMPR(base, value) (BME_AND32(&QuadSPI_SMPR_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_SMPR(base, value) (BME_XOR32(&QuadSPI_SMPR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_SMPR bitfields
 */

/*!
 * @name Register QuadSPI_SMPR, field HSENA[0] (RW)
 *
 * This bit enables the divide by 2 of the clock to the external serial flash
 * device for all commands,only in SDR. Refer to Serial Flash Clock Frequency
 * Limitations for details.
 *
 * Values:
 * - 0b0 - Disable divide by 2 of serial flash clock for half speed commands
 * - 0b1 - Enable divide by 2 of serial flash clock for half speed commands
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SMPR_HSENA field. */
#define QuadSPI_RD_SMPR_HSENA(base) ((QuadSPI_SMPR_REG(base) & QuadSPI_SMPR_HSENA_MASK) >> QuadSPI_SMPR_HSENA_SHIFT)
#define QuadSPI_BRD_SMPR_HSENA(base) (BME_UBFX32(&QuadSPI_SMPR_REG(base), QuadSPI_SMPR_HSENA_SHIFT, QuadSPI_SMPR_HSENA_WIDTH))

/*! @brief Set the HSENA field to a new value. */
#define QuadSPI_WR_SMPR_HSENA(base, value) (QuadSPI_RMW_SMPR(base, QuadSPI_SMPR_HSENA_MASK, QuadSPI_SMPR_HSENA(value)))
#define QuadSPI_BWR_SMPR_HSENA(base, value) (BME_BFI32(&QuadSPI_SMPR_REG(base), ((uint32_t)(value) << QuadSPI_SMPR_HSENA_SHIFT), QuadSPI_SMPR_HSENA_SHIFT, QuadSPI_SMPR_HSENA_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SMPR, field HSPHS[1] (RW)
 *
 * Only relevant when HSENA bit is set. Select the delay with respect to the
 * reference edge for the sample point valid for half speed commands:
 *
 * Values:
 * - 0b0 - Select sampling at non-inverted clock
 * - 0b1 - Select sampling at inverted clock
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SMPR_HSPHS field. */
#define QuadSPI_RD_SMPR_HSPHS(base) ((QuadSPI_SMPR_REG(base) & QuadSPI_SMPR_HSPHS_MASK) >> QuadSPI_SMPR_HSPHS_SHIFT)
#define QuadSPI_BRD_SMPR_HSPHS(base) (BME_UBFX32(&QuadSPI_SMPR_REG(base), QuadSPI_SMPR_HSPHS_SHIFT, QuadSPI_SMPR_HSPHS_WIDTH))

/*! @brief Set the HSPHS field to a new value. */
#define QuadSPI_WR_SMPR_HSPHS(base, value) (QuadSPI_RMW_SMPR(base, QuadSPI_SMPR_HSPHS_MASK, QuadSPI_SMPR_HSPHS(value)))
#define QuadSPI_BWR_SMPR_HSPHS(base, value) (BME_BFI32(&QuadSPI_SMPR_REG(base), ((uint32_t)(value) << QuadSPI_SMPR_HSPHS_SHIFT), QuadSPI_SMPR_HSPHS_SHIFT, QuadSPI_SMPR_HSPHS_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SMPR, field HSDLY[2] (RW)
 *
 * Only relevant when HSENA bit is set. Select the delay with respect to the
 * reference edge for the sample point valid for half speed commands:
 *
 * Values:
 * - 0b0 - One clock cycle delay
 * - 0b1 - Two clock cycle delay
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SMPR_HSDLY field. */
#define QuadSPI_RD_SMPR_HSDLY(base) ((QuadSPI_SMPR_REG(base) & QuadSPI_SMPR_HSDLY_MASK) >> QuadSPI_SMPR_HSDLY_SHIFT)
#define QuadSPI_BRD_SMPR_HSDLY(base) (BME_UBFX32(&QuadSPI_SMPR_REG(base), QuadSPI_SMPR_HSDLY_SHIFT, QuadSPI_SMPR_HSDLY_WIDTH))

/*! @brief Set the HSDLY field to a new value. */
#define QuadSPI_WR_SMPR_HSDLY(base, value) (QuadSPI_RMW_SMPR(base, QuadSPI_SMPR_HSDLY_MASK, QuadSPI_SMPR_HSDLY(value)))
#define QuadSPI_BWR_SMPR_HSDLY(base, value) (BME_BFI32(&QuadSPI_SMPR_REG(base), ((uint32_t)(value) << QuadSPI_SMPR_HSDLY_SHIFT), QuadSPI_SMPR_HSDLY_SHIFT, QuadSPI_SMPR_HSDLY_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SMPR, field FSPHS[5] (RW)
 *
 * Select the edge of the sampling clock valid for full speed commands:
 *
 * Values:
 * - 0b0 - Select sampling at non-inverted clock
 * - 0b1 - Select sampling at inverted clock. This bit is also used in DQS mode
 *     and ignored when using non-DQS DDR instructions.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SMPR_FSPHS field. */
#define QuadSPI_RD_SMPR_FSPHS(base) ((QuadSPI_SMPR_REG(base) & QuadSPI_SMPR_FSPHS_MASK) >> QuadSPI_SMPR_FSPHS_SHIFT)
#define QuadSPI_BRD_SMPR_FSPHS(base) (BME_UBFX32(&QuadSPI_SMPR_REG(base), QuadSPI_SMPR_FSPHS_SHIFT, QuadSPI_SMPR_FSPHS_WIDTH))

/*! @brief Set the FSPHS field to a new value. */
#define QuadSPI_WR_SMPR_FSPHS(base, value) (QuadSPI_RMW_SMPR(base, QuadSPI_SMPR_FSPHS_MASK, QuadSPI_SMPR_FSPHS(value)))
#define QuadSPI_BWR_SMPR_FSPHS(base, value) (BME_BFI32(&QuadSPI_SMPR_REG(base), ((uint32_t)(value) << QuadSPI_SMPR_FSPHS_SHIFT), QuadSPI_SMPR_FSPHS_SHIFT, QuadSPI_SMPR_FSPHS_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SMPR, field FSDLY[6] (RW)
 *
 * Values:
 * - 0b0 - One clock cycle delay
 * - 0b1 - Two clock cycles delay. This bit is also used in DQS mode and ignored
 *     when using non-DQS DDR instructions.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SMPR_FSDLY field. */
#define QuadSPI_RD_SMPR_FSDLY(base) ((QuadSPI_SMPR_REG(base) & QuadSPI_SMPR_FSDLY_MASK) >> QuadSPI_SMPR_FSDLY_SHIFT)
#define QuadSPI_BRD_SMPR_FSDLY(base) (BME_UBFX32(&QuadSPI_SMPR_REG(base), QuadSPI_SMPR_FSDLY_SHIFT, QuadSPI_SMPR_FSDLY_WIDTH))

/*! @brief Set the FSDLY field to a new value. */
#define QuadSPI_WR_SMPR_FSDLY(base, value) (QuadSPI_RMW_SMPR(base, QuadSPI_SMPR_FSDLY_MASK, QuadSPI_SMPR_FSDLY(value)))
#define QuadSPI_BWR_SMPR_FSDLY(base, value) (BME_BFI32(&QuadSPI_SMPR_REG(base), ((uint32_t)(value) << QuadSPI_SMPR_FSDLY_SHIFT), QuadSPI_SMPR_FSDLY_SHIFT, QuadSPI_SMPR_FSDLY_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SMPR, field DDRSMP[18:16] (RW)
 *
 * Select the sampling point for incoming data when serial flash is executing a
 * DDR instruction. Refer to , for details on the sampling points.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SMPR_DDRSMP field. */
#define QuadSPI_RD_SMPR_DDRSMP(base) ((QuadSPI_SMPR_REG(base) & QuadSPI_SMPR_DDRSMP_MASK) >> QuadSPI_SMPR_DDRSMP_SHIFT)
#define QuadSPI_BRD_SMPR_DDRSMP(base) (BME_UBFX32(&QuadSPI_SMPR_REG(base), QuadSPI_SMPR_DDRSMP_SHIFT, QuadSPI_SMPR_DDRSMP_WIDTH))

/*! @brief Set the DDRSMP field to a new value. */
#define QuadSPI_WR_SMPR_DDRSMP(base, value) (QuadSPI_RMW_SMPR(base, QuadSPI_SMPR_DDRSMP_MASK, QuadSPI_SMPR_DDRSMP(value)))
#define QuadSPI_BWR_SMPR_DDRSMP(base, value) (BME_BFI32(&QuadSPI_SMPR_REG(base), ((uint32_t)(value) << QuadSPI_SMPR_DDRSMP_SHIFT), QuadSPI_SMPR_DDRSMP_SHIFT, QuadSPI_SMPR_DDRSMP_WIDTH))
/*@}*/

/*******************************************************************************
 * QuadSPI_RBSR - RX Buffer Status Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_RBSR - RX Buffer Status Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * This register contains information related to the receive data buffer.
 */
/*!
 * @name Constants and macros for entire QuadSPI_RBSR register
 */
/*@{*/
#define QuadSPI_RD_RBSR(base)    (QuadSPI_RBSR_REG(base))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_RBSR bitfields
 */

/*!
 * @name Register QuadSPI_RBSR, field RDBFL[12:8] (RO)
 *
 * RX Buffer Fill Level, indicates how many entries of 4 bytes are still
 * available in the RX Buffer.For example a value of 0x2 would indicate 8bytes are
 * available.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_RBSR_RDBFL field. */
#define QuadSPI_RD_RBSR_RDBFL(base) ((QuadSPI_RBSR_REG(base) & QuadSPI_RBSR_RDBFL_MASK) >> QuadSPI_RBSR_RDBFL_SHIFT)
#define QuadSPI_BRD_RBSR_RDBFL(base) (BME_UBFX32(&QuadSPI_RBSR_REG(base), QuadSPI_RBSR_RDBFL_SHIFT, QuadSPI_RBSR_RDBFL_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_RBSR, field RDCTR[31:16] (RO)
 *
 * Read Counter, indicates how many entries of 4 bytes have been removed from
 * the RX Buffer. For example a value of 0x2 would indicate 8 bytes have been
 * removed It is incremented by the number (QSPI_RBCT[WMRK] + 1) on RX Buffer POP
 * event. The RX Buffer can be popped using DMA or pop flag QSPI_FR[RBDF]. The
 * QSPI_RSER[RBDDE] defines which pop has to be done. For further details please refer
 * to AHB RX Data Buffer (QSPI_ARDB0 to QSPI_ARDB15) and "Data Transfer from the
 * QuadSPI Module Internal Buffers section in Flash Readsection.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_RBSR_RDCTR field. */
#define QuadSPI_RD_RBSR_RDCTR(base) ((QuadSPI_RBSR_REG(base) & QuadSPI_RBSR_RDCTR_MASK) >> QuadSPI_RBSR_RDCTR_SHIFT)
#define QuadSPI_BRD_RBSR_RDCTR(base) (QuadSPI_RD_RBSR_RDCTR(base))
/*@}*/

/*******************************************************************************
 * QuadSPI_RBCT - RX Buffer Control Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_RBCT - RX Buffer Control Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register contains control data related to the receive data buffer.
 * Write: QSPI_SR[IP_ACC] = 0
 */
/*!
 * @name Constants and macros for entire QuadSPI_RBCT register
 */
/*@{*/
#define QuadSPI_RD_RBCT(base)    (QuadSPI_RBCT_REG(base))
#define QuadSPI_WR_RBCT(base, value) (QuadSPI_RBCT_REG(base) = (value))
#define QuadSPI_RMW_RBCT(base, mask, value) (QuadSPI_WR_RBCT(base, (QuadSPI_RD_RBCT(base) & ~(mask)) | (value)))
#define QuadSPI_SET_RBCT(base, value) (BME_OR32(&QuadSPI_RBCT_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_RBCT(base, value) (BME_AND32(&QuadSPI_RBCT_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_RBCT(base, value) (BME_XOR32(&QuadSPI_RBCT_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_RBCT bitfields
 */

/*!
 * @name Register QuadSPI_RBCT, field WMRK[3:0] (RW)
 *
 * RX Buffer Watermark: This field determines when the readout action of the RX
 * Buffer is triggered. When the number of valid entries in the RX Buffer is
 * equal to or greater than the number given by (WMRK+1) the QSPI_SR[RXWE] flag is
 * asserted.The value should be entered as the number of 4byte entries minus 1. For
 * example a value of 0x0 would set the watermark to 4bytes, 1 to 8bytes, 2 to
 * 12bytes etc. For details, refer to DMA Usage.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_RBCT_WMRK field. */
#define QuadSPI_RD_RBCT_WMRK(base) ((QuadSPI_RBCT_REG(base) & QuadSPI_RBCT_WMRK_MASK) >> QuadSPI_RBCT_WMRK_SHIFT)
#define QuadSPI_BRD_RBCT_WMRK(base) (BME_UBFX32(&QuadSPI_RBCT_REG(base), QuadSPI_RBCT_WMRK_SHIFT, QuadSPI_RBCT_WMRK_WIDTH))

/*! @brief Set the WMRK field to a new value. */
#define QuadSPI_WR_RBCT_WMRK(base, value) (QuadSPI_RMW_RBCT(base, QuadSPI_RBCT_WMRK_MASK, QuadSPI_RBCT_WMRK(value)))
#define QuadSPI_BWR_RBCT_WMRK(base, value) (BME_BFI32(&QuadSPI_RBCT_REG(base), ((uint32_t)(value) << QuadSPI_RBCT_WMRK_SHIFT), QuadSPI_RBCT_WMRK_SHIFT, QuadSPI_RBCT_WMRK_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_RBCT, field RXBRD[8] (RW)
 *
 * RX Buffer Readout: This bit specifies the access scheme for the RX Buffer
 * readout.
 *
 * Values:
 * - 0b0 - RX Buffer content is read using the AHB Bus registers QSPI_ARDB0 to
 *     QSPI_ARDB15. For details, refer to Exclusive Access to Serial Flash for AHB
 *     Commands.
 * - 0b1 - RX Buffer content is read using the IP Bus registers QSPI_RBDR0 to
 *     QSPI_RBDR15.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_RBCT_RXBRD field. */
#define QuadSPI_RD_RBCT_RXBRD(base) ((QuadSPI_RBCT_REG(base) & QuadSPI_RBCT_RXBRD_MASK) >> QuadSPI_RBCT_RXBRD_SHIFT)
#define QuadSPI_BRD_RBCT_RXBRD(base) (BME_UBFX32(&QuadSPI_RBCT_REG(base), QuadSPI_RBCT_RXBRD_SHIFT, QuadSPI_RBCT_RXBRD_WIDTH))

/*! @brief Set the RXBRD field to a new value. */
#define QuadSPI_WR_RBCT_RXBRD(base, value) (QuadSPI_RMW_RBCT(base, QuadSPI_RBCT_RXBRD_MASK, QuadSPI_RBCT_RXBRD(value)))
#define QuadSPI_BWR_RBCT_RXBRD(base, value) (BME_BFI32(&QuadSPI_RBCT_REG(base), ((uint32_t)(value) << QuadSPI_RBCT_RXBRD_SHIFT), QuadSPI_RBCT_RXBRD_SHIFT, QuadSPI_RBCT_RXBRD_WIDTH))
/*@}*/

/*******************************************************************************
 * QuadSPI_TBSR - TX Buffer Status Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_TBSR - TX Buffer Status Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * This register contains information related to the transmit data buffer.
 */
/*!
 * @name Constants and macros for entire QuadSPI_TBSR register
 */
/*@{*/
#define QuadSPI_RD_TBSR(base)    (QuadSPI_TBSR_REG(base))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_TBSR bitfields
 */

/*!
 * @name Register QuadSPI_TBSR, field TRBFL[12:8] (RO)
 *
 * TX Buffer Fill Level. The TRBFL field contains the number of entries of 4
 * bytes each available in the TX Buffer for the QuadSPI module to transmit to the
 * serial flash device.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_TBSR_TRBFL field. */
#define QuadSPI_RD_TBSR_TRBFL(base) ((QuadSPI_TBSR_REG(base) & QuadSPI_TBSR_TRBFL_MASK) >> QuadSPI_TBSR_TRBFL_SHIFT)
#define QuadSPI_BRD_TBSR_TRBFL(base) (BME_UBFX32(&QuadSPI_TBSR_REG(base), QuadSPI_TBSR_TRBFL_SHIFT, QuadSPI_TBSR_TRBFL_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_TBSR, field TRCTR[31:16] (RO)
 *
 * Transmit Counter. This field indicates how many entries of 4 bytes have been
 * written into the TX Buffer by host accesses. It is reset to 0 when a 1 is
 * written into the QSPI_MCR[CLR_TXF] bit. It is incremented on each write access to
 * the QSPI_TBDR register when another word has been pushed onto the TX Buffer.
 * When it is not cleared the TRCTR field wraps around to 0. Refer to TBDRTX
 * Buffer Data Register for details.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_TBSR_TRCTR field. */
#define QuadSPI_RD_TBSR_TRCTR(base) ((QuadSPI_TBSR_REG(base) & QuadSPI_TBSR_TRCTR_MASK) >> QuadSPI_TBSR_TRCTR_SHIFT)
#define QuadSPI_BRD_TBSR_TRCTR(base) (QuadSPI_RD_TBSR_TRCTR(base))
/*@}*/

/*******************************************************************************
 * QuadSPI_TBDR - TX Buffer Data Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_TBDR - TX Buffer Data Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The QSPI_TBDR register provides access to the circular TX Buffer of depth 64
 * bytes. This buffer provides the data written into it as write data for the
 * page programming commands to the serial flash device. Refer to for the byte
 * ordering scheme. A write transaction on the flash with data size of less than 32
 * bits will lead to the removal of four data entry from the TX buffer. The valid
 * bits will be used and the rest of the bits will be discarded. Write:
 * QSPI_SR[TXFULL] = 0 32-bit write access required
 */
/*!
 * @name Constants and macros for entire QuadSPI_TBDR register
 */
/*@{*/
#define QuadSPI_RD_TBDR(base)    (QuadSPI_TBDR_REG(base))
#define QuadSPI_WR_TBDR(base, value) (QuadSPI_TBDR_REG(base) = (value))
#define QuadSPI_RMW_TBDR(base, mask, value) (QuadSPI_WR_TBDR(base, (QuadSPI_RD_TBDR(base) & ~(mask)) | (value)))
#define QuadSPI_SET_TBDR(base, value) (BME_OR32(&QuadSPI_TBDR_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_TBDR(base, value) (BME_AND32(&QuadSPI_TBDR_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_TBDR(base, value) (BME_XOR32(&QuadSPI_TBDR_REG(base), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * QuadSPI_TBCT - Tx Buffer Control Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_TBCT - Tx Buffer Control Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register contains control information for transmit data buffer-
 */
/*!
 * @name Constants and macros for entire QuadSPI_TBCT register
 */
/*@{*/
#define QuadSPI_RD_TBCT(base)    (QuadSPI_TBCT_REG(base))
#define QuadSPI_WR_TBCT(base, value) (QuadSPI_TBCT_REG(base) = (value))
#define QuadSPI_RMW_TBCT(base, mask, value) (QuadSPI_WR_TBCT(base, (QuadSPI_RD_TBCT(base) & ~(mask)) | (value)))
#define QuadSPI_SET_TBCT(base, value) (BME_OR32(&QuadSPI_TBCT_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_TBCT(base, value) (BME_AND32(&QuadSPI_TBCT_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_TBCT(base, value) (BME_XOR32(&QuadSPI_TBCT_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_TBCT bitfields
 */

/*!
 * @name Register QuadSPI_TBCT, field WMRK[3:0] (RW)
 *
 * Determines the watermark for the TX Buffer. When the number of available
 * space in TX Buffer is greater than the number given by (WMRK+1), QSPI_SR[TXWA] is
 * asserted. The values should be entered as the number of 4Bytes entries minus
 * 1. For example, a value of 0x0 would set the watermark to 4 bytes, 1 to 8
 * bytes, 2 to 12 Bytes, and so on.For details, refer to DMA Usage.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_TBCT_WMRK field. */
#define QuadSPI_RD_TBCT_WMRK(base) ((QuadSPI_TBCT_REG(base) & QuadSPI_TBCT_WMRK_MASK) >> QuadSPI_TBCT_WMRK_SHIFT)
#define QuadSPI_BRD_TBCT_WMRK(base) (BME_UBFX32(&QuadSPI_TBCT_REG(base), QuadSPI_TBCT_WMRK_SHIFT, QuadSPI_TBCT_WMRK_WIDTH))

/*! @brief Set the WMRK field to a new value. */
#define QuadSPI_WR_TBCT_WMRK(base, value) (QuadSPI_RMW_TBCT(base, QuadSPI_TBCT_WMRK_MASK, QuadSPI_TBCT_WMRK(value)))
#define QuadSPI_BWR_TBCT_WMRK(base, value) (BME_BFI32(&QuadSPI_TBCT_REG(base), ((uint32_t)(value) << QuadSPI_TBCT_WMRK_SHIFT), QuadSPI_TBCT_WMRK_SHIFT, QuadSPI_TBCT_WMRK_WIDTH))
/*@}*/

/*******************************************************************************
 * QuadSPI_SR - Status Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_SR - Status Register (RO)
 *
 * Reset value: 0x02003800U
 *
 * The QSPI_SR register provides all available status information about SFM
 * command execution and arbitration, the RX Buffer and TX Buffer and the AHB Buffer.
 */
/*!
 * @name Constants and macros for entire QuadSPI_SR register
 */
/*@{*/
#define QuadSPI_RD_SR(base)      (QuadSPI_SR_REG(base))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_SR bitfields
 */

/*!
 * @name Register QuadSPI_SR, field BUSY[0] (RO)
 *
 * Module Busy: Asserted when module is currently busy handling a transaction to
 * an external flash device.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SR_BUSY field. */
#define QuadSPI_RD_SR_BUSY(base) ((QuadSPI_SR_REG(base) & QuadSPI_SR_BUSY_MASK) >> QuadSPI_SR_BUSY_SHIFT)
#define QuadSPI_BRD_SR_BUSY(base) (BME_UBFX32(&QuadSPI_SR_REG(base), QuadSPI_SR_BUSY_SHIFT, QuadSPI_SR_BUSY_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SR, field IP_ACC[1] (RO)
 *
 * IP Access: Asserted when transaction currently executed was initiated by IP
 * bus.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SR_IP_ACC field. */
#define QuadSPI_RD_SR_IP_ACC(base) ((QuadSPI_SR_REG(base) & QuadSPI_SR_IP_ACC_MASK) >> QuadSPI_SR_IP_ACC_SHIFT)
#define QuadSPI_BRD_SR_IP_ACC(base) (BME_UBFX32(&QuadSPI_SR_REG(base), QuadSPI_SR_IP_ACC_SHIFT, QuadSPI_SR_IP_ACC_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SR, field AHB_ACC[2] (RO)
 *
 * AHB Access: Asserted when the transaction currently executed was initiated by
 * AHB bus.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SR_AHB_ACC field. */
#define QuadSPI_RD_SR_AHB_ACC(base) ((QuadSPI_SR_REG(base) & QuadSPI_SR_AHB_ACC_MASK) >> QuadSPI_SR_AHB_ACC_SHIFT)
#define QuadSPI_BRD_SR_AHB_ACC(base) (BME_UBFX32(&QuadSPI_SR_REG(base), QuadSPI_SR_AHB_ACC_SHIFT, QuadSPI_SR_AHB_ACC_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SR, field AHBGNT[5] (RO)
 *
 * AHB Command priority Granted: Asserted when another module has been granted
 * priority of AHB Commands against IP Commands. For details refer to Command
 * Arbitration.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SR_AHBGNT field. */
#define QuadSPI_RD_SR_AHBGNT(base) ((QuadSPI_SR_REG(base) & QuadSPI_SR_AHBGNT_MASK) >> QuadSPI_SR_AHBGNT_SHIFT)
#define QuadSPI_BRD_SR_AHBGNT(base) (BME_UBFX32(&QuadSPI_SR_REG(base), QuadSPI_SR_AHBGNT_SHIFT, QuadSPI_SR_AHBGNT_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SR, field AHBTRN[6] (RO)
 *
 * AHB Access Transaction pending: Asserted when there is a pending request on
 * the AHB interface. Refer to the AMBA specification for details.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SR_AHBTRN field. */
#define QuadSPI_RD_SR_AHBTRN(base) ((QuadSPI_SR_REG(base) & QuadSPI_SR_AHBTRN_MASK) >> QuadSPI_SR_AHBTRN_SHIFT)
#define QuadSPI_BRD_SR_AHBTRN(base) (BME_UBFX32(&QuadSPI_SR_REG(base), QuadSPI_SR_AHBTRN_SHIFT, QuadSPI_SR_AHBTRN_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SR, field AHB0NE[7] (RO)
 *
 * AHB 0 Buffer Not Empty: Asserted when AHB 0 buffer contains data.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SR_AHB0NE field. */
#define QuadSPI_RD_SR_AHB0NE(base) ((QuadSPI_SR_REG(base) & QuadSPI_SR_AHB0NE_MASK) >> QuadSPI_SR_AHB0NE_SHIFT)
#define QuadSPI_BRD_SR_AHB0NE(base) (BME_UBFX32(&QuadSPI_SR_REG(base), QuadSPI_SR_AHB0NE_SHIFT, QuadSPI_SR_AHB0NE_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SR, field AHB1NE[8] (RO)
 *
 * AHB 1 Buffer Not Empty: Asserted when AHB 1 buffer contains data.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SR_AHB1NE field. */
#define QuadSPI_RD_SR_AHB1NE(base) ((QuadSPI_SR_REG(base) & QuadSPI_SR_AHB1NE_MASK) >> QuadSPI_SR_AHB1NE_SHIFT)
#define QuadSPI_BRD_SR_AHB1NE(base) (BME_UBFX32(&QuadSPI_SR_REG(base), QuadSPI_SR_AHB1NE_SHIFT, QuadSPI_SR_AHB1NE_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SR, field AHB2NE[9] (RO)
 *
 * AHB 2 Buffer Not Empty: Asserted when AHB 2 buffer contains data.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SR_AHB2NE field. */
#define QuadSPI_RD_SR_AHB2NE(base) ((QuadSPI_SR_REG(base) & QuadSPI_SR_AHB2NE_MASK) >> QuadSPI_SR_AHB2NE_SHIFT)
#define QuadSPI_BRD_SR_AHB2NE(base) (BME_UBFX32(&QuadSPI_SR_REG(base), QuadSPI_SR_AHB2NE_SHIFT, QuadSPI_SR_AHB2NE_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SR, field AHB3NE[10] (RO)
 *
 * AHB 3 Buffer Not Empty: Asserted when AHB 3 buffer contains data.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SR_AHB3NE field. */
#define QuadSPI_RD_SR_AHB3NE(base) ((QuadSPI_SR_REG(base) & QuadSPI_SR_AHB3NE_MASK) >> QuadSPI_SR_AHB3NE_SHIFT)
#define QuadSPI_BRD_SR_AHB3NE(base) (BME_UBFX32(&QuadSPI_SR_REG(base), QuadSPI_SR_AHB3NE_SHIFT, QuadSPI_SR_AHB3NE_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SR, field AHB0FUL[11] (RO)
 *
 * AHB 0 Buffer Full: Asserted when AHB 0 buffer is full.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SR_AHB0FUL field. */
#define QuadSPI_RD_SR_AHB0FUL(base) ((QuadSPI_SR_REG(base) & QuadSPI_SR_AHB0FUL_MASK) >> QuadSPI_SR_AHB0FUL_SHIFT)
#define QuadSPI_BRD_SR_AHB0FUL(base) (BME_UBFX32(&QuadSPI_SR_REG(base), QuadSPI_SR_AHB0FUL_SHIFT, QuadSPI_SR_AHB0FUL_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SR, field AHB1FUL[12] (RO)
 *
 * AHB 1 Buffer Full: Asserted when AHB 1 buffer is full.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SR_AHB1FUL field. */
#define QuadSPI_RD_SR_AHB1FUL(base) ((QuadSPI_SR_REG(base) & QuadSPI_SR_AHB1FUL_MASK) >> QuadSPI_SR_AHB1FUL_SHIFT)
#define QuadSPI_BRD_SR_AHB1FUL(base) (BME_UBFX32(&QuadSPI_SR_REG(base), QuadSPI_SR_AHB1FUL_SHIFT, QuadSPI_SR_AHB1FUL_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SR, field AHB2FUL[13] (RO)
 *
 * AHB 2 Buffer Full: Asserted when AHB 2 buffer is full.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SR_AHB2FUL field. */
#define QuadSPI_RD_SR_AHB2FUL(base) ((QuadSPI_SR_REG(base) & QuadSPI_SR_AHB2FUL_MASK) >> QuadSPI_SR_AHB2FUL_SHIFT)
#define QuadSPI_BRD_SR_AHB2FUL(base) (BME_UBFX32(&QuadSPI_SR_REG(base), QuadSPI_SR_AHB2FUL_SHIFT, QuadSPI_SR_AHB2FUL_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SR, field AHB3FUL[14] (RO)
 *
 * AHB 3 Buffer Full: Asserted when AHB 3 buffer is full.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SR_AHB3FUL field. */
#define QuadSPI_RD_SR_AHB3FUL(base) ((QuadSPI_SR_REG(base) & QuadSPI_SR_AHB3FUL_MASK) >> QuadSPI_SR_AHB3FUL_SHIFT)
#define QuadSPI_BRD_SR_AHB3FUL(base) (BME_UBFX32(&QuadSPI_SR_REG(base), QuadSPI_SR_AHB3FUL_SHIFT, QuadSPI_SR_AHB3FUL_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SR, field RXWE[16] (RO)
 *
 * RX Buffer Watermark Exceeded: Asserted when the number of valid entries in
 * the RX Buffer exceeds the number given in the QSPI_RBCT[WMRK] field.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SR_RXWE field. */
#define QuadSPI_RD_SR_RXWE(base) ((QuadSPI_SR_REG(base) & QuadSPI_SR_RXWE_MASK) >> QuadSPI_SR_RXWE_SHIFT)
#define QuadSPI_BRD_SR_RXWE(base) (BME_UBFX32(&QuadSPI_SR_REG(base), QuadSPI_SR_RXWE_SHIFT, QuadSPI_SR_RXWE_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SR, field RXFULL[19] (RO)
 *
 * RX Buffer Full: Asserted when the RX Buffer is full, i.e. that
 * QSPI_RBSR[RDBFL] field is equal to 32.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SR_RXFULL field. */
#define QuadSPI_RD_SR_RXFULL(base) ((QuadSPI_SR_REG(base) & QuadSPI_SR_RXFULL_MASK) >> QuadSPI_SR_RXFULL_SHIFT)
#define QuadSPI_BRD_SR_RXFULL(base) (BME_UBFX32(&QuadSPI_SR_REG(base), QuadSPI_SR_RXFULL_SHIFT, QuadSPI_SR_RXFULL_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SR, field RXDMA[23] (RO)
 *
 * RX Buffer DMA: Asserted when RX Buffer read out via DMA is active i.e DMA is
 * requested or running.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SR_RXDMA field. */
#define QuadSPI_RD_SR_RXDMA(base) ((QuadSPI_SR_REG(base) & QuadSPI_SR_RXDMA_MASK) >> QuadSPI_SR_RXDMA_SHIFT)
#define QuadSPI_BRD_SR_RXDMA(base) (BME_UBFX32(&QuadSPI_SR_REG(base), QuadSPI_SR_RXDMA_SHIFT, QuadSPI_SR_RXDMA_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SR, field TXEDA[24] (RO)
 *
 * Asserted when TX Buffer contains enough data for any pop operation to take
 * place. There must be atleast 128bit data available in TX FIFO for any pop
 * operation otherwise QSPI_FR[TBUF] will be set.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SR_TXEDA field. */
#define QuadSPI_RD_SR_TXEDA(base) ((QuadSPI_SR_REG(base) & QuadSPI_SR_TXEDA_MASK) >> QuadSPI_SR_TXEDA_SHIFT)
#define QuadSPI_BRD_SR_TXEDA(base) (BME_UBFX32(&QuadSPI_SR_REG(base), QuadSPI_SR_TXEDA_SHIFT, QuadSPI_SR_TXEDA_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SR, field TXWA[25] (RO)
 *
 * Asserted when the number of available spaces in TX buffer is greater than or
 * equal to the value give by QSPI_TBCT[WMRK].
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SR_TXWA field. */
#define QuadSPI_RD_SR_TXWA(base) ((QuadSPI_SR_REG(base) & QuadSPI_SR_TXWA_MASK) >> QuadSPI_SR_TXWA_SHIFT)
#define QuadSPI_BRD_SR_TXWA(base) (BME_UBFX32(&QuadSPI_SR_REG(base), QuadSPI_SR_TXWA_SHIFT, QuadSPI_SR_TXWA_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SR, field TXDMA[26] (RO)
 *
 * Asserted when TXFIFO fill via DMA is active i.e. DMA is requested or running
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SR_TXDMA field. */
#define QuadSPI_RD_SR_TXDMA(base) ((QuadSPI_SR_REG(base) & QuadSPI_SR_TXDMA_MASK) >> QuadSPI_SR_TXDMA_SHIFT)
#define QuadSPI_BRD_SR_TXDMA(base) (BME_UBFX32(&QuadSPI_SR_REG(base), QuadSPI_SR_TXDMA_SHIFT, QuadSPI_SR_TXDMA_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SR, field TXFULL[27] (RO)
 *
 * TX Buffer Full: Asserted when no more data can be stored.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SR_TXFULL field. */
#define QuadSPI_RD_SR_TXFULL(base) ((QuadSPI_SR_REG(base) & QuadSPI_SR_TXFULL_MASK) >> QuadSPI_SR_TXFULL_SHIFT)
#define QuadSPI_BRD_SR_TXFULL(base) (BME_UBFX32(&QuadSPI_SR_REG(base), QuadSPI_SR_TXFULL_SHIFT, QuadSPI_SR_TXFULL_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SR, field DLPSMP[31:29] (RO)
 *
 * Data learning pattern sampling point: The sampling point found by the
 * controller with the data learning pattern. This is used for DDR only. If the learning
 * fails, this field will return garbage and DLPFF bit will be set. In case of
 * Data learning with DQS this field will return the reset value as sampling point
 * match is not found in case of DQS.For details, refer to Data Learning.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SR_DLPSMP field. */
#define QuadSPI_RD_SR_DLPSMP(base) ((QuadSPI_SR_REG(base) & QuadSPI_SR_DLPSMP_MASK) >> QuadSPI_SR_DLPSMP_SHIFT)
#define QuadSPI_BRD_SR_DLPSMP(base) (BME_UBFX32(&QuadSPI_SR_REG(base), QuadSPI_SR_DLPSMP_SHIFT, QuadSPI_SR_DLPSMP_WIDTH))
/*@}*/

/*******************************************************************************
 * QuadSPI_FR - Flag Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_FR - Flag Register (RW)
 *
 * Reset value: 0x08000000U
 *
 * The QSPI_FR register provides all available flags about SFM command execution
 * and arbitration which may serve as source for the generation of interrupt
 * service requests. Note that the error flags in this register do not relate
 * directly to the execution of the transaction in the serial flash device itself but
 * only to the behavior and conditions visible in the QuadSPI module. Write:
 * Enabled Mode
 */
/*!
 * @name Constants and macros for entire QuadSPI_FR register
 */
/*@{*/
#define QuadSPI_RD_FR(base)      (QuadSPI_FR_REG(base))
#define QuadSPI_WR_FR(base, value) (QuadSPI_FR_REG(base) = (value))
#define QuadSPI_RMW_FR(base, mask, value) (QuadSPI_WR_FR(base, (QuadSPI_RD_FR(base) & ~(mask)) | (value)))
#define QuadSPI_SET_FR(base, value) (BME_OR32(&QuadSPI_FR_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_FR(base, value) (BME_AND32(&QuadSPI_FR_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_FR(base, value) (BME_XOR32(&QuadSPI_FR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_FR bitfields
 */

/*!
 * @name Register QuadSPI_FR, field TFF[0] (W1C)
 *
 * IP Command Transaction Finished Flag: Set when the QuadSPI module has
 * finished a running IP Command. If an error occurred the related error flags are
 * valid, at the latest, in the same clock cycle when the TFF flag is asserted.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_FR_TFF field. */
#define QuadSPI_RD_FR_TFF(base) ((QuadSPI_FR_REG(base) & QuadSPI_FR_TFF_MASK) >> QuadSPI_FR_TFF_SHIFT)
#define QuadSPI_BRD_FR_TFF(base) (BME_UBFX32(&QuadSPI_FR_REG(base), QuadSPI_FR_TFF_SHIFT, QuadSPI_FR_TFF_WIDTH))

/*! @brief Set the TFF field to a new value. */
#define QuadSPI_WR_FR_TFF(base, value) (QuadSPI_RMW_FR(base, (QuadSPI_FR_TFF_MASK | QuadSPI_FR_IPGEF_MASK | QuadSPI_FR_IPIEF_MASK | QuadSPI_FR_IPAEF_MASK | QuadSPI_FR_IUEF_MASK | QuadSPI_FR_ABOF_MASK | QuadSPI_FR_AIBSEF_MASK | QuadSPI_FR_AITEF_MASK | QuadSPI_FR_ABSEF_MASK | QuadSPI_FR_RBDF_MASK | QuadSPI_FR_RBOF_MASK | QuadSPI_FR_ILLINE_MASK | QuadSPI_FR_TBUF_MASK | QuadSPI_FR_TBFF_MASK | QuadSPI_FR_DLPFF_MASK), QuadSPI_FR_TFF(value)))
#define QuadSPI_BWR_FR_TFF(base, value) (BME_BFI32(&QuadSPI_FR_REG(base), ((uint32_t)(value) << QuadSPI_FR_TFF_SHIFT), QuadSPI_FR_TFF_SHIFT, QuadSPI_FR_TFF_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_FR, field IPGEF[4] (W1C)
 *
 * IP Command Trigger during AHB Grant Error Flag: Set when the following
 * condition occurs: A write access occurs to the QSPI_IPCR[SEQID] field and the
 * QSPI_SR[AHBGNT] bit is set. Any command leading to the assertion of the IPGEF flag
 * is ignored.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_FR_IPGEF field. */
#define QuadSPI_RD_FR_IPGEF(base) ((QuadSPI_FR_REG(base) & QuadSPI_FR_IPGEF_MASK) >> QuadSPI_FR_IPGEF_SHIFT)
#define QuadSPI_BRD_FR_IPGEF(base) (BME_UBFX32(&QuadSPI_FR_REG(base), QuadSPI_FR_IPGEF_SHIFT, QuadSPI_FR_IPGEF_WIDTH))

/*! @brief Set the IPGEF field to a new value. */
#define QuadSPI_WR_FR_IPGEF(base, value) (QuadSPI_RMW_FR(base, (QuadSPI_FR_IPGEF_MASK | QuadSPI_FR_TFF_MASK | QuadSPI_FR_IPIEF_MASK | QuadSPI_FR_IPAEF_MASK | QuadSPI_FR_IUEF_MASK | QuadSPI_FR_ABOF_MASK | QuadSPI_FR_AIBSEF_MASK | QuadSPI_FR_AITEF_MASK | QuadSPI_FR_ABSEF_MASK | QuadSPI_FR_RBDF_MASK | QuadSPI_FR_RBOF_MASK | QuadSPI_FR_ILLINE_MASK | QuadSPI_FR_TBUF_MASK | QuadSPI_FR_TBFF_MASK | QuadSPI_FR_DLPFF_MASK), QuadSPI_FR_IPGEF(value)))
#define QuadSPI_BWR_FR_IPGEF(base, value) (BME_BFI32(&QuadSPI_FR_REG(base), ((uint32_t)(value) << QuadSPI_FR_IPGEF_SHIFT), QuadSPI_FR_IPGEF_SHIFT, QuadSPI_FR_IPGEF_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_FR, field IPIEF[6] (W1C)
 *
 * IP Command Trigger could not be executed Error Flag. Set when the
 * QSPI_SR[IP_ACC] bit is set (i.e. an IP triggered command is currently executing) and any
 * of the following conditions occurs: Write access to the QSPI_IPCR register.
 * Any command leading to the assertion of the IPIEF flag is ignored Write access
 * to the QSPI_SFAR register. Write access to the QSPI_RBCT register.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_FR_IPIEF field. */
#define QuadSPI_RD_FR_IPIEF(base) ((QuadSPI_FR_REG(base) & QuadSPI_FR_IPIEF_MASK) >> QuadSPI_FR_IPIEF_SHIFT)
#define QuadSPI_BRD_FR_IPIEF(base) (BME_UBFX32(&QuadSPI_FR_REG(base), QuadSPI_FR_IPIEF_SHIFT, QuadSPI_FR_IPIEF_WIDTH))

/*! @brief Set the IPIEF field to a new value. */
#define QuadSPI_WR_FR_IPIEF(base, value) (QuadSPI_RMW_FR(base, (QuadSPI_FR_IPIEF_MASK | QuadSPI_FR_TFF_MASK | QuadSPI_FR_IPGEF_MASK | QuadSPI_FR_IPAEF_MASK | QuadSPI_FR_IUEF_MASK | QuadSPI_FR_ABOF_MASK | QuadSPI_FR_AIBSEF_MASK | QuadSPI_FR_AITEF_MASK | QuadSPI_FR_ABSEF_MASK | QuadSPI_FR_RBDF_MASK | QuadSPI_FR_RBOF_MASK | QuadSPI_FR_ILLINE_MASK | QuadSPI_FR_TBUF_MASK | QuadSPI_FR_TBFF_MASK | QuadSPI_FR_DLPFF_MASK), QuadSPI_FR_IPIEF(value)))
#define QuadSPI_BWR_FR_IPIEF(base, value) (BME_BFI32(&QuadSPI_FR_REG(base), ((uint32_t)(value) << QuadSPI_FR_IPIEF_SHIFT), QuadSPI_FR_IPIEF_SHIFT, QuadSPI_FR_IPIEF_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_FR, field IPAEF[7] (W1C)
 *
 * IP Command Trigger during AHB Access Error Flag. Set when the following
 * condition occurs: A write access occurs to the QSPI_IPCR[SEQID] field and the
 * QSPI_SR[AHB_ACC] bit is set. Any command leading to the assertion of the IPAEF flag
 * is ignored.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_FR_IPAEF field. */
#define QuadSPI_RD_FR_IPAEF(base) ((QuadSPI_FR_REG(base) & QuadSPI_FR_IPAEF_MASK) >> QuadSPI_FR_IPAEF_SHIFT)
#define QuadSPI_BRD_FR_IPAEF(base) (BME_UBFX32(&QuadSPI_FR_REG(base), QuadSPI_FR_IPAEF_SHIFT, QuadSPI_FR_IPAEF_WIDTH))

/*! @brief Set the IPAEF field to a new value. */
#define QuadSPI_WR_FR_IPAEF(base, value) (QuadSPI_RMW_FR(base, (QuadSPI_FR_IPAEF_MASK | QuadSPI_FR_TFF_MASK | QuadSPI_FR_IPGEF_MASK | QuadSPI_FR_IPIEF_MASK | QuadSPI_FR_IUEF_MASK | QuadSPI_FR_ABOF_MASK | QuadSPI_FR_AIBSEF_MASK | QuadSPI_FR_AITEF_MASK | QuadSPI_FR_ABSEF_MASK | QuadSPI_FR_RBDF_MASK | QuadSPI_FR_RBOF_MASK | QuadSPI_FR_ILLINE_MASK | QuadSPI_FR_TBUF_MASK | QuadSPI_FR_TBFF_MASK | QuadSPI_FR_DLPFF_MASK), QuadSPI_FR_IPAEF(value)))
#define QuadSPI_BWR_FR_IPAEF(base, value) (BME_BFI32(&QuadSPI_FR_REG(base), ((uint32_t)(value) << QuadSPI_FR_IPAEF_SHIFT), QuadSPI_FR_IPAEF_SHIFT, QuadSPI_FR_IPAEF_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_FR, field IUEF[11] (W1C)
 *
 * IP Command Usage Error Flag: Set when in parallel flash mode the execution of
 * an IP Command is started with more than one pad enabled and the sequence
 * pointed to by the sequence ID contains a WRITE or a WRITE_DDR command. Refer to
 * table for the related commands. Communication with the serial flash device is
 * terminated before the execution of WRITE/WRITE_DDR command by the QuadSPI module.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_FR_IUEF field. */
#define QuadSPI_RD_FR_IUEF(base) ((QuadSPI_FR_REG(base) & QuadSPI_FR_IUEF_MASK) >> QuadSPI_FR_IUEF_SHIFT)
#define QuadSPI_BRD_FR_IUEF(base) (BME_UBFX32(&QuadSPI_FR_REG(base), QuadSPI_FR_IUEF_SHIFT, QuadSPI_FR_IUEF_WIDTH))

/*! @brief Set the IUEF field to a new value. */
#define QuadSPI_WR_FR_IUEF(base, value) (QuadSPI_RMW_FR(base, (QuadSPI_FR_IUEF_MASK | QuadSPI_FR_TFF_MASK | QuadSPI_FR_IPGEF_MASK | QuadSPI_FR_IPIEF_MASK | QuadSPI_FR_IPAEF_MASK | QuadSPI_FR_ABOF_MASK | QuadSPI_FR_AIBSEF_MASK | QuadSPI_FR_AITEF_MASK | QuadSPI_FR_ABSEF_MASK | QuadSPI_FR_RBDF_MASK | QuadSPI_FR_RBOF_MASK | QuadSPI_FR_ILLINE_MASK | QuadSPI_FR_TBUF_MASK | QuadSPI_FR_TBFF_MASK | QuadSPI_FR_DLPFF_MASK), QuadSPI_FR_IUEF(value)))
#define QuadSPI_BWR_FR_IUEF(base, value) (BME_BFI32(&QuadSPI_FR_REG(base), ((uint32_t)(value) << QuadSPI_FR_IUEF_SHIFT), QuadSPI_FR_IUEF_SHIFT, QuadSPI_FR_IUEF_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_FR, field ABOF[12] (W1C)
 *
 * AHB Buffer Overflow Flag: Set when the size of the AHB access exceeds the
 * size of the AHB buffer. This condition can occur only if the QSPI_BUFxCR[ADATSZ]
 * field is programmed incorrectly. The AHB Command leading to this condition is
 * continued until the number of entries according to the QSPI_BUFxCR[ADATSZ]
 * field has been read from the serial flash device. The content of the AHB Buffer
 * is not changed.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_FR_ABOF field. */
#define QuadSPI_RD_FR_ABOF(base) ((QuadSPI_FR_REG(base) & QuadSPI_FR_ABOF_MASK) >> QuadSPI_FR_ABOF_SHIFT)
#define QuadSPI_BRD_FR_ABOF(base) (BME_UBFX32(&QuadSPI_FR_REG(base), QuadSPI_FR_ABOF_SHIFT, QuadSPI_FR_ABOF_WIDTH))

/*! @brief Set the ABOF field to a new value. */
#define QuadSPI_WR_FR_ABOF(base, value) (QuadSPI_RMW_FR(base, (QuadSPI_FR_ABOF_MASK | QuadSPI_FR_TFF_MASK | QuadSPI_FR_IPGEF_MASK | QuadSPI_FR_IPIEF_MASK | QuadSPI_FR_IPAEF_MASK | QuadSPI_FR_IUEF_MASK | QuadSPI_FR_AIBSEF_MASK | QuadSPI_FR_AITEF_MASK | QuadSPI_FR_ABSEF_MASK | QuadSPI_FR_RBDF_MASK | QuadSPI_FR_RBOF_MASK | QuadSPI_FR_ILLINE_MASK | QuadSPI_FR_TBUF_MASK | QuadSPI_FR_TBFF_MASK | QuadSPI_FR_DLPFF_MASK), QuadSPI_FR_ABOF(value)))
#define QuadSPI_BWR_FR_ABOF(base, value) (BME_BFI32(&QuadSPI_FR_REG(base), ((uint32_t)(value) << QuadSPI_FR_ABOF_SHIFT), QuadSPI_FR_ABOF_SHIFT, QuadSPI_FR_ABOF_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_FR, field AIBSEF[13] (W1C)
 *
 * AHB Illegal Burst Size Error Flag: Set whenever the total burst size(size x
 * beat) of an AHB transaction is greater than the prefetch data size. The
 * prefecth data size is defined by QSPI_BUFxCR[ADATSZ] or data size mentioned in the
 * sequence pointed to by the SEQID field in case ADATSZ =0. Refer to HBURST
 * Support for more details on hburst feature.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_FR_AIBSEF field. */
#define QuadSPI_RD_FR_AIBSEF(base) ((QuadSPI_FR_REG(base) & QuadSPI_FR_AIBSEF_MASK) >> QuadSPI_FR_AIBSEF_SHIFT)
#define QuadSPI_BRD_FR_AIBSEF(base) (BME_UBFX32(&QuadSPI_FR_REG(base), QuadSPI_FR_AIBSEF_SHIFT, QuadSPI_FR_AIBSEF_WIDTH))

/*! @brief Set the AIBSEF field to a new value. */
#define QuadSPI_WR_FR_AIBSEF(base, value) (QuadSPI_RMW_FR(base, (QuadSPI_FR_AIBSEF_MASK | QuadSPI_FR_TFF_MASK | QuadSPI_FR_IPGEF_MASK | QuadSPI_FR_IPIEF_MASK | QuadSPI_FR_IPAEF_MASK | QuadSPI_FR_IUEF_MASK | QuadSPI_FR_ABOF_MASK | QuadSPI_FR_AITEF_MASK | QuadSPI_FR_ABSEF_MASK | QuadSPI_FR_RBDF_MASK | QuadSPI_FR_RBOF_MASK | QuadSPI_FR_ILLINE_MASK | QuadSPI_FR_TBUF_MASK | QuadSPI_FR_TBFF_MASK | QuadSPI_FR_DLPFF_MASK), QuadSPI_FR_AIBSEF(value)))
#define QuadSPI_BWR_FR_AIBSEF(base, value) (BME_BFI32(&QuadSPI_FR_REG(base), ((uint32_t)(value) << QuadSPI_FR_AIBSEF_SHIFT), QuadSPI_FR_AIBSEF_SHIFT, QuadSPI_FR_AIBSEF_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_FR, field AITEF[14] (W1C)
 *
 * AHB Illegal transaction error flag.Set whenever there is no response
 * generated from QSPI to AHB bus in case of illegal transaction and the watchdog timer
 * expires.The timer value is taken as parameter.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_FR_AITEF field. */
#define QuadSPI_RD_FR_AITEF(base) ((QuadSPI_FR_REG(base) & QuadSPI_FR_AITEF_MASK) >> QuadSPI_FR_AITEF_SHIFT)
#define QuadSPI_BRD_FR_AITEF(base) (BME_UBFX32(&QuadSPI_FR_REG(base), QuadSPI_FR_AITEF_SHIFT, QuadSPI_FR_AITEF_WIDTH))

/*! @brief Set the AITEF field to a new value. */
#define QuadSPI_WR_FR_AITEF(base, value) (QuadSPI_RMW_FR(base, (QuadSPI_FR_AITEF_MASK | QuadSPI_FR_TFF_MASK | QuadSPI_FR_IPGEF_MASK | QuadSPI_FR_IPIEF_MASK | QuadSPI_FR_IPAEF_MASK | QuadSPI_FR_IUEF_MASK | QuadSPI_FR_ABOF_MASK | QuadSPI_FR_AIBSEF_MASK | QuadSPI_FR_ABSEF_MASK | QuadSPI_FR_RBDF_MASK | QuadSPI_FR_RBOF_MASK | QuadSPI_FR_ILLINE_MASK | QuadSPI_FR_TBUF_MASK | QuadSPI_FR_TBFF_MASK | QuadSPI_FR_DLPFF_MASK), QuadSPI_FR_AITEF(value)))
#define QuadSPI_BWR_FR_AITEF(base, value) (BME_BFI32(&QuadSPI_FR_REG(base), ((uint32_t)(value) << QuadSPI_FR_AITEF_SHIFT), QuadSPI_FR_AITEF_SHIFT, QuadSPI_FR_AITEF_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_FR, field ABSEF[15] (W1C)
 *
 * AHB Sequence Error Flag: Set when the execution of an AHB Command is started
 * with a WRITE or WRITE_DDR Command in the sequence pointed to by the
 * QSPI_BUFxCR register. (QSPI_BUFxCR implies anyone of
 * QSPI_BUF0CR/QSPI_BUF1CR/QSPI_BUF2CR/QSPI_BUF3CR.) Communication with the serial flash device is terminated before
 * the execution of WRITE/WRITE_DDR command by the QuadSPI module. The AHB bus
 * request which triggered this command is answered with an ERROR response.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_FR_ABSEF field. */
#define QuadSPI_RD_FR_ABSEF(base) ((QuadSPI_FR_REG(base) & QuadSPI_FR_ABSEF_MASK) >> QuadSPI_FR_ABSEF_SHIFT)
#define QuadSPI_BRD_FR_ABSEF(base) (BME_UBFX32(&QuadSPI_FR_REG(base), QuadSPI_FR_ABSEF_SHIFT, QuadSPI_FR_ABSEF_WIDTH))

/*! @brief Set the ABSEF field to a new value. */
#define QuadSPI_WR_FR_ABSEF(base, value) (QuadSPI_RMW_FR(base, (QuadSPI_FR_ABSEF_MASK | QuadSPI_FR_TFF_MASK | QuadSPI_FR_IPGEF_MASK | QuadSPI_FR_IPIEF_MASK | QuadSPI_FR_IPAEF_MASK | QuadSPI_FR_IUEF_MASK | QuadSPI_FR_ABOF_MASK | QuadSPI_FR_AIBSEF_MASK | QuadSPI_FR_AITEF_MASK | QuadSPI_FR_RBDF_MASK | QuadSPI_FR_RBOF_MASK | QuadSPI_FR_ILLINE_MASK | QuadSPI_FR_TBUF_MASK | QuadSPI_FR_TBFF_MASK | QuadSPI_FR_DLPFF_MASK), QuadSPI_FR_ABSEF(value)))
#define QuadSPI_BWR_FR_ABSEF(base, value) (BME_BFI32(&QuadSPI_FR_REG(base), ((uint32_t)(value) << QuadSPI_FR_ABSEF_SHIFT), QuadSPI_FR_ABSEF_SHIFT, QuadSPI_FR_ABSEF_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_FR, field RBDF[16] (W1C)
 *
 * RX Buffer Drain Flag: Will be set if the QuadSPI_SR[RXWE] status bit is
 * asserted. Writing 1 into this bit triggers one of the following actions: If the RX
 * Buffer has up to QuadSPI_RBCT[WMRK] valid entries then the flag is cleared. If
 * the RX Buffer has more than QuadSPI_RBCT[WMRK] valid entries and the
 * QuadSPI_RSER[RBDDE] bit is not set (flag driven mode) a RX Buffer POP event is
 * triggered. The flag remains set if the RX Buffer contains more than
 * QuadSPI_RBCT[WMRK] valid entries after the RX Buffer POP event is finished. The flag is cleared
 * if the RX Buffer contains less than or equal to QuadSPI_RBCT[WMRK] valid
 * entries after the RX Buffer POP event is finished. Refer to "Receive Buffer Drain
 * Interrupt or DMA Request" section in Normal Mode Interrupt and DMA Requests,
 * for details.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_FR_RBDF field. */
#define QuadSPI_RD_FR_RBDF(base) ((QuadSPI_FR_REG(base) & QuadSPI_FR_RBDF_MASK) >> QuadSPI_FR_RBDF_SHIFT)
#define QuadSPI_BRD_FR_RBDF(base) (BME_UBFX32(&QuadSPI_FR_REG(base), QuadSPI_FR_RBDF_SHIFT, QuadSPI_FR_RBDF_WIDTH))

/*! @brief Set the RBDF field to a new value. */
#define QuadSPI_WR_FR_RBDF(base, value) (QuadSPI_RMW_FR(base, (QuadSPI_FR_RBDF_MASK | QuadSPI_FR_TFF_MASK | QuadSPI_FR_IPGEF_MASK | QuadSPI_FR_IPIEF_MASK | QuadSPI_FR_IPAEF_MASK | QuadSPI_FR_IUEF_MASK | QuadSPI_FR_ABOF_MASK | QuadSPI_FR_AIBSEF_MASK | QuadSPI_FR_AITEF_MASK | QuadSPI_FR_ABSEF_MASK | QuadSPI_FR_RBOF_MASK | QuadSPI_FR_ILLINE_MASK | QuadSPI_FR_TBUF_MASK | QuadSPI_FR_TBFF_MASK | QuadSPI_FR_DLPFF_MASK), QuadSPI_FR_RBDF(value)))
#define QuadSPI_BWR_FR_RBDF(base, value) (BME_BFI32(&QuadSPI_FR_REG(base), ((uint32_t)(value) << QuadSPI_FR_RBDF_SHIFT), QuadSPI_FR_RBDF_SHIFT, QuadSPI_FR_RBDF_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_FR, field RBOF[17] (W1C)
 *
 * RX Buffer Overflow Flag: Set when not all the data read from the serial flash
 * device could be pushed into the RX Buffer. The IP Command leading to this
 * condition is continued until the number of bytes according to the
 * QSPI_IPCR[IDATSZ] field has been read from the serial flash device. The content of the RX
 * Buffer is not changed.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_FR_RBOF field. */
#define QuadSPI_RD_FR_RBOF(base) ((QuadSPI_FR_REG(base) & QuadSPI_FR_RBOF_MASK) >> QuadSPI_FR_RBOF_SHIFT)
#define QuadSPI_BRD_FR_RBOF(base) (BME_UBFX32(&QuadSPI_FR_REG(base), QuadSPI_FR_RBOF_SHIFT, QuadSPI_FR_RBOF_WIDTH))

/*! @brief Set the RBOF field to a new value. */
#define QuadSPI_WR_FR_RBOF(base, value) (QuadSPI_RMW_FR(base, (QuadSPI_FR_RBOF_MASK | QuadSPI_FR_TFF_MASK | QuadSPI_FR_IPGEF_MASK | QuadSPI_FR_IPIEF_MASK | QuadSPI_FR_IPAEF_MASK | QuadSPI_FR_IUEF_MASK | QuadSPI_FR_ABOF_MASK | QuadSPI_FR_AIBSEF_MASK | QuadSPI_FR_AITEF_MASK | QuadSPI_FR_ABSEF_MASK | QuadSPI_FR_RBDF_MASK | QuadSPI_FR_ILLINE_MASK | QuadSPI_FR_TBUF_MASK | QuadSPI_FR_TBFF_MASK | QuadSPI_FR_DLPFF_MASK), QuadSPI_FR_RBOF(value)))
#define QuadSPI_BWR_FR_RBOF(base, value) (BME_BFI32(&QuadSPI_FR_REG(base), ((uint32_t)(value) << QuadSPI_FR_RBOF_SHIFT), QuadSPI_FR_RBOF_SHIFT, QuadSPI_FR_RBOF_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_FR, field ILLINE[23] (W1C)
 *
 * Illegal Instruction Error Flag: Set when an illegal instruction is
 * encountered by the controller in any of the sequences. Refer to for a list of legal
 * instructions.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_FR_ILLINE field. */
#define QuadSPI_RD_FR_ILLINE(base) ((QuadSPI_FR_REG(base) & QuadSPI_FR_ILLINE_MASK) >> QuadSPI_FR_ILLINE_SHIFT)
#define QuadSPI_BRD_FR_ILLINE(base) (BME_UBFX32(&QuadSPI_FR_REG(base), QuadSPI_FR_ILLINE_SHIFT, QuadSPI_FR_ILLINE_WIDTH))

/*! @brief Set the ILLINE field to a new value. */
#define QuadSPI_WR_FR_ILLINE(base, value) (QuadSPI_RMW_FR(base, (QuadSPI_FR_ILLINE_MASK | QuadSPI_FR_TFF_MASK | QuadSPI_FR_IPGEF_MASK | QuadSPI_FR_IPIEF_MASK | QuadSPI_FR_IPAEF_MASK | QuadSPI_FR_IUEF_MASK | QuadSPI_FR_ABOF_MASK | QuadSPI_FR_AIBSEF_MASK | QuadSPI_FR_AITEF_MASK | QuadSPI_FR_ABSEF_MASK | QuadSPI_FR_RBDF_MASK | QuadSPI_FR_RBOF_MASK | QuadSPI_FR_TBUF_MASK | QuadSPI_FR_TBFF_MASK | QuadSPI_FR_DLPFF_MASK), QuadSPI_FR_ILLINE(value)))
#define QuadSPI_BWR_FR_ILLINE(base, value) (BME_BFI32(&QuadSPI_FR_REG(base), ((uint32_t)(value) << QuadSPI_FR_ILLINE_SHIFT), QuadSPI_FR_ILLINE_SHIFT, QuadSPI_FR_ILLINE_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_FR, field TBUF[26] (W1C)
 *
 * TX Buffer Underrun Flag: Set when the module tried to pull data although TX
 * Buffer was emptyor the buffer contains less than 128bits of data. The
 * application must ensure that the buffer never goes empty during a transaction expect
 * for the last data fetch. The IP Command leading to the TX Buffer underrun is
 * continued (data sent to the serial flash device is all F in case of valid tx
 * underrun. The application must clear the TX Buffer in response to this event by
 * writing a 1 into the QSPI_MCR[CLR_TXF] bit.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_FR_TBUF field. */
#define QuadSPI_RD_FR_TBUF(base) ((QuadSPI_FR_REG(base) & QuadSPI_FR_TBUF_MASK) >> QuadSPI_FR_TBUF_SHIFT)
#define QuadSPI_BRD_FR_TBUF(base) (BME_UBFX32(&QuadSPI_FR_REG(base), QuadSPI_FR_TBUF_SHIFT, QuadSPI_FR_TBUF_WIDTH))

/*! @brief Set the TBUF field to a new value. */
#define QuadSPI_WR_FR_TBUF(base, value) (QuadSPI_RMW_FR(base, (QuadSPI_FR_TBUF_MASK | QuadSPI_FR_TFF_MASK | QuadSPI_FR_IPGEF_MASK | QuadSPI_FR_IPIEF_MASK | QuadSPI_FR_IPAEF_MASK | QuadSPI_FR_IUEF_MASK | QuadSPI_FR_ABOF_MASK | QuadSPI_FR_AIBSEF_MASK | QuadSPI_FR_AITEF_MASK | QuadSPI_FR_ABSEF_MASK | QuadSPI_FR_RBDF_MASK | QuadSPI_FR_RBOF_MASK | QuadSPI_FR_ILLINE_MASK | QuadSPI_FR_TBFF_MASK | QuadSPI_FR_DLPFF_MASK), QuadSPI_FR_TBUF(value)))
#define QuadSPI_BWR_FR_TBUF(base, value) (BME_BFI32(&QuadSPI_FR_REG(base), ((uint32_t)(value) << QuadSPI_FR_TBUF_SHIFT), QuadSPI_FR_TBUF_SHIFT, QuadSPI_FR_TBUF_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_FR, field TBFF[27] (W1C)
 *
 * TX Buffer Fill Flag: Before writing to the TX buffer, this bit should be
 * cleared. Then this bit has to be read back. If the bit is set, the TX Buffer can
 * take more data. If the bit remains cleared, the TX buffer is full. Refer to Tx
 * Buffer Operation for details.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_FR_TBFF field. */
#define QuadSPI_RD_FR_TBFF(base) ((QuadSPI_FR_REG(base) & QuadSPI_FR_TBFF_MASK) >> QuadSPI_FR_TBFF_SHIFT)
#define QuadSPI_BRD_FR_TBFF(base) (BME_UBFX32(&QuadSPI_FR_REG(base), QuadSPI_FR_TBFF_SHIFT, QuadSPI_FR_TBFF_WIDTH))

/*! @brief Set the TBFF field to a new value. */
#define QuadSPI_WR_FR_TBFF(base, value) (QuadSPI_RMW_FR(base, (QuadSPI_FR_TBFF_MASK | QuadSPI_FR_TFF_MASK | QuadSPI_FR_IPGEF_MASK | QuadSPI_FR_IPIEF_MASK | QuadSPI_FR_IPAEF_MASK | QuadSPI_FR_IUEF_MASK | QuadSPI_FR_ABOF_MASK | QuadSPI_FR_AIBSEF_MASK | QuadSPI_FR_AITEF_MASK | QuadSPI_FR_ABSEF_MASK | QuadSPI_FR_RBDF_MASK | QuadSPI_FR_RBOF_MASK | QuadSPI_FR_ILLINE_MASK | QuadSPI_FR_TBUF_MASK | QuadSPI_FR_DLPFF_MASK), QuadSPI_FR_TBFF(value)))
#define QuadSPI_BWR_FR_TBFF(base, value) (BME_BFI32(&QuadSPI_FR_REG(base), ((uint32_t)(value) << QuadSPI_FR_TBFF_SHIFT), QuadSPI_FR_TBFF_SHIFT, QuadSPI_FR_TBFF_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_FR, field DLPFF[31] (W1C)
 *
 * Data Learning Pattern Failure Flag: Set when DATA_LEARN instruction was
 * encountered in a sequence but no sampling point was found for the data learning
 * patternin case only 8 bit data learning is requested for non DQS mode. The
 * controller automatically starts sampling using the value in QSPI_SMPR[DDRSMP]. If
 * more than 8 bits data learning are requested with QSPI_MCR[DQS_EN] set to 0, and
 * the sampling point found after first 8 bit match doesn't remain same for the
 * whole instruction duration, this flag is set. In case of Data learn with DQS
 * this flag is set whenever the incoming data from flash on DQS edges doesn't
 * match the pattern in QSPI_DLPR. For details, refer to Data Learning.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_FR_DLPFF field. */
#define QuadSPI_RD_FR_DLPFF(base) ((QuadSPI_FR_REG(base) & QuadSPI_FR_DLPFF_MASK) >> QuadSPI_FR_DLPFF_SHIFT)
#define QuadSPI_BRD_FR_DLPFF(base) (BME_UBFX32(&QuadSPI_FR_REG(base), QuadSPI_FR_DLPFF_SHIFT, QuadSPI_FR_DLPFF_WIDTH))

/*! @brief Set the DLPFF field to a new value. */
#define QuadSPI_WR_FR_DLPFF(base, value) (QuadSPI_RMW_FR(base, (QuadSPI_FR_DLPFF_MASK | QuadSPI_FR_TFF_MASK | QuadSPI_FR_IPGEF_MASK | QuadSPI_FR_IPIEF_MASK | QuadSPI_FR_IPAEF_MASK | QuadSPI_FR_IUEF_MASK | QuadSPI_FR_ABOF_MASK | QuadSPI_FR_AIBSEF_MASK | QuadSPI_FR_AITEF_MASK | QuadSPI_FR_ABSEF_MASK | QuadSPI_FR_RBDF_MASK | QuadSPI_FR_RBOF_MASK | QuadSPI_FR_ILLINE_MASK | QuadSPI_FR_TBUF_MASK | QuadSPI_FR_TBFF_MASK), QuadSPI_FR_DLPFF(value)))
#define QuadSPI_BWR_FR_DLPFF(base, value) (BME_BFI32(&QuadSPI_FR_REG(base), ((uint32_t)(value) << QuadSPI_FR_DLPFF_SHIFT), QuadSPI_FR_DLPFF_SHIFT, QuadSPI_FR_DLPFF_WIDTH))
/*@}*/

/*******************************************************************************
 * QuadSPI_RSER - Interrupt and DMA Request Select and Enable Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_RSER - Interrupt and DMA Request Select and Enable Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The QuadSPI_RSER register provides enables and selectors for the interrupts
 * in the QuadSPI module. Each flag of the QuadSPI_FR register enabled as source
 * for an interrupt prevents the QuadSPI module from entering Stop Mode or Module
 * Disable Mode when this flag is set. Write: Anytime
 */
/*!
 * @name Constants and macros for entire QuadSPI_RSER register
 */
/*@{*/
#define QuadSPI_RD_RSER(base)    (QuadSPI_RSER_REG(base))
#define QuadSPI_WR_RSER(base, value) (QuadSPI_RSER_REG(base) = (value))
#define QuadSPI_RMW_RSER(base, mask, value) (QuadSPI_WR_RSER(base, (QuadSPI_RD_RSER(base) & ~(mask)) | (value)))
#define QuadSPI_SET_RSER(base, value) (BME_OR32(&QuadSPI_RSER_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_RSER(base, value) (BME_AND32(&QuadSPI_RSER_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_RSER(base, value) (BME_XOR32(&QuadSPI_RSER_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_RSER bitfields
 */

/*!
 * @name Register QuadSPI_RSER, field TFIE[0] (RW)
 *
 * Transaction Finished Interrupt Enable
 *
 * Values:
 * - 0b0 - No TFF interrupt will be generated
 * - 0b1 - TFF interrupt will be generated
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_RSER_TFIE field. */
#define QuadSPI_RD_RSER_TFIE(base) ((QuadSPI_RSER_REG(base) & QuadSPI_RSER_TFIE_MASK) >> QuadSPI_RSER_TFIE_SHIFT)
#define QuadSPI_BRD_RSER_TFIE(base) (BME_UBFX32(&QuadSPI_RSER_REG(base), QuadSPI_RSER_TFIE_SHIFT, QuadSPI_RSER_TFIE_WIDTH))

/*! @brief Set the TFIE field to a new value. */
#define QuadSPI_WR_RSER_TFIE(base, value) (QuadSPI_RMW_RSER(base, QuadSPI_RSER_TFIE_MASK, QuadSPI_RSER_TFIE(value)))
#define QuadSPI_BWR_RSER_TFIE(base, value) (BME_BFI32(&QuadSPI_RSER_REG(base), ((uint32_t)(value) << QuadSPI_RSER_TFIE_SHIFT), QuadSPI_RSER_TFIE_SHIFT, QuadSPI_RSER_TFIE_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_RSER, field IPGEIE[4] (RW)
 *
 * IP Command Trigger during AHB Grant Error Interrupt Enable
 *
 * Values:
 * - 0b0 - No IPGEF interrupt will be generated
 * - 0b1 - IPGEF interrupt will be generated
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_RSER_IPGEIE field. */
#define QuadSPI_RD_RSER_IPGEIE(base) ((QuadSPI_RSER_REG(base) & QuadSPI_RSER_IPGEIE_MASK) >> QuadSPI_RSER_IPGEIE_SHIFT)
#define QuadSPI_BRD_RSER_IPGEIE(base) (BME_UBFX32(&QuadSPI_RSER_REG(base), QuadSPI_RSER_IPGEIE_SHIFT, QuadSPI_RSER_IPGEIE_WIDTH))

/*! @brief Set the IPGEIE field to a new value. */
#define QuadSPI_WR_RSER_IPGEIE(base, value) (QuadSPI_RMW_RSER(base, QuadSPI_RSER_IPGEIE_MASK, QuadSPI_RSER_IPGEIE(value)))
#define QuadSPI_BWR_RSER_IPGEIE(base, value) (BME_BFI32(&QuadSPI_RSER_REG(base), ((uint32_t)(value) << QuadSPI_RSER_IPGEIE_SHIFT), QuadSPI_RSER_IPGEIE_SHIFT, QuadSPI_RSER_IPGEIE_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_RSER, field IPIEIE[6] (RW)
 *
 * IP Command Trigger during IP Access Error Interrupt Enable
 *
 * Values:
 * - 0b0 - No IPIEF interrupt will be generated
 * - 0b1 - IPIEF interrupt will be generated
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_RSER_IPIEIE field. */
#define QuadSPI_RD_RSER_IPIEIE(base) ((QuadSPI_RSER_REG(base) & QuadSPI_RSER_IPIEIE_MASK) >> QuadSPI_RSER_IPIEIE_SHIFT)
#define QuadSPI_BRD_RSER_IPIEIE(base) (BME_UBFX32(&QuadSPI_RSER_REG(base), QuadSPI_RSER_IPIEIE_SHIFT, QuadSPI_RSER_IPIEIE_WIDTH))

/*! @brief Set the IPIEIE field to a new value. */
#define QuadSPI_WR_RSER_IPIEIE(base, value) (QuadSPI_RMW_RSER(base, QuadSPI_RSER_IPIEIE_MASK, QuadSPI_RSER_IPIEIE(value)))
#define QuadSPI_BWR_RSER_IPIEIE(base, value) (BME_BFI32(&QuadSPI_RSER_REG(base), ((uint32_t)(value) << QuadSPI_RSER_IPIEIE_SHIFT), QuadSPI_RSER_IPIEIE_SHIFT, QuadSPI_RSER_IPIEIE_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_RSER, field IPAEIE[7] (RW)
 *
 * IP Command Trigger during AHB Access Error Interrupt Enable
 *
 * Values:
 * - 0b0 - No IPAEF interrupt will be generated
 * - 0b1 - IPAEF interrupt will be generated
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_RSER_IPAEIE field. */
#define QuadSPI_RD_RSER_IPAEIE(base) ((QuadSPI_RSER_REG(base) & QuadSPI_RSER_IPAEIE_MASK) >> QuadSPI_RSER_IPAEIE_SHIFT)
#define QuadSPI_BRD_RSER_IPAEIE(base) (BME_UBFX32(&QuadSPI_RSER_REG(base), QuadSPI_RSER_IPAEIE_SHIFT, QuadSPI_RSER_IPAEIE_WIDTH))

/*! @brief Set the IPAEIE field to a new value. */
#define QuadSPI_WR_RSER_IPAEIE(base, value) (QuadSPI_RMW_RSER(base, QuadSPI_RSER_IPAEIE_MASK, QuadSPI_RSER_IPAEIE(value)))
#define QuadSPI_BWR_RSER_IPAEIE(base, value) (BME_BFI32(&QuadSPI_RSER_REG(base), ((uint32_t)(value) << QuadSPI_RSER_IPAEIE_SHIFT), QuadSPI_RSER_IPAEIE_SHIFT, QuadSPI_RSER_IPAEIE_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_RSER, field IUEIE[11] (RW)
 *
 * IP Command Usage Error Interrupt Enable
 *
 * Values:
 * - 0b0 - No IUEF interrupt will be generated
 * - 0b1 - IUEF interrupt will be generated
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_RSER_IUEIE field. */
#define QuadSPI_RD_RSER_IUEIE(base) ((QuadSPI_RSER_REG(base) & QuadSPI_RSER_IUEIE_MASK) >> QuadSPI_RSER_IUEIE_SHIFT)
#define QuadSPI_BRD_RSER_IUEIE(base) (BME_UBFX32(&QuadSPI_RSER_REG(base), QuadSPI_RSER_IUEIE_SHIFT, QuadSPI_RSER_IUEIE_WIDTH))

/*! @brief Set the IUEIE field to a new value. */
#define QuadSPI_WR_RSER_IUEIE(base, value) (QuadSPI_RMW_RSER(base, QuadSPI_RSER_IUEIE_MASK, QuadSPI_RSER_IUEIE(value)))
#define QuadSPI_BWR_RSER_IUEIE(base, value) (BME_BFI32(&QuadSPI_RSER_REG(base), ((uint32_t)(value) << QuadSPI_RSER_IUEIE_SHIFT), QuadSPI_RSER_IUEIE_SHIFT, QuadSPI_RSER_IUEIE_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_RSER, field ABOIE[12] (RW)
 *
 * AHB Buffer Overflow Interrupt Enable
 *
 * Values:
 * - 0b0 - No ABOF interrupt will be generated
 * - 0b1 - ABOF interrupt will be generated
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_RSER_ABOIE field. */
#define QuadSPI_RD_RSER_ABOIE(base) ((QuadSPI_RSER_REG(base) & QuadSPI_RSER_ABOIE_MASK) >> QuadSPI_RSER_ABOIE_SHIFT)
#define QuadSPI_BRD_RSER_ABOIE(base) (BME_UBFX32(&QuadSPI_RSER_REG(base), QuadSPI_RSER_ABOIE_SHIFT, QuadSPI_RSER_ABOIE_WIDTH))

/*! @brief Set the ABOIE field to a new value. */
#define QuadSPI_WR_RSER_ABOIE(base, value) (QuadSPI_RMW_RSER(base, QuadSPI_RSER_ABOIE_MASK, QuadSPI_RSER_ABOIE(value)))
#define QuadSPI_BWR_RSER_ABOIE(base, value) (BME_BFI32(&QuadSPI_RSER_REG(base), ((uint32_t)(value) << QuadSPI_RSER_ABOIE_SHIFT), QuadSPI_RSER_ABOIE_SHIFT, QuadSPI_RSER_ABOIE_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_RSER, field AIBSIE[13] (RW)
 *
 * AHB Illegal Burst Size Interrupt Enable
 *
 * Values:
 * - 0b0 - No AIBSEF interrupt will be generated
 * - 0b1 - AIBSEF interrupt will be generated
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_RSER_AIBSIE field. */
#define QuadSPI_RD_RSER_AIBSIE(base) ((QuadSPI_RSER_REG(base) & QuadSPI_RSER_AIBSIE_MASK) >> QuadSPI_RSER_AIBSIE_SHIFT)
#define QuadSPI_BRD_RSER_AIBSIE(base) (BME_UBFX32(&QuadSPI_RSER_REG(base), QuadSPI_RSER_AIBSIE_SHIFT, QuadSPI_RSER_AIBSIE_WIDTH))

/*! @brief Set the AIBSIE field to a new value. */
#define QuadSPI_WR_RSER_AIBSIE(base, value) (QuadSPI_RMW_RSER(base, QuadSPI_RSER_AIBSIE_MASK, QuadSPI_RSER_AIBSIE(value)))
#define QuadSPI_BWR_RSER_AIBSIE(base, value) (BME_BFI32(&QuadSPI_RSER_REG(base), ((uint32_t)(value) << QuadSPI_RSER_AIBSIE_SHIFT), QuadSPI_RSER_AIBSIE_SHIFT, QuadSPI_RSER_AIBSIE_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_RSER, field AITIE[14] (RW)
 *
 * AHB Illegal transaction interrupt enable.
 *
 * Values:
 * - 0b0 - No AITEF interrupt will be generated
 * - 0b1 - AITEF interrupt will be generated
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_RSER_AITIE field. */
#define QuadSPI_RD_RSER_AITIE(base) ((QuadSPI_RSER_REG(base) & QuadSPI_RSER_AITIE_MASK) >> QuadSPI_RSER_AITIE_SHIFT)
#define QuadSPI_BRD_RSER_AITIE(base) (BME_UBFX32(&QuadSPI_RSER_REG(base), QuadSPI_RSER_AITIE_SHIFT, QuadSPI_RSER_AITIE_WIDTH))

/*! @brief Set the AITIE field to a new value. */
#define QuadSPI_WR_RSER_AITIE(base, value) (QuadSPI_RMW_RSER(base, QuadSPI_RSER_AITIE_MASK, QuadSPI_RSER_AITIE(value)))
#define QuadSPI_BWR_RSER_AITIE(base, value) (BME_BFI32(&QuadSPI_RSER_REG(base), ((uint32_t)(value) << QuadSPI_RSER_AITIE_SHIFT), QuadSPI_RSER_AITIE_SHIFT, QuadSPI_RSER_AITIE_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_RSER, field ABSEIE[15] (RW)
 *
 * AHB Sequence Error Interrupt Enable: Triggered by ABSEF flags of QSPI_FR
 *
 * Values:
 * - 0b0 - No ABSEF interrupt will be generated
 * - 0b1 - ABSEF interrupt will be generated
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_RSER_ABSEIE field. */
#define QuadSPI_RD_RSER_ABSEIE(base) ((QuadSPI_RSER_REG(base) & QuadSPI_RSER_ABSEIE_MASK) >> QuadSPI_RSER_ABSEIE_SHIFT)
#define QuadSPI_BRD_RSER_ABSEIE(base) (BME_UBFX32(&QuadSPI_RSER_REG(base), QuadSPI_RSER_ABSEIE_SHIFT, QuadSPI_RSER_ABSEIE_WIDTH))

/*! @brief Set the ABSEIE field to a new value. */
#define QuadSPI_WR_RSER_ABSEIE(base, value) (QuadSPI_RMW_RSER(base, QuadSPI_RSER_ABSEIE_MASK, QuadSPI_RSER_ABSEIE(value)))
#define QuadSPI_BWR_RSER_ABSEIE(base, value) (BME_BFI32(&QuadSPI_RSER_REG(base), ((uint32_t)(value) << QuadSPI_RSER_ABSEIE_SHIFT), QuadSPI_RSER_ABSEIE_SHIFT, QuadSPI_RSER_ABSEIE_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_RSER, field RBDIE[16] (RW)
 *
 * RX Buffer Drain Interrupt Enable: Enables generation of IRQ requests for RX
 * Buffer Drain. When this bit is set the interrupt is asserted as long as the
 * QuadSPI_SR[RBDF] flag is set.
 *
 * Values:
 * - 0b0 - No RBDF interrupt will be generated
 * - 0b1 - RBDF Interrupt will be generated
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_RSER_RBDIE field. */
#define QuadSPI_RD_RSER_RBDIE(base) ((QuadSPI_RSER_REG(base) & QuadSPI_RSER_RBDIE_MASK) >> QuadSPI_RSER_RBDIE_SHIFT)
#define QuadSPI_BRD_RSER_RBDIE(base) (BME_UBFX32(&QuadSPI_RSER_REG(base), QuadSPI_RSER_RBDIE_SHIFT, QuadSPI_RSER_RBDIE_WIDTH))

/*! @brief Set the RBDIE field to a new value. */
#define QuadSPI_WR_RSER_RBDIE(base, value) (QuadSPI_RMW_RSER(base, QuadSPI_RSER_RBDIE_MASK, QuadSPI_RSER_RBDIE(value)))
#define QuadSPI_BWR_RSER_RBDIE(base, value) (BME_BFI32(&QuadSPI_RSER_REG(base), ((uint32_t)(value) << QuadSPI_RSER_RBDIE_SHIFT), QuadSPI_RSER_RBDIE_SHIFT, QuadSPI_RSER_RBDIE_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_RSER, field RBOIE[17] (RW)
 *
 * RX Buffer Overflow Interrupt Enable
 *
 * Values:
 * - 0b0 - No RBOF interrupt will be generated
 * - 0b1 - RBOF interrupt will be generated
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_RSER_RBOIE field. */
#define QuadSPI_RD_RSER_RBOIE(base) ((QuadSPI_RSER_REG(base) & QuadSPI_RSER_RBOIE_MASK) >> QuadSPI_RSER_RBOIE_SHIFT)
#define QuadSPI_BRD_RSER_RBOIE(base) (BME_UBFX32(&QuadSPI_RSER_REG(base), QuadSPI_RSER_RBOIE_SHIFT, QuadSPI_RSER_RBOIE_WIDTH))

/*! @brief Set the RBOIE field to a new value. */
#define QuadSPI_WR_RSER_RBOIE(base, value) (QuadSPI_RMW_RSER(base, QuadSPI_RSER_RBOIE_MASK, QuadSPI_RSER_RBOIE(value)))
#define QuadSPI_BWR_RSER_RBOIE(base, value) (BME_BFI32(&QuadSPI_RSER_REG(base), ((uint32_t)(value) << QuadSPI_RSER_RBOIE_SHIFT), QuadSPI_RSER_RBOIE_SHIFT, QuadSPI_RSER_RBOIE_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_RSER, field RBDDE[21] (RW)
 *
 * RX Buffer Drain DMA Enable: Enables generation of DMA requests for RX Buffer
 * Drain. When this bit is set DMA requests are generated as long as the
 * QSPI_SR[RXWE] status bit is set.
 *
 * Values:
 * - 0b0 - No DMA request will be generated
 * - 0b1 - DMA request will be generated
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_RSER_RBDDE field. */
#define QuadSPI_RD_RSER_RBDDE(base) ((QuadSPI_RSER_REG(base) & QuadSPI_RSER_RBDDE_MASK) >> QuadSPI_RSER_RBDDE_SHIFT)
#define QuadSPI_BRD_RSER_RBDDE(base) (BME_UBFX32(&QuadSPI_RSER_REG(base), QuadSPI_RSER_RBDDE_SHIFT, QuadSPI_RSER_RBDDE_WIDTH))

/*! @brief Set the RBDDE field to a new value. */
#define QuadSPI_WR_RSER_RBDDE(base, value) (QuadSPI_RMW_RSER(base, QuadSPI_RSER_RBDDE_MASK, QuadSPI_RSER_RBDDE(value)))
#define QuadSPI_BWR_RSER_RBDDE(base, value) (BME_BFI32(&QuadSPI_RSER_REG(base), ((uint32_t)(value) << QuadSPI_RSER_RBDDE_SHIFT), QuadSPI_RSER_RBDDE_SHIFT, QuadSPI_RSER_RBDDE_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_RSER, field ILLINIE[23] (RW)
 *
 * Illegal Instruction Error Interrupt Enable. Triggered by ILLINE flag in
 * QSPI_FR
 *
 * Values:
 * - 0b0 - No ILLINE interrupt will be generated
 * - 0b1 - ILLINE interrupt will be generated
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_RSER_ILLINIE field. */
#define QuadSPI_RD_RSER_ILLINIE(base) ((QuadSPI_RSER_REG(base) & QuadSPI_RSER_ILLINIE_MASK) >> QuadSPI_RSER_ILLINIE_SHIFT)
#define QuadSPI_BRD_RSER_ILLINIE(base) (BME_UBFX32(&QuadSPI_RSER_REG(base), QuadSPI_RSER_ILLINIE_SHIFT, QuadSPI_RSER_ILLINIE_WIDTH))

/*! @brief Set the ILLINIE field to a new value. */
#define QuadSPI_WR_RSER_ILLINIE(base, value) (QuadSPI_RMW_RSER(base, QuadSPI_RSER_ILLINIE_MASK, QuadSPI_RSER_ILLINIE(value)))
#define QuadSPI_BWR_RSER_ILLINIE(base, value) (BME_BFI32(&QuadSPI_RSER_REG(base), ((uint32_t)(value) << QuadSPI_RSER_ILLINIE_SHIFT), QuadSPI_RSER_ILLINIE_SHIFT, QuadSPI_RSER_ILLINIE_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_RSER, field TBFDE[25] (RW)
 *
 * Enables generation of DMA requests for TX Buffer fill. When this is set DMA
 * requests are generated as long as the QSPI_SR[TXWA] status bit is set.
 *
 * Values:
 * - 0b0 - No DMA request will be generated
 * - 0b1 - DMA request will be generated
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_RSER_TBFDE field. */
#define QuadSPI_RD_RSER_TBFDE(base) ((QuadSPI_RSER_REG(base) & QuadSPI_RSER_TBFDE_MASK) >> QuadSPI_RSER_TBFDE_SHIFT)
#define QuadSPI_BRD_RSER_TBFDE(base) (BME_UBFX32(&QuadSPI_RSER_REG(base), QuadSPI_RSER_TBFDE_SHIFT, QuadSPI_RSER_TBFDE_WIDTH))

/*! @brief Set the TBFDE field to a new value. */
#define QuadSPI_WR_RSER_TBFDE(base, value) (QuadSPI_RMW_RSER(base, QuadSPI_RSER_TBFDE_MASK, QuadSPI_RSER_TBFDE(value)))
#define QuadSPI_BWR_RSER_TBFDE(base, value) (BME_BFI32(&QuadSPI_RSER_REG(base), ((uint32_t)(value) << QuadSPI_RSER_TBFDE_SHIFT), QuadSPI_RSER_TBFDE_SHIFT, QuadSPI_RSER_TBFDE_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_RSER, field TBUIE[26] (RW)
 *
 * TX Buffer Underrun Interrupt Enable
 *
 * Values:
 * - 0b0 - No TBUF interrupt will be generated
 * - 0b1 - TBUF interrupt will be generated
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_RSER_TBUIE field. */
#define QuadSPI_RD_RSER_TBUIE(base) ((QuadSPI_RSER_REG(base) & QuadSPI_RSER_TBUIE_MASK) >> QuadSPI_RSER_TBUIE_SHIFT)
#define QuadSPI_BRD_RSER_TBUIE(base) (BME_UBFX32(&QuadSPI_RSER_REG(base), QuadSPI_RSER_TBUIE_SHIFT, QuadSPI_RSER_TBUIE_WIDTH))

/*! @brief Set the TBUIE field to a new value. */
#define QuadSPI_WR_RSER_TBUIE(base, value) (QuadSPI_RMW_RSER(base, QuadSPI_RSER_TBUIE_MASK, QuadSPI_RSER_TBUIE(value)))
#define QuadSPI_BWR_RSER_TBUIE(base, value) (BME_BFI32(&QuadSPI_RSER_REG(base), ((uint32_t)(value) << QuadSPI_RSER_TBUIE_SHIFT), QuadSPI_RSER_TBUIE_SHIFT, QuadSPI_RSER_TBUIE_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_RSER, field TBFIE[27] (RW)
 *
 * TX Buffer Fill Interrupt Enable
 *
 * Values:
 * - 0b0 - No TBFF interrupt will be generated
 * - 0b1 - TBFF interrupt will be generated
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_RSER_TBFIE field. */
#define QuadSPI_RD_RSER_TBFIE(base) ((QuadSPI_RSER_REG(base) & QuadSPI_RSER_TBFIE_MASK) >> QuadSPI_RSER_TBFIE_SHIFT)
#define QuadSPI_BRD_RSER_TBFIE(base) (BME_UBFX32(&QuadSPI_RSER_REG(base), QuadSPI_RSER_TBFIE_SHIFT, QuadSPI_RSER_TBFIE_WIDTH))

/*! @brief Set the TBFIE field to a new value. */
#define QuadSPI_WR_RSER_TBFIE(base, value) (QuadSPI_RMW_RSER(base, QuadSPI_RSER_TBFIE_MASK, QuadSPI_RSER_TBFIE(value)))
#define QuadSPI_BWR_RSER_TBFIE(base, value) (BME_BFI32(&QuadSPI_RSER_REG(base), ((uint32_t)(value) << QuadSPI_RSER_TBFIE_SHIFT), QuadSPI_RSER_TBFIE_SHIFT, QuadSPI_RSER_TBFIE_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_RSER, field DLPFIE[31] (RW)
 *
 * Data Learning Pattern Failure Interrupt enable . Triggered by DLPFF flag in
 * QSPI_FR register
 *
 * Values:
 * - 0b0 - No DLPFF interrupt will be generated
 * - 0b1 - DLPFF interrupt will be generated
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_RSER_DLPFIE field. */
#define QuadSPI_RD_RSER_DLPFIE(base) ((QuadSPI_RSER_REG(base) & QuadSPI_RSER_DLPFIE_MASK) >> QuadSPI_RSER_DLPFIE_SHIFT)
#define QuadSPI_BRD_RSER_DLPFIE(base) (BME_UBFX32(&QuadSPI_RSER_REG(base), QuadSPI_RSER_DLPFIE_SHIFT, QuadSPI_RSER_DLPFIE_WIDTH))

/*! @brief Set the DLPFIE field to a new value. */
#define QuadSPI_WR_RSER_DLPFIE(base, value) (QuadSPI_RMW_RSER(base, QuadSPI_RSER_DLPFIE_MASK, QuadSPI_RSER_DLPFIE(value)))
#define QuadSPI_BWR_RSER_DLPFIE(base, value) (BME_BFI32(&QuadSPI_RSER_REG(base), ((uint32_t)(value) << QuadSPI_RSER_DLPFIE_SHIFT), QuadSPI_RSER_DLPFIE_SHIFT, QuadSPI_RSER_DLPFIE_WIDTH))
/*@}*/

/*******************************************************************************
 * QuadSPI_SPNDST - Sequence Suspend Status Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_SPNDST - Sequence Suspend Status Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The sequence suspend status register provides information specific to any
 * suspended sequence. An AHB sequence may be suspended when a high priority AHB
 * master makes an access before the AHB sequence completes the data transfer
 * requested.
 */
/*!
 * @name Constants and macros for entire QuadSPI_SPNDST register
 */
/*@{*/
#define QuadSPI_RD_SPNDST(base)  (QuadSPI_SPNDST_REG(base))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_SPNDST bitfields
 */

/*!
 * @name Register QuadSPI_SPNDST, field SUSPND[0] (RO)
 *
 * When set, it signifies that a sequence is in suspended state
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SPNDST_SUSPND field. */
#define QuadSPI_RD_SPNDST_SUSPND(base) ((QuadSPI_SPNDST_REG(base) & QuadSPI_SPNDST_SUSPND_MASK) >> QuadSPI_SPNDST_SUSPND_SHIFT)
#define QuadSPI_BRD_SPNDST_SUSPND(base) (BME_UBFX32(&QuadSPI_SPNDST_REG(base), QuadSPI_SPNDST_SUSPND_SHIFT, QuadSPI_SPNDST_SUSPND_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SPNDST, field SPDBUF[7:6] (RO)
 *
 * Suspended Buffer: Provides the suspended buffer number. Valid only when
 * SUSPND is set to 1'b1
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SPNDST_SPDBUF field. */
#define QuadSPI_RD_SPNDST_SPDBUF(base) ((QuadSPI_SPNDST_REG(base) & QuadSPI_SPNDST_SPDBUF_MASK) >> QuadSPI_SPNDST_SPDBUF_SHIFT)
#define QuadSPI_BRD_SPNDST_SPDBUF(base) (BME_UBFX32(&QuadSPI_SPNDST_REG(base), QuadSPI_SPNDST_SPDBUF_SHIFT, QuadSPI_SPNDST_SPDBUF_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SPNDST, field DATLFT[14:9] (RO)
 *
 * Data left: Provides information about the amount of data left to be read in
 * the suspended sequence. Valid only when SUSPND is set to 1'b1. Value in terms
 * of 64 bits or 8 bytes
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SPNDST_DATLFT field. */
#define QuadSPI_RD_SPNDST_DATLFT(base) ((QuadSPI_SPNDST_REG(base) & QuadSPI_SPNDST_DATLFT_MASK) >> QuadSPI_SPNDST_DATLFT_SHIFT)
#define QuadSPI_BRD_SPNDST_DATLFT(base) (BME_UBFX32(&QuadSPI_SPNDST_REG(base), QuadSPI_SPNDST_DATLFT_SHIFT, QuadSPI_SPNDST_DATLFT_WIDTH))
/*@}*/

/*******************************************************************************
 * QuadSPI_SPTRCLR - Sequence Pointer Clear Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_SPTRCLR - Sequence Pointer Clear Register (WO)
 *
 * Reset value: 0x00000000U
 *
 * The sequence pointer clear register provides bits to reset the IP and Buffer
 * sequence pointers. The sequence pointer contains the index of which
 * instruction within the LUT entry is to be executed next. For example, if the LUT entry
 * ends on a JMP_ON_CS value of 2, the index will be stored as 2. The software
 * should reset the sequence pointers whenever the sequence ID is changed by
 * updating the SEQID field in QSPI_IPCR or QSPI_BFGENCR.
 */
/*!
 * @name Constants and macros for entire QuadSPI_SPTRCLR register
 */
/*@{*/
#define QuadSPI_RD_SPTRCLR(base) (QuadSPI_SPTRCLR_REG(base))
#define QuadSPI_WR_SPTRCLR(base, value) (QuadSPI_SPTRCLR_REG(base) = (value))
#define QuadSPI_RMW_SPTRCLR(base, mask, value) (QuadSPI_WR_SPTRCLR(base, (QuadSPI_RD_SPTRCLR(base) & ~(mask)) | (value)))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_SPTRCLR bitfields
 */

/*!
 * @name Register QuadSPI_SPTRCLR, field BFPTRC[0] (WORZ)
 *
 * Buffer Pointer Clear: 1: Clears the sequence pointer for AHB accesses as
 * defined in QuadSPI_BFGENCR. This is a self-clearing field.
 */
/*@{*/
/*! @brief Set the BFPTRC field to a new value. */
#define QuadSPI_WR_SPTRCLR_BFPTRC(base, value) (QuadSPI_RMW_SPTRCLR(base, QuadSPI_SPTRCLR_BFPTRC_MASK, QuadSPI_SPTRCLR_BFPTRC(value)))
#define QuadSPI_BWR_SPTRCLR_BFPTRC(base, value) (BME_BFI32(&QuadSPI_SPTRCLR_REG(base), ((uint32_t)(value) << QuadSPI_SPTRCLR_BFPTRC_SHIFT), QuadSPI_SPTRCLR_BFPTRC_SHIFT, QuadSPI_SPTRCLR_BFPTRC_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_SPTRCLR, field IPPTRC[8] (WORZ)
 *
 * IP Pointer Clear: 1: Clears the sequence pointer for IP accesses as defined
 * in QuadSPI_IPCR This is a self-clearing field.
 */
/*@{*/
/*! @brief Set the IPPTRC field to a new value. */
#define QuadSPI_WR_SPTRCLR_IPPTRC(base, value) (QuadSPI_RMW_SPTRCLR(base, QuadSPI_SPTRCLR_IPPTRC_MASK, QuadSPI_SPTRCLR_IPPTRC(value)))
#define QuadSPI_BWR_SPTRCLR_IPPTRC(base, value) (BME_BFI32(&QuadSPI_SPTRCLR_REG(base), ((uint32_t)(value) << QuadSPI_SPTRCLR_IPPTRC_SHIFT), QuadSPI_SPTRCLR_IPPTRC_SHIFT, QuadSPI_SPTRCLR_IPPTRC_WIDTH))
/*@}*/

/*******************************************************************************
 * QuadSPI_SFA1AD - Serial Flash A1 Top Address
 ******************************************************************************/

/*!
 * @brief QuadSPI_SFA1AD - Serial Flash A1 Top Address (RW)
 *
 * Reset value: 0x6FFFFC00U
 *
 * The QSPI_SFA1AD register provides the address mapping for the serial flash
 * A1.The difference between QSPI_SFA1AD[TPADA1] and QSPI_AMBA_BASE defines the
 * size of the memory map for serial flash A1. Write: QSPI_SR[IP_ACC] = 0
 * QSPI_SR[AHB_ACC] = 0
 */
/*!
 * @name Constants and macros for entire QuadSPI_SFA1AD register
 */
/*@{*/
#define QuadSPI_RD_SFA1AD(base)  (QuadSPI_SFA1AD_REG(base))
#define QuadSPI_WR_SFA1AD(base, value) (QuadSPI_SFA1AD_REG(base) = (value))
#define QuadSPI_RMW_SFA1AD(base, mask, value) (QuadSPI_WR_SFA1AD(base, (QuadSPI_RD_SFA1AD(base) & ~(mask)) | (value)))
#define QuadSPI_SET_SFA1AD(base, value) (BME_OR32(&QuadSPI_SFA1AD_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_SFA1AD(base, value) (BME_AND32(&QuadSPI_SFA1AD_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_SFA1AD(base, value) (BME_XOR32(&QuadSPI_SFA1AD_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_SFA1AD bitfields
 */

/*!
 * @name Register QuadSPI_SFA1AD, field TPADA1[31:10] (RW)
 *
 * Top address for Serial Flash A1. In effect, TPADxx is the first location of
 * the next memory.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SFA1AD_TPADA1 field. */
#define QuadSPI_RD_SFA1AD_TPADA1(base) ((QuadSPI_SFA1AD_REG(base) & QuadSPI_SFA1AD_TPADA1_MASK) >> QuadSPI_SFA1AD_TPADA1_SHIFT)
#define QuadSPI_BRD_SFA1AD_TPADA1(base) (QuadSPI_RD_SFA1AD_TPADA1(base))

/*! @brief Set the TPADA1 field to a new value. */
#define QuadSPI_WR_SFA1AD_TPADA1(base, value) (QuadSPI_RMW_SFA1AD(base, QuadSPI_SFA1AD_TPADA1_MASK, QuadSPI_SFA1AD_TPADA1(value)))
#define QuadSPI_BWR_SFA1AD_TPADA1(base, value) (QuadSPI_WR_SFA1AD_TPADA1(base, value))
/*@}*/

/*******************************************************************************
 * QuadSPI_SFA2AD - Serial Flash A2 Top Address
 ******************************************************************************/

/*!
 * @brief QuadSPI_SFA2AD - Serial Flash A2 Top Address (RW)
 *
 * Reset value: 0x6FFFFC00U
 *
 * The QSPI_SFA2AD register provides the address mapping for the serial flash
 * A2.The difference between QSPI_SFA2AD[TPADA2] and QSPI_SFA1AD[TPADA1] defines
 * the size of the memory map for serial flash A2. Write: QSPI_SR[IP_ACC] = 0
 * QSPI_SR[AHB_ACC] = 0
 */
/*!
 * @name Constants and macros for entire QuadSPI_SFA2AD register
 */
/*@{*/
#define QuadSPI_RD_SFA2AD(base)  (QuadSPI_SFA2AD_REG(base))
#define QuadSPI_WR_SFA2AD(base, value) (QuadSPI_SFA2AD_REG(base) = (value))
#define QuadSPI_RMW_SFA2AD(base, mask, value) (QuadSPI_WR_SFA2AD(base, (QuadSPI_RD_SFA2AD(base) & ~(mask)) | (value)))
#define QuadSPI_SET_SFA2AD(base, value) (BME_OR32(&QuadSPI_SFA2AD_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_SFA2AD(base, value) (BME_AND32(&QuadSPI_SFA2AD_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_SFA2AD(base, value) (BME_XOR32(&QuadSPI_SFA2AD_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_SFA2AD bitfields
 */

/*!
 * @name Register QuadSPI_SFA2AD, field TPADA2[31:10] (RW)
 *
 * Top address for Serial Flash A2. In effect, TPxxAD is the first location of
 * the next memory.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SFA2AD_TPADA2 field. */
#define QuadSPI_RD_SFA2AD_TPADA2(base) ((QuadSPI_SFA2AD_REG(base) & QuadSPI_SFA2AD_TPADA2_MASK) >> QuadSPI_SFA2AD_TPADA2_SHIFT)
#define QuadSPI_BRD_SFA2AD_TPADA2(base) (QuadSPI_RD_SFA2AD_TPADA2(base))

/*! @brief Set the TPADA2 field to a new value. */
#define QuadSPI_WR_SFA2AD_TPADA2(base, value) (QuadSPI_RMW_SFA2AD(base, QuadSPI_SFA2AD_TPADA2_MASK, QuadSPI_SFA2AD_TPADA2(value)))
#define QuadSPI_BWR_SFA2AD_TPADA2(base, value) (QuadSPI_WR_SFA2AD_TPADA2(base, value))
/*@}*/

/*******************************************************************************
 * QuadSPI_SFB1AD - Serial Flash B1Top Address
 ******************************************************************************/

/*!
 * @brief QuadSPI_SFB1AD - Serial Flash B1Top Address (RW)
 *
 * Reset value: 0x6FFFFC00U
 *
 * The QSPI_SFB1AD register provides the address mapping for the serial flash
 * B1.The difference between QSPI_SFB1AD[TPADB1] and QSPI_SFA2AD[TPADA2] defines
 * the size of the memory map for serial flash B1. Write: QSPI_SR[IP_ACC] = 0
 * QSPI_SR[AHB_ACC] = 0
 */
/*!
 * @name Constants and macros for entire QuadSPI_SFB1AD register
 */
/*@{*/
#define QuadSPI_RD_SFB1AD(base)  (QuadSPI_SFB1AD_REG(base))
#define QuadSPI_WR_SFB1AD(base, value) (QuadSPI_SFB1AD_REG(base) = (value))
#define QuadSPI_RMW_SFB1AD(base, mask, value) (QuadSPI_WR_SFB1AD(base, (QuadSPI_RD_SFB1AD(base) & ~(mask)) | (value)))
#define QuadSPI_SET_SFB1AD(base, value) (BME_OR32(&QuadSPI_SFB1AD_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_SFB1AD(base, value) (BME_AND32(&QuadSPI_SFB1AD_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_SFB1AD(base, value) (BME_XOR32(&QuadSPI_SFB1AD_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_SFB1AD bitfields
 */

/*!
 * @name Register QuadSPI_SFB1AD, field TPADB1[31:10] (RW)
 *
 * Top address for Serial Flash B1.In effect, TPxxAD is the first location of
 * the next memory.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SFB1AD_TPADB1 field. */
#define QuadSPI_RD_SFB1AD_TPADB1(base) ((QuadSPI_SFB1AD_REG(base) & QuadSPI_SFB1AD_TPADB1_MASK) >> QuadSPI_SFB1AD_TPADB1_SHIFT)
#define QuadSPI_BRD_SFB1AD_TPADB1(base) (QuadSPI_RD_SFB1AD_TPADB1(base))

/*! @brief Set the TPADB1 field to a new value. */
#define QuadSPI_WR_SFB1AD_TPADB1(base, value) (QuadSPI_RMW_SFB1AD(base, QuadSPI_SFB1AD_TPADB1_MASK, QuadSPI_SFB1AD_TPADB1(value)))
#define QuadSPI_BWR_SFB1AD_TPADB1(base, value) (QuadSPI_WR_SFB1AD_TPADB1(base, value))
/*@}*/

/*******************************************************************************
 * QuadSPI_SFB2AD - Serial Flash B2Top Address
 ******************************************************************************/

/*!
 * @brief QuadSPI_SFB2AD - Serial Flash B2Top Address (RW)
 *
 * Reset value: 0x6FFFFC00U
 *
 * The QSPI_SFB2AD register provides the address mapping for the serial flash
 * B2.The difference between QSPI_SFB2AD[TPADB2] and QSPI_SFB1AD[TPADB1] defines
 * the size of the memory map for serial flash B2. Write: QSPI_SR[IP_ACC] = 0
 * QSPI_SR[AHB_ACC] = 0
 */
/*!
 * @name Constants and macros for entire QuadSPI_SFB2AD register
 */
/*@{*/
#define QuadSPI_RD_SFB2AD(base)  (QuadSPI_SFB2AD_REG(base))
#define QuadSPI_WR_SFB2AD(base, value) (QuadSPI_SFB2AD_REG(base) = (value))
#define QuadSPI_RMW_SFB2AD(base, mask, value) (QuadSPI_WR_SFB2AD(base, (QuadSPI_RD_SFB2AD(base) & ~(mask)) | (value)))
#define QuadSPI_SET_SFB2AD(base, value) (BME_OR32(&QuadSPI_SFB2AD_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_SFB2AD(base, value) (BME_AND32(&QuadSPI_SFB2AD_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_SFB2AD(base, value) (BME_XOR32(&QuadSPI_SFB2AD_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_SFB2AD bitfields
 */

/*!
 * @name Register QuadSPI_SFB2AD, field TPADB2[31:10] (RW)
 *
 * Top address for Serial Flash B2. In effect, TPxxAD is the first location of
 * the next memory.
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_SFB2AD_TPADB2 field. */
#define QuadSPI_RD_SFB2AD_TPADB2(base) ((QuadSPI_SFB2AD_REG(base) & QuadSPI_SFB2AD_TPADB2_MASK) >> QuadSPI_SFB2AD_TPADB2_SHIFT)
#define QuadSPI_BRD_SFB2AD_TPADB2(base) (QuadSPI_RD_SFB2AD_TPADB2(base))

/*! @brief Set the TPADB2 field to a new value. */
#define QuadSPI_WR_SFB2AD_TPADB2(base, value) (QuadSPI_RMW_SFB2AD(base, QuadSPI_SFB2AD_TPADB2_MASK, QuadSPI_SFB2AD_TPADB2(value)))
#define QuadSPI_BWR_SFB2AD_TPADB2(base, value) (QuadSPI_WR_SFB2AD_TPADB2(base, value))
/*@}*/

/*******************************************************************************
 * QuadSPI_DLPR - Data Learn Pattern Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_DLPR - Data Learn Pattern Register (RW)
 *
 * Reset value: 0xAA553443U
 *
 * The QSPI_DLPR register contains the information of the data to be used for
 * Data Learning. Write: QSPI_SR[IP_ACC] = 0 QSPI_SR[AHB_ACC] = 0
 */
/*!
 * @name Constants and macros for entire QuadSPI_DLPR register
 */
/*@{*/
#define QuadSPI_RD_DLPR(base)    (QuadSPI_DLPR_REG(base))
#define QuadSPI_WR_DLPR(base, value) (QuadSPI_DLPR_REG(base) = (value))
#define QuadSPI_RMW_DLPR(base, mask, value) (QuadSPI_WR_DLPR(base, (QuadSPI_RD_DLPR(base) & ~(mask)) | (value)))
#define QuadSPI_SET_DLPR(base, value) (BME_OR32(&QuadSPI_DLPR_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_DLPR(base, value) (BME_AND32(&QuadSPI_DLPR_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_DLPR(base, value) (BME_XOR32(&QuadSPI_DLPR_REG(base), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * QuadSPI_RBDR - RX Buffer Data Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_RBDR - RX Buffer Data Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The QuadSPI_RBDR registers provide access to the individual entries in the RX
 * Buffer. Refer to for the byte ordering scheme. QuadSPI_RBDR0 corresponds to
 * the actual position of the read pointer within the RX Buffer. The number of
 * valid entries available depends from the number of RX Buffer entries implemented
 * and from the number of valid buffer entries available in the RX Buffer.
 * Example 1, RX Buffer filled completely with 16 words: In this case the address range
 * for valid read access extends from QuadSPI_RBDR0 to QuadSPI_RBDR15. Example
 * 2, RX Buffer filled with 5 valid words: RX Buffer fill level
 * QuadSPI_RBSR[RDBFL] is 5. In this case an access to QuadSPI_RBDR4 provides the last valid entry.
 * Any access beyond the range of valid RX Buffer entries provides undefined
 * results.
 */
/*!
 * @name Constants and macros for entire QuadSPI_RBDR register
 */
/*@{*/
#define QuadSPI_RD_RBDR(base, index) (QuadSPI_RBDR_REG(base, index))
/*@}*/

/*******************************************************************************
 * QuadSPI_LUTKEY - LUT Key Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_LUTKEY - LUT Key Register (RW)
 *
 * Reset value: 0x5AF05AF0U
 *
 * The LUT Key register contains the key to lock and unlock the Look-up-table.
 * Refer to Look-up Table for details. Write: Anytime
 */
/*!
 * @name Constants and macros for entire QuadSPI_LUTKEY register
 */
/*@{*/
#define QuadSPI_RD_LUTKEY(base)  (QuadSPI_LUTKEY_REG(base))
#define QuadSPI_WR_LUTKEY(base, value) (QuadSPI_LUTKEY_REG(base) = (value))
#define QuadSPI_RMW_LUTKEY(base, mask, value) (QuadSPI_WR_LUTKEY(base, (QuadSPI_RD_LUTKEY(base) & ~(mask)) | (value)))
#define QuadSPI_SET_LUTKEY(base, value) (BME_OR32(&QuadSPI_LUTKEY_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_LUTKEY(base, value) (BME_AND32(&QuadSPI_LUTKEY_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_LUTKEY(base, value) (BME_XOR32(&QuadSPI_LUTKEY_REG(base), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * QuadSPI_LCKCR - LUT Lock Configuration Register
 ******************************************************************************/

/*!
 * @brief QuadSPI_LCKCR - LUT Lock Configuration Register (RW)
 *
 * Reset value: 0x00000002U
 *
 * The LUT lock configuration register is used along with QSPI_LUTKEY register
 * to lock or unlock the LUT. This register has to be written immediately after
 * QSPI_LUTKEY register for the lock or unlock operation to be successful. Refer to
 * Look-up Table for details. Setting both the LOCK and UNLOCK bits as "00" or
 * "11" is not allowed. Write: Just after writing the LUT Key Register
 * (QSPI_LUTKEY)
 */
/*!
 * @name Constants and macros for entire QuadSPI_LCKCR register
 */
/*@{*/
#define QuadSPI_RD_LCKCR(base)   (QuadSPI_LCKCR_REG(base))
#define QuadSPI_WR_LCKCR(base, value) (QuadSPI_LCKCR_REG(base) = (value))
#define QuadSPI_RMW_LCKCR(base, mask, value) (QuadSPI_WR_LCKCR(base, (QuadSPI_RD_LCKCR(base) & ~(mask)) | (value)))
#define QuadSPI_SET_LCKCR(base, value) (BME_OR32(&QuadSPI_LCKCR_REG(base), (uint32_t)(value)))
#define QuadSPI_CLR_LCKCR(base, value) (BME_AND32(&QuadSPI_LCKCR_REG(base), (uint32_t)(~(value))))
#define QuadSPI_TOG_LCKCR(base, value) (BME_XOR32(&QuadSPI_LCKCR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_LCKCR bitfields
 */

/*!
 * @name Register QuadSPI_LCKCR, field LOCK[0] (RW)
 *
 * Locks the LUT when the following condition is met: This register is written
 * just after the LUTKEYLUT Key Register The LUT key register was written with
 * 0x5AF05AF0 key
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_LCKCR_LOCK field. */
#define QuadSPI_RD_LCKCR_LOCK(base) ((QuadSPI_LCKCR_REG(base) & QuadSPI_LCKCR_LOCK_MASK) >> QuadSPI_LCKCR_LOCK_SHIFT)
#define QuadSPI_BRD_LCKCR_LOCK(base) (BME_UBFX32(&QuadSPI_LCKCR_REG(base), QuadSPI_LCKCR_LOCK_SHIFT, QuadSPI_LCKCR_LOCK_WIDTH))

/*! @brief Set the LOCK field to a new value. */
#define QuadSPI_WR_LCKCR_LOCK(base, value) (QuadSPI_RMW_LCKCR(base, QuadSPI_LCKCR_LOCK_MASK, QuadSPI_LCKCR_LOCK(value)))
#define QuadSPI_BWR_LCKCR_LOCK(base, value) (BME_BFI32(&QuadSPI_LCKCR_REG(base), ((uint32_t)(value) << QuadSPI_LCKCR_LOCK_SHIFT), QuadSPI_LCKCR_LOCK_SHIFT, QuadSPI_LCKCR_LOCK_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_LCKCR, field UNLOCK[1] (RW)
 *
 * Unlocks the LUT when the following two conditions are met: 1. This register
 * is written just after the LUTKEYLUT Key Register 2. The LUT key register was
 * written with 0x5AF05AF0 key
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_LCKCR_UNLOCK field. */
#define QuadSPI_RD_LCKCR_UNLOCK(base) ((QuadSPI_LCKCR_REG(base) & QuadSPI_LCKCR_UNLOCK_MASK) >> QuadSPI_LCKCR_UNLOCK_SHIFT)
#define QuadSPI_BRD_LCKCR_UNLOCK(base) (BME_UBFX32(&QuadSPI_LCKCR_REG(base), QuadSPI_LCKCR_UNLOCK_SHIFT, QuadSPI_LCKCR_UNLOCK_WIDTH))

/*! @brief Set the UNLOCK field to a new value. */
#define QuadSPI_WR_LCKCR_UNLOCK(base, value) (QuadSPI_RMW_LCKCR(base, QuadSPI_LCKCR_UNLOCK_MASK, QuadSPI_LCKCR_UNLOCK(value)))
#define QuadSPI_BWR_LCKCR_UNLOCK(base, value) (BME_BFI32(&QuadSPI_LCKCR_REG(base), ((uint32_t)(value) << QuadSPI_LCKCR_UNLOCK_SHIFT), QuadSPI_LCKCR_UNLOCK_SHIFT, QuadSPI_LCKCR_UNLOCK_WIDTH))
/*@}*/

/*******************************************************************************
 * QuadSPI_LUT - Look-up Table register
 ******************************************************************************/

/*!
 * @brief QuadSPI_LUT - Look-up Table register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The LUT registers are a look-up-table for sequences of instructions. The
 * programmable sequence engine executes the instructions in these sequences to
 * generate a valid serial flash transaction. There are a total of 64 LUT registers.
 * These 64 registers are divided into groups of 4 registers that make a valid
 * sequence. Therefore, QSPI_LUT[0], QSPI_LUT[4], QSPI_LUT[8] ..... QSPI_LUT[60] are
 * the starting registers of a valid sequence. Each of these sets of 4 registers
 * can have a maximum of 8 instructions. Reset value of the register shown below
 * is only applicable to LUT2 to LUT63. A maximum of 16 sequences can be defined
 * at one time. Look-up Table describes the LUT registers in detail.The reset
 * values for LUT0 and LUT1 are 0818_0403h and 2400_1C08h, respectively. Write:
 * Once the LUT is unlocked
 */
/*!
 * @name Constants and macros for entire QuadSPI_LUT register
 */
/*@{*/
#define QuadSPI_RD_LUT(base, index) (QuadSPI_LUT_REG(base, index))
#define QuadSPI_WR_LUT(base, index, value) (QuadSPI_LUT_REG(base, index) = (value))
#define QuadSPI_RMW_LUT(base, index, mask, value) (QuadSPI_WR_LUT(base, index, (QuadSPI_RD_LUT(base, index) & ~(mask)) | (value)))
#define QuadSPI_SET_LUT(base, index, value) (BME_OR32(&QuadSPI_LUT_REG(base, index), (uint32_t)(value)))
#define QuadSPI_CLR_LUT(base, index, value) (BME_AND32(&QuadSPI_LUT_REG(base, index), (uint32_t)(~(value))))
#define QuadSPI_TOG_LUT(base, index, value) (BME_XOR32(&QuadSPI_LUT_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual QuadSPI_LUT bitfields
 */

/*!
 * @name Register QuadSPI_LUT, field OPRND0[7:0] (RW)
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_LUT_OPRND0 field. */
#define QuadSPI_RD_LUT_OPRND0(base, index) ((QuadSPI_LUT_REG(base, index) & QuadSPI_LUT_OPRND0_MASK) >> QuadSPI_LUT_OPRND0_SHIFT)
#define QuadSPI_BRD_LUT_OPRND0(base, index) (BME_UBFX32(&QuadSPI_LUT_REG(base, index), QuadSPI_LUT_OPRND0_SHIFT, QuadSPI_LUT_OPRND0_WIDTH))

/*! @brief Set the OPRND0 field to a new value. */
#define QuadSPI_WR_LUT_OPRND0(base, index, value) (QuadSPI_RMW_LUT(base, index, QuadSPI_LUT_OPRND0_MASK, QuadSPI_LUT_OPRND0(value)))
#define QuadSPI_BWR_LUT_OPRND0(base, index, value) (BME_BFI32(&QuadSPI_LUT_REG(base, index), ((uint32_t)(value) << QuadSPI_LUT_OPRND0_SHIFT), QuadSPI_LUT_OPRND0_SHIFT, QuadSPI_LUT_OPRND0_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_LUT, field PAD0[9:8] (RW)
 *
 * Values:
 * - 0b00 - 1 Pad
 * - 0b01 - 2 Pads
 * - 0b10 - 4 Pads
 * - 0b11 - 8 Pads
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_LUT_PAD0 field. */
#define QuadSPI_RD_LUT_PAD0(base, index) ((QuadSPI_LUT_REG(base, index) & QuadSPI_LUT_PAD0_MASK) >> QuadSPI_LUT_PAD0_SHIFT)
#define QuadSPI_BRD_LUT_PAD0(base, index) (BME_UBFX32(&QuadSPI_LUT_REG(base, index), QuadSPI_LUT_PAD0_SHIFT, QuadSPI_LUT_PAD0_WIDTH))

/*! @brief Set the PAD0 field to a new value. */
#define QuadSPI_WR_LUT_PAD0(base, index, value) (QuadSPI_RMW_LUT(base, index, QuadSPI_LUT_PAD0_MASK, QuadSPI_LUT_PAD0(value)))
#define QuadSPI_BWR_LUT_PAD0(base, index, value) (BME_BFI32(&QuadSPI_LUT_REG(base, index), ((uint32_t)(value) << QuadSPI_LUT_PAD0_SHIFT), QuadSPI_LUT_PAD0_SHIFT, QuadSPI_LUT_PAD0_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_LUT, field INSTR0[15:10] (RW)
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_LUT_INSTR0 field. */
#define QuadSPI_RD_LUT_INSTR0(base, index) ((QuadSPI_LUT_REG(base, index) & QuadSPI_LUT_INSTR0_MASK) >> QuadSPI_LUT_INSTR0_SHIFT)
#define QuadSPI_BRD_LUT_INSTR0(base, index) (BME_UBFX32(&QuadSPI_LUT_REG(base, index), QuadSPI_LUT_INSTR0_SHIFT, QuadSPI_LUT_INSTR0_WIDTH))

/*! @brief Set the INSTR0 field to a new value. */
#define QuadSPI_WR_LUT_INSTR0(base, index, value) (QuadSPI_RMW_LUT(base, index, QuadSPI_LUT_INSTR0_MASK, QuadSPI_LUT_INSTR0(value)))
#define QuadSPI_BWR_LUT_INSTR0(base, index, value) (BME_BFI32(&QuadSPI_LUT_REG(base, index), ((uint32_t)(value) << QuadSPI_LUT_INSTR0_SHIFT), QuadSPI_LUT_INSTR0_SHIFT, QuadSPI_LUT_INSTR0_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_LUT, field OPRND1[23:16] (RW)
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_LUT_OPRND1 field. */
#define QuadSPI_RD_LUT_OPRND1(base, index) ((QuadSPI_LUT_REG(base, index) & QuadSPI_LUT_OPRND1_MASK) >> QuadSPI_LUT_OPRND1_SHIFT)
#define QuadSPI_BRD_LUT_OPRND1(base, index) (BME_UBFX32(&QuadSPI_LUT_REG(base, index), QuadSPI_LUT_OPRND1_SHIFT, QuadSPI_LUT_OPRND1_WIDTH))

/*! @brief Set the OPRND1 field to a new value. */
#define QuadSPI_WR_LUT_OPRND1(base, index, value) (QuadSPI_RMW_LUT(base, index, QuadSPI_LUT_OPRND1_MASK, QuadSPI_LUT_OPRND1(value)))
#define QuadSPI_BWR_LUT_OPRND1(base, index, value) (BME_BFI32(&QuadSPI_LUT_REG(base, index), ((uint32_t)(value) << QuadSPI_LUT_OPRND1_SHIFT), QuadSPI_LUT_OPRND1_SHIFT, QuadSPI_LUT_OPRND1_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_LUT, field PAD1[25:24] (RW)
 *
 * Values:
 * - 0b00 - 1 Pad
 * - 0b01 - 2 Pads
 * - 0b10 - 4 Pads
 * - 0b11 - 8 Pads
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_LUT_PAD1 field. */
#define QuadSPI_RD_LUT_PAD1(base, index) ((QuadSPI_LUT_REG(base, index) & QuadSPI_LUT_PAD1_MASK) >> QuadSPI_LUT_PAD1_SHIFT)
#define QuadSPI_BRD_LUT_PAD1(base, index) (BME_UBFX32(&QuadSPI_LUT_REG(base, index), QuadSPI_LUT_PAD1_SHIFT, QuadSPI_LUT_PAD1_WIDTH))

/*! @brief Set the PAD1 field to a new value. */
#define QuadSPI_WR_LUT_PAD1(base, index, value) (QuadSPI_RMW_LUT(base, index, QuadSPI_LUT_PAD1_MASK, QuadSPI_LUT_PAD1(value)))
#define QuadSPI_BWR_LUT_PAD1(base, index, value) (BME_BFI32(&QuadSPI_LUT_REG(base, index), ((uint32_t)(value) << QuadSPI_LUT_PAD1_SHIFT), QuadSPI_LUT_PAD1_SHIFT, QuadSPI_LUT_PAD1_WIDTH))
/*@}*/

/*!
 * @name Register QuadSPI_LUT, field INSTR1[31:26] (RW)
 */
/*@{*/
/*! @brief Read current value of the QuadSPI_LUT_INSTR1 field. */
#define QuadSPI_RD_LUT_INSTR1(base, index) ((QuadSPI_LUT_REG(base, index) & QuadSPI_LUT_INSTR1_MASK) >> QuadSPI_LUT_INSTR1_SHIFT)
#define QuadSPI_BRD_LUT_INSTR1(base, index) (BME_UBFX32(&QuadSPI_LUT_REG(base, index), QuadSPI_LUT_INSTR1_SHIFT, QuadSPI_LUT_INSTR1_WIDTH))

/*! @brief Set the INSTR1 field to a new value. */
#define QuadSPI_WR_LUT_INSTR1(base, index, value) (QuadSPI_RMW_LUT(base, index, QuadSPI_LUT_INSTR1_MASK, QuadSPI_LUT_INSTR1(value)))
#define QuadSPI_BWR_LUT_INSTR1(base, index, value) (BME_BFI32(&QuadSPI_LUT_REG(base, index), ((uint32_t)(value) << QuadSPI_LUT_INSTR1_SHIFT), QuadSPI_LUT_INSTR1_SHIFT, QuadSPI_LUT_INSTR1_WIDTH))
/*@}*/

/*
 * MK82F25615 RCM
 *
 * Reset Control Module
 *
 * Registers defined in this header file:
 * - RCM_SRS0 - System Reset Status Register 0
 * - RCM_SRS1 - System Reset Status Register 1
 * - RCM_RPFC - Reset Pin Filter Control register
 * - RCM_RPFW - Reset Pin Filter Width register
 * - RCM_FM - Force Mode Register
 * - RCM_MR - Mode Register
 * - RCM_SSRS0 - Sticky System Reset Status Register 0
 * - RCM_SSRS1 - Sticky System Reset Status Register 1
 */

#define RCM_INSTANCE_COUNT (1U) /*!< Number of instances of the RCM module. */
#define RCM_IDX (0U) /*!< Instance number for RCM. */

/*******************************************************************************
 * RCM_SRS0 - System Reset Status Register 0
 ******************************************************************************/

/*!
 * @brief RCM_SRS0 - System Reset Status Register 0 (RO)
 *
 * Reset value: 0x82U
 *
 * This register includes read-only status flags to indicate the source of the
 * most recent reset. The reset state of these bits depends on what caused the MCU
 * to reset. The reset value of this register depends on the reset source: POR
 * (including LVD) - 0x82 LVD (without POR) - 0x02 VLLS mode wakeup due to RESET
 * pin assertion - 0x41 VLLS mode wakeup due to other wakeup sources - 0x01 Other
 * reset - a bit is set if its corresponding reset source caused the reset
 */
/*!
 * @name Constants and macros for entire RCM_SRS0 register
 */
/*@{*/
#define RCM_RD_SRS0(base)        (RCM_SRS0_REG(base))
/*@}*/

/*
 * Constants & macros for individual RCM_SRS0 bitfields
 */

/*!
 * @name Register RCM_SRS0, field WAKEUP[0] (RO)
 *
 * Indicates a reset has been caused by an enabled LLWU module wakeup source
 * while the chip was in a low leakage mode. In LLS mode, the RESET pin is the only
 * wakeup source that can cause this reset. Any enabled wakeup source in a VLLSx
 * mode causes a reset. This bit is cleared by any reset except WAKEUP.
 *
 * Values:
 * - 0b0 - Reset not caused by LLWU module wakeup source
 * - 0b1 - Reset caused by LLWU module wakeup source
 */
/*@{*/
/*! @brief Read current value of the RCM_SRS0_WAKEUP field. */
#define RCM_RD_SRS0_WAKEUP(base) ((RCM_SRS0_REG(base) & RCM_SRS0_WAKEUP_MASK) >> RCM_SRS0_WAKEUP_SHIFT)
#define RCM_BRD_SRS0_WAKEUP(base) (BME_UBFX8(&RCM_SRS0_REG(base), RCM_SRS0_WAKEUP_SHIFT, RCM_SRS0_WAKEUP_WIDTH))
/*@}*/

/*!
 * @name Register RCM_SRS0, field LVD[1] (RO)
 *
 * If PMC_LVDSC1[LVDRE] is set and the supply drops below the LVD trip voltage,
 * an LVD reset occurs. This field is also set by POR.
 *
 * Values:
 * - 0b0 - Reset not caused by LVD trip or POR
 * - 0b1 - Reset caused by LVD trip or POR
 */
/*@{*/
/*! @brief Read current value of the RCM_SRS0_LVD field. */
#define RCM_RD_SRS0_LVD(base) ((RCM_SRS0_REG(base) & RCM_SRS0_LVD_MASK) >> RCM_SRS0_LVD_SHIFT)
#define RCM_BRD_SRS0_LVD(base) (BME_UBFX8(&RCM_SRS0_REG(base), RCM_SRS0_LVD_SHIFT, RCM_SRS0_LVD_WIDTH))
/*@}*/

/*!
 * @name Register RCM_SRS0, field LOC[2] (RO)
 *
 * Indicates a reset has been caused by a loss of external clock. The MCG clock
 * monitor must be enabled for a loss of clock to be detected. Refer to the
 * detailed MCG description for information on enabling the clock monitor.
 *
 * Values:
 * - 0b0 - Reset not caused by a loss of external clock.
 * - 0b1 - Reset caused by a loss of external clock.
 */
/*@{*/
/*! @brief Read current value of the RCM_SRS0_LOC field. */
#define RCM_RD_SRS0_LOC(base) ((RCM_SRS0_REG(base) & RCM_SRS0_LOC_MASK) >> RCM_SRS0_LOC_SHIFT)
#define RCM_BRD_SRS0_LOC(base) (BME_UBFX8(&RCM_SRS0_REG(base), RCM_SRS0_LOC_SHIFT, RCM_SRS0_LOC_WIDTH))
/*@}*/

/*!
 * @name Register RCM_SRS0, field LOL[3] (RO)
 *
 * Indicates a reset has been caused by a loss of lock in the MCG PLL. See the
 * MCG description for information on the loss-of-clock event.
 *
 * Values:
 * - 0b0 - Reset not caused by a loss of lock in the PLL
 * - 0b1 - Reset caused by a loss of lock in the PLL
 */
/*@{*/
/*! @brief Read current value of the RCM_SRS0_LOL field. */
#define RCM_RD_SRS0_LOL(base) ((RCM_SRS0_REG(base) & RCM_SRS0_LOL_MASK) >> RCM_SRS0_LOL_SHIFT)
#define RCM_BRD_SRS0_LOL(base) (BME_UBFX8(&RCM_SRS0_REG(base), RCM_SRS0_LOL_SHIFT, RCM_SRS0_LOL_WIDTH))
/*@}*/

/*!
 * @name Register RCM_SRS0, field WDOG[5] (RO)
 *
 * Indicates a reset has been caused by the watchdog timer timing out. This
 * reset source can be blocked by disabling the watchdog.
 *
 * Values:
 * - 0b0 - Reset not caused by watchdog timeout
 * - 0b1 - Reset caused by watchdog timeout
 */
/*@{*/
/*! @brief Read current value of the RCM_SRS0_WDOG field. */
#define RCM_RD_SRS0_WDOG(base) ((RCM_SRS0_REG(base) & RCM_SRS0_WDOG_MASK) >> RCM_SRS0_WDOG_SHIFT)
#define RCM_BRD_SRS0_WDOG(base) (BME_UBFX8(&RCM_SRS0_REG(base), RCM_SRS0_WDOG_SHIFT, RCM_SRS0_WDOG_WIDTH))
/*@}*/

/*!
 * @name Register RCM_SRS0, field PIN[6] (RO)
 *
 * Indicates a reset has been caused by an active-low level on the external
 * RESET pin.
 *
 * Values:
 * - 0b0 - Reset not caused by external reset pin
 * - 0b1 - Reset caused by external reset pin
 */
/*@{*/
/*! @brief Read current value of the RCM_SRS0_PIN field. */
#define RCM_RD_SRS0_PIN(base) ((RCM_SRS0_REG(base) & RCM_SRS0_PIN_MASK) >> RCM_SRS0_PIN_SHIFT)
#define RCM_BRD_SRS0_PIN(base) (BME_UBFX8(&RCM_SRS0_REG(base), RCM_SRS0_PIN_SHIFT, RCM_SRS0_PIN_WIDTH))
/*@}*/

/*!
 * @name Register RCM_SRS0, field POR[7] (RO)
 *
 * Indicates a reset has been caused by the power-on detection logic. Because
 * the internal supply voltage was ramping up at the time, the low-voltage reset
 * (LVD) status bit is also set to indicate that the reset occurred while the
 * internal supply was below the LVD threshold.
 *
 * Values:
 * - 0b0 - Reset not caused by POR
 * - 0b1 - Reset caused by POR
 */
/*@{*/
/*! @brief Read current value of the RCM_SRS0_POR field. */
#define RCM_RD_SRS0_POR(base) ((RCM_SRS0_REG(base) & RCM_SRS0_POR_MASK) >> RCM_SRS0_POR_SHIFT)
#define RCM_BRD_SRS0_POR(base) (BME_UBFX8(&RCM_SRS0_REG(base), RCM_SRS0_POR_SHIFT, RCM_SRS0_POR_WIDTH))
/*@}*/

/*******************************************************************************
 * RCM_SRS1 - System Reset Status Register 1
 ******************************************************************************/

/*!
 * @brief RCM_SRS1 - System Reset Status Register 1 (RO)
 *
 * Reset value: 0x00U
 *
 * This register includes read-only status flags to indicate the source of the
 * most recent reset. The reset state of these bits depends on what caused the MCU
 * to reset. The reset value of this register depends on the reset source: POR
 * (including LVD) - 0x00 LVD (without POR) - 0x00 VLLS mode wakeup - 0x00 Other
 * reset - a bit is set if its corresponding reset source caused the reset
 */
/*!
 * @name Constants and macros for entire RCM_SRS1 register
 */
/*@{*/
#define RCM_RD_SRS1(base)        (RCM_SRS1_REG(base))
/*@}*/

/*
 * Constants & macros for individual RCM_SRS1 bitfields
 */

/*!
 * @name Register RCM_SRS1, field JTAG[0] (RO)
 *
 * Indicates a reset has been caused by JTAG selection of certain IR codes:
 * EXTEST, HIGHZ, and CLAMP.
 *
 * Values:
 * - 0b0 - Reset not caused by JTAG
 * - 0b1 - Reset caused by JTAG
 */
/*@{*/
/*! @brief Read current value of the RCM_SRS1_JTAG field. */
#define RCM_RD_SRS1_JTAG(base) ((RCM_SRS1_REG(base) & RCM_SRS1_JTAG_MASK) >> RCM_SRS1_JTAG_SHIFT)
#define RCM_BRD_SRS1_JTAG(base) (BME_UBFX8(&RCM_SRS1_REG(base), RCM_SRS1_JTAG_SHIFT, RCM_SRS1_JTAG_WIDTH))
/*@}*/

/*!
 * @name Register RCM_SRS1, field LOCKUP[1] (RO)
 *
 * Indicates a reset has been caused by the ARM core indication of a LOCKUP
 * event.
 *
 * Values:
 * - 0b0 - Reset not caused by core LOCKUP event
 * - 0b1 - Reset caused by core LOCKUP event
 */
/*@{*/
/*! @brief Read current value of the RCM_SRS1_LOCKUP field. */
#define RCM_RD_SRS1_LOCKUP(base) ((RCM_SRS1_REG(base) & RCM_SRS1_LOCKUP_MASK) >> RCM_SRS1_LOCKUP_SHIFT)
#define RCM_BRD_SRS1_LOCKUP(base) (BME_UBFX8(&RCM_SRS1_REG(base), RCM_SRS1_LOCKUP_SHIFT, RCM_SRS1_LOCKUP_WIDTH))
/*@}*/

/*!
 * @name Register RCM_SRS1, field SW[2] (RO)
 *
 * Indicates a reset has been caused by software setting of SYSRESETREQ bit in
 * Application Interrupt and Reset Control Register in the ARM core.
 *
 * Values:
 * - 0b0 - Reset not caused by software setting of SYSRESETREQ bit
 * - 0b1 - Reset caused by software setting of SYSRESETREQ bit
 */
/*@{*/
/*! @brief Read current value of the RCM_SRS1_SW field. */
#define RCM_RD_SRS1_SW(base) ((RCM_SRS1_REG(base) & RCM_SRS1_SW_MASK) >> RCM_SRS1_SW_SHIFT)
#define RCM_BRD_SRS1_SW(base) (BME_UBFX8(&RCM_SRS1_REG(base), RCM_SRS1_SW_SHIFT, RCM_SRS1_SW_WIDTH))
/*@}*/

/*!
 * @name Register RCM_SRS1, field MDM_AP[3] (RO)
 *
 * Indicates a reset has been caused by the host debugger system setting of the
 * System Reset Request bit in the MDM-AP Control Register.
 *
 * Values:
 * - 0b0 - Reset not caused by host debugger system setting of the System Reset
 *     Request bit
 * - 0b1 - Reset caused by host debugger system setting of the System Reset
 *     Request bit
 */
/*@{*/
/*! @brief Read current value of the RCM_SRS1_MDM_AP field. */
#define RCM_RD_SRS1_MDM_AP(base) ((RCM_SRS1_REG(base) & RCM_SRS1_MDM_AP_MASK) >> RCM_SRS1_MDM_AP_SHIFT)
#define RCM_BRD_SRS1_MDM_AP(base) (BME_UBFX8(&RCM_SRS1_REG(base), RCM_SRS1_MDM_AP_SHIFT, RCM_SRS1_MDM_AP_WIDTH))
/*@}*/

/*!
 * @name Register RCM_SRS1, field SACKERR[5] (RO)
 *
 * Indicates that after an attempt to enter Stop mode, a reset has been caused
 * by a failure of one or more peripherals to acknowledge within approximately one
 * second to enter stop mode.
 *
 * Values:
 * - 0b0 - Reset not caused by peripheral failure to acknowledge attempt to
 *     enter stop mode
 * - 0b1 - Reset caused by peripheral failure to acknowledge attempt to enter
 *     stop mode
 */
/*@{*/
/*! @brief Read current value of the RCM_SRS1_SACKERR field. */
#define RCM_RD_SRS1_SACKERR(base) ((RCM_SRS1_REG(base) & RCM_SRS1_SACKERR_MASK) >> RCM_SRS1_SACKERR_SHIFT)
#define RCM_BRD_SRS1_SACKERR(base) (BME_UBFX8(&RCM_SRS1_REG(base), RCM_SRS1_SACKERR_SHIFT, RCM_SRS1_SACKERR_WIDTH))
/*@}*/

/*******************************************************************************
 * RCM_RPFC - Reset Pin Filter Control register
 ******************************************************************************/

/*!
 * @brief RCM_RPFC - Reset Pin Filter Control register (RW)
 *
 * Reset value: 0x00U
 *
 * The reset values of bits 2-0 are for Chip POR only. They are unaffected by
 * other reset types. The bus clock filter is reset when disabled or when entering
 * stop mode. The LPO filter is reset when disabled .
 */
/*!
 * @name Constants and macros for entire RCM_RPFC register
 */
/*@{*/
#define RCM_RD_RPFC(base)        (RCM_RPFC_REG(base))
#define RCM_WR_RPFC(base, value) (RCM_RPFC_REG(base) = (value))
#define RCM_RMW_RPFC(base, mask, value) (RCM_WR_RPFC(base, (RCM_RD_RPFC(base) & ~(mask)) | (value)))
#define RCM_SET_RPFC(base, value) (BME_OR8(&RCM_RPFC_REG(base), (uint8_t)(value)))
#define RCM_CLR_RPFC(base, value) (BME_AND8(&RCM_RPFC_REG(base), (uint8_t)(~(value))))
#define RCM_TOG_RPFC(base, value) (BME_XOR8(&RCM_RPFC_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual RCM_RPFC bitfields
 */

/*!
 * @name Register RCM_RPFC, field RSTFLTSRW[1:0] (RW)
 *
 * Selects how the reset pin filter is enabled in run and wait modes.
 *
 * Values:
 * - 0b00 - All filtering disabled
 * - 0b01 - Bus clock filter enabled for normal operation
 * - 0b10 - LPO clock filter enabled for normal operation
 * - 0b11 - Reserved
 */
/*@{*/
/*! @brief Read current value of the RCM_RPFC_RSTFLTSRW field. */
#define RCM_RD_RPFC_RSTFLTSRW(base) ((RCM_RPFC_REG(base) & RCM_RPFC_RSTFLTSRW_MASK) >> RCM_RPFC_RSTFLTSRW_SHIFT)
#define RCM_BRD_RPFC_RSTFLTSRW(base) (BME_UBFX8(&RCM_RPFC_REG(base), RCM_RPFC_RSTFLTSRW_SHIFT, RCM_RPFC_RSTFLTSRW_WIDTH))

/*! @brief Set the RSTFLTSRW field to a new value. */
#define RCM_WR_RPFC_RSTFLTSRW(base, value) (RCM_RMW_RPFC(base, RCM_RPFC_RSTFLTSRW_MASK, RCM_RPFC_RSTFLTSRW(value)))
#define RCM_BWR_RPFC_RSTFLTSRW(base, value) (BME_BFI8(&RCM_RPFC_REG(base), ((uint8_t)(value) << RCM_RPFC_RSTFLTSRW_SHIFT), RCM_RPFC_RSTFLTSRW_SHIFT, RCM_RPFC_RSTFLTSRW_WIDTH))
/*@}*/

/*!
 * @name Register RCM_RPFC, field RSTFLTSS[2] (RW)
 *
 * Selects how the reset pin filter is enabled in Stop and VLPS modes , and also
 * during LLS and VLLS modes. On exit from VLLS mode, this bit should be
 * reconfigured before clearing PMC_REGSC[ACKISO].
 *
 * Values:
 * - 0b0 - All filtering disabled
 * - 0b1 - LPO clock filter enabled
 */
/*@{*/
/*! @brief Read current value of the RCM_RPFC_RSTFLTSS field. */
#define RCM_RD_RPFC_RSTFLTSS(base) ((RCM_RPFC_REG(base) & RCM_RPFC_RSTFLTSS_MASK) >> RCM_RPFC_RSTFLTSS_SHIFT)
#define RCM_BRD_RPFC_RSTFLTSS(base) (BME_UBFX8(&RCM_RPFC_REG(base), RCM_RPFC_RSTFLTSS_SHIFT, RCM_RPFC_RSTFLTSS_WIDTH))

/*! @brief Set the RSTFLTSS field to a new value. */
#define RCM_WR_RPFC_RSTFLTSS(base, value) (RCM_RMW_RPFC(base, RCM_RPFC_RSTFLTSS_MASK, RCM_RPFC_RSTFLTSS(value)))
#define RCM_BWR_RPFC_RSTFLTSS(base, value) (BME_BFI8(&RCM_RPFC_REG(base), ((uint8_t)(value) << RCM_RPFC_RSTFLTSS_SHIFT), RCM_RPFC_RSTFLTSS_SHIFT, RCM_RPFC_RSTFLTSS_WIDTH))
/*@}*/

/*******************************************************************************
 * RCM_RPFW - Reset Pin Filter Width register
 ******************************************************************************/

/*!
 * @brief RCM_RPFW - Reset Pin Filter Width register (RW)
 *
 * Reset value: 0x00U
 *
 * The reset values of the bits in the RSTFLTSEL field are for Chip POR only.
 * They are unaffected by other reset types.
 */
/*!
 * @name Constants and macros for entire RCM_RPFW register
 */
/*@{*/
#define RCM_RD_RPFW(base)        (RCM_RPFW_REG(base))
#define RCM_WR_RPFW(base, value) (RCM_RPFW_REG(base) = (value))
#define RCM_RMW_RPFW(base, mask, value) (RCM_WR_RPFW(base, (RCM_RD_RPFW(base) & ~(mask)) | (value)))
#define RCM_SET_RPFW(base, value) (BME_OR8(&RCM_RPFW_REG(base), (uint8_t)(value)))
#define RCM_CLR_RPFW(base, value) (BME_AND8(&RCM_RPFW_REG(base), (uint8_t)(~(value))))
#define RCM_TOG_RPFW(base, value) (BME_XOR8(&RCM_RPFW_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual RCM_RPFW bitfields
 */

/*!
 * @name Register RCM_RPFW, field RSTFLTSEL[4:0] (RW)
 *
 * Selects the reset pin bus clock filter width.
 *
 * Values:
 * - 0b00000 - Bus clock filter count is 1
 * - 0b00001 - Bus clock filter count is 2
 * - 0b00010 - Bus clock filter count is 3
 * - 0b00011 - Bus clock filter count is 4
 * - 0b00100 - Bus clock filter count is 5
 * - 0b00101 - Bus clock filter count is 6
 * - 0b00110 - Bus clock filter count is 7
 * - 0b00111 - Bus clock filter count is 8
 * - 0b01000 - Bus clock filter count is 9
 * - 0b01001 - Bus clock filter count is 10
 * - 0b01010 - Bus clock filter count is 11
 * - 0b01011 - Bus clock filter count is 12
 * - 0b01100 - Bus clock filter count is 13
 * - 0b01101 - Bus clock filter count is 14
 * - 0b01110 - Bus clock filter count is 15
 * - 0b01111 - Bus clock filter count is 16
 * - 0b10000 - Bus clock filter count is 17
 * - 0b10001 - Bus clock filter count is 18
 * - 0b10010 - Bus clock filter count is 19
 * - 0b10011 - Bus clock filter count is 20
 * - 0b10100 - Bus clock filter count is 21
 * - 0b10101 - Bus clock filter count is 22
 * - 0b10110 - Bus clock filter count is 23
 * - 0b10111 - Bus clock filter count is 24
 * - 0b11000 - Bus clock filter count is 25
 * - 0b11001 - Bus clock filter count is 26
 * - 0b11010 - Bus clock filter count is 27
 * - 0b11011 - Bus clock filter count is 28
 * - 0b11100 - Bus clock filter count is 29
 * - 0b11101 - Bus clock filter count is 30
 * - 0b11110 - Bus clock filter count is 31
 * - 0b11111 - Bus clock filter count is 32
 */
/*@{*/
/*! @brief Read current value of the RCM_RPFW_RSTFLTSEL field. */
#define RCM_RD_RPFW_RSTFLTSEL(base) ((RCM_RPFW_REG(base) & RCM_RPFW_RSTFLTSEL_MASK) >> RCM_RPFW_RSTFLTSEL_SHIFT)
#define RCM_BRD_RPFW_RSTFLTSEL(base) (BME_UBFX8(&RCM_RPFW_REG(base), RCM_RPFW_RSTFLTSEL_SHIFT, RCM_RPFW_RSTFLTSEL_WIDTH))

/*! @brief Set the RSTFLTSEL field to a new value. */
#define RCM_WR_RPFW_RSTFLTSEL(base, value) (RCM_RMW_RPFW(base, RCM_RPFW_RSTFLTSEL_MASK, RCM_RPFW_RSTFLTSEL(value)))
#define RCM_BWR_RPFW_RSTFLTSEL(base, value) (BME_BFI8(&RCM_RPFW_REG(base), ((uint8_t)(value) << RCM_RPFW_RSTFLTSEL_SHIFT), RCM_RPFW_RSTFLTSEL_SHIFT, RCM_RPFW_RSTFLTSEL_WIDTH))
/*@}*/

/*******************************************************************************
 * RCM_FM - Force Mode Register
 ******************************************************************************/

/*!
 * @brief RCM_FM - Force Mode Register (RW)
 *
 * Reset value: 0x00U
 *
 * The reset values of the bits in the FORCEROM field are for Chip POR only.
 * They are unaffected by other reset types.
 */
/*!
 * @name Constants and macros for entire RCM_FM register
 */
/*@{*/
#define RCM_RD_FM(base)          (RCM_FM_REG(base))
#define RCM_WR_FM(base, value)   (RCM_FM_REG(base) = (value))
#define RCM_RMW_FM(base, mask, value) (RCM_WR_FM(base, (RCM_RD_FM(base) & ~(mask)) | (value)))
#define RCM_SET_FM(base, value)  (BME_OR8(&RCM_FM_REG(base), (uint8_t)(value)))
#define RCM_CLR_FM(base, value)  (BME_AND8(&RCM_FM_REG(base), (uint8_t)(~(value))))
#define RCM_TOG_FM(base, value)  (BME_XOR8(&RCM_FM_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual RCM_FM bitfields
 */

/*!
 * @name Register RCM_FM, field FORCEROM[2:1] (RW)
 *
 * When either bit is set, will force boot from ROM during all subsequent system
 * resets.
 *
 * Values:
 * - 0b00 - No effect
 * - 0b01 - Force boot from ROM with RCM_MR[1] set.
 * - 0b10 - Force boot from ROM with RCM_MR[2] set.
 * - 0b11 - Force boot from ROM with RCM_MR[2:1] set.
 */
/*@{*/
/*! @brief Read current value of the RCM_FM_FORCEROM field. */
#define RCM_RD_FM_FORCEROM(base) ((RCM_FM_REG(base) & RCM_FM_FORCEROM_MASK) >> RCM_FM_FORCEROM_SHIFT)
#define RCM_BRD_FM_FORCEROM(base) (BME_UBFX8(&RCM_FM_REG(base), RCM_FM_FORCEROM_SHIFT, RCM_FM_FORCEROM_WIDTH))

/*! @brief Set the FORCEROM field to a new value. */
#define RCM_WR_FM_FORCEROM(base, value) (RCM_RMW_FM(base, RCM_FM_FORCEROM_MASK, RCM_FM_FORCEROM(value)))
#define RCM_BWR_FM_FORCEROM(base, value) (BME_BFI8(&RCM_FM_REG(base), ((uint8_t)(value) << RCM_FM_FORCEROM_SHIFT), RCM_FM_FORCEROM_SHIFT, RCM_FM_FORCEROM_WIDTH))
/*@}*/

/*******************************************************************************
 * RCM_MR - Mode Register
 ******************************************************************************/

/*!
 * @brief RCM_MR - Mode Register (RW)
 *
 * Reset value: 0x00U
 *
 * This register includes status flags to indicate the state of the mode pins
 * during the last Chip Reset.
 */
/*!
 * @name Constants and macros for entire RCM_MR register
 */
/*@{*/
#define RCM_RD_MR(base)          (RCM_MR_REG(base))
#define RCM_WR_MR(base, value)   (RCM_MR_REG(base) = (value))
#define RCM_RMW_MR(base, mask, value) (RCM_WR_MR(base, (RCM_RD_MR(base) & ~(mask)) | (value)))
#define RCM_SET_MR(base, value)  (BME_OR8(&RCM_MR_REG(base), (uint8_t)(value)))
#define RCM_CLR_MR(base, value)  (BME_AND8(&RCM_MR_REG(base), (uint8_t)(~(value))))
#define RCM_TOG_MR(base, value)  (BME_XOR8(&RCM_MR_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual RCM_MR bitfields
 */

/*!
 * @name Register RCM_MR, field BOOTROM[2:1] (W1C)
 *
 * Indicates the boot source, the boot source remains set until the next System
 * Reset or software can write logic one to clear the corresponding mode bit.
 * While either bit is set, the NMI input is disabled and the vector table is
 * relocated to the ROM base address at 0x1C00_0000. These bits should be cleared by
 * writing logic one before executing any code from either Flash or SRAM.
 *
 * Values:
 * - 0b00 - Boot from Flash
 * - 0b01 - Boot from ROM due to BOOTCFG0 pin assertion
 * - 0b10 - Boot form ROM due to FOPT[7] configuration
 * - 0b11 - Boot from ROM due to both BOOTCFG0 pin assertion and FOPT[7]
 *     configuration
 */
/*@{*/
/*! @brief Read current value of the RCM_MR_BOOTROM field. */
#define RCM_RD_MR_BOOTROM(base) ((RCM_MR_REG(base) & RCM_MR_BOOTROM_MASK) >> RCM_MR_BOOTROM_SHIFT)
#define RCM_BRD_MR_BOOTROM(base) (BME_UBFX8(&RCM_MR_REG(base), RCM_MR_BOOTROM_SHIFT, RCM_MR_BOOTROM_WIDTH))

/*! @brief Set the BOOTROM field to a new value. */
#define RCM_WR_MR_BOOTROM(base, value) (RCM_RMW_MR(base, RCM_MR_BOOTROM_MASK, RCM_MR_BOOTROM(value)))
#define RCM_BWR_MR_BOOTROM(base, value) (BME_BFI8(&RCM_MR_REG(base), ((uint8_t)(value) << RCM_MR_BOOTROM_SHIFT), RCM_MR_BOOTROM_SHIFT, RCM_MR_BOOTROM_WIDTH))
/*@}*/

/*******************************************************************************
 * RCM_SSRS0 - Sticky System Reset Status Register 0
 ******************************************************************************/

/*!
 * @brief RCM_SSRS0 - Sticky System Reset Status Register 0 (RW)
 *
 * Reset value: 0x82U
 *
 * This register includes status flags to indicate all reset sources since the
 * last POR, LVD or VLLS Wakeup that have not been cleared by software. Software
 * can clear the status flags by writing a logic one to a flag.
 */
/*!
 * @name Constants and macros for entire RCM_SSRS0 register
 */
/*@{*/
#define RCM_RD_SSRS0(base)       (RCM_SSRS0_REG(base))
#define RCM_WR_SSRS0(base, value) (RCM_SSRS0_REG(base) = (value))
#define RCM_RMW_SSRS0(base, mask, value) (RCM_WR_SSRS0(base, (RCM_RD_SSRS0(base) & ~(mask)) | (value)))
#define RCM_SET_SSRS0(base, value) (BME_OR8(&RCM_SSRS0_REG(base), (uint8_t)(value)))
#define RCM_CLR_SSRS0(base, value) (BME_AND8(&RCM_SSRS0_REG(base), (uint8_t)(~(value))))
#define RCM_TOG_SSRS0(base, value) (BME_XOR8(&RCM_SSRS0_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual RCM_SSRS0 bitfields
 */

/*!
 * @name Register RCM_SSRS0, field SWAKEUP[0] (W1C)
 *
 * Indicates a reset has been caused by an enabled LLWU modulewakeup source
 * while the chip was in a low leakage mode. In LLS mode, the RESET pin is the only
 * wakeup source that can cause this reset. Any enabled wakeup source in a VLLSx
 * mode causes a reset.
 *
 * Values:
 * - 0b0 - Reset not caused by LLWU module wakeup source
 * - 0b1 - Reset caused by LLWU module wakeup source
 */
/*@{*/
/*! @brief Read current value of the RCM_SSRS0_SWAKEUP field. */
#define RCM_RD_SSRS0_SWAKEUP(base) ((RCM_SSRS0_REG(base) & RCM_SSRS0_SWAKEUP_MASK) >> RCM_SSRS0_SWAKEUP_SHIFT)
#define RCM_BRD_SSRS0_SWAKEUP(base) (BME_UBFX8(&RCM_SSRS0_REG(base), RCM_SSRS0_SWAKEUP_SHIFT, RCM_SSRS0_SWAKEUP_WIDTH))

/*! @brief Set the SWAKEUP field to a new value. */
#define RCM_WR_SSRS0_SWAKEUP(base, value) (RCM_RMW_SSRS0(base, (RCM_SSRS0_SWAKEUP_MASK | RCM_SSRS0_SLVD_MASK | RCM_SSRS0_SLOC_MASK | RCM_SSRS0_SLOL_MASK | RCM_SSRS0_SWDOG_MASK | RCM_SSRS0_SPIN_MASK | RCM_SSRS0_SPOR_MASK), RCM_SSRS0_SWAKEUP(value)))
#define RCM_BWR_SSRS0_SWAKEUP(base, value) (BME_BFI8(&RCM_SSRS0_REG(base), ((uint8_t)(value) << RCM_SSRS0_SWAKEUP_SHIFT), RCM_SSRS0_SWAKEUP_SHIFT, RCM_SSRS0_SWAKEUP_WIDTH))
/*@}*/

/*!
 * @name Register RCM_SSRS0, field SLVD[1] (W1C)
 *
 * If PMC_LVDSC1[LVDRE] is set and the supply drops below the LVD trip voltage,
 * an LVD reset occurs. This field is also set by POR.
 *
 * Values:
 * - 0b0 - Reset not caused by LVD trip or POR
 * - 0b1 - Reset caused by LVD trip or POR
 */
/*@{*/
/*! @brief Read current value of the RCM_SSRS0_SLVD field. */
#define RCM_RD_SSRS0_SLVD(base) ((RCM_SSRS0_REG(base) & RCM_SSRS0_SLVD_MASK) >> RCM_SSRS0_SLVD_SHIFT)
#define RCM_BRD_SSRS0_SLVD(base) (BME_UBFX8(&RCM_SSRS0_REG(base), RCM_SSRS0_SLVD_SHIFT, RCM_SSRS0_SLVD_WIDTH))

/*! @brief Set the SLVD field to a new value. */
#define RCM_WR_SSRS0_SLVD(base, value) (RCM_RMW_SSRS0(base, (RCM_SSRS0_SLVD_MASK | RCM_SSRS0_SWAKEUP_MASK | RCM_SSRS0_SLOC_MASK | RCM_SSRS0_SLOL_MASK | RCM_SSRS0_SWDOG_MASK | RCM_SSRS0_SPIN_MASK | RCM_SSRS0_SPOR_MASK), RCM_SSRS0_SLVD(value)))
#define RCM_BWR_SSRS0_SLVD(base, value) (BME_BFI8(&RCM_SSRS0_REG(base), ((uint8_t)(value) << RCM_SSRS0_SLVD_SHIFT), RCM_SSRS0_SLVD_SHIFT, RCM_SSRS0_SLVD_WIDTH))
/*@}*/

/*!
 * @name Register RCM_SSRS0, field SLOC[2] (W1C)
 *
 * Indicates a reset has been caused by a loss of external clock. The MCG clock
 * monitor must be enabled for a loss of clock to be detected. Refer to the
 * detailed MCG description for information on enabling the clock monitor.
 *
 * Values:
 * - 0b0 - Reset not caused by a loss of external clock.
 * - 0b1 - Reset caused by a loss of external clock.
 */
/*@{*/
/*! @brief Read current value of the RCM_SSRS0_SLOC field. */
#define RCM_RD_SSRS0_SLOC(base) ((RCM_SSRS0_REG(base) & RCM_SSRS0_SLOC_MASK) >> RCM_SSRS0_SLOC_SHIFT)
#define RCM_BRD_SSRS0_SLOC(base) (BME_UBFX8(&RCM_SSRS0_REG(base), RCM_SSRS0_SLOC_SHIFT, RCM_SSRS0_SLOC_WIDTH))

/*! @brief Set the SLOC field to a new value. */
#define RCM_WR_SSRS0_SLOC(base, value) (RCM_RMW_SSRS0(base, (RCM_SSRS0_SLOC_MASK | RCM_SSRS0_SWAKEUP_MASK | RCM_SSRS0_SLVD_MASK | RCM_SSRS0_SLOL_MASK | RCM_SSRS0_SWDOG_MASK | RCM_SSRS0_SPIN_MASK | RCM_SSRS0_SPOR_MASK), RCM_SSRS0_SLOC(value)))
#define RCM_BWR_SSRS0_SLOC(base, value) (BME_BFI8(&RCM_SSRS0_REG(base), ((uint8_t)(value) << RCM_SSRS0_SLOC_SHIFT), RCM_SSRS0_SLOC_SHIFT, RCM_SSRS0_SLOC_WIDTH))
/*@}*/

/*!
 * @name Register RCM_SSRS0, field SLOL[3] (W1C)
 *
 * Indicates a reset has been caused by a loss of lock in the MCG PLL. See the
 * MCG description for information on the loss-of-clock event.
 *
 * Values:
 * - 0b0 - Reset not caused by a loss of lock in the PLL
 * - 0b1 - Reset caused by a loss of lock in the PLL
 */
/*@{*/
/*! @brief Read current value of the RCM_SSRS0_SLOL field. */
#define RCM_RD_SSRS0_SLOL(base) ((RCM_SSRS0_REG(base) & RCM_SSRS0_SLOL_MASK) >> RCM_SSRS0_SLOL_SHIFT)
#define RCM_BRD_SSRS0_SLOL(base) (BME_UBFX8(&RCM_SSRS0_REG(base), RCM_SSRS0_SLOL_SHIFT, RCM_SSRS0_SLOL_WIDTH))

/*! @brief Set the SLOL field to a new value. */
#define RCM_WR_SSRS0_SLOL(base, value) (RCM_RMW_SSRS0(base, (RCM_SSRS0_SLOL_MASK | RCM_SSRS0_SWAKEUP_MASK | RCM_SSRS0_SLVD_MASK | RCM_SSRS0_SLOC_MASK | RCM_SSRS0_SWDOG_MASK | RCM_SSRS0_SPIN_MASK | RCM_SSRS0_SPOR_MASK), RCM_SSRS0_SLOL(value)))
#define RCM_BWR_SSRS0_SLOL(base, value) (BME_BFI8(&RCM_SSRS0_REG(base), ((uint8_t)(value) << RCM_SSRS0_SLOL_SHIFT), RCM_SSRS0_SLOL_SHIFT, RCM_SSRS0_SLOL_WIDTH))
/*@}*/

/*!
 * @name Register RCM_SSRS0, field SWDOG[5] (W1C)
 *
 * Indicates a reset has been caused by the watchdog timer timing out. This
 * reset source can be blocked by disabling the watchdog.
 *
 * Values:
 * - 0b0 - Reset not caused by watchdog timeout
 * - 0b1 - Reset caused by watchdog timeout
 */
/*@{*/
/*! @brief Read current value of the RCM_SSRS0_SWDOG field. */
#define RCM_RD_SSRS0_SWDOG(base) ((RCM_SSRS0_REG(base) & RCM_SSRS0_SWDOG_MASK) >> RCM_SSRS0_SWDOG_SHIFT)
#define RCM_BRD_SSRS0_SWDOG(base) (BME_UBFX8(&RCM_SSRS0_REG(base), RCM_SSRS0_SWDOG_SHIFT, RCM_SSRS0_SWDOG_WIDTH))

/*! @brief Set the SWDOG field to a new value. */
#define RCM_WR_SSRS0_SWDOG(base, value) (RCM_RMW_SSRS0(base, (RCM_SSRS0_SWDOG_MASK | RCM_SSRS0_SWAKEUP_MASK | RCM_SSRS0_SLVD_MASK | RCM_SSRS0_SLOC_MASK | RCM_SSRS0_SLOL_MASK | RCM_SSRS0_SPIN_MASK | RCM_SSRS0_SPOR_MASK), RCM_SSRS0_SWDOG(value)))
#define RCM_BWR_SSRS0_SWDOG(base, value) (BME_BFI8(&RCM_SSRS0_REG(base), ((uint8_t)(value) << RCM_SSRS0_SWDOG_SHIFT), RCM_SSRS0_SWDOG_SHIFT, RCM_SSRS0_SWDOG_WIDTH))
/*@}*/

/*!
 * @name Register RCM_SSRS0, field SPIN[6] (W1C)
 *
 * Indicates a reset has been caused by an active-low level on the external
 * RESET pin.
 *
 * Values:
 * - 0b0 - Reset not caused by external reset pin
 * - 0b1 - Reset caused by external reset pin
 */
/*@{*/
/*! @brief Read current value of the RCM_SSRS0_SPIN field. */
#define RCM_RD_SSRS0_SPIN(base) ((RCM_SSRS0_REG(base) & RCM_SSRS0_SPIN_MASK) >> RCM_SSRS0_SPIN_SHIFT)
#define RCM_BRD_SSRS0_SPIN(base) (BME_UBFX8(&RCM_SSRS0_REG(base), RCM_SSRS0_SPIN_SHIFT, RCM_SSRS0_SPIN_WIDTH))

/*! @brief Set the SPIN field to a new value. */
#define RCM_WR_SSRS0_SPIN(base, value) (RCM_RMW_SSRS0(base, (RCM_SSRS0_SPIN_MASK | RCM_SSRS0_SWAKEUP_MASK | RCM_SSRS0_SLVD_MASK | RCM_SSRS0_SLOC_MASK | RCM_SSRS0_SLOL_MASK | RCM_SSRS0_SWDOG_MASK | RCM_SSRS0_SPOR_MASK), RCM_SSRS0_SPIN(value)))
#define RCM_BWR_SSRS0_SPIN(base, value) (BME_BFI8(&RCM_SSRS0_REG(base), ((uint8_t)(value) << RCM_SSRS0_SPIN_SHIFT), RCM_SSRS0_SPIN_SHIFT, RCM_SSRS0_SPIN_WIDTH))
/*@}*/

/*!
 * @name Register RCM_SSRS0, field SPOR[7] (W1C)
 *
 * Indicates a reset has been caused by the power-on detection logic. Because
 * the internal supply voltage was ramping up at the time, the low-voltage reset
 * (LVD) status bit is also set to indicate that the reset occurred while the
 * internal supply was below the LVD threshold.
 *
 * Values:
 * - 0b0 - Reset not caused by POR
 * - 0b1 - Reset caused by POR
 */
/*@{*/
/*! @brief Read current value of the RCM_SSRS0_SPOR field. */
#define RCM_RD_SSRS0_SPOR(base) ((RCM_SSRS0_REG(base) & RCM_SSRS0_SPOR_MASK) >> RCM_SSRS0_SPOR_SHIFT)
#define RCM_BRD_SSRS0_SPOR(base) (BME_UBFX8(&RCM_SSRS0_REG(base), RCM_SSRS0_SPOR_SHIFT, RCM_SSRS0_SPOR_WIDTH))

/*! @brief Set the SPOR field to a new value. */
#define RCM_WR_SSRS0_SPOR(base, value) (RCM_RMW_SSRS0(base, (RCM_SSRS0_SPOR_MASK | RCM_SSRS0_SWAKEUP_MASK | RCM_SSRS0_SLVD_MASK | RCM_SSRS0_SLOC_MASK | RCM_SSRS0_SLOL_MASK | RCM_SSRS0_SWDOG_MASK | RCM_SSRS0_SPIN_MASK), RCM_SSRS0_SPOR(value)))
#define RCM_BWR_SSRS0_SPOR(base, value) (BME_BFI8(&RCM_SSRS0_REG(base), ((uint8_t)(value) << RCM_SSRS0_SPOR_SHIFT), RCM_SSRS0_SPOR_SHIFT, RCM_SSRS0_SPOR_WIDTH))
/*@}*/

/*******************************************************************************
 * RCM_SSRS1 - Sticky System Reset Status Register 1
 ******************************************************************************/

/*!
 * @brief RCM_SSRS1 - Sticky System Reset Status Register 1 (RW)
 *
 * Reset value: 0x00U
 *
 * This register includes status flags to indicate all reset sources since the
 * last POR, LVD or VLLS Wakeup that have not been cleared by software. Software
 * can clear the status flags by writing a logic one to a flag.
 */
/*!
 * @name Constants and macros for entire RCM_SSRS1 register
 */
/*@{*/
#define RCM_RD_SSRS1(base)       (RCM_SSRS1_REG(base))
#define RCM_WR_SSRS1(base, value) (RCM_SSRS1_REG(base) = (value))
#define RCM_RMW_SSRS1(base, mask, value) (RCM_WR_SSRS1(base, (RCM_RD_SSRS1(base) & ~(mask)) | (value)))
#define RCM_SET_SSRS1(base, value) (BME_OR8(&RCM_SSRS1_REG(base), (uint8_t)(value)))
#define RCM_CLR_SSRS1(base, value) (BME_AND8(&RCM_SSRS1_REG(base), (uint8_t)(~(value))))
#define RCM_TOG_SSRS1(base, value) (BME_XOR8(&RCM_SSRS1_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual RCM_SSRS1 bitfields
 */

/*!
 * @name Register RCM_SSRS1, field SJTAG[0] (W1C)
 *
 * Indicates a reset has been caused by JTAG selection of certain IR codes:
 * EXTEST, HIGHZ, and CLAMP.
 *
 * Values:
 * - 0b0 - Reset not caused by JTAG
 * - 0b1 - Reset caused by JTAG
 */
/*@{*/
/*! @brief Read current value of the RCM_SSRS1_SJTAG field. */
#define RCM_RD_SSRS1_SJTAG(base) ((RCM_SSRS1_REG(base) & RCM_SSRS1_SJTAG_MASK) >> RCM_SSRS1_SJTAG_SHIFT)
#define RCM_BRD_SSRS1_SJTAG(base) (BME_UBFX8(&RCM_SSRS1_REG(base), RCM_SSRS1_SJTAG_SHIFT, RCM_SSRS1_SJTAG_WIDTH))

/*! @brief Set the SJTAG field to a new value. */
#define RCM_WR_SSRS1_SJTAG(base, value) (RCM_RMW_SSRS1(base, (RCM_SSRS1_SJTAG_MASK | RCM_SSRS1_SLOCKUP_MASK | RCM_SSRS1_SSW_MASK | RCM_SSRS1_SMDM_AP_MASK | RCM_SSRS1_SSACKERR_MASK), RCM_SSRS1_SJTAG(value)))
#define RCM_BWR_SSRS1_SJTAG(base, value) (BME_BFI8(&RCM_SSRS1_REG(base), ((uint8_t)(value) << RCM_SSRS1_SJTAG_SHIFT), RCM_SSRS1_SJTAG_SHIFT, RCM_SSRS1_SJTAG_WIDTH))
/*@}*/

/*!
 * @name Register RCM_SSRS1, field SLOCKUP[1] (W1C)
 *
 * Indicates a reset has been caused by the ARM core indication of a LOCKUP
 * event.
 *
 * Values:
 * - 0b0 - Reset not caused by core LOCKUP event
 * - 0b1 - Reset caused by core LOCKUP event
 */
/*@{*/
/*! @brief Read current value of the RCM_SSRS1_SLOCKUP field. */
#define RCM_RD_SSRS1_SLOCKUP(base) ((RCM_SSRS1_REG(base) & RCM_SSRS1_SLOCKUP_MASK) >> RCM_SSRS1_SLOCKUP_SHIFT)
#define RCM_BRD_SSRS1_SLOCKUP(base) (BME_UBFX8(&RCM_SSRS1_REG(base), RCM_SSRS1_SLOCKUP_SHIFT, RCM_SSRS1_SLOCKUP_WIDTH))

/*! @brief Set the SLOCKUP field to a new value. */
#define RCM_WR_SSRS1_SLOCKUP(base, value) (RCM_RMW_SSRS1(base, (RCM_SSRS1_SLOCKUP_MASK | RCM_SSRS1_SJTAG_MASK | RCM_SSRS1_SSW_MASK | RCM_SSRS1_SMDM_AP_MASK | RCM_SSRS1_SSACKERR_MASK), RCM_SSRS1_SLOCKUP(value)))
#define RCM_BWR_SSRS1_SLOCKUP(base, value) (BME_BFI8(&RCM_SSRS1_REG(base), ((uint8_t)(value) << RCM_SSRS1_SLOCKUP_SHIFT), RCM_SSRS1_SLOCKUP_SHIFT, RCM_SSRS1_SLOCKUP_WIDTH))
/*@}*/

/*!
 * @name Register RCM_SSRS1, field SSW[2] (W1C)
 *
 * Indicates a reset has been caused by software setting of SYSRESETREQ bit in
 * Application Interrupt and Reset Control Register in the ARM core.
 *
 * Values:
 * - 0b0 - Reset not caused by software setting of SYSRESETREQ bit
 * - 0b1 - Reset caused by software setting of SYSRESETREQ bit
 */
/*@{*/
/*! @brief Read current value of the RCM_SSRS1_SSW field. */
#define RCM_RD_SSRS1_SSW(base) ((RCM_SSRS1_REG(base) & RCM_SSRS1_SSW_MASK) >> RCM_SSRS1_SSW_SHIFT)
#define RCM_BRD_SSRS1_SSW(base) (BME_UBFX8(&RCM_SSRS1_REG(base), RCM_SSRS1_SSW_SHIFT, RCM_SSRS1_SSW_WIDTH))

/*! @brief Set the SSW field to a new value. */
#define RCM_WR_SSRS1_SSW(base, value) (RCM_RMW_SSRS1(base, (RCM_SSRS1_SSW_MASK | RCM_SSRS1_SJTAG_MASK | RCM_SSRS1_SLOCKUP_MASK | RCM_SSRS1_SMDM_AP_MASK | RCM_SSRS1_SSACKERR_MASK), RCM_SSRS1_SSW(value)))
#define RCM_BWR_SSRS1_SSW(base, value) (BME_BFI8(&RCM_SSRS1_REG(base), ((uint8_t)(value) << RCM_SSRS1_SSW_SHIFT), RCM_SSRS1_SSW_SHIFT, RCM_SSRS1_SSW_WIDTH))
/*@}*/

/*!
 * @name Register RCM_SSRS1, field SMDM_AP[3] (W1C)
 *
 * Indicates a reset has been caused by the host debugger system setting of the
 * System Reset Request bit in the MDM-AP Control Register.
 *
 * Values:
 * - 0b0 - Reset not caused by host debugger system setting of the System Reset
 *     Request bit
 * - 0b1 - Reset caused by host debugger system setting of the System Reset
 *     Request bit
 */
/*@{*/
/*! @brief Read current value of the RCM_SSRS1_SMDM_AP field. */
#define RCM_RD_SSRS1_SMDM_AP(base) ((RCM_SSRS1_REG(base) & RCM_SSRS1_SMDM_AP_MASK) >> RCM_SSRS1_SMDM_AP_SHIFT)
#define RCM_BRD_SSRS1_SMDM_AP(base) (BME_UBFX8(&RCM_SSRS1_REG(base), RCM_SSRS1_SMDM_AP_SHIFT, RCM_SSRS1_SMDM_AP_WIDTH))

/*! @brief Set the SMDM_AP field to a new value. */
#define RCM_WR_SSRS1_SMDM_AP(base, value) (RCM_RMW_SSRS1(base, (RCM_SSRS1_SMDM_AP_MASK | RCM_SSRS1_SJTAG_MASK | RCM_SSRS1_SLOCKUP_MASK | RCM_SSRS1_SSW_MASK | RCM_SSRS1_SSACKERR_MASK), RCM_SSRS1_SMDM_AP(value)))
#define RCM_BWR_SSRS1_SMDM_AP(base, value) (BME_BFI8(&RCM_SSRS1_REG(base), ((uint8_t)(value) << RCM_SSRS1_SMDM_AP_SHIFT), RCM_SSRS1_SMDM_AP_SHIFT, RCM_SSRS1_SMDM_AP_WIDTH))
/*@}*/

/*!
 * @name Register RCM_SSRS1, field SSACKERR[5] (W1C)
 *
 * Indicates that after an attempt to enter Stop mode, a reset has been caused
 * by a failure of one or more peripherals to acknowledge within approximately one
 * second to enter stop mode.
 *
 * Values:
 * - 0b0 - Reset not caused by peripheral failure to acknowledge attempt to
 *     enter stop mode
 * - 0b1 - Reset caused by peripheral failure to acknowledge attempt to enter
 *     stop mode
 */
/*@{*/
/*! @brief Read current value of the RCM_SSRS1_SSACKERR field. */
#define RCM_RD_SSRS1_SSACKERR(base) ((RCM_SSRS1_REG(base) & RCM_SSRS1_SSACKERR_MASK) >> RCM_SSRS1_SSACKERR_SHIFT)
#define RCM_BRD_SSRS1_SSACKERR(base) (BME_UBFX8(&RCM_SSRS1_REG(base), RCM_SSRS1_SSACKERR_SHIFT, RCM_SSRS1_SSACKERR_WIDTH))

/*! @brief Set the SSACKERR field to a new value. */
#define RCM_WR_SSRS1_SSACKERR(base, value) (RCM_RMW_SSRS1(base, (RCM_SSRS1_SSACKERR_MASK | RCM_SSRS1_SJTAG_MASK | RCM_SSRS1_SLOCKUP_MASK | RCM_SSRS1_SSW_MASK | RCM_SSRS1_SMDM_AP_MASK), RCM_SSRS1_SSACKERR(value)))
#define RCM_BWR_SSRS1_SSACKERR(base, value) (BME_BFI8(&RCM_SSRS1_REG(base), ((uint8_t)(value) << RCM_SSRS1_SSACKERR_SHIFT), RCM_SSRS1_SSACKERR_SHIFT, RCM_SSRS1_SSACKERR_WIDTH))
/*@}*/

/*
 * MK82F25615 RFSYS
 *
 * System register file
 *
 * Registers defined in this header file:
 * - RFSYS_REG - Register file register
 */

#define RFSYS_INSTANCE_COUNT (1U) /*!< Number of instances of the RFSYS module. */
#define RFSYS_IDX (0U) /*!< Instance number for RFSYS. */

/*******************************************************************************
 * RFSYS_REG - Register file register
 ******************************************************************************/

/*!
 * @brief RFSYS_REG - Register file register (RW)
 *
 * Reset value: 0x00000000U
 *
 * Each register can be accessed as 8-, 16-, or 32-bits.
 */
/*!
 * @name Constants and macros for entire RFSYS_REG register
 */
/*@{*/
#define RFSYS_RD_REG(base, index) (RFSYS_REG_REG(base, index))
#define RFSYS_WR_REG(base, index, value) (RFSYS_REG_REG(base, index) = (value))
#define RFSYS_RMW_REG(base, index, mask, value) (RFSYS_WR_REG(base, index, (RFSYS_RD_REG(base, index) & ~(mask)) | (value)))
#define RFSYS_SET_REG(base, index, value) (BME_OR32(&RFSYS_REG_REG(base, index), (uint32_t)(value)))
#define RFSYS_CLR_REG(base, index, value) (BME_AND32(&RFSYS_REG_REG(base, index), (uint32_t)(~(value))))
#define RFSYS_TOG_REG(base, index, value) (BME_XOR32(&RFSYS_REG_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual RFSYS_REG bitfields
 */

/*!
 * @name Register RFSYS_REG, field LL[7:0] (RW)
 *
 * Low lower byte
 */
/*@{*/
/*! @brief Read current value of the RFSYS_REG_LL field. */
#define RFSYS_RD_REG_LL(base, index) ((RFSYS_REG_REG(base, index) & RFSYS_REG_LL_MASK) >> RFSYS_REG_LL_SHIFT)
#define RFSYS_BRD_REG_LL(base, index) (BME_UBFX32(&RFSYS_REG_REG(base, index), RFSYS_REG_LL_SHIFT, RFSYS_REG_LL_WIDTH))

/*! @brief Set the LL field to a new value. */
#define RFSYS_WR_REG_LL(base, index, value) (RFSYS_RMW_REG(base, index, RFSYS_REG_LL_MASK, RFSYS_REG_LL(value)))
#define RFSYS_BWR_REG_LL(base, index, value) (BME_BFI32(&RFSYS_REG_REG(base, index), ((uint32_t)(value) << RFSYS_REG_LL_SHIFT), RFSYS_REG_LL_SHIFT, RFSYS_REG_LL_WIDTH))
/*@}*/

/*!
 * @name Register RFSYS_REG, field LH[15:8] (RW)
 *
 * Low higher byte
 */
/*@{*/
/*! @brief Read current value of the RFSYS_REG_LH field. */
#define RFSYS_RD_REG_LH(base, index) ((RFSYS_REG_REG(base, index) & RFSYS_REG_LH_MASK) >> RFSYS_REG_LH_SHIFT)
#define RFSYS_BRD_REG_LH(base, index) (BME_UBFX32(&RFSYS_REG_REG(base, index), RFSYS_REG_LH_SHIFT, RFSYS_REG_LH_WIDTH))

/*! @brief Set the LH field to a new value. */
#define RFSYS_WR_REG_LH(base, index, value) (RFSYS_RMW_REG(base, index, RFSYS_REG_LH_MASK, RFSYS_REG_LH(value)))
#define RFSYS_BWR_REG_LH(base, index, value) (BME_BFI32(&RFSYS_REG_REG(base, index), ((uint32_t)(value) << RFSYS_REG_LH_SHIFT), RFSYS_REG_LH_SHIFT, RFSYS_REG_LH_WIDTH))
/*@}*/

/*!
 * @name Register RFSYS_REG, field HL[23:16] (RW)
 *
 * High lower byte
 */
/*@{*/
/*! @brief Read current value of the RFSYS_REG_HL field. */
#define RFSYS_RD_REG_HL(base, index) ((RFSYS_REG_REG(base, index) & RFSYS_REG_HL_MASK) >> RFSYS_REG_HL_SHIFT)
#define RFSYS_BRD_REG_HL(base, index) (BME_UBFX32(&RFSYS_REG_REG(base, index), RFSYS_REG_HL_SHIFT, RFSYS_REG_HL_WIDTH))

/*! @brief Set the HL field to a new value. */
#define RFSYS_WR_REG_HL(base, index, value) (RFSYS_RMW_REG(base, index, RFSYS_REG_HL_MASK, RFSYS_REG_HL(value)))
#define RFSYS_BWR_REG_HL(base, index, value) (BME_BFI32(&RFSYS_REG_REG(base, index), ((uint32_t)(value) << RFSYS_REG_HL_SHIFT), RFSYS_REG_HL_SHIFT, RFSYS_REG_HL_WIDTH))
/*@}*/

/*!
 * @name Register RFSYS_REG, field HH[31:24] (RW)
 *
 * High higher byte
 */
/*@{*/
/*! @brief Read current value of the RFSYS_REG_HH field. */
#define RFSYS_RD_REG_HH(base, index) ((RFSYS_REG_REG(base, index) & RFSYS_REG_HH_MASK) >> RFSYS_REG_HH_SHIFT)
#define RFSYS_BRD_REG_HH(base, index) (BME_UBFX32(&RFSYS_REG_REG(base, index), RFSYS_REG_HH_SHIFT, RFSYS_REG_HH_WIDTH))

/*! @brief Set the HH field to a new value. */
#define RFSYS_WR_REG_HH(base, index, value) (RFSYS_RMW_REG(base, index, RFSYS_REG_HH_MASK, RFSYS_REG_HH(value)))
#define RFSYS_BWR_REG_HH(base, index, value) (BME_BFI32(&RFSYS_REG_REG(base, index), ((uint32_t)(value) << RFSYS_REG_HH_SHIFT), RFSYS_REG_HH_SHIFT, RFSYS_REG_HH_WIDTH))
/*@}*/

/*
 * MK82F25615 RFVBAT
 *
 * VBAT register file
 *
 * Registers defined in this header file:
 * - RFVBAT_REG - VBAT register file register
 */

#define RFVBAT_INSTANCE_COUNT (1U) /*!< Number of instances of the RFVBAT module. */
#define RFVBAT_IDX (0U) /*!< Instance number for RFVBAT. */

/*******************************************************************************
 * RFVBAT_REG - VBAT register file register
 ******************************************************************************/

/*!
 * @brief RFVBAT_REG - VBAT register file register (RW)
 *
 * Reset value: 0x00000000U
 *
 * Each register can be accessed as 8-, 16-, or 32-bits.
 */
/*!
 * @name Constants and macros for entire RFVBAT_REG register
 */
/*@{*/
#define RFVBAT_RD_REG(base, index) (RFVBAT_REG_REG(base, index))
#define RFVBAT_WR_REG(base, index, value) (RFVBAT_REG_REG(base, index) = (value))
#define RFVBAT_RMW_REG(base, index, mask, value) (RFVBAT_WR_REG(base, index, (RFVBAT_RD_REG(base, index) & ~(mask)) | (value)))
#define RFVBAT_SET_REG(base, index, value) (BME_OR32(&RFVBAT_REG_REG(base, index), (uint32_t)(value)))
#define RFVBAT_CLR_REG(base, index, value) (BME_AND32(&RFVBAT_REG_REG(base, index), (uint32_t)(~(value))))
#define RFVBAT_TOG_REG(base, index, value) (BME_XOR32(&RFVBAT_REG_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual RFVBAT_REG bitfields
 */

/*!
 * @name Register RFVBAT_REG, field LL[7:0] (RW)
 *
 * Low lower byte
 */
/*@{*/
/*! @brief Read current value of the RFVBAT_REG_LL field. */
#define RFVBAT_RD_REG_LL(base, index) ((RFVBAT_REG_REG(base, index) & RFVBAT_REG_LL_MASK) >> RFVBAT_REG_LL_SHIFT)
#define RFVBAT_BRD_REG_LL(base, index) (BME_UBFX32(&RFVBAT_REG_REG(base, index), RFVBAT_REG_LL_SHIFT, RFVBAT_REG_LL_WIDTH))

/*! @brief Set the LL field to a new value. */
#define RFVBAT_WR_REG_LL(base, index, value) (RFVBAT_RMW_REG(base, index, RFVBAT_REG_LL_MASK, RFVBAT_REG_LL(value)))
#define RFVBAT_BWR_REG_LL(base, index, value) (BME_BFI32(&RFVBAT_REG_REG(base, index), ((uint32_t)(value) << RFVBAT_REG_LL_SHIFT), RFVBAT_REG_LL_SHIFT, RFVBAT_REG_LL_WIDTH))
/*@}*/

/*!
 * @name Register RFVBAT_REG, field LH[15:8] (RW)
 *
 * Low higher byte
 */
/*@{*/
/*! @brief Read current value of the RFVBAT_REG_LH field. */
#define RFVBAT_RD_REG_LH(base, index) ((RFVBAT_REG_REG(base, index) & RFVBAT_REG_LH_MASK) >> RFVBAT_REG_LH_SHIFT)
#define RFVBAT_BRD_REG_LH(base, index) (BME_UBFX32(&RFVBAT_REG_REG(base, index), RFVBAT_REG_LH_SHIFT, RFVBAT_REG_LH_WIDTH))

/*! @brief Set the LH field to a new value. */
#define RFVBAT_WR_REG_LH(base, index, value) (RFVBAT_RMW_REG(base, index, RFVBAT_REG_LH_MASK, RFVBAT_REG_LH(value)))
#define RFVBAT_BWR_REG_LH(base, index, value) (BME_BFI32(&RFVBAT_REG_REG(base, index), ((uint32_t)(value) << RFVBAT_REG_LH_SHIFT), RFVBAT_REG_LH_SHIFT, RFVBAT_REG_LH_WIDTH))
/*@}*/

/*!
 * @name Register RFVBAT_REG, field HL[23:16] (RW)
 *
 * High lower byte
 */
/*@{*/
/*! @brief Read current value of the RFVBAT_REG_HL field. */
#define RFVBAT_RD_REG_HL(base, index) ((RFVBAT_REG_REG(base, index) & RFVBAT_REG_HL_MASK) >> RFVBAT_REG_HL_SHIFT)
#define RFVBAT_BRD_REG_HL(base, index) (BME_UBFX32(&RFVBAT_REG_REG(base, index), RFVBAT_REG_HL_SHIFT, RFVBAT_REG_HL_WIDTH))

/*! @brief Set the HL field to a new value. */
#define RFVBAT_WR_REG_HL(base, index, value) (RFVBAT_RMW_REG(base, index, RFVBAT_REG_HL_MASK, RFVBAT_REG_HL(value)))
#define RFVBAT_BWR_REG_HL(base, index, value) (BME_BFI32(&RFVBAT_REG_REG(base, index), ((uint32_t)(value) << RFVBAT_REG_HL_SHIFT), RFVBAT_REG_HL_SHIFT, RFVBAT_REG_HL_WIDTH))
/*@}*/

/*!
 * @name Register RFVBAT_REG, field HH[31:24] (RW)
 *
 * High higher byte
 */
/*@{*/
/*! @brief Read current value of the RFVBAT_REG_HH field. */
#define RFVBAT_RD_REG_HH(base, index) ((RFVBAT_REG_REG(base, index) & RFVBAT_REG_HH_MASK) >> RFVBAT_REG_HH_SHIFT)
#define RFVBAT_BRD_REG_HH(base, index) (BME_UBFX32(&RFVBAT_REG_REG(base, index), RFVBAT_REG_HH_SHIFT, RFVBAT_REG_HH_WIDTH))

/*! @brief Set the HH field to a new value. */
#define RFVBAT_WR_REG_HH(base, index, value) (RFVBAT_RMW_REG(base, index, RFVBAT_REG_HH_MASK, RFVBAT_REG_HH(value)))
#define RFVBAT_BWR_REG_HH(base, index, value) (BME_BFI32(&RFVBAT_REG_REG(base, index), ((uint32_t)(value) << RFVBAT_REG_HH_SHIFT), RFVBAT_REG_HH_SHIFT, RFVBAT_REG_HH_WIDTH))
/*@}*/

/*
 * MK82F25615 RTC
 *
 * Secure Real Time Clock
 *
 * Registers defined in this header file:
 * - RTC_TSR - RTC Time Seconds Register
 * - RTC_TPR - RTC Time Prescaler Register
 * - RTC_TAR - RTC Time Alarm Register
 * - RTC_TCR - RTC Time Compensation Register
 * - RTC_CR - RTC Control Register
 * - RTC_SR - RTC Status Register
 * - RTC_LR - RTC Lock Register
 * - RTC_IER - RTC Interrupt Enable Register
 * - RTC_WAR - RTC Write Access Register
 * - RTC_RAR - RTC Read Access Register
 */

#define RTC_INSTANCE_COUNT (1U) /*!< Number of instances of the RTC module. */
#define RTC_IDX (0U) /*!< Instance number for RTC. */

/*******************************************************************************
 * RTC_TSR - RTC Time Seconds Register
 ******************************************************************************/

/*!
 * @brief RTC_TSR - RTC Time Seconds Register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire RTC_TSR register
 */
/*@{*/
#define RTC_RD_TSR(base)         (RTC_TSR_REG(base))
#define RTC_WR_TSR(base, value)  (RTC_TSR_REG(base) = (value))
#define RTC_RMW_TSR(base, mask, value) (RTC_WR_TSR(base, (RTC_RD_TSR(base) & ~(mask)) | (value)))
#define RTC_SET_TSR(base, value) (BME_OR32(&RTC_TSR_REG(base), (uint32_t)(value)))
#define RTC_CLR_TSR(base, value) (BME_AND32(&RTC_TSR_REG(base), (uint32_t)(~(value))))
#define RTC_TOG_TSR(base, value) (BME_XOR32(&RTC_TSR_REG(base), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * RTC_TPR - RTC Time Prescaler Register
 ******************************************************************************/

/*!
 * @brief RTC_TPR - RTC Time Prescaler Register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire RTC_TPR register
 */
/*@{*/
#define RTC_RD_TPR(base)         (RTC_TPR_REG(base))
#define RTC_WR_TPR(base, value)  (RTC_TPR_REG(base) = (value))
#define RTC_RMW_TPR(base, mask, value) (RTC_WR_TPR(base, (RTC_RD_TPR(base) & ~(mask)) | (value)))
#define RTC_SET_TPR(base, value) (BME_OR32(&RTC_TPR_REG(base), (uint32_t)(value)))
#define RTC_CLR_TPR(base, value) (BME_AND32(&RTC_TPR_REG(base), (uint32_t)(~(value))))
#define RTC_TOG_TPR(base, value) (BME_XOR32(&RTC_TPR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual RTC_TPR bitfields
 */

/*!
 * @name Register RTC_TPR, field TPR[15:0] (RW)
 *
 * When the time counter is enabled, the TPR is read only and increments every
 * 32.768 kHz clock cycle. The time counter will read as zero when SR[TOF] or
 * SR[TIF] are set. When the time counter is disabled, the TPR can be read or
 * written. The TSR[TSR] increments when bit 14 of the TPR transitions from a logic one
 * to a logic zero.
 */
/*@{*/
/*! @brief Read current value of the RTC_TPR_TPR field. */
#define RTC_RD_TPR_TPR(base) ((RTC_TPR_REG(base) & RTC_TPR_TPR_MASK) >> RTC_TPR_TPR_SHIFT)
#define RTC_BRD_TPR_TPR(base) (RTC_RD_TPR_TPR(base))

/*! @brief Set the TPR field to a new value. */
#define RTC_WR_TPR_TPR(base, value) (RTC_RMW_TPR(base, RTC_TPR_TPR_MASK, RTC_TPR_TPR(value)))
#define RTC_BWR_TPR_TPR(base, value) (RTC_WR_TPR_TPR(base, value))
/*@}*/

/*******************************************************************************
 * RTC_TAR - RTC Time Alarm Register
 ******************************************************************************/

/*!
 * @brief RTC_TAR - RTC Time Alarm Register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire RTC_TAR register
 */
/*@{*/
#define RTC_RD_TAR(base)         (RTC_TAR_REG(base))
#define RTC_WR_TAR(base, value)  (RTC_TAR_REG(base) = (value))
#define RTC_RMW_TAR(base, mask, value) (RTC_WR_TAR(base, (RTC_RD_TAR(base) & ~(mask)) | (value)))
#define RTC_SET_TAR(base, value) (BME_OR32(&RTC_TAR_REG(base), (uint32_t)(value)))
#define RTC_CLR_TAR(base, value) (BME_AND32(&RTC_TAR_REG(base), (uint32_t)(~(value))))
#define RTC_TOG_TAR(base, value) (BME_XOR32(&RTC_TAR_REG(base), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * RTC_TCR - RTC Time Compensation Register
 ******************************************************************************/

/*!
 * @brief RTC_TCR - RTC Time Compensation Register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire RTC_TCR register
 */
/*@{*/
#define RTC_RD_TCR(base)         (RTC_TCR_REG(base))
#define RTC_WR_TCR(base, value)  (RTC_TCR_REG(base) = (value))
#define RTC_RMW_TCR(base, mask, value) (RTC_WR_TCR(base, (RTC_RD_TCR(base) & ~(mask)) | (value)))
#define RTC_SET_TCR(base, value) (BME_OR32(&RTC_TCR_REG(base), (uint32_t)(value)))
#define RTC_CLR_TCR(base, value) (BME_AND32(&RTC_TCR_REG(base), (uint32_t)(~(value))))
#define RTC_TOG_TCR(base, value) (BME_XOR32(&RTC_TCR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual RTC_TCR bitfields
 */

/*!
 * @name Register RTC_TCR, field TCR[7:0] (RW)
 *
 * Configures the number of 32.768 kHz clock cycles in each second. This
 * register is double buffered and writes do not take affect until the end of the
 * current compensation interval.
 *
 * Values:
 * - 0b10000000 - Time Prescaler Register overflows every 32896 clock cycles.
 * - 0b11111111 - Time Prescaler Register overflows every 32769 clock cycles.
 * - 0b00000000 - Time Prescaler Register overflows every 32768 clock cycles.
 * - 0b00000001 - Time Prescaler Register overflows every 32767 clock cycles.
 * - 0b01111111 - Time Prescaler Register overflows every 32641 clock cycles.
 */
/*@{*/
/*! @brief Read current value of the RTC_TCR_TCR field. */
#define RTC_RD_TCR_TCR(base) ((RTC_TCR_REG(base) & RTC_TCR_TCR_MASK) >> RTC_TCR_TCR_SHIFT)
#define RTC_BRD_TCR_TCR(base) (BME_UBFX32(&RTC_TCR_REG(base), RTC_TCR_TCR_SHIFT, RTC_TCR_TCR_WIDTH))

/*! @brief Set the TCR field to a new value. */
#define RTC_WR_TCR_TCR(base, value) (RTC_RMW_TCR(base, RTC_TCR_TCR_MASK, RTC_TCR_TCR(value)))
#define RTC_BWR_TCR_TCR(base, value) (BME_BFI32(&RTC_TCR_REG(base), ((uint32_t)(value) << RTC_TCR_TCR_SHIFT), RTC_TCR_TCR_SHIFT, RTC_TCR_TCR_WIDTH))
/*@}*/

/*!
 * @name Register RTC_TCR, field CIR[15:8] (RW)
 *
 * Configures the compensation interval in seconds from 1 to 256 to control how
 * frequently the TCR should adjust the number of 32.768 kHz cycles in each
 * second. The value written should be one less than the number of seconds. For
 * example, write zero to configure for a compensation interval of one second. This
 * register is double buffered and writes do not take affect until the end of the
 * current compensation interval.
 */
/*@{*/
/*! @brief Read current value of the RTC_TCR_CIR field. */
#define RTC_RD_TCR_CIR(base) ((RTC_TCR_REG(base) & RTC_TCR_CIR_MASK) >> RTC_TCR_CIR_SHIFT)
#define RTC_BRD_TCR_CIR(base) (BME_UBFX32(&RTC_TCR_REG(base), RTC_TCR_CIR_SHIFT, RTC_TCR_CIR_WIDTH))

/*! @brief Set the CIR field to a new value. */
#define RTC_WR_TCR_CIR(base, value) (RTC_RMW_TCR(base, RTC_TCR_CIR_MASK, RTC_TCR_CIR(value)))
#define RTC_BWR_TCR_CIR(base, value) (BME_BFI32(&RTC_TCR_REG(base), ((uint32_t)(value) << RTC_TCR_CIR_SHIFT), RTC_TCR_CIR_SHIFT, RTC_TCR_CIR_WIDTH))
/*@}*/

/*!
 * @name Register RTC_TCR, field TCV[23:16] (RO)
 *
 * Current value used by the compensation logic for the present second interval.
 * Updated once a second if the CIC equals 0 with the contents of the TCR field.
 * If the CIC does not equal zero then it is loaded with zero (compensation is
 * not enabled for that second increment).
 */
/*@{*/
/*! @brief Read current value of the RTC_TCR_TCV field. */
#define RTC_RD_TCR_TCV(base) ((RTC_TCR_REG(base) & RTC_TCR_TCV_MASK) >> RTC_TCR_TCV_SHIFT)
#define RTC_BRD_TCR_TCV(base) (BME_UBFX32(&RTC_TCR_REG(base), RTC_TCR_TCV_SHIFT, RTC_TCR_TCV_WIDTH))
/*@}*/

/*!
 * @name Register RTC_TCR, field CIC[31:24] (RO)
 *
 * Current value of the compensation interval counter. If the compensation
 * interval counter equals zero then it is loaded with the contents of the CIR. If the
 * CIC does not equal zero then it is decremented once a second.
 */
/*@{*/
/*! @brief Read current value of the RTC_TCR_CIC field. */
#define RTC_RD_TCR_CIC(base) ((RTC_TCR_REG(base) & RTC_TCR_CIC_MASK) >> RTC_TCR_CIC_SHIFT)
#define RTC_BRD_TCR_CIC(base) (BME_UBFX32(&RTC_TCR_REG(base), RTC_TCR_CIC_SHIFT, RTC_TCR_CIC_WIDTH))
/*@}*/

/*******************************************************************************
 * RTC_CR - RTC Control Register
 ******************************************************************************/

/*!
 * @brief RTC_CR - RTC Control Register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire RTC_CR register
 */
/*@{*/
#define RTC_RD_CR(base)          (RTC_CR_REG(base))
#define RTC_WR_CR(base, value)   (RTC_CR_REG(base) = (value))
#define RTC_RMW_CR(base, mask, value) (RTC_WR_CR(base, (RTC_RD_CR(base) & ~(mask)) | (value)))
#define RTC_SET_CR(base, value)  (BME_OR32(&RTC_CR_REG(base), (uint32_t)(value)))
#define RTC_CLR_CR(base, value)  (BME_AND32(&RTC_CR_REG(base), (uint32_t)(~(value))))
#define RTC_TOG_CR(base, value)  (BME_XOR32(&RTC_CR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual RTC_CR bitfields
 */

/*!
 * @name Register RTC_CR, field SWR[0] (RW)
 *
 * Values:
 * - 0b0 - No effect.
 * - 0b1 - Resets all RTC registers except for the SWR bit and the RTC_WAR and
 *     RTC_RAR registers . The SWR bit is cleared by VBAT POR and by software
 *     explicitly clearing it.
 */
/*@{*/
/*! @brief Read current value of the RTC_CR_SWR field. */
#define RTC_RD_CR_SWR(base)  ((RTC_CR_REG(base) & RTC_CR_SWR_MASK) >> RTC_CR_SWR_SHIFT)
#define RTC_BRD_CR_SWR(base) (BME_UBFX32(&RTC_CR_REG(base), RTC_CR_SWR_SHIFT, RTC_CR_SWR_WIDTH))

/*! @brief Set the SWR field to a new value. */
#define RTC_WR_CR_SWR(base, value) (RTC_RMW_CR(base, RTC_CR_SWR_MASK, RTC_CR_SWR(value)))
#define RTC_BWR_CR_SWR(base, value) (BME_BFI32(&RTC_CR_REG(base), ((uint32_t)(value) << RTC_CR_SWR_SHIFT), RTC_CR_SWR_SHIFT, RTC_CR_SWR_WIDTH))
/*@}*/

/*!
 * @name Register RTC_CR, field WPE[1] (RW)
 *
 * The wakeup pin is optional and not available on all devices.
 *
 * Values:
 * - 0b0 - Wakeup pin is disabled.
 * - 0b1 - Wakeup pin is enabled and wakeup pin asserts if the RTC interrupt
 *     asserts or the wakeup pin is turned on.
 */
/*@{*/
/*! @brief Read current value of the RTC_CR_WPE field. */
#define RTC_RD_CR_WPE(base)  ((RTC_CR_REG(base) & RTC_CR_WPE_MASK) >> RTC_CR_WPE_SHIFT)
#define RTC_BRD_CR_WPE(base) (BME_UBFX32(&RTC_CR_REG(base), RTC_CR_WPE_SHIFT, RTC_CR_WPE_WIDTH))

/*! @brief Set the WPE field to a new value. */
#define RTC_WR_CR_WPE(base, value) (RTC_RMW_CR(base, RTC_CR_WPE_MASK, RTC_CR_WPE(value)))
#define RTC_BWR_CR_WPE(base, value) (BME_BFI32(&RTC_CR_REG(base), ((uint32_t)(value) << RTC_CR_WPE_SHIFT), RTC_CR_WPE_SHIFT, RTC_CR_WPE_WIDTH))
/*@}*/

/*!
 * @name Register RTC_CR, field SUP[2] (RW)
 *
 * Values:
 * - 0b0 - Non-supervisor mode write accesses are not supported and generate a
 *     bus error.
 * - 0b1 - Non-supervisor mode write accesses are supported.
 */
/*@{*/
/*! @brief Read current value of the RTC_CR_SUP field. */
#define RTC_RD_CR_SUP(base)  ((RTC_CR_REG(base) & RTC_CR_SUP_MASK) >> RTC_CR_SUP_SHIFT)
#define RTC_BRD_CR_SUP(base) (BME_UBFX32(&RTC_CR_REG(base), RTC_CR_SUP_SHIFT, RTC_CR_SUP_WIDTH))

/*! @brief Set the SUP field to a new value. */
#define RTC_WR_CR_SUP(base, value) (RTC_RMW_CR(base, RTC_CR_SUP_MASK, RTC_CR_SUP(value)))
#define RTC_BWR_CR_SUP(base, value) (BME_BFI32(&RTC_CR_REG(base), ((uint32_t)(value) << RTC_CR_SUP_SHIFT), RTC_CR_SUP_SHIFT, RTC_CR_SUP_WIDTH))
/*@}*/

/*!
 * @name Register RTC_CR, field UM[3] (RW)
 *
 * Allows SR[TCE] to be written even when the Status Register is locked. When
 * set, the SR[TCE] can always be written if the SR[TIF] or SR[TOF] are set or if
 * the SR[TCE] is clear.
 *
 * Values:
 * - 0b0 - Registers cannot be written when locked.
 * - 0b1 - Registers can be written when locked under limited conditions.
 */
/*@{*/
/*! @brief Read current value of the RTC_CR_UM field. */
#define RTC_RD_CR_UM(base)   ((RTC_CR_REG(base) & RTC_CR_UM_MASK) >> RTC_CR_UM_SHIFT)
#define RTC_BRD_CR_UM(base)  (BME_UBFX32(&RTC_CR_REG(base), RTC_CR_UM_SHIFT, RTC_CR_UM_WIDTH))

/*! @brief Set the UM field to a new value. */
#define RTC_WR_CR_UM(base, value) (RTC_RMW_CR(base, RTC_CR_UM_MASK, RTC_CR_UM(value)))
#define RTC_BWR_CR_UM(base, value) (BME_BFI32(&RTC_CR_REG(base), ((uint32_t)(value) << RTC_CR_UM_SHIFT), RTC_CR_UM_SHIFT, RTC_CR_UM_WIDTH))
/*@}*/

/*!
 * @name Register RTC_CR, field WPS[4] (RW)
 *
 * The wakeup pin is optional and not available on all devices.
 *
 * Values:
 * - 0b0 - Wakeup pin asserts (active low, open drain) if the RTC interrupt
 *     asserts or the wakeup pin is turned on.
 * - 0b1 - Wakeup pin instead outputs the RTC 32kHz clock, provided the wakeup
 *     pin is turned on and the 32kHz clock is output to other peripherals.
 */
/*@{*/
/*! @brief Read current value of the RTC_CR_WPS field. */
#define RTC_RD_CR_WPS(base)  ((RTC_CR_REG(base) & RTC_CR_WPS_MASK) >> RTC_CR_WPS_SHIFT)
#define RTC_BRD_CR_WPS(base) (BME_UBFX32(&RTC_CR_REG(base), RTC_CR_WPS_SHIFT, RTC_CR_WPS_WIDTH))

/*! @brief Set the WPS field to a new value. */
#define RTC_WR_CR_WPS(base, value) (RTC_RMW_CR(base, RTC_CR_WPS_MASK, RTC_CR_WPS(value)))
#define RTC_BWR_CR_WPS(base, value) (BME_BFI32(&RTC_CR_REG(base), ((uint32_t)(value) << RTC_CR_WPS_SHIFT), RTC_CR_WPS_SHIFT, RTC_CR_WPS_WIDTH))
/*@}*/

/*!
 * @name Register RTC_CR, field OSCE[8] (RW)
 *
 * Values:
 * - 0b0 - 32.768 kHz oscillator is disabled.
 * - 0b1 - 32.768 kHz oscillator is enabled. After setting this bit, wait the
 *     oscillator startup time before enabling the time counter to allow the 32.768
 *     kHz clock time to stabilize.
 */
/*@{*/
/*! @brief Read current value of the RTC_CR_OSCE field. */
#define RTC_RD_CR_OSCE(base) ((RTC_CR_REG(base) & RTC_CR_OSCE_MASK) >> RTC_CR_OSCE_SHIFT)
#define RTC_BRD_CR_OSCE(base) (BME_UBFX32(&RTC_CR_REG(base), RTC_CR_OSCE_SHIFT, RTC_CR_OSCE_WIDTH))

/*! @brief Set the OSCE field to a new value. */
#define RTC_WR_CR_OSCE(base, value) (RTC_RMW_CR(base, RTC_CR_OSCE_MASK, RTC_CR_OSCE(value)))
#define RTC_BWR_CR_OSCE(base, value) (BME_BFI32(&RTC_CR_REG(base), ((uint32_t)(value) << RTC_CR_OSCE_SHIFT), RTC_CR_OSCE_SHIFT, RTC_CR_OSCE_WIDTH))
/*@}*/

/*!
 * @name Register RTC_CR, field CLKO[9] (RW)
 *
 * Values:
 * - 0b0 - The 32 kHz clock is output to other peripherals.
 * - 0b1 - The 32 kHz clock is not output to other peripherals.
 */
/*@{*/
/*! @brief Read current value of the RTC_CR_CLKO field. */
#define RTC_RD_CR_CLKO(base) ((RTC_CR_REG(base) & RTC_CR_CLKO_MASK) >> RTC_CR_CLKO_SHIFT)
#define RTC_BRD_CR_CLKO(base) (BME_UBFX32(&RTC_CR_REG(base), RTC_CR_CLKO_SHIFT, RTC_CR_CLKO_WIDTH))

/*! @brief Set the CLKO field to a new value. */
#define RTC_WR_CR_CLKO(base, value) (RTC_RMW_CR(base, RTC_CR_CLKO_MASK, RTC_CR_CLKO(value)))
#define RTC_BWR_CR_CLKO(base, value) (BME_BFI32(&RTC_CR_REG(base), ((uint32_t)(value) << RTC_CR_CLKO_SHIFT), RTC_CR_CLKO_SHIFT, RTC_CR_CLKO_WIDTH))
/*@}*/

/*!
 * @name Register RTC_CR, field SC16P[10] (RW)
 *
 * Values:
 * - 0b0 - Disable the load.
 * - 0b1 - Enable the additional load.
 */
/*@{*/
/*! @brief Read current value of the RTC_CR_SC16P field. */
#define RTC_RD_CR_SC16P(base) ((RTC_CR_REG(base) & RTC_CR_SC16P_MASK) >> RTC_CR_SC16P_SHIFT)
#define RTC_BRD_CR_SC16P(base) (BME_UBFX32(&RTC_CR_REG(base), RTC_CR_SC16P_SHIFT, RTC_CR_SC16P_WIDTH))

/*! @brief Set the SC16P field to a new value. */
#define RTC_WR_CR_SC16P(base, value) (RTC_RMW_CR(base, RTC_CR_SC16P_MASK, RTC_CR_SC16P(value)))
#define RTC_BWR_CR_SC16P(base, value) (BME_BFI32(&RTC_CR_REG(base), ((uint32_t)(value) << RTC_CR_SC16P_SHIFT), RTC_CR_SC16P_SHIFT, RTC_CR_SC16P_WIDTH))
/*@}*/

/*!
 * @name Register RTC_CR, field SC8P[11] (RW)
 *
 * Values:
 * - 0b0 - Disable the load.
 * - 0b1 - Enable the additional load.
 */
/*@{*/
/*! @brief Read current value of the RTC_CR_SC8P field. */
#define RTC_RD_CR_SC8P(base) ((RTC_CR_REG(base) & RTC_CR_SC8P_MASK) >> RTC_CR_SC8P_SHIFT)
#define RTC_BRD_CR_SC8P(base) (BME_UBFX32(&RTC_CR_REG(base), RTC_CR_SC8P_SHIFT, RTC_CR_SC8P_WIDTH))

/*! @brief Set the SC8P field to a new value. */
#define RTC_WR_CR_SC8P(base, value) (RTC_RMW_CR(base, RTC_CR_SC8P_MASK, RTC_CR_SC8P(value)))
#define RTC_BWR_CR_SC8P(base, value) (BME_BFI32(&RTC_CR_REG(base), ((uint32_t)(value) << RTC_CR_SC8P_SHIFT), RTC_CR_SC8P_SHIFT, RTC_CR_SC8P_WIDTH))
/*@}*/

/*!
 * @name Register RTC_CR, field SC4P[12] (RW)
 *
 * Values:
 * - 0b0 - Disable the load.
 * - 0b1 - Enable the additional load.
 */
/*@{*/
/*! @brief Read current value of the RTC_CR_SC4P field. */
#define RTC_RD_CR_SC4P(base) ((RTC_CR_REG(base) & RTC_CR_SC4P_MASK) >> RTC_CR_SC4P_SHIFT)
#define RTC_BRD_CR_SC4P(base) (BME_UBFX32(&RTC_CR_REG(base), RTC_CR_SC4P_SHIFT, RTC_CR_SC4P_WIDTH))

/*! @brief Set the SC4P field to a new value. */
#define RTC_WR_CR_SC4P(base, value) (RTC_RMW_CR(base, RTC_CR_SC4P_MASK, RTC_CR_SC4P(value)))
#define RTC_BWR_CR_SC4P(base, value) (BME_BFI32(&RTC_CR_REG(base), ((uint32_t)(value) << RTC_CR_SC4P_SHIFT), RTC_CR_SC4P_SHIFT, RTC_CR_SC4P_WIDTH))
/*@}*/

/*!
 * @name Register RTC_CR, field SC2P[13] (RW)
 *
 * Values:
 * - 0b0 - Disable the load.
 * - 0b1 - Enable the additional load.
 */
/*@{*/
/*! @brief Read current value of the RTC_CR_SC2P field. */
#define RTC_RD_CR_SC2P(base) ((RTC_CR_REG(base) & RTC_CR_SC2P_MASK) >> RTC_CR_SC2P_SHIFT)
#define RTC_BRD_CR_SC2P(base) (BME_UBFX32(&RTC_CR_REG(base), RTC_CR_SC2P_SHIFT, RTC_CR_SC2P_WIDTH))

/*! @brief Set the SC2P field to a new value. */
#define RTC_WR_CR_SC2P(base, value) (RTC_RMW_CR(base, RTC_CR_SC2P_MASK, RTC_CR_SC2P(value)))
#define RTC_BWR_CR_SC2P(base, value) (BME_BFI32(&RTC_CR_REG(base), ((uint32_t)(value) << RTC_CR_SC2P_SHIFT), RTC_CR_SC2P_SHIFT, RTC_CR_SC2P_WIDTH))
/*@}*/

/*******************************************************************************
 * RTC_SR - RTC Status Register
 ******************************************************************************/

/*!
 * @brief RTC_SR - RTC Status Register (RW)
 *
 * Reset value: 0x00000001U
 */
/*!
 * @name Constants and macros for entire RTC_SR register
 */
/*@{*/
#define RTC_RD_SR(base)          (RTC_SR_REG(base))
#define RTC_WR_SR(base, value)   (RTC_SR_REG(base) = (value))
#define RTC_RMW_SR(base, mask, value) (RTC_WR_SR(base, (RTC_RD_SR(base) & ~(mask)) | (value)))
#define RTC_SET_SR(base, value)  (BME_OR32(&RTC_SR_REG(base), (uint32_t)(value)))
#define RTC_CLR_SR(base, value)  (BME_AND32(&RTC_SR_REG(base), (uint32_t)(~(value))))
#define RTC_TOG_SR(base, value)  (BME_XOR32(&RTC_SR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual RTC_SR bitfields
 */

/*!
 * @name Register RTC_SR, field TIF[0] (RO)
 *
 * The time invalid flag is set on VBAT POR or software reset. The TSR and TPR
 * do not increment and read as zero when this bit is set. This bit is cleared by
 * writing the TSR register when the time counter is disabled.
 *
 * Values:
 * - 0b0 - Time is valid.
 * - 0b1 - Time is invalid and time counter is read as zero.
 */
/*@{*/
/*! @brief Read current value of the RTC_SR_TIF field. */
#define RTC_RD_SR_TIF(base)  ((RTC_SR_REG(base) & RTC_SR_TIF_MASK) >> RTC_SR_TIF_SHIFT)
#define RTC_BRD_SR_TIF(base) (BME_UBFX32(&RTC_SR_REG(base), RTC_SR_TIF_SHIFT, RTC_SR_TIF_WIDTH))
/*@}*/

/*!
 * @name Register RTC_SR, field TOF[1] (RO)
 *
 * Time overflow flag is set when the time counter is enabled and overflows. The
 * TSR and TPR do not increment and read as zero when this bit is set. This bit
 * is cleared by writing the TSR register when the time counter is disabled.
 *
 * Values:
 * - 0b0 - Time overflow has not occurred.
 * - 0b1 - Time overflow has occurred and time counter is read as zero.
 */
/*@{*/
/*! @brief Read current value of the RTC_SR_TOF field. */
#define RTC_RD_SR_TOF(base)  ((RTC_SR_REG(base) & RTC_SR_TOF_MASK) >> RTC_SR_TOF_SHIFT)
#define RTC_BRD_SR_TOF(base) (BME_UBFX32(&RTC_SR_REG(base), RTC_SR_TOF_SHIFT, RTC_SR_TOF_WIDTH))
/*@}*/

/*!
 * @name Register RTC_SR, field TAF[2] (RO)
 *
 * Time alarm flag is set when the TAR[TAR] equals the TSR[TSR] and the TSR[TSR]
 * increments. This bit is cleared by writing the TAR register.
 *
 * Values:
 * - 0b0 - Time alarm has not occurred.
 * - 0b1 - Time alarm has occurred.
 */
/*@{*/
/*! @brief Read current value of the RTC_SR_TAF field. */
#define RTC_RD_SR_TAF(base)  ((RTC_SR_REG(base) & RTC_SR_TAF_MASK) >> RTC_SR_TAF_SHIFT)
#define RTC_BRD_SR_TAF(base) (BME_UBFX32(&RTC_SR_REG(base), RTC_SR_TAF_SHIFT, RTC_SR_TAF_WIDTH))
/*@}*/

/*!
 * @name Register RTC_SR, field TCE[4] (RW)
 *
 * When time counter is disabled the TSR register and TPR register are
 * writeable, but do not increment. When time counter is enabled the TSR register and TPR
 * register are not writeable, but increment.
 *
 * Values:
 * - 0b0 - Time counter is disabled.
 * - 0b1 - Time counter is enabled.
 */
/*@{*/
/*! @brief Read current value of the RTC_SR_TCE field. */
#define RTC_RD_SR_TCE(base)  ((RTC_SR_REG(base) & RTC_SR_TCE_MASK) >> RTC_SR_TCE_SHIFT)
#define RTC_BRD_SR_TCE(base) (BME_UBFX32(&RTC_SR_REG(base), RTC_SR_TCE_SHIFT, RTC_SR_TCE_WIDTH))

/*! @brief Set the TCE field to a new value. */
#define RTC_WR_SR_TCE(base, value) (RTC_RMW_SR(base, RTC_SR_TCE_MASK, RTC_SR_TCE(value)))
#define RTC_BWR_SR_TCE(base, value) (BME_BFI32(&RTC_SR_REG(base), ((uint32_t)(value) << RTC_SR_TCE_SHIFT), RTC_SR_TCE_SHIFT, RTC_SR_TCE_WIDTH))
/*@}*/

/*******************************************************************************
 * RTC_LR - RTC Lock Register
 ******************************************************************************/

/*!
 * @brief RTC_LR - RTC Lock Register (RW)
 *
 * Reset value: 0x000000FFU
 */
/*!
 * @name Constants and macros for entire RTC_LR register
 */
/*@{*/
#define RTC_RD_LR(base)          (RTC_LR_REG(base))
#define RTC_WR_LR(base, value)   (RTC_LR_REG(base) = (value))
#define RTC_RMW_LR(base, mask, value) (RTC_WR_LR(base, (RTC_RD_LR(base) & ~(mask)) | (value)))
#define RTC_SET_LR(base, value)  (BME_OR32(&RTC_LR_REG(base), (uint32_t)(value)))
#define RTC_CLR_LR(base, value)  (BME_AND32(&RTC_LR_REG(base), (uint32_t)(~(value))))
#define RTC_TOG_LR(base, value)  (BME_XOR32(&RTC_LR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual RTC_LR bitfields
 */

/*!
 * @name Register RTC_LR, field TCL[3] (RW)
 *
 * After being cleared, this bit can be set only by VBAT POR or software reset.
 *
 * Values:
 * - 0b0 - Time Compensation Register is locked and writes are ignored.
 * - 0b1 - Time Compensation Register is not locked and writes complete as
 *     normal.
 */
/*@{*/
/*! @brief Read current value of the RTC_LR_TCL field. */
#define RTC_RD_LR_TCL(base)  ((RTC_LR_REG(base) & RTC_LR_TCL_MASK) >> RTC_LR_TCL_SHIFT)
#define RTC_BRD_LR_TCL(base) (BME_UBFX32(&RTC_LR_REG(base), RTC_LR_TCL_SHIFT, RTC_LR_TCL_WIDTH))

/*! @brief Set the TCL field to a new value. */
#define RTC_WR_LR_TCL(base, value) (RTC_RMW_LR(base, RTC_LR_TCL_MASK, RTC_LR_TCL(value)))
#define RTC_BWR_LR_TCL(base, value) (BME_BFI32(&RTC_LR_REG(base), ((uint32_t)(value) << RTC_LR_TCL_SHIFT), RTC_LR_TCL_SHIFT, RTC_LR_TCL_WIDTH))
/*@}*/

/*!
 * @name Register RTC_LR, field CRL[4] (RW)
 *
 * After being cleared, this bit can only be set by VBAT POR.
 *
 * Values:
 * - 0b0 - Control Register is locked and writes are ignored.
 * - 0b1 - Control Register is not locked and writes complete as normal.
 */
/*@{*/
/*! @brief Read current value of the RTC_LR_CRL field. */
#define RTC_RD_LR_CRL(base)  ((RTC_LR_REG(base) & RTC_LR_CRL_MASK) >> RTC_LR_CRL_SHIFT)
#define RTC_BRD_LR_CRL(base) (BME_UBFX32(&RTC_LR_REG(base), RTC_LR_CRL_SHIFT, RTC_LR_CRL_WIDTH))

/*! @brief Set the CRL field to a new value. */
#define RTC_WR_LR_CRL(base, value) (RTC_RMW_LR(base, RTC_LR_CRL_MASK, RTC_LR_CRL(value)))
#define RTC_BWR_LR_CRL(base, value) (BME_BFI32(&RTC_LR_REG(base), ((uint32_t)(value) << RTC_LR_CRL_SHIFT), RTC_LR_CRL_SHIFT, RTC_LR_CRL_WIDTH))
/*@}*/

/*!
 * @name Register RTC_LR, field SRL[5] (RW)
 *
 * After being cleared, this bit can be set only by VBAT POR or software reset.
 *
 * Values:
 * - 0b0 - Status Register is locked and writes are ignored.
 * - 0b1 - Status Register is not locked and writes complete as normal.
 */
/*@{*/
/*! @brief Read current value of the RTC_LR_SRL field. */
#define RTC_RD_LR_SRL(base)  ((RTC_LR_REG(base) & RTC_LR_SRL_MASK) >> RTC_LR_SRL_SHIFT)
#define RTC_BRD_LR_SRL(base) (BME_UBFX32(&RTC_LR_REG(base), RTC_LR_SRL_SHIFT, RTC_LR_SRL_WIDTH))

/*! @brief Set the SRL field to a new value. */
#define RTC_WR_LR_SRL(base, value) (RTC_RMW_LR(base, RTC_LR_SRL_MASK, RTC_LR_SRL(value)))
#define RTC_BWR_LR_SRL(base, value) (BME_BFI32(&RTC_LR_REG(base), ((uint32_t)(value) << RTC_LR_SRL_SHIFT), RTC_LR_SRL_SHIFT, RTC_LR_SRL_WIDTH))
/*@}*/

/*!
 * @name Register RTC_LR, field LRL[6] (RW)
 *
 * After being cleared, this bit can be set only by VBAT POR or software reset.
 *
 * Values:
 * - 0b0 - Lock Register is locked and writes are ignored.
 * - 0b1 - Lock Register is not locked and writes complete as normal.
 */
/*@{*/
/*! @brief Read current value of the RTC_LR_LRL field. */
#define RTC_RD_LR_LRL(base)  ((RTC_LR_REG(base) & RTC_LR_LRL_MASK) >> RTC_LR_LRL_SHIFT)
#define RTC_BRD_LR_LRL(base) (BME_UBFX32(&RTC_LR_REG(base), RTC_LR_LRL_SHIFT, RTC_LR_LRL_WIDTH))

/*! @brief Set the LRL field to a new value. */
#define RTC_WR_LR_LRL(base, value) (RTC_RMW_LR(base, RTC_LR_LRL_MASK, RTC_LR_LRL(value)))
#define RTC_BWR_LR_LRL(base, value) (BME_BFI32(&RTC_LR_REG(base), ((uint32_t)(value) << RTC_LR_LRL_SHIFT), RTC_LR_LRL_SHIFT, RTC_LR_LRL_WIDTH))
/*@}*/

/*******************************************************************************
 * RTC_IER - RTC Interrupt Enable Register
 ******************************************************************************/

/*!
 * @brief RTC_IER - RTC Interrupt Enable Register (RW)
 *
 * Reset value: 0x00000007U
 */
/*!
 * @name Constants and macros for entire RTC_IER register
 */
/*@{*/
#define RTC_RD_IER(base)         (RTC_IER_REG(base))
#define RTC_WR_IER(base, value)  (RTC_IER_REG(base) = (value))
#define RTC_RMW_IER(base, mask, value) (RTC_WR_IER(base, (RTC_RD_IER(base) & ~(mask)) | (value)))
#define RTC_SET_IER(base, value) (BME_OR32(&RTC_IER_REG(base), (uint32_t)(value)))
#define RTC_CLR_IER(base, value) (BME_AND32(&RTC_IER_REG(base), (uint32_t)(~(value))))
#define RTC_TOG_IER(base, value) (BME_XOR32(&RTC_IER_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual RTC_IER bitfields
 */

/*!
 * @name Register RTC_IER, field TIIE[0] (RW)
 *
 * Values:
 * - 0b0 - Time invalid flag does not generate an interrupt.
 * - 0b1 - Time invalid flag does generate an interrupt.
 */
/*@{*/
/*! @brief Read current value of the RTC_IER_TIIE field. */
#define RTC_RD_IER_TIIE(base) ((RTC_IER_REG(base) & RTC_IER_TIIE_MASK) >> RTC_IER_TIIE_SHIFT)
#define RTC_BRD_IER_TIIE(base) (BME_UBFX32(&RTC_IER_REG(base), RTC_IER_TIIE_SHIFT, RTC_IER_TIIE_WIDTH))

/*! @brief Set the TIIE field to a new value. */
#define RTC_WR_IER_TIIE(base, value) (RTC_RMW_IER(base, RTC_IER_TIIE_MASK, RTC_IER_TIIE(value)))
#define RTC_BWR_IER_TIIE(base, value) (BME_BFI32(&RTC_IER_REG(base), ((uint32_t)(value) << RTC_IER_TIIE_SHIFT), RTC_IER_TIIE_SHIFT, RTC_IER_TIIE_WIDTH))
/*@}*/

/*!
 * @name Register RTC_IER, field TOIE[1] (RW)
 *
 * Values:
 * - 0b0 - Time overflow flag does not generate an interrupt.
 * - 0b1 - Time overflow flag does generate an interrupt.
 */
/*@{*/
/*! @brief Read current value of the RTC_IER_TOIE field. */
#define RTC_RD_IER_TOIE(base) ((RTC_IER_REG(base) & RTC_IER_TOIE_MASK) >> RTC_IER_TOIE_SHIFT)
#define RTC_BRD_IER_TOIE(base) (BME_UBFX32(&RTC_IER_REG(base), RTC_IER_TOIE_SHIFT, RTC_IER_TOIE_WIDTH))

/*! @brief Set the TOIE field to a new value. */
#define RTC_WR_IER_TOIE(base, value) (RTC_RMW_IER(base, RTC_IER_TOIE_MASK, RTC_IER_TOIE(value)))
#define RTC_BWR_IER_TOIE(base, value) (BME_BFI32(&RTC_IER_REG(base), ((uint32_t)(value) << RTC_IER_TOIE_SHIFT), RTC_IER_TOIE_SHIFT, RTC_IER_TOIE_WIDTH))
/*@}*/

/*!
 * @name Register RTC_IER, field TAIE[2] (RW)
 *
 * Values:
 * - 0b0 - Time alarm flag does not generate an interrupt.
 * - 0b1 - Time alarm flag does generate an interrupt.
 */
/*@{*/
/*! @brief Read current value of the RTC_IER_TAIE field. */
#define RTC_RD_IER_TAIE(base) ((RTC_IER_REG(base) & RTC_IER_TAIE_MASK) >> RTC_IER_TAIE_SHIFT)
#define RTC_BRD_IER_TAIE(base) (BME_UBFX32(&RTC_IER_REG(base), RTC_IER_TAIE_SHIFT, RTC_IER_TAIE_WIDTH))

/*! @brief Set the TAIE field to a new value. */
#define RTC_WR_IER_TAIE(base, value) (RTC_RMW_IER(base, RTC_IER_TAIE_MASK, RTC_IER_TAIE(value)))
#define RTC_BWR_IER_TAIE(base, value) (BME_BFI32(&RTC_IER_REG(base), ((uint32_t)(value) << RTC_IER_TAIE_SHIFT), RTC_IER_TAIE_SHIFT, RTC_IER_TAIE_WIDTH))
/*@}*/

/*!
 * @name Register RTC_IER, field TSIE[4] (RW)
 *
 * The seconds interrupt is an edge-sensitive interrupt with a dedicated
 * interrupt vector. It is generated once a second and requires no software overhead
 * (there is no corresponding status flag to clear).
 *
 * Values:
 * - 0b0 - Seconds interrupt is disabled.
 * - 0b1 - Seconds interrupt is enabled.
 */
/*@{*/
/*! @brief Read current value of the RTC_IER_TSIE field. */
#define RTC_RD_IER_TSIE(base) ((RTC_IER_REG(base) & RTC_IER_TSIE_MASK) >> RTC_IER_TSIE_SHIFT)
#define RTC_BRD_IER_TSIE(base) (BME_UBFX32(&RTC_IER_REG(base), RTC_IER_TSIE_SHIFT, RTC_IER_TSIE_WIDTH))

/*! @brief Set the TSIE field to a new value. */
#define RTC_WR_IER_TSIE(base, value) (RTC_RMW_IER(base, RTC_IER_TSIE_MASK, RTC_IER_TSIE(value)))
#define RTC_BWR_IER_TSIE(base, value) (BME_BFI32(&RTC_IER_REG(base), ((uint32_t)(value) << RTC_IER_TSIE_SHIFT), RTC_IER_TSIE_SHIFT, RTC_IER_TSIE_WIDTH))
/*@}*/

/*!
 * @name Register RTC_IER, field WPON[7] (RW)
 *
 * The wakeup pin is optional and not available on all devices. Whenever the
 * wakeup pin is enabled and this bit is set, the wakeup pin will assert.
 *
 * Values:
 * - 0b0 - No effect.
 * - 0b1 - If the wakeup pin is enabled, then the wakeup pin will assert.
 */
/*@{*/
/*! @brief Read current value of the RTC_IER_WPON field. */
#define RTC_RD_IER_WPON(base) ((RTC_IER_REG(base) & RTC_IER_WPON_MASK) >> RTC_IER_WPON_SHIFT)
#define RTC_BRD_IER_WPON(base) (BME_UBFX32(&RTC_IER_REG(base), RTC_IER_WPON_SHIFT, RTC_IER_WPON_WIDTH))

/*! @brief Set the WPON field to a new value. */
#define RTC_WR_IER_WPON(base, value) (RTC_RMW_IER(base, RTC_IER_WPON_MASK, RTC_IER_WPON(value)))
#define RTC_BWR_IER_WPON(base, value) (BME_BFI32(&RTC_IER_REG(base), ((uint32_t)(value) << RTC_IER_WPON_SHIFT), RTC_IER_WPON_SHIFT, RTC_IER_WPON_WIDTH))
/*@}*/

/*******************************************************************************
 * RTC_WAR - RTC Write Access Register
 ******************************************************************************/

/*!
 * @brief RTC_WAR - RTC Write Access Register (RW)
 *
 * Reset value: 0x000000FFU
 */
/*!
 * @name Constants and macros for entire RTC_WAR register
 */
/*@{*/
#define RTC_RD_WAR(base)         (RTC_WAR_REG(base))
#define RTC_WR_WAR(base, value)  (RTC_WAR_REG(base) = (value))
#define RTC_RMW_WAR(base, mask, value) (RTC_WR_WAR(base, (RTC_RD_WAR(base) & ~(mask)) | (value)))
#define RTC_SET_WAR(base, value) (BME_OR32(&RTC_WAR_REG(base), (uint32_t)(value)))
#define RTC_CLR_WAR(base, value) (BME_AND32(&RTC_WAR_REG(base), (uint32_t)(~(value))))
#define RTC_TOG_WAR(base, value) (BME_XOR32(&RTC_WAR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual RTC_WAR bitfields
 */

/*!
 * @name Register RTC_WAR, field TSRW[0] (RW)
 *
 * After being cleared, this bit is set only by system reset. It is not affected
 * by VBAT POR or software reset.
 *
 * Values:
 * - 0b0 - Writes to the Time Seconds Register are ignored.
 * - 0b1 - Writes to the Time Seconds Register complete as normal.
 */
/*@{*/
/*! @brief Read current value of the RTC_WAR_TSRW field. */
#define RTC_RD_WAR_TSRW(base) ((RTC_WAR_REG(base) & RTC_WAR_TSRW_MASK) >> RTC_WAR_TSRW_SHIFT)
#define RTC_BRD_WAR_TSRW(base) (BME_UBFX32(&RTC_WAR_REG(base), RTC_WAR_TSRW_SHIFT, RTC_WAR_TSRW_WIDTH))

/*! @brief Set the TSRW field to a new value. */
#define RTC_WR_WAR_TSRW(base, value) (RTC_RMW_WAR(base, RTC_WAR_TSRW_MASK, RTC_WAR_TSRW(value)))
#define RTC_BWR_WAR_TSRW(base, value) (BME_BFI32(&RTC_WAR_REG(base), ((uint32_t)(value) << RTC_WAR_TSRW_SHIFT), RTC_WAR_TSRW_SHIFT, RTC_WAR_TSRW_WIDTH))
/*@}*/

/*!
 * @name Register RTC_WAR, field TPRW[1] (RW)
 *
 * After being cleared, this bit is set only by system reset. It is not affected
 * by VBAT POR or software reset.
 *
 * Values:
 * - 0b0 - Writes to the Time Prescaler Register are ignored.
 * - 0b1 - Writes to the Time Prescaler Register complete as normal.
 */
/*@{*/
/*! @brief Read current value of the RTC_WAR_TPRW field. */
#define RTC_RD_WAR_TPRW(base) ((RTC_WAR_REG(base) & RTC_WAR_TPRW_MASK) >> RTC_WAR_TPRW_SHIFT)
#define RTC_BRD_WAR_TPRW(base) (BME_UBFX32(&RTC_WAR_REG(base), RTC_WAR_TPRW_SHIFT, RTC_WAR_TPRW_WIDTH))

/*! @brief Set the TPRW field to a new value. */
#define RTC_WR_WAR_TPRW(base, value) (RTC_RMW_WAR(base, RTC_WAR_TPRW_MASK, RTC_WAR_TPRW(value)))
#define RTC_BWR_WAR_TPRW(base, value) (BME_BFI32(&RTC_WAR_REG(base), ((uint32_t)(value) << RTC_WAR_TPRW_SHIFT), RTC_WAR_TPRW_SHIFT, RTC_WAR_TPRW_WIDTH))
/*@}*/

/*!
 * @name Register RTC_WAR, field TARW[2] (RW)
 *
 * After being cleared, this bit is set only by system reset. It is not affected
 * by VBAT POR or software reset.
 *
 * Values:
 * - 0b0 - Writes to the Time Alarm Register are ignored.
 * - 0b1 - Writes to the Time Alarm Register complete as normal.
 */
/*@{*/
/*! @brief Read current value of the RTC_WAR_TARW field. */
#define RTC_RD_WAR_TARW(base) ((RTC_WAR_REG(base) & RTC_WAR_TARW_MASK) >> RTC_WAR_TARW_SHIFT)
#define RTC_BRD_WAR_TARW(base) (BME_UBFX32(&RTC_WAR_REG(base), RTC_WAR_TARW_SHIFT, RTC_WAR_TARW_WIDTH))

/*! @brief Set the TARW field to a new value. */
#define RTC_WR_WAR_TARW(base, value) (RTC_RMW_WAR(base, RTC_WAR_TARW_MASK, RTC_WAR_TARW(value)))
#define RTC_BWR_WAR_TARW(base, value) (BME_BFI32(&RTC_WAR_REG(base), ((uint32_t)(value) << RTC_WAR_TARW_SHIFT), RTC_WAR_TARW_SHIFT, RTC_WAR_TARW_WIDTH))
/*@}*/

/*!
 * @name Register RTC_WAR, field TCRW[3] (RW)
 *
 * After being cleared, this bit is set only by system reset. It is not affected
 * by VBAT POR or software reset.
 *
 * Values:
 * - 0b0 - Writes to the Time Compensation Register are ignored.
 * - 0b1 - Writes to the Time Compensation Register complete as normal.
 */
/*@{*/
/*! @brief Read current value of the RTC_WAR_TCRW field. */
#define RTC_RD_WAR_TCRW(base) ((RTC_WAR_REG(base) & RTC_WAR_TCRW_MASK) >> RTC_WAR_TCRW_SHIFT)
#define RTC_BRD_WAR_TCRW(base) (BME_UBFX32(&RTC_WAR_REG(base), RTC_WAR_TCRW_SHIFT, RTC_WAR_TCRW_WIDTH))

/*! @brief Set the TCRW field to a new value. */
#define RTC_WR_WAR_TCRW(base, value) (RTC_RMW_WAR(base, RTC_WAR_TCRW_MASK, RTC_WAR_TCRW(value)))
#define RTC_BWR_WAR_TCRW(base, value) (BME_BFI32(&RTC_WAR_REG(base), ((uint32_t)(value) << RTC_WAR_TCRW_SHIFT), RTC_WAR_TCRW_SHIFT, RTC_WAR_TCRW_WIDTH))
/*@}*/

/*!
 * @name Register RTC_WAR, field CRW[4] (RW)
 *
 * After being cleared, this bit is set only by system reset. It is not affected
 * by VBAT POR or software reset.
 *
 * Values:
 * - 0b0 - Writes to the Control Register are ignored.
 * - 0b1 - Writes to the Control Register complete as normal.
 */
/*@{*/
/*! @brief Read current value of the RTC_WAR_CRW field. */
#define RTC_RD_WAR_CRW(base) ((RTC_WAR_REG(base) & RTC_WAR_CRW_MASK) >> RTC_WAR_CRW_SHIFT)
#define RTC_BRD_WAR_CRW(base) (BME_UBFX32(&RTC_WAR_REG(base), RTC_WAR_CRW_SHIFT, RTC_WAR_CRW_WIDTH))

/*! @brief Set the CRW field to a new value. */
#define RTC_WR_WAR_CRW(base, value) (RTC_RMW_WAR(base, RTC_WAR_CRW_MASK, RTC_WAR_CRW(value)))
#define RTC_BWR_WAR_CRW(base, value) (BME_BFI32(&RTC_WAR_REG(base), ((uint32_t)(value) << RTC_WAR_CRW_SHIFT), RTC_WAR_CRW_SHIFT, RTC_WAR_CRW_WIDTH))
/*@}*/

/*!
 * @name Register RTC_WAR, field SRW[5] (RW)
 *
 * After being cleared, this bit is set only by system reset. It is not affected
 * by VBAT POR or software reset.
 *
 * Values:
 * - 0b0 - Writes to the Status Register are ignored.
 * - 0b1 - Writes to the Status Register complete as normal.
 */
/*@{*/
/*! @brief Read current value of the RTC_WAR_SRW field. */
#define RTC_RD_WAR_SRW(base) ((RTC_WAR_REG(base) & RTC_WAR_SRW_MASK) >> RTC_WAR_SRW_SHIFT)
#define RTC_BRD_WAR_SRW(base) (BME_UBFX32(&RTC_WAR_REG(base), RTC_WAR_SRW_SHIFT, RTC_WAR_SRW_WIDTH))

/*! @brief Set the SRW field to a new value. */
#define RTC_WR_WAR_SRW(base, value) (RTC_RMW_WAR(base, RTC_WAR_SRW_MASK, RTC_WAR_SRW(value)))
#define RTC_BWR_WAR_SRW(base, value) (BME_BFI32(&RTC_WAR_REG(base), ((uint32_t)(value) << RTC_WAR_SRW_SHIFT), RTC_WAR_SRW_SHIFT, RTC_WAR_SRW_WIDTH))
/*@}*/

/*!
 * @name Register RTC_WAR, field LRW[6] (RW)
 *
 * After being cleared, this bit is set only by system reset. It is not affected
 * by VBAT POR or software reset.
 *
 * Values:
 * - 0b0 - Writes to the Lock Register are ignored.
 * - 0b1 - Writes to the Lock Register complete as normal.
 */
/*@{*/
/*! @brief Read current value of the RTC_WAR_LRW field. */
#define RTC_RD_WAR_LRW(base) ((RTC_WAR_REG(base) & RTC_WAR_LRW_MASK) >> RTC_WAR_LRW_SHIFT)
#define RTC_BRD_WAR_LRW(base) (BME_UBFX32(&RTC_WAR_REG(base), RTC_WAR_LRW_SHIFT, RTC_WAR_LRW_WIDTH))

/*! @brief Set the LRW field to a new value. */
#define RTC_WR_WAR_LRW(base, value) (RTC_RMW_WAR(base, RTC_WAR_LRW_MASK, RTC_WAR_LRW(value)))
#define RTC_BWR_WAR_LRW(base, value) (BME_BFI32(&RTC_WAR_REG(base), ((uint32_t)(value) << RTC_WAR_LRW_SHIFT), RTC_WAR_LRW_SHIFT, RTC_WAR_LRW_WIDTH))
/*@}*/

/*!
 * @name Register RTC_WAR, field IERW[7] (RW)
 *
 * After being cleared, this bit is set only by system reset. It is not affected
 * by VBAT POR or software reset.
 *
 * Values:
 * - 0b0 - Writes to the Interupt Enable Register are ignored.
 * - 0b1 - Writes to the Interrupt Enable Register complete as normal.
 */
/*@{*/
/*! @brief Read current value of the RTC_WAR_IERW field. */
#define RTC_RD_WAR_IERW(base) ((RTC_WAR_REG(base) & RTC_WAR_IERW_MASK) >> RTC_WAR_IERW_SHIFT)
#define RTC_BRD_WAR_IERW(base) (BME_UBFX32(&RTC_WAR_REG(base), RTC_WAR_IERW_SHIFT, RTC_WAR_IERW_WIDTH))

/*! @brief Set the IERW field to a new value. */
#define RTC_WR_WAR_IERW(base, value) (RTC_RMW_WAR(base, RTC_WAR_IERW_MASK, RTC_WAR_IERW(value)))
#define RTC_BWR_WAR_IERW(base, value) (BME_BFI32(&RTC_WAR_REG(base), ((uint32_t)(value) << RTC_WAR_IERW_SHIFT), RTC_WAR_IERW_SHIFT, RTC_WAR_IERW_WIDTH))
/*@}*/

/*******************************************************************************
 * RTC_RAR - RTC Read Access Register
 ******************************************************************************/

/*!
 * @brief RTC_RAR - RTC Read Access Register (RW)
 *
 * Reset value: 0x000000FFU
 */
/*!
 * @name Constants and macros for entire RTC_RAR register
 */
/*@{*/
#define RTC_RD_RAR(base)         (RTC_RAR_REG(base))
#define RTC_WR_RAR(base, value)  (RTC_RAR_REG(base) = (value))
#define RTC_RMW_RAR(base, mask, value) (RTC_WR_RAR(base, (RTC_RD_RAR(base) & ~(mask)) | (value)))
#define RTC_SET_RAR(base, value) (BME_OR32(&RTC_RAR_REG(base), (uint32_t)(value)))
#define RTC_CLR_RAR(base, value) (BME_AND32(&RTC_RAR_REG(base), (uint32_t)(~(value))))
#define RTC_TOG_RAR(base, value) (BME_XOR32(&RTC_RAR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual RTC_RAR bitfields
 */

/*!
 * @name Register RTC_RAR, field TSRR[0] (RW)
 *
 * After being cleared, this bit is set only by system reset. It is not affected
 * by VBAT POR or software reset.
 *
 * Values:
 * - 0b0 - Reads to the Time Seconds Register are ignored.
 * - 0b1 - Reads to the Time Seconds Register complete as normal.
 */
/*@{*/
/*! @brief Read current value of the RTC_RAR_TSRR field. */
#define RTC_RD_RAR_TSRR(base) ((RTC_RAR_REG(base) & RTC_RAR_TSRR_MASK) >> RTC_RAR_TSRR_SHIFT)
#define RTC_BRD_RAR_TSRR(base) (BME_UBFX32(&RTC_RAR_REG(base), RTC_RAR_TSRR_SHIFT, RTC_RAR_TSRR_WIDTH))

/*! @brief Set the TSRR field to a new value. */
#define RTC_WR_RAR_TSRR(base, value) (RTC_RMW_RAR(base, RTC_RAR_TSRR_MASK, RTC_RAR_TSRR(value)))
#define RTC_BWR_RAR_TSRR(base, value) (BME_BFI32(&RTC_RAR_REG(base), ((uint32_t)(value) << RTC_RAR_TSRR_SHIFT), RTC_RAR_TSRR_SHIFT, RTC_RAR_TSRR_WIDTH))
/*@}*/

/*!
 * @name Register RTC_RAR, field TPRR[1] (RW)
 *
 * After being cleared, this bit is set only by system reset. It is not affected
 * by VBAT POR or software reset.
 *
 * Values:
 * - 0b0 - Reads to the Time Pprescaler Register are ignored.
 * - 0b1 - Reads to the Time Prescaler Register complete as normal.
 */
/*@{*/
/*! @brief Read current value of the RTC_RAR_TPRR field. */
#define RTC_RD_RAR_TPRR(base) ((RTC_RAR_REG(base) & RTC_RAR_TPRR_MASK) >> RTC_RAR_TPRR_SHIFT)
#define RTC_BRD_RAR_TPRR(base) (BME_UBFX32(&RTC_RAR_REG(base), RTC_RAR_TPRR_SHIFT, RTC_RAR_TPRR_WIDTH))

/*! @brief Set the TPRR field to a new value. */
#define RTC_WR_RAR_TPRR(base, value) (RTC_RMW_RAR(base, RTC_RAR_TPRR_MASK, RTC_RAR_TPRR(value)))
#define RTC_BWR_RAR_TPRR(base, value) (BME_BFI32(&RTC_RAR_REG(base), ((uint32_t)(value) << RTC_RAR_TPRR_SHIFT), RTC_RAR_TPRR_SHIFT, RTC_RAR_TPRR_WIDTH))
/*@}*/

/*!
 * @name Register RTC_RAR, field TARR[2] (RW)
 *
 * After being cleared, this bit is set only by system reset. It is not affected
 * by VBAT POR or software reset.
 *
 * Values:
 * - 0b0 - Reads to the Time Alarm Register are ignored.
 * - 0b1 - Reads to the Time Alarm Register complete as normal.
 */
/*@{*/
/*! @brief Read current value of the RTC_RAR_TARR field. */
#define RTC_RD_RAR_TARR(base) ((RTC_RAR_REG(base) & RTC_RAR_TARR_MASK) >> RTC_RAR_TARR_SHIFT)
#define RTC_BRD_RAR_TARR(base) (BME_UBFX32(&RTC_RAR_REG(base), RTC_RAR_TARR_SHIFT, RTC_RAR_TARR_WIDTH))

/*! @brief Set the TARR field to a new value. */
#define RTC_WR_RAR_TARR(base, value) (RTC_RMW_RAR(base, RTC_RAR_TARR_MASK, RTC_RAR_TARR(value)))
#define RTC_BWR_RAR_TARR(base, value) (BME_BFI32(&RTC_RAR_REG(base), ((uint32_t)(value) << RTC_RAR_TARR_SHIFT), RTC_RAR_TARR_SHIFT, RTC_RAR_TARR_WIDTH))
/*@}*/

/*!
 * @name Register RTC_RAR, field TCRR[3] (RW)
 *
 * After being cleared, this bit is set only by system reset. It is not affected
 * by VBAT POR or software reset.
 *
 * Values:
 * - 0b0 - Reads to the Time Compensation Register are ignored.
 * - 0b1 - Reads to the Time Compensation Register complete as normal.
 */
/*@{*/
/*! @brief Read current value of the RTC_RAR_TCRR field. */
#define RTC_RD_RAR_TCRR(base) ((RTC_RAR_REG(base) & RTC_RAR_TCRR_MASK) >> RTC_RAR_TCRR_SHIFT)
#define RTC_BRD_RAR_TCRR(base) (BME_UBFX32(&RTC_RAR_REG(base), RTC_RAR_TCRR_SHIFT, RTC_RAR_TCRR_WIDTH))

/*! @brief Set the TCRR field to a new value. */
#define RTC_WR_RAR_TCRR(base, value) (RTC_RMW_RAR(base, RTC_RAR_TCRR_MASK, RTC_RAR_TCRR(value)))
#define RTC_BWR_RAR_TCRR(base, value) (BME_BFI32(&RTC_RAR_REG(base), ((uint32_t)(value) << RTC_RAR_TCRR_SHIFT), RTC_RAR_TCRR_SHIFT, RTC_RAR_TCRR_WIDTH))
/*@}*/

/*!
 * @name Register RTC_RAR, field CRR[4] (RW)
 *
 * After being cleared, this bit is set only by system reset. It is not affected
 * by VBAT POR or software reset.
 *
 * Values:
 * - 0b0 - Reads to the Control Register are ignored.
 * - 0b1 - Reads to the Control Register complete as normal.
 */
/*@{*/
/*! @brief Read current value of the RTC_RAR_CRR field. */
#define RTC_RD_RAR_CRR(base) ((RTC_RAR_REG(base) & RTC_RAR_CRR_MASK) >> RTC_RAR_CRR_SHIFT)
#define RTC_BRD_RAR_CRR(base) (BME_UBFX32(&RTC_RAR_REG(base), RTC_RAR_CRR_SHIFT, RTC_RAR_CRR_WIDTH))

/*! @brief Set the CRR field to a new value. */
#define RTC_WR_RAR_CRR(base, value) (RTC_RMW_RAR(base, RTC_RAR_CRR_MASK, RTC_RAR_CRR(value)))
#define RTC_BWR_RAR_CRR(base, value) (BME_BFI32(&RTC_RAR_REG(base), ((uint32_t)(value) << RTC_RAR_CRR_SHIFT), RTC_RAR_CRR_SHIFT, RTC_RAR_CRR_WIDTH))
/*@}*/

/*!
 * @name Register RTC_RAR, field SRR[5] (RW)
 *
 * After being cleared, this bit is set only by system reset. It is not affected
 * by VBAT POR or software reset.
 *
 * Values:
 * - 0b0 - Reads to the Status Register are ignored.
 * - 0b1 - Reads to the Status Register complete as normal.
 */
/*@{*/
/*! @brief Read current value of the RTC_RAR_SRR field. */
#define RTC_RD_RAR_SRR(base) ((RTC_RAR_REG(base) & RTC_RAR_SRR_MASK) >> RTC_RAR_SRR_SHIFT)
#define RTC_BRD_RAR_SRR(base) (BME_UBFX32(&RTC_RAR_REG(base), RTC_RAR_SRR_SHIFT, RTC_RAR_SRR_WIDTH))

/*! @brief Set the SRR field to a new value. */
#define RTC_WR_RAR_SRR(base, value) (RTC_RMW_RAR(base, RTC_RAR_SRR_MASK, RTC_RAR_SRR(value)))
#define RTC_BWR_RAR_SRR(base, value) (BME_BFI32(&RTC_RAR_REG(base), ((uint32_t)(value) << RTC_RAR_SRR_SHIFT), RTC_RAR_SRR_SHIFT, RTC_RAR_SRR_WIDTH))
/*@}*/

/*!
 * @name Register RTC_RAR, field LRR[6] (RW)
 *
 * After being cleared, this bit is set only by system reset. It is not affected
 * by VBAT POR or software reset.
 *
 * Values:
 * - 0b0 - Reads to the Lock Register are ignored.
 * - 0b1 - Reads to the Lock Register complete as normal.
 */
/*@{*/
/*! @brief Read current value of the RTC_RAR_LRR field. */
#define RTC_RD_RAR_LRR(base) ((RTC_RAR_REG(base) & RTC_RAR_LRR_MASK) >> RTC_RAR_LRR_SHIFT)
#define RTC_BRD_RAR_LRR(base) (BME_UBFX32(&RTC_RAR_REG(base), RTC_RAR_LRR_SHIFT, RTC_RAR_LRR_WIDTH))

/*! @brief Set the LRR field to a new value. */
#define RTC_WR_RAR_LRR(base, value) (RTC_RMW_RAR(base, RTC_RAR_LRR_MASK, RTC_RAR_LRR(value)))
#define RTC_BWR_RAR_LRR(base, value) (BME_BFI32(&RTC_RAR_REG(base), ((uint32_t)(value) << RTC_RAR_LRR_SHIFT), RTC_RAR_LRR_SHIFT, RTC_RAR_LRR_WIDTH))
/*@}*/

/*!
 * @name Register RTC_RAR, field IERR[7] (RW)
 *
 * After being cleared, this bit is set only by system reset. It is not affected
 * by VBAT POR or software reset.
 *
 * Values:
 * - 0b0 - Reads to the Interrupt Enable Register are ignored.
 * - 0b1 - Reads to the Interrupt Enable Register complete as normal.
 */
/*@{*/
/*! @brief Read current value of the RTC_RAR_IERR field. */
#define RTC_RD_RAR_IERR(base) ((RTC_RAR_REG(base) & RTC_RAR_IERR_MASK) >> RTC_RAR_IERR_SHIFT)
#define RTC_BRD_RAR_IERR(base) (BME_UBFX32(&RTC_RAR_REG(base), RTC_RAR_IERR_SHIFT, RTC_RAR_IERR_WIDTH))

/*! @brief Set the IERR field to a new value. */
#define RTC_WR_RAR_IERR(base, value) (RTC_RMW_RAR(base, RTC_RAR_IERR_MASK, RTC_RAR_IERR(value)))
#define RTC_BWR_RAR_IERR(base, value) (BME_BFI32(&RTC_RAR_REG(base), ((uint32_t)(value) << RTC_RAR_IERR_SHIFT), RTC_RAR_IERR_SHIFT, RTC_RAR_IERR_WIDTH))
/*@}*/

/*
 * MK82F25615 SDHC
 *
 * Secured Digital Host Controller
 *
 * Registers defined in this header file:
 * - SDHC_DSADDR - DMA System Address register
 * - SDHC_BLKATTR - Block Attributes register
 * - SDHC_CMDARG - Command Argument register
 * - SDHC_XFERTYP - Transfer Type register
 * - SDHC_CMDRSP - Command Response 0
 * - SDHC_DATPORT - Buffer Data Port register
 * - SDHC_PRSSTAT - Present State register
 * - SDHC_PROCTL - Protocol Control register
 * - SDHC_SYSCTL - System Control register
 * - SDHC_IRQSTAT - Interrupt Status register
 * - SDHC_IRQSTATEN - Interrupt Status Enable register
 * - SDHC_IRQSIGEN - Interrupt Signal Enable register
 * - SDHC_AC12ERR - Auto CMD12 Error Status Register
 * - SDHC_HTCAPBLT - Host Controller Capabilities
 * - SDHC_WML - Watermark Level Register
 * - SDHC_FEVT - Force Event register
 * - SDHC_ADMAES - ADMA Error Status register
 * - SDHC_ADSADDR - ADMA System Addressregister
 * - SDHC_VENDOR - Vendor Specific register
 * - SDHC_MMCBOOT - MMC Boot register
 * - SDHC_HOSTVER - Host Controller Version
 */

#define SDHC_INSTANCE_COUNT (1U) /*!< Number of instances of the SDHC module. */
#define SDHC_IDX (0U) /*!< Instance number for SDHC. */

/*******************************************************************************
 * SDHC_DSADDR - DMA System Address register
 ******************************************************************************/

/*!
 * @brief SDHC_DSADDR - DMA System Address register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register contains the physical system memory address used for DMA
 * transfers.
 */
/*!
 * @name Constants and macros for entire SDHC_DSADDR register
 */
/*@{*/
#define SDHC_RD_DSADDR(base)     (SDHC_DSADDR_REG(base))
#define SDHC_WR_DSADDR(base, value) (SDHC_DSADDR_REG(base) = (value))
#define SDHC_RMW_DSADDR(base, mask, value) (SDHC_WR_DSADDR(base, (SDHC_RD_DSADDR(base) & ~(mask)) | (value)))
#define SDHC_SET_DSADDR(base, value) (BME_OR32(&SDHC_DSADDR_REG(base), (uint32_t)(value)))
#define SDHC_CLR_DSADDR(base, value) (BME_AND32(&SDHC_DSADDR_REG(base), (uint32_t)(~(value))))
#define SDHC_TOG_DSADDR(base, value) (BME_XOR32(&SDHC_DSADDR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SDHC_DSADDR bitfields
 */

/*!
 * @name Register SDHC_DSADDR, field DSADDR[31:2] (RW)
 *
 * Contains the 32-bit system memory address for a DMA transfer. Because the
 * address must be word (4 bytes) align, the least 2 bits are reserved, always 0.
 * When the SDHC stops a DMA transfer, this register points to the system address
 * of the next contiguous data position. It can be accessed only when no
 * transaction is executing, that is, after a transaction has stopped. Read operation
 * during transfers may return an invalid value. The host driver shall initialize
 * this register before starting a DMA transaction. After DMA has stopped, the
 * system address of the next contiguous data position can be read from this register.
 * This register is protected during a data transfer. When data lines are
 * active, write to this register is ignored. The host driver shall wait, until
 * PRSSTAT[DLA] is cleared, before writing to this register. The SDHC internal DMA does
 * not support a virtual memory system. It supports only continuous physical
 * memory access. And due to AHB burst limitations, if the burst must cross the 1 KB
 * boundary, SDHC will automatically change SEQ burst type to NSEQ. Because this
 * register supports dynamic address reflecting, when IRQSTAT[TC] bit is set, it
 * automatically alters the value of internal address counter, so SW cannot
 * change this register when IRQSTAT[TC] is set.
 */
/*@{*/
/*! @brief Read current value of the SDHC_DSADDR_DSADDR field. */
#define SDHC_RD_DSADDR_DSADDR(base) ((SDHC_DSADDR_REG(base) & SDHC_DSADDR_DSADDR_MASK) >> SDHC_DSADDR_DSADDR_SHIFT)
#define SDHC_BRD_DSADDR_DSADDR(base) (SDHC_RD_DSADDR_DSADDR(base))

/*! @brief Set the DSADDR field to a new value. */
#define SDHC_WR_DSADDR_DSADDR(base, value) (SDHC_RMW_DSADDR(base, SDHC_DSADDR_DSADDR_MASK, SDHC_DSADDR_DSADDR(value)))
#define SDHC_BWR_DSADDR_DSADDR(base, value) (SDHC_WR_DSADDR_DSADDR(base, value))
/*@}*/

/*******************************************************************************
 * SDHC_BLKATTR - Block Attributes register
 ******************************************************************************/

/*!
 * @brief SDHC_BLKATTR - Block Attributes register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register is used to configure the number of data blocks and the number
 * of bytes in each block.
 */
/*!
 * @name Constants and macros for entire SDHC_BLKATTR register
 */
/*@{*/
#define SDHC_RD_BLKATTR(base)    (SDHC_BLKATTR_REG(base))
#define SDHC_WR_BLKATTR(base, value) (SDHC_BLKATTR_REG(base) = (value))
#define SDHC_RMW_BLKATTR(base, mask, value) (SDHC_WR_BLKATTR(base, (SDHC_RD_BLKATTR(base) & ~(mask)) | (value)))
#define SDHC_SET_BLKATTR(base, value) (BME_OR32(&SDHC_BLKATTR_REG(base), (uint32_t)(value)))
#define SDHC_CLR_BLKATTR(base, value) (BME_AND32(&SDHC_BLKATTR_REG(base), (uint32_t)(~(value))))
#define SDHC_TOG_BLKATTR(base, value) (BME_XOR32(&SDHC_BLKATTR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SDHC_BLKATTR bitfields
 */

/*!
 * @name Register SDHC_BLKATTR, field BLKSIZE[12:0] (RW)
 *
 * Specifies the block size for block data transfers. Values ranging from 1 byte
 * up to the maximum buffer size can be set. It can be accessed only when no
 * transaction is executing, that is, after a transaction has stopped. Read
 * operations during transfers may return an invalid value, and write operations will be
 * ignored.
 *
 * Values:
 * - 0b0000000000000 - No data transfer.
 * - 0b0000000000001 - 1 Byte
 * - 0b0000000000010 - 2 Bytes
 * - 0b0000000000011 - 3 Bytes
 * - 0b0000000000100 - 4 Bytes
 * - 0b0000111111111 - 511 Bytes
 * - 0b0001000000000 - 512 Bytes
 * - 0b0100000000000 - 2048 Bytes
 * - 0b1000000000000 - 4096 Bytes
 */
/*@{*/
/*! @brief Read current value of the SDHC_BLKATTR_BLKSIZE field. */
#define SDHC_RD_BLKATTR_BLKSIZE(base) ((SDHC_BLKATTR_REG(base) & SDHC_BLKATTR_BLKSIZE_MASK) >> SDHC_BLKATTR_BLKSIZE_SHIFT)
#define SDHC_BRD_BLKATTR_BLKSIZE(base) (SDHC_RD_BLKATTR_BLKSIZE(base))

/*! @brief Set the BLKSIZE field to a new value. */
#define SDHC_WR_BLKATTR_BLKSIZE(base, value) (SDHC_RMW_BLKATTR(base, SDHC_BLKATTR_BLKSIZE_MASK, SDHC_BLKATTR_BLKSIZE(value)))
#define SDHC_BWR_BLKATTR_BLKSIZE(base, value) (SDHC_WR_BLKATTR_BLKSIZE(base, value))
/*@}*/

/*!
 * @name Register SDHC_BLKATTR, field BLKCNT[31:16] (RW)
 *
 * This register is enabled when XFERTYP[BCEN] is set to 1 and is valid only for
 * multiple block transfers. For single block transfer, this register will
 * always read as 1. The host driver shall set this register to a value between 1 and
 * the maximum block count. The SDHC decrements the block count after each block
 * transfer and stops when the count reaches zero. Setting the block count to 0
 * results in no data blocks being transferred. This register must be accessed
 * only when no transaction is executing, that is, after transactions are stopped.
 * During data transfer, read operations on this register may return an invalid
 * value and write operations are ignored. When saving transfer content as a result
 * of a suspend command, the number of blocks yet to be transferred can be
 * determined by reading this register. The reading of this register must be applied
 * after transfer is paused by stop at block gap operation and before sending the
 * command marked as suspend. This is because when suspend command is sent out,
 * SDHC will regard the current transfer as aborted and change BLKCNT back to its
 * original value instead of keeping the dynamical indicator of remained block
 * count. When restoring transfer content prior to issuing a resume command, the
 * host driver shall restore the previously saved block count. Although the BLKCNT
 * field is 0 after reset, the read of reset value is 0x1. This is because when
 * XFERTYP[MSBSEL] is 0, indicating a single block transfer, the read value of
 * BLKCNT is always 1.
 *
 * Values:
 * - 0b0000000000000000 - Stop count.
 * - 0b0000000000000001 - 1 block
 * - 0b0000000000000010 - 2 blocks
 * - 0b1111111111111111 - 65535 blocks
 */
/*@{*/
/*! @brief Read current value of the SDHC_BLKATTR_BLKCNT field. */
#define SDHC_RD_BLKATTR_BLKCNT(base) ((SDHC_BLKATTR_REG(base) & SDHC_BLKATTR_BLKCNT_MASK) >> SDHC_BLKATTR_BLKCNT_SHIFT)
#define SDHC_BRD_BLKATTR_BLKCNT(base) (SDHC_RD_BLKATTR_BLKCNT(base))

/*! @brief Set the BLKCNT field to a new value. */
#define SDHC_WR_BLKATTR_BLKCNT(base, value) (SDHC_RMW_BLKATTR(base, SDHC_BLKATTR_BLKCNT_MASK, SDHC_BLKATTR_BLKCNT(value)))
#define SDHC_BWR_BLKATTR_BLKCNT(base, value) (SDHC_WR_BLKATTR_BLKCNT(base, value))
/*@}*/

/*******************************************************************************
 * SDHC_CMDARG - Command Argument register
 ******************************************************************************/

/*!
 * @brief SDHC_CMDARG - Command Argument register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register contains the SD/MMC command argument.
 */
/*!
 * @name Constants and macros for entire SDHC_CMDARG register
 */
/*@{*/
#define SDHC_RD_CMDARG(base)     (SDHC_CMDARG_REG(base))
#define SDHC_WR_CMDARG(base, value) (SDHC_CMDARG_REG(base) = (value))
#define SDHC_RMW_CMDARG(base, mask, value) (SDHC_WR_CMDARG(base, (SDHC_RD_CMDARG(base) & ~(mask)) | (value)))
#define SDHC_SET_CMDARG(base, value) (BME_OR32(&SDHC_CMDARG_REG(base), (uint32_t)(value)))
#define SDHC_CLR_CMDARG(base, value) (BME_AND32(&SDHC_CMDARG_REG(base), (uint32_t)(~(value))))
#define SDHC_TOG_CMDARG(base, value) (BME_XOR32(&SDHC_CMDARG_REG(base), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * SDHC_XFERTYP - Transfer Type register
 ******************************************************************************/

/*!
 * @brief SDHC_XFERTYP - Transfer Type register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register is used to control the operation of data transfers. The host
 * driver shall set this register before issuing a command followed by a data
 * transfer, or before issuing a resume command. To prevent data loss, the SDHC
 * prevents writing to the bits that are involved in the data transfer of this
 * register, when data transfer is active. These bits are DPSEL, MBSEL, DTDSEL, AC12EN,
 * BCEN, and DMAEN. The host driver shall check PRSSTAT[CDIHB] and PRSSTAT[CIHB]
 * before writing to this register. When PRSSTAT[CDIHB] is set, any attempt to
 * send a command with data by writing to this register is ignored; when
 * PRSSTAT[CIHB] bit is set, any write to this register is ignored. On sending commands with
 * data transfer involved, it is mandatory that the block size is nonzero.
 * Besides, block count must also be nonzero, or indicated as single block transfer
 * (bit 5 of this register is 0 when written), or block count is disabled (bit 1 of
 * this register is 0 when written), otherwise SDHC will ignore the sending of
 * this command and do nothing. If the commands with data transfer does not
 * receive the response in 64 clock cycles, that is, response time-out, SDHC will
 * regard the external device does not accept the command and abort the data transfer.
 * In this scenario, the driver must issue the command again to retry the
 * transfer. It is also possible that, for some reason, the card responds to the
 * command but SDHC does not receive the response, and if it is internal DMA (either
 * simple DMA or ADMA) read operation, the external system memory is over-written
 * by the internal DMA with data sent back from the card. The following table
 * shows the summary of how register settings determine the type of data transfer.
 * Transfer Type register setting for various transfer types Multi/Single block
 * select Block count enable Block count Function 0 Don't care Don't care Single
 * transfer 1 0 Don't care Infinite transfer 1 1 Positive number Multiple transfer 1
 * 1 Zero No data transfer The following table shows the relationship between
 * XFERTYP[CICEN] and XFERTYP[CCCEN], in regards to XFERTYP[RSPTYP] as well as the
 * name of the response type. Relationship between parameters and the name of the
 * response type Response type (RSPTYP) Index check enable (CICEN) CRC check
 * enable (CCCEN) Name of response type 00 0 0 No Response 01 0 1 IR2 10 0 0 R3,R4
 * 10 1 1 R1,R5,R6 11 1 1 R1b,R5b In the SDIO specification, response type
 * notation for R5b is not defined. R5 includes R5b in the SDIO specification. But R5b
 * is defined in this specification to specify that the SDHC will check the busy
 * status after receiving a response. For example, usually CMD52 is used with R5,
 * but the I/O abort command shall be used with R5b. The CRC field for R3 and R4
 * is expected to be all 1 bits. The CRC check shall be disabled for these
 * response types.
 */
/*!
 * @name Constants and macros for entire SDHC_XFERTYP register
 */
/*@{*/
#define SDHC_RD_XFERTYP(base)    (SDHC_XFERTYP_REG(base))
#define SDHC_WR_XFERTYP(base, value) (SDHC_XFERTYP_REG(base) = (value))
#define SDHC_RMW_XFERTYP(base, mask, value) (SDHC_WR_XFERTYP(base, (SDHC_RD_XFERTYP(base) & ~(mask)) | (value)))
#define SDHC_SET_XFERTYP(base, value) (BME_OR32(&SDHC_XFERTYP_REG(base), (uint32_t)(value)))
#define SDHC_CLR_XFERTYP(base, value) (BME_AND32(&SDHC_XFERTYP_REG(base), (uint32_t)(~(value))))
#define SDHC_TOG_XFERTYP(base, value) (BME_XOR32(&SDHC_XFERTYP_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SDHC_XFERTYP bitfields
 */

/*!
 * @name Register SDHC_XFERTYP, field DMAEN[0] (RW)
 *
 * Enables DMA functionality. If this bit is set to 1, a DMA operation shall
 * begin when the host driver sets the DPSEL bit of this register. Whether the
 * simple DMA, or the advanced DMA, is active depends on PROCTL[DMAS].
 *
 * Values:
 * - 0b0 - Disable
 * - 0b1 - Enable
 */
/*@{*/
/*! @brief Read current value of the SDHC_XFERTYP_DMAEN field. */
#define SDHC_RD_XFERTYP_DMAEN(base) ((SDHC_XFERTYP_REG(base) & SDHC_XFERTYP_DMAEN_MASK) >> SDHC_XFERTYP_DMAEN_SHIFT)
#define SDHC_BRD_XFERTYP_DMAEN(base) (BME_UBFX32(&SDHC_XFERTYP_REG(base), SDHC_XFERTYP_DMAEN_SHIFT, SDHC_XFERTYP_DMAEN_WIDTH))

/*! @brief Set the DMAEN field to a new value. */
#define SDHC_WR_XFERTYP_DMAEN(base, value) (SDHC_RMW_XFERTYP(base, SDHC_XFERTYP_DMAEN_MASK, SDHC_XFERTYP_DMAEN(value)))
#define SDHC_BWR_XFERTYP_DMAEN(base, value) (BME_BFI32(&SDHC_XFERTYP_REG(base), ((uint32_t)(value) << SDHC_XFERTYP_DMAEN_SHIFT), SDHC_XFERTYP_DMAEN_SHIFT, SDHC_XFERTYP_DMAEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_XFERTYP, field BCEN[1] (RW)
 *
 * Used to enable the Block Count register, which is only relevant for multiple
 * block transfers. When this bit is 0, the internal counter for block is
 * disabled, which is useful in executing an infinite transfer.
 *
 * Values:
 * - 0b0 - Disable
 * - 0b1 - Enable
 */
/*@{*/
/*! @brief Read current value of the SDHC_XFERTYP_BCEN field. */
#define SDHC_RD_XFERTYP_BCEN(base) ((SDHC_XFERTYP_REG(base) & SDHC_XFERTYP_BCEN_MASK) >> SDHC_XFERTYP_BCEN_SHIFT)
#define SDHC_BRD_XFERTYP_BCEN(base) (BME_UBFX32(&SDHC_XFERTYP_REG(base), SDHC_XFERTYP_BCEN_SHIFT, SDHC_XFERTYP_BCEN_WIDTH))

/*! @brief Set the BCEN field to a new value. */
#define SDHC_WR_XFERTYP_BCEN(base, value) (SDHC_RMW_XFERTYP(base, SDHC_XFERTYP_BCEN_MASK, SDHC_XFERTYP_BCEN(value)))
#define SDHC_BWR_XFERTYP_BCEN(base, value) (BME_BFI32(&SDHC_XFERTYP_REG(base), ((uint32_t)(value) << SDHC_XFERTYP_BCEN_SHIFT), SDHC_XFERTYP_BCEN_SHIFT, SDHC_XFERTYP_BCEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_XFERTYP, field AC12EN[2] (RW)
 *
 * Multiple block transfers for memory require a CMD12 to stop the transaction.
 * When this bit is set to 1, the SDHC will issue a CMD12 automatically when the
 * last block transfer has completed. The host driver shall not set this bit to
 * issue commands that do not require CMD12 to stop a multiple block data
 * transfer. In particular, secure commands defined in File Security Specification (see
 * reference list) do not require CMD12. In single block transfer, the SDHC will
 * ignore this bit whether it is set or not.
 *
 * Values:
 * - 0b0 - Disable
 * - 0b1 - Enable
 */
/*@{*/
/*! @brief Read current value of the SDHC_XFERTYP_AC12EN field. */
#define SDHC_RD_XFERTYP_AC12EN(base) ((SDHC_XFERTYP_REG(base) & SDHC_XFERTYP_AC12EN_MASK) >> SDHC_XFERTYP_AC12EN_SHIFT)
#define SDHC_BRD_XFERTYP_AC12EN(base) (BME_UBFX32(&SDHC_XFERTYP_REG(base), SDHC_XFERTYP_AC12EN_SHIFT, SDHC_XFERTYP_AC12EN_WIDTH))

/*! @brief Set the AC12EN field to a new value. */
#define SDHC_WR_XFERTYP_AC12EN(base, value) (SDHC_RMW_XFERTYP(base, SDHC_XFERTYP_AC12EN_MASK, SDHC_XFERTYP_AC12EN(value)))
#define SDHC_BWR_XFERTYP_AC12EN(base, value) (BME_BFI32(&SDHC_XFERTYP_REG(base), ((uint32_t)(value) << SDHC_XFERTYP_AC12EN_SHIFT), SDHC_XFERTYP_AC12EN_SHIFT, SDHC_XFERTYP_AC12EN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_XFERTYP, field DTDSEL[4] (RW)
 *
 * Defines the direction of DAT line data transfers. The bit is set to 1 by the
 * host driver to transfer data from the SD card to the SDHC and is set to 0 for
 * all other commands.
 *
 * Values:
 * - 0b0 - Write host to card.
 * - 0b1 - Read card to host.
 */
/*@{*/
/*! @brief Read current value of the SDHC_XFERTYP_DTDSEL field. */
#define SDHC_RD_XFERTYP_DTDSEL(base) ((SDHC_XFERTYP_REG(base) & SDHC_XFERTYP_DTDSEL_MASK) >> SDHC_XFERTYP_DTDSEL_SHIFT)
#define SDHC_BRD_XFERTYP_DTDSEL(base) (BME_UBFX32(&SDHC_XFERTYP_REG(base), SDHC_XFERTYP_DTDSEL_SHIFT, SDHC_XFERTYP_DTDSEL_WIDTH))

/*! @brief Set the DTDSEL field to a new value. */
#define SDHC_WR_XFERTYP_DTDSEL(base, value) (SDHC_RMW_XFERTYP(base, SDHC_XFERTYP_DTDSEL_MASK, SDHC_XFERTYP_DTDSEL(value)))
#define SDHC_BWR_XFERTYP_DTDSEL(base, value) (BME_BFI32(&SDHC_XFERTYP_REG(base), ((uint32_t)(value) << SDHC_XFERTYP_DTDSEL_SHIFT), SDHC_XFERTYP_DTDSEL_SHIFT, SDHC_XFERTYP_DTDSEL_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_XFERTYP, field MSBSEL[5] (RW)
 *
 * Enables multiple block DAT line data transfers. For any other commands, this
 * bit shall be set to 0. If this bit is 0, it is not necessary to set the block
 * count register.
 *
 * Values:
 * - 0b0 - Single block.
 * - 0b1 - Multiple blocks.
 */
/*@{*/
/*! @brief Read current value of the SDHC_XFERTYP_MSBSEL field. */
#define SDHC_RD_XFERTYP_MSBSEL(base) ((SDHC_XFERTYP_REG(base) & SDHC_XFERTYP_MSBSEL_MASK) >> SDHC_XFERTYP_MSBSEL_SHIFT)
#define SDHC_BRD_XFERTYP_MSBSEL(base) (BME_UBFX32(&SDHC_XFERTYP_REG(base), SDHC_XFERTYP_MSBSEL_SHIFT, SDHC_XFERTYP_MSBSEL_WIDTH))

/*! @brief Set the MSBSEL field to a new value. */
#define SDHC_WR_XFERTYP_MSBSEL(base, value) (SDHC_RMW_XFERTYP(base, SDHC_XFERTYP_MSBSEL_MASK, SDHC_XFERTYP_MSBSEL(value)))
#define SDHC_BWR_XFERTYP_MSBSEL(base, value) (BME_BFI32(&SDHC_XFERTYP_REG(base), ((uint32_t)(value) << SDHC_XFERTYP_MSBSEL_SHIFT), SDHC_XFERTYP_MSBSEL_SHIFT, SDHC_XFERTYP_MSBSEL_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_XFERTYP, field RSPTYP[17:16] (RW)
 *
 * Values:
 * - 0b00 - No response.
 * - 0b01 - Response length 136.
 * - 0b10 - Response length 48.
 * - 0b11 - Response length 48, check busy after response.
 */
/*@{*/
/*! @brief Read current value of the SDHC_XFERTYP_RSPTYP field. */
#define SDHC_RD_XFERTYP_RSPTYP(base) ((SDHC_XFERTYP_REG(base) & SDHC_XFERTYP_RSPTYP_MASK) >> SDHC_XFERTYP_RSPTYP_SHIFT)
#define SDHC_BRD_XFERTYP_RSPTYP(base) (BME_UBFX32(&SDHC_XFERTYP_REG(base), SDHC_XFERTYP_RSPTYP_SHIFT, SDHC_XFERTYP_RSPTYP_WIDTH))

/*! @brief Set the RSPTYP field to a new value. */
#define SDHC_WR_XFERTYP_RSPTYP(base, value) (SDHC_RMW_XFERTYP(base, SDHC_XFERTYP_RSPTYP_MASK, SDHC_XFERTYP_RSPTYP(value)))
#define SDHC_BWR_XFERTYP_RSPTYP(base, value) (BME_BFI32(&SDHC_XFERTYP_REG(base), ((uint32_t)(value) << SDHC_XFERTYP_RSPTYP_SHIFT), SDHC_XFERTYP_RSPTYP_SHIFT, SDHC_XFERTYP_RSPTYP_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_XFERTYP, field CCCEN[19] (RW)
 *
 * If this bit is set to 1, the SDHC shall check the CRC field in the response.
 * If an error is detected, it is reported as a Command CRC Error. If this bit is
 * set to 0, the CRC field is not checked. The number of bits checked by the CRC
 * field value changes according to the length of the response.
 *
 * Values:
 * - 0b0 - Disable
 * - 0b1 - Enable
 */
/*@{*/
/*! @brief Read current value of the SDHC_XFERTYP_CCCEN field. */
#define SDHC_RD_XFERTYP_CCCEN(base) ((SDHC_XFERTYP_REG(base) & SDHC_XFERTYP_CCCEN_MASK) >> SDHC_XFERTYP_CCCEN_SHIFT)
#define SDHC_BRD_XFERTYP_CCCEN(base) (BME_UBFX32(&SDHC_XFERTYP_REG(base), SDHC_XFERTYP_CCCEN_SHIFT, SDHC_XFERTYP_CCCEN_WIDTH))

/*! @brief Set the CCCEN field to a new value. */
#define SDHC_WR_XFERTYP_CCCEN(base, value) (SDHC_RMW_XFERTYP(base, SDHC_XFERTYP_CCCEN_MASK, SDHC_XFERTYP_CCCEN(value)))
#define SDHC_BWR_XFERTYP_CCCEN(base, value) (BME_BFI32(&SDHC_XFERTYP_REG(base), ((uint32_t)(value) << SDHC_XFERTYP_CCCEN_SHIFT), SDHC_XFERTYP_CCCEN_SHIFT, SDHC_XFERTYP_CCCEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_XFERTYP, field CICEN[20] (RW)
 *
 * If this bit is set to 1, the SDHC will check the index field in the response
 * to see if it has the same value as the command index. If it is not, it is
 * reported as a command index error. If this bit is set to 0, the index field is not
 * checked.
 *
 * Values:
 * - 0b0 - Disable
 * - 0b1 - Enable
 */
/*@{*/
/*! @brief Read current value of the SDHC_XFERTYP_CICEN field. */
#define SDHC_RD_XFERTYP_CICEN(base) ((SDHC_XFERTYP_REG(base) & SDHC_XFERTYP_CICEN_MASK) >> SDHC_XFERTYP_CICEN_SHIFT)
#define SDHC_BRD_XFERTYP_CICEN(base) (BME_UBFX32(&SDHC_XFERTYP_REG(base), SDHC_XFERTYP_CICEN_SHIFT, SDHC_XFERTYP_CICEN_WIDTH))

/*! @brief Set the CICEN field to a new value. */
#define SDHC_WR_XFERTYP_CICEN(base, value) (SDHC_RMW_XFERTYP(base, SDHC_XFERTYP_CICEN_MASK, SDHC_XFERTYP_CICEN(value)))
#define SDHC_BWR_XFERTYP_CICEN(base, value) (BME_BFI32(&SDHC_XFERTYP_REG(base), ((uint32_t)(value) << SDHC_XFERTYP_CICEN_SHIFT), SDHC_XFERTYP_CICEN_SHIFT, SDHC_XFERTYP_CICEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_XFERTYP, field DPSEL[21] (RW)
 *
 * This bit is set to 1 to indicate that data is present and shall be
 * transferred using the DAT line. It is set to 0 for the following: Commands using only
 * the CMD line, for example: CMD52. Commands with no data transfer, but using the
 * busy signal on DAT[0] line, R1b or R5b, for example: CMD38. In resume command,
 * this bit shall be set, and other bits in this register shall be set the same
 * as when the transfer was initially launched.That is to say, when this bit is
 * set, while the DTDSEL bit is 0, writes to the register Transfer Type are
 * ignored.
 *
 * Values:
 * - 0b0 - No data present.
 * - 0b1 - Data present.
 */
/*@{*/
/*! @brief Read current value of the SDHC_XFERTYP_DPSEL field. */
#define SDHC_RD_XFERTYP_DPSEL(base) ((SDHC_XFERTYP_REG(base) & SDHC_XFERTYP_DPSEL_MASK) >> SDHC_XFERTYP_DPSEL_SHIFT)
#define SDHC_BRD_XFERTYP_DPSEL(base) (BME_UBFX32(&SDHC_XFERTYP_REG(base), SDHC_XFERTYP_DPSEL_SHIFT, SDHC_XFERTYP_DPSEL_WIDTH))

/*! @brief Set the DPSEL field to a new value. */
#define SDHC_WR_XFERTYP_DPSEL(base, value) (SDHC_RMW_XFERTYP(base, SDHC_XFERTYP_DPSEL_MASK, SDHC_XFERTYP_DPSEL(value)))
#define SDHC_BWR_XFERTYP_DPSEL(base, value) (BME_BFI32(&SDHC_XFERTYP_REG(base), ((uint32_t)(value) << SDHC_XFERTYP_DPSEL_SHIFT), SDHC_XFERTYP_DPSEL_SHIFT, SDHC_XFERTYP_DPSEL_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_XFERTYP, field CMDTYP[23:22] (RW)
 *
 * There are three types of special commands: suspend, resume, and abort. These
 * bits shall be set to 00b for all other commands. Suspend command: If the
 * suspend command succeeds, the SDHC shall assume that the card bus has been released
 * and that it is possible to issue the next command which uses the DAT line.
 * Because the SDHC does not monitor the content of command response, it does not
 * know if the suspend command succeeded or not. It is the host driver's
 * responsibility to check the status of the suspend command and send another command
 * marked as suspend to inform the SDHC that a suspend command was successfully
 * issued. After the end bit of command is sent, the SDHC deasserts read wait for read
 * transactions and stops checking busy for write transactions. In 4-bit mode,
 * the interrupt cycle starts. If the suspend command fails, the SDHC will
 * maintain its current state, and the host driver shall restart the transfer by setting
 * PROCTL[CREQ]. Resume command: The host driver restarts the data transfer by
 * restoring the registers saved before sending the suspend command and then sends
 * the resume command. The SDHC will check for a pending busy state before
 * starting write transfers. Abort command: If this command is set when executing a
 * read transfer, the SDHC will stop reads to the buffer. If this command is set
 * when executing a write transfer, the SDHC will stop driving the DAT line. After
 * issuing the abort command, the host driver must issue a software reset (abort
 * transaction).
 *
 * Values:
 * - 0b00 - Normal other commands.
 * - 0b01 - Suspend CMD52 for writing bus suspend in CCCR.
 * - 0b10 - Resume CMD52 for writing function select in CCCR.
 * - 0b11 - Abort CMD12, CMD52 for writing I/O abort in CCCR.
 */
/*@{*/
/*! @brief Read current value of the SDHC_XFERTYP_CMDTYP field. */
#define SDHC_RD_XFERTYP_CMDTYP(base) ((SDHC_XFERTYP_REG(base) & SDHC_XFERTYP_CMDTYP_MASK) >> SDHC_XFERTYP_CMDTYP_SHIFT)
#define SDHC_BRD_XFERTYP_CMDTYP(base) (BME_UBFX32(&SDHC_XFERTYP_REG(base), SDHC_XFERTYP_CMDTYP_SHIFT, SDHC_XFERTYP_CMDTYP_WIDTH))

/*! @brief Set the CMDTYP field to a new value. */
#define SDHC_WR_XFERTYP_CMDTYP(base, value) (SDHC_RMW_XFERTYP(base, SDHC_XFERTYP_CMDTYP_MASK, SDHC_XFERTYP_CMDTYP(value)))
#define SDHC_BWR_XFERTYP_CMDTYP(base, value) (BME_BFI32(&SDHC_XFERTYP_REG(base), ((uint32_t)(value) << SDHC_XFERTYP_CMDTYP_SHIFT), SDHC_XFERTYP_CMDTYP_SHIFT, SDHC_XFERTYP_CMDTYP_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_XFERTYP, field CMDINX[29:24] (RW)
 *
 * These bits shall be set to the command number that is specified in bits 45-40
 * of the command-format in the SD Memory Card Physical Layer Specification and
 * SDIO Card Specification.
 */
/*@{*/
/*! @brief Read current value of the SDHC_XFERTYP_CMDINX field. */
#define SDHC_RD_XFERTYP_CMDINX(base) ((SDHC_XFERTYP_REG(base) & SDHC_XFERTYP_CMDINX_MASK) >> SDHC_XFERTYP_CMDINX_SHIFT)
#define SDHC_BRD_XFERTYP_CMDINX(base) (BME_UBFX32(&SDHC_XFERTYP_REG(base), SDHC_XFERTYP_CMDINX_SHIFT, SDHC_XFERTYP_CMDINX_WIDTH))

/*! @brief Set the CMDINX field to a new value. */
#define SDHC_WR_XFERTYP_CMDINX(base, value) (SDHC_RMW_XFERTYP(base, SDHC_XFERTYP_CMDINX_MASK, SDHC_XFERTYP_CMDINX(value)))
#define SDHC_BWR_XFERTYP_CMDINX(base, value) (BME_BFI32(&SDHC_XFERTYP_REG(base), ((uint32_t)(value) << SDHC_XFERTYP_CMDINX_SHIFT), SDHC_XFERTYP_CMDINX_SHIFT, SDHC_XFERTYP_CMDINX_WIDTH))
/*@}*/

/*******************************************************************************
 * SDHC_CMDRSP - Command Response 0
 ******************************************************************************/

/*!
 * @brief SDHC_CMDRSP - Command Response 0 (RO)
 *
 * Reset value: 0x00000000U
 *
 * This register is used to store part 0 of the response bits from the card.
 */
/*!
 * @name Constants and macros for entire SDHC_CMDRSP register
 */
/*@{*/
#define SDHC_RD_CMDRSP(base, index) (SDHC_CMDRSP_REG(base, index))
/*@}*/

/*******************************************************************************
 * SDHC_DATPORT - Buffer Data Port register
 ******************************************************************************/

/*!
 * @brief SDHC_DATPORT - Buffer Data Port register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This is a 32-bit data port register used to access the internal buffer and it
 * cannot be updated in Idle mode.
 */
/*!
 * @name Constants and macros for entire SDHC_DATPORT register
 */
/*@{*/
#define SDHC_RD_DATPORT(base)    (SDHC_DATPORT_REG(base))
#define SDHC_WR_DATPORT(base, value) (SDHC_DATPORT_REG(base) = (value))
#define SDHC_RMW_DATPORT(base, mask, value) (SDHC_WR_DATPORT(base, (SDHC_RD_DATPORT(base) & ~(mask)) | (value)))
#define SDHC_SET_DATPORT(base, value) (BME_OR32(&SDHC_DATPORT_REG(base), (uint32_t)(value)))
#define SDHC_CLR_DATPORT(base, value) (BME_AND32(&SDHC_DATPORT_REG(base), (uint32_t)(~(value))))
#define SDHC_TOG_DATPORT(base, value) (BME_XOR32(&SDHC_DATPORT_REG(base), (uint32_t)(value)))
/*@}*/

/*******************************************************************************
 * SDHC_PRSSTAT - Present State register
 ******************************************************************************/

/*!
 * @brief SDHC_PRSSTAT - Present State register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The host driver can get status of the SDHC from this 32-bit read-only
 * register. The host driver can issue CMD0, CMD12, CMD13 (for memory) and CMD52 (for
 * SDIO) when the DAT lines are busy during a data transfer. These commands can be
 * issued when Command Inhibit (CIHB) is set to zero. Other commands shall be
 * issued when Command Inhibit (CDIHB) is set to zero. Possible changes to the SD
 * Physical Specification may add other commands to this list in the future.
 */
/*!
 * @name Constants and macros for entire SDHC_PRSSTAT register
 */
/*@{*/
#define SDHC_RD_PRSSTAT(base)    (SDHC_PRSSTAT_REG(base))
/*@}*/

/*
 * Constants & macros for individual SDHC_PRSSTAT bitfields
 */

/*!
 * @name Register SDHC_PRSSTAT, field CIHB[0] (RO)
 *
 * If this status bit is 0, it indicates that the CMD line is not in use and the
 * SDHC can issue a SD/MMC Command using the CMD line. This bit is set also
 * immediately after the Transfer Type register is written. This bit is cleared when
 * the command response is received. Even if the CDIHB bit is set to 1, Commands
 * using only the CMD line can be issued if this bit is 0. Changing from 1 to 0
 * generates a command complete interrupt in the interrupt status register. If the
 * SDHC cannot issue the command because of a command conflict error (see
 * command CRC error) or because of a command not issued by auto CMD12 error, this bit
 * will remain 1 and the command complete is not set. The status of issuing an
 * auto CMD12 does not show on this bit.
 *
 * Values:
 * - 0b0 - Can issue command using only CMD line.
 * - 0b1 - Cannot issue command.
 */
/*@{*/
/*! @brief Read current value of the SDHC_PRSSTAT_CIHB field. */
#define SDHC_RD_PRSSTAT_CIHB(base) ((SDHC_PRSSTAT_REG(base) & SDHC_PRSSTAT_CIHB_MASK) >> SDHC_PRSSTAT_CIHB_SHIFT)
#define SDHC_BRD_PRSSTAT_CIHB(base) (BME_UBFX32(&SDHC_PRSSTAT_REG(base), SDHC_PRSSTAT_CIHB_SHIFT, SDHC_PRSSTAT_CIHB_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PRSSTAT, field CDIHB[1] (RO)
 *
 * This status bit is generated if either the DLA or the RTA is set to 1. If
 * this bit is 0, it indicates that the SDHC can issue the next SD/MMC Command.
 * Commands with a busy signal belong to CDIHB, for example, R1b, R5b type. Except in
 * the case when the command busy is finished, changing from 1 to 0 generates a
 * transfer complete interrupt in the Interrupt Status register. The SD host
 * driver can save registers for a suspend transaction after this bit has changed
 * from 1 to 0.
 *
 * Values:
 * - 0b0 - Can issue command which uses the DAT line.
 * - 0b1 - Cannot issue command which uses the DAT line.
 */
/*@{*/
/*! @brief Read current value of the SDHC_PRSSTAT_CDIHB field. */
#define SDHC_RD_PRSSTAT_CDIHB(base) ((SDHC_PRSSTAT_REG(base) & SDHC_PRSSTAT_CDIHB_MASK) >> SDHC_PRSSTAT_CDIHB_SHIFT)
#define SDHC_BRD_PRSSTAT_CDIHB(base) (BME_UBFX32(&SDHC_PRSSTAT_REG(base), SDHC_PRSSTAT_CDIHB_SHIFT, SDHC_PRSSTAT_CDIHB_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PRSSTAT, field DLA[2] (RO)
 *
 * Indicates whether one of the DAT lines on the SD bus is in use. In the case
 * of read transactions: This status indicates whether a read transfer is
 * executing on the SD bus. Changes in this value from 1 to 0, between data blocks,
 * generates a block gap event interrupt in the Interrupt Status register. This bit
 * will be set in either of the following cases: After the end bit of the read
 * command. When writing a 1 to PROCTL[CREQ] to restart a read transfer. This bit
 * will be cleared in either of the following cases: When the end bit of the last
 * data block is sent from the SD bus to the SDHC. When the read wait state is
 * stopped by a suspend command and the DAT2 line is released. The SDHC will wait at
 * the next block gap by driving read wait at the start of the interrupt cycle.
 * If the read wait signal is already driven (data buffer cannot receive data),
 * the SDHC can wait for a current block gap by continuing to drive the read wait
 * signal. It is necessary to support read wait to use the suspend / resume
 * function. This bit will remain 1 during read wait. In the case of write
 * transactions: This status indicates that a write transfer is executing on the SD bus.
 * Changes in this value from 1 to 0 generate a transfer complete interrupt in the
 * interrupt status register. This bit will be set in either of the following
 * cases: After the end bit of the write command. When writing to 1 to PROCTL[CREQ] to
 * continue a write transfer. This bit will be cleared in either of the
 * following cases: When the SD card releases write busy of the last data block, the SDHC
 * will also detect if the output is not busy. If the SD card does not drive the
 * busy signal after the CRC status is received, the SDHC shall assume the card
 * drive "Not busy". When the SD card releases write busy, prior to waiting for
 * write transfer, and as a result of a stop at block gap request. In the case of
 * command with busy pending: This status indicates that a busy state follows the
 * command and the data line is in use. This bit will be cleared when the DAT0
 * line is released.
 *
 * Values:
 * - 0b0 - DAT line inactive.
 * - 0b1 - DAT line active.
 */
/*@{*/
/*! @brief Read current value of the SDHC_PRSSTAT_DLA field. */
#define SDHC_RD_PRSSTAT_DLA(base) ((SDHC_PRSSTAT_REG(base) & SDHC_PRSSTAT_DLA_MASK) >> SDHC_PRSSTAT_DLA_SHIFT)
#define SDHC_BRD_PRSSTAT_DLA(base) (BME_UBFX32(&SDHC_PRSSTAT_REG(base), SDHC_PRSSTAT_DLA_SHIFT, SDHC_PRSSTAT_DLA_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PRSSTAT, field SDSTB[3] (RO)
 *
 * Indicates that the internal card clock is stable. This bit is for the host
 * driver to poll clock status when changing the clock frequency. It is recommended
 * to clear SYSCTL[SDCLKEN] to remove glitch on the card clock when the
 * frequency is changing.
 *
 * Values:
 * - 0b0 - Clock is changing frequency and not stable.
 * - 0b1 - Clock is stable.
 */
/*@{*/
/*! @brief Read current value of the SDHC_PRSSTAT_SDSTB field. */
#define SDHC_RD_PRSSTAT_SDSTB(base) ((SDHC_PRSSTAT_REG(base) & SDHC_PRSSTAT_SDSTB_MASK) >> SDHC_PRSSTAT_SDSTB_SHIFT)
#define SDHC_BRD_PRSSTAT_SDSTB(base) (BME_UBFX32(&SDHC_PRSSTAT_REG(base), SDHC_PRSSTAT_SDSTB_SHIFT, SDHC_PRSSTAT_SDSTB_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PRSSTAT, field IPGOFF[4] (RO)
 *
 * Indicates that the bus clock is internally gated off. This bit is for the
 * host driver to debug.
 *
 * Values:
 * - 0b0 - Bus clock is active.
 * - 0b1 - Bus clock is gated off.
 */
/*@{*/
/*! @brief Read current value of the SDHC_PRSSTAT_IPGOFF field. */
#define SDHC_RD_PRSSTAT_IPGOFF(base) ((SDHC_PRSSTAT_REG(base) & SDHC_PRSSTAT_IPGOFF_MASK) >> SDHC_PRSSTAT_IPGOFF_SHIFT)
#define SDHC_BRD_PRSSTAT_IPGOFF(base) (BME_UBFX32(&SDHC_PRSSTAT_REG(base), SDHC_PRSSTAT_IPGOFF_SHIFT, SDHC_PRSSTAT_IPGOFF_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PRSSTAT, field HCKOFF[5] (RO)
 *
 * Indicates that the system clock is internally gated off. This bit is for the
 * host driver to debug during a data transfer.
 *
 * Values:
 * - 0b0 - System clock is active.
 * - 0b1 - System clock is gated off.
 */
/*@{*/
/*! @brief Read current value of the SDHC_PRSSTAT_HCKOFF field. */
#define SDHC_RD_PRSSTAT_HCKOFF(base) ((SDHC_PRSSTAT_REG(base) & SDHC_PRSSTAT_HCKOFF_MASK) >> SDHC_PRSSTAT_HCKOFF_SHIFT)
#define SDHC_BRD_PRSSTAT_HCKOFF(base) (BME_UBFX32(&SDHC_PRSSTAT_REG(base), SDHC_PRSSTAT_HCKOFF_SHIFT, SDHC_PRSSTAT_HCKOFF_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PRSSTAT, field PEROFF[6] (RO)
 *
 * Indicates that the is internally gated off. This bit is for the host driver
 * to debug transaction on the SD bus. When INITA bit is set, SDHC sending 80
 * clock cycles to the card, SDCLKEN must be 1 to enable the output card clock,
 * otherwise the will never be gate off, so and will be always active. SDHC clock SDHC
 * clock SDHC clock bus clock
 *
 * Values:
 * - 0b0 - SDHC clock is active.
 * - 0b1 - SDHC clock is gated off.
 */
/*@{*/
/*! @brief Read current value of the SDHC_PRSSTAT_PEROFF field. */
#define SDHC_RD_PRSSTAT_PEROFF(base) ((SDHC_PRSSTAT_REG(base) & SDHC_PRSSTAT_PEROFF_MASK) >> SDHC_PRSSTAT_PEROFF_SHIFT)
#define SDHC_BRD_PRSSTAT_PEROFF(base) (BME_UBFX32(&SDHC_PRSSTAT_REG(base), SDHC_PRSSTAT_PEROFF_SHIFT, SDHC_PRSSTAT_PEROFF_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PRSSTAT, field SDOFF[7] (RO)
 *
 * Indicates that the SD clock is internally gated off, because of buffer
 * over/under-run or read pause without read wait assertion, or the driver has cleared
 * SYSCTL[SDCLKEN] to stop the SD clock. This bit is for the host driver to debug
 * data transaction on the SD bus.
 *
 * Values:
 * - 0b0 - SD clock is active.
 * - 0b1 - SD clock is gated off.
 */
/*@{*/
/*! @brief Read current value of the SDHC_PRSSTAT_SDOFF field. */
#define SDHC_RD_PRSSTAT_SDOFF(base) ((SDHC_PRSSTAT_REG(base) & SDHC_PRSSTAT_SDOFF_MASK) >> SDHC_PRSSTAT_SDOFF_SHIFT)
#define SDHC_BRD_PRSSTAT_SDOFF(base) (BME_UBFX32(&SDHC_PRSSTAT_REG(base), SDHC_PRSSTAT_SDOFF_SHIFT, SDHC_PRSSTAT_SDOFF_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PRSSTAT, field WTA[8] (RO)
 *
 * Indicates that a write transfer is active. If this bit is 0, it means no
 * valid write data exists in the SDHC. This bit is set in either of the following
 * cases: After the end bit of the write command. When writing 1 to PROCTL[CREQ] to
 * restart a write transfer. This bit is cleared in either of the following
 * cases: After getting the CRC status of the last data block as specified by the
 * transfer count (single and multiple). After getting the CRC status of any block
 * where data transmission is about to be stopped by a stop at block gap request.
 * During a write transaction, a block gap event interrupt is generated when this
 * bit is changed to 0, as result of the stop at block gap request being set.
 * This status is useful for the host driver in determining when to issue commands
 * during write busy state.
 *
 * Values:
 * - 0b0 - No valid data.
 * - 0b1 - Transferring data.
 */
/*@{*/
/*! @brief Read current value of the SDHC_PRSSTAT_WTA field. */
#define SDHC_RD_PRSSTAT_WTA(base) ((SDHC_PRSSTAT_REG(base) & SDHC_PRSSTAT_WTA_MASK) >> SDHC_PRSSTAT_WTA_SHIFT)
#define SDHC_BRD_PRSSTAT_WTA(base) (BME_UBFX32(&SDHC_PRSSTAT_REG(base), SDHC_PRSSTAT_WTA_SHIFT, SDHC_PRSSTAT_WTA_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PRSSTAT, field RTA[9] (RO)
 *
 * Used for detecting completion of a read transfer. This bit is set for either
 * of the following conditions: After the end bit of the read command. When
 * writing a 1 to PROCTL[CREQ] to restart a read transfer. A transfer complete
 * interrupt is generated when this bit changes to 0. This bit is cleared for either of
 * the following conditions: When the last data block as specified by block
 * length is transferred to the system, that is, all data are read away from SDHC
 * internal buffer. When all valid data blocks have been transferred from SDHC
 * internal buffer to the system and no current block transfers are being sent as a
 * result of the stop at block gap request being set to 1.
 *
 * Values:
 * - 0b0 - No valid data.
 * - 0b1 - Transferring data.
 */
/*@{*/
/*! @brief Read current value of the SDHC_PRSSTAT_RTA field. */
#define SDHC_RD_PRSSTAT_RTA(base) ((SDHC_PRSSTAT_REG(base) & SDHC_PRSSTAT_RTA_MASK) >> SDHC_PRSSTAT_RTA_SHIFT)
#define SDHC_BRD_PRSSTAT_RTA(base) (BME_UBFX32(&SDHC_PRSSTAT_REG(base), SDHC_PRSSTAT_RTA_SHIFT, SDHC_PRSSTAT_RTA_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PRSSTAT, field BWEN[10] (RO)
 *
 * Used for non-DMA write transfers. The SDHC can implement multiple buffers to
 * transfer data efficiently. This read-only flag indicates whether space is
 * available for write data. If this bit is 1, valid data greater than the watermark
 * level can be written to the buffer. This read-only flag indicates whether
 * space is available for write data.
 *
 * Values:
 * - 0b0 - Write disable, the buffer can hold valid data less than the write
 *     watermark level.
 * - 0b1 - Write enable, the buffer can hold valid data greater than the write
 *     watermark level.
 */
/*@{*/
/*! @brief Read current value of the SDHC_PRSSTAT_BWEN field. */
#define SDHC_RD_PRSSTAT_BWEN(base) ((SDHC_PRSSTAT_REG(base) & SDHC_PRSSTAT_BWEN_MASK) >> SDHC_PRSSTAT_BWEN_SHIFT)
#define SDHC_BRD_PRSSTAT_BWEN(base) (BME_UBFX32(&SDHC_PRSSTAT_REG(base), SDHC_PRSSTAT_BWEN_SHIFT, SDHC_PRSSTAT_BWEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PRSSTAT, field BREN[11] (RO)
 *
 * Used for non-DMA read transfers. The SDHC may implement multiple buffers to
 * transfer data efficiently. This read-only flag indicates that valid data exists
 * in the host side buffer. If this bit is high, valid data greater than the
 * watermark level exist in the buffer. This read-only flag indicates that valid
 * data exists in the host side buffer.
 *
 * Values:
 * - 0b0 - Read disable, valid data less than the watermark level exist in the
 *     buffer.
 * - 0b1 - Read enable, valid data greater than the watermark level exist in the
 *     buffer.
 */
/*@{*/
/*! @brief Read current value of the SDHC_PRSSTAT_BREN field. */
#define SDHC_RD_PRSSTAT_BREN(base) ((SDHC_PRSSTAT_REG(base) & SDHC_PRSSTAT_BREN_MASK) >> SDHC_PRSSTAT_BREN_SHIFT)
#define SDHC_BRD_PRSSTAT_BREN(base) (BME_UBFX32(&SDHC_PRSSTAT_REG(base), SDHC_PRSSTAT_BREN_SHIFT, SDHC_PRSSTAT_BREN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PRSSTAT, field CINS[16] (RO)
 *
 * Indicates whether a card has been inserted. The SDHC debounces this signal so
 * that the host driver will not need to wait for it to stabilize. Changing from
 * a 0 to 1 generates a card insertion interrupt in the Interrupt Status
 * register. Changing from a 1 to 0 generates a card removal interrupt in the Interrupt
 * Status register. A write to the force event register does not effect this bit.
 * SYSCTL[RSTA] does not effect this bit. A software reset does not effect this
 * bit.
 *
 * Values:
 * - 0b0 - Power on reset or no card.
 * - 0b1 - Card inserted.
 */
/*@{*/
/*! @brief Read current value of the SDHC_PRSSTAT_CINS field. */
#define SDHC_RD_PRSSTAT_CINS(base) ((SDHC_PRSSTAT_REG(base) & SDHC_PRSSTAT_CINS_MASK) >> SDHC_PRSSTAT_CINS_SHIFT)
#define SDHC_BRD_PRSSTAT_CINS(base) (BME_UBFX32(&SDHC_PRSSTAT_REG(base), SDHC_PRSSTAT_CINS_SHIFT, SDHC_PRSSTAT_CINS_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PRSSTAT, field CLSL[23] (RO)
 *
 * Used to check the CMD line level to recover from errors, and for debugging.
 * The reset value is effected by the external pullup/pulldown resistor, by
 * default, the read value of this bit after reset is 1b, when the command line is
 * pulled up.
 */
/*@{*/
/*! @brief Read current value of the SDHC_PRSSTAT_CLSL field. */
#define SDHC_RD_PRSSTAT_CLSL(base) ((SDHC_PRSSTAT_REG(base) & SDHC_PRSSTAT_CLSL_MASK) >> SDHC_PRSSTAT_CLSL_SHIFT)
#define SDHC_BRD_PRSSTAT_CLSL(base) (BME_UBFX32(&SDHC_PRSSTAT_REG(base), SDHC_PRSSTAT_CLSL_SHIFT, SDHC_PRSSTAT_CLSL_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PRSSTAT, field DLSL[31:24] (RO)
 *
 * Used to check the DAT line level to recover from errors, and for debugging.
 * This is especially useful in detecting the busy signal level from DAT[0]. The
 * reset value is effected by the external pullup/pulldown resistors. By default,
 * the read value of this field after reset is 8'b11110111, when DAT[3] is pulled
 * down and the other lines are pulled up.
 */
/*@{*/
/*! @brief Read current value of the SDHC_PRSSTAT_DLSL field. */
#define SDHC_RD_PRSSTAT_DLSL(base) ((SDHC_PRSSTAT_REG(base) & SDHC_PRSSTAT_DLSL_MASK) >> SDHC_PRSSTAT_DLSL_SHIFT)
#define SDHC_BRD_PRSSTAT_DLSL(base) (BME_UBFX32(&SDHC_PRSSTAT_REG(base), SDHC_PRSSTAT_DLSL_SHIFT, SDHC_PRSSTAT_DLSL_WIDTH))
/*@}*/

/*******************************************************************************
 * SDHC_PROCTL - Protocol Control register
 ******************************************************************************/

/*!
 * @brief SDHC_PROCTL - Protocol Control register (RW)
 *
 * Reset value: 0x00000020U
 *
 * There are three cases to restart the transfer after stop at the block gap.
 * Which case is appropriate depends on whether the SDHC issues a suspend command
 * or the SD card accepts the suspend command: If the host driver does not issue a
 * suspend command, the continue request shall be used to restart the transfer.
 * If the host driver issues a suspend command and the SD card accepts it, a
 * resume command shall be used to restart the transfer. If the host driver issues a
 * suspend command and the SD card does not accept it, the continue request shall
 * be used to restart the transfer. Any time stop at block gap request stops the
 * data transfer, the host driver shall wait for a transfer complete (in the
 * interrupt status register), before attempting to restart the transfer. When
 * restarting the data transfer by continue request, the host driver shall clear the
 * stop at block gap request before or simultaneously.
 */
/*!
 * @name Constants and macros for entire SDHC_PROCTL register
 */
/*@{*/
#define SDHC_RD_PROCTL(base)     (SDHC_PROCTL_REG(base))
#define SDHC_WR_PROCTL(base, value) (SDHC_PROCTL_REG(base) = (value))
#define SDHC_RMW_PROCTL(base, mask, value) (SDHC_WR_PROCTL(base, (SDHC_RD_PROCTL(base) & ~(mask)) | (value)))
#define SDHC_SET_PROCTL(base, value) (BME_OR32(&SDHC_PROCTL_REG(base), (uint32_t)(value)))
#define SDHC_CLR_PROCTL(base, value) (BME_AND32(&SDHC_PROCTL_REG(base), (uint32_t)(~(value))))
#define SDHC_TOG_PROCTL(base, value) (BME_XOR32(&SDHC_PROCTL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SDHC_PROCTL bitfields
 */

/*!
 * @name Register SDHC_PROCTL, field LCTL[0] (RW)
 *
 * This bit, fully controlled by the host driver, is used to caution the user
 * not to remove the card while the card is being accessed. If the software is
 * going to issue multiple SD commands, this bit can be set during all these
 * transactions. It is not necessary to change for each transaction. When the software
 * issues multiple SD commands, setting the bit once before the first command is
 * sufficient: it is not necessary to reset the bit between commands.
 *
 * Values:
 * - 0b0 - LED off.
 * - 0b1 - LED on.
 */
/*@{*/
/*! @brief Read current value of the SDHC_PROCTL_LCTL field. */
#define SDHC_RD_PROCTL_LCTL(base) ((SDHC_PROCTL_REG(base) & SDHC_PROCTL_LCTL_MASK) >> SDHC_PROCTL_LCTL_SHIFT)
#define SDHC_BRD_PROCTL_LCTL(base) (BME_UBFX32(&SDHC_PROCTL_REG(base), SDHC_PROCTL_LCTL_SHIFT, SDHC_PROCTL_LCTL_WIDTH))

/*! @brief Set the LCTL field to a new value. */
#define SDHC_WR_PROCTL_LCTL(base, value) (SDHC_RMW_PROCTL(base, SDHC_PROCTL_LCTL_MASK, SDHC_PROCTL_LCTL(value)))
#define SDHC_BWR_PROCTL_LCTL(base, value) (BME_BFI32(&SDHC_PROCTL_REG(base), ((uint32_t)(value) << SDHC_PROCTL_LCTL_SHIFT), SDHC_PROCTL_LCTL_SHIFT, SDHC_PROCTL_LCTL_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PROCTL, field DTW[2:1] (RW)
 *
 * Selects the data width of the SD bus for a data transfer. The host driver
 * shall set it to match the data width of the card. Possible data transfer width is
 * 1-bit, 4-bits or 8-bits.
 *
 * Values:
 * - 0b00 - 1-bit mode
 * - 0b01 - 4-bit mode
 * - 0b10 - 8-bit mode
 * - 0b11 - Reserved
 */
/*@{*/
/*! @brief Read current value of the SDHC_PROCTL_DTW field. */
#define SDHC_RD_PROCTL_DTW(base) ((SDHC_PROCTL_REG(base) & SDHC_PROCTL_DTW_MASK) >> SDHC_PROCTL_DTW_SHIFT)
#define SDHC_BRD_PROCTL_DTW(base) (BME_UBFX32(&SDHC_PROCTL_REG(base), SDHC_PROCTL_DTW_SHIFT, SDHC_PROCTL_DTW_WIDTH))

/*! @brief Set the DTW field to a new value. */
#define SDHC_WR_PROCTL_DTW(base, value) (SDHC_RMW_PROCTL(base, SDHC_PROCTL_DTW_MASK, SDHC_PROCTL_DTW(value)))
#define SDHC_BWR_PROCTL_DTW(base, value) (BME_BFI32(&SDHC_PROCTL_REG(base), ((uint32_t)(value) << SDHC_PROCTL_DTW_SHIFT), SDHC_PROCTL_DTW_SHIFT, SDHC_PROCTL_DTW_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PROCTL, field D3CD[3] (RW)
 *
 * If this bit is set, DAT3 should be pulled down to act as a card detection
 * pin. Be cautious when using this feature, because DAT3 is also a chip-select for
 * the SPI mode. A pulldown on this pin and CMD0 may set the card into the SPI
 * mode, which the SDHC does not support. Note: Keep this bit set if SDIO interrupt
 * is used.
 *
 * Values:
 * - 0b0 - DAT3 does not monitor card Insertion.
 * - 0b1 - DAT3 as card detection pin.
 */
/*@{*/
/*! @brief Read current value of the SDHC_PROCTL_D3CD field. */
#define SDHC_RD_PROCTL_D3CD(base) ((SDHC_PROCTL_REG(base) & SDHC_PROCTL_D3CD_MASK) >> SDHC_PROCTL_D3CD_SHIFT)
#define SDHC_BRD_PROCTL_D3CD(base) (BME_UBFX32(&SDHC_PROCTL_REG(base), SDHC_PROCTL_D3CD_SHIFT, SDHC_PROCTL_D3CD_WIDTH))

/*! @brief Set the D3CD field to a new value. */
#define SDHC_WR_PROCTL_D3CD(base, value) (SDHC_RMW_PROCTL(base, SDHC_PROCTL_D3CD_MASK, SDHC_PROCTL_D3CD(value)))
#define SDHC_BWR_PROCTL_D3CD(base, value) (BME_BFI32(&SDHC_PROCTL_REG(base), ((uint32_t)(value) << SDHC_PROCTL_D3CD_SHIFT), SDHC_PROCTL_D3CD_SHIFT, SDHC_PROCTL_D3CD_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PROCTL, field EMODE[5:4] (RW)
 *
 * The SDHC supports all four endian modes in data transfer.
 *
 * Values:
 * - 0b00 - Big endian mode
 * - 0b01 - Half word big endian mode
 * - 0b10 - Little endian mode
 * - 0b11 - Reserved
 */
/*@{*/
/*! @brief Read current value of the SDHC_PROCTL_EMODE field. */
#define SDHC_RD_PROCTL_EMODE(base) ((SDHC_PROCTL_REG(base) & SDHC_PROCTL_EMODE_MASK) >> SDHC_PROCTL_EMODE_SHIFT)
#define SDHC_BRD_PROCTL_EMODE(base) (BME_UBFX32(&SDHC_PROCTL_REG(base), SDHC_PROCTL_EMODE_SHIFT, SDHC_PROCTL_EMODE_WIDTH))

/*! @brief Set the EMODE field to a new value. */
#define SDHC_WR_PROCTL_EMODE(base, value) (SDHC_RMW_PROCTL(base, SDHC_PROCTL_EMODE_MASK, SDHC_PROCTL_EMODE(value)))
#define SDHC_BWR_PROCTL_EMODE(base, value) (BME_BFI32(&SDHC_PROCTL_REG(base), ((uint32_t)(value) << SDHC_PROCTL_EMODE_SHIFT), SDHC_PROCTL_EMODE_SHIFT, SDHC_PROCTL_EMODE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PROCTL, field CDTL[6] (RW)
 *
 * Enabled while the CDSS is set to 1 and it indicates card insertion.
 *
 * Values:
 * - 0b0 - Card detect test level is 0, no card inserted.
 * - 0b1 - Card detect test level is 1, card inserted.
 */
/*@{*/
/*! @brief Read current value of the SDHC_PROCTL_CDTL field. */
#define SDHC_RD_PROCTL_CDTL(base) ((SDHC_PROCTL_REG(base) & SDHC_PROCTL_CDTL_MASK) >> SDHC_PROCTL_CDTL_SHIFT)
#define SDHC_BRD_PROCTL_CDTL(base) (BME_UBFX32(&SDHC_PROCTL_REG(base), SDHC_PROCTL_CDTL_SHIFT, SDHC_PROCTL_CDTL_WIDTH))

/*! @brief Set the CDTL field to a new value. */
#define SDHC_WR_PROCTL_CDTL(base, value) (SDHC_RMW_PROCTL(base, SDHC_PROCTL_CDTL_MASK, SDHC_PROCTL_CDTL(value)))
#define SDHC_BWR_PROCTL_CDTL(base, value) (BME_BFI32(&SDHC_PROCTL_REG(base), ((uint32_t)(value) << SDHC_PROCTL_CDTL_SHIFT), SDHC_PROCTL_CDTL_SHIFT, SDHC_PROCTL_CDTL_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PROCTL, field CDSS[7] (RW)
 *
 * Selects the source for the card detection.
 *
 * Values:
 * - 0b0 - Card detection level is selected for normal purpose.
 * - 0b1 - Card detection test level is selected for test purpose.
 */
/*@{*/
/*! @brief Read current value of the SDHC_PROCTL_CDSS field. */
#define SDHC_RD_PROCTL_CDSS(base) ((SDHC_PROCTL_REG(base) & SDHC_PROCTL_CDSS_MASK) >> SDHC_PROCTL_CDSS_SHIFT)
#define SDHC_BRD_PROCTL_CDSS(base) (BME_UBFX32(&SDHC_PROCTL_REG(base), SDHC_PROCTL_CDSS_SHIFT, SDHC_PROCTL_CDSS_WIDTH))

/*! @brief Set the CDSS field to a new value. */
#define SDHC_WR_PROCTL_CDSS(base, value) (SDHC_RMW_PROCTL(base, SDHC_PROCTL_CDSS_MASK, SDHC_PROCTL_CDSS(value)))
#define SDHC_BWR_PROCTL_CDSS(base, value) (BME_BFI32(&SDHC_PROCTL_REG(base), ((uint32_t)(value) << SDHC_PROCTL_CDSS_SHIFT), SDHC_PROCTL_CDSS_SHIFT, SDHC_PROCTL_CDSS_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PROCTL, field DMAS[9:8] (RW)
 *
 * This field is valid while DMA (SDMA or ADMA) is enabled and selects the DMA
 * operation.
 *
 * Values:
 * - 0b00 - No DMA or simple DMA is selected.
 * - 0b01 - ADMA1 is selected.
 * - 0b10 - ADMA2 is selected.
 * - 0b11 - Reserved
 */
/*@{*/
/*! @brief Read current value of the SDHC_PROCTL_DMAS field. */
#define SDHC_RD_PROCTL_DMAS(base) ((SDHC_PROCTL_REG(base) & SDHC_PROCTL_DMAS_MASK) >> SDHC_PROCTL_DMAS_SHIFT)
#define SDHC_BRD_PROCTL_DMAS(base) (BME_UBFX32(&SDHC_PROCTL_REG(base), SDHC_PROCTL_DMAS_SHIFT, SDHC_PROCTL_DMAS_WIDTH))

/*! @brief Set the DMAS field to a new value. */
#define SDHC_WR_PROCTL_DMAS(base, value) (SDHC_RMW_PROCTL(base, SDHC_PROCTL_DMAS_MASK, SDHC_PROCTL_DMAS(value)))
#define SDHC_BWR_PROCTL_DMAS(base, value) (BME_BFI32(&SDHC_PROCTL_REG(base), ((uint32_t)(value) << SDHC_PROCTL_DMAS_SHIFT), SDHC_PROCTL_DMAS_SHIFT, SDHC_PROCTL_DMAS_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PROCTL, field SABGREQ[16] (RW)
 *
 * Used to stop executing a transaction at the next block gap for both DMA and
 * non-DMA transfers. Until the IRQSTATEN[TCSEN] is set to 1, indicating a
 * transfer completion, the host driver shall leave this bit set to 1. Clearing both
 * PROCTL[SABGREQ] and PROCTL[CREQ] does not cause the transaction to restart. Read
 * Wait is used to stop the read transaction at the block gap. The SDHC will
 * honor the PROCTL[SABGREQ] for write transfers, but for read transfers it requires
 * that SDIO card support read wait. Therefore, the host driver shall not set
 * this bit during read transfers unless the SDIO card supports read wait and has
 * set PROCTL[RWCTL] to 1, otherwise the SDHC will stop the SD bus clock to pause
 * the read operation during block gap. In the case of write transfers in which
 * the host driver writes data to the data port register, the host driver shall set
 * this bit after all block data is written. If this bit is set to 1, the host
 * driver shall not write data to the Data Port register after a block is sent.
 * Once this bit is set, the host driver shall not clear this bit before
 * IRQSTATEN[TCSEN] is set, otherwise the SDHC's behavior is undefined. This bit effects
 * PRSSTAT[RTA], PRSSTAT[WTA], and PRSSTAT[CDIHB].
 *
 * Values:
 * - 0b0 - Transfer
 * - 0b1 - Stop
 */
/*@{*/
/*! @brief Read current value of the SDHC_PROCTL_SABGREQ field. */
#define SDHC_RD_PROCTL_SABGREQ(base) ((SDHC_PROCTL_REG(base) & SDHC_PROCTL_SABGREQ_MASK) >> SDHC_PROCTL_SABGREQ_SHIFT)
#define SDHC_BRD_PROCTL_SABGREQ(base) (BME_UBFX32(&SDHC_PROCTL_REG(base), SDHC_PROCTL_SABGREQ_SHIFT, SDHC_PROCTL_SABGREQ_WIDTH))

/*! @brief Set the SABGREQ field to a new value. */
#define SDHC_WR_PROCTL_SABGREQ(base, value) (SDHC_RMW_PROCTL(base, SDHC_PROCTL_SABGREQ_MASK, SDHC_PROCTL_SABGREQ(value)))
#define SDHC_BWR_PROCTL_SABGREQ(base, value) (BME_BFI32(&SDHC_PROCTL_REG(base), ((uint32_t)(value) << SDHC_PROCTL_SABGREQ_SHIFT), SDHC_PROCTL_SABGREQ_SHIFT, SDHC_PROCTL_SABGREQ_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PROCTL, field CREQ[17] (RW)
 *
 * Used to restart a transaction which was stopped using the PROCTL[SABGREQ].
 * When a suspend operation is not accepted by the card, it is also by setting this
 * bit to restart the paused transfer. To cancel stop at the block gap, set
 * PROCTL[SABGREQ] to 0 and set this bit to 1 to restart the transfer. The SDHC
 * automatically clears this bit, therefore it is not necessary for the host driver to
 * set this bit to 0. If both PROCTL[SABGREQ] and this bit are 1, the continue
 * request is ignored.
 *
 * Values:
 * - 0b0 - No effect.
 * - 0b1 - Restart
 */
/*@{*/
/*! @brief Read current value of the SDHC_PROCTL_CREQ field. */
#define SDHC_RD_PROCTL_CREQ(base) ((SDHC_PROCTL_REG(base) & SDHC_PROCTL_CREQ_MASK) >> SDHC_PROCTL_CREQ_SHIFT)
#define SDHC_BRD_PROCTL_CREQ(base) (BME_UBFX32(&SDHC_PROCTL_REG(base), SDHC_PROCTL_CREQ_SHIFT, SDHC_PROCTL_CREQ_WIDTH))

/*! @brief Set the CREQ field to a new value. */
#define SDHC_WR_PROCTL_CREQ(base, value) (SDHC_RMW_PROCTL(base, SDHC_PROCTL_CREQ_MASK, SDHC_PROCTL_CREQ(value)))
#define SDHC_BWR_PROCTL_CREQ(base, value) (BME_BFI32(&SDHC_PROCTL_REG(base), ((uint32_t)(value) << SDHC_PROCTL_CREQ_SHIFT), SDHC_PROCTL_CREQ_SHIFT, SDHC_PROCTL_CREQ_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PROCTL, field RWCTL[18] (RW)
 *
 * The read wait function is optional for SDIO cards. If the card supports read
 * wait, set this bit to enable use of the read wait protocol to stop read data
 * using the DAT[2] line. Otherwise, the SDHC has to stop the SD Clock to hold
 * read data, which restricts commands generation. When the host driver detects an
 * SDIO card insertion, it shall set this bit according to the CCCR of the card.
 * If the card does not support read wait, this bit shall never be set to 1,
 * otherwise DAT line conflicts may occur. If this bit is set to 0, stop at block gap
 * during read operation is also supported, but the SDHC will stop the SD Clock
 * to pause reading operation.
 *
 * Values:
 * - 0b0 - Disable read wait control, and stop SD clock at block gap when
 *     SABGREQ is set.
 * - 0b1 - Enable read wait control, and assert read wait without stopping SD
 *     clock at block gap when SABGREQ bit is set.
 */
/*@{*/
/*! @brief Read current value of the SDHC_PROCTL_RWCTL field. */
#define SDHC_RD_PROCTL_RWCTL(base) ((SDHC_PROCTL_REG(base) & SDHC_PROCTL_RWCTL_MASK) >> SDHC_PROCTL_RWCTL_SHIFT)
#define SDHC_BRD_PROCTL_RWCTL(base) (BME_UBFX32(&SDHC_PROCTL_REG(base), SDHC_PROCTL_RWCTL_SHIFT, SDHC_PROCTL_RWCTL_WIDTH))

/*! @brief Set the RWCTL field to a new value. */
#define SDHC_WR_PROCTL_RWCTL(base, value) (SDHC_RMW_PROCTL(base, SDHC_PROCTL_RWCTL_MASK, SDHC_PROCTL_RWCTL(value)))
#define SDHC_BWR_PROCTL_RWCTL(base, value) (BME_BFI32(&SDHC_PROCTL_REG(base), ((uint32_t)(value) << SDHC_PROCTL_RWCTL_SHIFT), SDHC_PROCTL_RWCTL_SHIFT, SDHC_PROCTL_RWCTL_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PROCTL, field IABG[19] (RW)
 *
 * Valid only in 4-bit mode, of the SDIO card, and selects a sample point in the
 * interrupt cycle. Setting to 1 enables interrupt detection at the block gap
 * for a multiple block transfer. Setting to 0 disables interrupt detection during
 * a multiple block transfer. If the SDIO card can't signal an interrupt during a
 * multiple block transfer, this bit must be set to 0 to avoid an inadvertent
 * interrupt. When the host driver detects an SDIO card insertion, it shall set
 * this bit according to the CCCR of the card.
 *
 * Values:
 * - 0b0 - Disabled
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_PROCTL_IABG field. */
#define SDHC_RD_PROCTL_IABG(base) ((SDHC_PROCTL_REG(base) & SDHC_PROCTL_IABG_MASK) >> SDHC_PROCTL_IABG_SHIFT)
#define SDHC_BRD_PROCTL_IABG(base) (BME_UBFX32(&SDHC_PROCTL_REG(base), SDHC_PROCTL_IABG_SHIFT, SDHC_PROCTL_IABG_WIDTH))

/*! @brief Set the IABG field to a new value. */
#define SDHC_WR_PROCTL_IABG(base, value) (SDHC_RMW_PROCTL(base, SDHC_PROCTL_IABG_MASK, SDHC_PROCTL_IABG(value)))
#define SDHC_BWR_PROCTL_IABG(base, value) (BME_BFI32(&SDHC_PROCTL_REG(base), ((uint32_t)(value) << SDHC_PROCTL_IABG_SHIFT), SDHC_PROCTL_IABG_SHIFT, SDHC_PROCTL_IABG_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PROCTL, field WECINT[24] (RW)
 *
 * Enables a wakeup event, via IRQSTAT[CINT]. This bit can be set to 1 if FN_WUS
 * (Wake Up Support) in CIS is set to 1. When this bit is set, the card
 * interrupt status and the SDHC interrupt can be asserted without SD_CLK toggling. When
 * the wakeup feature is not enabled, the SD_CLK must be active to assert the
 * card interrupt status and the SDHC interrupt.
 *
 * Values:
 * - 0b0 - Disabled
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_PROCTL_WECINT field. */
#define SDHC_RD_PROCTL_WECINT(base) ((SDHC_PROCTL_REG(base) & SDHC_PROCTL_WECINT_MASK) >> SDHC_PROCTL_WECINT_SHIFT)
#define SDHC_BRD_PROCTL_WECINT(base) (BME_UBFX32(&SDHC_PROCTL_REG(base), SDHC_PROCTL_WECINT_SHIFT, SDHC_PROCTL_WECINT_WIDTH))

/*! @brief Set the WECINT field to a new value. */
#define SDHC_WR_PROCTL_WECINT(base, value) (SDHC_RMW_PROCTL(base, SDHC_PROCTL_WECINT_MASK, SDHC_PROCTL_WECINT(value)))
#define SDHC_BWR_PROCTL_WECINT(base, value) (BME_BFI32(&SDHC_PROCTL_REG(base), ((uint32_t)(value) << SDHC_PROCTL_WECINT_SHIFT), SDHC_PROCTL_WECINT_SHIFT, SDHC_PROCTL_WECINT_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PROCTL, field WECINS[25] (RW)
 *
 * Enables a wakeup event, via IRQSTAT[CINS]. FN_WUS (Wake Up Support) in CIS
 * does not effect this bit. When this bit is set, IRQSTATEN[CINSEN] and the SDHC
 * interrupt can be asserted without SD_CLK toggling. When the wakeup feature is
 * not enabled, the SD_CLK must be active to assert IRQSTATEN[CINSEN] and the SDHC
 * interrupt.
 *
 * Values:
 * - 0b0 - Disabled
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_PROCTL_WECINS field. */
#define SDHC_RD_PROCTL_WECINS(base) ((SDHC_PROCTL_REG(base) & SDHC_PROCTL_WECINS_MASK) >> SDHC_PROCTL_WECINS_SHIFT)
#define SDHC_BRD_PROCTL_WECINS(base) (BME_UBFX32(&SDHC_PROCTL_REG(base), SDHC_PROCTL_WECINS_SHIFT, SDHC_PROCTL_WECINS_WIDTH))

/*! @brief Set the WECINS field to a new value. */
#define SDHC_WR_PROCTL_WECINS(base, value) (SDHC_RMW_PROCTL(base, SDHC_PROCTL_WECINS_MASK, SDHC_PROCTL_WECINS(value)))
#define SDHC_BWR_PROCTL_WECINS(base, value) (BME_BFI32(&SDHC_PROCTL_REG(base), ((uint32_t)(value) << SDHC_PROCTL_WECINS_SHIFT), SDHC_PROCTL_WECINS_SHIFT, SDHC_PROCTL_WECINS_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_PROCTL, field WECRM[26] (RW)
 *
 * Enables a wakeup event, via IRQSTAT[CRM]. FN_WUS (Wake Up Support) in CIS
 * does not effect this bit. When this bit is set, IRQSTAT[CRM] and the SDHC
 * interrupt can be asserted without SD_CLK toggling. When the wakeup feature is not
 * enabled, the SD_CLK must be active to assert IRQSTAT[CRM] and the SDHC interrupt.
 *
 * Values:
 * - 0b0 - Disabled
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_PROCTL_WECRM field. */
#define SDHC_RD_PROCTL_WECRM(base) ((SDHC_PROCTL_REG(base) & SDHC_PROCTL_WECRM_MASK) >> SDHC_PROCTL_WECRM_SHIFT)
#define SDHC_BRD_PROCTL_WECRM(base) (BME_UBFX32(&SDHC_PROCTL_REG(base), SDHC_PROCTL_WECRM_SHIFT, SDHC_PROCTL_WECRM_WIDTH))

/*! @brief Set the WECRM field to a new value. */
#define SDHC_WR_PROCTL_WECRM(base, value) (SDHC_RMW_PROCTL(base, SDHC_PROCTL_WECRM_MASK, SDHC_PROCTL_WECRM(value)))
#define SDHC_BWR_PROCTL_WECRM(base, value) (BME_BFI32(&SDHC_PROCTL_REG(base), ((uint32_t)(value) << SDHC_PROCTL_WECRM_SHIFT), SDHC_PROCTL_WECRM_SHIFT, SDHC_PROCTL_WECRM_WIDTH))
/*@}*/

/*******************************************************************************
 * SDHC_SYSCTL - System Control register
 ******************************************************************************/

/*!
 * @brief SDHC_SYSCTL - System Control register (RW)
 *
 * Reset value: 0x00008008U
 */
/*!
 * @name Constants and macros for entire SDHC_SYSCTL register
 */
/*@{*/
#define SDHC_RD_SYSCTL(base)     (SDHC_SYSCTL_REG(base))
#define SDHC_WR_SYSCTL(base, value) (SDHC_SYSCTL_REG(base) = (value))
#define SDHC_RMW_SYSCTL(base, mask, value) (SDHC_WR_SYSCTL(base, (SDHC_RD_SYSCTL(base) & ~(mask)) | (value)))
#define SDHC_SET_SYSCTL(base, value) (BME_OR32(&SDHC_SYSCTL_REG(base), (uint32_t)(value)))
#define SDHC_CLR_SYSCTL(base, value) (BME_AND32(&SDHC_SYSCTL_REG(base), (uint32_t)(~(value))))
#define SDHC_TOG_SYSCTL(base, value) (BME_XOR32(&SDHC_SYSCTL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SDHC_SYSCTL bitfields
 */

/*!
 * @name Register SDHC_SYSCTL, field IPGEN[0] (RW)
 *
 * If this bit is set, bus clock will always be active and no automatic gating
 * is applied. The bus clock will be internally gated off, if none of the
 * following factors are met: The cmd part is reset, or Data part is reset, or Soft
 * reset, or The cmd is about to send, or Clock divisor is just updated, or Continue
 * request is just set, or This bit is set, or Card insertion is detected, or Card
 * removal is detected, or Card external interrupt is detected, or The SDHC
 * clock is not gated off The bus clock will not be auto gated off if the SDHC clock
 * is not gated off. So clearing only this bit has no effect unless the PEREN bit
 * is also cleared.
 *
 * Values:
 * - 0b0 - Bus clock will be internally gated off.
 * - 0b1 - Bus clock will not be automatically gated off.
 */
/*@{*/
/*! @brief Read current value of the SDHC_SYSCTL_IPGEN field. */
#define SDHC_RD_SYSCTL_IPGEN(base) ((SDHC_SYSCTL_REG(base) & SDHC_SYSCTL_IPGEN_MASK) >> SDHC_SYSCTL_IPGEN_SHIFT)
#define SDHC_BRD_SYSCTL_IPGEN(base) (BME_UBFX32(&SDHC_SYSCTL_REG(base), SDHC_SYSCTL_IPGEN_SHIFT, SDHC_SYSCTL_IPGEN_WIDTH))

/*! @brief Set the IPGEN field to a new value. */
#define SDHC_WR_SYSCTL_IPGEN(base, value) (SDHC_RMW_SYSCTL(base, SDHC_SYSCTL_IPGEN_MASK, SDHC_SYSCTL_IPGEN(value)))
#define SDHC_BWR_SYSCTL_IPGEN(base, value) (BME_BFI32(&SDHC_SYSCTL_REG(base), ((uint32_t)(value) << SDHC_SYSCTL_IPGEN_SHIFT), SDHC_SYSCTL_IPGEN_SHIFT, SDHC_SYSCTL_IPGEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_SYSCTL, field HCKEN[1] (RW)
 *
 * If this bit is set, system clock will always be active and no automatic
 * gating is applied. When this bit is cleared, system clock will be automatically off
 * when no data transfer is on the SD bus.
 *
 * Values:
 * - 0b0 - System clock will be internally gated off.
 * - 0b1 - System clock will not be automatically gated off.
 */
/*@{*/
/*! @brief Read current value of the SDHC_SYSCTL_HCKEN field. */
#define SDHC_RD_SYSCTL_HCKEN(base) ((SDHC_SYSCTL_REG(base) & SDHC_SYSCTL_HCKEN_MASK) >> SDHC_SYSCTL_HCKEN_SHIFT)
#define SDHC_BRD_SYSCTL_HCKEN(base) (BME_UBFX32(&SDHC_SYSCTL_REG(base), SDHC_SYSCTL_HCKEN_SHIFT, SDHC_SYSCTL_HCKEN_WIDTH))

/*! @brief Set the HCKEN field to a new value. */
#define SDHC_WR_SYSCTL_HCKEN(base, value) (SDHC_RMW_SYSCTL(base, SDHC_SYSCTL_HCKEN_MASK, SDHC_SYSCTL_HCKEN(value)))
#define SDHC_BWR_SYSCTL_HCKEN(base, value) (BME_BFI32(&SDHC_SYSCTL_REG(base), ((uint32_t)(value) << SDHC_SYSCTL_HCKEN_SHIFT), SDHC_SYSCTL_HCKEN_SHIFT, SDHC_SYSCTL_HCKEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_SYSCTL, field PEREN[2] (RW)
 *
 * If this bit is set, SDHC clock will always be active and no automatic gating
 * is applied. Thus the SDCLK is active except for when auto gating-off during
 * buffer danger (buffer about to over-run or under-run). When this bit is cleared,
 * the SDHC clock will be automatically off whenever there is no transaction on
 * the SD bus. Because this bit is only a feature enabling bit, clearing this bit
 * does not stop SDCLK immediately. The SDHC clock will be internally gated off,
 * if none of the following factors are met: The cmd part is reset, or Data part
 * is reset, or A soft reset, or The cmd is about to send, or Clock divisor is
 * just updated, or Continue request is just set, or This bit is set, or Card
 * insertion is detected, or Card removal is detected, or Card external interrupt is
 * detected, or 80 clocks for initialization phase is ongoing
 *
 * Values:
 * - 0b0 - SDHC clock will be internally gated off.
 * - 0b1 - SDHC clock will not be automatically gated off.
 */
/*@{*/
/*! @brief Read current value of the SDHC_SYSCTL_PEREN field. */
#define SDHC_RD_SYSCTL_PEREN(base) ((SDHC_SYSCTL_REG(base) & SDHC_SYSCTL_PEREN_MASK) >> SDHC_SYSCTL_PEREN_SHIFT)
#define SDHC_BRD_SYSCTL_PEREN(base) (BME_UBFX32(&SDHC_SYSCTL_REG(base), SDHC_SYSCTL_PEREN_SHIFT, SDHC_SYSCTL_PEREN_WIDTH))

/*! @brief Set the PEREN field to a new value. */
#define SDHC_WR_SYSCTL_PEREN(base, value) (SDHC_RMW_SYSCTL(base, SDHC_SYSCTL_PEREN_MASK, SDHC_SYSCTL_PEREN(value)))
#define SDHC_BWR_SYSCTL_PEREN(base, value) (BME_BFI32(&SDHC_SYSCTL_REG(base), ((uint32_t)(value) << SDHC_SYSCTL_PEREN_SHIFT), SDHC_SYSCTL_PEREN_SHIFT, SDHC_SYSCTL_PEREN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_SYSCTL, field SDCLKEN[3] (RW)
 *
 * The host controller shall stop SDCLK when writing this bit to 0. SDCLK
 * frequency can be changed when this bit is 0. Then, the host controller shall
 * maintain the same clock frequency until SDCLK is stopped (stop at SDCLK = 0). If the
 * IRQSTAT[CINS] is cleared, this bit must be cleared by the host driver to save
 * power.
 */
/*@{*/
/*! @brief Read current value of the SDHC_SYSCTL_SDCLKEN field. */
#define SDHC_RD_SYSCTL_SDCLKEN(base) ((SDHC_SYSCTL_REG(base) & SDHC_SYSCTL_SDCLKEN_MASK) >> SDHC_SYSCTL_SDCLKEN_SHIFT)
#define SDHC_BRD_SYSCTL_SDCLKEN(base) (BME_UBFX32(&SDHC_SYSCTL_REG(base), SDHC_SYSCTL_SDCLKEN_SHIFT, SDHC_SYSCTL_SDCLKEN_WIDTH))

/*! @brief Set the SDCLKEN field to a new value. */
#define SDHC_WR_SYSCTL_SDCLKEN(base, value) (SDHC_RMW_SYSCTL(base, SDHC_SYSCTL_SDCLKEN_MASK, SDHC_SYSCTL_SDCLKEN(value)))
#define SDHC_BWR_SYSCTL_SDCLKEN(base, value) (BME_BFI32(&SDHC_SYSCTL_REG(base), ((uint32_t)(value) << SDHC_SYSCTL_SDCLKEN_SHIFT), SDHC_SYSCTL_SDCLKEN_SHIFT, SDHC_SYSCTL_SDCLKEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_SYSCTL, field DVS[7:4] (RW)
 *
 * Used to provide a more exact divisor to generate the desired SD clock
 * frequency. Note the divider can even support odd divisor without deterioration of
 * duty cycle. The setting are as following:
 *
 * Values:
 * - 0b0000 - Divisor by 1.
 * - 0b0001 - Divisor by 2.
 * - 0b1110 - Divisor by 15.
 * - 0b1111 - Divisor by 16.
 */
/*@{*/
/*! @brief Read current value of the SDHC_SYSCTL_DVS field. */
#define SDHC_RD_SYSCTL_DVS(base) ((SDHC_SYSCTL_REG(base) & SDHC_SYSCTL_DVS_MASK) >> SDHC_SYSCTL_DVS_SHIFT)
#define SDHC_BRD_SYSCTL_DVS(base) (BME_UBFX32(&SDHC_SYSCTL_REG(base), SDHC_SYSCTL_DVS_SHIFT, SDHC_SYSCTL_DVS_WIDTH))

/*! @brief Set the DVS field to a new value. */
#define SDHC_WR_SYSCTL_DVS(base, value) (SDHC_RMW_SYSCTL(base, SDHC_SYSCTL_DVS_MASK, SDHC_SYSCTL_DVS(value)))
#define SDHC_BWR_SYSCTL_DVS(base, value) (BME_BFI32(&SDHC_SYSCTL_REG(base), ((uint32_t)(value) << SDHC_SYSCTL_DVS_SHIFT), SDHC_SYSCTL_DVS_SHIFT, SDHC_SYSCTL_DVS_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_SYSCTL, field SDCLKFS[15:8] (RW)
 *
 * Used to select the frequency of the SDCLK pin. The frequency is not
 * programmed directly. Rather this register holds the prescaler (this register) and
 * divisor (next register) of the base clock frequency register. Setting 00h bypasses
 * the frequency prescaler of the SD Clock. Multiple bits must not be set, or the
 * behavior of this prescaler is undefined. The two default divider values can
 * be calculated by the frequency of SDHC clock and the following divisor bits.
 * The frequency of SDCLK is set by the following formula: Clock frequency = (Base
 * clock) / (prescaler x divisor) For example, if the base clock frequency is 96
 * MHz, and the target frequency is 25 MHz, then choosing the prescaler value of
 * 01h and divisor value of 1h will yield 24 MHz, which is the nearest frequency
 * less than or equal to the target. Similarly, to approach a clock value of 400
 * kHz, the prescaler value of 08h and divisor value of eh yields the exact clock
 * value of 400 kHz. The reset value of this field is 80h, so if the input base
 * clock ( SDHC clock ) is about 96 MHz, the default SD clock after reset is 375
 * kHz. According to the SD Physical Specification Version 1.1 and the SDIO Card
 * Specification Version 1.2, the maximum SD clock frequency is 50 MHz and shall
 * never exceed this limit. Only the following settings are allowed:
 *
 * Values:
 * - 0b00000001 - Base clock divided by 2.
 * - 0b00000010 - Base clock divided by 4.
 * - 0b00000100 - Base clock divided by 8.
 * - 0b00001000 - Base clock divided by 16.
 * - 0b00010000 - Base clock divided by 32.
 * - 0b00100000 - Base clock divided by 64.
 * - 0b01000000 - Base clock divided by 128.
 * - 0b10000000 - Base clock divided by 256.
 */
/*@{*/
/*! @brief Read current value of the SDHC_SYSCTL_SDCLKFS field. */
#define SDHC_RD_SYSCTL_SDCLKFS(base) ((SDHC_SYSCTL_REG(base) & SDHC_SYSCTL_SDCLKFS_MASK) >> SDHC_SYSCTL_SDCLKFS_SHIFT)
#define SDHC_BRD_SYSCTL_SDCLKFS(base) (BME_UBFX32(&SDHC_SYSCTL_REG(base), SDHC_SYSCTL_SDCLKFS_SHIFT, SDHC_SYSCTL_SDCLKFS_WIDTH))

/*! @brief Set the SDCLKFS field to a new value. */
#define SDHC_WR_SYSCTL_SDCLKFS(base, value) (SDHC_RMW_SYSCTL(base, SDHC_SYSCTL_SDCLKFS_MASK, SDHC_SYSCTL_SDCLKFS(value)))
#define SDHC_BWR_SYSCTL_SDCLKFS(base, value) (BME_BFI32(&SDHC_SYSCTL_REG(base), ((uint32_t)(value) << SDHC_SYSCTL_SDCLKFS_SHIFT), SDHC_SYSCTL_SDCLKFS_SHIFT, SDHC_SYSCTL_SDCLKFS_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_SYSCTL, field DTOCV[19:16] (RW)
 *
 * Determines the interval by which DAT line timeouts are detected. See
 * IRQSTAT[DTOE] for information on factors that dictate time-out generation. Time-out
 * clock frequency will be generated by dividing the base clock SDCLK value by this
 * value. The host driver can clear IRQSTATEN[DTOESEN] to prevent inadvertent
 * time-out events.
 *
 * Values:
 * - 0b0000 - SDCLK x 2 13
 * - 0b0001 - SDCLK x 2 14
 * - 0b1110 - SDCLK x 2 27
 * - 0b1111 - Reserved
 */
/*@{*/
/*! @brief Read current value of the SDHC_SYSCTL_DTOCV field. */
#define SDHC_RD_SYSCTL_DTOCV(base) ((SDHC_SYSCTL_REG(base) & SDHC_SYSCTL_DTOCV_MASK) >> SDHC_SYSCTL_DTOCV_SHIFT)
#define SDHC_BRD_SYSCTL_DTOCV(base) (BME_UBFX32(&SDHC_SYSCTL_REG(base), SDHC_SYSCTL_DTOCV_SHIFT, SDHC_SYSCTL_DTOCV_WIDTH))

/*! @brief Set the DTOCV field to a new value. */
#define SDHC_WR_SYSCTL_DTOCV(base, value) (SDHC_RMW_SYSCTL(base, SDHC_SYSCTL_DTOCV_MASK, SDHC_SYSCTL_DTOCV(value)))
#define SDHC_BWR_SYSCTL_DTOCV(base, value) (BME_BFI32(&SDHC_SYSCTL_REG(base), ((uint32_t)(value) << SDHC_SYSCTL_DTOCV_SHIFT), SDHC_SYSCTL_DTOCV_SHIFT, SDHC_SYSCTL_DTOCV_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_SYSCTL, field RSTA[24] (WORZ)
 *
 * Effects the entire host controller except for the card detection circuit.
 * Register bits of type ROC, RW, RW1C, RWAC are cleared. During its initialization,
 * the host driver shall set this bit to 1 to reset the SDHC. The SDHC shall
 * reset this bit to 0 when the capabilities registers are valid and the host driver
 * can read them. Additional use of software reset for all does not affect the
 * value of the capabilities registers. After this bit is set, it is recommended
 * that the host driver reset the external card and reinitialize it.
 *
 * Values:
 * - 0b0 - No reset.
 * - 0b1 - Reset.
 */
/*@{*/
/*! @brief Set the RSTA field to a new value. */
#define SDHC_WR_SYSCTL_RSTA(base, value) (SDHC_RMW_SYSCTL(base, SDHC_SYSCTL_RSTA_MASK, SDHC_SYSCTL_RSTA(value)))
#define SDHC_BWR_SYSCTL_RSTA(base, value) (BME_BFI32(&SDHC_SYSCTL_REG(base), ((uint32_t)(value) << SDHC_SYSCTL_RSTA_SHIFT), SDHC_SYSCTL_RSTA_SHIFT, SDHC_SYSCTL_RSTA_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_SYSCTL, field RSTC[25] (WORZ)
 *
 * Only part of the command circuit is reset. The following registers and bits
 * are cleared by this bit: PRSSTAT[CIHB] IRQSTAT[CC]
 *
 * Values:
 * - 0b0 - No reset.
 * - 0b1 - Reset.
 */
/*@{*/
/*! @brief Set the RSTC field to a new value. */
#define SDHC_WR_SYSCTL_RSTC(base, value) (SDHC_RMW_SYSCTL(base, SDHC_SYSCTL_RSTC_MASK, SDHC_SYSCTL_RSTC(value)))
#define SDHC_BWR_SYSCTL_RSTC(base, value) (BME_BFI32(&SDHC_SYSCTL_REG(base), ((uint32_t)(value) << SDHC_SYSCTL_RSTC_SHIFT), SDHC_SYSCTL_RSTC_SHIFT, SDHC_SYSCTL_RSTC_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_SYSCTL, field RSTD[26] (WORZ)
 *
 * Only part of the data circuit is reset. DMA circuit is also reset. The
 * following registers and bits are cleared by this bit: Data Port register Buffer Is
 * Cleared And Initialized.Present State register Buffer Read Enable Buffer Write
 * Enable Read Transfer Active Write Transfer Active DAT Line Active Command
 * Inhibit (DAT) Protocol Control register Continue Request Stop At Block Gap Request
 * Interrupt Status register Buffer Read Ready Buffer Write Ready DMA Interrupt
 * Block Gap Event Transfer Complete
 *
 * Values:
 * - 0b0 - No reset.
 * - 0b1 - Reset.
 */
/*@{*/
/*! @brief Set the RSTD field to a new value. */
#define SDHC_WR_SYSCTL_RSTD(base, value) (SDHC_RMW_SYSCTL(base, SDHC_SYSCTL_RSTD_MASK, SDHC_SYSCTL_RSTD(value)))
#define SDHC_BWR_SYSCTL_RSTD(base, value) (BME_BFI32(&SDHC_SYSCTL_REG(base), ((uint32_t)(value) << SDHC_SYSCTL_RSTD_SHIFT), SDHC_SYSCTL_RSTD_SHIFT, SDHC_SYSCTL_RSTD_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_SYSCTL, field INITA[27] (RW)
 *
 * When this bit is set, 80 SD-clocks are sent to the card. After the 80 clocks
 * are sent, this bit is self-cleared. This bit is very useful during the card
 * power-up period when 74 SD-clocks are needed and the clock auto gating feature
 * is enabled. Writing 1 to this bit when this bit is already 1 has no effect.
 * Writing 0 to this bit at any time has no effect. When either of the PRSSTAT[CIHB]
 * and PRSSTAT[CDIHB] bits are set, writing 1 to this bit is ignored, that is,
 * when command line or data lines are active, write to this bit is not allowed.
 * On the otherhand, when this bit is set, that is, during intialization active
 * period, it is allowed to issue command, and the command bit stream will appear
 * on the CMD pad after all 80 clock cycles are done. So when this command ends,
 * the driver can make sure the 80 clock cycles are sent out. This is very useful
 * when the driver needs send 80 cycles to the card and does not want to wait
 * till this bit is self-cleared.
 */
/*@{*/
/*! @brief Read current value of the SDHC_SYSCTL_INITA field. */
#define SDHC_RD_SYSCTL_INITA(base) ((SDHC_SYSCTL_REG(base) & SDHC_SYSCTL_INITA_MASK) >> SDHC_SYSCTL_INITA_SHIFT)
#define SDHC_BRD_SYSCTL_INITA(base) (BME_UBFX32(&SDHC_SYSCTL_REG(base), SDHC_SYSCTL_INITA_SHIFT, SDHC_SYSCTL_INITA_WIDTH))

/*! @brief Set the INITA field to a new value. */
#define SDHC_WR_SYSCTL_INITA(base, value) (SDHC_RMW_SYSCTL(base, SDHC_SYSCTL_INITA_MASK, SDHC_SYSCTL_INITA(value)))
#define SDHC_BWR_SYSCTL_INITA(base, value) (BME_BFI32(&SDHC_SYSCTL_REG(base), ((uint32_t)(value) << SDHC_SYSCTL_INITA_SHIFT), SDHC_SYSCTL_INITA_SHIFT, SDHC_SYSCTL_INITA_WIDTH))
/*@}*/

/*******************************************************************************
 * SDHC_IRQSTAT - Interrupt Status register
 ******************************************************************************/

/*!
 * @brief SDHC_IRQSTAT - Interrupt Status register (RW)
 *
 * Reset value: 0x00000000U
 *
 * An interrupt is generated when the Normal Interrupt Signal Enable is enabled
 * and at least one of the status bits is set to 1. For all bits, writing 1 to a
 * bit clears it; writing to 0 keeps the bit unchanged. More than one status can
 * be cleared with a single register write. For Card Interrupt, before writing 1
 * to clear, it is required that the card stops asserting the interrupt, meaning
 * that when the Card Driver services the interrupt condition, otherwise the CINT
 * bit will be asserted again. The table below shows the relationship between
 * the CTOE and the CC bits. SDHC status for CTOE/CC bit combinations Command
 * complete Command timeout error Meaning of the status 0 0 X X 1 Response not
 * received within 64 SDCLK cycles 1 0 Response received The table below shows the
 * relationship between the Transfer Complete and the Data Timeout Error. SDHC status
 * for data timeout error/transfer complete bit combinations Transfer complete
 * Data timeout error Meaning of the status 0 0 X 0 1 Timeout occurred during
 * transfer 1 X Data transfer complete The table below shows the relationship between
 * the command CRC Error (CCE) and Command Timeout Error (CTOE). SDHC status for
 * CCE/CTOE Bit Combinations Command complete Command timeout error Meaning of
 * the status 0 0 No error 0 1 Response timeout error 1 0 Response CRC error 1 1
 * CMD line conflict
 */
/*!
 * @name Constants and macros for entire SDHC_IRQSTAT register
 */
/*@{*/
#define SDHC_RD_IRQSTAT(base)    (SDHC_IRQSTAT_REG(base))
#define SDHC_WR_IRQSTAT(base, value) (SDHC_IRQSTAT_REG(base) = (value))
#define SDHC_RMW_IRQSTAT(base, mask, value) (SDHC_WR_IRQSTAT(base, (SDHC_RD_IRQSTAT(base) & ~(mask)) | (value)))
#define SDHC_SET_IRQSTAT(base, value) (BME_OR32(&SDHC_IRQSTAT_REG(base), (uint32_t)(value)))
#define SDHC_CLR_IRQSTAT(base, value) (BME_AND32(&SDHC_IRQSTAT_REG(base), (uint32_t)(~(value))))
#define SDHC_TOG_IRQSTAT(base, value) (BME_XOR32(&SDHC_IRQSTAT_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SDHC_IRQSTAT bitfields
 */

/*!
 * @name Register SDHC_IRQSTAT, field CC[0] (W1C)
 *
 * This bit is set when you receive the end bit of the command response, except
 * Auto CMD12. See PRSSTAT[CIHB].
 *
 * Values:
 * - 0b0 - Command not complete.
 * - 0b1 - Command complete.
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTAT_CC field. */
#define SDHC_RD_IRQSTAT_CC(base) ((SDHC_IRQSTAT_REG(base) & SDHC_IRQSTAT_CC_MASK) >> SDHC_IRQSTAT_CC_SHIFT)
#define SDHC_BRD_IRQSTAT_CC(base) (BME_UBFX32(&SDHC_IRQSTAT_REG(base), SDHC_IRQSTAT_CC_SHIFT, SDHC_IRQSTAT_CC_WIDTH))

/*! @brief Set the CC field to a new value. */
#define SDHC_WR_IRQSTAT_CC(base, value) (SDHC_RMW_IRQSTAT(base, (SDHC_IRQSTAT_CC_MASK | SDHC_IRQSTAT_TC_MASK | SDHC_IRQSTAT_BGE_MASK | SDHC_IRQSTAT_DINT_MASK | SDHC_IRQSTAT_BWR_MASK | SDHC_IRQSTAT_BRR_MASK | SDHC_IRQSTAT_CINS_MASK | SDHC_IRQSTAT_CRM_MASK | SDHC_IRQSTAT_CINT_MASK | SDHC_IRQSTAT_CTOE_MASK | SDHC_IRQSTAT_CCE_MASK | SDHC_IRQSTAT_CEBE_MASK | SDHC_IRQSTAT_CIE_MASK | SDHC_IRQSTAT_DTOE_MASK | SDHC_IRQSTAT_DCE_MASK | SDHC_IRQSTAT_DEBE_MASK | SDHC_IRQSTAT_AC12E_MASK | SDHC_IRQSTAT_DMAE_MASK), SDHC_IRQSTAT_CC(value)))
#define SDHC_BWR_IRQSTAT_CC(base, value) (BME_BFI32(&SDHC_IRQSTAT_REG(base), ((uint32_t)(value) << SDHC_IRQSTAT_CC_SHIFT), SDHC_IRQSTAT_CC_SHIFT, SDHC_IRQSTAT_CC_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTAT, field TC[1] (W1C)
 *
 * This bit is set when a read or write transfer is completed. In the case of a
 * read transaction: This bit is set at the falling edge of the read transfer
 * active status. There are two cases in which this interrupt is generated. The
 * first is when a data transfer is completed as specified by the data length, after
 * the last data has been read to the host system. The second is when data has
 * stopped at the block gap and completed the data transfer by setting
 * PROCTL[SABGREQ], after valid data has been read to the host system. In the case of a write
 * transaction: This bit is set at the falling edge of the DAT line active
 * status. There are two cases in which this interrupt is generated. The first is when
 * the last data is written to the SD card as specified by the data length and
 * the busy signal is released. The second is when data transfers are stopped at
 * the block gap, by setting PROCTL[SABGREQ], and the data transfers are
 * completed,after valid data is written to the SD card and the busy signal released.
 *
 * Values:
 * - 0b0 - Transfer not complete.
 * - 0b1 - Transfer complete.
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTAT_TC field. */
#define SDHC_RD_IRQSTAT_TC(base) ((SDHC_IRQSTAT_REG(base) & SDHC_IRQSTAT_TC_MASK) >> SDHC_IRQSTAT_TC_SHIFT)
#define SDHC_BRD_IRQSTAT_TC(base) (BME_UBFX32(&SDHC_IRQSTAT_REG(base), SDHC_IRQSTAT_TC_SHIFT, SDHC_IRQSTAT_TC_WIDTH))

/*! @brief Set the TC field to a new value. */
#define SDHC_WR_IRQSTAT_TC(base, value) (SDHC_RMW_IRQSTAT(base, (SDHC_IRQSTAT_TC_MASK | SDHC_IRQSTAT_CC_MASK | SDHC_IRQSTAT_BGE_MASK | SDHC_IRQSTAT_DINT_MASK | SDHC_IRQSTAT_BWR_MASK | SDHC_IRQSTAT_BRR_MASK | SDHC_IRQSTAT_CINS_MASK | SDHC_IRQSTAT_CRM_MASK | SDHC_IRQSTAT_CINT_MASK | SDHC_IRQSTAT_CTOE_MASK | SDHC_IRQSTAT_CCE_MASK | SDHC_IRQSTAT_CEBE_MASK | SDHC_IRQSTAT_CIE_MASK | SDHC_IRQSTAT_DTOE_MASK | SDHC_IRQSTAT_DCE_MASK | SDHC_IRQSTAT_DEBE_MASK | SDHC_IRQSTAT_AC12E_MASK | SDHC_IRQSTAT_DMAE_MASK), SDHC_IRQSTAT_TC(value)))
#define SDHC_BWR_IRQSTAT_TC(base, value) (BME_BFI32(&SDHC_IRQSTAT_REG(base), ((uint32_t)(value) << SDHC_IRQSTAT_TC_SHIFT), SDHC_IRQSTAT_TC_SHIFT, SDHC_IRQSTAT_TC_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTAT, field BGE[2] (W1C)
 *
 * If PROCTL[SABGREQ] is set, this bit is set when a read or write transaction
 * is stopped at a block gap. If PROCTL[SABGREQ] is not set to 1, this bit is not
 * set to 1. In the case of a read transaction: This bit is set at the falling
 * edge of the DAT line active status, when the transaction is stopped at SD Bus
 * timing. The read wait must be supported in order to use this function. In the
 * case of write transaction: This bit is set at the falling edge of write transfer
 * active status, after getting CRC status at SD bus timing.
 *
 * Values:
 * - 0b0 - No block gap event.
 * - 0b1 - Transaction stopped at block gap.
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTAT_BGE field. */
#define SDHC_RD_IRQSTAT_BGE(base) ((SDHC_IRQSTAT_REG(base) & SDHC_IRQSTAT_BGE_MASK) >> SDHC_IRQSTAT_BGE_SHIFT)
#define SDHC_BRD_IRQSTAT_BGE(base) (BME_UBFX32(&SDHC_IRQSTAT_REG(base), SDHC_IRQSTAT_BGE_SHIFT, SDHC_IRQSTAT_BGE_WIDTH))

/*! @brief Set the BGE field to a new value. */
#define SDHC_WR_IRQSTAT_BGE(base, value) (SDHC_RMW_IRQSTAT(base, (SDHC_IRQSTAT_BGE_MASK | SDHC_IRQSTAT_CC_MASK | SDHC_IRQSTAT_TC_MASK | SDHC_IRQSTAT_DINT_MASK | SDHC_IRQSTAT_BWR_MASK | SDHC_IRQSTAT_BRR_MASK | SDHC_IRQSTAT_CINS_MASK | SDHC_IRQSTAT_CRM_MASK | SDHC_IRQSTAT_CINT_MASK | SDHC_IRQSTAT_CTOE_MASK | SDHC_IRQSTAT_CCE_MASK | SDHC_IRQSTAT_CEBE_MASK | SDHC_IRQSTAT_CIE_MASK | SDHC_IRQSTAT_DTOE_MASK | SDHC_IRQSTAT_DCE_MASK | SDHC_IRQSTAT_DEBE_MASK | SDHC_IRQSTAT_AC12E_MASK | SDHC_IRQSTAT_DMAE_MASK), SDHC_IRQSTAT_BGE(value)))
#define SDHC_BWR_IRQSTAT_BGE(base, value) (BME_BFI32(&SDHC_IRQSTAT_REG(base), ((uint32_t)(value) << SDHC_IRQSTAT_BGE_SHIFT), SDHC_IRQSTAT_BGE_SHIFT, SDHC_IRQSTAT_BGE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTAT, field DINT[3] (W1C)
 *
 * Occurs only when the internal DMA finishes the data transfer successfully.
 * Whenever errors occur during data transfer, this bit will not be set. Instead,
 * the DMAE bit will be set. Either Simple DMA or ADMA finishes data transferring,
 * this bit will be set.
 *
 * Values:
 * - 0b0 - No DMA Interrupt.
 * - 0b1 - DMA Interrupt is generated.
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTAT_DINT field. */
#define SDHC_RD_IRQSTAT_DINT(base) ((SDHC_IRQSTAT_REG(base) & SDHC_IRQSTAT_DINT_MASK) >> SDHC_IRQSTAT_DINT_SHIFT)
#define SDHC_BRD_IRQSTAT_DINT(base) (BME_UBFX32(&SDHC_IRQSTAT_REG(base), SDHC_IRQSTAT_DINT_SHIFT, SDHC_IRQSTAT_DINT_WIDTH))

/*! @brief Set the DINT field to a new value. */
#define SDHC_WR_IRQSTAT_DINT(base, value) (SDHC_RMW_IRQSTAT(base, (SDHC_IRQSTAT_DINT_MASK | SDHC_IRQSTAT_CC_MASK | SDHC_IRQSTAT_TC_MASK | SDHC_IRQSTAT_BGE_MASK | SDHC_IRQSTAT_BWR_MASK | SDHC_IRQSTAT_BRR_MASK | SDHC_IRQSTAT_CINS_MASK | SDHC_IRQSTAT_CRM_MASK | SDHC_IRQSTAT_CINT_MASK | SDHC_IRQSTAT_CTOE_MASK | SDHC_IRQSTAT_CCE_MASK | SDHC_IRQSTAT_CEBE_MASK | SDHC_IRQSTAT_CIE_MASK | SDHC_IRQSTAT_DTOE_MASK | SDHC_IRQSTAT_DCE_MASK | SDHC_IRQSTAT_DEBE_MASK | SDHC_IRQSTAT_AC12E_MASK | SDHC_IRQSTAT_DMAE_MASK), SDHC_IRQSTAT_DINT(value)))
#define SDHC_BWR_IRQSTAT_DINT(base, value) (BME_BFI32(&SDHC_IRQSTAT_REG(base), ((uint32_t)(value) << SDHC_IRQSTAT_DINT_SHIFT), SDHC_IRQSTAT_DINT_SHIFT, SDHC_IRQSTAT_DINT_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTAT, field BWR[4] (W1C)
 *
 * This status bit is set if the Buffer Write Enable bit, in the Present State
 * register, changes from 0 to 1. See the Buffer Write Enable bit in the Present
 * State register for additional information.
 *
 * Values:
 * - 0b0 - Not ready to write buffer.
 * - 0b1 - Ready to write buffer.
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTAT_BWR field. */
#define SDHC_RD_IRQSTAT_BWR(base) ((SDHC_IRQSTAT_REG(base) & SDHC_IRQSTAT_BWR_MASK) >> SDHC_IRQSTAT_BWR_SHIFT)
#define SDHC_BRD_IRQSTAT_BWR(base) (BME_UBFX32(&SDHC_IRQSTAT_REG(base), SDHC_IRQSTAT_BWR_SHIFT, SDHC_IRQSTAT_BWR_WIDTH))

/*! @brief Set the BWR field to a new value. */
#define SDHC_WR_IRQSTAT_BWR(base, value) (SDHC_RMW_IRQSTAT(base, (SDHC_IRQSTAT_BWR_MASK | SDHC_IRQSTAT_CC_MASK | SDHC_IRQSTAT_TC_MASK | SDHC_IRQSTAT_BGE_MASK | SDHC_IRQSTAT_DINT_MASK | SDHC_IRQSTAT_BRR_MASK | SDHC_IRQSTAT_CINS_MASK | SDHC_IRQSTAT_CRM_MASK | SDHC_IRQSTAT_CINT_MASK | SDHC_IRQSTAT_CTOE_MASK | SDHC_IRQSTAT_CCE_MASK | SDHC_IRQSTAT_CEBE_MASK | SDHC_IRQSTAT_CIE_MASK | SDHC_IRQSTAT_DTOE_MASK | SDHC_IRQSTAT_DCE_MASK | SDHC_IRQSTAT_DEBE_MASK | SDHC_IRQSTAT_AC12E_MASK | SDHC_IRQSTAT_DMAE_MASK), SDHC_IRQSTAT_BWR(value)))
#define SDHC_BWR_IRQSTAT_BWR(base, value) (BME_BFI32(&SDHC_IRQSTAT_REG(base), ((uint32_t)(value) << SDHC_IRQSTAT_BWR_SHIFT), SDHC_IRQSTAT_BWR_SHIFT, SDHC_IRQSTAT_BWR_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTAT, field BRR[5] (W1C)
 *
 * This status bit is set if the Buffer Read Enable bit, in the Present State
 * register, changes from 0 to 1. See the Buffer Read Enable bit in the Present
 * State register for additional information.
 *
 * Values:
 * - 0b0 - Not ready to read buffer.
 * - 0b1 - Ready to read buffer.
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTAT_BRR field. */
#define SDHC_RD_IRQSTAT_BRR(base) ((SDHC_IRQSTAT_REG(base) & SDHC_IRQSTAT_BRR_MASK) >> SDHC_IRQSTAT_BRR_SHIFT)
#define SDHC_BRD_IRQSTAT_BRR(base) (BME_UBFX32(&SDHC_IRQSTAT_REG(base), SDHC_IRQSTAT_BRR_SHIFT, SDHC_IRQSTAT_BRR_WIDTH))

/*! @brief Set the BRR field to a new value. */
#define SDHC_WR_IRQSTAT_BRR(base, value) (SDHC_RMW_IRQSTAT(base, (SDHC_IRQSTAT_BRR_MASK | SDHC_IRQSTAT_CC_MASK | SDHC_IRQSTAT_TC_MASK | SDHC_IRQSTAT_BGE_MASK | SDHC_IRQSTAT_DINT_MASK | SDHC_IRQSTAT_BWR_MASK | SDHC_IRQSTAT_CINS_MASK | SDHC_IRQSTAT_CRM_MASK | SDHC_IRQSTAT_CINT_MASK | SDHC_IRQSTAT_CTOE_MASK | SDHC_IRQSTAT_CCE_MASK | SDHC_IRQSTAT_CEBE_MASK | SDHC_IRQSTAT_CIE_MASK | SDHC_IRQSTAT_DTOE_MASK | SDHC_IRQSTAT_DCE_MASK | SDHC_IRQSTAT_DEBE_MASK | SDHC_IRQSTAT_AC12E_MASK | SDHC_IRQSTAT_DMAE_MASK), SDHC_IRQSTAT_BRR(value)))
#define SDHC_BWR_IRQSTAT_BRR(base, value) (BME_BFI32(&SDHC_IRQSTAT_REG(base), ((uint32_t)(value) << SDHC_IRQSTAT_BRR_SHIFT), SDHC_IRQSTAT_BRR_SHIFT, SDHC_IRQSTAT_BRR_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTAT, field CINS[6] (W1C)
 *
 * This status bit is set if the Card Inserted bit in the Present State register
 * changes from 0 to 1. When the host driver writes this bit to 1 to clear this
 * status, the status of the Card Inserted in the Present State register must be
 * confirmed. Because the card state may possibly be changed when the host driver
 * clears this bit and the interrupt event may not be generated. When this bit
 * is cleared, it will be set again if a card is inserted. To leave it cleared,
 * clear the Card Inserted Status Enable bit in Interrupt Status Enable register.
 *
 * Values:
 * - 0b0 - Card state unstable or removed.
 * - 0b1 - Card inserted.
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTAT_CINS field. */
#define SDHC_RD_IRQSTAT_CINS(base) ((SDHC_IRQSTAT_REG(base) & SDHC_IRQSTAT_CINS_MASK) >> SDHC_IRQSTAT_CINS_SHIFT)
#define SDHC_BRD_IRQSTAT_CINS(base) (BME_UBFX32(&SDHC_IRQSTAT_REG(base), SDHC_IRQSTAT_CINS_SHIFT, SDHC_IRQSTAT_CINS_WIDTH))

/*! @brief Set the CINS field to a new value. */
#define SDHC_WR_IRQSTAT_CINS(base, value) (SDHC_RMW_IRQSTAT(base, (SDHC_IRQSTAT_CINS_MASK | SDHC_IRQSTAT_CC_MASK | SDHC_IRQSTAT_TC_MASK | SDHC_IRQSTAT_BGE_MASK | SDHC_IRQSTAT_DINT_MASK | SDHC_IRQSTAT_BWR_MASK | SDHC_IRQSTAT_BRR_MASK | SDHC_IRQSTAT_CRM_MASK | SDHC_IRQSTAT_CINT_MASK | SDHC_IRQSTAT_CTOE_MASK | SDHC_IRQSTAT_CCE_MASK | SDHC_IRQSTAT_CEBE_MASK | SDHC_IRQSTAT_CIE_MASK | SDHC_IRQSTAT_DTOE_MASK | SDHC_IRQSTAT_DCE_MASK | SDHC_IRQSTAT_DEBE_MASK | SDHC_IRQSTAT_AC12E_MASK | SDHC_IRQSTAT_DMAE_MASK), SDHC_IRQSTAT_CINS(value)))
#define SDHC_BWR_IRQSTAT_CINS(base, value) (BME_BFI32(&SDHC_IRQSTAT_REG(base), ((uint32_t)(value) << SDHC_IRQSTAT_CINS_SHIFT), SDHC_IRQSTAT_CINS_SHIFT, SDHC_IRQSTAT_CINS_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTAT, field CRM[7] (W1C)
 *
 * This status bit is set if the Card Inserted bit in the Present State register
 * changes from 1 to 0. When the host driver writes this bit to 1 to clear this
 * status, the status of the Card Inserted in the Present State register must be
 * confirmed. Because the card state may possibly be changed when the host driver
 * clears this bit and the interrupt event may not be generated. When this bit
 * is cleared, it will be set again if no card is inserted. To leave it cleared,
 * clear the Card Removal Status Enable bit in Interrupt Status Enable register.
 *
 * Values:
 * - 0b0 - Card state unstable or inserted.
 * - 0b1 - Card removed.
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTAT_CRM field. */
#define SDHC_RD_IRQSTAT_CRM(base) ((SDHC_IRQSTAT_REG(base) & SDHC_IRQSTAT_CRM_MASK) >> SDHC_IRQSTAT_CRM_SHIFT)
#define SDHC_BRD_IRQSTAT_CRM(base) (BME_UBFX32(&SDHC_IRQSTAT_REG(base), SDHC_IRQSTAT_CRM_SHIFT, SDHC_IRQSTAT_CRM_WIDTH))

/*! @brief Set the CRM field to a new value. */
#define SDHC_WR_IRQSTAT_CRM(base, value) (SDHC_RMW_IRQSTAT(base, (SDHC_IRQSTAT_CRM_MASK | SDHC_IRQSTAT_CC_MASK | SDHC_IRQSTAT_TC_MASK | SDHC_IRQSTAT_BGE_MASK | SDHC_IRQSTAT_DINT_MASK | SDHC_IRQSTAT_BWR_MASK | SDHC_IRQSTAT_BRR_MASK | SDHC_IRQSTAT_CINS_MASK | SDHC_IRQSTAT_CINT_MASK | SDHC_IRQSTAT_CTOE_MASK | SDHC_IRQSTAT_CCE_MASK | SDHC_IRQSTAT_CEBE_MASK | SDHC_IRQSTAT_CIE_MASK | SDHC_IRQSTAT_DTOE_MASK | SDHC_IRQSTAT_DCE_MASK | SDHC_IRQSTAT_DEBE_MASK | SDHC_IRQSTAT_AC12E_MASK | SDHC_IRQSTAT_DMAE_MASK), SDHC_IRQSTAT_CRM(value)))
#define SDHC_BWR_IRQSTAT_CRM(base, value) (BME_BFI32(&SDHC_IRQSTAT_REG(base), ((uint32_t)(value) << SDHC_IRQSTAT_CRM_SHIFT), SDHC_IRQSTAT_CRM_SHIFT, SDHC_IRQSTAT_CRM_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTAT, field CINT[8] (W1C)
 *
 * This status bit is set when an interrupt signal is detected from the external
 * card. In 1-bit mode, the SDHC will detect the Card Interrupt without the SD
 * Clock to support wakeup. In 4-bit mode, the card interrupt signal is sampled
 * during the interrupt cycle, so the interrupt from card can only be sampled
 * during interrupt cycle, introducing some delay between the interrupt signal from
 * the SDIO card and the interrupt to the host system. Writing this bit to 1 can
 * clear this bit, but as the interrupt factor from the SDIO card does not clear,
 * this bit is set again. To clear this bit, it is required to reset the interrupt
 * factor from the external card followed by a writing 1 to this bit. When this
 * status has been set, and the host driver needs to service this interrupt, the
 * Card Interrupt Signal Enable in the Interrupt Signal Enable register should be
 * 0 to stop driving the interrupt signal to the host system. After completion
 * of the card interrupt service (it must reset the interrupt factors in the SDIO
 * card and the interrupt signal may not be asserted), write 1 to clear this bit,
 * set the Card Interrupt Signal Enable to 1, and start sampling the interrupt
 * signal again.
 *
 * Values:
 * - 0b0 - No Card Interrupt.
 * - 0b1 - Generate Card Interrupt.
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTAT_CINT field. */
#define SDHC_RD_IRQSTAT_CINT(base) ((SDHC_IRQSTAT_REG(base) & SDHC_IRQSTAT_CINT_MASK) >> SDHC_IRQSTAT_CINT_SHIFT)
#define SDHC_BRD_IRQSTAT_CINT(base) (BME_UBFX32(&SDHC_IRQSTAT_REG(base), SDHC_IRQSTAT_CINT_SHIFT, SDHC_IRQSTAT_CINT_WIDTH))

/*! @brief Set the CINT field to a new value. */
#define SDHC_WR_IRQSTAT_CINT(base, value) (SDHC_RMW_IRQSTAT(base, (SDHC_IRQSTAT_CINT_MASK | SDHC_IRQSTAT_CC_MASK | SDHC_IRQSTAT_TC_MASK | SDHC_IRQSTAT_BGE_MASK | SDHC_IRQSTAT_DINT_MASK | SDHC_IRQSTAT_BWR_MASK | SDHC_IRQSTAT_BRR_MASK | SDHC_IRQSTAT_CINS_MASK | SDHC_IRQSTAT_CRM_MASK | SDHC_IRQSTAT_CTOE_MASK | SDHC_IRQSTAT_CCE_MASK | SDHC_IRQSTAT_CEBE_MASK | SDHC_IRQSTAT_CIE_MASK | SDHC_IRQSTAT_DTOE_MASK | SDHC_IRQSTAT_DCE_MASK | SDHC_IRQSTAT_DEBE_MASK | SDHC_IRQSTAT_AC12E_MASK | SDHC_IRQSTAT_DMAE_MASK), SDHC_IRQSTAT_CINT(value)))
#define SDHC_BWR_IRQSTAT_CINT(base, value) (BME_BFI32(&SDHC_IRQSTAT_REG(base), ((uint32_t)(value) << SDHC_IRQSTAT_CINT_SHIFT), SDHC_IRQSTAT_CINT_SHIFT, SDHC_IRQSTAT_CINT_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTAT, field CTOE[16] (W1C)
 *
 * Occurs only if no response is returned within 64 SDCLK cycles from the end
 * bit of the command. If the SDHC detects a CMD line conflict, in which case a
 * Command CRC Error shall also be set, this bit shall be set without waiting for 64
 * SDCLK cycles. This is because the command will be aborted by the SDHC.
 *
 * Values:
 * - 0b0 - No error.
 * - 0b1 - Time out.
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTAT_CTOE field. */
#define SDHC_RD_IRQSTAT_CTOE(base) ((SDHC_IRQSTAT_REG(base) & SDHC_IRQSTAT_CTOE_MASK) >> SDHC_IRQSTAT_CTOE_SHIFT)
#define SDHC_BRD_IRQSTAT_CTOE(base) (BME_UBFX32(&SDHC_IRQSTAT_REG(base), SDHC_IRQSTAT_CTOE_SHIFT, SDHC_IRQSTAT_CTOE_WIDTH))

/*! @brief Set the CTOE field to a new value. */
#define SDHC_WR_IRQSTAT_CTOE(base, value) (SDHC_RMW_IRQSTAT(base, (SDHC_IRQSTAT_CTOE_MASK | SDHC_IRQSTAT_CC_MASK | SDHC_IRQSTAT_TC_MASK | SDHC_IRQSTAT_BGE_MASK | SDHC_IRQSTAT_DINT_MASK | SDHC_IRQSTAT_BWR_MASK | SDHC_IRQSTAT_BRR_MASK | SDHC_IRQSTAT_CINS_MASK | SDHC_IRQSTAT_CRM_MASK | SDHC_IRQSTAT_CINT_MASK | SDHC_IRQSTAT_CCE_MASK | SDHC_IRQSTAT_CEBE_MASK | SDHC_IRQSTAT_CIE_MASK | SDHC_IRQSTAT_DTOE_MASK | SDHC_IRQSTAT_DCE_MASK | SDHC_IRQSTAT_DEBE_MASK | SDHC_IRQSTAT_AC12E_MASK | SDHC_IRQSTAT_DMAE_MASK), SDHC_IRQSTAT_CTOE(value)))
#define SDHC_BWR_IRQSTAT_CTOE(base, value) (BME_BFI32(&SDHC_IRQSTAT_REG(base), ((uint32_t)(value) << SDHC_IRQSTAT_CTOE_SHIFT), SDHC_IRQSTAT_CTOE_SHIFT, SDHC_IRQSTAT_CTOE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTAT, field CCE[17] (W1C)
 *
 * Command CRC Error is generated in two cases. If a response is returned and
 * the Command Timeout Error is set to 0, indicating no time-out, this bit is set
 * when detecting a CRC error in the command response. The SDHC detects a CMD line
 * conflict by monitoring the CMD line when a command is issued. If the SDHC
 * drives the CMD line to 1, but detects 0 on the CMD line at the next SDCLK edge,
 * then the SDHC shall abort the command (Stop driving CMD line) and set this bit
 * to 1. The Command Timeout Error shall also be set to 1 to distinguish CMD line
 * conflict.
 *
 * Values:
 * - 0b0 - No error.
 * - 0b1 - CRC Error generated.
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTAT_CCE field. */
#define SDHC_RD_IRQSTAT_CCE(base) ((SDHC_IRQSTAT_REG(base) & SDHC_IRQSTAT_CCE_MASK) >> SDHC_IRQSTAT_CCE_SHIFT)
#define SDHC_BRD_IRQSTAT_CCE(base) (BME_UBFX32(&SDHC_IRQSTAT_REG(base), SDHC_IRQSTAT_CCE_SHIFT, SDHC_IRQSTAT_CCE_WIDTH))

/*! @brief Set the CCE field to a new value. */
#define SDHC_WR_IRQSTAT_CCE(base, value) (SDHC_RMW_IRQSTAT(base, (SDHC_IRQSTAT_CCE_MASK | SDHC_IRQSTAT_CC_MASK | SDHC_IRQSTAT_TC_MASK | SDHC_IRQSTAT_BGE_MASK | SDHC_IRQSTAT_DINT_MASK | SDHC_IRQSTAT_BWR_MASK | SDHC_IRQSTAT_BRR_MASK | SDHC_IRQSTAT_CINS_MASK | SDHC_IRQSTAT_CRM_MASK | SDHC_IRQSTAT_CINT_MASK | SDHC_IRQSTAT_CTOE_MASK | SDHC_IRQSTAT_CEBE_MASK | SDHC_IRQSTAT_CIE_MASK | SDHC_IRQSTAT_DTOE_MASK | SDHC_IRQSTAT_DCE_MASK | SDHC_IRQSTAT_DEBE_MASK | SDHC_IRQSTAT_AC12E_MASK | SDHC_IRQSTAT_DMAE_MASK), SDHC_IRQSTAT_CCE(value)))
#define SDHC_BWR_IRQSTAT_CCE(base, value) (BME_BFI32(&SDHC_IRQSTAT_REG(base), ((uint32_t)(value) << SDHC_IRQSTAT_CCE_SHIFT), SDHC_IRQSTAT_CCE_SHIFT, SDHC_IRQSTAT_CCE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTAT, field CEBE[18] (W1C)
 *
 * Occurs when detecting that the end bit of a command response is 0.
 *
 * Values:
 * - 0b0 - No error.
 * - 0b1 - End Bit Error generated.
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTAT_CEBE field. */
#define SDHC_RD_IRQSTAT_CEBE(base) ((SDHC_IRQSTAT_REG(base) & SDHC_IRQSTAT_CEBE_MASK) >> SDHC_IRQSTAT_CEBE_SHIFT)
#define SDHC_BRD_IRQSTAT_CEBE(base) (BME_UBFX32(&SDHC_IRQSTAT_REG(base), SDHC_IRQSTAT_CEBE_SHIFT, SDHC_IRQSTAT_CEBE_WIDTH))

/*! @brief Set the CEBE field to a new value. */
#define SDHC_WR_IRQSTAT_CEBE(base, value) (SDHC_RMW_IRQSTAT(base, (SDHC_IRQSTAT_CEBE_MASK | SDHC_IRQSTAT_CC_MASK | SDHC_IRQSTAT_TC_MASK | SDHC_IRQSTAT_BGE_MASK | SDHC_IRQSTAT_DINT_MASK | SDHC_IRQSTAT_BWR_MASK | SDHC_IRQSTAT_BRR_MASK | SDHC_IRQSTAT_CINS_MASK | SDHC_IRQSTAT_CRM_MASK | SDHC_IRQSTAT_CINT_MASK | SDHC_IRQSTAT_CTOE_MASK | SDHC_IRQSTAT_CCE_MASK | SDHC_IRQSTAT_CIE_MASK | SDHC_IRQSTAT_DTOE_MASK | SDHC_IRQSTAT_DCE_MASK | SDHC_IRQSTAT_DEBE_MASK | SDHC_IRQSTAT_AC12E_MASK | SDHC_IRQSTAT_DMAE_MASK), SDHC_IRQSTAT_CEBE(value)))
#define SDHC_BWR_IRQSTAT_CEBE(base, value) (BME_BFI32(&SDHC_IRQSTAT_REG(base), ((uint32_t)(value) << SDHC_IRQSTAT_CEBE_SHIFT), SDHC_IRQSTAT_CEBE_SHIFT, SDHC_IRQSTAT_CEBE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTAT, field CIE[19] (W1C)
 *
 * Occurs if a Command Index error occurs in the command response.
 *
 * Values:
 * - 0b0 - No error.
 * - 0b1 - Error.
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTAT_CIE field. */
#define SDHC_RD_IRQSTAT_CIE(base) ((SDHC_IRQSTAT_REG(base) & SDHC_IRQSTAT_CIE_MASK) >> SDHC_IRQSTAT_CIE_SHIFT)
#define SDHC_BRD_IRQSTAT_CIE(base) (BME_UBFX32(&SDHC_IRQSTAT_REG(base), SDHC_IRQSTAT_CIE_SHIFT, SDHC_IRQSTAT_CIE_WIDTH))

/*! @brief Set the CIE field to a new value. */
#define SDHC_WR_IRQSTAT_CIE(base, value) (SDHC_RMW_IRQSTAT(base, (SDHC_IRQSTAT_CIE_MASK | SDHC_IRQSTAT_CC_MASK | SDHC_IRQSTAT_TC_MASK | SDHC_IRQSTAT_BGE_MASK | SDHC_IRQSTAT_DINT_MASK | SDHC_IRQSTAT_BWR_MASK | SDHC_IRQSTAT_BRR_MASK | SDHC_IRQSTAT_CINS_MASK | SDHC_IRQSTAT_CRM_MASK | SDHC_IRQSTAT_CINT_MASK | SDHC_IRQSTAT_CTOE_MASK | SDHC_IRQSTAT_CCE_MASK | SDHC_IRQSTAT_CEBE_MASK | SDHC_IRQSTAT_DTOE_MASK | SDHC_IRQSTAT_DCE_MASK | SDHC_IRQSTAT_DEBE_MASK | SDHC_IRQSTAT_AC12E_MASK | SDHC_IRQSTAT_DMAE_MASK), SDHC_IRQSTAT_CIE(value)))
#define SDHC_BWR_IRQSTAT_CIE(base, value) (BME_BFI32(&SDHC_IRQSTAT_REG(base), ((uint32_t)(value) << SDHC_IRQSTAT_CIE_SHIFT), SDHC_IRQSTAT_CIE_SHIFT, SDHC_IRQSTAT_CIE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTAT, field DTOE[20] (W1C)
 *
 * Occurs when detecting one of following time-out conditions. Busy time-out for
 * R1b,R5b type Busy time-out after Write CRC status Read Data time-out
 *
 * Values:
 * - 0b0 - No error.
 * - 0b1 - Time out.
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTAT_DTOE field. */
#define SDHC_RD_IRQSTAT_DTOE(base) ((SDHC_IRQSTAT_REG(base) & SDHC_IRQSTAT_DTOE_MASK) >> SDHC_IRQSTAT_DTOE_SHIFT)
#define SDHC_BRD_IRQSTAT_DTOE(base) (BME_UBFX32(&SDHC_IRQSTAT_REG(base), SDHC_IRQSTAT_DTOE_SHIFT, SDHC_IRQSTAT_DTOE_WIDTH))

/*! @brief Set the DTOE field to a new value. */
#define SDHC_WR_IRQSTAT_DTOE(base, value) (SDHC_RMW_IRQSTAT(base, (SDHC_IRQSTAT_DTOE_MASK | SDHC_IRQSTAT_CC_MASK | SDHC_IRQSTAT_TC_MASK | SDHC_IRQSTAT_BGE_MASK | SDHC_IRQSTAT_DINT_MASK | SDHC_IRQSTAT_BWR_MASK | SDHC_IRQSTAT_BRR_MASK | SDHC_IRQSTAT_CINS_MASK | SDHC_IRQSTAT_CRM_MASK | SDHC_IRQSTAT_CINT_MASK | SDHC_IRQSTAT_CTOE_MASK | SDHC_IRQSTAT_CCE_MASK | SDHC_IRQSTAT_CEBE_MASK | SDHC_IRQSTAT_CIE_MASK | SDHC_IRQSTAT_DCE_MASK | SDHC_IRQSTAT_DEBE_MASK | SDHC_IRQSTAT_AC12E_MASK | SDHC_IRQSTAT_DMAE_MASK), SDHC_IRQSTAT_DTOE(value)))
#define SDHC_BWR_IRQSTAT_DTOE(base, value) (BME_BFI32(&SDHC_IRQSTAT_REG(base), ((uint32_t)(value) << SDHC_IRQSTAT_DTOE_SHIFT), SDHC_IRQSTAT_DTOE_SHIFT, SDHC_IRQSTAT_DTOE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTAT, field DCE[21] (W1C)
 *
 * Occurs when detecting a CRC error when transferring read data, which uses the
 * DAT line, or when detecting the Write CRC status having a value other than
 * 010.
 *
 * Values:
 * - 0b0 - No error.
 * - 0b1 - Error.
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTAT_DCE field. */
#define SDHC_RD_IRQSTAT_DCE(base) ((SDHC_IRQSTAT_REG(base) & SDHC_IRQSTAT_DCE_MASK) >> SDHC_IRQSTAT_DCE_SHIFT)
#define SDHC_BRD_IRQSTAT_DCE(base) (BME_UBFX32(&SDHC_IRQSTAT_REG(base), SDHC_IRQSTAT_DCE_SHIFT, SDHC_IRQSTAT_DCE_WIDTH))

/*! @brief Set the DCE field to a new value. */
#define SDHC_WR_IRQSTAT_DCE(base, value) (SDHC_RMW_IRQSTAT(base, (SDHC_IRQSTAT_DCE_MASK | SDHC_IRQSTAT_CC_MASK | SDHC_IRQSTAT_TC_MASK | SDHC_IRQSTAT_BGE_MASK | SDHC_IRQSTAT_DINT_MASK | SDHC_IRQSTAT_BWR_MASK | SDHC_IRQSTAT_BRR_MASK | SDHC_IRQSTAT_CINS_MASK | SDHC_IRQSTAT_CRM_MASK | SDHC_IRQSTAT_CINT_MASK | SDHC_IRQSTAT_CTOE_MASK | SDHC_IRQSTAT_CCE_MASK | SDHC_IRQSTAT_CEBE_MASK | SDHC_IRQSTAT_CIE_MASK | SDHC_IRQSTAT_DTOE_MASK | SDHC_IRQSTAT_DEBE_MASK | SDHC_IRQSTAT_AC12E_MASK | SDHC_IRQSTAT_DMAE_MASK), SDHC_IRQSTAT_DCE(value)))
#define SDHC_BWR_IRQSTAT_DCE(base, value) (BME_BFI32(&SDHC_IRQSTAT_REG(base), ((uint32_t)(value) << SDHC_IRQSTAT_DCE_SHIFT), SDHC_IRQSTAT_DCE_SHIFT, SDHC_IRQSTAT_DCE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTAT, field DEBE[22] (W1C)
 *
 * Occurs either when detecting 0 at the end bit position of read data, which
 * uses the DAT line, or at the end bit position of the CRC.
 *
 * Values:
 * - 0b0 - No error.
 * - 0b1 - Error.
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTAT_DEBE field. */
#define SDHC_RD_IRQSTAT_DEBE(base) ((SDHC_IRQSTAT_REG(base) & SDHC_IRQSTAT_DEBE_MASK) >> SDHC_IRQSTAT_DEBE_SHIFT)
#define SDHC_BRD_IRQSTAT_DEBE(base) (BME_UBFX32(&SDHC_IRQSTAT_REG(base), SDHC_IRQSTAT_DEBE_SHIFT, SDHC_IRQSTAT_DEBE_WIDTH))

/*! @brief Set the DEBE field to a new value. */
#define SDHC_WR_IRQSTAT_DEBE(base, value) (SDHC_RMW_IRQSTAT(base, (SDHC_IRQSTAT_DEBE_MASK | SDHC_IRQSTAT_CC_MASK | SDHC_IRQSTAT_TC_MASK | SDHC_IRQSTAT_BGE_MASK | SDHC_IRQSTAT_DINT_MASK | SDHC_IRQSTAT_BWR_MASK | SDHC_IRQSTAT_BRR_MASK | SDHC_IRQSTAT_CINS_MASK | SDHC_IRQSTAT_CRM_MASK | SDHC_IRQSTAT_CINT_MASK | SDHC_IRQSTAT_CTOE_MASK | SDHC_IRQSTAT_CCE_MASK | SDHC_IRQSTAT_CEBE_MASK | SDHC_IRQSTAT_CIE_MASK | SDHC_IRQSTAT_DTOE_MASK | SDHC_IRQSTAT_DCE_MASK | SDHC_IRQSTAT_AC12E_MASK | SDHC_IRQSTAT_DMAE_MASK), SDHC_IRQSTAT_DEBE(value)))
#define SDHC_BWR_IRQSTAT_DEBE(base, value) (BME_BFI32(&SDHC_IRQSTAT_REG(base), ((uint32_t)(value) << SDHC_IRQSTAT_DEBE_SHIFT), SDHC_IRQSTAT_DEBE_SHIFT, SDHC_IRQSTAT_DEBE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTAT, field AC12E[24] (W1C)
 *
 * Occurs when detecting that one of the bits in the Auto CMD12 Error Status
 * register has changed from 0 to 1. This bit is set to 1, not only when the errors
 * in Auto CMD12 occur, but also when the Auto CMD12 is not executed due to the
 * previous command error.
 *
 * Values:
 * - 0b0 - No error.
 * - 0b1 - Error.
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTAT_AC12E field. */
#define SDHC_RD_IRQSTAT_AC12E(base) ((SDHC_IRQSTAT_REG(base) & SDHC_IRQSTAT_AC12E_MASK) >> SDHC_IRQSTAT_AC12E_SHIFT)
#define SDHC_BRD_IRQSTAT_AC12E(base) (BME_UBFX32(&SDHC_IRQSTAT_REG(base), SDHC_IRQSTAT_AC12E_SHIFT, SDHC_IRQSTAT_AC12E_WIDTH))

/*! @brief Set the AC12E field to a new value. */
#define SDHC_WR_IRQSTAT_AC12E(base, value) (SDHC_RMW_IRQSTAT(base, (SDHC_IRQSTAT_AC12E_MASK | SDHC_IRQSTAT_CC_MASK | SDHC_IRQSTAT_TC_MASK | SDHC_IRQSTAT_BGE_MASK | SDHC_IRQSTAT_DINT_MASK | SDHC_IRQSTAT_BWR_MASK | SDHC_IRQSTAT_BRR_MASK | SDHC_IRQSTAT_CINS_MASK | SDHC_IRQSTAT_CRM_MASK | SDHC_IRQSTAT_CINT_MASK | SDHC_IRQSTAT_CTOE_MASK | SDHC_IRQSTAT_CCE_MASK | SDHC_IRQSTAT_CEBE_MASK | SDHC_IRQSTAT_CIE_MASK | SDHC_IRQSTAT_DTOE_MASK | SDHC_IRQSTAT_DCE_MASK | SDHC_IRQSTAT_DEBE_MASK | SDHC_IRQSTAT_DMAE_MASK), SDHC_IRQSTAT_AC12E(value)))
#define SDHC_BWR_IRQSTAT_AC12E(base, value) (BME_BFI32(&SDHC_IRQSTAT_REG(base), ((uint32_t)(value) << SDHC_IRQSTAT_AC12E_SHIFT), SDHC_IRQSTAT_AC12E_SHIFT, SDHC_IRQSTAT_AC12E_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTAT, field DMAE[28] (W1C)
 *
 * Occurs when an Internal DMA transfer has failed. This bit is set to 1, when
 * some error occurs in the data transfer. This error can be caused by either
 * Simple DMA or ADMA, depending on which DMA is in use. The value in DMA System
 * Address register is the next fetch address where the error occurs. Because any
 * error corrupts the whole data block, the host driver shall restart the transfer
 * from the corrupted block boundary. The address of the block boundary can be
 * calculated either from the current DSADDR value or from the remaining number of
 * blocks and the block size.
 *
 * Values:
 * - 0b0 - No error.
 * - 0b1 - Error.
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTAT_DMAE field. */
#define SDHC_RD_IRQSTAT_DMAE(base) ((SDHC_IRQSTAT_REG(base) & SDHC_IRQSTAT_DMAE_MASK) >> SDHC_IRQSTAT_DMAE_SHIFT)
#define SDHC_BRD_IRQSTAT_DMAE(base) (BME_UBFX32(&SDHC_IRQSTAT_REG(base), SDHC_IRQSTAT_DMAE_SHIFT, SDHC_IRQSTAT_DMAE_WIDTH))

/*! @brief Set the DMAE field to a new value. */
#define SDHC_WR_IRQSTAT_DMAE(base, value) (SDHC_RMW_IRQSTAT(base, (SDHC_IRQSTAT_DMAE_MASK | SDHC_IRQSTAT_CC_MASK | SDHC_IRQSTAT_TC_MASK | SDHC_IRQSTAT_BGE_MASK | SDHC_IRQSTAT_DINT_MASK | SDHC_IRQSTAT_BWR_MASK | SDHC_IRQSTAT_BRR_MASK | SDHC_IRQSTAT_CINS_MASK | SDHC_IRQSTAT_CRM_MASK | SDHC_IRQSTAT_CINT_MASK | SDHC_IRQSTAT_CTOE_MASK | SDHC_IRQSTAT_CCE_MASK | SDHC_IRQSTAT_CEBE_MASK | SDHC_IRQSTAT_CIE_MASK | SDHC_IRQSTAT_DTOE_MASK | SDHC_IRQSTAT_DCE_MASK | SDHC_IRQSTAT_DEBE_MASK | SDHC_IRQSTAT_AC12E_MASK), SDHC_IRQSTAT_DMAE(value)))
#define SDHC_BWR_IRQSTAT_DMAE(base, value) (BME_BFI32(&SDHC_IRQSTAT_REG(base), ((uint32_t)(value) << SDHC_IRQSTAT_DMAE_SHIFT), SDHC_IRQSTAT_DMAE_SHIFT, SDHC_IRQSTAT_DMAE_WIDTH))
/*@}*/

/*******************************************************************************
 * SDHC_IRQSTATEN - Interrupt Status Enable register
 ******************************************************************************/

/*!
 * @brief SDHC_IRQSTATEN - Interrupt Status Enable register (RW)
 *
 * Reset value: 0x117F013FU
 *
 * Setting the bits in this register to 1 enables the corresponding interrupt
 * status to be set by the specified event. If any bit is cleared, the
 * corresponding interrupt status bit is also cleared, that is, when the bit in this register
 * is cleared, the corresponding bit in interrupt status register is always 0.
 * Depending on PROCTL[IABG] bit setting, SDHC may be programmed to sample the
 * card interrupt signal during the interrupt period and hold its value in the
 * flip-flop. There will be some delays on the card interrupt, asserted from the card,
 * to the time the host system is informed. To detect a CMD line conflict, the
 * host driver must set both IRQSTATEN[CTOESEN] and IRQSTATEN[CCESEN] to 1.
 */
/*!
 * @name Constants and macros for entire SDHC_IRQSTATEN register
 */
/*@{*/
#define SDHC_RD_IRQSTATEN(base)  (SDHC_IRQSTATEN_REG(base))
#define SDHC_WR_IRQSTATEN(base, value) (SDHC_IRQSTATEN_REG(base) = (value))
#define SDHC_RMW_IRQSTATEN(base, mask, value) (SDHC_WR_IRQSTATEN(base, (SDHC_RD_IRQSTATEN(base) & ~(mask)) | (value)))
#define SDHC_SET_IRQSTATEN(base, value) (BME_OR32(&SDHC_IRQSTATEN_REG(base), (uint32_t)(value)))
#define SDHC_CLR_IRQSTATEN(base, value) (BME_AND32(&SDHC_IRQSTATEN_REG(base), (uint32_t)(~(value))))
#define SDHC_TOG_IRQSTATEN(base, value) (BME_XOR32(&SDHC_IRQSTATEN_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SDHC_IRQSTATEN bitfields
 */

/*!
 * @name Register SDHC_IRQSTATEN, field CCSEN[0] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTATEN_CCSEN field. */
#define SDHC_RD_IRQSTATEN_CCSEN(base) ((SDHC_IRQSTATEN_REG(base) & SDHC_IRQSTATEN_CCSEN_MASK) >> SDHC_IRQSTATEN_CCSEN_SHIFT)
#define SDHC_BRD_IRQSTATEN_CCSEN(base) (BME_UBFX32(&SDHC_IRQSTATEN_REG(base), SDHC_IRQSTATEN_CCSEN_SHIFT, SDHC_IRQSTATEN_CCSEN_WIDTH))

/*! @brief Set the CCSEN field to a new value. */
#define SDHC_WR_IRQSTATEN_CCSEN(base, value) (SDHC_RMW_IRQSTATEN(base, SDHC_IRQSTATEN_CCSEN_MASK, SDHC_IRQSTATEN_CCSEN(value)))
#define SDHC_BWR_IRQSTATEN_CCSEN(base, value) (BME_BFI32(&SDHC_IRQSTATEN_REG(base), ((uint32_t)(value) << SDHC_IRQSTATEN_CCSEN_SHIFT), SDHC_IRQSTATEN_CCSEN_SHIFT, SDHC_IRQSTATEN_CCSEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTATEN, field TCSEN[1] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTATEN_TCSEN field. */
#define SDHC_RD_IRQSTATEN_TCSEN(base) ((SDHC_IRQSTATEN_REG(base) & SDHC_IRQSTATEN_TCSEN_MASK) >> SDHC_IRQSTATEN_TCSEN_SHIFT)
#define SDHC_BRD_IRQSTATEN_TCSEN(base) (BME_UBFX32(&SDHC_IRQSTATEN_REG(base), SDHC_IRQSTATEN_TCSEN_SHIFT, SDHC_IRQSTATEN_TCSEN_WIDTH))

/*! @brief Set the TCSEN field to a new value. */
#define SDHC_WR_IRQSTATEN_TCSEN(base, value) (SDHC_RMW_IRQSTATEN(base, SDHC_IRQSTATEN_TCSEN_MASK, SDHC_IRQSTATEN_TCSEN(value)))
#define SDHC_BWR_IRQSTATEN_TCSEN(base, value) (BME_BFI32(&SDHC_IRQSTATEN_REG(base), ((uint32_t)(value) << SDHC_IRQSTATEN_TCSEN_SHIFT), SDHC_IRQSTATEN_TCSEN_SHIFT, SDHC_IRQSTATEN_TCSEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTATEN, field BGESEN[2] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTATEN_BGESEN field. */
#define SDHC_RD_IRQSTATEN_BGESEN(base) ((SDHC_IRQSTATEN_REG(base) & SDHC_IRQSTATEN_BGESEN_MASK) >> SDHC_IRQSTATEN_BGESEN_SHIFT)
#define SDHC_BRD_IRQSTATEN_BGESEN(base) (BME_UBFX32(&SDHC_IRQSTATEN_REG(base), SDHC_IRQSTATEN_BGESEN_SHIFT, SDHC_IRQSTATEN_BGESEN_WIDTH))

/*! @brief Set the BGESEN field to a new value. */
#define SDHC_WR_IRQSTATEN_BGESEN(base, value) (SDHC_RMW_IRQSTATEN(base, SDHC_IRQSTATEN_BGESEN_MASK, SDHC_IRQSTATEN_BGESEN(value)))
#define SDHC_BWR_IRQSTATEN_BGESEN(base, value) (BME_BFI32(&SDHC_IRQSTATEN_REG(base), ((uint32_t)(value) << SDHC_IRQSTATEN_BGESEN_SHIFT), SDHC_IRQSTATEN_BGESEN_SHIFT, SDHC_IRQSTATEN_BGESEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTATEN, field DINTSEN[3] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTATEN_DINTSEN field. */
#define SDHC_RD_IRQSTATEN_DINTSEN(base) ((SDHC_IRQSTATEN_REG(base) & SDHC_IRQSTATEN_DINTSEN_MASK) >> SDHC_IRQSTATEN_DINTSEN_SHIFT)
#define SDHC_BRD_IRQSTATEN_DINTSEN(base) (BME_UBFX32(&SDHC_IRQSTATEN_REG(base), SDHC_IRQSTATEN_DINTSEN_SHIFT, SDHC_IRQSTATEN_DINTSEN_WIDTH))

/*! @brief Set the DINTSEN field to a new value. */
#define SDHC_WR_IRQSTATEN_DINTSEN(base, value) (SDHC_RMW_IRQSTATEN(base, SDHC_IRQSTATEN_DINTSEN_MASK, SDHC_IRQSTATEN_DINTSEN(value)))
#define SDHC_BWR_IRQSTATEN_DINTSEN(base, value) (BME_BFI32(&SDHC_IRQSTATEN_REG(base), ((uint32_t)(value) << SDHC_IRQSTATEN_DINTSEN_SHIFT), SDHC_IRQSTATEN_DINTSEN_SHIFT, SDHC_IRQSTATEN_DINTSEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTATEN, field BWRSEN[4] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTATEN_BWRSEN field. */
#define SDHC_RD_IRQSTATEN_BWRSEN(base) ((SDHC_IRQSTATEN_REG(base) & SDHC_IRQSTATEN_BWRSEN_MASK) >> SDHC_IRQSTATEN_BWRSEN_SHIFT)
#define SDHC_BRD_IRQSTATEN_BWRSEN(base) (BME_UBFX32(&SDHC_IRQSTATEN_REG(base), SDHC_IRQSTATEN_BWRSEN_SHIFT, SDHC_IRQSTATEN_BWRSEN_WIDTH))

/*! @brief Set the BWRSEN field to a new value. */
#define SDHC_WR_IRQSTATEN_BWRSEN(base, value) (SDHC_RMW_IRQSTATEN(base, SDHC_IRQSTATEN_BWRSEN_MASK, SDHC_IRQSTATEN_BWRSEN(value)))
#define SDHC_BWR_IRQSTATEN_BWRSEN(base, value) (BME_BFI32(&SDHC_IRQSTATEN_REG(base), ((uint32_t)(value) << SDHC_IRQSTATEN_BWRSEN_SHIFT), SDHC_IRQSTATEN_BWRSEN_SHIFT, SDHC_IRQSTATEN_BWRSEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTATEN, field BRRSEN[5] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTATEN_BRRSEN field. */
#define SDHC_RD_IRQSTATEN_BRRSEN(base) ((SDHC_IRQSTATEN_REG(base) & SDHC_IRQSTATEN_BRRSEN_MASK) >> SDHC_IRQSTATEN_BRRSEN_SHIFT)
#define SDHC_BRD_IRQSTATEN_BRRSEN(base) (BME_UBFX32(&SDHC_IRQSTATEN_REG(base), SDHC_IRQSTATEN_BRRSEN_SHIFT, SDHC_IRQSTATEN_BRRSEN_WIDTH))

/*! @brief Set the BRRSEN field to a new value. */
#define SDHC_WR_IRQSTATEN_BRRSEN(base, value) (SDHC_RMW_IRQSTATEN(base, SDHC_IRQSTATEN_BRRSEN_MASK, SDHC_IRQSTATEN_BRRSEN(value)))
#define SDHC_BWR_IRQSTATEN_BRRSEN(base, value) (BME_BFI32(&SDHC_IRQSTATEN_REG(base), ((uint32_t)(value) << SDHC_IRQSTATEN_BRRSEN_SHIFT), SDHC_IRQSTATEN_BRRSEN_SHIFT, SDHC_IRQSTATEN_BRRSEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTATEN, field CINSEN[6] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTATEN_CINSEN field. */
#define SDHC_RD_IRQSTATEN_CINSEN(base) ((SDHC_IRQSTATEN_REG(base) & SDHC_IRQSTATEN_CINSEN_MASK) >> SDHC_IRQSTATEN_CINSEN_SHIFT)
#define SDHC_BRD_IRQSTATEN_CINSEN(base) (BME_UBFX32(&SDHC_IRQSTATEN_REG(base), SDHC_IRQSTATEN_CINSEN_SHIFT, SDHC_IRQSTATEN_CINSEN_WIDTH))

/*! @brief Set the CINSEN field to a new value. */
#define SDHC_WR_IRQSTATEN_CINSEN(base, value) (SDHC_RMW_IRQSTATEN(base, SDHC_IRQSTATEN_CINSEN_MASK, SDHC_IRQSTATEN_CINSEN(value)))
#define SDHC_BWR_IRQSTATEN_CINSEN(base, value) (BME_BFI32(&SDHC_IRQSTATEN_REG(base), ((uint32_t)(value) << SDHC_IRQSTATEN_CINSEN_SHIFT), SDHC_IRQSTATEN_CINSEN_SHIFT, SDHC_IRQSTATEN_CINSEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTATEN, field CRMSEN[7] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTATEN_CRMSEN field. */
#define SDHC_RD_IRQSTATEN_CRMSEN(base) ((SDHC_IRQSTATEN_REG(base) & SDHC_IRQSTATEN_CRMSEN_MASK) >> SDHC_IRQSTATEN_CRMSEN_SHIFT)
#define SDHC_BRD_IRQSTATEN_CRMSEN(base) (BME_UBFX32(&SDHC_IRQSTATEN_REG(base), SDHC_IRQSTATEN_CRMSEN_SHIFT, SDHC_IRQSTATEN_CRMSEN_WIDTH))

/*! @brief Set the CRMSEN field to a new value. */
#define SDHC_WR_IRQSTATEN_CRMSEN(base, value) (SDHC_RMW_IRQSTATEN(base, SDHC_IRQSTATEN_CRMSEN_MASK, SDHC_IRQSTATEN_CRMSEN(value)))
#define SDHC_BWR_IRQSTATEN_CRMSEN(base, value) (BME_BFI32(&SDHC_IRQSTATEN_REG(base), ((uint32_t)(value) << SDHC_IRQSTATEN_CRMSEN_SHIFT), SDHC_IRQSTATEN_CRMSEN_SHIFT, SDHC_IRQSTATEN_CRMSEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTATEN, field CINTSEN[8] (RW)
 *
 * If this bit is set to 0, the SDHC will clear the interrupt request to the
 * system. The card interrupt detection is stopped when this bit is cleared and
 * restarted when this bit is set to 1. The host driver must clear the this bit
 * before servicing the card interrupt and must set this bit again after all interrupt
 * requests from the card are cleared to prevent inadvertent interrupts.
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTATEN_CINTSEN field. */
#define SDHC_RD_IRQSTATEN_CINTSEN(base) ((SDHC_IRQSTATEN_REG(base) & SDHC_IRQSTATEN_CINTSEN_MASK) >> SDHC_IRQSTATEN_CINTSEN_SHIFT)
#define SDHC_BRD_IRQSTATEN_CINTSEN(base) (BME_UBFX32(&SDHC_IRQSTATEN_REG(base), SDHC_IRQSTATEN_CINTSEN_SHIFT, SDHC_IRQSTATEN_CINTSEN_WIDTH))

/*! @brief Set the CINTSEN field to a new value. */
#define SDHC_WR_IRQSTATEN_CINTSEN(base, value) (SDHC_RMW_IRQSTATEN(base, SDHC_IRQSTATEN_CINTSEN_MASK, SDHC_IRQSTATEN_CINTSEN(value)))
#define SDHC_BWR_IRQSTATEN_CINTSEN(base, value) (BME_BFI32(&SDHC_IRQSTATEN_REG(base), ((uint32_t)(value) << SDHC_IRQSTATEN_CINTSEN_SHIFT), SDHC_IRQSTATEN_CINTSEN_SHIFT, SDHC_IRQSTATEN_CINTSEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTATEN, field CTOESEN[16] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTATEN_CTOESEN field. */
#define SDHC_RD_IRQSTATEN_CTOESEN(base) ((SDHC_IRQSTATEN_REG(base) & SDHC_IRQSTATEN_CTOESEN_MASK) >> SDHC_IRQSTATEN_CTOESEN_SHIFT)
#define SDHC_BRD_IRQSTATEN_CTOESEN(base) (BME_UBFX32(&SDHC_IRQSTATEN_REG(base), SDHC_IRQSTATEN_CTOESEN_SHIFT, SDHC_IRQSTATEN_CTOESEN_WIDTH))

/*! @brief Set the CTOESEN field to a new value. */
#define SDHC_WR_IRQSTATEN_CTOESEN(base, value) (SDHC_RMW_IRQSTATEN(base, SDHC_IRQSTATEN_CTOESEN_MASK, SDHC_IRQSTATEN_CTOESEN(value)))
#define SDHC_BWR_IRQSTATEN_CTOESEN(base, value) (BME_BFI32(&SDHC_IRQSTATEN_REG(base), ((uint32_t)(value) << SDHC_IRQSTATEN_CTOESEN_SHIFT), SDHC_IRQSTATEN_CTOESEN_SHIFT, SDHC_IRQSTATEN_CTOESEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTATEN, field CCESEN[17] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTATEN_CCESEN field. */
#define SDHC_RD_IRQSTATEN_CCESEN(base) ((SDHC_IRQSTATEN_REG(base) & SDHC_IRQSTATEN_CCESEN_MASK) >> SDHC_IRQSTATEN_CCESEN_SHIFT)
#define SDHC_BRD_IRQSTATEN_CCESEN(base) (BME_UBFX32(&SDHC_IRQSTATEN_REG(base), SDHC_IRQSTATEN_CCESEN_SHIFT, SDHC_IRQSTATEN_CCESEN_WIDTH))

/*! @brief Set the CCESEN field to a new value. */
#define SDHC_WR_IRQSTATEN_CCESEN(base, value) (SDHC_RMW_IRQSTATEN(base, SDHC_IRQSTATEN_CCESEN_MASK, SDHC_IRQSTATEN_CCESEN(value)))
#define SDHC_BWR_IRQSTATEN_CCESEN(base, value) (BME_BFI32(&SDHC_IRQSTATEN_REG(base), ((uint32_t)(value) << SDHC_IRQSTATEN_CCESEN_SHIFT), SDHC_IRQSTATEN_CCESEN_SHIFT, SDHC_IRQSTATEN_CCESEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTATEN, field CEBESEN[18] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTATEN_CEBESEN field. */
#define SDHC_RD_IRQSTATEN_CEBESEN(base) ((SDHC_IRQSTATEN_REG(base) & SDHC_IRQSTATEN_CEBESEN_MASK) >> SDHC_IRQSTATEN_CEBESEN_SHIFT)
#define SDHC_BRD_IRQSTATEN_CEBESEN(base) (BME_UBFX32(&SDHC_IRQSTATEN_REG(base), SDHC_IRQSTATEN_CEBESEN_SHIFT, SDHC_IRQSTATEN_CEBESEN_WIDTH))

/*! @brief Set the CEBESEN field to a new value. */
#define SDHC_WR_IRQSTATEN_CEBESEN(base, value) (SDHC_RMW_IRQSTATEN(base, SDHC_IRQSTATEN_CEBESEN_MASK, SDHC_IRQSTATEN_CEBESEN(value)))
#define SDHC_BWR_IRQSTATEN_CEBESEN(base, value) (BME_BFI32(&SDHC_IRQSTATEN_REG(base), ((uint32_t)(value) << SDHC_IRQSTATEN_CEBESEN_SHIFT), SDHC_IRQSTATEN_CEBESEN_SHIFT, SDHC_IRQSTATEN_CEBESEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTATEN, field CIESEN[19] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTATEN_CIESEN field. */
#define SDHC_RD_IRQSTATEN_CIESEN(base) ((SDHC_IRQSTATEN_REG(base) & SDHC_IRQSTATEN_CIESEN_MASK) >> SDHC_IRQSTATEN_CIESEN_SHIFT)
#define SDHC_BRD_IRQSTATEN_CIESEN(base) (BME_UBFX32(&SDHC_IRQSTATEN_REG(base), SDHC_IRQSTATEN_CIESEN_SHIFT, SDHC_IRQSTATEN_CIESEN_WIDTH))

/*! @brief Set the CIESEN field to a new value. */
#define SDHC_WR_IRQSTATEN_CIESEN(base, value) (SDHC_RMW_IRQSTATEN(base, SDHC_IRQSTATEN_CIESEN_MASK, SDHC_IRQSTATEN_CIESEN(value)))
#define SDHC_BWR_IRQSTATEN_CIESEN(base, value) (BME_BFI32(&SDHC_IRQSTATEN_REG(base), ((uint32_t)(value) << SDHC_IRQSTATEN_CIESEN_SHIFT), SDHC_IRQSTATEN_CIESEN_SHIFT, SDHC_IRQSTATEN_CIESEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTATEN, field DTOESEN[20] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTATEN_DTOESEN field. */
#define SDHC_RD_IRQSTATEN_DTOESEN(base) ((SDHC_IRQSTATEN_REG(base) & SDHC_IRQSTATEN_DTOESEN_MASK) >> SDHC_IRQSTATEN_DTOESEN_SHIFT)
#define SDHC_BRD_IRQSTATEN_DTOESEN(base) (BME_UBFX32(&SDHC_IRQSTATEN_REG(base), SDHC_IRQSTATEN_DTOESEN_SHIFT, SDHC_IRQSTATEN_DTOESEN_WIDTH))

/*! @brief Set the DTOESEN field to a new value. */
#define SDHC_WR_IRQSTATEN_DTOESEN(base, value) (SDHC_RMW_IRQSTATEN(base, SDHC_IRQSTATEN_DTOESEN_MASK, SDHC_IRQSTATEN_DTOESEN(value)))
#define SDHC_BWR_IRQSTATEN_DTOESEN(base, value) (BME_BFI32(&SDHC_IRQSTATEN_REG(base), ((uint32_t)(value) << SDHC_IRQSTATEN_DTOESEN_SHIFT), SDHC_IRQSTATEN_DTOESEN_SHIFT, SDHC_IRQSTATEN_DTOESEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTATEN, field DCESEN[21] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTATEN_DCESEN field. */
#define SDHC_RD_IRQSTATEN_DCESEN(base) ((SDHC_IRQSTATEN_REG(base) & SDHC_IRQSTATEN_DCESEN_MASK) >> SDHC_IRQSTATEN_DCESEN_SHIFT)
#define SDHC_BRD_IRQSTATEN_DCESEN(base) (BME_UBFX32(&SDHC_IRQSTATEN_REG(base), SDHC_IRQSTATEN_DCESEN_SHIFT, SDHC_IRQSTATEN_DCESEN_WIDTH))

/*! @brief Set the DCESEN field to a new value. */
#define SDHC_WR_IRQSTATEN_DCESEN(base, value) (SDHC_RMW_IRQSTATEN(base, SDHC_IRQSTATEN_DCESEN_MASK, SDHC_IRQSTATEN_DCESEN(value)))
#define SDHC_BWR_IRQSTATEN_DCESEN(base, value) (BME_BFI32(&SDHC_IRQSTATEN_REG(base), ((uint32_t)(value) << SDHC_IRQSTATEN_DCESEN_SHIFT), SDHC_IRQSTATEN_DCESEN_SHIFT, SDHC_IRQSTATEN_DCESEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTATEN, field DEBESEN[22] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTATEN_DEBESEN field. */
#define SDHC_RD_IRQSTATEN_DEBESEN(base) ((SDHC_IRQSTATEN_REG(base) & SDHC_IRQSTATEN_DEBESEN_MASK) >> SDHC_IRQSTATEN_DEBESEN_SHIFT)
#define SDHC_BRD_IRQSTATEN_DEBESEN(base) (BME_UBFX32(&SDHC_IRQSTATEN_REG(base), SDHC_IRQSTATEN_DEBESEN_SHIFT, SDHC_IRQSTATEN_DEBESEN_WIDTH))

/*! @brief Set the DEBESEN field to a new value. */
#define SDHC_WR_IRQSTATEN_DEBESEN(base, value) (SDHC_RMW_IRQSTATEN(base, SDHC_IRQSTATEN_DEBESEN_MASK, SDHC_IRQSTATEN_DEBESEN(value)))
#define SDHC_BWR_IRQSTATEN_DEBESEN(base, value) (BME_BFI32(&SDHC_IRQSTATEN_REG(base), ((uint32_t)(value) << SDHC_IRQSTATEN_DEBESEN_SHIFT), SDHC_IRQSTATEN_DEBESEN_SHIFT, SDHC_IRQSTATEN_DEBESEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTATEN, field AC12ESEN[24] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTATEN_AC12ESEN field. */
#define SDHC_RD_IRQSTATEN_AC12ESEN(base) ((SDHC_IRQSTATEN_REG(base) & SDHC_IRQSTATEN_AC12ESEN_MASK) >> SDHC_IRQSTATEN_AC12ESEN_SHIFT)
#define SDHC_BRD_IRQSTATEN_AC12ESEN(base) (BME_UBFX32(&SDHC_IRQSTATEN_REG(base), SDHC_IRQSTATEN_AC12ESEN_SHIFT, SDHC_IRQSTATEN_AC12ESEN_WIDTH))

/*! @brief Set the AC12ESEN field to a new value. */
#define SDHC_WR_IRQSTATEN_AC12ESEN(base, value) (SDHC_RMW_IRQSTATEN(base, SDHC_IRQSTATEN_AC12ESEN_MASK, SDHC_IRQSTATEN_AC12ESEN(value)))
#define SDHC_BWR_IRQSTATEN_AC12ESEN(base, value) (BME_BFI32(&SDHC_IRQSTATEN_REG(base), ((uint32_t)(value) << SDHC_IRQSTATEN_AC12ESEN_SHIFT), SDHC_IRQSTATEN_AC12ESEN_SHIFT, SDHC_IRQSTATEN_AC12ESEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSTATEN, field DMAESEN[28] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSTATEN_DMAESEN field. */
#define SDHC_RD_IRQSTATEN_DMAESEN(base) ((SDHC_IRQSTATEN_REG(base) & SDHC_IRQSTATEN_DMAESEN_MASK) >> SDHC_IRQSTATEN_DMAESEN_SHIFT)
#define SDHC_BRD_IRQSTATEN_DMAESEN(base) (BME_UBFX32(&SDHC_IRQSTATEN_REG(base), SDHC_IRQSTATEN_DMAESEN_SHIFT, SDHC_IRQSTATEN_DMAESEN_WIDTH))

/*! @brief Set the DMAESEN field to a new value. */
#define SDHC_WR_IRQSTATEN_DMAESEN(base, value) (SDHC_RMW_IRQSTATEN(base, SDHC_IRQSTATEN_DMAESEN_MASK, SDHC_IRQSTATEN_DMAESEN(value)))
#define SDHC_BWR_IRQSTATEN_DMAESEN(base, value) (BME_BFI32(&SDHC_IRQSTATEN_REG(base), ((uint32_t)(value) << SDHC_IRQSTATEN_DMAESEN_SHIFT), SDHC_IRQSTATEN_DMAESEN_SHIFT, SDHC_IRQSTATEN_DMAESEN_WIDTH))
/*@}*/

/*******************************************************************************
 * SDHC_IRQSIGEN - Interrupt Signal Enable register
 ******************************************************************************/

/*!
 * @brief SDHC_IRQSIGEN - Interrupt Signal Enable register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register is used to select which interrupt status is indicated to the
 * host system as the interrupt. All of these status bits share the same interrupt
 * line. Setting any of these bits to 1 enables interrupt generation. The
 * corresponding status register bit will generate an interrupt when the corresponding
 * interrupt signal enable bit is set.
 */
/*!
 * @name Constants and macros for entire SDHC_IRQSIGEN register
 */
/*@{*/
#define SDHC_RD_IRQSIGEN(base)   (SDHC_IRQSIGEN_REG(base))
#define SDHC_WR_IRQSIGEN(base, value) (SDHC_IRQSIGEN_REG(base) = (value))
#define SDHC_RMW_IRQSIGEN(base, mask, value) (SDHC_WR_IRQSIGEN(base, (SDHC_RD_IRQSIGEN(base) & ~(mask)) | (value)))
#define SDHC_SET_IRQSIGEN(base, value) (BME_OR32(&SDHC_IRQSIGEN_REG(base), (uint32_t)(value)))
#define SDHC_CLR_IRQSIGEN(base, value) (BME_AND32(&SDHC_IRQSIGEN_REG(base), (uint32_t)(~(value))))
#define SDHC_TOG_IRQSIGEN(base, value) (BME_XOR32(&SDHC_IRQSIGEN_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SDHC_IRQSIGEN bitfields
 */

/*!
 * @name Register SDHC_IRQSIGEN, field CCIEN[0] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSIGEN_CCIEN field. */
#define SDHC_RD_IRQSIGEN_CCIEN(base) ((SDHC_IRQSIGEN_REG(base) & SDHC_IRQSIGEN_CCIEN_MASK) >> SDHC_IRQSIGEN_CCIEN_SHIFT)
#define SDHC_BRD_IRQSIGEN_CCIEN(base) (BME_UBFX32(&SDHC_IRQSIGEN_REG(base), SDHC_IRQSIGEN_CCIEN_SHIFT, SDHC_IRQSIGEN_CCIEN_WIDTH))

/*! @brief Set the CCIEN field to a new value. */
#define SDHC_WR_IRQSIGEN_CCIEN(base, value) (SDHC_RMW_IRQSIGEN(base, SDHC_IRQSIGEN_CCIEN_MASK, SDHC_IRQSIGEN_CCIEN(value)))
#define SDHC_BWR_IRQSIGEN_CCIEN(base, value) (BME_BFI32(&SDHC_IRQSIGEN_REG(base), ((uint32_t)(value) << SDHC_IRQSIGEN_CCIEN_SHIFT), SDHC_IRQSIGEN_CCIEN_SHIFT, SDHC_IRQSIGEN_CCIEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSIGEN, field TCIEN[1] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSIGEN_TCIEN field. */
#define SDHC_RD_IRQSIGEN_TCIEN(base) ((SDHC_IRQSIGEN_REG(base) & SDHC_IRQSIGEN_TCIEN_MASK) >> SDHC_IRQSIGEN_TCIEN_SHIFT)
#define SDHC_BRD_IRQSIGEN_TCIEN(base) (BME_UBFX32(&SDHC_IRQSIGEN_REG(base), SDHC_IRQSIGEN_TCIEN_SHIFT, SDHC_IRQSIGEN_TCIEN_WIDTH))

/*! @brief Set the TCIEN field to a new value. */
#define SDHC_WR_IRQSIGEN_TCIEN(base, value) (SDHC_RMW_IRQSIGEN(base, SDHC_IRQSIGEN_TCIEN_MASK, SDHC_IRQSIGEN_TCIEN(value)))
#define SDHC_BWR_IRQSIGEN_TCIEN(base, value) (BME_BFI32(&SDHC_IRQSIGEN_REG(base), ((uint32_t)(value) << SDHC_IRQSIGEN_TCIEN_SHIFT), SDHC_IRQSIGEN_TCIEN_SHIFT, SDHC_IRQSIGEN_TCIEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSIGEN, field BGEIEN[2] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSIGEN_BGEIEN field. */
#define SDHC_RD_IRQSIGEN_BGEIEN(base) ((SDHC_IRQSIGEN_REG(base) & SDHC_IRQSIGEN_BGEIEN_MASK) >> SDHC_IRQSIGEN_BGEIEN_SHIFT)
#define SDHC_BRD_IRQSIGEN_BGEIEN(base) (BME_UBFX32(&SDHC_IRQSIGEN_REG(base), SDHC_IRQSIGEN_BGEIEN_SHIFT, SDHC_IRQSIGEN_BGEIEN_WIDTH))

/*! @brief Set the BGEIEN field to a new value. */
#define SDHC_WR_IRQSIGEN_BGEIEN(base, value) (SDHC_RMW_IRQSIGEN(base, SDHC_IRQSIGEN_BGEIEN_MASK, SDHC_IRQSIGEN_BGEIEN(value)))
#define SDHC_BWR_IRQSIGEN_BGEIEN(base, value) (BME_BFI32(&SDHC_IRQSIGEN_REG(base), ((uint32_t)(value) << SDHC_IRQSIGEN_BGEIEN_SHIFT), SDHC_IRQSIGEN_BGEIEN_SHIFT, SDHC_IRQSIGEN_BGEIEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSIGEN, field DINTIEN[3] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSIGEN_DINTIEN field. */
#define SDHC_RD_IRQSIGEN_DINTIEN(base) ((SDHC_IRQSIGEN_REG(base) & SDHC_IRQSIGEN_DINTIEN_MASK) >> SDHC_IRQSIGEN_DINTIEN_SHIFT)
#define SDHC_BRD_IRQSIGEN_DINTIEN(base) (BME_UBFX32(&SDHC_IRQSIGEN_REG(base), SDHC_IRQSIGEN_DINTIEN_SHIFT, SDHC_IRQSIGEN_DINTIEN_WIDTH))

/*! @brief Set the DINTIEN field to a new value. */
#define SDHC_WR_IRQSIGEN_DINTIEN(base, value) (SDHC_RMW_IRQSIGEN(base, SDHC_IRQSIGEN_DINTIEN_MASK, SDHC_IRQSIGEN_DINTIEN(value)))
#define SDHC_BWR_IRQSIGEN_DINTIEN(base, value) (BME_BFI32(&SDHC_IRQSIGEN_REG(base), ((uint32_t)(value) << SDHC_IRQSIGEN_DINTIEN_SHIFT), SDHC_IRQSIGEN_DINTIEN_SHIFT, SDHC_IRQSIGEN_DINTIEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSIGEN, field BWRIEN[4] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSIGEN_BWRIEN field. */
#define SDHC_RD_IRQSIGEN_BWRIEN(base) ((SDHC_IRQSIGEN_REG(base) & SDHC_IRQSIGEN_BWRIEN_MASK) >> SDHC_IRQSIGEN_BWRIEN_SHIFT)
#define SDHC_BRD_IRQSIGEN_BWRIEN(base) (BME_UBFX32(&SDHC_IRQSIGEN_REG(base), SDHC_IRQSIGEN_BWRIEN_SHIFT, SDHC_IRQSIGEN_BWRIEN_WIDTH))

/*! @brief Set the BWRIEN field to a new value. */
#define SDHC_WR_IRQSIGEN_BWRIEN(base, value) (SDHC_RMW_IRQSIGEN(base, SDHC_IRQSIGEN_BWRIEN_MASK, SDHC_IRQSIGEN_BWRIEN(value)))
#define SDHC_BWR_IRQSIGEN_BWRIEN(base, value) (BME_BFI32(&SDHC_IRQSIGEN_REG(base), ((uint32_t)(value) << SDHC_IRQSIGEN_BWRIEN_SHIFT), SDHC_IRQSIGEN_BWRIEN_SHIFT, SDHC_IRQSIGEN_BWRIEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSIGEN, field BRRIEN[5] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSIGEN_BRRIEN field. */
#define SDHC_RD_IRQSIGEN_BRRIEN(base) ((SDHC_IRQSIGEN_REG(base) & SDHC_IRQSIGEN_BRRIEN_MASK) >> SDHC_IRQSIGEN_BRRIEN_SHIFT)
#define SDHC_BRD_IRQSIGEN_BRRIEN(base) (BME_UBFX32(&SDHC_IRQSIGEN_REG(base), SDHC_IRQSIGEN_BRRIEN_SHIFT, SDHC_IRQSIGEN_BRRIEN_WIDTH))

/*! @brief Set the BRRIEN field to a new value. */
#define SDHC_WR_IRQSIGEN_BRRIEN(base, value) (SDHC_RMW_IRQSIGEN(base, SDHC_IRQSIGEN_BRRIEN_MASK, SDHC_IRQSIGEN_BRRIEN(value)))
#define SDHC_BWR_IRQSIGEN_BRRIEN(base, value) (BME_BFI32(&SDHC_IRQSIGEN_REG(base), ((uint32_t)(value) << SDHC_IRQSIGEN_BRRIEN_SHIFT), SDHC_IRQSIGEN_BRRIEN_SHIFT, SDHC_IRQSIGEN_BRRIEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSIGEN, field CINSIEN[6] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSIGEN_CINSIEN field. */
#define SDHC_RD_IRQSIGEN_CINSIEN(base) ((SDHC_IRQSIGEN_REG(base) & SDHC_IRQSIGEN_CINSIEN_MASK) >> SDHC_IRQSIGEN_CINSIEN_SHIFT)
#define SDHC_BRD_IRQSIGEN_CINSIEN(base) (BME_UBFX32(&SDHC_IRQSIGEN_REG(base), SDHC_IRQSIGEN_CINSIEN_SHIFT, SDHC_IRQSIGEN_CINSIEN_WIDTH))

/*! @brief Set the CINSIEN field to a new value. */
#define SDHC_WR_IRQSIGEN_CINSIEN(base, value) (SDHC_RMW_IRQSIGEN(base, SDHC_IRQSIGEN_CINSIEN_MASK, SDHC_IRQSIGEN_CINSIEN(value)))
#define SDHC_BWR_IRQSIGEN_CINSIEN(base, value) (BME_BFI32(&SDHC_IRQSIGEN_REG(base), ((uint32_t)(value) << SDHC_IRQSIGEN_CINSIEN_SHIFT), SDHC_IRQSIGEN_CINSIEN_SHIFT, SDHC_IRQSIGEN_CINSIEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSIGEN, field CRMIEN[7] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSIGEN_CRMIEN field. */
#define SDHC_RD_IRQSIGEN_CRMIEN(base) ((SDHC_IRQSIGEN_REG(base) & SDHC_IRQSIGEN_CRMIEN_MASK) >> SDHC_IRQSIGEN_CRMIEN_SHIFT)
#define SDHC_BRD_IRQSIGEN_CRMIEN(base) (BME_UBFX32(&SDHC_IRQSIGEN_REG(base), SDHC_IRQSIGEN_CRMIEN_SHIFT, SDHC_IRQSIGEN_CRMIEN_WIDTH))

/*! @brief Set the CRMIEN field to a new value. */
#define SDHC_WR_IRQSIGEN_CRMIEN(base, value) (SDHC_RMW_IRQSIGEN(base, SDHC_IRQSIGEN_CRMIEN_MASK, SDHC_IRQSIGEN_CRMIEN(value)))
#define SDHC_BWR_IRQSIGEN_CRMIEN(base, value) (BME_BFI32(&SDHC_IRQSIGEN_REG(base), ((uint32_t)(value) << SDHC_IRQSIGEN_CRMIEN_SHIFT), SDHC_IRQSIGEN_CRMIEN_SHIFT, SDHC_IRQSIGEN_CRMIEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSIGEN, field CINTIEN[8] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSIGEN_CINTIEN field. */
#define SDHC_RD_IRQSIGEN_CINTIEN(base) ((SDHC_IRQSIGEN_REG(base) & SDHC_IRQSIGEN_CINTIEN_MASK) >> SDHC_IRQSIGEN_CINTIEN_SHIFT)
#define SDHC_BRD_IRQSIGEN_CINTIEN(base) (BME_UBFX32(&SDHC_IRQSIGEN_REG(base), SDHC_IRQSIGEN_CINTIEN_SHIFT, SDHC_IRQSIGEN_CINTIEN_WIDTH))

/*! @brief Set the CINTIEN field to a new value. */
#define SDHC_WR_IRQSIGEN_CINTIEN(base, value) (SDHC_RMW_IRQSIGEN(base, SDHC_IRQSIGEN_CINTIEN_MASK, SDHC_IRQSIGEN_CINTIEN(value)))
#define SDHC_BWR_IRQSIGEN_CINTIEN(base, value) (BME_BFI32(&SDHC_IRQSIGEN_REG(base), ((uint32_t)(value) << SDHC_IRQSIGEN_CINTIEN_SHIFT), SDHC_IRQSIGEN_CINTIEN_SHIFT, SDHC_IRQSIGEN_CINTIEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSIGEN, field CTOEIEN[16] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSIGEN_CTOEIEN field. */
#define SDHC_RD_IRQSIGEN_CTOEIEN(base) ((SDHC_IRQSIGEN_REG(base) & SDHC_IRQSIGEN_CTOEIEN_MASK) >> SDHC_IRQSIGEN_CTOEIEN_SHIFT)
#define SDHC_BRD_IRQSIGEN_CTOEIEN(base) (BME_UBFX32(&SDHC_IRQSIGEN_REG(base), SDHC_IRQSIGEN_CTOEIEN_SHIFT, SDHC_IRQSIGEN_CTOEIEN_WIDTH))

/*! @brief Set the CTOEIEN field to a new value. */
#define SDHC_WR_IRQSIGEN_CTOEIEN(base, value) (SDHC_RMW_IRQSIGEN(base, SDHC_IRQSIGEN_CTOEIEN_MASK, SDHC_IRQSIGEN_CTOEIEN(value)))
#define SDHC_BWR_IRQSIGEN_CTOEIEN(base, value) (BME_BFI32(&SDHC_IRQSIGEN_REG(base), ((uint32_t)(value) << SDHC_IRQSIGEN_CTOEIEN_SHIFT), SDHC_IRQSIGEN_CTOEIEN_SHIFT, SDHC_IRQSIGEN_CTOEIEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSIGEN, field CCEIEN[17] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSIGEN_CCEIEN field. */
#define SDHC_RD_IRQSIGEN_CCEIEN(base) ((SDHC_IRQSIGEN_REG(base) & SDHC_IRQSIGEN_CCEIEN_MASK) >> SDHC_IRQSIGEN_CCEIEN_SHIFT)
#define SDHC_BRD_IRQSIGEN_CCEIEN(base) (BME_UBFX32(&SDHC_IRQSIGEN_REG(base), SDHC_IRQSIGEN_CCEIEN_SHIFT, SDHC_IRQSIGEN_CCEIEN_WIDTH))

/*! @brief Set the CCEIEN field to a new value. */
#define SDHC_WR_IRQSIGEN_CCEIEN(base, value) (SDHC_RMW_IRQSIGEN(base, SDHC_IRQSIGEN_CCEIEN_MASK, SDHC_IRQSIGEN_CCEIEN(value)))
#define SDHC_BWR_IRQSIGEN_CCEIEN(base, value) (BME_BFI32(&SDHC_IRQSIGEN_REG(base), ((uint32_t)(value) << SDHC_IRQSIGEN_CCEIEN_SHIFT), SDHC_IRQSIGEN_CCEIEN_SHIFT, SDHC_IRQSIGEN_CCEIEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSIGEN, field CEBEIEN[18] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSIGEN_CEBEIEN field. */
#define SDHC_RD_IRQSIGEN_CEBEIEN(base) ((SDHC_IRQSIGEN_REG(base) & SDHC_IRQSIGEN_CEBEIEN_MASK) >> SDHC_IRQSIGEN_CEBEIEN_SHIFT)
#define SDHC_BRD_IRQSIGEN_CEBEIEN(base) (BME_UBFX32(&SDHC_IRQSIGEN_REG(base), SDHC_IRQSIGEN_CEBEIEN_SHIFT, SDHC_IRQSIGEN_CEBEIEN_WIDTH))

/*! @brief Set the CEBEIEN field to a new value. */
#define SDHC_WR_IRQSIGEN_CEBEIEN(base, value) (SDHC_RMW_IRQSIGEN(base, SDHC_IRQSIGEN_CEBEIEN_MASK, SDHC_IRQSIGEN_CEBEIEN(value)))
#define SDHC_BWR_IRQSIGEN_CEBEIEN(base, value) (BME_BFI32(&SDHC_IRQSIGEN_REG(base), ((uint32_t)(value) << SDHC_IRQSIGEN_CEBEIEN_SHIFT), SDHC_IRQSIGEN_CEBEIEN_SHIFT, SDHC_IRQSIGEN_CEBEIEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSIGEN, field CIEIEN[19] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSIGEN_CIEIEN field. */
#define SDHC_RD_IRQSIGEN_CIEIEN(base) ((SDHC_IRQSIGEN_REG(base) & SDHC_IRQSIGEN_CIEIEN_MASK) >> SDHC_IRQSIGEN_CIEIEN_SHIFT)
#define SDHC_BRD_IRQSIGEN_CIEIEN(base) (BME_UBFX32(&SDHC_IRQSIGEN_REG(base), SDHC_IRQSIGEN_CIEIEN_SHIFT, SDHC_IRQSIGEN_CIEIEN_WIDTH))

/*! @brief Set the CIEIEN field to a new value. */
#define SDHC_WR_IRQSIGEN_CIEIEN(base, value) (SDHC_RMW_IRQSIGEN(base, SDHC_IRQSIGEN_CIEIEN_MASK, SDHC_IRQSIGEN_CIEIEN(value)))
#define SDHC_BWR_IRQSIGEN_CIEIEN(base, value) (BME_BFI32(&SDHC_IRQSIGEN_REG(base), ((uint32_t)(value) << SDHC_IRQSIGEN_CIEIEN_SHIFT), SDHC_IRQSIGEN_CIEIEN_SHIFT, SDHC_IRQSIGEN_CIEIEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSIGEN, field DTOEIEN[20] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSIGEN_DTOEIEN field. */
#define SDHC_RD_IRQSIGEN_DTOEIEN(base) ((SDHC_IRQSIGEN_REG(base) & SDHC_IRQSIGEN_DTOEIEN_MASK) >> SDHC_IRQSIGEN_DTOEIEN_SHIFT)
#define SDHC_BRD_IRQSIGEN_DTOEIEN(base) (BME_UBFX32(&SDHC_IRQSIGEN_REG(base), SDHC_IRQSIGEN_DTOEIEN_SHIFT, SDHC_IRQSIGEN_DTOEIEN_WIDTH))

/*! @brief Set the DTOEIEN field to a new value. */
#define SDHC_WR_IRQSIGEN_DTOEIEN(base, value) (SDHC_RMW_IRQSIGEN(base, SDHC_IRQSIGEN_DTOEIEN_MASK, SDHC_IRQSIGEN_DTOEIEN(value)))
#define SDHC_BWR_IRQSIGEN_DTOEIEN(base, value) (BME_BFI32(&SDHC_IRQSIGEN_REG(base), ((uint32_t)(value) << SDHC_IRQSIGEN_DTOEIEN_SHIFT), SDHC_IRQSIGEN_DTOEIEN_SHIFT, SDHC_IRQSIGEN_DTOEIEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSIGEN, field DCEIEN[21] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSIGEN_DCEIEN field. */
#define SDHC_RD_IRQSIGEN_DCEIEN(base) ((SDHC_IRQSIGEN_REG(base) & SDHC_IRQSIGEN_DCEIEN_MASK) >> SDHC_IRQSIGEN_DCEIEN_SHIFT)
#define SDHC_BRD_IRQSIGEN_DCEIEN(base) (BME_UBFX32(&SDHC_IRQSIGEN_REG(base), SDHC_IRQSIGEN_DCEIEN_SHIFT, SDHC_IRQSIGEN_DCEIEN_WIDTH))

/*! @brief Set the DCEIEN field to a new value. */
#define SDHC_WR_IRQSIGEN_DCEIEN(base, value) (SDHC_RMW_IRQSIGEN(base, SDHC_IRQSIGEN_DCEIEN_MASK, SDHC_IRQSIGEN_DCEIEN(value)))
#define SDHC_BWR_IRQSIGEN_DCEIEN(base, value) (BME_BFI32(&SDHC_IRQSIGEN_REG(base), ((uint32_t)(value) << SDHC_IRQSIGEN_DCEIEN_SHIFT), SDHC_IRQSIGEN_DCEIEN_SHIFT, SDHC_IRQSIGEN_DCEIEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSIGEN, field DEBEIEN[22] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSIGEN_DEBEIEN field. */
#define SDHC_RD_IRQSIGEN_DEBEIEN(base) ((SDHC_IRQSIGEN_REG(base) & SDHC_IRQSIGEN_DEBEIEN_MASK) >> SDHC_IRQSIGEN_DEBEIEN_SHIFT)
#define SDHC_BRD_IRQSIGEN_DEBEIEN(base) (BME_UBFX32(&SDHC_IRQSIGEN_REG(base), SDHC_IRQSIGEN_DEBEIEN_SHIFT, SDHC_IRQSIGEN_DEBEIEN_WIDTH))

/*! @brief Set the DEBEIEN field to a new value. */
#define SDHC_WR_IRQSIGEN_DEBEIEN(base, value) (SDHC_RMW_IRQSIGEN(base, SDHC_IRQSIGEN_DEBEIEN_MASK, SDHC_IRQSIGEN_DEBEIEN(value)))
#define SDHC_BWR_IRQSIGEN_DEBEIEN(base, value) (BME_BFI32(&SDHC_IRQSIGEN_REG(base), ((uint32_t)(value) << SDHC_IRQSIGEN_DEBEIEN_SHIFT), SDHC_IRQSIGEN_DEBEIEN_SHIFT, SDHC_IRQSIGEN_DEBEIEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSIGEN, field AC12EIEN[24] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSIGEN_AC12EIEN field. */
#define SDHC_RD_IRQSIGEN_AC12EIEN(base) ((SDHC_IRQSIGEN_REG(base) & SDHC_IRQSIGEN_AC12EIEN_MASK) >> SDHC_IRQSIGEN_AC12EIEN_SHIFT)
#define SDHC_BRD_IRQSIGEN_AC12EIEN(base) (BME_UBFX32(&SDHC_IRQSIGEN_REG(base), SDHC_IRQSIGEN_AC12EIEN_SHIFT, SDHC_IRQSIGEN_AC12EIEN_WIDTH))

/*! @brief Set the AC12EIEN field to a new value. */
#define SDHC_WR_IRQSIGEN_AC12EIEN(base, value) (SDHC_RMW_IRQSIGEN(base, SDHC_IRQSIGEN_AC12EIEN_MASK, SDHC_IRQSIGEN_AC12EIEN(value)))
#define SDHC_BWR_IRQSIGEN_AC12EIEN(base, value) (BME_BFI32(&SDHC_IRQSIGEN_REG(base), ((uint32_t)(value) << SDHC_IRQSIGEN_AC12EIEN_SHIFT), SDHC_IRQSIGEN_AC12EIEN_SHIFT, SDHC_IRQSIGEN_AC12EIEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_IRQSIGEN, field DMAEIEN[28] (RW)
 *
 * Values:
 * - 0b0 - Masked
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the SDHC_IRQSIGEN_DMAEIEN field. */
#define SDHC_RD_IRQSIGEN_DMAEIEN(base) ((SDHC_IRQSIGEN_REG(base) & SDHC_IRQSIGEN_DMAEIEN_MASK) >> SDHC_IRQSIGEN_DMAEIEN_SHIFT)
#define SDHC_BRD_IRQSIGEN_DMAEIEN(base) (BME_UBFX32(&SDHC_IRQSIGEN_REG(base), SDHC_IRQSIGEN_DMAEIEN_SHIFT, SDHC_IRQSIGEN_DMAEIEN_WIDTH))

/*! @brief Set the DMAEIEN field to a new value. */
#define SDHC_WR_IRQSIGEN_DMAEIEN(base, value) (SDHC_RMW_IRQSIGEN(base, SDHC_IRQSIGEN_DMAEIEN_MASK, SDHC_IRQSIGEN_DMAEIEN(value)))
#define SDHC_BWR_IRQSIGEN_DMAEIEN(base, value) (BME_BFI32(&SDHC_IRQSIGEN_REG(base), ((uint32_t)(value) << SDHC_IRQSIGEN_DMAEIEN_SHIFT), SDHC_IRQSIGEN_DMAEIEN_SHIFT, SDHC_IRQSIGEN_DMAEIEN_WIDTH))
/*@}*/

/*******************************************************************************
 * SDHC_AC12ERR - Auto CMD12 Error Status Register
 ******************************************************************************/

/*!
 * @brief SDHC_AC12ERR - Auto CMD12 Error Status Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * When the AC12ESEN bit in the Status register is set, the host driver shall
 * check this register to identify what kind of error the Auto CMD12 indicated.
 * This register is valid only when the Auto CMD12 Error status bit is set. The
 * following table shows the relationship between the Auto CMGD12 CRC error and the
 * Auto CMD12 command timeout error. Relationship between Command CRC Error and
 * Command Timeout Error For Auto CMD12 Auto CMD12 CRC error Auto CMD12 timeout
 * error Type of error 0 0 No error 0 1 Response timeout error 1 0 Response CRC
 * error 1 1 CMD line conflict Changes in Auto CMD12 Error Status register can be
 * classified in three scenarios: When the SDHC is going to issue an Auto CMD12: Set
 * bit 0 to 1 if the Auto CMD12 can't be issued due to an error in the previous
 * command. Set bit 0 to 0 if the auto CMD12 is issued. At the end bit of an auto
 * CMD12 response: Check errors corresponding to bits 1-4. Set bits 1-4
 * corresponding to detected errors. Clear bits 1-4 corresponding to detected errors.
 * Before reading the Auto CMD12 error status bit 7: Set bit 7 to 1 if there is a
 * command that can't be issued. Clear bit 7 if there is no command to issue. The
 * timing for generating the auto CMD12 error and writing to the command register
 * are asynchronous. After that, bit 7 shall be sampled when the driver is not
 * writing to the command register. So it is suggested to read this register only
 * when IRQSTAT[AC12E] is set. An Auto CMD12 error interrupt is generated when one
 * of the error bits (0-4) is set to 1. The command not issued by auto CMD12
 * error does not generate an interrupt.
 */
/*!
 * @name Constants and macros for entire SDHC_AC12ERR register
 */
/*@{*/
#define SDHC_RD_AC12ERR(base)    (SDHC_AC12ERR_REG(base))
/*@}*/

/*
 * Constants & macros for individual SDHC_AC12ERR bitfields
 */

/*!
 * @name Register SDHC_AC12ERR, field AC12NE[0] (RO)
 *
 * If memory multiple block data transfer is not started, due to a command
 * error, this bit is not set because it is not necessary to issue an auto CMD12.
 * Setting this bit to 1 means the SDHC cannot issue the auto CMD12 to stop a memory
 * multiple block data transfer due to some error. If this bit is set to 1, other
 * error status bits (1-4) have no meaning.
 *
 * Values:
 * - 0b0 - Executed.
 * - 0b1 - Not executed.
 */
/*@{*/
/*! @brief Read current value of the SDHC_AC12ERR_AC12NE field. */
#define SDHC_RD_AC12ERR_AC12NE(base) ((SDHC_AC12ERR_REG(base) & SDHC_AC12ERR_AC12NE_MASK) >> SDHC_AC12ERR_AC12NE_SHIFT)
#define SDHC_BRD_AC12ERR_AC12NE(base) (BME_UBFX32(&SDHC_AC12ERR_REG(base), SDHC_AC12ERR_AC12NE_SHIFT, SDHC_AC12ERR_AC12NE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_AC12ERR, field AC12TOE[1] (RO)
 *
 * Occurs if no response is returned within 64 SDCLK cycles from the end bit of
 * the command. If this bit is set to 1, the other error status bits (2-4) have
 * no meaning.
 *
 * Values:
 * - 0b0 - No error.
 * - 0b1 - Time out.
 */
/*@{*/
/*! @brief Read current value of the SDHC_AC12ERR_AC12TOE field. */
#define SDHC_RD_AC12ERR_AC12TOE(base) ((SDHC_AC12ERR_REG(base) & SDHC_AC12ERR_AC12TOE_MASK) >> SDHC_AC12ERR_AC12TOE_SHIFT)
#define SDHC_BRD_AC12ERR_AC12TOE(base) (BME_UBFX32(&SDHC_AC12ERR_REG(base), SDHC_AC12ERR_AC12TOE_SHIFT, SDHC_AC12ERR_AC12TOE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_AC12ERR, field AC12EBE[2] (RO)
 *
 * Occurs when detecting that the end bit of command response is 0 which must be
 * 1.
 *
 * Values:
 * - 0b0 - No error.
 * - 0b1 - End bit error generated.
 */
/*@{*/
/*! @brief Read current value of the SDHC_AC12ERR_AC12EBE field. */
#define SDHC_RD_AC12ERR_AC12EBE(base) ((SDHC_AC12ERR_REG(base) & SDHC_AC12ERR_AC12EBE_MASK) >> SDHC_AC12ERR_AC12EBE_SHIFT)
#define SDHC_BRD_AC12ERR_AC12EBE(base) (BME_UBFX32(&SDHC_AC12ERR_REG(base), SDHC_AC12ERR_AC12EBE_SHIFT, SDHC_AC12ERR_AC12EBE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_AC12ERR, field AC12CE[3] (RO)
 *
 * Occurs when detecting a CRC error in the command response.
 *
 * Values:
 * - 0b0 - No CRC error.
 * - 0b1 - CRC error met in Auto CMD12 response.
 */
/*@{*/
/*! @brief Read current value of the SDHC_AC12ERR_AC12CE field. */
#define SDHC_RD_AC12ERR_AC12CE(base) ((SDHC_AC12ERR_REG(base) & SDHC_AC12ERR_AC12CE_MASK) >> SDHC_AC12ERR_AC12CE_SHIFT)
#define SDHC_BRD_AC12ERR_AC12CE(base) (BME_UBFX32(&SDHC_AC12ERR_REG(base), SDHC_AC12ERR_AC12CE_SHIFT, SDHC_AC12ERR_AC12CE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_AC12ERR, field AC12IE[4] (RO)
 *
 * Occurs if the command index error occurs in response to a command.
 *
 * Values:
 * - 0b0 - No error.
 * - 0b1 - Error, the CMD index in response is not CMD12.
 */
/*@{*/
/*! @brief Read current value of the SDHC_AC12ERR_AC12IE field. */
#define SDHC_RD_AC12ERR_AC12IE(base) ((SDHC_AC12ERR_REG(base) & SDHC_AC12ERR_AC12IE_MASK) >> SDHC_AC12ERR_AC12IE_SHIFT)
#define SDHC_BRD_AC12ERR_AC12IE(base) (BME_UBFX32(&SDHC_AC12ERR_REG(base), SDHC_AC12ERR_AC12IE_SHIFT, SDHC_AC12ERR_AC12IE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_AC12ERR, field CNIBAC12E[7] (RO)
 *
 * Setting this bit to 1 means CMD_wo_DAT is not executed due to an auto CMD12
 * error (D04-D01) in this register.
 *
 * Values:
 * - 0b0 - No error.
 * - 0b1 - Not issued.
 */
/*@{*/
/*! @brief Read current value of the SDHC_AC12ERR_CNIBAC12E field. */
#define SDHC_RD_AC12ERR_CNIBAC12E(base) ((SDHC_AC12ERR_REG(base) & SDHC_AC12ERR_CNIBAC12E_MASK) >> SDHC_AC12ERR_CNIBAC12E_SHIFT)
#define SDHC_BRD_AC12ERR_CNIBAC12E(base) (BME_UBFX32(&SDHC_AC12ERR_REG(base), SDHC_AC12ERR_CNIBAC12E_SHIFT, SDHC_AC12ERR_CNIBAC12E_WIDTH))
/*@}*/

/*******************************************************************************
 * SDHC_HTCAPBLT - Host Controller Capabilities
 ******************************************************************************/

/*!
 * @brief SDHC_HTCAPBLT - Host Controller Capabilities (RO)
 *
 * Reset value: 0x07F30000U
 *
 * This register provides the host driver with information specific to the SDHC
 * implementation. The value in this register is the power-on-reset value, and
 * does not change with a software reset. Any write to this register is ignored.
 */
/*!
 * @name Constants and macros for entire SDHC_HTCAPBLT register
 */
/*@{*/
#define SDHC_RD_HTCAPBLT(base)   (SDHC_HTCAPBLT_REG(base))
/*@}*/

/*
 * Constants & macros for individual SDHC_HTCAPBLT bitfields
 */

/*!
 * @name Register SDHC_HTCAPBLT, field MBL[18:16] (RO)
 *
 * This value indicates the maximum block size that the host driver can read and
 * write to the buffer in the SDHC. The buffer shall transfer block size without
 * wait cycles.
 *
 * Values:
 * - 0b000 - 512 bytes
 * - 0b001 - 1024 bytes
 * - 0b010 - 2048 bytes
 * - 0b011 - 4096 bytes
 */
/*@{*/
/*! @brief Read current value of the SDHC_HTCAPBLT_MBL field. */
#define SDHC_RD_HTCAPBLT_MBL(base) ((SDHC_HTCAPBLT_REG(base) & SDHC_HTCAPBLT_MBL_MASK) >> SDHC_HTCAPBLT_MBL_SHIFT)
#define SDHC_BRD_HTCAPBLT_MBL(base) (BME_UBFX32(&SDHC_HTCAPBLT_REG(base), SDHC_HTCAPBLT_MBL_SHIFT, SDHC_HTCAPBLT_MBL_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_HTCAPBLT, field ADMAS[20] (RO)
 *
 * This bit indicates whether the SDHC supports the ADMA feature.
 *
 * Values:
 * - 0b0 - Advanced DMA not supported.
 * - 0b1 - Advanced DMA supported.
 */
/*@{*/
/*! @brief Read current value of the SDHC_HTCAPBLT_ADMAS field. */
#define SDHC_RD_HTCAPBLT_ADMAS(base) ((SDHC_HTCAPBLT_REG(base) & SDHC_HTCAPBLT_ADMAS_MASK) >> SDHC_HTCAPBLT_ADMAS_SHIFT)
#define SDHC_BRD_HTCAPBLT_ADMAS(base) (BME_UBFX32(&SDHC_HTCAPBLT_REG(base), SDHC_HTCAPBLT_ADMAS_SHIFT, SDHC_HTCAPBLT_ADMAS_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_HTCAPBLT, field HSS[21] (RO)
 *
 * This bit indicates whether the SDHC supports high speed mode and the host
 * system can supply a SD Clock frequency from 25 MHz to 50 MHz.
 *
 * Values:
 * - 0b0 - High speed not supported.
 * - 0b1 - High speed supported.
 */
/*@{*/
/*! @brief Read current value of the SDHC_HTCAPBLT_HSS field. */
#define SDHC_RD_HTCAPBLT_HSS(base) ((SDHC_HTCAPBLT_REG(base) & SDHC_HTCAPBLT_HSS_MASK) >> SDHC_HTCAPBLT_HSS_SHIFT)
#define SDHC_BRD_HTCAPBLT_HSS(base) (BME_UBFX32(&SDHC_HTCAPBLT_REG(base), SDHC_HTCAPBLT_HSS_SHIFT, SDHC_HTCAPBLT_HSS_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_HTCAPBLT, field DMAS[22] (RO)
 *
 * This bit indicates whether the SDHC is capable of using the internal DMA to
 * transfer data between system memory and the data buffer directly.
 *
 * Values:
 * - 0b0 - DMA not supported.
 * - 0b1 - DMA supported.
 */
/*@{*/
/*! @brief Read current value of the SDHC_HTCAPBLT_DMAS field. */
#define SDHC_RD_HTCAPBLT_DMAS(base) ((SDHC_HTCAPBLT_REG(base) & SDHC_HTCAPBLT_DMAS_MASK) >> SDHC_HTCAPBLT_DMAS_SHIFT)
#define SDHC_BRD_HTCAPBLT_DMAS(base) (BME_UBFX32(&SDHC_HTCAPBLT_REG(base), SDHC_HTCAPBLT_DMAS_SHIFT, SDHC_HTCAPBLT_DMAS_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_HTCAPBLT, field SRS[23] (RO)
 *
 * This bit indicates whether the SDHC supports suspend / resume functionality.
 * If this bit is 0, the suspend and resume mechanism, as well as the read Wwait,
 * are not supported, and the host driver shall not issue either suspend or
 * resume commands.
 *
 * Values:
 * - 0b0 - Not supported.
 * - 0b1 - Supported.
 */
/*@{*/
/*! @brief Read current value of the SDHC_HTCAPBLT_SRS field. */
#define SDHC_RD_HTCAPBLT_SRS(base) ((SDHC_HTCAPBLT_REG(base) & SDHC_HTCAPBLT_SRS_MASK) >> SDHC_HTCAPBLT_SRS_SHIFT)
#define SDHC_BRD_HTCAPBLT_SRS(base) (BME_UBFX32(&SDHC_HTCAPBLT_REG(base), SDHC_HTCAPBLT_SRS_SHIFT, SDHC_HTCAPBLT_SRS_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_HTCAPBLT, field VS33[24] (RO)
 *
 * This bit shall depend on the host system ability.
 *
 * Values:
 * - 0b0 - 3.3 V not supported.
 * - 0b1 - 3.3 V supported.
 */
/*@{*/
/*! @brief Read current value of the SDHC_HTCAPBLT_VS33 field. */
#define SDHC_RD_HTCAPBLT_VS33(base) ((SDHC_HTCAPBLT_REG(base) & SDHC_HTCAPBLT_VS33_MASK) >> SDHC_HTCAPBLT_VS33_SHIFT)
#define SDHC_BRD_HTCAPBLT_VS33(base) (BME_UBFX32(&SDHC_HTCAPBLT_REG(base), SDHC_HTCAPBLT_VS33_SHIFT, SDHC_HTCAPBLT_VS33_WIDTH))
/*@}*/

/*******************************************************************************
 * SDHC_WML - Watermark Level Register
 ******************************************************************************/

/*!
 * @brief SDHC_WML - Watermark Level Register (RW)
 *
 * Reset value: 0x00100010U
 *
 * Both write and read watermark levels (FIFO threshold) are configurable. There
 * value can range from 1 to 128 words. Both write and read burst lengths are
 * also configurable. There value can range from 1 to 31 words.
 */
/*!
 * @name Constants and macros for entire SDHC_WML register
 */
/*@{*/
#define SDHC_RD_WML(base)        (SDHC_WML_REG(base))
#define SDHC_WR_WML(base, value) (SDHC_WML_REG(base) = (value))
#define SDHC_RMW_WML(base, mask, value) (SDHC_WR_WML(base, (SDHC_RD_WML(base) & ~(mask)) | (value)))
#define SDHC_SET_WML(base, value) (BME_OR32(&SDHC_WML_REG(base), (uint32_t)(value)))
#define SDHC_CLR_WML(base, value) (BME_AND32(&SDHC_WML_REG(base), (uint32_t)(~(value))))
#define SDHC_TOG_WML(base, value) (BME_XOR32(&SDHC_WML_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SDHC_WML bitfields
 */

/*!
 * @name Register SDHC_WML, field RDWML[7:0] (RW)
 *
 * The number of words used as the watermark level (FIFO threshold) in a DMA
 * read operation. Also the number of words as a sequence of read bursts in
 * back-to-back mode. The maximum legal value for the read water mark level is 128.
 */
/*@{*/
/*! @brief Read current value of the SDHC_WML_RDWML field. */
#define SDHC_RD_WML_RDWML(base) ((SDHC_WML_REG(base) & SDHC_WML_RDWML_MASK) >> SDHC_WML_RDWML_SHIFT)
#define SDHC_BRD_WML_RDWML(base) (BME_UBFX32(&SDHC_WML_REG(base), SDHC_WML_RDWML_SHIFT, SDHC_WML_RDWML_WIDTH))

/*! @brief Set the RDWML field to a new value. */
#define SDHC_WR_WML_RDWML(base, value) (SDHC_RMW_WML(base, SDHC_WML_RDWML_MASK, SDHC_WML_RDWML(value)))
#define SDHC_BWR_WML_RDWML(base, value) (BME_BFI32(&SDHC_WML_REG(base), ((uint32_t)(value) << SDHC_WML_RDWML_SHIFT), SDHC_WML_RDWML_SHIFT, SDHC_WML_RDWML_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_WML, field WRWML[23:16] (RW)
 *
 * The number of words used as the watermark level (FIFO threshold) in a DMA
 * write operation. Also the number of words as a sequence of write bursts in
 * back-to-back mode. The maximum legal value for the write watermark level is 128.
 */
/*@{*/
/*! @brief Read current value of the SDHC_WML_WRWML field. */
#define SDHC_RD_WML_WRWML(base) ((SDHC_WML_REG(base) & SDHC_WML_WRWML_MASK) >> SDHC_WML_WRWML_SHIFT)
#define SDHC_BRD_WML_WRWML(base) (BME_UBFX32(&SDHC_WML_REG(base), SDHC_WML_WRWML_SHIFT, SDHC_WML_WRWML_WIDTH))

/*! @brief Set the WRWML field to a new value. */
#define SDHC_WR_WML_WRWML(base, value) (SDHC_RMW_WML(base, SDHC_WML_WRWML_MASK, SDHC_WML_WRWML(value)))
#define SDHC_BWR_WML_WRWML(base, value) (BME_BFI32(&SDHC_WML_REG(base), ((uint32_t)(value) << SDHC_WML_WRWML_SHIFT), SDHC_WML_WRWML_SHIFT, SDHC_WML_WRWML_WIDTH))
/*@}*/

/*******************************************************************************
 * SDHC_FEVT - Force Event register
 ******************************************************************************/

/*!
 * @brief SDHC_FEVT - Force Event register (WO)
 *
 * Reset value: 0x00000000U
 *
 * The Force Event (FEVT) register is not a physically implemented register.
 * Rather, it is an address at which the Interrupt Status register can be written if
 * the corresponding bit of the Interrupt Status Enable register is set. This
 * register is a write only register and writing 0 to it has no effect. Writing 1
 * to this register actually sets the corresponding bit of Interrupt Status
 * register. A read from this register always results in 0's. To change the
 * corresponding status bits in the interrupt status register, make sure to set
 * SYSCTL[IPGEN] so that bus clock is always active. Forcing a card interrupt will generate a
 * short pulse on the DAT[1] line, and the driver may treat this interrupt as a
 * normal interrupt. The interrupt service routine may skip polling the card
 * interrupt factor as the interrupt is selfcleared.
 */
/*!
 * @name Constants and macros for entire SDHC_FEVT register
 */
/*@{*/
#define SDHC_RD_FEVT(base)       (SDHC_FEVT_REG(base))
#define SDHC_WR_FEVT(base, value) (SDHC_FEVT_REG(base) = (value))
#define SDHC_RMW_FEVT(base, mask, value) (SDHC_WR_FEVT(base, (SDHC_RD_FEVT(base) & ~(mask)) | (value)))
/*@}*/

/*
 * Constants & macros for individual SDHC_FEVT bitfields
 */

/*!
 * @name Register SDHC_FEVT, field AC12NE[0] (WORZ)
 *
 * Forces AC12ERR[AC12NE] to be set.
 */
/*@{*/
/*! @brief Set the AC12NE field to a new value. */
#define SDHC_WR_FEVT_AC12NE(base, value) (SDHC_RMW_FEVT(base, SDHC_FEVT_AC12NE_MASK, SDHC_FEVT_AC12NE(value)))
#define SDHC_BWR_FEVT_AC12NE(base, value) (BME_BFI32(&SDHC_FEVT_REG(base), ((uint32_t)(value) << SDHC_FEVT_AC12NE_SHIFT), SDHC_FEVT_AC12NE_SHIFT, SDHC_FEVT_AC12NE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_FEVT, field AC12TOE[1] (WORZ)
 *
 * Forces AC12ERR[AC12TOE] to be set.
 */
/*@{*/
/*! @brief Set the AC12TOE field to a new value. */
#define SDHC_WR_FEVT_AC12TOE(base, value) (SDHC_RMW_FEVT(base, SDHC_FEVT_AC12TOE_MASK, SDHC_FEVT_AC12TOE(value)))
#define SDHC_BWR_FEVT_AC12TOE(base, value) (BME_BFI32(&SDHC_FEVT_REG(base), ((uint32_t)(value) << SDHC_FEVT_AC12TOE_SHIFT), SDHC_FEVT_AC12TOE_SHIFT, SDHC_FEVT_AC12TOE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_FEVT, field AC12CE[2] (WORZ)
 *
 * Forces AC12ERR[AC12CE] to be set.
 */
/*@{*/
/*! @brief Set the AC12CE field to a new value. */
#define SDHC_WR_FEVT_AC12CE(base, value) (SDHC_RMW_FEVT(base, SDHC_FEVT_AC12CE_MASK, SDHC_FEVT_AC12CE(value)))
#define SDHC_BWR_FEVT_AC12CE(base, value) (BME_BFI32(&SDHC_FEVT_REG(base), ((uint32_t)(value) << SDHC_FEVT_AC12CE_SHIFT), SDHC_FEVT_AC12CE_SHIFT, SDHC_FEVT_AC12CE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_FEVT, field AC12EBE[3] (WORZ)
 *
 * Forces AC12ERR[AC12EBE] to be set.
 */
/*@{*/
/*! @brief Set the AC12EBE field to a new value. */
#define SDHC_WR_FEVT_AC12EBE(base, value) (SDHC_RMW_FEVT(base, SDHC_FEVT_AC12EBE_MASK, SDHC_FEVT_AC12EBE(value)))
#define SDHC_BWR_FEVT_AC12EBE(base, value) (BME_BFI32(&SDHC_FEVT_REG(base), ((uint32_t)(value) << SDHC_FEVT_AC12EBE_SHIFT), SDHC_FEVT_AC12EBE_SHIFT, SDHC_FEVT_AC12EBE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_FEVT, field AC12IE[4] (WORZ)
 *
 * Forces AC12ERR[AC12IE] to be set.
 */
/*@{*/
/*! @brief Set the AC12IE field to a new value. */
#define SDHC_WR_FEVT_AC12IE(base, value) (SDHC_RMW_FEVT(base, SDHC_FEVT_AC12IE_MASK, SDHC_FEVT_AC12IE(value)))
#define SDHC_BWR_FEVT_AC12IE(base, value) (BME_BFI32(&SDHC_FEVT_REG(base), ((uint32_t)(value) << SDHC_FEVT_AC12IE_SHIFT), SDHC_FEVT_AC12IE_SHIFT, SDHC_FEVT_AC12IE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_FEVT, field CNIBAC12E[7] (WORZ)
 *
 * Forces AC12ERR[CNIBAC12E] to be set.
 */
/*@{*/
/*! @brief Set the CNIBAC12E field to a new value. */
#define SDHC_WR_FEVT_CNIBAC12E(base, value) (SDHC_RMW_FEVT(base, SDHC_FEVT_CNIBAC12E_MASK, SDHC_FEVT_CNIBAC12E(value)))
#define SDHC_BWR_FEVT_CNIBAC12E(base, value) (BME_BFI32(&SDHC_FEVT_REG(base), ((uint32_t)(value) << SDHC_FEVT_CNIBAC12E_SHIFT), SDHC_FEVT_CNIBAC12E_SHIFT, SDHC_FEVT_CNIBAC12E_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_FEVT, field CTOE[16] (WORZ)
 *
 * Forces IRQSTAT[CTOE] to be set.
 */
/*@{*/
/*! @brief Set the CTOE field to a new value. */
#define SDHC_WR_FEVT_CTOE(base, value) (SDHC_RMW_FEVT(base, SDHC_FEVT_CTOE_MASK, SDHC_FEVT_CTOE(value)))
#define SDHC_BWR_FEVT_CTOE(base, value) (BME_BFI32(&SDHC_FEVT_REG(base), ((uint32_t)(value) << SDHC_FEVT_CTOE_SHIFT), SDHC_FEVT_CTOE_SHIFT, SDHC_FEVT_CTOE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_FEVT, field CCE[17] (WORZ)
 *
 * Forces IRQSTAT[CCE] to be set.
 */
/*@{*/
/*! @brief Set the CCE field to a new value. */
#define SDHC_WR_FEVT_CCE(base, value) (SDHC_RMW_FEVT(base, SDHC_FEVT_CCE_MASK, SDHC_FEVT_CCE(value)))
#define SDHC_BWR_FEVT_CCE(base, value) (BME_BFI32(&SDHC_FEVT_REG(base), ((uint32_t)(value) << SDHC_FEVT_CCE_SHIFT), SDHC_FEVT_CCE_SHIFT, SDHC_FEVT_CCE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_FEVT, field CEBE[18] (WORZ)
 *
 * Forces IRQSTAT[CEBE] to be set.
 */
/*@{*/
/*! @brief Set the CEBE field to a new value. */
#define SDHC_WR_FEVT_CEBE(base, value) (SDHC_RMW_FEVT(base, SDHC_FEVT_CEBE_MASK, SDHC_FEVT_CEBE(value)))
#define SDHC_BWR_FEVT_CEBE(base, value) (BME_BFI32(&SDHC_FEVT_REG(base), ((uint32_t)(value) << SDHC_FEVT_CEBE_SHIFT), SDHC_FEVT_CEBE_SHIFT, SDHC_FEVT_CEBE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_FEVT, field CIE[19] (WORZ)
 *
 * Forces IRQSTAT[CCE] to be set.
 */
/*@{*/
/*! @brief Set the CIE field to a new value. */
#define SDHC_WR_FEVT_CIE(base, value) (SDHC_RMW_FEVT(base, SDHC_FEVT_CIE_MASK, SDHC_FEVT_CIE(value)))
#define SDHC_BWR_FEVT_CIE(base, value) (BME_BFI32(&SDHC_FEVT_REG(base), ((uint32_t)(value) << SDHC_FEVT_CIE_SHIFT), SDHC_FEVT_CIE_SHIFT, SDHC_FEVT_CIE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_FEVT, field DTOE[20] (WORZ)
 *
 * Forces IRQSTAT[DTOE] to be set.
 */
/*@{*/
/*! @brief Set the DTOE field to a new value. */
#define SDHC_WR_FEVT_DTOE(base, value) (SDHC_RMW_FEVT(base, SDHC_FEVT_DTOE_MASK, SDHC_FEVT_DTOE(value)))
#define SDHC_BWR_FEVT_DTOE(base, value) (BME_BFI32(&SDHC_FEVT_REG(base), ((uint32_t)(value) << SDHC_FEVT_DTOE_SHIFT), SDHC_FEVT_DTOE_SHIFT, SDHC_FEVT_DTOE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_FEVT, field DCE[21] (WORZ)
 *
 * Forces IRQSTAT[DCE] to be set.
 */
/*@{*/
/*! @brief Set the DCE field to a new value. */
#define SDHC_WR_FEVT_DCE(base, value) (SDHC_RMW_FEVT(base, SDHC_FEVT_DCE_MASK, SDHC_FEVT_DCE(value)))
#define SDHC_BWR_FEVT_DCE(base, value) (BME_BFI32(&SDHC_FEVT_REG(base), ((uint32_t)(value) << SDHC_FEVT_DCE_SHIFT), SDHC_FEVT_DCE_SHIFT, SDHC_FEVT_DCE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_FEVT, field DEBE[22] (WORZ)
 *
 * Forces IRQSTAT[DEBE] to be set.
 */
/*@{*/
/*! @brief Set the DEBE field to a new value. */
#define SDHC_WR_FEVT_DEBE(base, value) (SDHC_RMW_FEVT(base, SDHC_FEVT_DEBE_MASK, SDHC_FEVT_DEBE(value)))
#define SDHC_BWR_FEVT_DEBE(base, value) (BME_BFI32(&SDHC_FEVT_REG(base), ((uint32_t)(value) << SDHC_FEVT_DEBE_SHIFT), SDHC_FEVT_DEBE_SHIFT, SDHC_FEVT_DEBE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_FEVT, field AC12E[24] (WORZ)
 *
 * Forces IRQSTAT[AC12E] to be set.
 */
/*@{*/
/*! @brief Set the AC12E field to a new value. */
#define SDHC_WR_FEVT_AC12E(base, value) (SDHC_RMW_FEVT(base, SDHC_FEVT_AC12E_MASK, SDHC_FEVT_AC12E(value)))
#define SDHC_BWR_FEVT_AC12E(base, value) (BME_BFI32(&SDHC_FEVT_REG(base), ((uint32_t)(value) << SDHC_FEVT_AC12E_SHIFT), SDHC_FEVT_AC12E_SHIFT, SDHC_FEVT_AC12E_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_FEVT, field DMAE[28] (WORZ)
 *
 * Forces the DMAE bit of Interrupt Status Register to be set.
 */
/*@{*/
/*! @brief Set the DMAE field to a new value. */
#define SDHC_WR_FEVT_DMAE(base, value) (SDHC_RMW_FEVT(base, SDHC_FEVT_DMAE_MASK, SDHC_FEVT_DMAE(value)))
#define SDHC_BWR_FEVT_DMAE(base, value) (BME_BFI32(&SDHC_FEVT_REG(base), ((uint32_t)(value) << SDHC_FEVT_DMAE_SHIFT), SDHC_FEVT_DMAE_SHIFT, SDHC_FEVT_DMAE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_FEVT, field CINT[31] (WORZ)
 *
 * Writing 1 to this bit generates a short low-level pulse on the internal
 * DAT[1] line, as if a self-clearing interrupt was received from the external card.
 * If enabled, the CINT bit will be set and the interrupt service routine may
 * treat this interrupt as a normal interrupt from the external card.
 */
/*@{*/
/*! @brief Set the CINT field to a new value. */
#define SDHC_WR_FEVT_CINT(base, value) (SDHC_RMW_FEVT(base, SDHC_FEVT_CINT_MASK, SDHC_FEVT_CINT(value)))
#define SDHC_BWR_FEVT_CINT(base, value) (BME_BFI32(&SDHC_FEVT_REG(base), ((uint32_t)(value) << SDHC_FEVT_CINT_SHIFT), SDHC_FEVT_CINT_SHIFT, SDHC_FEVT_CINT_WIDTH))
/*@}*/

/*******************************************************************************
 * SDHC_ADMAES - ADMA Error Status register
 ******************************************************************************/

/*!
 * @brief SDHC_ADMAES - ADMA Error Status register (RO)
 *
 * Reset value: 0x00000000U
 *
 * When an ADMA error interrupt has occurred, the ADMA Error States field in
 * this register holds the ADMA state and the ADMA System Address register holds the
 * address around the error descriptor. For recovering from this error, the host
 * driver requires the ADMA state to identify the error descriptor address as
 * follows: ST_STOP: Previous location set in the ADMA System Address register is
 * the error descriptor address. ST_FDS: Current location set in the ADMA System
 * Address register is the error descriptor address. ST_CADR: This state is never
 * set because it only increments the descriptor pointer and doesn't generate an
 * ADMA error. ST_TFR: Previous location set in the ADMA System Address register
 * is the error descriptor address. In case of a write operation, the host driver
 * must use the ACMD22 to get the number of the written block, rather than using
 * this information, because unwritten data may exist in the host controller.
 * The host controller generates the ADMA error interrupt when it detects invalid
 * descriptor data (valid = 0) in the ST_FDS state. The host driver can
 * distinguish this error by reading the valid bit of the error descriptor. ADMA Error
 * State coding D01-D00 ADMA Error State when error has occurred Contents of ADMA
 * System Address register 00 ST_STOP (Stop DMA) Holds the address of the next
 * executable descriptor command 01 ST_FDS (fetch descriptor) Holds the valid
 * descriptor address 10 ST_CADR (change address) No ADMA error is generated 11 ST_TFR
 * (Transfer Data) Holds the address of the next executable descriptor command
 */
/*!
 * @name Constants and macros for entire SDHC_ADMAES register
 */
/*@{*/
#define SDHC_RD_ADMAES(base)     (SDHC_ADMAES_REG(base))
/*@}*/

/*
 * Constants & macros for individual SDHC_ADMAES bitfields
 */

/*!
 * @name Register SDHC_ADMAES, field ADMAES[1:0] (RO)
 *
 * Indicates the state of the ADMA when an error has occurred during an ADMA
 * data transfer.
 */
/*@{*/
/*! @brief Read current value of the SDHC_ADMAES_ADMAES field. */
#define SDHC_RD_ADMAES_ADMAES(base) ((SDHC_ADMAES_REG(base) & SDHC_ADMAES_ADMAES_MASK) >> SDHC_ADMAES_ADMAES_SHIFT)
#define SDHC_BRD_ADMAES_ADMAES(base) (BME_UBFX32(&SDHC_ADMAES_REG(base), SDHC_ADMAES_ADMAES_SHIFT, SDHC_ADMAES_ADMAES_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_ADMAES, field ADMALME[2] (RO)
 *
 * This error occurs in the following 2 cases: While the block count enable is
 * being set, the total data length specified by the descriptor table is different
 * from that specified by the block count and block length. Total data length
 * can not be divided by the block length.
 *
 * Values:
 * - 0b0 - No error.
 * - 0b1 - Error.
 */
/*@{*/
/*! @brief Read current value of the SDHC_ADMAES_ADMALME field. */
#define SDHC_RD_ADMAES_ADMALME(base) ((SDHC_ADMAES_REG(base) & SDHC_ADMAES_ADMALME_MASK) >> SDHC_ADMAES_ADMALME_SHIFT)
#define SDHC_BRD_ADMAES_ADMALME(base) (BME_UBFX32(&SDHC_ADMAES_REG(base), SDHC_ADMAES_ADMALME_SHIFT, SDHC_ADMAES_ADMALME_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_ADMAES, field ADMADCE[3] (RO)
 *
 * This error occurs when an invalid descriptor is fetched by ADMA.
 *
 * Values:
 * - 0b0 - No error.
 * - 0b1 - Error.
 */
/*@{*/
/*! @brief Read current value of the SDHC_ADMAES_ADMADCE field. */
#define SDHC_RD_ADMAES_ADMADCE(base) ((SDHC_ADMAES_REG(base) & SDHC_ADMAES_ADMADCE_MASK) >> SDHC_ADMAES_ADMADCE_SHIFT)
#define SDHC_BRD_ADMAES_ADMADCE(base) (BME_UBFX32(&SDHC_ADMAES_REG(base), SDHC_ADMAES_ADMADCE_SHIFT, SDHC_ADMAES_ADMADCE_WIDTH))
/*@}*/

/*******************************************************************************
 * SDHC_ADSADDR - ADMA System Addressregister
 ******************************************************************************/

/*!
 * @brief SDHC_ADSADDR - ADMA System Addressregister (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register contains the physical system memory address used for ADMA
 * transfers.
 */
/*!
 * @name Constants and macros for entire SDHC_ADSADDR register
 */
/*@{*/
#define SDHC_RD_ADSADDR(base)    (SDHC_ADSADDR_REG(base))
#define SDHC_WR_ADSADDR(base, value) (SDHC_ADSADDR_REG(base) = (value))
#define SDHC_RMW_ADSADDR(base, mask, value) (SDHC_WR_ADSADDR(base, (SDHC_RD_ADSADDR(base) & ~(mask)) | (value)))
#define SDHC_SET_ADSADDR(base, value) (BME_OR32(&SDHC_ADSADDR_REG(base), (uint32_t)(value)))
#define SDHC_CLR_ADSADDR(base, value) (BME_AND32(&SDHC_ADSADDR_REG(base), (uint32_t)(~(value))))
#define SDHC_TOG_ADSADDR(base, value) (BME_XOR32(&SDHC_ADSADDR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SDHC_ADSADDR bitfields
 */

/*!
 * @name Register SDHC_ADSADDR, field ADSADDR[31:2] (RW)
 *
 * Holds the word address of the executing command in the descriptor table. At
 * the start of ADMA, the host driver shall set the start address of the
 * Descriptor table. The ADMA engine increments this register address whenever fetching a
 * descriptor command. When the ADMA is stopped at the block gap, this register
 * indicates the address of the next executable descriptor command. When the ADMA
 * error interrupt is generated, this register shall hold the valid descriptor
 * address depending on the ADMA state. The lower 2 bits of this register is tied
 * to '0' so the ADMA address is always word-aligned. Because this register
 * supports dynamic address reflecting, when TC bit is set, it automatically alters the
 * value of internal address counter, so SW cannot change this register when TC
 * bit is set.
 */
/*@{*/
/*! @brief Read current value of the SDHC_ADSADDR_ADSADDR field. */
#define SDHC_RD_ADSADDR_ADSADDR(base) ((SDHC_ADSADDR_REG(base) & SDHC_ADSADDR_ADSADDR_MASK) >> SDHC_ADSADDR_ADSADDR_SHIFT)
#define SDHC_BRD_ADSADDR_ADSADDR(base) (SDHC_RD_ADSADDR_ADSADDR(base))

/*! @brief Set the ADSADDR field to a new value. */
#define SDHC_WR_ADSADDR_ADSADDR(base, value) (SDHC_RMW_ADSADDR(base, SDHC_ADSADDR_ADSADDR_MASK, SDHC_ADSADDR_ADSADDR(value)))
#define SDHC_BWR_ADSADDR_ADSADDR(base, value) (SDHC_WR_ADSADDR_ADSADDR(base, value))
/*@}*/

/*******************************************************************************
 * SDHC_VENDOR - Vendor Specific register
 ******************************************************************************/

/*!
 * @brief SDHC_VENDOR - Vendor Specific register (RW)
 *
 * Reset value: 0x00000001U
 *
 * This register contains the vendor-specific control/status register.
 */
/*!
 * @name Constants and macros for entire SDHC_VENDOR register
 */
/*@{*/
#define SDHC_RD_VENDOR(base)     (SDHC_VENDOR_REG(base))
#define SDHC_WR_VENDOR(base, value) (SDHC_VENDOR_REG(base) = (value))
#define SDHC_RMW_VENDOR(base, mask, value) (SDHC_WR_VENDOR(base, (SDHC_RD_VENDOR(base) & ~(mask)) | (value)))
#define SDHC_SET_VENDOR(base, value) (BME_OR32(&SDHC_VENDOR_REG(base), (uint32_t)(value)))
#define SDHC_CLR_VENDOR(base, value) (BME_AND32(&SDHC_VENDOR_REG(base), (uint32_t)(~(value))))
#define SDHC_TOG_VENDOR(base, value) (BME_XOR32(&SDHC_VENDOR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SDHC_VENDOR bitfields
 */

/*!
 * @name Register SDHC_VENDOR, field EXBLKNU[1] (RW)
 *
 * This bit must be set before S/W issues CMD53 multi-block read with exact
 * block number. This bit must not be set if the CMD53 multi-block read is not exact
 * block number.
 *
 * Values:
 * - 0b0 - None exact block read.
 * - 0b1 - Exact block read for SDIO CMD53.
 */
/*@{*/
/*! @brief Read current value of the SDHC_VENDOR_EXBLKNU field. */
#define SDHC_RD_VENDOR_EXBLKNU(base) ((SDHC_VENDOR_REG(base) & SDHC_VENDOR_EXBLKNU_MASK) >> SDHC_VENDOR_EXBLKNU_SHIFT)
#define SDHC_BRD_VENDOR_EXBLKNU(base) (BME_UBFX32(&SDHC_VENDOR_REG(base), SDHC_VENDOR_EXBLKNU_SHIFT, SDHC_VENDOR_EXBLKNU_WIDTH))

/*! @brief Set the EXBLKNU field to a new value. */
#define SDHC_WR_VENDOR_EXBLKNU(base, value) (SDHC_RMW_VENDOR(base, SDHC_VENDOR_EXBLKNU_MASK, SDHC_VENDOR_EXBLKNU(value)))
#define SDHC_BWR_VENDOR_EXBLKNU(base, value) (BME_BFI32(&SDHC_VENDOR_REG(base), ((uint32_t)(value) << SDHC_VENDOR_EXBLKNU_SHIFT), SDHC_VENDOR_EXBLKNU_SHIFT, SDHC_VENDOR_EXBLKNU_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_VENDOR, field INTSTVAL[23:16] (RO)
 *
 * Internal state value, reflecting the corresponding state value selected by
 * Debug Select field. This field is read-only and write to this field does not
 * have effect.
 */
/*@{*/
/*! @brief Read current value of the SDHC_VENDOR_INTSTVAL field. */
#define SDHC_RD_VENDOR_INTSTVAL(base) ((SDHC_VENDOR_REG(base) & SDHC_VENDOR_INTSTVAL_MASK) >> SDHC_VENDOR_INTSTVAL_SHIFT)
#define SDHC_BRD_VENDOR_INTSTVAL(base) (BME_UBFX32(&SDHC_VENDOR_REG(base), SDHC_VENDOR_INTSTVAL_SHIFT, SDHC_VENDOR_INTSTVAL_WIDTH))
/*@}*/

/*******************************************************************************
 * SDHC_MMCBOOT - MMC Boot register
 ******************************************************************************/

/*!
 * @brief SDHC_MMCBOOT - MMC Boot register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register contains the MMC fast boot control register.
 */
/*!
 * @name Constants and macros for entire SDHC_MMCBOOT register
 */
/*@{*/
#define SDHC_RD_MMCBOOT(base)    (SDHC_MMCBOOT_REG(base))
#define SDHC_WR_MMCBOOT(base, value) (SDHC_MMCBOOT_REG(base) = (value))
#define SDHC_RMW_MMCBOOT(base, mask, value) (SDHC_WR_MMCBOOT(base, (SDHC_RD_MMCBOOT(base) & ~(mask)) | (value)))
#define SDHC_SET_MMCBOOT(base, value) (BME_OR32(&SDHC_MMCBOOT_REG(base), (uint32_t)(value)))
#define SDHC_CLR_MMCBOOT(base, value) (BME_AND32(&SDHC_MMCBOOT_REG(base), (uint32_t)(~(value))))
#define SDHC_TOG_MMCBOOT(base, value) (BME_XOR32(&SDHC_MMCBOOT_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SDHC_MMCBOOT bitfields
 */

/*!
 * @name Register SDHC_MMCBOOT, field DTOCVACK[3:0] (RW)
 *
 * Values:
 * - 0b0000 - SDCLK x 2^8
 * - 0b0001 - SDCLK x 2^9
 * - 0b0010 - SDCLK x 2^10
 * - 0b0011 - SDCLK x 2^11
 * - 0b0100 - SDCLK x 2^12
 * - 0b0101 - SDCLK x 2^13
 * - 0b0110 - SDCLK x 2^14
 * - 0b0111 - SDCLK x 2^15
 * - 0b1110 - SDCLK x 2^22
 * - 0b1111 - Reserved
 */
/*@{*/
/*! @brief Read current value of the SDHC_MMCBOOT_DTOCVACK field. */
#define SDHC_RD_MMCBOOT_DTOCVACK(base) ((SDHC_MMCBOOT_REG(base) & SDHC_MMCBOOT_DTOCVACK_MASK) >> SDHC_MMCBOOT_DTOCVACK_SHIFT)
#define SDHC_BRD_MMCBOOT_DTOCVACK(base) (BME_UBFX32(&SDHC_MMCBOOT_REG(base), SDHC_MMCBOOT_DTOCVACK_SHIFT, SDHC_MMCBOOT_DTOCVACK_WIDTH))

/*! @brief Set the DTOCVACK field to a new value. */
#define SDHC_WR_MMCBOOT_DTOCVACK(base, value) (SDHC_RMW_MMCBOOT(base, SDHC_MMCBOOT_DTOCVACK_MASK, SDHC_MMCBOOT_DTOCVACK(value)))
#define SDHC_BWR_MMCBOOT_DTOCVACK(base, value) (BME_BFI32(&SDHC_MMCBOOT_REG(base), ((uint32_t)(value) << SDHC_MMCBOOT_DTOCVACK_SHIFT), SDHC_MMCBOOT_DTOCVACK_SHIFT, SDHC_MMCBOOT_DTOCVACK_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_MMCBOOT, field BOOTACK[4] (RW)
 *
 * Values:
 * - 0b0 - No ack.
 * - 0b1 - Ack.
 */
/*@{*/
/*! @brief Read current value of the SDHC_MMCBOOT_BOOTACK field. */
#define SDHC_RD_MMCBOOT_BOOTACK(base) ((SDHC_MMCBOOT_REG(base) & SDHC_MMCBOOT_BOOTACK_MASK) >> SDHC_MMCBOOT_BOOTACK_SHIFT)
#define SDHC_BRD_MMCBOOT_BOOTACK(base) (BME_UBFX32(&SDHC_MMCBOOT_REG(base), SDHC_MMCBOOT_BOOTACK_SHIFT, SDHC_MMCBOOT_BOOTACK_WIDTH))

/*! @brief Set the BOOTACK field to a new value. */
#define SDHC_WR_MMCBOOT_BOOTACK(base, value) (SDHC_RMW_MMCBOOT(base, SDHC_MMCBOOT_BOOTACK_MASK, SDHC_MMCBOOT_BOOTACK(value)))
#define SDHC_BWR_MMCBOOT_BOOTACK(base, value) (BME_BFI32(&SDHC_MMCBOOT_REG(base), ((uint32_t)(value) << SDHC_MMCBOOT_BOOTACK_SHIFT), SDHC_MMCBOOT_BOOTACK_SHIFT, SDHC_MMCBOOT_BOOTACK_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_MMCBOOT, field BOOTMODE[5] (RW)
 *
 * Values:
 * - 0b0 - Normal boot.
 * - 0b1 - Alternative boot.
 */
/*@{*/
/*! @brief Read current value of the SDHC_MMCBOOT_BOOTMODE field. */
#define SDHC_RD_MMCBOOT_BOOTMODE(base) ((SDHC_MMCBOOT_REG(base) & SDHC_MMCBOOT_BOOTMODE_MASK) >> SDHC_MMCBOOT_BOOTMODE_SHIFT)
#define SDHC_BRD_MMCBOOT_BOOTMODE(base) (BME_UBFX32(&SDHC_MMCBOOT_REG(base), SDHC_MMCBOOT_BOOTMODE_SHIFT, SDHC_MMCBOOT_BOOTMODE_WIDTH))

/*! @brief Set the BOOTMODE field to a new value. */
#define SDHC_WR_MMCBOOT_BOOTMODE(base, value) (SDHC_RMW_MMCBOOT(base, SDHC_MMCBOOT_BOOTMODE_MASK, SDHC_MMCBOOT_BOOTMODE(value)))
#define SDHC_BWR_MMCBOOT_BOOTMODE(base, value) (BME_BFI32(&SDHC_MMCBOOT_REG(base), ((uint32_t)(value) << SDHC_MMCBOOT_BOOTMODE_SHIFT), SDHC_MMCBOOT_BOOTMODE_SHIFT, SDHC_MMCBOOT_BOOTMODE_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_MMCBOOT, field BOOTEN[6] (RW)
 *
 * Values:
 * - 0b0 - Fast boot disable.
 * - 0b1 - Fast boot enable.
 */
/*@{*/
/*! @brief Read current value of the SDHC_MMCBOOT_BOOTEN field. */
#define SDHC_RD_MMCBOOT_BOOTEN(base) ((SDHC_MMCBOOT_REG(base) & SDHC_MMCBOOT_BOOTEN_MASK) >> SDHC_MMCBOOT_BOOTEN_SHIFT)
#define SDHC_BRD_MMCBOOT_BOOTEN(base) (BME_UBFX32(&SDHC_MMCBOOT_REG(base), SDHC_MMCBOOT_BOOTEN_SHIFT, SDHC_MMCBOOT_BOOTEN_WIDTH))

/*! @brief Set the BOOTEN field to a new value. */
#define SDHC_WR_MMCBOOT_BOOTEN(base, value) (SDHC_RMW_MMCBOOT(base, SDHC_MMCBOOT_BOOTEN_MASK, SDHC_MMCBOOT_BOOTEN(value)))
#define SDHC_BWR_MMCBOOT_BOOTEN(base, value) (BME_BFI32(&SDHC_MMCBOOT_REG(base), ((uint32_t)(value) << SDHC_MMCBOOT_BOOTEN_SHIFT), SDHC_MMCBOOT_BOOTEN_SHIFT, SDHC_MMCBOOT_BOOTEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_MMCBOOT, field AUTOSABGEN[7] (RW)
 *
 * When boot, enable auto stop at block gap function. This function will be
 * triggered, and host will stop at block gap when received card block cnt is equal
 * to BOOTBLKCNT.
 */
/*@{*/
/*! @brief Read current value of the SDHC_MMCBOOT_AUTOSABGEN field. */
#define SDHC_RD_MMCBOOT_AUTOSABGEN(base) ((SDHC_MMCBOOT_REG(base) & SDHC_MMCBOOT_AUTOSABGEN_MASK) >> SDHC_MMCBOOT_AUTOSABGEN_SHIFT)
#define SDHC_BRD_MMCBOOT_AUTOSABGEN(base) (BME_UBFX32(&SDHC_MMCBOOT_REG(base), SDHC_MMCBOOT_AUTOSABGEN_SHIFT, SDHC_MMCBOOT_AUTOSABGEN_WIDTH))

/*! @brief Set the AUTOSABGEN field to a new value. */
#define SDHC_WR_MMCBOOT_AUTOSABGEN(base, value) (SDHC_RMW_MMCBOOT(base, SDHC_MMCBOOT_AUTOSABGEN_MASK, SDHC_MMCBOOT_AUTOSABGEN(value)))
#define SDHC_BWR_MMCBOOT_AUTOSABGEN(base, value) (BME_BFI32(&SDHC_MMCBOOT_REG(base), ((uint32_t)(value) << SDHC_MMCBOOT_AUTOSABGEN_SHIFT), SDHC_MMCBOOT_AUTOSABGEN_SHIFT, SDHC_MMCBOOT_AUTOSABGEN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_MMCBOOT, field BOOTBLKCNT[31:16] (RW)
 *
 * Defines the stop at block gap value of automatic mode. When received card
 * block cnt is equal to BOOTBLKCNT and AUTOSABGEN is 1, then stop at block gap.
 */
/*@{*/
/*! @brief Read current value of the SDHC_MMCBOOT_BOOTBLKCNT field. */
#define SDHC_RD_MMCBOOT_BOOTBLKCNT(base) ((SDHC_MMCBOOT_REG(base) & SDHC_MMCBOOT_BOOTBLKCNT_MASK) >> SDHC_MMCBOOT_BOOTBLKCNT_SHIFT)
#define SDHC_BRD_MMCBOOT_BOOTBLKCNT(base) (SDHC_RD_MMCBOOT_BOOTBLKCNT(base))

/*! @brief Set the BOOTBLKCNT field to a new value. */
#define SDHC_WR_MMCBOOT_BOOTBLKCNT(base, value) (SDHC_RMW_MMCBOOT(base, SDHC_MMCBOOT_BOOTBLKCNT_MASK, SDHC_MMCBOOT_BOOTBLKCNT(value)))
#define SDHC_BWR_MMCBOOT_BOOTBLKCNT(base, value) (SDHC_WR_MMCBOOT_BOOTBLKCNT(base, value))
/*@}*/

/*******************************************************************************
 * SDHC_HOSTVER - Host Controller Version
 ******************************************************************************/

/*!
 * @brief SDHC_HOSTVER - Host Controller Version (RO)
 *
 * Reset value: 0x00001201U
 *
 * This register contains the vendor host controller version information. All
 * bits are read only and will read the same as the power-reset value.
 */
/*!
 * @name Constants and macros for entire SDHC_HOSTVER register
 */
/*@{*/
#define SDHC_RD_HOSTVER(base)    (SDHC_HOSTVER_REG(base))
/*@}*/

/*
 * Constants & macros for individual SDHC_HOSTVER bitfields
 */

/*!
 * @name Register SDHC_HOSTVER, field SVN[7:0] (RO)
 *
 * These status bits indicate the host controller specification version.
 *
 * Values:
 * - 0b00000001 - SD host specification version 2.0, supports test event
 *     register and ADMA.
 */
/*@{*/
/*! @brief Read current value of the SDHC_HOSTVER_SVN field. */
#define SDHC_RD_HOSTVER_SVN(base) ((SDHC_HOSTVER_REG(base) & SDHC_HOSTVER_SVN_MASK) >> SDHC_HOSTVER_SVN_SHIFT)
#define SDHC_BRD_HOSTVER_SVN(base) (BME_UBFX32(&SDHC_HOSTVER_REG(base), SDHC_HOSTVER_SVN_SHIFT, SDHC_HOSTVER_SVN_WIDTH))
/*@}*/

/*!
 * @name Register SDHC_HOSTVER, field VVN[15:8] (RO)
 *
 * These status bits are reserved for the vendor version number. The host driver
 * shall not use this status.
 *
 * Values:
 * - 0b00000000 - Freescale SDHC version 1.0
 * - 0b00010000 - Freescale SDHC version 2.0
 * - 0b00010001 - Freescale SDHC version 2.1
 * - 0b00010010 - Freescale SDHC version 2.2
 */
/*@{*/
/*! @brief Read current value of the SDHC_HOSTVER_VVN field. */
#define SDHC_RD_HOSTVER_VVN(base) ((SDHC_HOSTVER_REG(base) & SDHC_HOSTVER_VVN_MASK) >> SDHC_HOSTVER_VVN_SHIFT)
#define SDHC_BRD_HOSTVER_VVN(base) (BME_UBFX32(&SDHC_HOSTVER_REG(base), SDHC_HOSTVER_VVN_SHIFT, SDHC_HOSTVER_VVN_WIDTH))
/*@}*/

/*
 * MK82F25615 SDRAM
 *
 * Synchronous DRAM Controller
 *
 * Registers defined in this header file:
 * - SDRAM_CTRL - Control Register
 * - SDRAM_AC - Address and Control Register
 * - SDRAM_CM - Control Mask
 */

#define SDRAM_INSTANCE_COUNT (1U) /*!< Number of instances of the SDRAM module. */
#define SDRAM_IDX (0U) /*!< Instance number for SDRAM. */

/*******************************************************************************
 * SDRAM_CTRL - Control Register
 ******************************************************************************/

/*!
 * @brief SDRAM_CTRL - Control Register (RW)
 *
 * Reset value: 0x0000U
 *
 * SDRAM_CTRL register controls refresh logic
 */
/*!
 * @name Constants and macros for entire SDRAM_CTRL register
 */
/*@{*/
#define SDRAM_RD_CTRL(base)      (SDRAM_CTRL_REG(base))
#define SDRAM_WR_CTRL(base, value) (SDRAM_CTRL_REG(base) = (value))
#define SDRAM_RMW_CTRL(base, mask, value) (SDRAM_WR_CTRL(base, (SDRAM_RD_CTRL(base) & ~(mask)) | (value)))
#define SDRAM_SET_CTRL(base, value) (BME_OR16(&SDRAM_CTRL_REG(base), (uint16_t)(value)))
#define SDRAM_CLR_CTRL(base, value) (BME_AND16(&SDRAM_CTRL_REG(base), (uint16_t)(~(value))))
#define SDRAM_TOG_CTRL(base, value) (BME_XOR16(&SDRAM_CTRL_REG(base), (uint16_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SDRAM_CTRL bitfields
 */

/*!
 * @name Register SDRAM_CTRL, field RC[8:0] (RW)
 *
 * Controls refresh frequency. The number of bus clocks between refresh cycles
 * is (RC + 1) x 16. Refresh can range from 16-8192 bus clocks to accommodate both
 * standard and low-power SDRAMs with bus clock operation from less than 2 MHz
 * to greater than 50 MHz. The following example calculates RC for an auto-refresh
 * period for 4096 rows to receive 64 ms of refresh every 15.625 us for each row
 * (1031 bus clocks at 66 MHz). # of bus clocks = 1031 = (RC field + 1) x 16; RC
 * = (1031 bus clocks/16) -1 = 63.44, which rounds to 63; therefore, RC = 0x3F.
 */
/*@{*/
/*! @brief Read current value of the SDRAM_CTRL_RC field. */
#define SDRAM_RD_CTRL_RC(base) ((SDRAM_CTRL_REG(base) & SDRAM_CTRL_RC_MASK) >> SDRAM_CTRL_RC_SHIFT)
#define SDRAM_BRD_CTRL_RC(base) (SDRAM_RD_CTRL_RC(base))

/*! @brief Set the RC field to a new value. */
#define SDRAM_WR_CTRL_RC(base, value) (SDRAM_RMW_CTRL(base, SDRAM_CTRL_RC_MASK, SDRAM_CTRL_RC(value)))
#define SDRAM_BWR_CTRL_RC(base, value) (SDRAM_WR_CTRL_RC(base, value))
/*@}*/

/*!
 * @name Register SDRAM_CTRL, field RTIM[10:9] (RW)
 *
 * Determines the timing operation of auto-refresh in the SDRAM controller.
 * Specifically, it determines the number of bus clocks inserted between a ref
 * command and the next possible actv command. This same timing is used for both memory
 * blocks controlled by the SDRAM controller. This corresponds to tRC in the
 * SDRAM specifications
 *
 * Values:
 * - 0b00 - 3 clocks
 * - 0b01 - 6 clocks
 * - 0b10 - 9 clocks
 * - 0b11 - 9 clocks
 */
/*@{*/
/*! @brief Read current value of the SDRAM_CTRL_RTIM field. */
#define SDRAM_RD_CTRL_RTIM(base) ((SDRAM_CTRL_REG(base) & SDRAM_CTRL_RTIM_MASK) >> SDRAM_CTRL_RTIM_SHIFT)
#define SDRAM_BRD_CTRL_RTIM(base) (BME_UBFX16(&SDRAM_CTRL_REG(base), SDRAM_CTRL_RTIM_SHIFT, SDRAM_CTRL_RTIM_WIDTH))

/*! @brief Set the RTIM field to a new value. */
#define SDRAM_WR_CTRL_RTIM(base, value) (SDRAM_RMW_CTRL(base, SDRAM_CTRL_RTIM_MASK, SDRAM_CTRL_RTIM(value)))
#define SDRAM_BWR_CTRL_RTIM(base, value) (BME_BFI16(&SDRAM_CTRL_REG(base), ((uint16_t)(value) << SDRAM_CTRL_RTIM_SHIFT), SDRAM_CTRL_RTIM_SHIFT, SDRAM_CTRL_RTIM_WIDTH))
/*@}*/

/*!
 * @name Register SDRAM_CTRL, field IS[11] (RW)
 *
 * Initiate self-refresh command.
 *
 * Values:
 * - 0b0 - Take no action or issue a selfx command to exit self refresh.
 * - 0b1 - SDRAM controller sends a self command to both SDRAM blocks to put
 *     them in low-power, self-refresh state where they remain until IS is cleared.
 *     When IS is cleared, the controller sends a selfx command for the SDRAMs to
 *     exit self-refresh. The refresh counter is suspended while the SDRAMs are
 *     in self-refresh; the SDRAM controls the refresh period.
 */
/*@{*/
/*! @brief Read current value of the SDRAM_CTRL_IS field. */
#define SDRAM_RD_CTRL_IS(base) ((SDRAM_CTRL_REG(base) & SDRAM_CTRL_IS_MASK) >> SDRAM_CTRL_IS_SHIFT)
#define SDRAM_BRD_CTRL_IS(base) (BME_UBFX16(&SDRAM_CTRL_REG(base), SDRAM_CTRL_IS_SHIFT, SDRAM_CTRL_IS_WIDTH))

/*! @brief Set the IS field to a new value. */
#define SDRAM_WR_CTRL_IS(base, value) (SDRAM_RMW_CTRL(base, SDRAM_CTRL_IS_MASK, SDRAM_CTRL_IS(value)))
#define SDRAM_BWR_CTRL_IS(base, value) (BME_BFI16(&SDRAM_CTRL_REG(base), ((uint16_t)(value) << SDRAM_CTRL_IS_SHIFT), SDRAM_CTRL_IS_SHIFT, SDRAM_CTRL_IS_WIDTH))
/*@}*/

/*******************************************************************************
 * SDRAM_AC - Address and Control Register
 ******************************************************************************/

/*!
 * @brief SDRAM_AC - Address and Control Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The SDRAM_ACn registers, contain the base address compare value and the
 * control bits for memory blocks 0 and 1 of the SDRAM controller. Address and timing
 * are also controlled by bits in SDRAM_ACn.
 */
/*!
 * @name Constants and macros for entire SDRAM_AC register
 */
/*@{*/
#define SDRAM_RD_AC(base, index) (SDRAM_AC_REG(base, index))
#define SDRAM_WR_AC(base, index, value) (SDRAM_AC_REG(base, index) = (value))
#define SDRAM_RMW_AC(base, index, mask, value) (SDRAM_WR_AC(base, index, (SDRAM_RD_AC(base, index) & ~(mask)) | (value)))
#define SDRAM_SET_AC(base, index, value) (BME_OR32(&SDRAM_AC_REG(base, index), (uint32_t)(value)))
#define SDRAM_CLR_AC(base, index, value) (BME_AND32(&SDRAM_AC_REG(base, index), (uint32_t)(~(value))))
#define SDRAM_TOG_AC(base, index, value) (BME_XOR32(&SDRAM_AC_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SDRAM_AC bitfields
 */

/*!
 * @name Register SDRAM_AC, field IP[3] (RW)
 *
 * The DRAM controller clears IP after the pall command is finished. Accesses
 * via IP should be no wider than the port size programmed in PS.
 *
 * Values:
 * - 0b0 - Take no action.
 * - 0b1 - A pall command is sent to the associated SDRAM block. During
 *     initialization, this command is executed after all DRAM controller registers are
 *     programmed. After IP is set, the next write to an appropriate SDRAM address
 *     generates the pall command to the SDRAM block.
 */
/*@{*/
/*! @brief Read current value of the SDRAM_AC_IP field. */
#define SDRAM_RD_AC_IP(base, index) ((SDRAM_AC_REG(base, index) & SDRAM_AC_IP_MASK) >> SDRAM_AC_IP_SHIFT)
#define SDRAM_BRD_AC_IP(base, index) (BME_UBFX32(&SDRAM_AC_REG(base, index), SDRAM_AC_IP_SHIFT, SDRAM_AC_IP_WIDTH))

/*! @brief Set the IP field to a new value. */
#define SDRAM_WR_AC_IP(base, index, value) (SDRAM_RMW_AC(base, index, SDRAM_AC_IP_MASK, SDRAM_AC_IP(value)))
#define SDRAM_BWR_AC_IP(base, index, value) (BME_BFI32(&SDRAM_AC_REG(base, index), ((uint32_t)(value) << SDRAM_AC_IP_SHIFT), SDRAM_AC_IP_SHIFT, SDRAM_AC_IP_WIDTH))
/*@}*/

/*!
 * @name Register SDRAM_AC, field PS[5:4] (RW)
 *
 * Indicates the port size of the associated block of SDRAM, which allows for
 * dynamic sizing of associated SDRAM accesses. PS functions the same in
 * asynchronous operation.
 *
 * Values:
 * - 0b00 - 32-bit port
 * - 0b01 - 8-bit port
 * - 0b10 - 16-bit port
 * - 0b11 - 16-bit port
 */
/*@{*/
/*! @brief Read current value of the SDRAM_AC_PS field. */
#define SDRAM_RD_AC_PS(base, index) ((SDRAM_AC_REG(base, index) & SDRAM_AC_PS_MASK) >> SDRAM_AC_PS_SHIFT)
#define SDRAM_BRD_AC_PS(base, index) (BME_UBFX32(&SDRAM_AC_REG(base, index), SDRAM_AC_PS_SHIFT, SDRAM_AC_PS_WIDTH))

/*! @brief Set the PS field to a new value. */
#define SDRAM_WR_AC_PS(base, index, value) (SDRAM_RMW_AC(base, index, SDRAM_AC_PS_MASK, SDRAM_AC_PS(value)))
#define SDRAM_BWR_AC_PS(base, index, value) (BME_BFI32(&SDRAM_AC_REG(base, index), ((uint32_t)(value) << SDRAM_AC_PS_SHIFT), SDRAM_AC_PS_SHIFT, SDRAM_AC_PS_WIDTH))
/*@}*/

/*!
 * @name Register SDRAM_AC, field IMRS[6] (RW)
 *
 * Setting IMRS generates a mrs command to the associated SDRAMs. In
 * initialization, IMRS should be set only after all DRAM controller registers are
 * initialized and pall and refresh commands have been issued. After IMRS is set, the next
 * access to an SDRAM block programs the SDRAM's mode register. Thus, the
 * address of the access should be programmed to place the correct mode information on
 * the SDRAM address pins. Because the SDRAM does not register this information,
 * it doesn't matter if the IMRS access is a read or a write or what, if any,
 * data is put onto the data bus. The DRAM controller clears IMRS after the mrs
 * command finishes.
 *
 * Values:
 * - 0b0 - Take no action
 * - 0b1 - Initiate mrs command
 */
/*@{*/
/*! @brief Read current value of the SDRAM_AC_IMRS field. */
#define SDRAM_RD_AC_IMRS(base, index) ((SDRAM_AC_REG(base, index) & SDRAM_AC_IMRS_MASK) >> SDRAM_AC_IMRS_SHIFT)
#define SDRAM_BRD_AC_IMRS(base, index) (BME_UBFX32(&SDRAM_AC_REG(base, index), SDRAM_AC_IMRS_SHIFT, SDRAM_AC_IMRS_WIDTH))

/*! @brief Set the IMRS field to a new value. */
#define SDRAM_WR_AC_IMRS(base, index, value) (SDRAM_RMW_AC(base, index, SDRAM_AC_IMRS_MASK, SDRAM_AC_IMRS(value)))
#define SDRAM_BWR_AC_IMRS(base, index, value) (BME_BFI32(&SDRAM_AC_REG(base, index), ((uint32_t)(value) << SDRAM_AC_IMRS_SHIFT), SDRAM_AC_IMRS_SHIFT, SDRAM_AC_IMRS_WIDTH))
/*@}*/

/*!
 * @name Register SDRAM_AC, field CBM[10:8] (RW)
 *
 * Because different SDRAM configurations cause the command lines on the memory
 * to correspond to a different address, the location of command bit is
 * programmable. CB determines the address onto which the command bit are multiplexed. It
 * is important to set CB according to the location of the command bit. Command
 * Command Bit Notes 000 17 Not possible for 8-bit port 001 18 010 19 011 20 100
 * 21 101 22 110 23 111 24 Not supported This encoding and the address
 * multiplexing scheme handle common SDRAM organizations.
 */
/*@{*/
/*! @brief Read current value of the SDRAM_AC_CBM field. */
#define SDRAM_RD_AC_CBM(base, index) ((SDRAM_AC_REG(base, index) & SDRAM_AC_CBM_MASK) >> SDRAM_AC_CBM_SHIFT)
#define SDRAM_BRD_AC_CBM(base, index) (BME_UBFX32(&SDRAM_AC_REG(base, index), SDRAM_AC_CBM_SHIFT, SDRAM_AC_CBM_WIDTH))

/*! @brief Set the CBM field to a new value. */
#define SDRAM_WR_AC_CBM(base, index, value) (SDRAM_RMW_AC(base, index, SDRAM_AC_CBM_MASK, SDRAM_AC_CBM(value)))
#define SDRAM_BWR_AC_CBM(base, index, value) (BME_BFI32(&SDRAM_AC_REG(base, index), ((uint32_t)(value) << SDRAM_AC_CBM_SHIFT), SDRAM_AC_CBM_SHIFT, SDRAM_AC_CBM_WIDTH))
/*@}*/

/*!
 * @name Register SDRAM_AC, field CASL[13:12] (RW)
 *
 * Affects the following SDRAM timing specifications. Timing nomenclature varies
 * with manufacturers. Refer to the SDRAM specification for the appropriate
 * timing nomenclature: Parameter Number of Bus Clocks CASL=00 CASL=01 CASL=10
 * CASL=11 trcd-SRAS assertion to SCAS assertion 1 2 3 3 tcasl-SCAS assertion to data
 * out 1 2 3 3 tras-actv command to precharge command 2 4 6 6 trp-Precharge
 * command to actv command 1 2 3 3 trwl,trdl-Last data input to precharge command 1 1 1
 * 1 tep-Last data out to precharge command 1 1 1 1
 */
/*@{*/
/*! @brief Read current value of the SDRAM_AC_CASL field. */
#define SDRAM_RD_AC_CASL(base, index) ((SDRAM_AC_REG(base, index) & SDRAM_AC_CASL_MASK) >> SDRAM_AC_CASL_SHIFT)
#define SDRAM_BRD_AC_CASL(base, index) (BME_UBFX32(&SDRAM_AC_REG(base, index), SDRAM_AC_CASL_SHIFT, SDRAM_AC_CASL_WIDTH))

/*! @brief Set the CASL field to a new value. */
#define SDRAM_WR_AC_CASL(base, index, value) (SDRAM_RMW_AC(base, index, SDRAM_AC_CASL_MASK, SDRAM_AC_CASL(value)))
#define SDRAM_BWR_AC_CASL(base, index, value) (BME_BFI32(&SDRAM_AC_REG(base, index), ((uint32_t)(value) << SDRAM_AC_CASL_SHIFT), SDRAM_AC_CASL_SHIFT, SDRAM_AC_CASL_WIDTH))
/*@}*/

/*!
 * @name Register SDRAM_AC, field RE[15] (RW)
 *
 * Determines when the DRAM controller generates a refresh cycle to the DRAM
 * block.
 *
 * Values:
 * - 0b0 - Do not refresh associated DRAM block
 * - 0b1 - Refresh associated DRAM block
 */
/*@{*/
/*! @brief Read current value of the SDRAM_AC_RE field. */
#define SDRAM_RD_AC_RE(base, index) ((SDRAM_AC_REG(base, index) & SDRAM_AC_RE_MASK) >> SDRAM_AC_RE_SHIFT)
#define SDRAM_BRD_AC_RE(base, index) (BME_UBFX32(&SDRAM_AC_REG(base, index), SDRAM_AC_RE_SHIFT, SDRAM_AC_RE_WIDTH))

/*! @brief Set the RE field to a new value. */
#define SDRAM_WR_AC_RE(base, index, value) (SDRAM_RMW_AC(base, index, SDRAM_AC_RE_MASK, SDRAM_AC_RE(value)))
#define SDRAM_BWR_AC_RE(base, index, value) (BME_BFI32(&SDRAM_AC_REG(base, index), ((uint32_t)(value) << SDRAM_AC_RE_SHIFT), SDRAM_AC_RE_SHIFT, SDRAM_AC_RE_WIDTH))
/*@}*/

/*!
 * @name Register SDRAM_AC, field BA[31:18] (RW)
 *
 * With SDRAM_CM[BAM], determines the address range in which the associated DRAM
 * block is located. Each BA bit is compared with the corresponding address of
 * the current bus cycle. If all unmasked bits match, the address hits in the
 * associated DRAM block. BA functions the same as in asynchronous operation.
 */
/*@{*/
/*! @brief Read current value of the SDRAM_AC_BA field. */
#define SDRAM_RD_AC_BA(base, index) ((SDRAM_AC_REG(base, index) & SDRAM_AC_BA_MASK) >> SDRAM_AC_BA_SHIFT)
#define SDRAM_BRD_AC_BA(base, index) (SDRAM_RD_AC_BA(base, index))

/*! @brief Set the BA field to a new value. */
#define SDRAM_WR_AC_BA(base, index, value) (SDRAM_RMW_AC(base, index, SDRAM_AC_BA_MASK, SDRAM_AC_BA(value)))
#define SDRAM_BWR_AC_BA(base, index, value) (SDRAM_WR_AC_BA(base, index, value))
/*@}*/

/*******************************************************************************
 * SDRAM_CM - Control Mask
 ******************************************************************************/

/*!
 * @brief SDRAM_CM - Control Mask (RW)
 *
 * Reset value: 0x00000000U
 *
 * The SDRAM_CMn, includes mask bits for the base address and for address
 * attributes
 */
/*!
 * @name Constants and macros for entire SDRAM_CM register
 */
/*@{*/
#define SDRAM_RD_CM(base, index) (SDRAM_CM_REG(base, index))
#define SDRAM_WR_CM(base, index, value) (SDRAM_CM_REG(base, index) = (value))
#define SDRAM_RMW_CM(base, index, mask, value) (SDRAM_WR_CM(base, index, (SDRAM_RD_CM(base, index) & ~(mask)) | (value)))
#define SDRAM_SET_CM(base, index, value) (BME_OR32(&SDRAM_CM_REG(base, index), (uint32_t)(value)))
#define SDRAM_CLR_CM(base, index, value) (BME_AND32(&SDRAM_CM_REG(base, index), (uint32_t)(~(value))))
#define SDRAM_TOG_CM(base, index, value) (BME_XOR32(&SDRAM_CM_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SDRAM_CM bitfields
 */

/*!
 * @name Register SDRAM_CM, field V[0] (RW)
 *
 * Cleared at reset to ensure that the DRAM block is not erroneously decoded
 *
 * Values:
 * - 0b0 - Do not decode DRAM accesses.
 * - 0b1 - Registers controlling the DRAM block are initialized; DRAM accesses
 *     can be decoded
 */
/*@{*/
/*! @brief Read current value of the SDRAM_CM_V field. */
#define SDRAM_RD_CM_V(base, index) ((SDRAM_CM_REG(base, index) & SDRAM_CM_V_MASK) >> SDRAM_CM_V_SHIFT)
#define SDRAM_BRD_CM_V(base, index) (BME_UBFX32(&SDRAM_CM_REG(base, index), SDRAM_CM_V_SHIFT, SDRAM_CM_V_WIDTH))

/*! @brief Set the V field to a new value. */
#define SDRAM_WR_CM_V(base, index, value) (SDRAM_RMW_CM(base, index, SDRAM_CM_V_MASK, SDRAM_CM_V(value)))
#define SDRAM_BWR_CM_V(base, index, value) (BME_BFI32(&SDRAM_CM_REG(base, index), ((uint32_t)(value) << SDRAM_CM_V_SHIFT), SDRAM_CM_V_SHIFT, SDRAM_CM_V_WIDTH))
/*@}*/

/*!
 * @name Register SDRAM_CM, field WP[8] (RW)
 *
 * Determines whether the associated block of DRAM is write protected.
 *
 * Values:
 * - 0b0 - Allow write accesses
 * - 0b1 - Ignore write accesses. The DRAM controller ignores write accesses to
 *     the memory block and an address exception occurs. Write accesses to a
 *     write-protected DRAM region are compared in the chip select module for a hit.
 *     If no hit occurs, an external bus cycle is generated. If this external bus
 *     cycle is not acknowledged, an access exception occurs.
 */
/*@{*/
/*! @brief Read current value of the SDRAM_CM_WP field. */
#define SDRAM_RD_CM_WP(base, index) ((SDRAM_CM_REG(base, index) & SDRAM_CM_WP_MASK) >> SDRAM_CM_WP_SHIFT)
#define SDRAM_BRD_CM_WP(base, index) (BME_UBFX32(&SDRAM_CM_REG(base, index), SDRAM_CM_WP_SHIFT, SDRAM_CM_WP_WIDTH))

/*! @brief Set the WP field to a new value. */
#define SDRAM_WR_CM_WP(base, index, value) (SDRAM_RMW_CM(base, index, SDRAM_CM_WP_MASK, SDRAM_CM_WP(value)))
#define SDRAM_BWR_CM_WP(base, index, value) (BME_BFI32(&SDRAM_CM_REG(base, index), ((uint32_t)(value) << SDRAM_CM_WP_SHIFT), SDRAM_CM_WP_SHIFT, SDRAM_CM_WP_WIDTH))
/*@}*/

/*!
 * @name Register SDRAM_CM, field BAM[31:18] (RW)
 *
 * Masks the associated SDRAM_ACn[BA]. Lets the DRAM controller connect to
 * various DRAM sizes. Mask bits need not be contiguous
 *
 * Values:
 * - 0b00000000000000 - The associated address bit is used in decoding the DRAM
 *     hit to a memory block
 * - 0b00000000000001 - The associated address bit is not used in the DRAM hit
 *     decode
 */
/*@{*/
/*! @brief Read current value of the SDRAM_CM_BAM field. */
#define SDRAM_RD_CM_BAM(base, index) ((SDRAM_CM_REG(base, index) & SDRAM_CM_BAM_MASK) >> SDRAM_CM_BAM_SHIFT)
#define SDRAM_BRD_CM_BAM(base, index) (SDRAM_RD_CM_BAM(base, index))

/*! @brief Set the BAM field to a new value. */
#define SDRAM_WR_CM_BAM(base, index, value) (SDRAM_RMW_CM(base, index, SDRAM_CM_BAM_MASK, SDRAM_CM_BAM(value)))
#define SDRAM_BWR_CM_BAM(base, index, value) (SDRAM_WR_CM_BAM(base, index, value))
/*@}*/

/*
 * MK82F25615 SIM
 *
 * System Integration Module
 *
 * Registers defined in this header file:
 * - SIM_SOPT1 - System Options Register 1
 * - SIM_SOPT1CFG - SOPT1 Configuration Register
 * - SIM_SOPT2 - System Options Register 2
 * - SIM_SOPT4 - System Options Register 4
 * - SIM_SOPT5 - System Options Register 5
 * - SIM_SOPT7 - System Options Register 7
 * - SIM_SOPT8 - System Options Register 8
 * - SIM_SOPT9 - System Options Register 9
 * - SIM_SDID - System Device Identification Register
 * - SIM_SCGC1 - System Clock Gating Control Register 1
 * - SIM_SCGC2 - System Clock Gating Control Register 2
 * - SIM_SCGC3 - System Clock Gating Control Register 3
 * - SIM_SCGC4 - System Clock Gating Control Register 4
 * - SIM_SCGC5 - System Clock Gating Control Register 5
 * - SIM_SCGC6 - System Clock Gating Control Register 6
 * - SIM_SCGC7 - System Clock Gating Control Register 7
 * - SIM_CLKDIV1 - System Clock Divider Register 1
 * - SIM_CLKDIV2 - System Clock Divider Register 2
 * - SIM_FCFG1 - Flash Configuration Register 1
 * - SIM_FCFG2 - Flash Configuration Register 2
 * - SIM_UIDH - Unique Identification Register High
 * - SIM_UIDMH - Unique Identification Register Mid-High
 * - SIM_UIDML - Unique Identification Register Mid Low
 * - SIM_UIDL - Unique Identification Register Low
 * - SIM_CLKDIV3 - System Clock Divider Register 3
 * - SIM_CLKDIV4 - System Clock Divider Register 4
 */

#define SIM_INSTANCE_COUNT (1U) /*!< Number of instances of the SIM module. */
#define SIM_IDX (0U) /*!< Instance number for SIM. */

/*******************************************************************************
 * SIM_SOPT1 - System Options Register 1
 ******************************************************************************/

/*!
 * @brief SIM_SOPT1 - System Options Register 1 (RW)
 *
 * Reset value: 0x80000000U
 *
 * The SOPT1 register is only reset on POR or LVD.
 */
/*!
 * @name Constants and macros for entire SIM_SOPT1 register
 */
/*@{*/
#define SIM_RD_SOPT1(base)       (SIM_SOPT1_REG(base))
#define SIM_WR_SOPT1(base, value) (SIM_SOPT1_REG(base) = (value))
#define SIM_RMW_SOPT1(base, mask, value) (SIM_WR_SOPT1(base, (SIM_RD_SOPT1(base) & ~(mask)) | (value)))
#define SIM_SET_SOPT1(base, value) (BME_OR32(&SIM_SOPT1_REG(base), (uint32_t)(value)))
#define SIM_CLR_SOPT1(base, value) (BME_AND32(&SIM_SOPT1_REG(base), (uint32_t)(~(value))))
#define SIM_TOG_SOPT1(base, value) (BME_XOR32(&SIM_SOPT1_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SIM_SOPT1 bitfields
 */

/*!
 * @name Register SIM_SOPT1, field RAMSIZE[15:12] (RO)
 *
 * This field specifies the amount of system RAM available on the device.
 *
 * Values:
 * - 0b0001 - 8 KB
 * - 0b0011 - 16 KB
 * - 0b0100 - 24 KB
 * - 0b0101 - 32 KB
 * - 0b0110 - 48 KB
 * - 0b0111 - 64 KB
 * - 0b1000 - 96 KB
 * - 0b1001 - 128 KB
 * - 0b1011 - 256 KB
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT1_RAMSIZE field. */
#define SIM_RD_SOPT1_RAMSIZE(base) ((SIM_SOPT1_REG(base) & SIM_SOPT1_RAMSIZE_MASK) >> SIM_SOPT1_RAMSIZE_SHIFT)
#define SIM_BRD_SOPT1_RAMSIZE(base) (BME_UBFX32(&SIM_SOPT1_REG(base), SIM_SOPT1_RAMSIZE_SHIFT, SIM_SOPT1_RAMSIZE_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT1, field OSC32KSEL[19:18] (RW)
 *
 * Selects the 32 kHz clock source (ERCLK32K) for TSI, and LPTMR. This field is
 * reset only on POR/LVD.
 *
 * Values:
 * - 0b00 - System oscillator (OSC32KCLK)
 * - 0b01 - Reserved
 * - 0b10 - RTC 32.768kHz oscillator
 * - 0b11 - LPO 1 kHz
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT1_OSC32KSEL field. */
#define SIM_RD_SOPT1_OSC32KSEL(base) ((SIM_SOPT1_REG(base) & SIM_SOPT1_OSC32KSEL_MASK) >> SIM_SOPT1_OSC32KSEL_SHIFT)
#define SIM_BRD_SOPT1_OSC32KSEL(base) (BME_UBFX32(&SIM_SOPT1_REG(base), SIM_SOPT1_OSC32KSEL_SHIFT, SIM_SOPT1_OSC32KSEL_WIDTH))

/*! @brief Set the OSC32KSEL field to a new value. */
#define SIM_WR_SOPT1_OSC32KSEL(base, value) (SIM_RMW_SOPT1(base, SIM_SOPT1_OSC32KSEL_MASK, SIM_SOPT1_OSC32KSEL(value)))
#define SIM_BWR_SOPT1_OSC32KSEL(base, value) (BME_BFI32(&SIM_SOPT1_REG(base), ((uint32_t)(value) << SIM_SOPT1_OSC32KSEL_SHIFT), SIM_SOPT1_OSC32KSEL_SHIFT, SIM_SOPT1_OSC32KSEL_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT1, field USBVSTBY[29] (RW)
 *
 * Controls whether the USB voltage regulator is placed in standby mode during
 * VLPR and VLPW modes.
 *
 * Values:
 * - 0b0 - USB voltage regulator not in standby during VLPR and VLPW modes.
 * - 0b1 - USB voltage regulator in standby during VLPR and VLPW modes.
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT1_USBVSTBY field. */
#define SIM_RD_SOPT1_USBVSTBY(base) ((SIM_SOPT1_REG(base) & SIM_SOPT1_USBVSTBY_MASK) >> SIM_SOPT1_USBVSTBY_SHIFT)
#define SIM_BRD_SOPT1_USBVSTBY(base) (BME_UBFX32(&SIM_SOPT1_REG(base), SIM_SOPT1_USBVSTBY_SHIFT, SIM_SOPT1_USBVSTBY_WIDTH))

/*! @brief Set the USBVSTBY field to a new value. */
#define SIM_WR_SOPT1_USBVSTBY(base, value) (SIM_RMW_SOPT1(base, SIM_SOPT1_USBVSTBY_MASK, SIM_SOPT1_USBVSTBY(value)))
#define SIM_BWR_SOPT1_USBVSTBY(base, value) (BME_BFI32(&SIM_SOPT1_REG(base), ((uint32_t)(value) << SIM_SOPT1_USBVSTBY_SHIFT), SIM_SOPT1_USBVSTBY_SHIFT, SIM_SOPT1_USBVSTBY_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT1, field USBSSTBY[30] (RW)
 *
 * Controls whether the USB voltage regulator is placed in standby mode during
 * Stop, VLPS, LLS and VLLS modes.
 *
 * Values:
 * - 0b0 - USB voltage regulator not in standby during Stop, VLPS, LLS and VLLS
 *     modes.
 * - 0b1 - USB voltage regulator in standby during Stop, VLPS, LLS and VLLS
 *     modes.
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT1_USBSSTBY field. */
#define SIM_RD_SOPT1_USBSSTBY(base) ((SIM_SOPT1_REG(base) & SIM_SOPT1_USBSSTBY_MASK) >> SIM_SOPT1_USBSSTBY_SHIFT)
#define SIM_BRD_SOPT1_USBSSTBY(base) (BME_UBFX32(&SIM_SOPT1_REG(base), SIM_SOPT1_USBSSTBY_SHIFT, SIM_SOPT1_USBSSTBY_WIDTH))

/*! @brief Set the USBSSTBY field to a new value. */
#define SIM_WR_SOPT1_USBSSTBY(base, value) (SIM_RMW_SOPT1(base, SIM_SOPT1_USBSSTBY_MASK, SIM_SOPT1_USBSSTBY(value)))
#define SIM_BWR_SOPT1_USBSSTBY(base, value) (BME_BFI32(&SIM_SOPT1_REG(base), ((uint32_t)(value) << SIM_SOPT1_USBSSTBY_SHIFT), SIM_SOPT1_USBSSTBY_SHIFT, SIM_SOPT1_USBSSTBY_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT1, field USBREGEN[31] (RW)
 *
 * Controls whether the USB voltage regulator is enabled.
 *
 * Values:
 * - 0b0 - USB voltage regulator is disabled.
 * - 0b1 - USB voltage regulator is enabled.
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT1_USBREGEN field. */
#define SIM_RD_SOPT1_USBREGEN(base) ((SIM_SOPT1_REG(base) & SIM_SOPT1_USBREGEN_MASK) >> SIM_SOPT1_USBREGEN_SHIFT)
#define SIM_BRD_SOPT1_USBREGEN(base) (BME_UBFX32(&SIM_SOPT1_REG(base), SIM_SOPT1_USBREGEN_SHIFT, SIM_SOPT1_USBREGEN_WIDTH))

/*! @brief Set the USBREGEN field to a new value. */
#define SIM_WR_SOPT1_USBREGEN(base, value) (SIM_RMW_SOPT1(base, SIM_SOPT1_USBREGEN_MASK, SIM_SOPT1_USBREGEN(value)))
#define SIM_BWR_SOPT1_USBREGEN(base, value) (BME_BFI32(&SIM_SOPT1_REG(base), ((uint32_t)(value) << SIM_SOPT1_USBREGEN_SHIFT), SIM_SOPT1_USBREGEN_SHIFT, SIM_SOPT1_USBREGEN_WIDTH))
/*@}*/

/*******************************************************************************
 * SIM_SOPT1CFG - SOPT1 Configuration Register
 ******************************************************************************/

/*!
 * @brief SIM_SOPT1CFG - SOPT1 Configuration Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The SOPT1CFG register is reset on System Reset not VLLS.
 */
/*!
 * @name Constants and macros for entire SIM_SOPT1CFG register
 */
/*@{*/
#define SIM_RD_SOPT1CFG(base)    (SIM_SOPT1CFG_REG(base))
#define SIM_WR_SOPT1CFG(base, value) (SIM_SOPT1CFG_REG(base) = (value))
#define SIM_RMW_SOPT1CFG(base, mask, value) (SIM_WR_SOPT1CFG(base, (SIM_RD_SOPT1CFG(base) & ~(mask)) | (value)))
#define SIM_SET_SOPT1CFG(base, value) (BME_OR32(&SIM_SOPT1CFG_REG(base), (uint32_t)(value)))
#define SIM_CLR_SOPT1CFG(base, value) (BME_AND32(&SIM_SOPT1CFG_REG(base), (uint32_t)(~(value))))
#define SIM_TOG_SOPT1CFG(base, value) (BME_XOR32(&SIM_SOPT1CFG_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SIM_SOPT1CFG bitfields
 */

/*!
 * @name Register SIM_SOPT1CFG, field URWE[24] (RW)
 *
 * Writing one to the URWE bit allows the SOPT1 USBREGEN bit to be written. This
 * register bit clears after a write to USBREGEN.
 *
 * Values:
 * - 0b0 - SOPT1 USBREGEN cannot be written.
 * - 0b1 - SOPT1 USBREGEN can be written.
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT1CFG_URWE field. */
#define SIM_RD_SOPT1CFG_URWE(base) ((SIM_SOPT1CFG_REG(base) & SIM_SOPT1CFG_URWE_MASK) >> SIM_SOPT1CFG_URWE_SHIFT)
#define SIM_BRD_SOPT1CFG_URWE(base) (BME_UBFX32(&SIM_SOPT1CFG_REG(base), SIM_SOPT1CFG_URWE_SHIFT, SIM_SOPT1CFG_URWE_WIDTH))

/*! @brief Set the URWE field to a new value. */
#define SIM_WR_SOPT1CFG_URWE(base, value) (SIM_RMW_SOPT1CFG(base, SIM_SOPT1CFG_URWE_MASK, SIM_SOPT1CFG_URWE(value)))
#define SIM_BWR_SOPT1CFG_URWE(base, value) (BME_BFI32(&SIM_SOPT1CFG_REG(base), ((uint32_t)(value) << SIM_SOPT1CFG_URWE_SHIFT), SIM_SOPT1CFG_URWE_SHIFT, SIM_SOPT1CFG_URWE_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT1CFG, field UVSWE[25] (RW)
 *
 * Writing one to the UVSWE bit allows the SOPT1 USBVSTBY bit to be written.
 * This register bit clears after a write to USBVSTBY.
 *
 * Values:
 * - 0b0 - SOPT1 USBVSTBY cannot be written.
 * - 0b1 - SOPT1 USBVSTBY can be written.
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT1CFG_UVSWE field. */
#define SIM_RD_SOPT1CFG_UVSWE(base) ((SIM_SOPT1CFG_REG(base) & SIM_SOPT1CFG_UVSWE_MASK) >> SIM_SOPT1CFG_UVSWE_SHIFT)
#define SIM_BRD_SOPT1CFG_UVSWE(base) (BME_UBFX32(&SIM_SOPT1CFG_REG(base), SIM_SOPT1CFG_UVSWE_SHIFT, SIM_SOPT1CFG_UVSWE_WIDTH))

/*! @brief Set the UVSWE field to a new value. */
#define SIM_WR_SOPT1CFG_UVSWE(base, value) (SIM_RMW_SOPT1CFG(base, SIM_SOPT1CFG_UVSWE_MASK, SIM_SOPT1CFG_UVSWE(value)))
#define SIM_BWR_SOPT1CFG_UVSWE(base, value) (BME_BFI32(&SIM_SOPT1CFG_REG(base), ((uint32_t)(value) << SIM_SOPT1CFG_UVSWE_SHIFT), SIM_SOPT1CFG_UVSWE_SHIFT, SIM_SOPT1CFG_UVSWE_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT1CFG, field USSWE[26] (RW)
 *
 * Writing one to the USSWE bit allows the SOPT1 USBSSTBY bit to be written.
 * This register bit clears after a write to USBSSTBY.
 *
 * Values:
 * - 0b0 - SOPT1 USBSSTBY cannot be written.
 * - 0b1 - SOPT1 USBSSTBY can be written.
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT1CFG_USSWE field. */
#define SIM_RD_SOPT1CFG_USSWE(base) ((SIM_SOPT1CFG_REG(base) & SIM_SOPT1CFG_USSWE_MASK) >> SIM_SOPT1CFG_USSWE_SHIFT)
#define SIM_BRD_SOPT1CFG_USSWE(base) (BME_UBFX32(&SIM_SOPT1CFG_REG(base), SIM_SOPT1CFG_USSWE_SHIFT, SIM_SOPT1CFG_USSWE_WIDTH))

/*! @brief Set the USSWE field to a new value. */
#define SIM_WR_SOPT1CFG_USSWE(base, value) (SIM_RMW_SOPT1CFG(base, SIM_SOPT1CFG_USSWE_MASK, SIM_SOPT1CFG_USSWE(value)))
#define SIM_BWR_SOPT1CFG_USSWE(base, value) (BME_BFI32(&SIM_SOPT1CFG_REG(base), ((uint32_t)(value) << SIM_SOPT1CFG_USSWE_SHIFT), SIM_SOPT1CFG_USSWE_SHIFT, SIM_SOPT1CFG_USSWE_WIDTH))
/*@}*/

/*******************************************************************************
 * SIM_SOPT2 - System Options Register 2
 ******************************************************************************/

/*!
 * @brief SIM_SOPT2 - System Options Register 2 (RW)
 *
 * Reset value: 0x00001000U
 *
 * SOPT2 contains the controls for selecting many of the module clock source
 * options on this device. See the Clock Distribution chapter for more information
 * including clocking diagrams and definitions of device clocks.
 */
/*!
 * @name Constants and macros for entire SIM_SOPT2 register
 */
/*@{*/
#define SIM_RD_SOPT2(base)       (SIM_SOPT2_REG(base))
#define SIM_WR_SOPT2(base, value) (SIM_SOPT2_REG(base) = (value))
#define SIM_RMW_SOPT2(base, mask, value) (SIM_WR_SOPT2(base, (SIM_RD_SOPT2(base) & ~(mask)) | (value)))
#define SIM_SET_SOPT2(base, value) (BME_OR32(&SIM_SOPT2_REG(base), (uint32_t)(value)))
#define SIM_CLR_SOPT2(base, value) (BME_AND32(&SIM_SOPT2_REG(base), (uint32_t)(~(value))))
#define SIM_TOG_SOPT2(base, value) (BME_XOR32(&SIM_SOPT2_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SIM_SOPT2 bitfields
 */

/*!
 * @name Register SIM_SOPT2, field RTCCLKOUTSEL[4] (RW)
 *
 * Selects either the RTC 1 Hz clock or the 32.768kHz clock to be output on the
 * RTC_CLKOUT pin.
 *
 * Values:
 * - 0b0 - RTC 1 Hz clock is output on the RTC_CLKOUT pin.
 * - 0b1 - RTC 32.768kHz clock is output on the RTC_CLKOUT pin.
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT2_RTCCLKOUTSEL field. */
#define SIM_RD_SOPT2_RTCCLKOUTSEL(base) ((SIM_SOPT2_REG(base) & SIM_SOPT2_RTCCLKOUTSEL_MASK) >> SIM_SOPT2_RTCCLKOUTSEL_SHIFT)
#define SIM_BRD_SOPT2_RTCCLKOUTSEL(base) (BME_UBFX32(&SIM_SOPT2_REG(base), SIM_SOPT2_RTCCLKOUTSEL_SHIFT, SIM_SOPT2_RTCCLKOUTSEL_WIDTH))

/*! @brief Set the RTCCLKOUTSEL field to a new value. */
#define SIM_WR_SOPT2_RTCCLKOUTSEL(base, value) (SIM_RMW_SOPT2(base, SIM_SOPT2_RTCCLKOUTSEL_MASK, SIM_SOPT2_RTCCLKOUTSEL(value)))
#define SIM_BWR_SOPT2_RTCCLKOUTSEL(base, value) (BME_BFI32(&SIM_SOPT2_REG(base), ((uint32_t)(value) << SIM_SOPT2_RTCCLKOUTSEL_SHIFT), SIM_SOPT2_RTCCLKOUTSEL_SHIFT, SIM_SOPT2_RTCCLKOUTSEL_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT2, field CLKOUTSEL[7:5] (RW)
 *
 * Selects the clock to output on the CLKOUT pin.
 *
 * Values:
 * - 0b000 - FlexBus CLKOUT
 * - 0b001 - Reserved
 * - 0b010 - Flash clock
 * - 0b011 - LPO clock (1 kHz)
 * - 0b100 - MCGIRCLK
 * - 0b101 - RTC 32.768kHz clock
 * - 0b110 - OSCERCLK0
 * - 0b111 - IRC 48 MHz clock
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT2_CLKOUTSEL field. */
#define SIM_RD_SOPT2_CLKOUTSEL(base) ((SIM_SOPT2_REG(base) & SIM_SOPT2_CLKOUTSEL_MASK) >> SIM_SOPT2_CLKOUTSEL_SHIFT)
#define SIM_BRD_SOPT2_CLKOUTSEL(base) (BME_UBFX32(&SIM_SOPT2_REG(base), SIM_SOPT2_CLKOUTSEL_SHIFT, SIM_SOPT2_CLKOUTSEL_WIDTH))

/*! @brief Set the CLKOUTSEL field to a new value. */
#define SIM_WR_SOPT2_CLKOUTSEL(base, value) (SIM_RMW_SOPT2(base, SIM_SOPT2_CLKOUTSEL_MASK, SIM_SOPT2_CLKOUTSEL(value)))
#define SIM_BWR_SOPT2_CLKOUTSEL(base, value) (BME_BFI32(&SIM_SOPT2_REG(base), ((uint32_t)(value) << SIM_SOPT2_CLKOUTSEL_SHIFT), SIM_SOPT2_CLKOUTSEL_SHIFT, SIM_SOPT2_CLKOUTSEL_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT2, field FBSL[9:8] (RW)
 *
 * If flash security is enabled, then this field affects what CPU operations can
 * access off-chip via the FlexBus or SDRAMinterface. This field has no effect
 * if flash security is not enabled.
 *
 * Values:
 * - 0b00 - All off-chip accesses (instruction and data) via the FlexBus or
 *     SDRAM are disallowed.
 * - 0b01 - All off-chip accesses (instruction and data) via the FlexBus or
 *     SDRAM are disallowed.
 * - 0b10 - Off-chip instruction accesses are disallowed. Data accesses are
 *     allowed.
 * - 0b11 - Off-chip instruction accesses and data accesses are allowed.
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT2_FBSL field. */
#define SIM_RD_SOPT2_FBSL(base) ((SIM_SOPT2_REG(base) & SIM_SOPT2_FBSL_MASK) >> SIM_SOPT2_FBSL_SHIFT)
#define SIM_BRD_SOPT2_FBSL(base) (BME_UBFX32(&SIM_SOPT2_REG(base), SIM_SOPT2_FBSL_SHIFT, SIM_SOPT2_FBSL_WIDTH))

/*! @brief Set the FBSL field to a new value. */
#define SIM_WR_SOPT2_FBSL(base, value) (SIM_RMW_SOPT2(base, SIM_SOPT2_FBSL_MASK, SIM_SOPT2_FBSL(value)))
#define SIM_BWR_SOPT2_FBSL(base, value) (BME_BFI32(&SIM_SOPT2_REG(base), ((uint32_t)(value) << SIM_SOPT2_FBSL_SHIFT), SIM_SOPT2_FBSL_SHIFT, SIM_SOPT2_FBSL_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT2, field TRACECLKSEL[12] (RW)
 *
 * Selects the core/system clock, or MCG output clock (MCGOUTCLK) divided by the
 * TRACECLK fractional divider as configured by SIM_CLKDIV4[TRACEFRAC, TRACEDIV]
 * as the trace clock source.
 *
 * Values:
 * - 0b0 - MCGOUTCLK, divided by the TRACECLK fractional divider as configured
 *     by SIM_CLKDIV4[TRACEFRAC, TRACEDIV]
 * - 0b1 - Core/system clock
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT2_TRACECLKSEL field. */
#define SIM_RD_SOPT2_TRACECLKSEL(base) ((SIM_SOPT2_REG(base) & SIM_SOPT2_TRACECLKSEL_MASK) >> SIM_SOPT2_TRACECLKSEL_SHIFT)
#define SIM_BRD_SOPT2_TRACECLKSEL(base) (BME_UBFX32(&SIM_SOPT2_REG(base), SIM_SOPT2_TRACECLKSEL_SHIFT, SIM_SOPT2_TRACECLKSEL_WIDTH))

/*! @brief Set the TRACECLKSEL field to a new value. */
#define SIM_WR_SOPT2_TRACECLKSEL(base, value) (SIM_RMW_SOPT2(base, SIM_SOPT2_TRACECLKSEL_MASK, SIM_SOPT2_TRACECLKSEL(value)))
#define SIM_BWR_SOPT2_TRACECLKSEL(base, value) (BME_BFI32(&SIM_SOPT2_REG(base), ((uint32_t)(value) << SIM_SOPT2_TRACECLKSEL_SHIFT), SIM_SOPT2_TRACECLKSEL_SHIFT, SIM_SOPT2_TRACECLKSEL_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT2, field PLLFLLSEL[17:16] (RW)
 *
 * Selects the high frequency clock for various peripheral clocking options.
 *
 * Values:
 * - 0b00 - MCGFLLCLK clock
 * - 0b01 - MCGPLLCLK clock
 * - 0b10 - Reserved
 * - 0b11 - IRC48 MHz clock
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT2_PLLFLLSEL field. */
#define SIM_RD_SOPT2_PLLFLLSEL(base) ((SIM_SOPT2_REG(base) & SIM_SOPT2_PLLFLLSEL_MASK) >> SIM_SOPT2_PLLFLLSEL_SHIFT)
#define SIM_BRD_SOPT2_PLLFLLSEL(base) (BME_UBFX32(&SIM_SOPT2_REG(base), SIM_SOPT2_PLLFLLSEL_SHIFT, SIM_SOPT2_PLLFLLSEL_WIDTH))

/*! @brief Set the PLLFLLSEL field to a new value. */
#define SIM_WR_SOPT2_PLLFLLSEL(base, value) (SIM_RMW_SOPT2(base, SIM_SOPT2_PLLFLLSEL_MASK, SIM_SOPT2_PLLFLLSEL(value)))
#define SIM_BWR_SOPT2_PLLFLLSEL(base, value) (BME_BFI32(&SIM_SOPT2_REG(base), ((uint32_t)(value) << SIM_SOPT2_PLLFLLSEL_SHIFT), SIM_SOPT2_PLLFLLSEL_SHIFT, SIM_SOPT2_PLLFLLSEL_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT2, field USBSRC[18] (RW)
 *
 * Selects the clock source for the USB 48 MHz clock.
 *
 * Values:
 * - 0b0 - External bypass clock (USB_CLKIN).
 * - 0b1 - MCGFLLCLK, or MCGPLLCLK , or IRC48M clock as selected by
 *     SOPT2[PLLFLLSEL], and then divided by the USB fractional divider as configured by
 *     SIM_CLKDIV2[USBFRAC, USBDIV].
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT2_USBSRC field. */
#define SIM_RD_SOPT2_USBSRC(base) ((SIM_SOPT2_REG(base) & SIM_SOPT2_USBSRC_MASK) >> SIM_SOPT2_USBSRC_SHIFT)
#define SIM_BRD_SOPT2_USBSRC(base) (BME_UBFX32(&SIM_SOPT2_REG(base), SIM_SOPT2_USBSRC_SHIFT, SIM_SOPT2_USBSRC_WIDTH))

/*! @brief Set the USBSRC field to a new value. */
#define SIM_WR_SOPT2_USBSRC(base, value) (SIM_RMW_SOPT2(base, SIM_SOPT2_USBSRC_MASK, SIM_SOPT2_USBSRC(value)))
#define SIM_BWR_SOPT2_USBSRC(base, value) (BME_BFI32(&SIM_SOPT2_REG(base), ((uint32_t)(value) << SIM_SOPT2_USBSRC_SHIFT), SIM_SOPT2_USBSRC_SHIFT, SIM_SOPT2_USBSRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT2, field FLEXIOSRC[23:22] (RW)
 *
 * Selects the clock source for the FlexIO transmit and receive clock.
 *
 * Values:
 * - 0b00 - System clock
 * - 0b01 - MCGFLLCLK , or MCGPLLCLK , or IRC48M clock as selected by
 *     SOPT2[PLLFLLSEL], and then divided by the PLLFLLCLK fractional divider as configured
 *     by SIM_CLKDIV3[PLLFLLFRAC, PLLFLLDIV].
 * - 0b10 - OSCERCLK clock
 * - 0b11 - MCGIRCLK clock
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT2_FLEXIOSRC field. */
#define SIM_RD_SOPT2_FLEXIOSRC(base) ((SIM_SOPT2_REG(base) & SIM_SOPT2_FLEXIOSRC_MASK) >> SIM_SOPT2_FLEXIOSRC_SHIFT)
#define SIM_BRD_SOPT2_FLEXIOSRC(base) (BME_UBFX32(&SIM_SOPT2_REG(base), SIM_SOPT2_FLEXIOSRC_SHIFT, SIM_SOPT2_FLEXIOSRC_WIDTH))

/*! @brief Set the FLEXIOSRC field to a new value. */
#define SIM_WR_SOPT2_FLEXIOSRC(base, value) (SIM_RMW_SOPT2(base, SIM_SOPT2_FLEXIOSRC_MASK, SIM_SOPT2_FLEXIOSRC(value)))
#define SIM_BWR_SOPT2_FLEXIOSRC(base, value) (BME_BFI32(&SIM_SOPT2_REG(base), ((uint32_t)(value) << SIM_SOPT2_FLEXIOSRC_SHIFT), SIM_SOPT2_FLEXIOSRC_SHIFT, SIM_SOPT2_FLEXIOSRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT2, field TPMSRC[25:24] (RW)
 *
 * Selects the clock source for the TPM counter clock
 *
 * Values:
 * - 0b00 - Clock disabled
 * - 0b01 - MCGFLLCLK , or MCGPLLCLK , or IRC48M clock as selected by
 *     SOPT2[PLLFLLSEL], and then divided by the PLLFLLCLK fractional divider as configured
 *     by SIM_CLKDIV3[PLLFLLFRAC, PLLFLLDIV].
 * - 0b10 - OSCERCLK clock
 * - 0b11 - MCGIRCLK clock
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT2_TPMSRC field. */
#define SIM_RD_SOPT2_TPMSRC(base) ((SIM_SOPT2_REG(base) & SIM_SOPT2_TPMSRC_MASK) >> SIM_SOPT2_TPMSRC_SHIFT)
#define SIM_BRD_SOPT2_TPMSRC(base) (BME_UBFX32(&SIM_SOPT2_REG(base), SIM_SOPT2_TPMSRC_SHIFT, SIM_SOPT2_TPMSRC_WIDTH))

/*! @brief Set the TPMSRC field to a new value. */
#define SIM_WR_SOPT2_TPMSRC(base, value) (SIM_RMW_SOPT2(base, SIM_SOPT2_TPMSRC_MASK, SIM_SOPT2_TPMSRC(value)))
#define SIM_BWR_SOPT2_TPMSRC(base, value) (BME_BFI32(&SIM_SOPT2_REG(base), ((uint32_t)(value) << SIM_SOPT2_TPMSRC_SHIFT), SIM_SOPT2_TPMSRC_SHIFT, SIM_SOPT2_TPMSRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT2, field LPUARTSRC[27:26] (RW)
 *
 * Selects the clock source for the LPUART transmit and receive clock.
 *
 * Values:
 * - 0b00 - Clock disabled
 * - 0b01 - MCGFLLCLK , or MCGPLLCLK , or IRC48M clock as selected by
 *     SOPT2[PLLFLLSEL], and then divided by the PLLFLLCLK fractional divider as configured
 *     by SIM_CLKDIV3[PLLFLLFRAC, PLLFLLDIV].
 * - 0b10 - OSCERCLK clock
 * - 0b11 - MCGIRCLK clock
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT2_LPUARTSRC field. */
#define SIM_RD_SOPT2_LPUARTSRC(base) ((SIM_SOPT2_REG(base) & SIM_SOPT2_LPUARTSRC_MASK) >> SIM_SOPT2_LPUARTSRC_SHIFT)
#define SIM_BRD_SOPT2_LPUARTSRC(base) (BME_UBFX32(&SIM_SOPT2_REG(base), SIM_SOPT2_LPUARTSRC_SHIFT, SIM_SOPT2_LPUARTSRC_WIDTH))

/*! @brief Set the LPUARTSRC field to a new value. */
#define SIM_WR_SOPT2_LPUARTSRC(base, value) (SIM_RMW_SOPT2(base, SIM_SOPT2_LPUARTSRC_MASK, SIM_SOPT2_LPUARTSRC(value)))
#define SIM_BWR_SOPT2_LPUARTSRC(base, value) (BME_BFI32(&SIM_SOPT2_REG(base), ((uint32_t)(value) << SIM_SOPT2_LPUARTSRC_SHIFT), SIM_SOPT2_LPUARTSRC_SHIFT, SIM_SOPT2_LPUARTSRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT2, field SDHCSRC[29:28] (RW)
 *
 * Selects the clock source for the SDHC clock .
 *
 * Values:
 * - 0b00 - Core/system clock.
 * - 0b01 - MCGFLLCLK, or MCGPLLCLK , or IRC48M clock as selected by
 *     SOPT2[PLLFLLSEL].
 * - 0b10 - OSCERCLK clock
 * - 0b11 - External bypass clock (SDHC0_CLKIN)
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT2_SDHCSRC field. */
#define SIM_RD_SOPT2_SDHCSRC(base) ((SIM_SOPT2_REG(base) & SIM_SOPT2_SDHCSRC_MASK) >> SIM_SOPT2_SDHCSRC_SHIFT)
#define SIM_BRD_SOPT2_SDHCSRC(base) (BME_UBFX32(&SIM_SOPT2_REG(base), SIM_SOPT2_SDHCSRC_SHIFT, SIM_SOPT2_SDHCSRC_WIDTH))

/*! @brief Set the SDHCSRC field to a new value. */
#define SIM_WR_SOPT2_SDHCSRC(base, value) (SIM_RMW_SOPT2(base, SIM_SOPT2_SDHCSRC_MASK, SIM_SOPT2_SDHCSRC(value)))
#define SIM_BWR_SOPT2_SDHCSRC(base, value) (BME_BFI32(&SIM_SOPT2_REG(base), ((uint32_t)(value) << SIM_SOPT2_SDHCSRC_SHIFT), SIM_SOPT2_SDHCSRC_SHIFT, SIM_SOPT2_SDHCSRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT2, field EMVSIMSRC[31:30] (RW)
 *
 * Selects the clock source for the EMVSIM transmit and receive clock.
 *
 * Values:
 * - 0b00 - Clock disabled
 * - 0b01 - MCGFLLCLK , or MCGPLLCLK , or IRC48M clock as selected by
 *     SOPT2[PLLFLLSEL], and then divided by the PLLFLLCLK fractional divider as configured
 *     by SIM_CLKDIV3[PLLFLLFRAC, PLLFLLDIV].
 * - 0b10 - OSCERCLK clock
 * - 0b11 - MCGIRCLK clock
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT2_EMVSIMSRC field. */
#define SIM_RD_SOPT2_EMVSIMSRC(base) ((SIM_SOPT2_REG(base) & SIM_SOPT2_EMVSIMSRC_MASK) >> SIM_SOPT2_EMVSIMSRC_SHIFT)
#define SIM_BRD_SOPT2_EMVSIMSRC(base) (BME_UBFX32(&SIM_SOPT2_REG(base), SIM_SOPT2_EMVSIMSRC_SHIFT, SIM_SOPT2_EMVSIMSRC_WIDTH))

/*! @brief Set the EMVSIMSRC field to a new value. */
#define SIM_WR_SOPT2_EMVSIMSRC(base, value) (SIM_RMW_SOPT2(base, SIM_SOPT2_EMVSIMSRC_MASK, SIM_SOPT2_EMVSIMSRC(value)))
#define SIM_BWR_SOPT2_EMVSIMSRC(base, value) (BME_BFI32(&SIM_SOPT2_REG(base), ((uint32_t)(value) << SIM_SOPT2_EMVSIMSRC_SHIFT), SIM_SOPT2_EMVSIMSRC_SHIFT, SIM_SOPT2_EMVSIMSRC_WIDTH))
/*@}*/

/*******************************************************************************
 * SIM_SOPT4 - System Options Register 4
 ******************************************************************************/

/*!
 * @brief SIM_SOPT4 - System Options Register 4 (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire SIM_SOPT4 register
 */
/*@{*/
#define SIM_RD_SOPT4(base)       (SIM_SOPT4_REG(base))
#define SIM_WR_SOPT4(base, value) (SIM_SOPT4_REG(base) = (value))
#define SIM_RMW_SOPT4(base, mask, value) (SIM_WR_SOPT4(base, (SIM_RD_SOPT4(base) & ~(mask)) | (value)))
#define SIM_SET_SOPT4(base, value) (BME_OR32(&SIM_SOPT4_REG(base), (uint32_t)(value)))
#define SIM_CLR_SOPT4(base, value) (BME_AND32(&SIM_SOPT4_REG(base), (uint32_t)(~(value))))
#define SIM_TOG_SOPT4(base, value) (BME_XOR32(&SIM_SOPT4_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SIM_SOPT4 bitfields
 */

/*!
 * @name Register SIM_SOPT4, field FTM0FLT0[0] (RW)
 *
 * Selects the source of FTM0 fault 0. The pin source for fault 0 must be
 * configured for the FTM module fault function through the appropriate pin control
 * register in the port control module.
 *
 * Values:
 * - 0b0 - FTM0_FLT0 pin
 * - 0b1 - CMP0 out
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT4_FTM0FLT0 field. */
#define SIM_RD_SOPT4_FTM0FLT0(base) ((SIM_SOPT4_REG(base) & SIM_SOPT4_FTM0FLT0_MASK) >> SIM_SOPT4_FTM0FLT0_SHIFT)
#define SIM_BRD_SOPT4_FTM0FLT0(base) (BME_UBFX32(&SIM_SOPT4_REG(base), SIM_SOPT4_FTM0FLT0_SHIFT, SIM_SOPT4_FTM0FLT0_WIDTH))

/*! @brief Set the FTM0FLT0 field to a new value. */
#define SIM_WR_SOPT4_FTM0FLT0(base, value) (SIM_RMW_SOPT4(base, SIM_SOPT4_FTM0FLT0_MASK, SIM_SOPT4_FTM0FLT0(value)))
#define SIM_BWR_SOPT4_FTM0FLT0(base, value) (BME_BFI32(&SIM_SOPT4_REG(base), ((uint32_t)(value) << SIM_SOPT4_FTM0FLT0_SHIFT), SIM_SOPT4_FTM0FLT0_SHIFT, SIM_SOPT4_FTM0FLT0_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT4, field FTM0FLT1[1] (RW)
 *
 * Selects the source of FTM0 fault 1. The pin source for fault 1 must be
 * configured for the FTM module fault function through the appropriate pin control
 * register in the port control module.
 *
 * Values:
 * - 0b0 - FTM0_FLT1 pin
 * - 0b1 - CMP1 out
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT4_FTM0FLT1 field. */
#define SIM_RD_SOPT4_FTM0FLT1(base) ((SIM_SOPT4_REG(base) & SIM_SOPT4_FTM0FLT1_MASK) >> SIM_SOPT4_FTM0FLT1_SHIFT)
#define SIM_BRD_SOPT4_FTM0FLT1(base) (BME_UBFX32(&SIM_SOPT4_REG(base), SIM_SOPT4_FTM0FLT1_SHIFT, SIM_SOPT4_FTM0FLT1_WIDTH))

/*! @brief Set the FTM0FLT1 field to a new value. */
#define SIM_WR_SOPT4_FTM0FLT1(base, value) (SIM_RMW_SOPT4(base, SIM_SOPT4_FTM0FLT1_MASK, SIM_SOPT4_FTM0FLT1(value)))
#define SIM_BWR_SOPT4_FTM0FLT1(base, value) (BME_BFI32(&SIM_SOPT4_REG(base), ((uint32_t)(value) << SIM_SOPT4_FTM0FLT1_SHIFT), SIM_SOPT4_FTM0FLT1_SHIFT, SIM_SOPT4_FTM0FLT1_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT4, field FTM1FLT0[4] (RW)
 *
 * Selects the source of FTM1 fault 0. The pin source for fault 0 must be
 * configured for the FTM module fault function through the appropriate pin control
 * register in the port control module.
 *
 * Values:
 * - 0b0 - FTM1_FLT0 pin
 * - 0b1 - CMP0 out
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT4_FTM1FLT0 field. */
#define SIM_RD_SOPT4_FTM1FLT0(base) ((SIM_SOPT4_REG(base) & SIM_SOPT4_FTM1FLT0_MASK) >> SIM_SOPT4_FTM1FLT0_SHIFT)
#define SIM_BRD_SOPT4_FTM1FLT0(base) (BME_UBFX32(&SIM_SOPT4_REG(base), SIM_SOPT4_FTM1FLT0_SHIFT, SIM_SOPT4_FTM1FLT0_WIDTH))

/*! @brief Set the FTM1FLT0 field to a new value. */
#define SIM_WR_SOPT4_FTM1FLT0(base, value) (SIM_RMW_SOPT4(base, SIM_SOPT4_FTM1FLT0_MASK, SIM_SOPT4_FTM1FLT0(value)))
#define SIM_BWR_SOPT4_FTM1FLT0(base, value) (BME_BFI32(&SIM_SOPT4_REG(base), ((uint32_t)(value) << SIM_SOPT4_FTM1FLT0_SHIFT), SIM_SOPT4_FTM1FLT0_SHIFT, SIM_SOPT4_FTM1FLT0_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT4, field FTM2FLT0[8] (RW)
 *
 * Selects the source of FTM2 fault 0. The pin source for fault 0 must be
 * configured for the FTM module fault function through the appropriate PORTx pin
 * control register.
 *
 * Values:
 * - 0b0 - FTM2_FLT0 pin
 * - 0b1 - CMP0 out
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT4_FTM2FLT0 field. */
#define SIM_RD_SOPT4_FTM2FLT0(base) ((SIM_SOPT4_REG(base) & SIM_SOPT4_FTM2FLT0_MASK) >> SIM_SOPT4_FTM2FLT0_SHIFT)
#define SIM_BRD_SOPT4_FTM2FLT0(base) (BME_UBFX32(&SIM_SOPT4_REG(base), SIM_SOPT4_FTM2FLT0_SHIFT, SIM_SOPT4_FTM2FLT0_WIDTH))

/*! @brief Set the FTM2FLT0 field to a new value. */
#define SIM_WR_SOPT4_FTM2FLT0(base, value) (SIM_RMW_SOPT4(base, SIM_SOPT4_FTM2FLT0_MASK, SIM_SOPT4_FTM2FLT0(value)))
#define SIM_BWR_SOPT4_FTM2FLT0(base, value) (BME_BFI32(&SIM_SOPT4_REG(base), ((uint32_t)(value) << SIM_SOPT4_FTM2FLT0_SHIFT), SIM_SOPT4_FTM2FLT0_SHIFT, SIM_SOPT4_FTM2FLT0_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT4, field FTM3FLT0[12] (RW)
 *
 * Selects the source of FTM3 fault 0. The pin source for fault 0 must be
 * configured for the FTM module fault function through the appropriate PORTx pin
 * control register.
 *
 * Values:
 * - 0b0 - FTM3_FLT0 pin
 * - 0b1 - CMP0 out
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT4_FTM3FLT0 field. */
#define SIM_RD_SOPT4_FTM3FLT0(base) ((SIM_SOPT4_REG(base) & SIM_SOPT4_FTM3FLT0_MASK) >> SIM_SOPT4_FTM3FLT0_SHIFT)
#define SIM_BRD_SOPT4_FTM3FLT0(base) (BME_UBFX32(&SIM_SOPT4_REG(base), SIM_SOPT4_FTM3FLT0_SHIFT, SIM_SOPT4_FTM3FLT0_WIDTH))

/*! @brief Set the FTM3FLT0 field to a new value. */
#define SIM_WR_SOPT4_FTM3FLT0(base, value) (SIM_RMW_SOPT4(base, SIM_SOPT4_FTM3FLT0_MASK, SIM_SOPT4_FTM3FLT0(value)))
#define SIM_BWR_SOPT4_FTM3FLT0(base, value) (BME_BFI32(&SIM_SOPT4_REG(base), ((uint32_t)(value) << SIM_SOPT4_FTM3FLT0_SHIFT), SIM_SOPT4_FTM3FLT0_SHIFT, SIM_SOPT4_FTM3FLT0_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT4, field FTM1CH0SRC[19:18] (RW)
 *
 * Selects the source for FTM1 channel 0 input capture. When the FTM is not in
 * input capture mode, clear this field.
 *
 * Values:
 * - 0b00 - FTM1_CH0 signal
 * - 0b01 - CMP0 output
 * - 0b10 - CMP1 output
 * - 0b11 - USB start of frame pulse
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT4_FTM1CH0SRC field. */
#define SIM_RD_SOPT4_FTM1CH0SRC(base) ((SIM_SOPT4_REG(base) & SIM_SOPT4_FTM1CH0SRC_MASK) >> SIM_SOPT4_FTM1CH0SRC_SHIFT)
#define SIM_BRD_SOPT4_FTM1CH0SRC(base) (BME_UBFX32(&SIM_SOPT4_REG(base), SIM_SOPT4_FTM1CH0SRC_SHIFT, SIM_SOPT4_FTM1CH0SRC_WIDTH))

/*! @brief Set the FTM1CH0SRC field to a new value. */
#define SIM_WR_SOPT4_FTM1CH0SRC(base, value) (SIM_RMW_SOPT4(base, SIM_SOPT4_FTM1CH0SRC_MASK, SIM_SOPT4_FTM1CH0SRC(value)))
#define SIM_BWR_SOPT4_FTM1CH0SRC(base, value) (BME_BFI32(&SIM_SOPT4_REG(base), ((uint32_t)(value) << SIM_SOPT4_FTM1CH0SRC_SHIFT), SIM_SOPT4_FTM1CH0SRC_SHIFT, SIM_SOPT4_FTM1CH0SRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT4, field FTM2CH0SRC[21:20] (RW)
 *
 * Selects the source for FTM2 channel 0 input capture. When the FTM is not in
 * input capture mode, clear this field.
 *
 * Values:
 * - 0b00 - FTM2_CH0 signal
 * - 0b01 - CMP0 output
 * - 0b10 - CMP1 output
 * - 0b11 - Reserved
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT4_FTM2CH0SRC field. */
#define SIM_RD_SOPT4_FTM2CH0SRC(base) ((SIM_SOPT4_REG(base) & SIM_SOPT4_FTM2CH0SRC_MASK) >> SIM_SOPT4_FTM2CH0SRC_SHIFT)
#define SIM_BRD_SOPT4_FTM2CH0SRC(base) (BME_UBFX32(&SIM_SOPT4_REG(base), SIM_SOPT4_FTM2CH0SRC_SHIFT, SIM_SOPT4_FTM2CH0SRC_WIDTH))

/*! @brief Set the FTM2CH0SRC field to a new value. */
#define SIM_WR_SOPT4_FTM2CH0SRC(base, value) (SIM_RMW_SOPT4(base, SIM_SOPT4_FTM2CH0SRC_MASK, SIM_SOPT4_FTM2CH0SRC(value)))
#define SIM_BWR_SOPT4_FTM2CH0SRC(base, value) (BME_BFI32(&SIM_SOPT4_REG(base), ((uint32_t)(value) << SIM_SOPT4_FTM2CH0SRC_SHIFT), SIM_SOPT4_FTM2CH0SRC_SHIFT, SIM_SOPT4_FTM2CH0SRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT4, field FTM2CH1SRC[22] (RW)
 *
 * Values:
 * - 0b0 - FTM2_CH1 signal
 * - 0b1 - Exclusive OR of FTM2_CH1, FTM2_CH0 and FTM1_CH1.
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT4_FTM2CH1SRC field. */
#define SIM_RD_SOPT4_FTM2CH1SRC(base) ((SIM_SOPT4_REG(base) & SIM_SOPT4_FTM2CH1SRC_MASK) >> SIM_SOPT4_FTM2CH1SRC_SHIFT)
#define SIM_BRD_SOPT4_FTM2CH1SRC(base) (BME_UBFX32(&SIM_SOPT4_REG(base), SIM_SOPT4_FTM2CH1SRC_SHIFT, SIM_SOPT4_FTM2CH1SRC_WIDTH))

/*! @brief Set the FTM2CH1SRC field to a new value. */
#define SIM_WR_SOPT4_FTM2CH1SRC(base, value) (SIM_RMW_SOPT4(base, SIM_SOPT4_FTM2CH1SRC_MASK, SIM_SOPT4_FTM2CH1SRC(value)))
#define SIM_BWR_SOPT4_FTM2CH1SRC(base, value) (BME_BFI32(&SIM_SOPT4_REG(base), ((uint32_t)(value) << SIM_SOPT4_FTM2CH1SRC_SHIFT), SIM_SOPT4_FTM2CH1SRC_SHIFT, SIM_SOPT4_FTM2CH1SRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT4, field FTM0CLKSEL[24] (RW)
 *
 * Selects the external pin used to drive the clock to the FTM0 module. The
 * selected pin must also be configured for the FTM external clock function through
 * the appropriate pin control register in the port control module.
 *
 * Values:
 * - 0b0 - FTM_CLK0 pin
 * - 0b1 - FTM_CLK1 pin
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT4_FTM0CLKSEL field. */
#define SIM_RD_SOPT4_FTM0CLKSEL(base) ((SIM_SOPT4_REG(base) & SIM_SOPT4_FTM0CLKSEL_MASK) >> SIM_SOPT4_FTM0CLKSEL_SHIFT)
#define SIM_BRD_SOPT4_FTM0CLKSEL(base) (BME_UBFX32(&SIM_SOPT4_REG(base), SIM_SOPT4_FTM0CLKSEL_SHIFT, SIM_SOPT4_FTM0CLKSEL_WIDTH))

/*! @brief Set the FTM0CLKSEL field to a new value. */
#define SIM_WR_SOPT4_FTM0CLKSEL(base, value) (SIM_RMW_SOPT4(base, SIM_SOPT4_FTM0CLKSEL_MASK, SIM_SOPT4_FTM0CLKSEL(value)))
#define SIM_BWR_SOPT4_FTM0CLKSEL(base, value) (BME_BFI32(&SIM_SOPT4_REG(base), ((uint32_t)(value) << SIM_SOPT4_FTM0CLKSEL_SHIFT), SIM_SOPT4_FTM0CLKSEL_SHIFT, SIM_SOPT4_FTM0CLKSEL_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT4, field FTM1CLKSEL[25] (RW)
 *
 * Selects the external pin used to drive the clock to the FTM1 module. The
 * selected pin must also be configured for the FTM external clock function through
 * the appropriate pin control register in the port control module.
 *
 * Values:
 * - 0b0 - FTM_CLK0 pin
 * - 0b1 - FTM_CLK1 pin
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT4_FTM1CLKSEL field. */
#define SIM_RD_SOPT4_FTM1CLKSEL(base) ((SIM_SOPT4_REG(base) & SIM_SOPT4_FTM1CLKSEL_MASK) >> SIM_SOPT4_FTM1CLKSEL_SHIFT)
#define SIM_BRD_SOPT4_FTM1CLKSEL(base) (BME_UBFX32(&SIM_SOPT4_REG(base), SIM_SOPT4_FTM1CLKSEL_SHIFT, SIM_SOPT4_FTM1CLKSEL_WIDTH))

/*! @brief Set the FTM1CLKSEL field to a new value. */
#define SIM_WR_SOPT4_FTM1CLKSEL(base, value) (SIM_RMW_SOPT4(base, SIM_SOPT4_FTM1CLKSEL_MASK, SIM_SOPT4_FTM1CLKSEL(value)))
#define SIM_BWR_SOPT4_FTM1CLKSEL(base, value) (BME_BFI32(&SIM_SOPT4_REG(base), ((uint32_t)(value) << SIM_SOPT4_FTM1CLKSEL_SHIFT), SIM_SOPT4_FTM1CLKSEL_SHIFT, SIM_SOPT4_FTM1CLKSEL_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT4, field FTM2CLKSEL[26] (RW)
 *
 * Selects the external pin used to drive the clock to the FTM2 module. The
 * selected pin must also be configured for the FTM2 module external clock function
 * through the appropriate pin control register in the port control module.
 *
 * Values:
 * - 0b0 - FTM2 external clock driven by FTM_CLK0 pin.
 * - 0b1 - FTM2 external clock driven by FTM_CLK1 pin.
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT4_FTM2CLKSEL field. */
#define SIM_RD_SOPT4_FTM2CLKSEL(base) ((SIM_SOPT4_REG(base) & SIM_SOPT4_FTM2CLKSEL_MASK) >> SIM_SOPT4_FTM2CLKSEL_SHIFT)
#define SIM_BRD_SOPT4_FTM2CLKSEL(base) (BME_UBFX32(&SIM_SOPT4_REG(base), SIM_SOPT4_FTM2CLKSEL_SHIFT, SIM_SOPT4_FTM2CLKSEL_WIDTH))

/*! @brief Set the FTM2CLKSEL field to a new value. */
#define SIM_WR_SOPT4_FTM2CLKSEL(base, value) (SIM_RMW_SOPT4(base, SIM_SOPT4_FTM2CLKSEL_MASK, SIM_SOPT4_FTM2CLKSEL(value)))
#define SIM_BWR_SOPT4_FTM2CLKSEL(base, value) (BME_BFI32(&SIM_SOPT4_REG(base), ((uint32_t)(value) << SIM_SOPT4_FTM2CLKSEL_SHIFT), SIM_SOPT4_FTM2CLKSEL_SHIFT, SIM_SOPT4_FTM2CLKSEL_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT4, field FTM3CLKSEL[27] (RW)
 *
 * Selects the external pin used to drive the clock to the FTM3 module. The
 * selected pin must also be configured for the FTM3 module external clock function
 * through the appropriate pin control register in the port control module.
 *
 * Values:
 * - 0b0 - FTM3 external clock driven by FTM_CLK0 pin.
 * - 0b1 - FTM3 external clock driven by FTM_CLK1 pin.
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT4_FTM3CLKSEL field. */
#define SIM_RD_SOPT4_FTM3CLKSEL(base) ((SIM_SOPT4_REG(base) & SIM_SOPT4_FTM3CLKSEL_MASK) >> SIM_SOPT4_FTM3CLKSEL_SHIFT)
#define SIM_BRD_SOPT4_FTM3CLKSEL(base) (BME_UBFX32(&SIM_SOPT4_REG(base), SIM_SOPT4_FTM3CLKSEL_SHIFT, SIM_SOPT4_FTM3CLKSEL_WIDTH))

/*! @brief Set the FTM3CLKSEL field to a new value. */
#define SIM_WR_SOPT4_FTM3CLKSEL(base, value) (SIM_RMW_SOPT4(base, SIM_SOPT4_FTM3CLKSEL_MASK, SIM_SOPT4_FTM3CLKSEL(value)))
#define SIM_BWR_SOPT4_FTM3CLKSEL(base, value) (BME_BFI32(&SIM_SOPT4_REG(base), ((uint32_t)(value) << SIM_SOPT4_FTM3CLKSEL_SHIFT), SIM_SOPT4_FTM3CLKSEL_SHIFT, SIM_SOPT4_FTM3CLKSEL_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT4, field FTM0TRG0SRC[28] (RW)
 *
 * Selects the source of FTM0 hardware trigger 0.
 *
 * Values:
 * - 0b0 - HSCMP0 output drives FTM0 hardware trigger 0
 * - 0b1 - FTM1 channel match drives FTM0 hardware trigger 0
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT4_FTM0TRG0SRC field. */
#define SIM_RD_SOPT4_FTM0TRG0SRC(base) ((SIM_SOPT4_REG(base) & SIM_SOPT4_FTM0TRG0SRC_MASK) >> SIM_SOPT4_FTM0TRG0SRC_SHIFT)
#define SIM_BRD_SOPT4_FTM0TRG0SRC(base) (BME_UBFX32(&SIM_SOPT4_REG(base), SIM_SOPT4_FTM0TRG0SRC_SHIFT, SIM_SOPT4_FTM0TRG0SRC_WIDTH))

/*! @brief Set the FTM0TRG0SRC field to a new value. */
#define SIM_WR_SOPT4_FTM0TRG0SRC(base, value) (SIM_RMW_SOPT4(base, SIM_SOPT4_FTM0TRG0SRC_MASK, SIM_SOPT4_FTM0TRG0SRC(value)))
#define SIM_BWR_SOPT4_FTM0TRG0SRC(base, value) (BME_BFI32(&SIM_SOPT4_REG(base), ((uint32_t)(value) << SIM_SOPT4_FTM0TRG0SRC_SHIFT), SIM_SOPT4_FTM0TRG0SRC_SHIFT, SIM_SOPT4_FTM0TRG0SRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT4, field FTM0TRG1SRC[29] (RW)
 *
 * Selects the source of FTM0 hardware trigger 1.
 *
 * Values:
 * - 0b0 - PDB output trigger 1 drives FTM0 hardware trigger 1
 * - 0b1 - FTM2 channel match drives FTM0 hardware trigger 1
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT4_FTM0TRG1SRC field. */
#define SIM_RD_SOPT4_FTM0TRG1SRC(base) ((SIM_SOPT4_REG(base) & SIM_SOPT4_FTM0TRG1SRC_MASK) >> SIM_SOPT4_FTM0TRG1SRC_SHIFT)
#define SIM_BRD_SOPT4_FTM0TRG1SRC(base) (BME_UBFX32(&SIM_SOPT4_REG(base), SIM_SOPT4_FTM0TRG1SRC_SHIFT, SIM_SOPT4_FTM0TRG1SRC_WIDTH))

/*! @brief Set the FTM0TRG1SRC field to a new value. */
#define SIM_WR_SOPT4_FTM0TRG1SRC(base, value) (SIM_RMW_SOPT4(base, SIM_SOPT4_FTM0TRG1SRC_MASK, SIM_SOPT4_FTM0TRG1SRC(value)))
#define SIM_BWR_SOPT4_FTM0TRG1SRC(base, value) (BME_BFI32(&SIM_SOPT4_REG(base), ((uint32_t)(value) << SIM_SOPT4_FTM0TRG1SRC_SHIFT), SIM_SOPT4_FTM0TRG1SRC_SHIFT, SIM_SOPT4_FTM0TRG1SRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT4, field FTM3TRG0SRC[30] (RW)
 *
 * Selects the source of FTM3 hardware trigger 0.
 *
 * Values:
 * - 0b0 - Reserved
 * - 0b1 - FTM1 channel match drives FTM3 hardware trigger 0
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT4_FTM3TRG0SRC field. */
#define SIM_RD_SOPT4_FTM3TRG0SRC(base) ((SIM_SOPT4_REG(base) & SIM_SOPT4_FTM3TRG0SRC_MASK) >> SIM_SOPT4_FTM3TRG0SRC_SHIFT)
#define SIM_BRD_SOPT4_FTM3TRG0SRC(base) (BME_UBFX32(&SIM_SOPT4_REG(base), SIM_SOPT4_FTM3TRG0SRC_SHIFT, SIM_SOPT4_FTM3TRG0SRC_WIDTH))

/*! @brief Set the FTM3TRG0SRC field to a new value. */
#define SIM_WR_SOPT4_FTM3TRG0SRC(base, value) (SIM_RMW_SOPT4(base, SIM_SOPT4_FTM3TRG0SRC_MASK, SIM_SOPT4_FTM3TRG0SRC(value)))
#define SIM_BWR_SOPT4_FTM3TRG0SRC(base, value) (BME_BFI32(&SIM_SOPT4_REG(base), ((uint32_t)(value) << SIM_SOPT4_FTM3TRG0SRC_SHIFT), SIM_SOPT4_FTM3TRG0SRC_SHIFT, SIM_SOPT4_FTM3TRG0SRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT4, field FTM3TRG1SRC[31] (RW)
 *
 * Selects the source of FTM3 hardware trigger 1.
 *
 * Values:
 * - 0b0 - Reserved
 * - 0b1 - FTM2 channel match drives FTM3 hardware trigger 1
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT4_FTM3TRG1SRC field. */
#define SIM_RD_SOPT4_FTM3TRG1SRC(base) ((SIM_SOPT4_REG(base) & SIM_SOPT4_FTM3TRG1SRC_MASK) >> SIM_SOPT4_FTM3TRG1SRC_SHIFT)
#define SIM_BRD_SOPT4_FTM3TRG1SRC(base) (BME_UBFX32(&SIM_SOPT4_REG(base), SIM_SOPT4_FTM3TRG1SRC_SHIFT, SIM_SOPT4_FTM3TRG1SRC_WIDTH))

/*! @brief Set the FTM3TRG1SRC field to a new value. */
#define SIM_WR_SOPT4_FTM3TRG1SRC(base, value) (SIM_RMW_SOPT4(base, SIM_SOPT4_FTM3TRG1SRC_MASK, SIM_SOPT4_FTM3TRG1SRC(value)))
#define SIM_BWR_SOPT4_FTM3TRG1SRC(base, value) (BME_BFI32(&SIM_SOPT4_REG(base), ((uint32_t)(value) << SIM_SOPT4_FTM3TRG1SRC_SHIFT), SIM_SOPT4_FTM3TRG1SRC_SHIFT, SIM_SOPT4_FTM3TRG1SRC_WIDTH))
/*@}*/

/*******************************************************************************
 * SIM_SOPT5 - System Options Register 5
 ******************************************************************************/

/*!
 * @brief SIM_SOPT5 - System Options Register 5 (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire SIM_SOPT5 register
 */
/*@{*/
#define SIM_RD_SOPT5(base)       (SIM_SOPT5_REG(base))
#define SIM_WR_SOPT5(base, value) (SIM_SOPT5_REG(base) = (value))
#define SIM_RMW_SOPT5(base, mask, value) (SIM_WR_SOPT5(base, (SIM_RD_SOPT5(base) & ~(mask)) | (value)))
#define SIM_SET_SOPT5(base, value) (BME_OR32(&SIM_SOPT5_REG(base), (uint32_t)(value)))
#define SIM_CLR_SOPT5(base, value) (BME_AND32(&SIM_SOPT5_REG(base), (uint32_t)(~(value))))
#define SIM_TOG_SOPT5(base, value) (BME_XOR32(&SIM_SOPT5_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SIM_SOPT5 bitfields
 */

/*!
 * @name Register SIM_SOPT5, field LPUART0TXSRC[17:16] (RW)
 *
 * Selects the source for the LPUART0 transmit data.
 *
 * Values:
 * - 0b00 - LPUART0_TX pin
 * - 0b01 - LPUART0_TX pin modulated with TPM1 channel 0 output
 * - 0b10 - LPUART0_TX pin modulated with TPM2 channel 0 output
 * - 0b11 - Reserved
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT5_LPUART0TXSRC field. */
#define SIM_RD_SOPT5_LPUART0TXSRC(base) ((SIM_SOPT5_REG(base) & SIM_SOPT5_LPUART0TXSRC_MASK) >> SIM_SOPT5_LPUART0TXSRC_SHIFT)
#define SIM_BRD_SOPT5_LPUART0TXSRC(base) (BME_UBFX32(&SIM_SOPT5_REG(base), SIM_SOPT5_LPUART0TXSRC_SHIFT, SIM_SOPT5_LPUART0TXSRC_WIDTH))

/*! @brief Set the LPUART0TXSRC field to a new value. */
#define SIM_WR_SOPT5_LPUART0TXSRC(base, value) (SIM_RMW_SOPT5(base, SIM_SOPT5_LPUART0TXSRC_MASK, SIM_SOPT5_LPUART0TXSRC(value)))
#define SIM_BWR_SOPT5_LPUART0TXSRC(base, value) (BME_BFI32(&SIM_SOPT5_REG(base), ((uint32_t)(value) << SIM_SOPT5_LPUART0TXSRC_SHIFT), SIM_SOPT5_LPUART0TXSRC_SHIFT, SIM_SOPT5_LPUART0TXSRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT5, field LPUART0RXSRC[19:18] (RW)
 *
 * Selects the source for the LPUART0 receive data.
 *
 * Values:
 * - 0b00 - LPUART0_RX pin
 * - 0b01 - CMP0 output
 * - 0b10 - CMP1 output
 * - 0b11 - Reserved
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT5_LPUART0RXSRC field. */
#define SIM_RD_SOPT5_LPUART0RXSRC(base) ((SIM_SOPT5_REG(base) & SIM_SOPT5_LPUART0RXSRC_MASK) >> SIM_SOPT5_LPUART0RXSRC_SHIFT)
#define SIM_BRD_SOPT5_LPUART0RXSRC(base) (BME_UBFX32(&SIM_SOPT5_REG(base), SIM_SOPT5_LPUART0RXSRC_SHIFT, SIM_SOPT5_LPUART0RXSRC_WIDTH))

/*! @brief Set the LPUART0RXSRC field to a new value. */
#define SIM_WR_SOPT5_LPUART0RXSRC(base, value) (SIM_RMW_SOPT5(base, SIM_SOPT5_LPUART0RXSRC_MASK, SIM_SOPT5_LPUART0RXSRC(value)))
#define SIM_BWR_SOPT5_LPUART0RXSRC(base, value) (BME_BFI32(&SIM_SOPT5_REG(base), ((uint32_t)(value) << SIM_SOPT5_LPUART0RXSRC_SHIFT), SIM_SOPT5_LPUART0RXSRC_SHIFT, SIM_SOPT5_LPUART0RXSRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT5, field LPUART1TXSRC[21:20] (RW)
 *
 * Selects the source for the LPUART0 transmit data.
 *
 * Values:
 * - 0b00 - LPUART1_TX pin
 * - 0b01 - LPUART1_TX pin modulated with TPM1 channel 0 output
 * - 0b10 - LPUART0_TX pin modulated with TPM2 channel 0 output
 * - 0b11 - Reserved
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT5_LPUART1TXSRC field. */
#define SIM_RD_SOPT5_LPUART1TXSRC(base) ((SIM_SOPT5_REG(base) & SIM_SOPT5_LPUART1TXSRC_MASK) >> SIM_SOPT5_LPUART1TXSRC_SHIFT)
#define SIM_BRD_SOPT5_LPUART1TXSRC(base) (BME_UBFX32(&SIM_SOPT5_REG(base), SIM_SOPT5_LPUART1TXSRC_SHIFT, SIM_SOPT5_LPUART1TXSRC_WIDTH))

/*! @brief Set the LPUART1TXSRC field to a new value. */
#define SIM_WR_SOPT5_LPUART1TXSRC(base, value) (SIM_RMW_SOPT5(base, SIM_SOPT5_LPUART1TXSRC_MASK, SIM_SOPT5_LPUART1TXSRC(value)))
#define SIM_BWR_SOPT5_LPUART1TXSRC(base, value) (BME_BFI32(&SIM_SOPT5_REG(base), ((uint32_t)(value) << SIM_SOPT5_LPUART1TXSRC_SHIFT), SIM_SOPT5_LPUART1TXSRC_SHIFT, SIM_SOPT5_LPUART1TXSRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT5, field LPUART1RXSRC[23:22] (RW)
 *
 * Selects the source for the LPUART1 receive data.
 *
 * Values:
 * - 0b00 - LPUART1_RX pin
 * - 0b01 - CMP0 output
 * - 0b10 - CMP1 output
 * - 0b11 - Reserved
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT5_LPUART1RXSRC field. */
#define SIM_RD_SOPT5_LPUART1RXSRC(base) ((SIM_SOPT5_REG(base) & SIM_SOPT5_LPUART1RXSRC_MASK) >> SIM_SOPT5_LPUART1RXSRC_SHIFT)
#define SIM_BRD_SOPT5_LPUART1RXSRC(base) (BME_UBFX32(&SIM_SOPT5_REG(base), SIM_SOPT5_LPUART1RXSRC_SHIFT, SIM_SOPT5_LPUART1RXSRC_WIDTH))

/*! @brief Set the LPUART1RXSRC field to a new value. */
#define SIM_WR_SOPT5_LPUART1RXSRC(base, value) (SIM_RMW_SOPT5(base, SIM_SOPT5_LPUART1RXSRC_MASK, SIM_SOPT5_LPUART1RXSRC(value)))
#define SIM_BWR_SOPT5_LPUART1RXSRC(base, value) (BME_BFI32(&SIM_SOPT5_REG(base), ((uint32_t)(value) << SIM_SOPT5_LPUART1RXSRC_SHIFT), SIM_SOPT5_LPUART1RXSRC_SHIFT, SIM_SOPT5_LPUART1RXSRC_WIDTH))
/*@}*/

/*******************************************************************************
 * SIM_SOPT7 - System Options Register 7
 ******************************************************************************/

/*!
 * @brief SIM_SOPT7 - System Options Register 7 (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire SIM_SOPT7 register
 */
/*@{*/
#define SIM_RD_SOPT7(base)       (SIM_SOPT7_REG(base))
#define SIM_WR_SOPT7(base, value) (SIM_SOPT7_REG(base) = (value))
#define SIM_RMW_SOPT7(base, mask, value) (SIM_WR_SOPT7(base, (SIM_RD_SOPT7(base) & ~(mask)) | (value)))
#define SIM_SET_SOPT7(base, value) (BME_OR32(&SIM_SOPT7_REG(base), (uint32_t)(value)))
#define SIM_CLR_SOPT7(base, value) (BME_AND32(&SIM_SOPT7_REG(base), (uint32_t)(~(value))))
#define SIM_TOG_SOPT7(base, value) (BME_XOR32(&SIM_SOPT7_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SIM_SOPT7 bitfields
 */

/*!
 * @name Register SIM_SOPT7, field ADC0TRGSEL[3:0] (RW)
 *
 * Selects the ADC0 trigger source when alternative triggers are functional in
 * stop and VLPS modes. .
 *
 * Values:
 * - 0b0000 - PDB external trigger pin input (PDB0_EXTRG)
 * - 0b0001 - High speed comparator 0 output
 * - 0b0010 - High speed comparator 1 output
 * - 0b0011 - Reserved
 * - 0b0100 - PIT trigger 0
 * - 0b0101 - PIT trigger 1
 * - 0b0110 - PIT trigger 2
 * - 0b0111 - PIT trigger 3
 * - 0b1000 - FTM0 trigger
 * - 0b1001 - FTM1 trigger
 * - 0b1010 - FTM2 trigger
 * - 0b1011 - FTM3 trigger
 * - 0b1100 - RTC alarm
 * - 0b1101 - RTC seconds
 * - 0b1110 - Low-power timer (LPTMR) trigger
 * - 0b1111 - TPM1 channel 0 (A pretrigger) and channel 1 (B pretrigger)
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT7_ADC0TRGSEL field. */
#define SIM_RD_SOPT7_ADC0TRGSEL(base) ((SIM_SOPT7_REG(base) & SIM_SOPT7_ADC0TRGSEL_MASK) >> SIM_SOPT7_ADC0TRGSEL_SHIFT)
#define SIM_BRD_SOPT7_ADC0TRGSEL(base) (BME_UBFX32(&SIM_SOPT7_REG(base), SIM_SOPT7_ADC0TRGSEL_SHIFT, SIM_SOPT7_ADC0TRGSEL_WIDTH))

/*! @brief Set the ADC0TRGSEL field to a new value. */
#define SIM_WR_SOPT7_ADC0TRGSEL(base, value) (SIM_RMW_SOPT7(base, SIM_SOPT7_ADC0TRGSEL_MASK, SIM_SOPT7_ADC0TRGSEL(value)))
#define SIM_BWR_SOPT7_ADC0TRGSEL(base, value) (BME_BFI32(&SIM_SOPT7_REG(base), ((uint32_t)(value) << SIM_SOPT7_ADC0TRGSEL_SHIFT), SIM_SOPT7_ADC0TRGSEL_SHIFT, SIM_SOPT7_ADC0TRGSEL_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT7, field ADC0PRETRGSEL[4] (RW)
 *
 * Selects the ADC0 pre-trigger source when alternative triggers are enabled
 * through ADC0ALTTRGEN. This field is not used when the TPM trigger source is
 * selected.
 *
 * Values:
 * - 0b0 - Pre-trigger A
 * - 0b1 - Pre-trigger B
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT7_ADC0PRETRGSEL field. */
#define SIM_RD_SOPT7_ADC0PRETRGSEL(base) ((SIM_SOPT7_REG(base) & SIM_SOPT7_ADC0PRETRGSEL_MASK) >> SIM_SOPT7_ADC0PRETRGSEL_SHIFT)
#define SIM_BRD_SOPT7_ADC0PRETRGSEL(base) (BME_UBFX32(&SIM_SOPT7_REG(base), SIM_SOPT7_ADC0PRETRGSEL_SHIFT, SIM_SOPT7_ADC0PRETRGSEL_WIDTH))

/*! @brief Set the ADC0PRETRGSEL field to a new value. */
#define SIM_WR_SOPT7_ADC0PRETRGSEL(base, value) (SIM_RMW_SOPT7(base, SIM_SOPT7_ADC0PRETRGSEL_MASK, SIM_SOPT7_ADC0PRETRGSEL(value)))
#define SIM_BWR_SOPT7_ADC0PRETRGSEL(base, value) (BME_BFI32(&SIM_SOPT7_REG(base), ((uint32_t)(value) << SIM_SOPT7_ADC0PRETRGSEL_SHIFT), SIM_SOPT7_ADC0PRETRGSEL_SHIFT, SIM_SOPT7_ADC0PRETRGSEL_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT7, field ADC0ALTTRGEN[7] (RW)
 *
 * Enable alternative conversion triggers for ADC0.
 *
 * Values:
 * - 0b0 - PDB trigger selected for ADC0.
 * - 0b1 - Alternate trigger selected for ADC0.
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT7_ADC0ALTTRGEN field. */
#define SIM_RD_SOPT7_ADC0ALTTRGEN(base) ((SIM_SOPT7_REG(base) & SIM_SOPT7_ADC0ALTTRGEN_MASK) >> SIM_SOPT7_ADC0ALTTRGEN_SHIFT)
#define SIM_BRD_SOPT7_ADC0ALTTRGEN(base) (BME_UBFX32(&SIM_SOPT7_REG(base), SIM_SOPT7_ADC0ALTTRGEN_SHIFT, SIM_SOPT7_ADC0ALTTRGEN_WIDTH))

/*! @brief Set the ADC0ALTTRGEN field to a new value. */
#define SIM_WR_SOPT7_ADC0ALTTRGEN(base, value) (SIM_RMW_SOPT7(base, SIM_SOPT7_ADC0ALTTRGEN_MASK, SIM_SOPT7_ADC0ALTTRGEN(value)))
#define SIM_BWR_SOPT7_ADC0ALTTRGEN(base, value) (BME_BFI32(&SIM_SOPT7_REG(base), ((uint32_t)(value) << SIM_SOPT7_ADC0ALTTRGEN_SHIFT), SIM_SOPT7_ADC0ALTTRGEN_SHIFT, SIM_SOPT7_ADC0ALTTRGEN_WIDTH))
/*@}*/

/*******************************************************************************
 * SIM_SOPT8 - System Options Register 8
 ******************************************************************************/

/*!
 * @brief SIM_SOPT8 - System Options Register 8 (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire SIM_SOPT8 register
 */
/*@{*/
#define SIM_RD_SOPT8(base)       (SIM_SOPT8_REG(base))
#define SIM_WR_SOPT8(base, value) (SIM_SOPT8_REG(base) = (value))
#define SIM_RMW_SOPT8(base, mask, value) (SIM_WR_SOPT8(base, (SIM_RD_SOPT8(base) & ~(mask)) | (value)))
#define SIM_SET_SOPT8(base, value) (BME_OR32(&SIM_SOPT8_REG(base), (uint32_t)(value)))
#define SIM_CLR_SOPT8(base, value) (BME_AND32(&SIM_SOPT8_REG(base), (uint32_t)(~(value))))
#define SIM_TOG_SOPT8(base, value) (BME_XOR32(&SIM_SOPT8_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SIM_SOPT8 bitfields
 */

/*!
 * @name Register SIM_SOPT8, field FTM0SYNCBIT[0] (RW)
 *
 * Values:
 * - 0b0 - No effect
 * - 0b1 - Write 1 to assert the TRIG0 input to FTM0, software must clear this
 *     bit to allow other trigger sources to assert.
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT8_FTM0SYNCBIT field. */
#define SIM_RD_SOPT8_FTM0SYNCBIT(base) ((SIM_SOPT8_REG(base) & SIM_SOPT8_FTM0SYNCBIT_MASK) >> SIM_SOPT8_FTM0SYNCBIT_SHIFT)
#define SIM_BRD_SOPT8_FTM0SYNCBIT(base) (BME_UBFX32(&SIM_SOPT8_REG(base), SIM_SOPT8_FTM0SYNCBIT_SHIFT, SIM_SOPT8_FTM0SYNCBIT_WIDTH))

/*! @brief Set the FTM0SYNCBIT field to a new value. */
#define SIM_WR_SOPT8_FTM0SYNCBIT(base, value) (SIM_RMW_SOPT8(base, SIM_SOPT8_FTM0SYNCBIT_MASK, SIM_SOPT8_FTM0SYNCBIT(value)))
#define SIM_BWR_SOPT8_FTM0SYNCBIT(base, value) (BME_BFI32(&SIM_SOPT8_REG(base), ((uint32_t)(value) << SIM_SOPT8_FTM0SYNCBIT_SHIFT), SIM_SOPT8_FTM0SYNCBIT_SHIFT, SIM_SOPT8_FTM0SYNCBIT_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT8, field FTM1SYNCBIT[1] (RW)
 *
 * Values:
 * - 0b0 - No effect.
 * - 0b1 - Write 1 to assert the TRIG0 input to FTM1, software must clear this
 *     bit to allow other trigger sources to assert.
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT8_FTM1SYNCBIT field. */
#define SIM_RD_SOPT8_FTM1SYNCBIT(base) ((SIM_SOPT8_REG(base) & SIM_SOPT8_FTM1SYNCBIT_MASK) >> SIM_SOPT8_FTM1SYNCBIT_SHIFT)
#define SIM_BRD_SOPT8_FTM1SYNCBIT(base) (BME_UBFX32(&SIM_SOPT8_REG(base), SIM_SOPT8_FTM1SYNCBIT_SHIFT, SIM_SOPT8_FTM1SYNCBIT_WIDTH))

/*! @brief Set the FTM1SYNCBIT field to a new value. */
#define SIM_WR_SOPT8_FTM1SYNCBIT(base, value) (SIM_RMW_SOPT8(base, SIM_SOPT8_FTM1SYNCBIT_MASK, SIM_SOPT8_FTM1SYNCBIT(value)))
#define SIM_BWR_SOPT8_FTM1SYNCBIT(base, value) (BME_BFI32(&SIM_SOPT8_REG(base), ((uint32_t)(value) << SIM_SOPT8_FTM1SYNCBIT_SHIFT), SIM_SOPT8_FTM1SYNCBIT_SHIFT, SIM_SOPT8_FTM1SYNCBIT_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT8, field FTM2SYNCBIT[2] (RW)
 *
 * Values:
 * - 0b0 - No effect.
 * - 0b1 - Write 1 to assert the TRIG0 input to FTM2, software must clear this
 *     bit to allow other trigger sources to assert.
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT8_FTM2SYNCBIT field. */
#define SIM_RD_SOPT8_FTM2SYNCBIT(base) ((SIM_SOPT8_REG(base) & SIM_SOPT8_FTM2SYNCBIT_MASK) >> SIM_SOPT8_FTM2SYNCBIT_SHIFT)
#define SIM_BRD_SOPT8_FTM2SYNCBIT(base) (BME_UBFX32(&SIM_SOPT8_REG(base), SIM_SOPT8_FTM2SYNCBIT_SHIFT, SIM_SOPT8_FTM2SYNCBIT_WIDTH))

/*! @brief Set the FTM2SYNCBIT field to a new value. */
#define SIM_WR_SOPT8_FTM2SYNCBIT(base, value) (SIM_RMW_SOPT8(base, SIM_SOPT8_FTM2SYNCBIT_MASK, SIM_SOPT8_FTM2SYNCBIT(value)))
#define SIM_BWR_SOPT8_FTM2SYNCBIT(base, value) (BME_BFI32(&SIM_SOPT8_REG(base), ((uint32_t)(value) << SIM_SOPT8_FTM2SYNCBIT_SHIFT), SIM_SOPT8_FTM2SYNCBIT_SHIFT, SIM_SOPT8_FTM2SYNCBIT_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT8, field FTM3SYNCBIT[3] (RW)
 *
 * Values:
 * - 0b0 - No effect.
 * - 0b1 - Write 1 to assert the TRIG0 input to FTM3, software must clear this
 *     bit to allow other trigger sources to assert.
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT8_FTM3SYNCBIT field. */
#define SIM_RD_SOPT8_FTM3SYNCBIT(base) ((SIM_SOPT8_REG(base) & SIM_SOPT8_FTM3SYNCBIT_MASK) >> SIM_SOPT8_FTM3SYNCBIT_SHIFT)
#define SIM_BRD_SOPT8_FTM3SYNCBIT(base) (BME_UBFX32(&SIM_SOPT8_REG(base), SIM_SOPT8_FTM3SYNCBIT_SHIFT, SIM_SOPT8_FTM3SYNCBIT_WIDTH))

/*! @brief Set the FTM3SYNCBIT field to a new value. */
#define SIM_WR_SOPT8_FTM3SYNCBIT(base, value) (SIM_RMW_SOPT8(base, SIM_SOPT8_FTM3SYNCBIT_MASK, SIM_SOPT8_FTM3SYNCBIT(value)))
#define SIM_BWR_SOPT8_FTM3SYNCBIT(base, value) (BME_BFI32(&SIM_SOPT8_REG(base), ((uint32_t)(value) << SIM_SOPT8_FTM3SYNCBIT_SHIFT), SIM_SOPT8_FTM3SYNCBIT_SHIFT, SIM_SOPT8_FTM3SYNCBIT_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT8, field FTM0OCH0SRC[16] (RW)
 *
 * Values:
 * - 0b0 - FTM0_CH0 pin is output of FTM0 channel 0 output
 * - 0b1 - FTM0_CH0 pin is output of FTM0 channel 0 output, modulated by FTM1
 *     channel 1 output
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT8_FTM0OCH0SRC field. */
#define SIM_RD_SOPT8_FTM0OCH0SRC(base) ((SIM_SOPT8_REG(base) & SIM_SOPT8_FTM0OCH0SRC_MASK) >> SIM_SOPT8_FTM0OCH0SRC_SHIFT)
#define SIM_BRD_SOPT8_FTM0OCH0SRC(base) (BME_UBFX32(&SIM_SOPT8_REG(base), SIM_SOPT8_FTM0OCH0SRC_SHIFT, SIM_SOPT8_FTM0OCH0SRC_WIDTH))

/*! @brief Set the FTM0OCH0SRC field to a new value. */
#define SIM_WR_SOPT8_FTM0OCH0SRC(base, value) (SIM_RMW_SOPT8(base, SIM_SOPT8_FTM0OCH0SRC_MASK, SIM_SOPT8_FTM0OCH0SRC(value)))
#define SIM_BWR_SOPT8_FTM0OCH0SRC(base, value) (BME_BFI32(&SIM_SOPT8_REG(base), ((uint32_t)(value) << SIM_SOPT8_FTM0OCH0SRC_SHIFT), SIM_SOPT8_FTM0OCH0SRC_SHIFT, SIM_SOPT8_FTM0OCH0SRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT8, field FTM0OCH1SRC[17] (RW)
 *
 * Values:
 * - 0b0 - FTM0_CH1 pin is output of FTM0 channel 1 output
 * - 0b1 - FTM0_CH1 pin is output of FTM0 channel 1 output, modulated by FTM1
 *     channel 1 output
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT8_FTM0OCH1SRC field. */
#define SIM_RD_SOPT8_FTM0OCH1SRC(base) ((SIM_SOPT8_REG(base) & SIM_SOPT8_FTM0OCH1SRC_MASK) >> SIM_SOPT8_FTM0OCH1SRC_SHIFT)
#define SIM_BRD_SOPT8_FTM0OCH1SRC(base) (BME_UBFX32(&SIM_SOPT8_REG(base), SIM_SOPT8_FTM0OCH1SRC_SHIFT, SIM_SOPT8_FTM0OCH1SRC_WIDTH))

/*! @brief Set the FTM0OCH1SRC field to a new value. */
#define SIM_WR_SOPT8_FTM0OCH1SRC(base, value) (SIM_RMW_SOPT8(base, SIM_SOPT8_FTM0OCH1SRC_MASK, SIM_SOPT8_FTM0OCH1SRC(value)))
#define SIM_BWR_SOPT8_FTM0OCH1SRC(base, value) (BME_BFI32(&SIM_SOPT8_REG(base), ((uint32_t)(value) << SIM_SOPT8_FTM0OCH1SRC_SHIFT), SIM_SOPT8_FTM0OCH1SRC_SHIFT, SIM_SOPT8_FTM0OCH1SRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT8, field FTM0OCH2SRC[18] (RW)
 *
 * Values:
 * - 0b0 - FTM0_CH2 pin is output of FTM0 channel 2 output
 * - 0b1 - FTM0_CH2 pin is output of FTM0 channel 2 output, modulated by FTM1
 *     channel 1 output
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT8_FTM0OCH2SRC field. */
#define SIM_RD_SOPT8_FTM0OCH2SRC(base) ((SIM_SOPT8_REG(base) & SIM_SOPT8_FTM0OCH2SRC_MASK) >> SIM_SOPT8_FTM0OCH2SRC_SHIFT)
#define SIM_BRD_SOPT8_FTM0OCH2SRC(base) (BME_UBFX32(&SIM_SOPT8_REG(base), SIM_SOPT8_FTM0OCH2SRC_SHIFT, SIM_SOPT8_FTM0OCH2SRC_WIDTH))

/*! @brief Set the FTM0OCH2SRC field to a new value. */
#define SIM_WR_SOPT8_FTM0OCH2SRC(base, value) (SIM_RMW_SOPT8(base, SIM_SOPT8_FTM0OCH2SRC_MASK, SIM_SOPT8_FTM0OCH2SRC(value)))
#define SIM_BWR_SOPT8_FTM0OCH2SRC(base, value) (BME_BFI32(&SIM_SOPT8_REG(base), ((uint32_t)(value) << SIM_SOPT8_FTM0OCH2SRC_SHIFT), SIM_SOPT8_FTM0OCH2SRC_SHIFT, SIM_SOPT8_FTM0OCH2SRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT8, field FTM0OCH3SRC[19] (RW)
 *
 * Values:
 * - 0b0 - FTM0_CH3 pin is output of FTM0 channel 3 output
 * - 0b1 - FTM0_CH3 pin is output of FTM0 channel 3 output, modulated by FTM1
 *     channel 1 output
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT8_FTM0OCH3SRC field. */
#define SIM_RD_SOPT8_FTM0OCH3SRC(base) ((SIM_SOPT8_REG(base) & SIM_SOPT8_FTM0OCH3SRC_MASK) >> SIM_SOPT8_FTM0OCH3SRC_SHIFT)
#define SIM_BRD_SOPT8_FTM0OCH3SRC(base) (BME_UBFX32(&SIM_SOPT8_REG(base), SIM_SOPT8_FTM0OCH3SRC_SHIFT, SIM_SOPT8_FTM0OCH3SRC_WIDTH))

/*! @brief Set the FTM0OCH3SRC field to a new value. */
#define SIM_WR_SOPT8_FTM0OCH3SRC(base, value) (SIM_RMW_SOPT8(base, SIM_SOPT8_FTM0OCH3SRC_MASK, SIM_SOPT8_FTM0OCH3SRC(value)))
#define SIM_BWR_SOPT8_FTM0OCH3SRC(base, value) (BME_BFI32(&SIM_SOPT8_REG(base), ((uint32_t)(value) << SIM_SOPT8_FTM0OCH3SRC_SHIFT), SIM_SOPT8_FTM0OCH3SRC_SHIFT, SIM_SOPT8_FTM0OCH3SRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT8, field FTM0OCH4SRC[20] (RW)
 *
 * Values:
 * - 0b0 - FTM0_CH4 pin is output of FTM0 channel 4 output
 * - 0b1 - FTM0_CH4 pin is output of FTM0 channel 4 output, modulated by FTM1
 *     channel 1 output
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT8_FTM0OCH4SRC field. */
#define SIM_RD_SOPT8_FTM0OCH4SRC(base) ((SIM_SOPT8_REG(base) & SIM_SOPT8_FTM0OCH4SRC_MASK) >> SIM_SOPT8_FTM0OCH4SRC_SHIFT)
#define SIM_BRD_SOPT8_FTM0OCH4SRC(base) (BME_UBFX32(&SIM_SOPT8_REG(base), SIM_SOPT8_FTM0OCH4SRC_SHIFT, SIM_SOPT8_FTM0OCH4SRC_WIDTH))

/*! @brief Set the FTM0OCH4SRC field to a new value. */
#define SIM_WR_SOPT8_FTM0OCH4SRC(base, value) (SIM_RMW_SOPT8(base, SIM_SOPT8_FTM0OCH4SRC_MASK, SIM_SOPT8_FTM0OCH4SRC(value)))
#define SIM_BWR_SOPT8_FTM0OCH4SRC(base, value) (BME_BFI32(&SIM_SOPT8_REG(base), ((uint32_t)(value) << SIM_SOPT8_FTM0OCH4SRC_SHIFT), SIM_SOPT8_FTM0OCH4SRC_SHIFT, SIM_SOPT8_FTM0OCH4SRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT8, field FTM0OCH5SRC[21] (RW)
 *
 * Values:
 * - 0b0 - FTM0_CH5 pin is output of FTM0 channel 5 output
 * - 0b1 - FTM0_CH5 pin is output of FTM0 channel 5 output, modulated by FTM1
 *     channel 1 output
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT8_FTM0OCH5SRC field. */
#define SIM_RD_SOPT8_FTM0OCH5SRC(base) ((SIM_SOPT8_REG(base) & SIM_SOPT8_FTM0OCH5SRC_MASK) >> SIM_SOPT8_FTM0OCH5SRC_SHIFT)
#define SIM_BRD_SOPT8_FTM0OCH5SRC(base) (BME_UBFX32(&SIM_SOPT8_REG(base), SIM_SOPT8_FTM0OCH5SRC_SHIFT, SIM_SOPT8_FTM0OCH5SRC_WIDTH))

/*! @brief Set the FTM0OCH5SRC field to a new value. */
#define SIM_WR_SOPT8_FTM0OCH5SRC(base, value) (SIM_RMW_SOPT8(base, SIM_SOPT8_FTM0OCH5SRC_MASK, SIM_SOPT8_FTM0OCH5SRC(value)))
#define SIM_BWR_SOPT8_FTM0OCH5SRC(base, value) (BME_BFI32(&SIM_SOPT8_REG(base), ((uint32_t)(value) << SIM_SOPT8_FTM0OCH5SRC_SHIFT), SIM_SOPT8_FTM0OCH5SRC_SHIFT, SIM_SOPT8_FTM0OCH5SRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT8, field FTM0OCH6SRC[22] (RW)
 *
 * Values:
 * - 0b0 - FTM0_CH6 pin is output of FTM0 channel 6 output
 * - 0b1 - FTM0_CH6 pin is output of FTM0 channel 6 output, modulated by FTM1
 *     channel 1 output
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT8_FTM0OCH6SRC field. */
#define SIM_RD_SOPT8_FTM0OCH6SRC(base) ((SIM_SOPT8_REG(base) & SIM_SOPT8_FTM0OCH6SRC_MASK) >> SIM_SOPT8_FTM0OCH6SRC_SHIFT)
#define SIM_BRD_SOPT8_FTM0OCH6SRC(base) (BME_UBFX32(&SIM_SOPT8_REG(base), SIM_SOPT8_FTM0OCH6SRC_SHIFT, SIM_SOPT8_FTM0OCH6SRC_WIDTH))

/*! @brief Set the FTM0OCH6SRC field to a new value. */
#define SIM_WR_SOPT8_FTM0OCH6SRC(base, value) (SIM_RMW_SOPT8(base, SIM_SOPT8_FTM0OCH6SRC_MASK, SIM_SOPT8_FTM0OCH6SRC(value)))
#define SIM_BWR_SOPT8_FTM0OCH6SRC(base, value) (BME_BFI32(&SIM_SOPT8_REG(base), ((uint32_t)(value) << SIM_SOPT8_FTM0OCH6SRC_SHIFT), SIM_SOPT8_FTM0OCH6SRC_SHIFT, SIM_SOPT8_FTM0OCH6SRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT8, field FTM0OCH7SRC[23] (RW)
 *
 * Values:
 * - 0b0 - FTM0_CH7 pin is output of FTM0 channel 7 output
 * - 0b1 - FTM0_CH7 pin is output of FTM0 channel 7 output, modulated by FTM1
 *     channel 1 output
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT8_FTM0OCH7SRC field. */
#define SIM_RD_SOPT8_FTM0OCH7SRC(base) ((SIM_SOPT8_REG(base) & SIM_SOPT8_FTM0OCH7SRC_MASK) >> SIM_SOPT8_FTM0OCH7SRC_SHIFT)
#define SIM_BRD_SOPT8_FTM0OCH7SRC(base) (BME_UBFX32(&SIM_SOPT8_REG(base), SIM_SOPT8_FTM0OCH7SRC_SHIFT, SIM_SOPT8_FTM0OCH7SRC_WIDTH))

/*! @brief Set the FTM0OCH7SRC field to a new value. */
#define SIM_WR_SOPT8_FTM0OCH7SRC(base, value) (SIM_RMW_SOPT8(base, SIM_SOPT8_FTM0OCH7SRC_MASK, SIM_SOPT8_FTM0OCH7SRC(value)))
#define SIM_BWR_SOPT8_FTM0OCH7SRC(base, value) (BME_BFI32(&SIM_SOPT8_REG(base), ((uint32_t)(value) << SIM_SOPT8_FTM0OCH7SRC_SHIFT), SIM_SOPT8_FTM0OCH7SRC_SHIFT, SIM_SOPT8_FTM0OCH7SRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT8, field FTM3OCH0SRC[24] (RW)
 *
 * Values:
 * - 0b0 - FTM3_CH0 pin is output of FTM3 channel 0 output
 * - 0b1 - FTM3_CH0 pin is output of FTM3 channel 0 output modulated by FTM2
 *     channel 1 output.
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT8_FTM3OCH0SRC field. */
#define SIM_RD_SOPT8_FTM3OCH0SRC(base) ((SIM_SOPT8_REG(base) & SIM_SOPT8_FTM3OCH0SRC_MASK) >> SIM_SOPT8_FTM3OCH0SRC_SHIFT)
#define SIM_BRD_SOPT8_FTM3OCH0SRC(base) (BME_UBFX32(&SIM_SOPT8_REG(base), SIM_SOPT8_FTM3OCH0SRC_SHIFT, SIM_SOPT8_FTM3OCH0SRC_WIDTH))

/*! @brief Set the FTM3OCH0SRC field to a new value. */
#define SIM_WR_SOPT8_FTM3OCH0SRC(base, value) (SIM_RMW_SOPT8(base, SIM_SOPT8_FTM3OCH0SRC_MASK, SIM_SOPT8_FTM3OCH0SRC(value)))
#define SIM_BWR_SOPT8_FTM3OCH0SRC(base, value) (BME_BFI32(&SIM_SOPT8_REG(base), ((uint32_t)(value) << SIM_SOPT8_FTM3OCH0SRC_SHIFT), SIM_SOPT8_FTM3OCH0SRC_SHIFT, SIM_SOPT8_FTM3OCH0SRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT8, field FTM3OCH1SRC[25] (RW)
 *
 * Values:
 * - 0b0 - FTM3_CH1 pin is output of FTM3 channel 1 output
 * - 0b1 - FTM3_CH1 pin is output of FTM3 channel 1 output modulated by FTM2
 *     channel 1 output.
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT8_FTM3OCH1SRC field. */
#define SIM_RD_SOPT8_FTM3OCH1SRC(base) ((SIM_SOPT8_REG(base) & SIM_SOPT8_FTM3OCH1SRC_MASK) >> SIM_SOPT8_FTM3OCH1SRC_SHIFT)
#define SIM_BRD_SOPT8_FTM3OCH1SRC(base) (BME_UBFX32(&SIM_SOPT8_REG(base), SIM_SOPT8_FTM3OCH1SRC_SHIFT, SIM_SOPT8_FTM3OCH1SRC_WIDTH))

/*! @brief Set the FTM3OCH1SRC field to a new value. */
#define SIM_WR_SOPT8_FTM3OCH1SRC(base, value) (SIM_RMW_SOPT8(base, SIM_SOPT8_FTM3OCH1SRC_MASK, SIM_SOPT8_FTM3OCH1SRC(value)))
#define SIM_BWR_SOPT8_FTM3OCH1SRC(base, value) (BME_BFI32(&SIM_SOPT8_REG(base), ((uint32_t)(value) << SIM_SOPT8_FTM3OCH1SRC_SHIFT), SIM_SOPT8_FTM3OCH1SRC_SHIFT, SIM_SOPT8_FTM3OCH1SRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT8, field FTM3OCH2SRC[26] (RW)
 *
 * Values:
 * - 0b0 - FTM3_CH2 pin is output of FTM3 channel 2 output
 * - 0b1 - FTM3_CH2 pin is output of FTM3 channel 2 output modulated by FTM2
 *     channel 1 output.
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT8_FTM3OCH2SRC field. */
#define SIM_RD_SOPT8_FTM3OCH2SRC(base) ((SIM_SOPT8_REG(base) & SIM_SOPT8_FTM3OCH2SRC_MASK) >> SIM_SOPT8_FTM3OCH2SRC_SHIFT)
#define SIM_BRD_SOPT8_FTM3OCH2SRC(base) (BME_UBFX32(&SIM_SOPT8_REG(base), SIM_SOPT8_FTM3OCH2SRC_SHIFT, SIM_SOPT8_FTM3OCH2SRC_WIDTH))

/*! @brief Set the FTM3OCH2SRC field to a new value. */
#define SIM_WR_SOPT8_FTM3OCH2SRC(base, value) (SIM_RMW_SOPT8(base, SIM_SOPT8_FTM3OCH2SRC_MASK, SIM_SOPT8_FTM3OCH2SRC(value)))
#define SIM_BWR_SOPT8_FTM3OCH2SRC(base, value) (BME_BFI32(&SIM_SOPT8_REG(base), ((uint32_t)(value) << SIM_SOPT8_FTM3OCH2SRC_SHIFT), SIM_SOPT8_FTM3OCH2SRC_SHIFT, SIM_SOPT8_FTM3OCH2SRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT8, field FTM3OCH3SRC[27] (RW)
 *
 * Values:
 * - 0b0 - FTM3_CH3 pin is output of FTM3 channel 3 output
 * - 0b1 - FTM3_CH3 pin is output of FTM3 channel 3 output modulated by FTM2
 *     channel 1 output.
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT8_FTM3OCH3SRC field. */
#define SIM_RD_SOPT8_FTM3OCH3SRC(base) ((SIM_SOPT8_REG(base) & SIM_SOPT8_FTM3OCH3SRC_MASK) >> SIM_SOPT8_FTM3OCH3SRC_SHIFT)
#define SIM_BRD_SOPT8_FTM3OCH3SRC(base) (BME_UBFX32(&SIM_SOPT8_REG(base), SIM_SOPT8_FTM3OCH3SRC_SHIFT, SIM_SOPT8_FTM3OCH3SRC_WIDTH))

/*! @brief Set the FTM3OCH3SRC field to a new value. */
#define SIM_WR_SOPT8_FTM3OCH3SRC(base, value) (SIM_RMW_SOPT8(base, SIM_SOPT8_FTM3OCH3SRC_MASK, SIM_SOPT8_FTM3OCH3SRC(value)))
#define SIM_BWR_SOPT8_FTM3OCH3SRC(base, value) (BME_BFI32(&SIM_SOPT8_REG(base), ((uint32_t)(value) << SIM_SOPT8_FTM3OCH3SRC_SHIFT), SIM_SOPT8_FTM3OCH3SRC_SHIFT, SIM_SOPT8_FTM3OCH3SRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT8, field FTM3OCH4SRC[28] (RW)
 *
 * Values:
 * - 0b0 - FTM3_CH4 pin is output of FTM3 channel 4 output
 * - 0b1 - FTM3_CH4 pin is output of FTM3 channel 4 output modulated by FTM2
 *     channel 1 output.
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT8_FTM3OCH4SRC field. */
#define SIM_RD_SOPT8_FTM3OCH4SRC(base) ((SIM_SOPT8_REG(base) & SIM_SOPT8_FTM3OCH4SRC_MASK) >> SIM_SOPT8_FTM3OCH4SRC_SHIFT)
#define SIM_BRD_SOPT8_FTM3OCH4SRC(base) (BME_UBFX32(&SIM_SOPT8_REG(base), SIM_SOPT8_FTM3OCH4SRC_SHIFT, SIM_SOPT8_FTM3OCH4SRC_WIDTH))

/*! @brief Set the FTM3OCH4SRC field to a new value. */
#define SIM_WR_SOPT8_FTM3OCH4SRC(base, value) (SIM_RMW_SOPT8(base, SIM_SOPT8_FTM3OCH4SRC_MASK, SIM_SOPT8_FTM3OCH4SRC(value)))
#define SIM_BWR_SOPT8_FTM3OCH4SRC(base, value) (BME_BFI32(&SIM_SOPT8_REG(base), ((uint32_t)(value) << SIM_SOPT8_FTM3OCH4SRC_SHIFT), SIM_SOPT8_FTM3OCH4SRC_SHIFT, SIM_SOPT8_FTM3OCH4SRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT8, field FTM3OCH5SRC[29] (RW)
 *
 * Values:
 * - 0b0 - FTM3_CH5 pin is output of FTM3 channel 5 output
 * - 0b1 - FTM3_CH5 pin is output of FTM3 channel 5 output modulated by FTM2
 *     channel 1 output.
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT8_FTM3OCH5SRC field. */
#define SIM_RD_SOPT8_FTM3OCH5SRC(base) ((SIM_SOPT8_REG(base) & SIM_SOPT8_FTM3OCH5SRC_MASK) >> SIM_SOPT8_FTM3OCH5SRC_SHIFT)
#define SIM_BRD_SOPT8_FTM3OCH5SRC(base) (BME_UBFX32(&SIM_SOPT8_REG(base), SIM_SOPT8_FTM3OCH5SRC_SHIFT, SIM_SOPT8_FTM3OCH5SRC_WIDTH))

/*! @brief Set the FTM3OCH5SRC field to a new value. */
#define SIM_WR_SOPT8_FTM3OCH5SRC(base, value) (SIM_RMW_SOPT8(base, SIM_SOPT8_FTM3OCH5SRC_MASK, SIM_SOPT8_FTM3OCH5SRC(value)))
#define SIM_BWR_SOPT8_FTM3OCH5SRC(base, value) (BME_BFI32(&SIM_SOPT8_REG(base), ((uint32_t)(value) << SIM_SOPT8_FTM3OCH5SRC_SHIFT), SIM_SOPT8_FTM3OCH5SRC_SHIFT, SIM_SOPT8_FTM3OCH5SRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT8, field FTM3OCH6SRC[30] (RW)
 *
 * Values:
 * - 0b0 - FTM3_CH6 pin is output of FTM3 channel 6 output
 * - 0b1 - FTM3_CH6 pin is output of FTM3 channel 6 output modulated by FTM2
 *     channel 1 output.
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT8_FTM3OCH6SRC field. */
#define SIM_RD_SOPT8_FTM3OCH6SRC(base) ((SIM_SOPT8_REG(base) & SIM_SOPT8_FTM3OCH6SRC_MASK) >> SIM_SOPT8_FTM3OCH6SRC_SHIFT)
#define SIM_BRD_SOPT8_FTM3OCH6SRC(base) (BME_UBFX32(&SIM_SOPT8_REG(base), SIM_SOPT8_FTM3OCH6SRC_SHIFT, SIM_SOPT8_FTM3OCH6SRC_WIDTH))

/*! @brief Set the FTM3OCH6SRC field to a new value. */
#define SIM_WR_SOPT8_FTM3OCH6SRC(base, value) (SIM_RMW_SOPT8(base, SIM_SOPT8_FTM3OCH6SRC_MASK, SIM_SOPT8_FTM3OCH6SRC(value)))
#define SIM_BWR_SOPT8_FTM3OCH6SRC(base, value) (BME_BFI32(&SIM_SOPT8_REG(base), ((uint32_t)(value) << SIM_SOPT8_FTM3OCH6SRC_SHIFT), SIM_SOPT8_FTM3OCH6SRC_SHIFT, SIM_SOPT8_FTM3OCH6SRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT8, field FTM3OCH7SRC[31] (RW)
 *
 * Values:
 * - 0b0 - FTM3_CH7 pin is output of FTM3 channel 7 output
 * - 0b1 - FTM3_CH7 pin is output of FTM3 channel 7 output modulated by FTM2
 *     channel 1 output.
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT8_FTM3OCH7SRC field. */
#define SIM_RD_SOPT8_FTM3OCH7SRC(base) ((SIM_SOPT8_REG(base) & SIM_SOPT8_FTM3OCH7SRC_MASK) >> SIM_SOPT8_FTM3OCH7SRC_SHIFT)
#define SIM_BRD_SOPT8_FTM3OCH7SRC(base) (BME_UBFX32(&SIM_SOPT8_REG(base), SIM_SOPT8_FTM3OCH7SRC_SHIFT, SIM_SOPT8_FTM3OCH7SRC_WIDTH))

/*! @brief Set the FTM3OCH7SRC field to a new value. */
#define SIM_WR_SOPT8_FTM3OCH7SRC(base, value) (SIM_RMW_SOPT8(base, SIM_SOPT8_FTM3OCH7SRC_MASK, SIM_SOPT8_FTM3OCH7SRC(value)))
#define SIM_BWR_SOPT8_FTM3OCH7SRC(base, value) (BME_BFI32(&SIM_SOPT8_REG(base), ((uint32_t)(value) << SIM_SOPT8_FTM3OCH7SRC_SHIFT), SIM_SOPT8_FTM3OCH7SRC_SHIFT, SIM_SOPT8_FTM3OCH7SRC_WIDTH))
/*@}*/

/*******************************************************************************
 * SIM_SOPT9 - System Options Register 9
 ******************************************************************************/

/*!
 * @brief SIM_SOPT9 - System Options Register 9 (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire SIM_SOPT9 register
 */
/*@{*/
#define SIM_RD_SOPT9(base)       (SIM_SOPT9_REG(base))
#define SIM_WR_SOPT9(base, value) (SIM_SOPT9_REG(base) = (value))
#define SIM_RMW_SOPT9(base, mask, value) (SIM_WR_SOPT9(base, (SIM_RD_SOPT9(base) & ~(mask)) | (value)))
#define SIM_SET_SOPT9(base, value) (BME_OR32(&SIM_SOPT9_REG(base), (uint32_t)(value)))
#define SIM_CLR_SOPT9(base, value) (BME_AND32(&SIM_SOPT9_REG(base), (uint32_t)(~(value))))
#define SIM_TOG_SOPT9(base, value) (BME_XOR32(&SIM_SOPT9_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SIM_SOPT9 bitfields
 */

/*!
 * @name Register SIM_SOPT9, field TPM1CH0SRC[19:18] (RW)
 *
 * Selects the source for TPM1 channel 0 input capture. When the TPM is not in
 * input capture mode, clear this field.
 *
 * Values:
 * - 0b00 - TPM1_CH0 signal
 * - 0b01 - CMP0 output
 * - 0b10 - CMP1 output
 * - 0b11 - Reserved
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT9_TPM1CH0SRC field. */
#define SIM_RD_SOPT9_TPM1CH0SRC(base) ((SIM_SOPT9_REG(base) & SIM_SOPT9_TPM1CH0SRC_MASK) >> SIM_SOPT9_TPM1CH0SRC_SHIFT)
#define SIM_BRD_SOPT9_TPM1CH0SRC(base) (BME_UBFX32(&SIM_SOPT9_REG(base), SIM_SOPT9_TPM1CH0SRC_SHIFT, SIM_SOPT9_TPM1CH0SRC_WIDTH))

/*! @brief Set the TPM1CH0SRC field to a new value. */
#define SIM_WR_SOPT9_TPM1CH0SRC(base, value) (SIM_RMW_SOPT9(base, SIM_SOPT9_TPM1CH0SRC_MASK, SIM_SOPT9_TPM1CH0SRC(value)))
#define SIM_BWR_SOPT9_TPM1CH0SRC(base, value) (BME_BFI32(&SIM_SOPT9_REG(base), ((uint32_t)(value) << SIM_SOPT9_TPM1CH0SRC_SHIFT), SIM_SOPT9_TPM1CH0SRC_SHIFT, SIM_SOPT9_TPM1CH0SRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT9, field TPM2CH0SRC[21:20] (RW)
 *
 * Selects the source for TPM2 channel 0 input capture. When the TPM is not in
 * input capture mode, clear this field.
 *
 * Values:
 * - 0b00 - TPM2_CH0 signal
 * - 0b01 - CMP0 output
 * - 0b10 - CMP1 output
 * - 0b11 - Reserved
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT9_TPM2CH0SRC field. */
#define SIM_RD_SOPT9_TPM2CH0SRC(base) ((SIM_SOPT9_REG(base) & SIM_SOPT9_TPM2CH0SRC_MASK) >> SIM_SOPT9_TPM2CH0SRC_SHIFT)
#define SIM_BRD_SOPT9_TPM2CH0SRC(base) (BME_UBFX32(&SIM_SOPT9_REG(base), SIM_SOPT9_TPM2CH0SRC_SHIFT, SIM_SOPT9_TPM2CH0SRC_WIDTH))

/*! @brief Set the TPM2CH0SRC field to a new value. */
#define SIM_WR_SOPT9_TPM2CH0SRC(base, value) (SIM_RMW_SOPT9(base, SIM_SOPT9_TPM2CH0SRC_MASK, SIM_SOPT9_TPM2CH0SRC(value)))
#define SIM_BWR_SOPT9_TPM2CH0SRC(base, value) (BME_BFI32(&SIM_SOPT9_REG(base), ((uint32_t)(value) << SIM_SOPT9_TPM2CH0SRC_SHIFT), SIM_SOPT9_TPM2CH0SRC_SHIFT, SIM_SOPT9_TPM2CH0SRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT9, field TPM1CLKSEL[25] (RW)
 *
 * Selects the external pin used to drive the clock to the TPM1 module. The
 * selected pin must also be configured for the TPM external clock function through
 * the appropriate pin control register in the port control module.
 *
 * Values:
 * - 0b0 - TPM_CLKIN0 pin
 * - 0b1 - TPM_CLKIN1 pin
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT9_TPM1CLKSEL field. */
#define SIM_RD_SOPT9_TPM1CLKSEL(base) ((SIM_SOPT9_REG(base) & SIM_SOPT9_TPM1CLKSEL_MASK) >> SIM_SOPT9_TPM1CLKSEL_SHIFT)
#define SIM_BRD_SOPT9_TPM1CLKSEL(base) (BME_UBFX32(&SIM_SOPT9_REG(base), SIM_SOPT9_TPM1CLKSEL_SHIFT, SIM_SOPT9_TPM1CLKSEL_WIDTH))

/*! @brief Set the TPM1CLKSEL field to a new value. */
#define SIM_WR_SOPT9_TPM1CLKSEL(base, value) (SIM_RMW_SOPT9(base, SIM_SOPT9_TPM1CLKSEL_MASK, SIM_SOPT9_TPM1CLKSEL(value)))
#define SIM_BWR_SOPT9_TPM1CLKSEL(base, value) (BME_BFI32(&SIM_SOPT9_REG(base), ((uint32_t)(value) << SIM_SOPT9_TPM1CLKSEL_SHIFT), SIM_SOPT9_TPM1CLKSEL_SHIFT, SIM_SOPT9_TPM1CLKSEL_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SOPT9, field TPM2CLKSEL[26] (RW)
 *
 * Selects the external pin used to drive the clock to the TPM2 module. The
 * selected pin must also be configured for the TPM external clock function through
 * the appropriate pin control register in the port control module.
 *
 * Values:
 * - 0b0 - TPM_CLKIN0 pin
 * - 0b1 - TPM_CLKIN1 pin
 */
/*@{*/
/*! @brief Read current value of the SIM_SOPT9_TPM2CLKSEL field. */
#define SIM_RD_SOPT9_TPM2CLKSEL(base) ((SIM_SOPT9_REG(base) & SIM_SOPT9_TPM2CLKSEL_MASK) >> SIM_SOPT9_TPM2CLKSEL_SHIFT)
#define SIM_BRD_SOPT9_TPM2CLKSEL(base) (BME_UBFX32(&SIM_SOPT9_REG(base), SIM_SOPT9_TPM2CLKSEL_SHIFT, SIM_SOPT9_TPM2CLKSEL_WIDTH))

/*! @brief Set the TPM2CLKSEL field to a new value. */
#define SIM_WR_SOPT9_TPM2CLKSEL(base, value) (SIM_RMW_SOPT9(base, SIM_SOPT9_TPM2CLKSEL_MASK, SIM_SOPT9_TPM2CLKSEL(value)))
#define SIM_BWR_SOPT9_TPM2CLKSEL(base, value) (BME_BFI32(&SIM_SOPT9_REG(base), ((uint32_t)(value) << SIM_SOPT9_TPM2CLKSEL_SHIFT), SIM_SOPT9_TPM2CLKSEL_SHIFT, SIM_SOPT9_TPM2CLKSEL_WIDTH))
/*@}*/

/*******************************************************************************
 * SIM_SDID - System Device Identification Register
 ******************************************************************************/

/*!
 * @brief SIM_SDID - System Device Identification Register (RO)
 *
 * Reset value: 0x00000B80U
 */
/*!
 * @name Constants and macros for entire SIM_SDID register
 */
/*@{*/
#define SIM_RD_SDID(base)        (SIM_SDID_REG(base))
/*@}*/

/*
 * Constants & macros for individual SIM_SDID bitfields
 */

/*!
 * @name Register SIM_SDID, field PINID[3:0] (RO)
 *
 * Specifies the pincount of the device.
 *
 * Values:
 * - 0b0000 - Reserved
 * - 0b0001 - Reserved
 * - 0b0010 - 32-pin
 * - 0b0011 - Reserved
 * - 0b0100 - 48-pin
 * - 0b0101 - 64-pin
 * - 0b0110 - 80-pin
 * - 0b0111 - 81-pin or 121-pin
 * - 0b1000 - 100-pin
 * - 0b1001 - 121-pin
 * - 0b1010 - 144-pin
 * - 0b1011 - Custom pinout (WLCSP)
 * - 0b1100 - 169-pin
 * - 0b1101 - Reserved
 * - 0b1110 - 256-pin
 * - 0b1111 - Reserved
 */
/*@{*/
/*! @brief Read current value of the SIM_SDID_PINID field. */
#define SIM_RD_SDID_PINID(base) ((SIM_SDID_REG(base) & SIM_SDID_PINID_MASK) >> SIM_SDID_PINID_SHIFT)
#define SIM_BRD_SDID_PINID(base) (BME_UBFX32(&SIM_SDID_REG(base), SIM_SDID_PINID_SHIFT, SIM_SDID_PINID_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SDID, field FAMID[6:4] (RO)
 *
 * This field is maintained for compatibility only, but has been superceded by
 * the SERIESID, FAMILYID and SUBFAMID fields in this register.
 *
 * Values:
 * - 0b000 - K1x Family (without tamper)
 * - 0b001 - K2x Family (without tamper)
 * - 0b010 - K3x Family or K1x/K6x Family (with tamper)
 * - 0b011 - K4x Family or K2x Family (with tamper)
 * - 0b100 - K6x Family (without tamper)
 * - 0b101 - K7x Family
 * - 0b110 - Reserved
 * - 0b111 - Reserved
 */
/*@{*/
/*! @brief Read current value of the SIM_SDID_FAMID field. */
#define SIM_RD_SDID_FAMID(base) ((SIM_SDID_REG(base) & SIM_SDID_FAMID_MASK) >> SIM_SDID_FAMID_SHIFT)
#define SIM_BRD_SDID_FAMID(base) (BME_UBFX32(&SIM_SDID_REG(base), SIM_SDID_FAMID_SHIFT, SIM_SDID_FAMID_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SDID, field DIEID[11:7] (RO)
 *
 * Specifies the silicon feature set identication number for the device.
 */
/*@{*/
/*! @brief Read current value of the SIM_SDID_DIEID field. */
#define SIM_RD_SDID_DIEID(base) ((SIM_SDID_REG(base) & SIM_SDID_DIEID_MASK) >> SIM_SDID_DIEID_SHIFT)
#define SIM_BRD_SDID_DIEID(base) (BME_UBFX32(&SIM_SDID_REG(base), SIM_SDID_DIEID_SHIFT, SIM_SDID_DIEID_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SDID, field REVID[15:12] (RO)
 *
 * Specifies the silicon implementation number for the device.
 */
/*@{*/
/*! @brief Read current value of the SIM_SDID_REVID field. */
#define SIM_RD_SDID_REVID(base) ((SIM_SDID_REG(base) & SIM_SDID_REVID_MASK) >> SIM_SDID_REVID_SHIFT)
#define SIM_BRD_SDID_REVID(base) (BME_UBFX32(&SIM_SDID_REG(base), SIM_SDID_REVID_SHIFT, SIM_SDID_REVID_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SDID, field SERIESID[23:20] (RO)
 *
 * Specifies the Kinetis series of the device.
 *
 * Values:
 * - 0b0000 - Kinetis K series
 * - 0b0001 - Kinetis L series
 * - 0b0101 - Kinetis W series
 * - 0b0110 - Kinetis V series
 */
/*@{*/
/*! @brief Read current value of the SIM_SDID_SERIESID field. */
#define SIM_RD_SDID_SERIESID(base) ((SIM_SDID_REG(base) & SIM_SDID_SERIESID_MASK) >> SIM_SDID_SERIESID_SHIFT)
#define SIM_BRD_SDID_SERIESID(base) (BME_UBFX32(&SIM_SDID_REG(base), SIM_SDID_SERIESID_SHIFT, SIM_SDID_SERIESID_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SDID, field SUBFAMID[27:24] (RO)
 *
 * Specifies the Kinetis sub-family of the device.
 *
 * Values:
 * - 0b0000 - Kx0 Subfamily
 * - 0b0001 - Kx1 Subfamily (tamper detect)
 * - 0b0010 - Kx2 Subfamily
 * - 0b0011 - Kx3 Subfamily (tamper detect)
 * - 0b0100 - Kx4 Subfamily
 * - 0b0101 - Kx5 Subfamily (tamper detect)
 * - 0b0110 - Kx6 Subfamily
 */
/*@{*/
/*! @brief Read current value of the SIM_SDID_SUBFAMID field. */
#define SIM_RD_SDID_SUBFAMID(base) ((SIM_SDID_REG(base) & SIM_SDID_SUBFAMID_MASK) >> SIM_SDID_SUBFAMID_SHIFT)
#define SIM_BRD_SDID_SUBFAMID(base) (BME_UBFX32(&SIM_SDID_REG(base), SIM_SDID_SUBFAMID_SHIFT, SIM_SDID_SUBFAMID_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SDID, field FAMILYID[31:28] (RO)
 *
 * Specifies the Kinetis family of the device.
 *
 * Values:
 * - 0b0000 - K0x Family
 * - 0b0001 - K1x Family
 * - 0b0010 - K2x Family
 * - 0b0011 - K3x Family
 * - 0b0100 - K4x Family
 * - 0b0110 - K6x Family
 * - 0b0111 - K7x Family
 * - 0b1000 - K8x Family
 */
/*@{*/
/*! @brief Read current value of the SIM_SDID_FAMILYID field. */
#define SIM_RD_SDID_FAMILYID(base) ((SIM_SDID_REG(base) & SIM_SDID_FAMILYID_MASK) >> SIM_SDID_FAMILYID_SHIFT)
#define SIM_BRD_SDID_FAMILYID(base) (BME_UBFX32(&SIM_SDID_REG(base), SIM_SDID_FAMILYID_SHIFT, SIM_SDID_FAMILYID_WIDTH))
/*@}*/

/*******************************************************************************
 * SIM_SCGC1 - System Clock Gating Control Register 1
 ******************************************************************************/

/*!
 * @brief SIM_SCGC1 - System Clock Gating Control Register 1 (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire SIM_SCGC1 register
 */
/*@{*/
#define SIM_RD_SCGC1(base)       (SIM_SCGC1_REG(base))
#define SIM_WR_SCGC1(base, value) (SIM_SCGC1_REG(base) = (value))
#define SIM_RMW_SCGC1(base, mask, value) (SIM_WR_SCGC1(base, (SIM_RD_SCGC1(base) & ~(mask)) | (value)))
#define SIM_SET_SCGC1(base, value) (BME_OR32(&SIM_SCGC1_REG(base), (uint32_t)(value)))
#define SIM_CLR_SCGC1(base, value) (BME_AND32(&SIM_SCGC1_REG(base), (uint32_t)(~(value))))
#define SIM_TOG_SCGC1(base, value) (BME_XOR32(&SIM_SCGC1_REG(base), (uint32_t)(value)))
/*@}*/

/* Unified clock gate bit access macros */
#define SIM_SCGC_BIT_REG(base, index)        (*((volatile uint32_t *)&SIM_SCGC1_REG(base) + (((uint32_t)(index) >> 5) - 0U)))
#define SIM_SCGC_BIT_SHIFT(index)            ((uint32_t)(index) & ((1U << 5) - 1U))
#define SIM_RD_SCGC_BIT(base, index)         (SIM_SCGC_BIT_REG((base), (index)) & (1U << SIM_SCGC_BIT_SHIFT(index)))
#define SIM_BRD_SCGC_BIT(base, index)        (BME_UBFX32(&SIM_SCGC_BIT_REG((base), (index)), SIM_SCGC_BIT_SHIFT(index), 1))
#define SIM_WR_SCGC_BIT(base, index, value)  (SIM_SCGC_BIT_REG((base), (index)) = (SIM_SCGC_BIT_REG((base), (index)) & ~(1U << SIM_SCGC_BIT_SHIFT(index))) | ((uint32_t)(value) << SIM_SCGC_BIT_SHIFT(index)))
#define SIM_BWR_SCGC_BIT(base, index, value) (BME_BFI32(&SIM_SCGC_BIT_REG((base), (index)), ((uint32_t)(value) << SIM_SCGC_BIT_SHIFT(index)), SIM_SCGC_BIT_SHIFT(index), 1))

/*
 * Constants & macros for individual SIM_SCGC1 bitfields
 */

/*!
 * @name Register SIM_SCGC1, field I2C2[6] (RW)
 *
 * This bit controls the clock gate to the I2C2 module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC1_I2C2 field. */
#define SIM_RD_SCGC1_I2C2(base) ((SIM_SCGC1_REG(base) & SIM_SCGC1_I2C2_MASK) >> SIM_SCGC1_I2C2_SHIFT)
#define SIM_BRD_SCGC1_I2C2(base) (BME_UBFX32(&SIM_SCGC1_REG(base), SIM_SCGC1_I2C2_SHIFT, SIM_SCGC1_I2C2_WIDTH))

/*! @brief Set the I2C2 field to a new value. */
#define SIM_WR_SCGC1_I2C2(base, value) (SIM_RMW_SCGC1(base, SIM_SCGC1_I2C2_MASK, SIM_SCGC1_I2C2(value)))
#define SIM_BWR_SCGC1_I2C2(base, value) (BME_BFI32(&SIM_SCGC1_REG(base), ((uint32_t)(value) << SIM_SCGC1_I2C2_SHIFT), SIM_SCGC1_I2C2_SHIFT, SIM_SCGC1_I2C2_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC1, field I2C3[7] (RW)
 *
 * This bit controls the clock gate to the I2C3 module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC1_I2C3 field. */
#define SIM_RD_SCGC1_I2C3(base) ((SIM_SCGC1_REG(base) & SIM_SCGC1_I2C3_MASK) >> SIM_SCGC1_I2C3_SHIFT)
#define SIM_BRD_SCGC1_I2C3(base) (BME_UBFX32(&SIM_SCGC1_REG(base), SIM_SCGC1_I2C3_SHIFT, SIM_SCGC1_I2C3_WIDTH))

/*! @brief Set the I2C3 field to a new value. */
#define SIM_WR_SCGC1_I2C3(base, value) (SIM_RMW_SCGC1(base, SIM_SCGC1_I2C3_MASK, SIM_SCGC1_I2C3(value)))
#define SIM_BWR_SCGC1_I2C3(base, value) (BME_BFI32(&SIM_SCGC1_REG(base), ((uint32_t)(value) << SIM_SCGC1_I2C3_SHIFT), SIM_SCGC1_I2C3_SHIFT, SIM_SCGC1_I2C3_WIDTH))
/*@}*/

/*******************************************************************************
 * SIM_SCGC2 - System Clock Gating Control Register 2
 ******************************************************************************/

/*!
 * @brief SIM_SCGC2 - System Clock Gating Control Register 2 (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire SIM_SCGC2 register
 */
/*@{*/
#define SIM_RD_SCGC2(base)       (SIM_SCGC2_REG(base))
#define SIM_WR_SCGC2(base, value) (SIM_SCGC2_REG(base) = (value))
#define SIM_RMW_SCGC2(base, mask, value) (SIM_WR_SCGC2(base, (SIM_RD_SCGC2(base) & ~(mask)) | (value)))
#define SIM_SET_SCGC2(base, value) (BME_OR32(&SIM_SCGC2_REG(base), (uint32_t)(value)))
#define SIM_CLR_SCGC2(base, value) (BME_AND32(&SIM_SCGC2_REG(base), (uint32_t)(~(value))))
#define SIM_TOG_SCGC2(base, value) (BME_XOR32(&SIM_SCGC2_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SIM_SCGC2 bitfields
 */

/*!
 * @name Register SIM_SCGC2, field LPUART0[4] (RW)
 *
 * This bit controls the clock gate to the LPUART0 module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC2_LPUART0 field. */
#define SIM_RD_SCGC2_LPUART0(base) ((SIM_SCGC2_REG(base) & SIM_SCGC2_LPUART0_MASK) >> SIM_SCGC2_LPUART0_SHIFT)
#define SIM_BRD_SCGC2_LPUART0(base) (BME_UBFX32(&SIM_SCGC2_REG(base), SIM_SCGC2_LPUART0_SHIFT, SIM_SCGC2_LPUART0_WIDTH))

/*! @brief Set the LPUART0 field to a new value. */
#define SIM_WR_SCGC2_LPUART0(base, value) (SIM_RMW_SCGC2(base, SIM_SCGC2_LPUART0_MASK, SIM_SCGC2_LPUART0(value)))
#define SIM_BWR_SCGC2_LPUART0(base, value) (BME_BFI32(&SIM_SCGC2_REG(base), ((uint32_t)(value) << SIM_SCGC2_LPUART0_SHIFT), SIM_SCGC2_LPUART0_SHIFT, SIM_SCGC2_LPUART0_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC2, field LPUART1[5] (RW)
 *
 * This bit controls the clock gate to the LPUART1 module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC2_LPUART1 field. */
#define SIM_RD_SCGC2_LPUART1(base) ((SIM_SCGC2_REG(base) & SIM_SCGC2_LPUART1_MASK) >> SIM_SCGC2_LPUART1_SHIFT)
#define SIM_BRD_SCGC2_LPUART1(base) (BME_UBFX32(&SIM_SCGC2_REG(base), SIM_SCGC2_LPUART1_SHIFT, SIM_SCGC2_LPUART1_WIDTH))

/*! @brief Set the LPUART1 field to a new value. */
#define SIM_WR_SCGC2_LPUART1(base, value) (SIM_RMW_SCGC2(base, SIM_SCGC2_LPUART1_MASK, SIM_SCGC2_LPUART1(value)))
#define SIM_BWR_SCGC2_LPUART1(base, value) (BME_BFI32(&SIM_SCGC2_REG(base), ((uint32_t)(value) << SIM_SCGC2_LPUART1_SHIFT), SIM_SCGC2_LPUART1_SHIFT, SIM_SCGC2_LPUART1_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC2, field LPUART2[6] (RW)
 *
 * This bit controls the clock gate to the LPUART2 module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC2_LPUART2 field. */
#define SIM_RD_SCGC2_LPUART2(base) ((SIM_SCGC2_REG(base) & SIM_SCGC2_LPUART2_MASK) >> SIM_SCGC2_LPUART2_SHIFT)
#define SIM_BRD_SCGC2_LPUART2(base) (BME_UBFX32(&SIM_SCGC2_REG(base), SIM_SCGC2_LPUART2_SHIFT, SIM_SCGC2_LPUART2_WIDTH))

/*! @brief Set the LPUART2 field to a new value. */
#define SIM_WR_SCGC2_LPUART2(base, value) (SIM_RMW_SCGC2(base, SIM_SCGC2_LPUART2_MASK, SIM_SCGC2_LPUART2(value)))
#define SIM_BWR_SCGC2_LPUART2(base, value) (BME_BFI32(&SIM_SCGC2_REG(base), ((uint32_t)(value) << SIM_SCGC2_LPUART2_SHIFT), SIM_SCGC2_LPUART2_SHIFT, SIM_SCGC2_LPUART2_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC2, field LPUART3[7] (RW)
 *
 * This bit controls the clock gate to the LPUART3 module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC2_LPUART3 field. */
#define SIM_RD_SCGC2_LPUART3(base) ((SIM_SCGC2_REG(base) & SIM_SCGC2_LPUART3_MASK) >> SIM_SCGC2_LPUART3_SHIFT)
#define SIM_BRD_SCGC2_LPUART3(base) (BME_UBFX32(&SIM_SCGC2_REG(base), SIM_SCGC2_LPUART3_SHIFT, SIM_SCGC2_LPUART3_WIDTH))

/*! @brief Set the LPUART3 field to a new value. */
#define SIM_WR_SCGC2_LPUART3(base, value) (SIM_RMW_SCGC2(base, SIM_SCGC2_LPUART3_MASK, SIM_SCGC2_LPUART3(value)))
#define SIM_BWR_SCGC2_LPUART3(base, value) (BME_BFI32(&SIM_SCGC2_REG(base), ((uint32_t)(value) << SIM_SCGC2_LPUART3_SHIFT), SIM_SCGC2_LPUART3_SHIFT, SIM_SCGC2_LPUART3_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC2, field TPM1[9] (RW)
 *
 * This bit controls the clock gate to the TPM1 module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC2_TPM1 field. */
#define SIM_RD_SCGC2_TPM1(base) ((SIM_SCGC2_REG(base) & SIM_SCGC2_TPM1_MASK) >> SIM_SCGC2_TPM1_SHIFT)
#define SIM_BRD_SCGC2_TPM1(base) (BME_UBFX32(&SIM_SCGC2_REG(base), SIM_SCGC2_TPM1_SHIFT, SIM_SCGC2_TPM1_WIDTH))

/*! @brief Set the TPM1 field to a new value. */
#define SIM_WR_SCGC2_TPM1(base, value) (SIM_RMW_SCGC2(base, SIM_SCGC2_TPM1_MASK, SIM_SCGC2_TPM1(value)))
#define SIM_BWR_SCGC2_TPM1(base, value) (BME_BFI32(&SIM_SCGC2_REG(base), ((uint32_t)(value) << SIM_SCGC2_TPM1_SHIFT), SIM_SCGC2_TPM1_SHIFT, SIM_SCGC2_TPM1_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC2, field TPM2[10] (RW)
 *
 * This bit controls the clock gate to the TPM2 module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC2_TPM2 field. */
#define SIM_RD_SCGC2_TPM2(base) ((SIM_SCGC2_REG(base) & SIM_SCGC2_TPM2_MASK) >> SIM_SCGC2_TPM2_SHIFT)
#define SIM_BRD_SCGC2_TPM2(base) (BME_UBFX32(&SIM_SCGC2_REG(base), SIM_SCGC2_TPM2_SHIFT, SIM_SCGC2_TPM2_WIDTH))

/*! @brief Set the TPM2 field to a new value. */
#define SIM_WR_SCGC2_TPM2(base, value) (SIM_RMW_SCGC2(base, SIM_SCGC2_TPM2_MASK, SIM_SCGC2_TPM2(value)))
#define SIM_BWR_SCGC2_TPM2(base, value) (BME_BFI32(&SIM_SCGC2_REG(base), ((uint32_t)(value) << SIM_SCGC2_TPM2_SHIFT), SIM_SCGC2_TPM2_SHIFT, SIM_SCGC2_TPM2_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC2, field DAC0[12] (RW)
 *
 * This bit controls the clock gate to the DAC0 module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC2_DAC0 field. */
#define SIM_RD_SCGC2_DAC0(base) ((SIM_SCGC2_REG(base) & SIM_SCGC2_DAC0_MASK) >> SIM_SCGC2_DAC0_SHIFT)
#define SIM_BRD_SCGC2_DAC0(base) (BME_UBFX32(&SIM_SCGC2_REG(base), SIM_SCGC2_DAC0_SHIFT, SIM_SCGC2_DAC0_WIDTH))

/*! @brief Set the DAC0 field to a new value. */
#define SIM_WR_SCGC2_DAC0(base, value) (SIM_RMW_SCGC2(base, SIM_SCGC2_DAC0_MASK, SIM_SCGC2_DAC0(value)))
#define SIM_BWR_SCGC2_DAC0(base, value) (BME_BFI32(&SIM_SCGC2_REG(base), ((uint32_t)(value) << SIM_SCGC2_DAC0_SHIFT), SIM_SCGC2_DAC0_SHIFT, SIM_SCGC2_DAC0_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC2, field LTC[17] (RW)
 *
 * This bit controls the clock gate to the LTC module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC2_LTC field. */
#define SIM_RD_SCGC2_LTC(base) ((SIM_SCGC2_REG(base) & SIM_SCGC2_LTC_MASK) >> SIM_SCGC2_LTC_SHIFT)
#define SIM_BRD_SCGC2_LTC(base) (BME_UBFX32(&SIM_SCGC2_REG(base), SIM_SCGC2_LTC_SHIFT, SIM_SCGC2_LTC_WIDTH))

/*! @brief Set the LTC field to a new value. */
#define SIM_WR_SCGC2_LTC(base, value) (SIM_RMW_SCGC2(base, SIM_SCGC2_LTC_MASK, SIM_SCGC2_LTC(value)))
#define SIM_BWR_SCGC2_LTC(base, value) (BME_BFI32(&SIM_SCGC2_REG(base), ((uint32_t)(value) << SIM_SCGC2_LTC_SHIFT), SIM_SCGC2_LTC_SHIFT, SIM_SCGC2_LTC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC2, field EMVSIM0[20] (RW)
 *
 * This bit controls the clock gate to the EMVSIM0 module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC2_EMVSIM0 field. */
#define SIM_RD_SCGC2_EMVSIM0(base) ((SIM_SCGC2_REG(base) & SIM_SCGC2_EMVSIM0_MASK) >> SIM_SCGC2_EMVSIM0_SHIFT)
#define SIM_BRD_SCGC2_EMVSIM0(base) (BME_UBFX32(&SIM_SCGC2_REG(base), SIM_SCGC2_EMVSIM0_SHIFT, SIM_SCGC2_EMVSIM0_WIDTH))

/*! @brief Set the EMVSIM0 field to a new value. */
#define SIM_WR_SCGC2_EMVSIM0(base, value) (SIM_RMW_SCGC2(base, SIM_SCGC2_EMVSIM0_MASK, SIM_SCGC2_EMVSIM0(value)))
#define SIM_BWR_SCGC2_EMVSIM0(base, value) (BME_BFI32(&SIM_SCGC2_REG(base), ((uint32_t)(value) << SIM_SCGC2_EMVSIM0_SHIFT), SIM_SCGC2_EMVSIM0_SHIFT, SIM_SCGC2_EMVSIM0_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC2, field EMVSIM1[21] (RW)
 *
 * This bit controls the clock gate to the EMVSIM1 module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC2_EMVSIM1 field. */
#define SIM_RD_SCGC2_EMVSIM1(base) ((SIM_SCGC2_REG(base) & SIM_SCGC2_EMVSIM1_MASK) >> SIM_SCGC2_EMVSIM1_SHIFT)
#define SIM_BRD_SCGC2_EMVSIM1(base) (BME_UBFX32(&SIM_SCGC2_REG(base), SIM_SCGC2_EMVSIM1_SHIFT, SIM_SCGC2_EMVSIM1_WIDTH))

/*! @brief Set the EMVSIM1 field to a new value. */
#define SIM_WR_SCGC2_EMVSIM1(base, value) (SIM_RMW_SCGC2(base, SIM_SCGC2_EMVSIM1_MASK, SIM_SCGC2_EMVSIM1(value)))
#define SIM_BWR_SCGC2_EMVSIM1(base, value) (BME_BFI32(&SIM_SCGC2_REG(base), ((uint32_t)(value) << SIM_SCGC2_EMVSIM1_SHIFT), SIM_SCGC2_EMVSIM1_SHIFT, SIM_SCGC2_EMVSIM1_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC2, field LPUART4[22] (RW)
 *
 * This bit controls the clock gate to the LPUART4 module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC2_LPUART4 field. */
#define SIM_RD_SCGC2_LPUART4(base) ((SIM_SCGC2_REG(base) & SIM_SCGC2_LPUART4_MASK) >> SIM_SCGC2_LPUART4_SHIFT)
#define SIM_BRD_SCGC2_LPUART4(base) (BME_UBFX32(&SIM_SCGC2_REG(base), SIM_SCGC2_LPUART4_SHIFT, SIM_SCGC2_LPUART4_WIDTH))

/*! @brief Set the LPUART4 field to a new value. */
#define SIM_WR_SCGC2_LPUART4(base, value) (SIM_RMW_SCGC2(base, SIM_SCGC2_LPUART4_MASK, SIM_SCGC2_LPUART4(value)))
#define SIM_BWR_SCGC2_LPUART4(base, value) (BME_BFI32(&SIM_SCGC2_REG(base), ((uint32_t)(value) << SIM_SCGC2_LPUART4_SHIFT), SIM_SCGC2_LPUART4_SHIFT, SIM_SCGC2_LPUART4_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC2, field QSPI[26] (RW)
 *
 * This bit controls the clock gate to the QuadSPI module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC2_QSPI field. */
#define SIM_RD_SCGC2_QSPI(base) ((SIM_SCGC2_REG(base) & SIM_SCGC2_QSPI_MASK) >> SIM_SCGC2_QSPI_SHIFT)
#define SIM_BRD_SCGC2_QSPI(base) (BME_UBFX32(&SIM_SCGC2_REG(base), SIM_SCGC2_QSPI_SHIFT, SIM_SCGC2_QSPI_WIDTH))

/*! @brief Set the QSPI field to a new value. */
#define SIM_WR_SCGC2_QSPI(base, value) (SIM_RMW_SCGC2(base, SIM_SCGC2_QSPI_MASK, SIM_SCGC2_QSPI(value)))
#define SIM_BWR_SCGC2_QSPI(base, value) (BME_BFI32(&SIM_SCGC2_REG(base), ((uint32_t)(value) << SIM_SCGC2_QSPI_SHIFT), SIM_SCGC2_QSPI_SHIFT, SIM_SCGC2_QSPI_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC2, field FLEXIO[31] (RW)
 *
 * This bit controls the clock gate to the FlexIO module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC2_FLEXIO field. */
#define SIM_RD_SCGC2_FLEXIO(base) ((SIM_SCGC2_REG(base) & SIM_SCGC2_FLEXIO_MASK) >> SIM_SCGC2_FLEXIO_SHIFT)
#define SIM_BRD_SCGC2_FLEXIO(base) (BME_UBFX32(&SIM_SCGC2_REG(base), SIM_SCGC2_FLEXIO_SHIFT, SIM_SCGC2_FLEXIO_WIDTH))

/*! @brief Set the FLEXIO field to a new value. */
#define SIM_WR_SCGC2_FLEXIO(base, value) (SIM_RMW_SCGC2(base, SIM_SCGC2_FLEXIO_MASK, SIM_SCGC2_FLEXIO(value)))
#define SIM_BWR_SCGC2_FLEXIO(base, value) (BME_BFI32(&SIM_SCGC2_REG(base), ((uint32_t)(value) << SIM_SCGC2_FLEXIO_SHIFT), SIM_SCGC2_FLEXIO_SHIFT, SIM_SCGC2_FLEXIO_WIDTH))
/*@}*/

/*******************************************************************************
 * SIM_SCGC3 - System Clock Gating Control Register 3
 ******************************************************************************/

/*!
 * @brief SIM_SCGC3 - System Clock Gating Control Register 3 (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire SIM_SCGC3 register
 */
/*@{*/
#define SIM_RD_SCGC3(base)       (SIM_SCGC3_REG(base))
#define SIM_WR_SCGC3(base, value) (SIM_SCGC3_REG(base) = (value))
#define SIM_RMW_SCGC3(base, mask, value) (SIM_WR_SCGC3(base, (SIM_RD_SCGC3(base) & ~(mask)) | (value)))
#define SIM_SET_SCGC3(base, value) (BME_OR32(&SIM_SCGC3_REG(base), (uint32_t)(value)))
#define SIM_CLR_SCGC3(base, value) (BME_AND32(&SIM_SCGC3_REG(base), (uint32_t)(~(value))))
#define SIM_TOG_SCGC3(base, value) (BME_XOR32(&SIM_SCGC3_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SIM_SCGC3 bitfields
 */

/*!
 * @name Register SIM_SCGC3, field TRNG[0] (RW)
 *
 * This bit controls the clock gate to the TRNG module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC3_TRNG field. */
#define SIM_RD_SCGC3_TRNG(base) ((SIM_SCGC3_REG(base) & SIM_SCGC3_TRNG_MASK) >> SIM_SCGC3_TRNG_SHIFT)
#define SIM_BRD_SCGC3_TRNG(base) (BME_UBFX32(&SIM_SCGC3_REG(base), SIM_SCGC3_TRNG_SHIFT, SIM_SCGC3_TRNG_WIDTH))

/*! @brief Set the TRNG field to a new value. */
#define SIM_WR_SCGC3_TRNG(base, value) (SIM_RMW_SCGC3(base, SIM_SCGC3_TRNG_MASK, SIM_SCGC3_TRNG(value)))
#define SIM_BWR_SCGC3_TRNG(base, value) (BME_BFI32(&SIM_SCGC3_REG(base), ((uint32_t)(value) << SIM_SCGC3_TRNG_SHIFT), SIM_SCGC3_TRNG_SHIFT, SIM_SCGC3_TRNG_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC3, field SPI2[12] (RW)
 *
 * This bit controls the clock gate to the SPI2 module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC3_SPI2 field. */
#define SIM_RD_SCGC3_SPI2(base) ((SIM_SCGC3_REG(base) & SIM_SCGC3_SPI2_MASK) >> SIM_SCGC3_SPI2_SHIFT)
#define SIM_BRD_SCGC3_SPI2(base) (BME_UBFX32(&SIM_SCGC3_REG(base), SIM_SCGC3_SPI2_SHIFT, SIM_SCGC3_SPI2_WIDTH))

/*! @brief Set the SPI2 field to a new value. */
#define SIM_WR_SCGC3_SPI2(base, value) (SIM_RMW_SCGC3(base, SIM_SCGC3_SPI2_MASK, SIM_SCGC3_SPI2(value)))
#define SIM_BWR_SCGC3_SPI2(base, value) (BME_BFI32(&SIM_SCGC3_REG(base), ((uint32_t)(value) << SIM_SCGC3_SPI2_SHIFT), SIM_SCGC3_SPI2_SHIFT, SIM_SCGC3_SPI2_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC3, field SDHC[17] (RW)
 *
 * This bit controls the clock gate to the SDHC module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC3_SDHC field. */
#define SIM_RD_SCGC3_SDHC(base) ((SIM_SCGC3_REG(base) & SIM_SCGC3_SDHC_MASK) >> SIM_SCGC3_SDHC_SHIFT)
#define SIM_BRD_SCGC3_SDHC(base) (BME_UBFX32(&SIM_SCGC3_REG(base), SIM_SCGC3_SDHC_SHIFT, SIM_SCGC3_SDHC_WIDTH))

/*! @brief Set the SDHC field to a new value. */
#define SIM_WR_SCGC3_SDHC(base, value) (SIM_RMW_SCGC3(base, SIM_SCGC3_SDHC_MASK, SIM_SCGC3_SDHC(value)))
#define SIM_BWR_SCGC3_SDHC(base, value) (BME_BFI32(&SIM_SCGC3_REG(base), ((uint32_t)(value) << SIM_SCGC3_SDHC_SHIFT), SIM_SCGC3_SDHC_SHIFT, SIM_SCGC3_SDHC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC3, field FTM2[24] (RW)
 *
 * This bit controls the clock gate to the FTM2 module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC3_FTM2 field. */
#define SIM_RD_SCGC3_FTM2(base) ((SIM_SCGC3_REG(base) & SIM_SCGC3_FTM2_MASK) >> SIM_SCGC3_FTM2_SHIFT)
#define SIM_BRD_SCGC3_FTM2(base) (BME_UBFX32(&SIM_SCGC3_REG(base), SIM_SCGC3_FTM2_SHIFT, SIM_SCGC3_FTM2_WIDTH))

/*! @brief Set the FTM2 field to a new value. */
#define SIM_WR_SCGC3_FTM2(base, value) (SIM_RMW_SCGC3(base, SIM_SCGC3_FTM2_MASK, SIM_SCGC3_FTM2(value)))
#define SIM_BWR_SCGC3_FTM2(base, value) (BME_BFI32(&SIM_SCGC3_REG(base), ((uint32_t)(value) << SIM_SCGC3_FTM2_SHIFT), SIM_SCGC3_FTM2_SHIFT, SIM_SCGC3_FTM2_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC3, field FTM3[25] (RW)
 *
 * This bit controls the clock gate to the FTM3 module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC3_FTM3 field. */
#define SIM_RD_SCGC3_FTM3(base) ((SIM_SCGC3_REG(base) & SIM_SCGC3_FTM3_MASK) >> SIM_SCGC3_FTM3_SHIFT)
#define SIM_BRD_SCGC3_FTM3(base) (BME_UBFX32(&SIM_SCGC3_REG(base), SIM_SCGC3_FTM3_SHIFT, SIM_SCGC3_FTM3_WIDTH))

/*! @brief Set the FTM3 field to a new value. */
#define SIM_WR_SCGC3_FTM3(base, value) (SIM_RMW_SCGC3(base, SIM_SCGC3_FTM3_MASK, SIM_SCGC3_FTM3(value)))
#define SIM_BWR_SCGC3_FTM3(base, value) (BME_BFI32(&SIM_SCGC3_REG(base), ((uint32_t)(value) << SIM_SCGC3_FTM3_SHIFT), SIM_SCGC3_FTM3_SHIFT, SIM_SCGC3_FTM3_WIDTH))
/*@}*/

/*******************************************************************************
 * SIM_SCGC4 - System Clock Gating Control Register 4
 ******************************************************************************/

/*!
 * @brief SIM_SCGC4 - System Clock Gating Control Register 4 (RW)
 *
 * Reset value: 0xF0100030U
 */
/*!
 * @name Constants and macros for entire SIM_SCGC4 register
 */
/*@{*/
#define SIM_RD_SCGC4(base)       (SIM_SCGC4_REG(base))
#define SIM_WR_SCGC4(base, value) (SIM_SCGC4_REG(base) = (value))
#define SIM_RMW_SCGC4(base, mask, value) (SIM_WR_SCGC4(base, (SIM_RD_SCGC4(base) & ~(mask)) | (value)))
#define SIM_SET_SCGC4(base, value) (BME_OR32(&SIM_SCGC4_REG(base), (uint32_t)(value)))
#define SIM_CLR_SCGC4(base, value) (BME_AND32(&SIM_SCGC4_REG(base), (uint32_t)(~(value))))
#define SIM_TOG_SCGC4(base, value) (BME_XOR32(&SIM_SCGC4_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SIM_SCGC4 bitfields
 */

/*!
 * @name Register SIM_SCGC4, field EWM[1] (RW)
 *
 * This bit controls the clock gate to the EWM module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC4_EWM field. */
#define SIM_RD_SCGC4_EWM(base) ((SIM_SCGC4_REG(base) & SIM_SCGC4_EWM_MASK) >> SIM_SCGC4_EWM_SHIFT)
#define SIM_BRD_SCGC4_EWM(base) (BME_UBFX32(&SIM_SCGC4_REG(base), SIM_SCGC4_EWM_SHIFT, SIM_SCGC4_EWM_WIDTH))

/*! @brief Set the EWM field to a new value. */
#define SIM_WR_SCGC4_EWM(base, value) (SIM_RMW_SCGC4(base, SIM_SCGC4_EWM_MASK, SIM_SCGC4_EWM(value)))
#define SIM_BWR_SCGC4_EWM(base, value) (BME_BFI32(&SIM_SCGC4_REG(base), ((uint32_t)(value) << SIM_SCGC4_EWM_SHIFT), SIM_SCGC4_EWM_SHIFT, SIM_SCGC4_EWM_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC4, field CMT[2] (RW)
 *
 * This bit controls the clock gate to the CMT module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC4_CMT field. */
#define SIM_RD_SCGC4_CMT(base) ((SIM_SCGC4_REG(base) & SIM_SCGC4_CMT_MASK) >> SIM_SCGC4_CMT_SHIFT)
#define SIM_BRD_SCGC4_CMT(base) (BME_UBFX32(&SIM_SCGC4_REG(base), SIM_SCGC4_CMT_SHIFT, SIM_SCGC4_CMT_WIDTH))

/*! @brief Set the CMT field to a new value. */
#define SIM_WR_SCGC4_CMT(base, value) (SIM_RMW_SCGC4(base, SIM_SCGC4_CMT_MASK, SIM_SCGC4_CMT(value)))
#define SIM_BWR_SCGC4_CMT(base, value) (BME_BFI32(&SIM_SCGC4_REG(base), ((uint32_t)(value) << SIM_SCGC4_CMT_SHIFT), SIM_SCGC4_CMT_SHIFT, SIM_SCGC4_CMT_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC4, field I2C0[6] (RW)
 *
 * This bit controls the clock gate to the I 2 C0 module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC4_I2C0 field. */
#define SIM_RD_SCGC4_I2C0(base) ((SIM_SCGC4_REG(base) & SIM_SCGC4_I2C0_MASK) >> SIM_SCGC4_I2C0_SHIFT)
#define SIM_BRD_SCGC4_I2C0(base) (BME_UBFX32(&SIM_SCGC4_REG(base), SIM_SCGC4_I2C0_SHIFT, SIM_SCGC4_I2C0_WIDTH))

/*! @brief Set the I2C0 field to a new value. */
#define SIM_WR_SCGC4_I2C0(base, value) (SIM_RMW_SCGC4(base, SIM_SCGC4_I2C0_MASK, SIM_SCGC4_I2C0(value)))
#define SIM_BWR_SCGC4_I2C0(base, value) (BME_BFI32(&SIM_SCGC4_REG(base), ((uint32_t)(value) << SIM_SCGC4_I2C0_SHIFT), SIM_SCGC4_I2C0_SHIFT, SIM_SCGC4_I2C0_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC4, field I2C1[7] (RW)
 *
 * This bit controls the clock gate to the I 2 C1 module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC4_I2C1 field. */
#define SIM_RD_SCGC4_I2C1(base) ((SIM_SCGC4_REG(base) & SIM_SCGC4_I2C1_MASK) >> SIM_SCGC4_I2C1_SHIFT)
#define SIM_BRD_SCGC4_I2C1(base) (BME_UBFX32(&SIM_SCGC4_REG(base), SIM_SCGC4_I2C1_SHIFT, SIM_SCGC4_I2C1_WIDTH))

/*! @brief Set the I2C1 field to a new value. */
#define SIM_WR_SCGC4_I2C1(base, value) (SIM_RMW_SCGC4(base, SIM_SCGC4_I2C1_MASK, SIM_SCGC4_I2C1(value)))
#define SIM_BWR_SCGC4_I2C1(base, value) (BME_BFI32(&SIM_SCGC4_REG(base), ((uint32_t)(value) << SIM_SCGC4_I2C1_SHIFT), SIM_SCGC4_I2C1_SHIFT, SIM_SCGC4_I2C1_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC4, field USBOTG[18] (RW)
 *
 * This bit controls the clock gate to the USB module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC4_USBOTG field. */
#define SIM_RD_SCGC4_USBOTG(base) ((SIM_SCGC4_REG(base) & SIM_SCGC4_USBOTG_MASK) >> SIM_SCGC4_USBOTG_SHIFT)
#define SIM_BRD_SCGC4_USBOTG(base) (BME_UBFX32(&SIM_SCGC4_REG(base), SIM_SCGC4_USBOTG_SHIFT, SIM_SCGC4_USBOTG_WIDTH))

/*! @brief Set the USBOTG field to a new value. */
#define SIM_WR_SCGC4_USBOTG(base, value) (SIM_RMW_SCGC4(base, SIM_SCGC4_USBOTG_MASK, SIM_SCGC4_USBOTG(value)))
#define SIM_BWR_SCGC4_USBOTG(base, value) (BME_BFI32(&SIM_SCGC4_REG(base), ((uint32_t)(value) << SIM_SCGC4_USBOTG_SHIFT), SIM_SCGC4_USBOTG_SHIFT, SIM_SCGC4_USBOTG_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC4, field CMP[19] (RW)
 *
 * This bit controls the clock gate to the comparator module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC4_CMP field. */
#define SIM_RD_SCGC4_CMP(base) ((SIM_SCGC4_REG(base) & SIM_SCGC4_CMP_MASK) >> SIM_SCGC4_CMP_SHIFT)
#define SIM_BRD_SCGC4_CMP(base) (BME_UBFX32(&SIM_SCGC4_REG(base), SIM_SCGC4_CMP_SHIFT, SIM_SCGC4_CMP_WIDTH))

/*! @brief Set the CMP field to a new value. */
#define SIM_WR_SCGC4_CMP(base, value) (SIM_RMW_SCGC4(base, SIM_SCGC4_CMP_MASK, SIM_SCGC4_CMP(value)))
#define SIM_BWR_SCGC4_CMP(base, value) (BME_BFI32(&SIM_SCGC4_REG(base), ((uint32_t)(value) << SIM_SCGC4_CMP_SHIFT), SIM_SCGC4_CMP_SHIFT, SIM_SCGC4_CMP_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC4, field VREF[20] (RW)
 *
 * This bit controls the clock gate to the VREF module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC4_VREF field. */
#define SIM_RD_SCGC4_VREF(base) ((SIM_SCGC4_REG(base) & SIM_SCGC4_VREF_MASK) >> SIM_SCGC4_VREF_SHIFT)
#define SIM_BRD_SCGC4_VREF(base) (BME_UBFX32(&SIM_SCGC4_REG(base), SIM_SCGC4_VREF_SHIFT, SIM_SCGC4_VREF_WIDTH))

/*! @brief Set the VREF field to a new value. */
#define SIM_WR_SCGC4_VREF(base, value) (SIM_RMW_SCGC4(base, SIM_SCGC4_VREF_MASK, SIM_SCGC4_VREF(value)))
#define SIM_BWR_SCGC4_VREF(base, value) (BME_BFI32(&SIM_SCGC4_REG(base), ((uint32_t)(value) << SIM_SCGC4_VREF_SHIFT), SIM_SCGC4_VREF_SHIFT, SIM_SCGC4_VREF_WIDTH))
/*@}*/

/*******************************************************************************
 * SIM_SCGC5 - System Clock Gating Control Register 5
 ******************************************************************************/

/*!
 * @brief SIM_SCGC5 - System Clock Gating Control Register 5 (RW)
 *
 * Reset value: 0x00040182U
 */
/*!
 * @name Constants and macros for entire SIM_SCGC5 register
 */
/*@{*/
#define SIM_RD_SCGC5(base)       (SIM_SCGC5_REG(base))
#define SIM_WR_SCGC5(base, value) (SIM_SCGC5_REG(base) = (value))
#define SIM_RMW_SCGC5(base, mask, value) (SIM_WR_SCGC5(base, (SIM_RD_SCGC5(base) & ~(mask)) | (value)))
#define SIM_SET_SCGC5(base, value) (BME_OR32(&SIM_SCGC5_REG(base), (uint32_t)(value)))
#define SIM_CLR_SCGC5(base, value) (BME_AND32(&SIM_SCGC5_REG(base), (uint32_t)(~(value))))
#define SIM_TOG_SCGC5(base, value) (BME_XOR32(&SIM_SCGC5_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SIM_SCGC5 bitfields
 */

/*!
 * @name Register SIM_SCGC5, field LPTMR[0] (RW)
 *
 * This bit controls software access to the Low Power Timer module.
 *
 * Values:
 * - 0b0 - Access disabled
 * - 0b1 - Access enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC5_LPTMR field. */
#define SIM_RD_SCGC5_LPTMR(base) ((SIM_SCGC5_REG(base) & SIM_SCGC5_LPTMR_MASK) >> SIM_SCGC5_LPTMR_SHIFT)
#define SIM_BRD_SCGC5_LPTMR(base) (BME_UBFX32(&SIM_SCGC5_REG(base), SIM_SCGC5_LPTMR_SHIFT, SIM_SCGC5_LPTMR_WIDTH))

/*! @brief Set the LPTMR field to a new value. */
#define SIM_WR_SCGC5_LPTMR(base, value) (SIM_RMW_SCGC5(base, SIM_SCGC5_LPTMR_MASK, SIM_SCGC5_LPTMR(value)))
#define SIM_BWR_SCGC5_LPTMR(base, value) (BME_BFI32(&SIM_SCGC5_REG(base), ((uint32_t)(value) << SIM_SCGC5_LPTMR_SHIFT), SIM_SCGC5_LPTMR_SHIFT, SIM_SCGC5_LPTMR_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC5, field LPTMR1[4] (RW)
 *
 * This bit controls software access to the LPTMR1 module.
 *
 * Values:
 * - 0b0 - Access disabled
 * - 0b1 - Access enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC5_LPTMR1 field. */
#define SIM_RD_SCGC5_LPTMR1(base) ((SIM_SCGC5_REG(base) & SIM_SCGC5_LPTMR1_MASK) >> SIM_SCGC5_LPTMR1_SHIFT)
#define SIM_BRD_SCGC5_LPTMR1(base) (BME_UBFX32(&SIM_SCGC5_REG(base), SIM_SCGC5_LPTMR1_SHIFT, SIM_SCGC5_LPTMR1_WIDTH))

/*! @brief Set the LPTMR1 field to a new value. */
#define SIM_WR_SCGC5_LPTMR1(base, value) (SIM_RMW_SCGC5(base, SIM_SCGC5_LPTMR1_MASK, SIM_SCGC5_LPTMR1(value)))
#define SIM_BWR_SCGC5_LPTMR1(base, value) (BME_BFI32(&SIM_SCGC5_REG(base), ((uint32_t)(value) << SIM_SCGC5_LPTMR1_SHIFT), SIM_SCGC5_LPTMR1_SHIFT, SIM_SCGC5_LPTMR1_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC5, field TSI[5] (RW)
 *
 * This bit controls the clock gate to the TSI module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC5_TSI field. */
#define SIM_RD_SCGC5_TSI(base) ((SIM_SCGC5_REG(base) & SIM_SCGC5_TSI_MASK) >> SIM_SCGC5_TSI_SHIFT)
#define SIM_BRD_SCGC5_TSI(base) (BME_UBFX32(&SIM_SCGC5_REG(base), SIM_SCGC5_TSI_SHIFT, SIM_SCGC5_TSI_WIDTH))

/*! @brief Set the TSI field to a new value. */
#define SIM_WR_SCGC5_TSI(base, value) (SIM_RMW_SCGC5(base, SIM_SCGC5_TSI_MASK, SIM_SCGC5_TSI(value)))
#define SIM_BWR_SCGC5_TSI(base, value) (BME_BFI32(&SIM_SCGC5_REG(base), ((uint32_t)(value) << SIM_SCGC5_TSI_SHIFT), SIM_SCGC5_TSI_SHIFT, SIM_SCGC5_TSI_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC5, field PORTA[9] (RW)
 *
 * This bit controls the clock gate to the Port A module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC5_PORTA field. */
#define SIM_RD_SCGC5_PORTA(base) ((SIM_SCGC5_REG(base) & SIM_SCGC5_PORTA_MASK) >> SIM_SCGC5_PORTA_SHIFT)
#define SIM_BRD_SCGC5_PORTA(base) (BME_UBFX32(&SIM_SCGC5_REG(base), SIM_SCGC5_PORTA_SHIFT, SIM_SCGC5_PORTA_WIDTH))

/*! @brief Set the PORTA field to a new value. */
#define SIM_WR_SCGC5_PORTA(base, value) (SIM_RMW_SCGC5(base, SIM_SCGC5_PORTA_MASK, SIM_SCGC5_PORTA(value)))
#define SIM_BWR_SCGC5_PORTA(base, value) (BME_BFI32(&SIM_SCGC5_REG(base), ((uint32_t)(value) << SIM_SCGC5_PORTA_SHIFT), SIM_SCGC5_PORTA_SHIFT, SIM_SCGC5_PORTA_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC5, field PORTB[10] (RW)
 *
 * This bit controls the clock gate to the Port B module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC5_PORTB field. */
#define SIM_RD_SCGC5_PORTB(base) ((SIM_SCGC5_REG(base) & SIM_SCGC5_PORTB_MASK) >> SIM_SCGC5_PORTB_SHIFT)
#define SIM_BRD_SCGC5_PORTB(base) (BME_UBFX32(&SIM_SCGC5_REG(base), SIM_SCGC5_PORTB_SHIFT, SIM_SCGC5_PORTB_WIDTH))

/*! @brief Set the PORTB field to a new value. */
#define SIM_WR_SCGC5_PORTB(base, value) (SIM_RMW_SCGC5(base, SIM_SCGC5_PORTB_MASK, SIM_SCGC5_PORTB(value)))
#define SIM_BWR_SCGC5_PORTB(base, value) (BME_BFI32(&SIM_SCGC5_REG(base), ((uint32_t)(value) << SIM_SCGC5_PORTB_SHIFT), SIM_SCGC5_PORTB_SHIFT, SIM_SCGC5_PORTB_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC5, field PORTC[11] (RW)
 *
 * This bit controls the clock gate to the Port C module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC5_PORTC field. */
#define SIM_RD_SCGC5_PORTC(base) ((SIM_SCGC5_REG(base) & SIM_SCGC5_PORTC_MASK) >> SIM_SCGC5_PORTC_SHIFT)
#define SIM_BRD_SCGC5_PORTC(base) (BME_UBFX32(&SIM_SCGC5_REG(base), SIM_SCGC5_PORTC_SHIFT, SIM_SCGC5_PORTC_WIDTH))

/*! @brief Set the PORTC field to a new value. */
#define SIM_WR_SCGC5_PORTC(base, value) (SIM_RMW_SCGC5(base, SIM_SCGC5_PORTC_MASK, SIM_SCGC5_PORTC(value)))
#define SIM_BWR_SCGC5_PORTC(base, value) (BME_BFI32(&SIM_SCGC5_REG(base), ((uint32_t)(value) << SIM_SCGC5_PORTC_SHIFT), SIM_SCGC5_PORTC_SHIFT, SIM_SCGC5_PORTC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC5, field PORTD[12] (RW)
 *
 * This bit controls the clock gate to the Port D module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC5_PORTD field. */
#define SIM_RD_SCGC5_PORTD(base) ((SIM_SCGC5_REG(base) & SIM_SCGC5_PORTD_MASK) >> SIM_SCGC5_PORTD_SHIFT)
#define SIM_BRD_SCGC5_PORTD(base) (BME_UBFX32(&SIM_SCGC5_REG(base), SIM_SCGC5_PORTD_SHIFT, SIM_SCGC5_PORTD_WIDTH))

/*! @brief Set the PORTD field to a new value. */
#define SIM_WR_SCGC5_PORTD(base, value) (SIM_RMW_SCGC5(base, SIM_SCGC5_PORTD_MASK, SIM_SCGC5_PORTD(value)))
#define SIM_BWR_SCGC5_PORTD(base, value) (BME_BFI32(&SIM_SCGC5_REG(base), ((uint32_t)(value) << SIM_SCGC5_PORTD_SHIFT), SIM_SCGC5_PORTD_SHIFT, SIM_SCGC5_PORTD_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC5, field PORTE[13] (RW)
 *
 * This bit controls the clock gate to the Port E module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC5_PORTE field. */
#define SIM_RD_SCGC5_PORTE(base) ((SIM_SCGC5_REG(base) & SIM_SCGC5_PORTE_MASK) >> SIM_SCGC5_PORTE_SHIFT)
#define SIM_BRD_SCGC5_PORTE(base) (BME_UBFX32(&SIM_SCGC5_REG(base), SIM_SCGC5_PORTE_SHIFT, SIM_SCGC5_PORTE_WIDTH))

/*! @brief Set the PORTE field to a new value. */
#define SIM_WR_SCGC5_PORTE(base, value) (SIM_RMW_SCGC5(base, SIM_SCGC5_PORTE_MASK, SIM_SCGC5_PORTE(value)))
#define SIM_BWR_SCGC5_PORTE(base, value) (BME_BFI32(&SIM_SCGC5_REG(base), ((uint32_t)(value) << SIM_SCGC5_PORTE_SHIFT), SIM_SCGC5_PORTE_SHIFT, SIM_SCGC5_PORTE_WIDTH))
/*@}*/

/*******************************************************************************
 * SIM_SCGC6 - System Clock Gating Control Register 6
 ******************************************************************************/

/*!
 * @brief SIM_SCGC6 - System Clock Gating Control Register 6 (RW)
 *
 * Reset value: 0x40000001U
 *
 * DAC0, FTM2 can be accessed through both AIPS0 and AIPS1. When accessing
 * through AIPS1, define the clock gate control bits in the SCGC2 and SCGC3. When
 * accessing through AIPS0, define the clock gate control bits in SCGC6. See the Chip
 * Configuration chapter for the base addresses of FTM2, and DAC0 accessed via
 * AIPS0 and AIPS1.
 */
/*!
 * @name Constants and macros for entire SIM_SCGC6 register
 */
/*@{*/
#define SIM_RD_SCGC6(base)       (SIM_SCGC6_REG(base))
#define SIM_WR_SCGC6(base, value) (SIM_SCGC6_REG(base) = (value))
#define SIM_RMW_SCGC6(base, mask, value) (SIM_WR_SCGC6(base, (SIM_RD_SCGC6(base) & ~(mask)) | (value)))
#define SIM_SET_SCGC6(base, value) (BME_OR32(&SIM_SCGC6_REG(base), (uint32_t)(value)))
#define SIM_CLR_SCGC6(base, value) (BME_AND32(&SIM_SCGC6_REG(base), (uint32_t)(~(value))))
#define SIM_TOG_SCGC6(base, value) (BME_XOR32(&SIM_SCGC6_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SIM_SCGC6 bitfields
 */

/*!
 * @name Register SIM_SCGC6, field FTF[0] (RW)
 *
 * This bit controls the clock gate to the flash memory. Flash reads are still
 * supported while the flash memory is clock gated, but entry into low power modes
 * is blocked.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC6_FTF field. */
#define SIM_RD_SCGC6_FTF(base) ((SIM_SCGC6_REG(base) & SIM_SCGC6_FTF_MASK) >> SIM_SCGC6_FTF_SHIFT)
#define SIM_BRD_SCGC6_FTF(base) (BME_UBFX32(&SIM_SCGC6_REG(base), SIM_SCGC6_FTF_SHIFT, SIM_SCGC6_FTF_WIDTH))

/*! @brief Set the FTF field to a new value. */
#define SIM_WR_SCGC6_FTF(base, value) (SIM_RMW_SCGC6(base, SIM_SCGC6_FTF_MASK, SIM_SCGC6_FTF(value)))
#define SIM_BWR_SCGC6_FTF(base, value) (BME_BFI32(&SIM_SCGC6_REG(base), ((uint32_t)(value) << SIM_SCGC6_FTF_SHIFT), SIM_SCGC6_FTF_SHIFT, SIM_SCGC6_FTF_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC6, field DMAMUX[1] (RW)
 *
 * This bit controls the clock gate to the DMA Mux module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC6_DMAMUX field. */
#define SIM_RD_SCGC6_DMAMUX(base) ((SIM_SCGC6_REG(base) & SIM_SCGC6_DMAMUX_MASK) >> SIM_SCGC6_DMAMUX_SHIFT)
#define SIM_BRD_SCGC6_DMAMUX(base) (BME_UBFX32(&SIM_SCGC6_REG(base), SIM_SCGC6_DMAMUX_SHIFT, SIM_SCGC6_DMAMUX_WIDTH))

/*! @brief Set the DMAMUX field to a new value. */
#define SIM_WR_SCGC6_DMAMUX(base, value) (SIM_RMW_SCGC6(base, SIM_SCGC6_DMAMUX_MASK, SIM_SCGC6_DMAMUX(value)))
#define SIM_BWR_SCGC6_DMAMUX(base, value) (BME_BFI32(&SIM_SCGC6_REG(base), ((uint32_t)(value) << SIM_SCGC6_DMAMUX_SHIFT), SIM_SCGC6_DMAMUX_SHIFT, SIM_SCGC6_DMAMUX_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC6, field SPI0[12] (RW)
 *
 * This bit controls the clock gate to the SPI0 module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC6_SPI0 field. */
#define SIM_RD_SCGC6_SPI0(base) ((SIM_SCGC6_REG(base) & SIM_SCGC6_SPI0_MASK) >> SIM_SCGC6_SPI0_SHIFT)
#define SIM_BRD_SCGC6_SPI0(base) (BME_UBFX32(&SIM_SCGC6_REG(base), SIM_SCGC6_SPI0_SHIFT, SIM_SCGC6_SPI0_WIDTH))

/*! @brief Set the SPI0 field to a new value. */
#define SIM_WR_SCGC6_SPI0(base, value) (SIM_RMW_SCGC6(base, SIM_SCGC6_SPI0_MASK, SIM_SCGC6_SPI0(value)))
#define SIM_BWR_SCGC6_SPI0(base, value) (BME_BFI32(&SIM_SCGC6_REG(base), ((uint32_t)(value) << SIM_SCGC6_SPI0_SHIFT), SIM_SCGC6_SPI0_SHIFT, SIM_SCGC6_SPI0_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC6, field SPI1[13] (RW)
 *
 * This bit controls the clock gate to the SPI1 module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC6_SPI1 field. */
#define SIM_RD_SCGC6_SPI1(base) ((SIM_SCGC6_REG(base) & SIM_SCGC6_SPI1_MASK) >> SIM_SCGC6_SPI1_SHIFT)
#define SIM_BRD_SCGC6_SPI1(base) (BME_UBFX32(&SIM_SCGC6_REG(base), SIM_SCGC6_SPI1_SHIFT, SIM_SCGC6_SPI1_WIDTH))

/*! @brief Set the SPI1 field to a new value. */
#define SIM_WR_SCGC6_SPI1(base, value) (SIM_RMW_SCGC6(base, SIM_SCGC6_SPI1_MASK, SIM_SCGC6_SPI1(value)))
#define SIM_BWR_SCGC6_SPI1(base, value) (BME_BFI32(&SIM_SCGC6_REG(base), ((uint32_t)(value) << SIM_SCGC6_SPI1_SHIFT), SIM_SCGC6_SPI1_SHIFT, SIM_SCGC6_SPI1_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC6, field I2S[15] (RW)
 *
 * This bit controls the clock gate to the I 2 S module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC6_I2S field. */
#define SIM_RD_SCGC6_I2S(base) ((SIM_SCGC6_REG(base) & SIM_SCGC6_I2S_MASK) >> SIM_SCGC6_I2S_SHIFT)
#define SIM_BRD_SCGC6_I2S(base) (BME_UBFX32(&SIM_SCGC6_REG(base), SIM_SCGC6_I2S_SHIFT, SIM_SCGC6_I2S_WIDTH))

/*! @brief Set the I2S field to a new value. */
#define SIM_WR_SCGC6_I2S(base, value) (SIM_RMW_SCGC6(base, SIM_SCGC6_I2S_MASK, SIM_SCGC6_I2S(value)))
#define SIM_BWR_SCGC6_I2S(base, value) (BME_BFI32(&SIM_SCGC6_REG(base), ((uint32_t)(value) << SIM_SCGC6_I2S_SHIFT), SIM_SCGC6_I2S_SHIFT, SIM_SCGC6_I2S_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC6, field CRC[18] (RW)
 *
 * This bit controls the clock gate to the CRC module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC6_CRC field. */
#define SIM_RD_SCGC6_CRC(base) ((SIM_SCGC6_REG(base) & SIM_SCGC6_CRC_MASK) >> SIM_SCGC6_CRC_SHIFT)
#define SIM_BRD_SCGC6_CRC(base) (BME_UBFX32(&SIM_SCGC6_REG(base), SIM_SCGC6_CRC_SHIFT, SIM_SCGC6_CRC_WIDTH))

/*! @brief Set the CRC field to a new value. */
#define SIM_WR_SCGC6_CRC(base, value) (SIM_RMW_SCGC6(base, SIM_SCGC6_CRC_MASK, SIM_SCGC6_CRC(value)))
#define SIM_BWR_SCGC6_CRC(base, value) (BME_BFI32(&SIM_SCGC6_REG(base), ((uint32_t)(value) << SIM_SCGC6_CRC_SHIFT), SIM_SCGC6_CRC_SHIFT, SIM_SCGC6_CRC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC6, field USBDCD[21] (RW)
 *
 * This bit controls the clock gate to the USB DCD module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC6_USBDCD field. */
#define SIM_RD_SCGC6_USBDCD(base) ((SIM_SCGC6_REG(base) & SIM_SCGC6_USBDCD_MASK) >> SIM_SCGC6_USBDCD_SHIFT)
#define SIM_BRD_SCGC6_USBDCD(base) (BME_UBFX32(&SIM_SCGC6_REG(base), SIM_SCGC6_USBDCD_SHIFT, SIM_SCGC6_USBDCD_WIDTH))

/*! @brief Set the USBDCD field to a new value. */
#define SIM_WR_SCGC6_USBDCD(base, value) (SIM_RMW_SCGC6(base, SIM_SCGC6_USBDCD_MASK, SIM_SCGC6_USBDCD(value)))
#define SIM_BWR_SCGC6_USBDCD(base, value) (BME_BFI32(&SIM_SCGC6_REG(base), ((uint32_t)(value) << SIM_SCGC6_USBDCD_SHIFT), SIM_SCGC6_USBDCD_SHIFT, SIM_SCGC6_USBDCD_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC6, field PDB[22] (RW)
 *
 * This bit controls the clock gate to the PDB module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC6_PDB field. */
#define SIM_RD_SCGC6_PDB(base) ((SIM_SCGC6_REG(base) & SIM_SCGC6_PDB_MASK) >> SIM_SCGC6_PDB_SHIFT)
#define SIM_BRD_SCGC6_PDB(base) (BME_UBFX32(&SIM_SCGC6_REG(base), SIM_SCGC6_PDB_SHIFT, SIM_SCGC6_PDB_WIDTH))

/*! @brief Set the PDB field to a new value. */
#define SIM_WR_SCGC6_PDB(base, value) (SIM_RMW_SCGC6(base, SIM_SCGC6_PDB_MASK, SIM_SCGC6_PDB(value)))
#define SIM_BWR_SCGC6_PDB(base, value) (BME_BFI32(&SIM_SCGC6_REG(base), ((uint32_t)(value) << SIM_SCGC6_PDB_SHIFT), SIM_SCGC6_PDB_SHIFT, SIM_SCGC6_PDB_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC6, field PIT[23] (RW)
 *
 * This bit controls the clock gate to the PIT module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC6_PIT field. */
#define SIM_RD_SCGC6_PIT(base) ((SIM_SCGC6_REG(base) & SIM_SCGC6_PIT_MASK) >> SIM_SCGC6_PIT_SHIFT)
#define SIM_BRD_SCGC6_PIT(base) (BME_UBFX32(&SIM_SCGC6_REG(base), SIM_SCGC6_PIT_SHIFT, SIM_SCGC6_PIT_WIDTH))

/*! @brief Set the PIT field to a new value. */
#define SIM_WR_SCGC6_PIT(base, value) (SIM_RMW_SCGC6(base, SIM_SCGC6_PIT_MASK, SIM_SCGC6_PIT(value)))
#define SIM_BWR_SCGC6_PIT(base, value) (BME_BFI32(&SIM_SCGC6_REG(base), ((uint32_t)(value) << SIM_SCGC6_PIT_SHIFT), SIM_SCGC6_PIT_SHIFT, SIM_SCGC6_PIT_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC6, field FTM0[24] (RW)
 *
 * This bit controls the clock gate to the FTM0 module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC6_FTM0 field. */
#define SIM_RD_SCGC6_FTM0(base) ((SIM_SCGC6_REG(base) & SIM_SCGC6_FTM0_MASK) >> SIM_SCGC6_FTM0_SHIFT)
#define SIM_BRD_SCGC6_FTM0(base) (BME_UBFX32(&SIM_SCGC6_REG(base), SIM_SCGC6_FTM0_SHIFT, SIM_SCGC6_FTM0_WIDTH))

/*! @brief Set the FTM0 field to a new value. */
#define SIM_WR_SCGC6_FTM0(base, value) (SIM_RMW_SCGC6(base, SIM_SCGC6_FTM0_MASK, SIM_SCGC6_FTM0(value)))
#define SIM_BWR_SCGC6_FTM0(base, value) (BME_BFI32(&SIM_SCGC6_REG(base), ((uint32_t)(value) << SIM_SCGC6_FTM0_SHIFT), SIM_SCGC6_FTM0_SHIFT, SIM_SCGC6_FTM0_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC6, field FTM1[25] (RW)
 *
 * This bit controls the clock gate to the FTM1 module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC6_FTM1 field. */
#define SIM_RD_SCGC6_FTM1(base) ((SIM_SCGC6_REG(base) & SIM_SCGC6_FTM1_MASK) >> SIM_SCGC6_FTM1_SHIFT)
#define SIM_BRD_SCGC6_FTM1(base) (BME_UBFX32(&SIM_SCGC6_REG(base), SIM_SCGC6_FTM1_SHIFT, SIM_SCGC6_FTM1_WIDTH))

/*! @brief Set the FTM1 field to a new value. */
#define SIM_WR_SCGC6_FTM1(base, value) (SIM_RMW_SCGC6(base, SIM_SCGC6_FTM1_MASK, SIM_SCGC6_FTM1(value)))
#define SIM_BWR_SCGC6_FTM1(base, value) (BME_BFI32(&SIM_SCGC6_REG(base), ((uint32_t)(value) << SIM_SCGC6_FTM1_SHIFT), SIM_SCGC6_FTM1_SHIFT, SIM_SCGC6_FTM1_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC6, field FTM2[26] (RW)
 *
 * This bit controls the clock gate to the FTM2 module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC6_FTM2 field. */
#define SIM_RD_SCGC6_FTM2(base) ((SIM_SCGC6_REG(base) & SIM_SCGC6_FTM2_MASK) >> SIM_SCGC6_FTM2_SHIFT)
#define SIM_BRD_SCGC6_FTM2(base) (BME_UBFX32(&SIM_SCGC6_REG(base), SIM_SCGC6_FTM2_SHIFT, SIM_SCGC6_FTM2_WIDTH))

/*! @brief Set the FTM2 field to a new value. */
#define SIM_WR_SCGC6_FTM2(base, value) (SIM_RMW_SCGC6(base, SIM_SCGC6_FTM2_MASK, SIM_SCGC6_FTM2(value)))
#define SIM_BWR_SCGC6_FTM2(base, value) (BME_BFI32(&SIM_SCGC6_REG(base), ((uint32_t)(value) << SIM_SCGC6_FTM2_SHIFT), SIM_SCGC6_FTM2_SHIFT, SIM_SCGC6_FTM2_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC6, field ADC0[27] (RW)
 *
 * This bit controls the clock gate to the ADC0 module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC6_ADC0 field. */
#define SIM_RD_SCGC6_ADC0(base) ((SIM_SCGC6_REG(base) & SIM_SCGC6_ADC0_MASK) >> SIM_SCGC6_ADC0_SHIFT)
#define SIM_BRD_SCGC6_ADC0(base) (BME_UBFX32(&SIM_SCGC6_REG(base), SIM_SCGC6_ADC0_SHIFT, SIM_SCGC6_ADC0_WIDTH))

/*! @brief Set the ADC0 field to a new value. */
#define SIM_WR_SCGC6_ADC0(base, value) (SIM_RMW_SCGC6(base, SIM_SCGC6_ADC0_MASK, SIM_SCGC6_ADC0(value)))
#define SIM_BWR_SCGC6_ADC0(base, value) (BME_BFI32(&SIM_SCGC6_REG(base), ((uint32_t)(value) << SIM_SCGC6_ADC0_SHIFT), SIM_SCGC6_ADC0_SHIFT, SIM_SCGC6_ADC0_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC6, field RTC[29] (RW)
 *
 * This bit controls software access and interrupts to the RTC module.
 *
 * Values:
 * - 0b0 - Access and interrupts disabled
 * - 0b1 - Access and interrupts enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC6_RTC field. */
#define SIM_RD_SCGC6_RTC(base) ((SIM_SCGC6_REG(base) & SIM_SCGC6_RTC_MASK) >> SIM_SCGC6_RTC_SHIFT)
#define SIM_BRD_SCGC6_RTC(base) (BME_UBFX32(&SIM_SCGC6_REG(base), SIM_SCGC6_RTC_SHIFT, SIM_SCGC6_RTC_WIDTH))

/*! @brief Set the RTC field to a new value. */
#define SIM_WR_SCGC6_RTC(base, value) (SIM_RMW_SCGC6(base, SIM_SCGC6_RTC_MASK, SIM_SCGC6_RTC(value)))
#define SIM_BWR_SCGC6_RTC(base, value) (BME_BFI32(&SIM_SCGC6_REG(base), ((uint32_t)(value) << SIM_SCGC6_RTC_SHIFT), SIM_SCGC6_RTC_SHIFT, SIM_SCGC6_RTC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC6, field DAC0[31] (RW)
 *
 * This bit controls the clock gate to the DAC0 module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC6_DAC0 field. */
#define SIM_RD_SCGC6_DAC0(base) ((SIM_SCGC6_REG(base) & SIM_SCGC6_DAC0_MASK) >> SIM_SCGC6_DAC0_SHIFT)
#define SIM_BRD_SCGC6_DAC0(base) (BME_UBFX32(&SIM_SCGC6_REG(base), SIM_SCGC6_DAC0_SHIFT, SIM_SCGC6_DAC0_WIDTH))

/*! @brief Set the DAC0 field to a new value. */
#define SIM_WR_SCGC6_DAC0(base, value) (SIM_RMW_SCGC6(base, SIM_SCGC6_DAC0_MASK, SIM_SCGC6_DAC0(value)))
#define SIM_BWR_SCGC6_DAC0(base, value) (BME_BFI32(&SIM_SCGC6_REG(base), ((uint32_t)(value) << SIM_SCGC6_DAC0_SHIFT), SIM_SCGC6_DAC0_SHIFT, SIM_SCGC6_DAC0_WIDTH))
/*@}*/

/*******************************************************************************
 * SIM_SCGC7 - System Clock Gating Control Register 7
 ******************************************************************************/

/*!
 * @brief SIM_SCGC7 - System Clock Gating Control Register 7 (RW)
 *
 * Reset value: 0x00000006U
 */
/*!
 * @name Constants and macros for entire SIM_SCGC7 register
 */
/*@{*/
#define SIM_RD_SCGC7(base)       (SIM_SCGC7_REG(base))
#define SIM_WR_SCGC7(base, value) (SIM_SCGC7_REG(base) = (value))
#define SIM_RMW_SCGC7(base, mask, value) (SIM_WR_SCGC7(base, (SIM_RD_SCGC7(base) & ~(mask)) | (value)))
#define SIM_SET_SCGC7(base, value) (BME_OR32(&SIM_SCGC7_REG(base), (uint32_t)(value)))
#define SIM_CLR_SCGC7(base, value) (BME_AND32(&SIM_SCGC7_REG(base), (uint32_t)(~(value))))
#define SIM_TOG_SCGC7(base, value) (BME_XOR32(&SIM_SCGC7_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SIM_SCGC7 bitfields
 */

/*!
 * @name Register SIM_SCGC7, field FLEXBUS[0] (RW)
 *
 * This bit controls the clock gate to the FlexBus module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC7_FLEXBUS field. */
#define SIM_RD_SCGC7_FLEXBUS(base) ((SIM_SCGC7_REG(base) & SIM_SCGC7_FLEXBUS_MASK) >> SIM_SCGC7_FLEXBUS_SHIFT)
#define SIM_BRD_SCGC7_FLEXBUS(base) (BME_UBFX32(&SIM_SCGC7_REG(base), SIM_SCGC7_FLEXBUS_SHIFT, SIM_SCGC7_FLEXBUS_WIDTH))

/*! @brief Set the FLEXBUS field to a new value. */
#define SIM_WR_SCGC7_FLEXBUS(base, value) (SIM_RMW_SCGC7(base, SIM_SCGC7_FLEXBUS_MASK, SIM_SCGC7_FLEXBUS(value)))
#define SIM_BWR_SCGC7_FLEXBUS(base, value) (BME_BFI32(&SIM_SCGC7_REG(base), ((uint32_t)(value) << SIM_SCGC7_FLEXBUS_SHIFT), SIM_SCGC7_FLEXBUS_SHIFT, SIM_SCGC7_FLEXBUS_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC7, field DMA[1] (RW)
 *
 * This bit controls the clock gate to the DMA module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC7_DMA field. */
#define SIM_RD_SCGC7_DMA(base) ((SIM_SCGC7_REG(base) & SIM_SCGC7_DMA_MASK) >> SIM_SCGC7_DMA_SHIFT)
#define SIM_BRD_SCGC7_DMA(base) (BME_UBFX32(&SIM_SCGC7_REG(base), SIM_SCGC7_DMA_SHIFT, SIM_SCGC7_DMA_WIDTH))

/*! @brief Set the DMA field to a new value. */
#define SIM_WR_SCGC7_DMA(base, value) (SIM_RMW_SCGC7(base, SIM_SCGC7_DMA_MASK, SIM_SCGC7_DMA(value)))
#define SIM_BWR_SCGC7_DMA(base, value) (BME_BFI32(&SIM_SCGC7_REG(base), ((uint32_t)(value) << SIM_SCGC7_DMA_SHIFT), SIM_SCGC7_DMA_SHIFT, SIM_SCGC7_DMA_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC7, field MPU[2] (RW)
 *
 * This bit controls the clock gate to the MPU module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC7_MPU field. */
#define SIM_RD_SCGC7_MPU(base) ((SIM_SCGC7_REG(base) & SIM_SCGC7_MPU_MASK) >> SIM_SCGC7_MPU_SHIFT)
#define SIM_BRD_SCGC7_MPU(base) (BME_UBFX32(&SIM_SCGC7_REG(base), SIM_SCGC7_MPU_SHIFT, SIM_SCGC7_MPU_WIDTH))

/*! @brief Set the MPU field to a new value. */
#define SIM_WR_SCGC7_MPU(base, value) (SIM_RMW_SCGC7(base, SIM_SCGC7_MPU_MASK, SIM_SCGC7_MPU(value)))
#define SIM_BWR_SCGC7_MPU(base, value) (BME_BFI32(&SIM_SCGC7_REG(base), ((uint32_t)(value) << SIM_SCGC7_MPU_SHIFT), SIM_SCGC7_MPU_SHIFT, SIM_SCGC7_MPU_WIDTH))
/*@}*/

/*!
 * @name Register SIM_SCGC7, field SDRAMC[3] (RW)
 *
 * This bit controls the clock gate to the SDRAMC module.
 *
 * Values:
 * - 0b0 - Clock disabled
 * - 0b1 - Clock enabled
 */
/*@{*/
/*! @brief Read current value of the SIM_SCGC7_SDRAMC field. */
#define SIM_RD_SCGC7_SDRAMC(base) ((SIM_SCGC7_REG(base) & SIM_SCGC7_SDRAMC_MASK) >> SIM_SCGC7_SDRAMC_SHIFT)
#define SIM_BRD_SCGC7_SDRAMC(base) (BME_UBFX32(&SIM_SCGC7_REG(base), SIM_SCGC7_SDRAMC_SHIFT, SIM_SCGC7_SDRAMC_WIDTH))

/*! @brief Set the SDRAMC field to a new value. */
#define SIM_WR_SCGC7_SDRAMC(base, value) (SIM_RMW_SCGC7(base, SIM_SCGC7_SDRAMC_MASK, SIM_SCGC7_SDRAMC(value)))
#define SIM_BWR_SCGC7_SDRAMC(base, value) (BME_BFI32(&SIM_SCGC7_REG(base), ((uint32_t)(value) << SIM_SCGC7_SDRAMC_SHIFT), SIM_SCGC7_SDRAMC_SHIFT, SIM_SCGC7_SDRAMC_WIDTH))
/*@}*/

/*******************************************************************************
 * SIM_CLKDIV1 - System Clock Divider Register 1
 ******************************************************************************/

/*!
 * @brief SIM_CLKDIV1 - System Clock Divider Register 1 (RW)
 *
 * Reset value: 0x00010000U
 *
 * When updating CLKDIV1, update all fields using the one write command.
 * Attempting to write an invalid clock ratio to the CLKDIV1 register will cause the
 * write to be ignored. The maximum divide ratio that can be programmed between
 * core/system clock and the other divided clocks is divide by 8. When OUTDIV1 equals
 * 0000 (divide by 1), the other dividers cannot be set higher than 0111 (divide
 * by 8). The CLKDIV1 register cannot be written to when the device is in VLPR
 * mode.
 */
/*!
 * @name Constants and macros for entire SIM_CLKDIV1 register
 */
/*@{*/
#define SIM_RD_CLKDIV1(base)     (SIM_CLKDIV1_REG(base))
#define SIM_WR_CLKDIV1(base, value) (SIM_CLKDIV1_REG(base) = (value))
#define SIM_RMW_CLKDIV1(base, mask, value) (SIM_WR_CLKDIV1(base, (SIM_RD_CLKDIV1(base) & ~(mask)) | (value)))
#define SIM_SET_CLKDIV1(base, value) (BME_OR32(&SIM_CLKDIV1_REG(base), (uint32_t)(value)))
#define SIM_CLR_CLKDIV1(base, value) (BME_AND32(&SIM_CLKDIV1_REG(base), (uint32_t)(~(value))))
#define SIM_TOG_CLKDIV1(base, value) (BME_XOR32(&SIM_CLKDIV1_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SIM_CLKDIV1 bitfields
 */

/*!
 * @name Register SIM_CLKDIV1, field OUTDIV4[19:16] (RW)
 *
 * This field sets the divide value for the flash clock from MCGOUTCLK. At the
 * end of reset, it is loaded with either 0001 or 1111 depending on
 * FTF_FOPT[LPBOOT]. The flash clock frequency must be an integer divide of the system clock
 * frequency.
 *
 * Values:
 * - 0b0000 - Divide-by-1.
 * - 0b0001 - Divide-by-2.
 * - 0b0010 - Divide-by-3.
 * - 0b0011 - Divide-by-4.
 * - 0b0100 - Divide-by-5.
 * - 0b0101 - Divide-by-6.
 * - 0b0110 - Divide-by-7.
 * - 0b0111 - Divide-by-8.
 * - 0b1000 - Divide-by-9.
 * - 0b1001 - Divide-by-10.
 * - 0b1010 - Divide-by-11.
 * - 0b1011 - Divide-by-12.
 * - 0b1100 - Divide-by-13.
 * - 0b1101 - Divide-by-14.
 * - 0b1110 - Divide-by-15.
 * - 0b1111 - Divide-by-16.
 */
/*@{*/
/*! @brief Read current value of the SIM_CLKDIV1_OUTDIV4 field. */
#define SIM_RD_CLKDIV1_OUTDIV4(base) ((SIM_CLKDIV1_REG(base) & SIM_CLKDIV1_OUTDIV4_MASK) >> SIM_CLKDIV1_OUTDIV4_SHIFT)
#define SIM_BRD_CLKDIV1_OUTDIV4(base) (BME_UBFX32(&SIM_CLKDIV1_REG(base), SIM_CLKDIV1_OUTDIV4_SHIFT, SIM_CLKDIV1_OUTDIV4_WIDTH))

/*! @brief Set the OUTDIV4 field to a new value. */
#define SIM_WR_CLKDIV1_OUTDIV4(base, value) (SIM_RMW_CLKDIV1(base, SIM_CLKDIV1_OUTDIV4_MASK, SIM_CLKDIV1_OUTDIV4(value)))
#define SIM_BWR_CLKDIV1_OUTDIV4(base, value) (BME_BFI32(&SIM_CLKDIV1_REG(base), ((uint32_t)(value) << SIM_CLKDIV1_OUTDIV4_SHIFT), SIM_CLKDIV1_OUTDIV4_SHIFT, SIM_CLKDIV1_OUTDIV4_WIDTH))
/*@}*/

/*!
 * @name Register SIM_CLKDIV1, field OUTDIV3[23:20] (RW)
 *
 * This field sets the divide value for the FlexBus clock (external pin FB_CLK)
 * from MCGOUTCLK. At the end of reset, it is loaded with either 0001 or 1111
 * depending on FTF_FOPT[LPBOOT]. The FlexBus clock frequency must be an integer
 * divide of the system clock frequency.
 *
 * Values:
 * - 0b0000 - Divide-by-1.
 * - 0b0001 - Divide-by-2.
 * - 0b0010 - Divide-by-3.
 * - 0b0011 - Divide-by-4.
 * - 0b0100 - Divide-by-5.
 * - 0b0101 - Divide-by-6.
 * - 0b0110 - Divide-by-7.
 * - 0b0111 - Divide-by-8.
 * - 0b1000 - Divide-by-9.
 * - 0b1001 - Divide-by-10.
 * - 0b1010 - Divide-by-11.
 * - 0b1011 - Divide-by-12.
 * - 0b1100 - Divide-by-13.
 * - 0b1101 - Divide-by-14.
 * - 0b1110 - Divide-by-15.
 * - 0b1111 - Divide-by-16.
 */
/*@{*/
/*! @brief Read current value of the SIM_CLKDIV1_OUTDIV3 field. */
#define SIM_RD_CLKDIV1_OUTDIV3(base) ((SIM_CLKDIV1_REG(base) & SIM_CLKDIV1_OUTDIV3_MASK) >> SIM_CLKDIV1_OUTDIV3_SHIFT)
#define SIM_BRD_CLKDIV1_OUTDIV3(base) (BME_UBFX32(&SIM_CLKDIV1_REG(base), SIM_CLKDIV1_OUTDIV3_SHIFT, SIM_CLKDIV1_OUTDIV3_WIDTH))

/*! @brief Set the OUTDIV3 field to a new value. */
#define SIM_WR_CLKDIV1_OUTDIV3(base, value) (SIM_RMW_CLKDIV1(base, SIM_CLKDIV1_OUTDIV3_MASK, SIM_CLKDIV1_OUTDIV3(value)))
#define SIM_BWR_CLKDIV1_OUTDIV3(base, value) (BME_BFI32(&SIM_CLKDIV1_REG(base), ((uint32_t)(value) << SIM_CLKDIV1_OUTDIV3_SHIFT), SIM_CLKDIV1_OUTDIV3_SHIFT, SIM_CLKDIV1_OUTDIV3_WIDTH))
/*@}*/

/*!
 * @name Register SIM_CLKDIV1, field OUTDIV2[27:24] (RW)
 *
 * This field sets the divide value for the bus clock from MCGOUTCLK. At the end
 * of reset, it is loaded with either 0000 or 0111 depending on
 * FTF_FOPT[LPBOOT]. The bus clock frequency must be an integer divide of the core/system clock
 * frequency.
 *
 * Values:
 * - 0b0000 - Divide-by-1.
 * - 0b0001 - Divide-by-2.
 * - 0b0010 - Divide-by-3.
 * - 0b0011 - Divide-by-4.
 * - 0b0100 - Divide-by-5.
 * - 0b0101 - Divide-by-6.
 * - 0b0110 - Divide-by-7.
 * - 0b0111 - Divide-by-8.
 * - 0b1000 - Divide-by-9.
 * - 0b1001 - Divide-by-10.
 * - 0b1010 - Divide-by-11.
 * - 0b1011 - Divide-by-12.
 * - 0b1100 - Divide-by-13.
 * - 0b1101 - Divide-by-14.
 * - 0b1110 - Divide-by-15.
 * - 0b1111 - Divide-by-16.
 */
/*@{*/
/*! @brief Read current value of the SIM_CLKDIV1_OUTDIV2 field. */
#define SIM_RD_CLKDIV1_OUTDIV2(base) ((SIM_CLKDIV1_REG(base) & SIM_CLKDIV1_OUTDIV2_MASK) >> SIM_CLKDIV1_OUTDIV2_SHIFT)
#define SIM_BRD_CLKDIV1_OUTDIV2(base) (BME_UBFX32(&SIM_CLKDIV1_REG(base), SIM_CLKDIV1_OUTDIV2_SHIFT, SIM_CLKDIV1_OUTDIV2_WIDTH))

/*! @brief Set the OUTDIV2 field to a new value. */
#define SIM_WR_CLKDIV1_OUTDIV2(base, value) (SIM_RMW_CLKDIV1(base, SIM_CLKDIV1_OUTDIV2_MASK, SIM_CLKDIV1_OUTDIV2(value)))
#define SIM_BWR_CLKDIV1_OUTDIV2(base, value) (BME_BFI32(&SIM_CLKDIV1_REG(base), ((uint32_t)(value) << SIM_CLKDIV1_OUTDIV2_SHIFT), SIM_CLKDIV1_OUTDIV2_SHIFT, SIM_CLKDIV1_OUTDIV2_WIDTH))
/*@}*/

/*!
 * @name Register SIM_CLKDIV1, field OUTDIV1[31:28] (RW)
 *
 * This field sets the divide value for the core/system clock from MCGOUTCLK. At
 * the end of reset, it is loaded with either 0000 or 0111 depending on
 * FTF_FOPT[LPBOOT].
 *
 * Values:
 * - 0b0000 - Divide-by-1.
 * - 0b0001 - Divide-by-2.
 * - 0b0010 - Divide-by-3.
 * - 0b0011 - Divide-by-4.
 * - 0b0100 - Divide-by-5.
 * - 0b0101 - Divide-by-6.
 * - 0b0110 - Divide-by-7.
 * - 0b0111 - Divide-by-8.
 * - 0b1000 - Divide-by-9.
 * - 0b1001 - Divide-by-10.
 * - 0b1010 - Divide-by-11.
 * - 0b1011 - Divide-by-12.
 * - 0b1100 - Divide-by-13.
 * - 0b1101 - Divide-by-14.
 * - 0b1110 - Divide-by-15.
 * - 0b1111 - Divide-by-16.
 */
/*@{*/
/*! @brief Read current value of the SIM_CLKDIV1_OUTDIV1 field. */
#define SIM_RD_CLKDIV1_OUTDIV1(base) ((SIM_CLKDIV1_REG(base) & SIM_CLKDIV1_OUTDIV1_MASK) >> SIM_CLKDIV1_OUTDIV1_SHIFT)
#define SIM_BRD_CLKDIV1_OUTDIV1(base) (BME_UBFX32(&SIM_CLKDIV1_REG(base), SIM_CLKDIV1_OUTDIV1_SHIFT, SIM_CLKDIV1_OUTDIV1_WIDTH))

/*! @brief Set the OUTDIV1 field to a new value. */
#define SIM_WR_CLKDIV1_OUTDIV1(base, value) (SIM_RMW_CLKDIV1(base, SIM_CLKDIV1_OUTDIV1_MASK, SIM_CLKDIV1_OUTDIV1(value)))
#define SIM_BWR_CLKDIV1_OUTDIV1(base, value) (BME_BFI32(&SIM_CLKDIV1_REG(base), ((uint32_t)(value) << SIM_CLKDIV1_OUTDIV1_SHIFT), SIM_CLKDIV1_OUTDIV1_SHIFT, SIM_CLKDIV1_OUTDIV1_WIDTH))
/*@}*/

/*******************************************************************************
 * SIM_CLKDIV2 - System Clock Divider Register 2
 ******************************************************************************/

/*!
 * @brief SIM_CLKDIV2 - System Clock Divider Register 2 (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire SIM_CLKDIV2 register
 */
/*@{*/
#define SIM_RD_CLKDIV2(base)     (SIM_CLKDIV2_REG(base))
#define SIM_WR_CLKDIV2(base, value) (SIM_CLKDIV2_REG(base) = (value))
#define SIM_RMW_CLKDIV2(base, mask, value) (SIM_WR_CLKDIV2(base, (SIM_RD_CLKDIV2(base) & ~(mask)) | (value)))
#define SIM_SET_CLKDIV2(base, value) (BME_OR32(&SIM_CLKDIV2_REG(base), (uint32_t)(value)))
#define SIM_CLR_CLKDIV2(base, value) (BME_AND32(&SIM_CLKDIV2_REG(base), (uint32_t)(~(value))))
#define SIM_TOG_CLKDIV2(base, value) (BME_XOR32(&SIM_CLKDIV2_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SIM_CLKDIV2 bitfields
 */

/*!
 * @name Register SIM_CLKDIV2, field USBFRAC[0] (RW)
 *
 * This field sets the fraction multiply value for the fractional clock divider
 * when the MCGFLLCLK, or MCGPLLCLK , or IRC48M clock is the USB clock source
 * (SOPT2[USBSRC] = 1). Divider output clock = Divider input clock * [ (USBFRAC+1) /
 * (USBDIV+1) ]
 */
/*@{*/
/*! @brief Read current value of the SIM_CLKDIV2_USBFRAC field. */
#define SIM_RD_CLKDIV2_USBFRAC(base) ((SIM_CLKDIV2_REG(base) & SIM_CLKDIV2_USBFRAC_MASK) >> SIM_CLKDIV2_USBFRAC_SHIFT)
#define SIM_BRD_CLKDIV2_USBFRAC(base) (BME_UBFX32(&SIM_CLKDIV2_REG(base), SIM_CLKDIV2_USBFRAC_SHIFT, SIM_CLKDIV2_USBFRAC_WIDTH))

/*! @brief Set the USBFRAC field to a new value. */
#define SIM_WR_CLKDIV2_USBFRAC(base, value) (SIM_RMW_CLKDIV2(base, SIM_CLKDIV2_USBFRAC_MASK, SIM_CLKDIV2_USBFRAC(value)))
#define SIM_BWR_CLKDIV2_USBFRAC(base, value) (BME_BFI32(&SIM_CLKDIV2_REG(base), ((uint32_t)(value) << SIM_CLKDIV2_USBFRAC_SHIFT), SIM_CLKDIV2_USBFRAC_SHIFT, SIM_CLKDIV2_USBFRAC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_CLKDIV2, field USBDIV[3:1] (RW)
 *
 * This field sets the divide value for the fractional clock divider when the
 * MCGFLLCLK, or MCGPLLCLK , or IRC48M clock is the USB clock source (SOPT2[USBSRC]
 * = 1). Divider output clock = Divider input clock * [ (USBFRAC+1) / (USBDIV+1)
 * ]
 */
/*@{*/
/*! @brief Read current value of the SIM_CLKDIV2_USBDIV field. */
#define SIM_RD_CLKDIV2_USBDIV(base) ((SIM_CLKDIV2_REG(base) & SIM_CLKDIV2_USBDIV_MASK) >> SIM_CLKDIV2_USBDIV_SHIFT)
#define SIM_BRD_CLKDIV2_USBDIV(base) (BME_UBFX32(&SIM_CLKDIV2_REG(base), SIM_CLKDIV2_USBDIV_SHIFT, SIM_CLKDIV2_USBDIV_WIDTH))

/*! @brief Set the USBDIV field to a new value. */
#define SIM_WR_CLKDIV2_USBDIV(base, value) (SIM_RMW_CLKDIV2(base, SIM_CLKDIV2_USBDIV_MASK, SIM_CLKDIV2_USBDIV(value)))
#define SIM_BWR_CLKDIV2_USBDIV(base, value) (BME_BFI32(&SIM_CLKDIV2_REG(base), ((uint32_t)(value) << SIM_CLKDIV2_USBDIV_SHIFT), SIM_CLKDIV2_USBDIV_SHIFT, SIM_CLKDIV2_USBDIV_WIDTH))
/*@}*/

/*******************************************************************************
 * SIM_FCFG1 - Flash Configuration Register 1
 ******************************************************************************/

/*!
 * @brief SIM_FCFG1 - Flash Configuration Register 1 (RW)
 *
 * Reset value: 0x0F0F0F00U
 */
/*!
 * @name Constants and macros for entire SIM_FCFG1 register
 */
/*@{*/
#define SIM_RD_FCFG1(base)       (SIM_FCFG1_REG(base))
#define SIM_WR_FCFG1(base, value) (SIM_FCFG1_REG(base) = (value))
#define SIM_RMW_FCFG1(base, mask, value) (SIM_WR_FCFG1(base, (SIM_RD_FCFG1(base) & ~(mask)) | (value)))
#define SIM_SET_FCFG1(base, value) (BME_OR32(&SIM_FCFG1_REG(base), (uint32_t)(value)))
#define SIM_CLR_FCFG1(base, value) (BME_AND32(&SIM_FCFG1_REG(base), (uint32_t)(~(value))))
#define SIM_TOG_FCFG1(base, value) (BME_XOR32(&SIM_FCFG1_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SIM_FCFG1 bitfields
 */

/*!
 * @name Register SIM_FCFG1, field FLASHDIS[0] (RW)
 *
 * Flash accesses are disabled (and generate a bus error) and the Flash memory
 * is placed in a low power state. This bit should not be changed during VLP
 * modes. Relocate the interrupt vectors out of Flash memory before disabling the
 * Flash.
 *
 * Values:
 * - 0b0 - Flash is enabled
 * - 0b1 - Flash is disabled
 */
/*@{*/
/*! @brief Read current value of the SIM_FCFG1_FLASHDIS field. */
#define SIM_RD_FCFG1_FLASHDIS(base) ((SIM_FCFG1_REG(base) & SIM_FCFG1_FLASHDIS_MASK) >> SIM_FCFG1_FLASHDIS_SHIFT)
#define SIM_BRD_FCFG1_FLASHDIS(base) (BME_UBFX32(&SIM_FCFG1_REG(base), SIM_FCFG1_FLASHDIS_SHIFT, SIM_FCFG1_FLASHDIS_WIDTH))

/*! @brief Set the FLASHDIS field to a new value. */
#define SIM_WR_FCFG1_FLASHDIS(base, value) (SIM_RMW_FCFG1(base, SIM_FCFG1_FLASHDIS_MASK, SIM_FCFG1_FLASHDIS(value)))
#define SIM_BWR_FCFG1_FLASHDIS(base, value) (BME_BFI32(&SIM_FCFG1_REG(base), ((uint32_t)(value) << SIM_FCFG1_FLASHDIS_SHIFT), SIM_FCFG1_FLASHDIS_SHIFT, SIM_FCFG1_FLASHDIS_WIDTH))
/*@}*/

/*!
 * @name Register SIM_FCFG1, field FLASHDOZE[1] (RW)
 *
 * When set, Flash memory is disabled for the duration of Wait mode. An attempt
 * by the DMA or other bus master to access the Flash when the Flash is disabled
 * will result in a bus error. This bit should be clear during VLP modes. The
 * Flash will be automatically enabled again at the end of Wait mode so interrupt
 * vectors do not need to be relocated out of Flash memory. The wakeup time from
 * Wait mode is extended when this bit is set.
 *
 * Values:
 * - 0b0 - Flash remains enabled during Wait mode
 * - 0b1 - Flash is disabled for the duration of Wait mode
 */
/*@{*/
/*! @brief Read current value of the SIM_FCFG1_FLASHDOZE field. */
#define SIM_RD_FCFG1_FLASHDOZE(base) ((SIM_FCFG1_REG(base) & SIM_FCFG1_FLASHDOZE_MASK) >> SIM_FCFG1_FLASHDOZE_SHIFT)
#define SIM_BRD_FCFG1_FLASHDOZE(base) (BME_UBFX32(&SIM_FCFG1_REG(base), SIM_FCFG1_FLASHDOZE_SHIFT, SIM_FCFG1_FLASHDOZE_WIDTH))

/*! @brief Set the FLASHDOZE field to a new value. */
#define SIM_WR_FCFG1_FLASHDOZE(base, value) (SIM_RMW_FCFG1(base, SIM_FCFG1_FLASHDOZE_MASK, SIM_FCFG1_FLASHDOZE(value)))
#define SIM_BWR_FCFG1_FLASHDOZE(base, value) (BME_BFI32(&SIM_FCFG1_REG(base), ((uint32_t)(value) << SIM_FCFG1_FLASHDOZE_SHIFT), SIM_FCFG1_FLASHDOZE_SHIFT, SIM_FCFG1_FLASHDOZE_WIDTH))
/*@}*/

/*!
 * @name Register SIM_FCFG1, field PFSIZE[27:24] (RO)
 *
 * This field specifies the amount of program flash memory available on the
 * device . Undefined values are reserved.
 *
 * Values:
 * - 0b0011 - 32 KB of program flash memory
 * - 0b0101 - 64 KB of program flash memory
 * - 0b0111 - 128 KB of program flash memory
 * - 0b1001 - 256 KB of program flash memory
 * - 0b1011 - 512 KB of program flash memory
 * - 0b1101 - 1024 KB of program flash memory
 * - 0b1111 - 256 KB of program flash memory
 */
/*@{*/
/*! @brief Read current value of the SIM_FCFG1_PFSIZE field. */
#define SIM_RD_FCFG1_PFSIZE(base) ((SIM_FCFG1_REG(base) & SIM_FCFG1_PFSIZE_MASK) >> SIM_FCFG1_PFSIZE_SHIFT)
#define SIM_BRD_FCFG1_PFSIZE(base) (BME_UBFX32(&SIM_FCFG1_REG(base), SIM_FCFG1_PFSIZE_SHIFT, SIM_FCFG1_PFSIZE_WIDTH))
/*@}*/

/*******************************************************************************
 * SIM_FCFG2 - Flash Configuration Register 2
 ******************************************************************************/

/*!
 * @brief SIM_FCFG2 - Flash Configuration Register 2 (RO)
 *
 * Reset value: 0x7FFF0000U
 */
/*!
 * @name Constants and macros for entire SIM_FCFG2 register
 */
/*@{*/
#define SIM_RD_FCFG2(base)       (SIM_FCFG2_REG(base))
/*@}*/

/*
 * Constants & macros for individual SIM_FCFG2 bitfields
 */

/*!
 * @name Register SIM_FCFG2, field MAXADDR1[22:16] (RO)
 *
 * This field equals zero if there is only one program flash block, otherwise it
 * equals the value of the MAXADDR0 field. For example, with MAXADDR0 = MAXADDR1
 * = 0x20 the first invalid address of flash block 1 is 0x4_0000 + 0x4_0000.
 * This would be the MAXADDR1 value for a device with 512 KB program flash memory
 * across two flash blocks and no FlexNVM.
 */
/*@{*/
/*! @brief Read current value of the SIM_FCFG2_MAXADDR1 field. */
#define SIM_RD_FCFG2_MAXADDR1(base) ((SIM_FCFG2_REG(base) & SIM_FCFG2_MAXADDR1_MASK) >> SIM_FCFG2_MAXADDR1_SHIFT)
#define SIM_BRD_FCFG2_MAXADDR1(base) (BME_UBFX32(&SIM_FCFG2_REG(base), SIM_FCFG2_MAXADDR1_SHIFT, SIM_FCFG2_MAXADDR1_WIDTH))
/*@}*/

/*!
 * @name Register SIM_FCFG2, field MAXADDR0[30:24] (RO)
 *
 * This field concatenated with 13 trailing zeros indicates the first invalid
 * address of each program flash block. For example, if MAXADDR0 = 0x20 the first
 * invalid address of flash block 0 is 0x0004_0000. This would be the MAXADDR0
 * value for a device with 256 KB program flash in flash block 0.
 */
/*@{*/
/*! @brief Read current value of the SIM_FCFG2_MAXADDR0 field. */
#define SIM_RD_FCFG2_MAXADDR0(base) ((SIM_FCFG2_REG(base) & SIM_FCFG2_MAXADDR0_MASK) >> SIM_FCFG2_MAXADDR0_SHIFT)
#define SIM_BRD_FCFG2_MAXADDR0(base) (BME_UBFX32(&SIM_FCFG2_REG(base), SIM_FCFG2_MAXADDR0_SHIFT, SIM_FCFG2_MAXADDR0_WIDTH))
/*@}*/

/*******************************************************************************
 * SIM_UIDH - Unique Identification Register High
 ******************************************************************************/

/*!
 * @brief SIM_UIDH - Unique Identification Register High (RO)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire SIM_UIDH register
 */
/*@{*/
#define SIM_RD_UIDH(base)        (SIM_UIDH_REG(base))
/*@}*/

/*******************************************************************************
 * SIM_UIDMH - Unique Identification Register Mid-High
 ******************************************************************************/

/*!
 * @brief SIM_UIDMH - Unique Identification Register Mid-High (RO)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire SIM_UIDMH register
 */
/*@{*/
#define SIM_RD_UIDMH(base)       (SIM_UIDMH_REG(base))
/*@}*/

/*******************************************************************************
 * SIM_UIDML - Unique Identification Register Mid Low
 ******************************************************************************/

/*!
 * @brief SIM_UIDML - Unique Identification Register Mid Low (RO)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire SIM_UIDML register
 */
/*@{*/
#define SIM_RD_UIDML(base)       (SIM_UIDML_REG(base))
/*@}*/

/*******************************************************************************
 * SIM_UIDL - Unique Identification Register Low
 ******************************************************************************/

/*!
 * @brief SIM_UIDL - Unique Identification Register Low (RO)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire SIM_UIDL register
 */
/*@{*/
#define SIM_RD_UIDL(base)        (SIM_UIDL_REG(base))
/*@}*/

/*******************************************************************************
 * SIM_CLKDIV3 - System Clock Divider Register 3
 ******************************************************************************/

/*!
 * @brief SIM_CLKDIV3 - System Clock Divider Register 3 (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register should only be written when the LPUART, EMVSIM, FlexIO and TPM
 * modules are disabled.
 */
/*!
 * @name Constants and macros for entire SIM_CLKDIV3 register
 */
/*@{*/
#define SIM_RD_CLKDIV3(base)     (SIM_CLKDIV3_REG(base))
#define SIM_WR_CLKDIV3(base, value) (SIM_CLKDIV3_REG(base) = (value))
#define SIM_RMW_CLKDIV3(base, mask, value) (SIM_WR_CLKDIV3(base, (SIM_RD_CLKDIV3(base) & ~(mask)) | (value)))
#define SIM_SET_CLKDIV3(base, value) (BME_OR32(&SIM_CLKDIV3_REG(base), (uint32_t)(value)))
#define SIM_CLR_CLKDIV3(base, value) (BME_AND32(&SIM_CLKDIV3_REG(base), (uint32_t)(~(value))))
#define SIM_TOG_CLKDIV3(base, value) (BME_XOR32(&SIM_CLKDIV3_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SIM_CLKDIV3 bitfields
 */

/*!
 * @name Register SIM_CLKDIV3, field PLLFLLFRAC[0] (RW)
 *
 * This field sets the divide value for the fractional clock divider used as a
 * source for various peripherals. The source clock for the fractional clock
 * divider is set by the SOPT2 PLLFLLSEL register bit. Divider output clock = Divider
 * input clock*((PLLFLLFRAC+1)/(PLLFLLDIV+1))
 */
/*@{*/
/*! @brief Read current value of the SIM_CLKDIV3_PLLFLLFRAC field. */
#define SIM_RD_CLKDIV3_PLLFLLFRAC(base) ((SIM_CLKDIV3_REG(base) & SIM_CLKDIV3_PLLFLLFRAC_MASK) >> SIM_CLKDIV3_PLLFLLFRAC_SHIFT)
#define SIM_BRD_CLKDIV3_PLLFLLFRAC(base) (BME_UBFX32(&SIM_CLKDIV3_REG(base), SIM_CLKDIV3_PLLFLLFRAC_SHIFT, SIM_CLKDIV3_PLLFLLFRAC_WIDTH))

/*! @brief Set the PLLFLLFRAC field to a new value. */
#define SIM_WR_CLKDIV3_PLLFLLFRAC(base, value) (SIM_RMW_CLKDIV3(base, SIM_CLKDIV3_PLLFLLFRAC_MASK, SIM_CLKDIV3_PLLFLLFRAC(value)))
#define SIM_BWR_CLKDIV3_PLLFLLFRAC(base, value) (BME_BFI32(&SIM_CLKDIV3_REG(base), ((uint32_t)(value) << SIM_CLKDIV3_PLLFLLFRAC_SHIFT), SIM_CLKDIV3_PLLFLLFRAC_SHIFT, SIM_CLKDIV3_PLLFLLFRAC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_CLKDIV3, field PLLFLLDIV[3:1] (RW)
 *
 * This field sets the divide value for the fractional clock divider used as a
 * source for various peripheral clocks. The source clock for the fractional clock
 * divider is set by the SOPT2 PLLFLLSEL register bit. Divider output clock =
 * Divider input clock * ((PLLFLLFRAC+1)/(PLLFLLDIV+1))
 */
/*@{*/
/*! @brief Read current value of the SIM_CLKDIV3_PLLFLLDIV field. */
#define SIM_RD_CLKDIV3_PLLFLLDIV(base) ((SIM_CLKDIV3_REG(base) & SIM_CLKDIV3_PLLFLLDIV_MASK) >> SIM_CLKDIV3_PLLFLLDIV_SHIFT)
#define SIM_BRD_CLKDIV3_PLLFLLDIV(base) (BME_UBFX32(&SIM_CLKDIV3_REG(base), SIM_CLKDIV3_PLLFLLDIV_SHIFT, SIM_CLKDIV3_PLLFLLDIV_WIDTH))

/*! @brief Set the PLLFLLDIV field to a new value. */
#define SIM_WR_CLKDIV3_PLLFLLDIV(base, value) (SIM_RMW_CLKDIV3(base, SIM_CLKDIV3_PLLFLLDIV_MASK, SIM_CLKDIV3_PLLFLLDIV(value)))
#define SIM_BWR_CLKDIV3_PLLFLLDIV(base, value) (BME_BFI32(&SIM_CLKDIV3_REG(base), ((uint32_t)(value) << SIM_CLKDIV3_PLLFLLDIV_SHIFT), SIM_CLKDIV3_PLLFLLDIV_SHIFT, SIM_CLKDIV3_PLLFLLDIV_WIDTH))
/*@}*/

/*******************************************************************************
 * SIM_CLKDIV4 - System Clock Divider Register 4
 ******************************************************************************/

/*!
 * @brief SIM_CLKDIV4 - System Clock Divider Register 4 (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register should only be written when the SOPT2 TRACECLKSEL register bit
 * is set.
 */
/*!
 * @name Constants and macros for entire SIM_CLKDIV4 register
 */
/*@{*/
#define SIM_RD_CLKDIV4(base)     (SIM_CLKDIV4_REG(base))
#define SIM_WR_CLKDIV4(base, value) (SIM_CLKDIV4_REG(base) = (value))
#define SIM_RMW_CLKDIV4(base, mask, value) (SIM_WR_CLKDIV4(base, (SIM_RD_CLKDIV4(base) & ~(mask)) | (value)))
#define SIM_SET_CLKDIV4(base, value) (BME_OR32(&SIM_CLKDIV4_REG(base), (uint32_t)(value)))
#define SIM_CLR_CLKDIV4(base, value) (BME_AND32(&SIM_CLKDIV4_REG(base), (uint32_t)(~(value))))
#define SIM_TOG_CLKDIV4(base, value) (BME_XOR32(&SIM_CLKDIV4_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SIM_CLKDIV4 bitfields
 */

/*!
 * @name Register SIM_CLKDIV4, field TRACEFRAC[0] (RW)
 *
 * This field sets the divide value for the MCGCLKOUT fractional clock divider
 * used as a source for trace clock. The source clock for the trace clock is set
 * by the SOPT2 TRACECLKSEL register bit. Divider output clock = Divider input
 * clock*((TRACEFRAC+1)/(TRACEDIV+1))
 */
/*@{*/
/*! @brief Read current value of the SIM_CLKDIV4_TRACEFRAC field. */
#define SIM_RD_CLKDIV4_TRACEFRAC(base) ((SIM_CLKDIV4_REG(base) & SIM_CLKDIV4_TRACEFRAC_MASK) >> SIM_CLKDIV4_TRACEFRAC_SHIFT)
#define SIM_BRD_CLKDIV4_TRACEFRAC(base) (BME_UBFX32(&SIM_CLKDIV4_REG(base), SIM_CLKDIV4_TRACEFRAC_SHIFT, SIM_CLKDIV4_TRACEFRAC_WIDTH))

/*! @brief Set the TRACEFRAC field to a new value. */
#define SIM_WR_CLKDIV4_TRACEFRAC(base, value) (SIM_RMW_CLKDIV4(base, SIM_CLKDIV4_TRACEFRAC_MASK, SIM_CLKDIV4_TRACEFRAC(value)))
#define SIM_BWR_CLKDIV4_TRACEFRAC(base, value) (BME_BFI32(&SIM_CLKDIV4_REG(base), ((uint32_t)(value) << SIM_CLKDIV4_TRACEFRAC_SHIFT), SIM_CLKDIV4_TRACEFRAC_SHIFT, SIM_CLKDIV4_TRACEFRAC_WIDTH))
/*@}*/

/*!
 * @name Register SIM_CLKDIV4, field TRACEDIV[3:1] (RW)
 *
 * This field sets the divide value for the MCGCLKOUT fractional clock divider
 * used as a source for trace clock. The source clock for the trace clock is set
 * by the SOPT2 TRACECLKSEL register bit. Divider output clock = Divider input
 * clock * ((TRACEFRAC+1)/(TRACEDIV+1))
 */
/*@{*/
/*! @brief Read current value of the SIM_CLKDIV4_TRACEDIV field. */
#define SIM_RD_CLKDIV4_TRACEDIV(base) ((SIM_CLKDIV4_REG(base) & SIM_CLKDIV4_TRACEDIV_MASK) >> SIM_CLKDIV4_TRACEDIV_SHIFT)
#define SIM_BRD_CLKDIV4_TRACEDIV(base) (BME_UBFX32(&SIM_CLKDIV4_REG(base), SIM_CLKDIV4_TRACEDIV_SHIFT, SIM_CLKDIV4_TRACEDIV_WIDTH))

/*! @brief Set the TRACEDIV field to a new value. */
#define SIM_WR_CLKDIV4_TRACEDIV(base, value) (SIM_RMW_CLKDIV4(base, SIM_CLKDIV4_TRACEDIV_MASK, SIM_CLKDIV4_TRACEDIV(value)))
#define SIM_BWR_CLKDIV4_TRACEDIV(base, value) (BME_BFI32(&SIM_CLKDIV4_REG(base), ((uint32_t)(value) << SIM_CLKDIV4_TRACEDIV_SHIFT), SIM_CLKDIV4_TRACEDIV_SHIFT, SIM_CLKDIV4_TRACEDIV_WIDTH))
/*@}*/

/*
 * MK82F25615 SMC
 *
 * System Mode Controller
 *
 * Registers defined in this header file:
 * - SMC_PMPROT - Power Mode Protection register
 * - SMC_PMCTRL - Power Mode Control register
 * - SMC_STOPCTRL - Stop Control Register
 * - SMC_PMSTAT - Power Mode Status register
 */

#define SMC_INSTANCE_COUNT (1U) /*!< Number of instances of the SMC module. */
#define SMC_IDX (0U) /*!< Instance number for SMC. */

/*******************************************************************************
 * SMC_PMPROT - Power Mode Protection register
 ******************************************************************************/

/*!
 * @brief SMC_PMPROT - Power Mode Protection register (RW)
 *
 * Reset value: 0x20U
 *
 * This register provides protection for entry into any low-power run or stop
 * mode. The enabling of the low-power run or stop mode occurs by configuring the
 * Power Mode Control register (PMCTRL). The PMPROT register can be written only
 * once after any system reset. If the MCU is configured for a disallowed or
 * reserved power mode, the MCU remains in its current power mode. For example, if the
 * MCU is in normal RUN mode and AVLP is 0, an attempt to enter VLPR mode using
 * PMCTRL[RUNM] is blocked and PMCTRL[RUNM] remains 00b, indicating the MCU is
 * still in Normal Run mode. This register is reset on Chip Reset not VLLS and by
 * reset types that trigger Chip Reset not VLLS. It is unaffected by reset types
 * that do not trigger Chip Reset not VLLS. See the Reset section details for more
 * information.
 */
/*!
 * @name Constants and macros for entire SMC_PMPROT register
 */
/*@{*/
#define SMC_RD_PMPROT(base)      (SMC_PMPROT_REG(base))
#define SMC_WR_PMPROT(base, value) (SMC_PMPROT_REG(base) = (value))
#define SMC_RMW_PMPROT(base, mask, value) (SMC_WR_PMPROT(base, (SMC_RD_PMPROT(base) & ~(mask)) | (value)))
#define SMC_SET_PMPROT(base, value) (BME_OR8(&SMC_PMPROT_REG(base), (uint8_t)(value)))
#define SMC_CLR_PMPROT(base, value) (BME_AND8(&SMC_PMPROT_REG(base), (uint8_t)(~(value))))
#define SMC_TOG_PMPROT(base, value) (BME_XOR8(&SMC_PMPROT_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SMC_PMPROT bitfields
 */

/*!
 * @name Register SMC_PMPROT, field AVLLS[1] (RW)
 *
 * Provided the appropriate control bits are set up in PMCTRL, this write once
 * bit allows the MCU to enter any very-low-leakage stop mode (VLLSx).
 *
 * Values:
 * - 0b0 - Any VLLSx mode is not allowed
 * - 0b1 - Any VLLSx mode is allowed
 */
/*@{*/
/*! @brief Read current value of the SMC_PMPROT_AVLLS field. */
#define SMC_RD_PMPROT_AVLLS(base) ((SMC_PMPROT_REG(base) & SMC_PMPROT_AVLLS_MASK) >> SMC_PMPROT_AVLLS_SHIFT)
#define SMC_BRD_PMPROT_AVLLS(base) (BME_UBFX8(&SMC_PMPROT_REG(base), SMC_PMPROT_AVLLS_SHIFT, SMC_PMPROT_AVLLS_WIDTH))

/*! @brief Set the AVLLS field to a new value. */
#define SMC_WR_PMPROT_AVLLS(base, value) (SMC_RMW_PMPROT(base, SMC_PMPROT_AVLLS_MASK, SMC_PMPROT_AVLLS(value)))
#define SMC_BWR_PMPROT_AVLLS(base, value) (BME_BFI8(&SMC_PMPROT_REG(base), ((uint8_t)(value) << SMC_PMPROT_AVLLS_SHIFT), SMC_PMPROT_AVLLS_SHIFT, SMC_PMPROT_AVLLS_WIDTH))
/*@}*/

/*!
 * @name Register SMC_PMPROT, field ALLS[3] (RW)
 *
 * Provided the appropriate control bits are set up in PMCTRL, this write-once
 * field allows the MCU to enter any low-leakage stop mode (LLS).
 *
 * Values:
 * - 0b0 - Any LLSx mode is not allowed
 * - 0b1 - Any LLSx mode is allowed
 */
/*@{*/
/*! @brief Read current value of the SMC_PMPROT_ALLS field. */
#define SMC_RD_PMPROT_ALLS(base) ((SMC_PMPROT_REG(base) & SMC_PMPROT_ALLS_MASK) >> SMC_PMPROT_ALLS_SHIFT)
#define SMC_BRD_PMPROT_ALLS(base) (BME_UBFX8(&SMC_PMPROT_REG(base), SMC_PMPROT_ALLS_SHIFT, SMC_PMPROT_ALLS_WIDTH))

/*! @brief Set the ALLS field to a new value. */
#define SMC_WR_PMPROT_ALLS(base, value) (SMC_RMW_PMPROT(base, SMC_PMPROT_ALLS_MASK, SMC_PMPROT_ALLS(value)))
#define SMC_BWR_PMPROT_ALLS(base, value) (BME_BFI8(&SMC_PMPROT_REG(base), ((uint8_t)(value) << SMC_PMPROT_ALLS_SHIFT), SMC_PMPROT_ALLS_SHIFT, SMC_PMPROT_ALLS_WIDTH))
/*@}*/

/*!
 * @name Register SMC_PMPROT, field AVLP[5] (RW)
 *
 * Provided the appropriate control bits are set up in PMCTRL, this write-once
 * field allows the MCU to enter any very-low-power mode (VLPR, VLPW, and VLPS).
 *
 * Values:
 * - 0b0 - VLPR, VLPW, and VLPS are not allowed.
 * - 0b1 - VLPR, VLPW, and VLPS are allowed.
 */
/*@{*/
/*! @brief Read current value of the SMC_PMPROT_AVLP field. */
#define SMC_RD_PMPROT_AVLP(base) ((SMC_PMPROT_REG(base) & SMC_PMPROT_AVLP_MASK) >> SMC_PMPROT_AVLP_SHIFT)
#define SMC_BRD_PMPROT_AVLP(base) (BME_UBFX8(&SMC_PMPROT_REG(base), SMC_PMPROT_AVLP_SHIFT, SMC_PMPROT_AVLP_WIDTH))

/*! @brief Set the AVLP field to a new value. */
#define SMC_WR_PMPROT_AVLP(base, value) (SMC_RMW_PMPROT(base, SMC_PMPROT_AVLP_MASK, SMC_PMPROT_AVLP(value)))
#define SMC_BWR_PMPROT_AVLP(base, value) (BME_BFI8(&SMC_PMPROT_REG(base), ((uint8_t)(value) << SMC_PMPROT_AVLP_SHIFT), SMC_PMPROT_AVLP_SHIFT, SMC_PMPROT_AVLP_WIDTH))
/*@}*/

/*!
 * @name Register SMC_PMPROT, field AHSRUN[7] (RW)
 *
 * Provided the appropriate control bits are set up in PMCTRL, this write-once
 * field allows the MCU to enter High Speed Run mode (HSRUN).
 *
 * Values:
 * - 0b0 - HSRUN is not allowed
 * - 0b1 - HSRUN is allowed
 */
/*@{*/
/*! @brief Read current value of the SMC_PMPROT_AHSRUN field. */
#define SMC_RD_PMPROT_AHSRUN(base) ((SMC_PMPROT_REG(base) & SMC_PMPROT_AHSRUN_MASK) >> SMC_PMPROT_AHSRUN_SHIFT)
#define SMC_BRD_PMPROT_AHSRUN(base) (BME_UBFX8(&SMC_PMPROT_REG(base), SMC_PMPROT_AHSRUN_SHIFT, SMC_PMPROT_AHSRUN_WIDTH))

/*! @brief Set the AHSRUN field to a new value. */
#define SMC_WR_PMPROT_AHSRUN(base, value) (SMC_RMW_PMPROT(base, SMC_PMPROT_AHSRUN_MASK, SMC_PMPROT_AHSRUN(value)))
#define SMC_BWR_PMPROT_AHSRUN(base, value) (BME_BFI8(&SMC_PMPROT_REG(base), ((uint8_t)(value) << SMC_PMPROT_AHSRUN_SHIFT), SMC_PMPROT_AHSRUN_SHIFT, SMC_PMPROT_AHSRUN_WIDTH))
/*@}*/

/*******************************************************************************
 * SMC_PMCTRL - Power Mode Control register
 ******************************************************************************/

/*!
 * @brief SMC_PMCTRL - Power Mode Control register (RW)
 *
 * Reset value: 0x40U
 *
 * The PMCTRL register controls entry into low-power Run and Stop modes,
 * provided that the selected power mode is allowed via an appropriate setting of the
 * protection (PMPROT) register. This register is reset on Chip POR not VLLS and by
 * reset types that trigger Chip POR not VLLS. It is unaffected by reset types
 * that do not trigger Chip POR not VLLS. See the Reset section details for more
 * information.
 */
/*!
 * @name Constants and macros for entire SMC_PMCTRL register
 */
/*@{*/
#define SMC_RD_PMCTRL(base)      (SMC_PMCTRL_REG(base))
#define SMC_WR_PMCTRL(base, value) (SMC_PMCTRL_REG(base) = (value))
#define SMC_RMW_PMCTRL(base, mask, value) (SMC_WR_PMCTRL(base, (SMC_RD_PMCTRL(base) & ~(mask)) | (value)))
#define SMC_SET_PMCTRL(base, value) (BME_OR8(&SMC_PMCTRL_REG(base), (uint8_t)(value)))
#define SMC_CLR_PMCTRL(base, value) (BME_AND8(&SMC_PMCTRL_REG(base), (uint8_t)(~(value))))
#define SMC_TOG_PMCTRL(base, value) (BME_XOR8(&SMC_PMCTRL_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SMC_PMCTRL bitfields
 */

/*!
 * @name Register SMC_PMCTRL, field STOPM[2:0] (RW)
 *
 * When written, controls entry into the selected stop mode when Sleep-Now or
 * Sleep-On-Exit mode is entered with SLEEPDEEP=1 . Writes to this field are
 * blocked if the protection level has not been enabled using the PMPROT register.
 * After any system reset, this field is cleared by hardware on any successful write
 * to the PMPROT register. When set to VLLSxor LLSx, the LLSM in the STOPCTRL
 * register is used to further select the particular VLLSor LLS submode which will
 * be entered. When set to STOP, the PSTOPO bits in the STOPCTRL register can be
 * used to select a Partial Stop mode if desired.
 *
 * Values:
 * - 0b000 - Normal Stop (STOP)
 * - 0b001 - Reserved
 * - 0b010 - Very-Low-Power Stop (VLPS)
 * - 0b011 - Low-Leakage Stop (LLSx)
 * - 0b100 - Very-Low-Leakage Stop (VLLSx)
 * - 0b101 - Reserved
 * - 0b110 - Reseved
 * - 0b111 - Reserved
 */
/*@{*/
/*! @brief Read current value of the SMC_PMCTRL_STOPM field. */
#define SMC_RD_PMCTRL_STOPM(base) ((SMC_PMCTRL_REG(base) & SMC_PMCTRL_STOPM_MASK) >> SMC_PMCTRL_STOPM_SHIFT)
#define SMC_BRD_PMCTRL_STOPM(base) (BME_UBFX8(&SMC_PMCTRL_REG(base), SMC_PMCTRL_STOPM_SHIFT, SMC_PMCTRL_STOPM_WIDTH))

/*! @brief Set the STOPM field to a new value. */
#define SMC_WR_PMCTRL_STOPM(base, value) (SMC_RMW_PMCTRL(base, SMC_PMCTRL_STOPM_MASK, SMC_PMCTRL_STOPM(value)))
#define SMC_BWR_PMCTRL_STOPM(base, value) (BME_BFI8(&SMC_PMCTRL_REG(base), ((uint8_t)(value) << SMC_PMCTRL_STOPM_SHIFT), SMC_PMCTRL_STOPM_SHIFT, SMC_PMCTRL_STOPM_WIDTH))
/*@}*/

/*!
 * @name Register SMC_PMCTRL, field STOPA[3] (RO)
 *
 * When set, this read-only status bit indicates an interrupt occured during the
 * previous stop mode entry sequence, preventing the system from entering that
 * mode. This field is cleared by reset or by hardware at the beginning of any
 * stop mode entry sequence and is set if the sequence was aborted.
 *
 * Values:
 * - 0b0 - The previous stop mode entry was successsful.
 * - 0b1 - The previous stop mode entry was aborted.
 */
/*@{*/
/*! @brief Read current value of the SMC_PMCTRL_STOPA field. */
#define SMC_RD_PMCTRL_STOPA(base) ((SMC_PMCTRL_REG(base) & SMC_PMCTRL_STOPA_MASK) >> SMC_PMCTRL_STOPA_SHIFT)
#define SMC_BRD_PMCTRL_STOPA(base) (BME_UBFX8(&SMC_PMCTRL_REG(base), SMC_PMCTRL_STOPA_SHIFT, SMC_PMCTRL_STOPA_WIDTH))
/*@}*/

/*!
 * @name Register SMC_PMCTRL, field RUNM[6:5] (RW)
 *
 * When written, causes entry into the selected run mode. Writes to this field
 * are blocked if the protection level has not been enabled using the PMPROT
 * register. RUNM may be set to VLPR only when PMSTAT=RUN. After being written to
 * VLPR, RUNM should not be written back to RUN until PMSTAT=VLPR. RUNM may be set to
 * HSRUN only when PMSTAT=RUN. After being programmed to HSRUN, RUNM should not
 * be programmed back to RUN until PMSTAT=HSRUN. Also, stop mode entry should not
 * be attempted while RUNM=HSRUN or PMSTAT=HSRUN.
 *
 * Values:
 * - 0b00 - Normal Run mode (RUN)
 * - 0b01 - Reserved
 * - 0b10 - Very-Low-Power Run mode (VLPR)
 * - 0b11 - High Speed Run mode (HSRUN)
 */
/*@{*/
/*! @brief Read current value of the SMC_PMCTRL_RUNM field. */
#define SMC_RD_PMCTRL_RUNM(base) ((SMC_PMCTRL_REG(base) & SMC_PMCTRL_RUNM_MASK) >> SMC_PMCTRL_RUNM_SHIFT)
#define SMC_BRD_PMCTRL_RUNM(base) (BME_UBFX8(&SMC_PMCTRL_REG(base), SMC_PMCTRL_RUNM_SHIFT, SMC_PMCTRL_RUNM_WIDTH))

/*! @brief Set the RUNM field to a new value. */
#define SMC_WR_PMCTRL_RUNM(base, value) (SMC_RMW_PMCTRL(base, SMC_PMCTRL_RUNM_MASK, SMC_PMCTRL_RUNM(value)))
#define SMC_BWR_PMCTRL_RUNM(base, value) (BME_BFI8(&SMC_PMCTRL_REG(base), ((uint8_t)(value) << SMC_PMCTRL_RUNM_SHIFT), SMC_PMCTRL_RUNM_SHIFT, SMC_PMCTRL_RUNM_WIDTH))
/*@}*/

/*******************************************************************************
 * SMC_STOPCTRL - Stop Control Register
 ******************************************************************************/

/*!
 * @brief SMC_STOPCTRL - Stop Control Register (RW)
 *
 * Reset value: 0x03U
 *
 * The STOPCTRL register provides various control bits allowing the user to fine
 * tune power consumption during the stop mode selected by the STOPM field. This
 * register is reset on Chip POR not VLLS and by reset types that trigger Chip
 * POR not VLLS. It is unaffected by reset types that do not trigger Chip POR not
 * VLLS. See the Reset section details for more information.
 */
/*!
 * @name Constants and macros for entire SMC_STOPCTRL register
 */
/*@{*/
#define SMC_RD_STOPCTRL(base)    (SMC_STOPCTRL_REG(base))
#define SMC_WR_STOPCTRL(base, value) (SMC_STOPCTRL_REG(base) = (value))
#define SMC_RMW_STOPCTRL(base, mask, value) (SMC_WR_STOPCTRL(base, (SMC_RD_STOPCTRL(base) & ~(mask)) | (value)))
#define SMC_SET_STOPCTRL(base, value) (BME_OR8(&SMC_STOPCTRL_REG(base), (uint8_t)(value)))
#define SMC_CLR_STOPCTRL(base, value) (BME_AND8(&SMC_STOPCTRL_REG(base), (uint8_t)(~(value))))
#define SMC_TOG_STOPCTRL(base, value) (BME_XOR8(&SMC_STOPCTRL_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SMC_STOPCTRL bitfields
 */

/*!
 * @name Register SMC_STOPCTRL, field LLSM[2:0] (RW)
 *
 * This field controls which LLS orVLLS sub-mode to enter if STOPM = LLSx
 * orVLLSx.
 *
 * Values:
 * - 0b000 - VLLS0 if PMCTRL[STOPM]=VLLSx, reserved if PMCTRL[STOPM]=LLSx
 * - 0b001 - VLLS1 if PMCTRL[STOPM]=VLLSx, reserved if PMCTRL[STOPM]=LLSx
 * - 0b010 - VLLS2 if PMCTRL[STOPM]=VLLSx, LLS2 if PMCTRL[STOPM]=LLSx
 * - 0b011 - VLLS3 if PMCTRL[STOPM]=VLLSx, LLS3 if PMCTRL[STOPM]=LLSx
 * - 0b100 - Reserved
 * - 0b101 - Reserved
 * - 0b110 - Reserved
 * - 0b111 - Reserved
 */
/*@{*/
/*! @brief Read current value of the SMC_STOPCTRL_LLSM field. */
#define SMC_RD_STOPCTRL_LLSM(base) ((SMC_STOPCTRL_REG(base) & SMC_STOPCTRL_LLSM_MASK) >> SMC_STOPCTRL_LLSM_SHIFT)
#define SMC_BRD_STOPCTRL_LLSM(base) (BME_UBFX8(&SMC_STOPCTRL_REG(base), SMC_STOPCTRL_LLSM_SHIFT, SMC_STOPCTRL_LLSM_WIDTH))

/*! @brief Set the LLSM field to a new value. */
#define SMC_WR_STOPCTRL_LLSM(base, value) (SMC_RMW_STOPCTRL(base, SMC_STOPCTRL_LLSM_MASK, SMC_STOPCTRL_LLSM(value)))
#define SMC_BWR_STOPCTRL_LLSM(base, value) (BME_BFI8(&SMC_STOPCTRL_REG(base), ((uint8_t)(value) << SMC_STOPCTRL_LLSM_SHIFT), SMC_STOPCTRL_LLSM_SHIFT, SMC_STOPCTRL_LLSM_WIDTH))
/*@}*/

/*!
 * @name Register SMC_STOPCTRL, field LPOPO[3] (RW)
 *
 * Controls whether the 1 kHz LPO clock is enabled in LLS/VLLSx modes. During
 * VLLS0 mode, the LPO clock is disabled by hardware and this bit has no effect.
 *
 * Values:
 * - 0b0 - LPO clock is enabled in LLS/VLLSx
 * - 0b1 - LPO clock is disabled in LLS/VLLSx
 */
/*@{*/
/*! @brief Read current value of the SMC_STOPCTRL_LPOPO field. */
#define SMC_RD_STOPCTRL_LPOPO(base) ((SMC_STOPCTRL_REG(base) & SMC_STOPCTRL_LPOPO_MASK) >> SMC_STOPCTRL_LPOPO_SHIFT)
#define SMC_BRD_STOPCTRL_LPOPO(base) (BME_UBFX8(&SMC_STOPCTRL_REG(base), SMC_STOPCTRL_LPOPO_SHIFT, SMC_STOPCTRL_LPOPO_WIDTH))

/*! @brief Set the LPOPO field to a new value. */
#define SMC_WR_STOPCTRL_LPOPO(base, value) (SMC_RMW_STOPCTRL(base, SMC_STOPCTRL_LPOPO_MASK, SMC_STOPCTRL_LPOPO(value)))
#define SMC_BWR_STOPCTRL_LPOPO(base, value) (BME_BFI8(&SMC_STOPCTRL_REG(base), ((uint8_t)(value) << SMC_STOPCTRL_LPOPO_SHIFT), SMC_STOPCTRL_LPOPO_SHIFT, SMC_STOPCTRL_LPOPO_WIDTH))
/*@}*/

/*!
 * @name Register SMC_STOPCTRL, field RAM2PO[4] (RW)
 *
 * This bit controls powering of RAM partition 2 in LLS2 or VLLS2 mode. See the
 * device's Chip Configuration details for the size and location of RAM parition 2
 *
 * Values:
 * - 0b0 - RAM2 not powered in LLS2/VLLS2
 * - 0b1 - RAM2 powered in LLS2/VLLS2
 */
/*@{*/
/*! @brief Read current value of the SMC_STOPCTRL_RAM2PO field. */
#define SMC_RD_STOPCTRL_RAM2PO(base) ((SMC_STOPCTRL_REG(base) & SMC_STOPCTRL_RAM2PO_MASK) >> SMC_STOPCTRL_RAM2PO_SHIFT)
#define SMC_BRD_STOPCTRL_RAM2PO(base) (BME_UBFX8(&SMC_STOPCTRL_REG(base), SMC_STOPCTRL_RAM2PO_SHIFT, SMC_STOPCTRL_RAM2PO_WIDTH))

/*! @brief Set the RAM2PO field to a new value. */
#define SMC_WR_STOPCTRL_RAM2PO(base, value) (SMC_RMW_STOPCTRL(base, SMC_STOPCTRL_RAM2PO_MASK, SMC_STOPCTRL_RAM2PO(value)))
#define SMC_BWR_STOPCTRL_RAM2PO(base, value) (BME_BFI8(&SMC_STOPCTRL_REG(base), ((uint8_t)(value) << SMC_STOPCTRL_RAM2PO_SHIFT), SMC_STOPCTRL_RAM2PO_SHIFT, SMC_STOPCTRL_RAM2PO_WIDTH))
/*@}*/

/*!
 * @name Register SMC_STOPCTRL, field PORPO[5] (RW)
 *
 * This bit controls whether the POR detect circuit is enabled in VLLS0 mode.
 *
 * Values:
 * - 0b0 - POR detect circuit is enabled in VLLS0
 * - 0b1 - POR detect circuit is disabled in VLLS0
 */
/*@{*/
/*! @brief Read current value of the SMC_STOPCTRL_PORPO field. */
#define SMC_RD_STOPCTRL_PORPO(base) ((SMC_STOPCTRL_REG(base) & SMC_STOPCTRL_PORPO_MASK) >> SMC_STOPCTRL_PORPO_SHIFT)
#define SMC_BRD_STOPCTRL_PORPO(base) (BME_UBFX8(&SMC_STOPCTRL_REG(base), SMC_STOPCTRL_PORPO_SHIFT, SMC_STOPCTRL_PORPO_WIDTH))

/*! @brief Set the PORPO field to a new value. */
#define SMC_WR_STOPCTRL_PORPO(base, value) (SMC_RMW_STOPCTRL(base, SMC_STOPCTRL_PORPO_MASK, SMC_STOPCTRL_PORPO(value)))
#define SMC_BWR_STOPCTRL_PORPO(base, value) (BME_BFI8(&SMC_STOPCTRL_REG(base), ((uint8_t)(value) << SMC_STOPCTRL_PORPO_SHIFT), SMC_STOPCTRL_PORPO_SHIFT, SMC_STOPCTRL_PORPO_WIDTH))
/*@}*/

/*!
 * @name Register SMC_STOPCTRL, field PSTOPO[7:6] (RW)
 *
 * These bits control whether a Partial Stop mode is entered when STOPM=STOP.
 * When entering a Partial Stop mode from RUN (or VLPR) mode, the PMC, MCG and
 * flash remain fully powered, allowing the device to wakeup almost instantaneously
 * at the expense of higher power consumption. In PSTOP2, only system clocks are
 * gated allowing peripherals running on bus clock to remain fully functional. In
 * PSTOP1, both system and bus clocks are gated.
 *
 * Values:
 * - 0b00 - STOP - Normal Stop mode
 * - 0b01 - PSTOP1 - Partial Stop with both system and bus clocks disabled
 * - 0b10 - PSTOP2 - Partial Stop with system clock disabled and bus clock
 *     enabled
 * - 0b11 - Reserved
 */
/*@{*/
/*! @brief Read current value of the SMC_STOPCTRL_PSTOPO field. */
#define SMC_RD_STOPCTRL_PSTOPO(base) ((SMC_STOPCTRL_REG(base) & SMC_STOPCTRL_PSTOPO_MASK) >> SMC_STOPCTRL_PSTOPO_SHIFT)
#define SMC_BRD_STOPCTRL_PSTOPO(base) (BME_UBFX8(&SMC_STOPCTRL_REG(base), SMC_STOPCTRL_PSTOPO_SHIFT, SMC_STOPCTRL_PSTOPO_WIDTH))

/*! @brief Set the PSTOPO field to a new value. */
#define SMC_WR_STOPCTRL_PSTOPO(base, value) (SMC_RMW_STOPCTRL(base, SMC_STOPCTRL_PSTOPO_MASK, SMC_STOPCTRL_PSTOPO(value)))
#define SMC_BWR_STOPCTRL_PSTOPO(base, value) (BME_BFI8(&SMC_STOPCTRL_REG(base), ((uint8_t)(value) << SMC_STOPCTRL_PSTOPO_SHIFT), SMC_STOPCTRL_PSTOPO_SHIFT, SMC_STOPCTRL_PSTOPO_WIDTH))
/*@}*/

/*******************************************************************************
 * SMC_PMSTAT - Power Mode Status register
 ******************************************************************************/

/*!
 * @brief SMC_PMSTAT - Power Mode Status register (RO)
 *
 * Reset value: 0x04U
 *
 * PMSTAT is a read-only, one-hot register which indicates the current power
 * mode of the system. This register is reset on Chip POR not VLLS and by reset
 * types that trigger Chip POR not VLLS. It is unaffected by reset types that do not
 * trigger Chip POR not VLLS. See the Reset section details for more information.
 */
/*!
 * @name Constants and macros for entire SMC_PMSTAT register
 */
/*@{*/
#define SMC_RD_PMSTAT(base)      (SMC_PMSTAT_REG(base))
/*@}*/

/*
 * MK82F25615 SPI
 *
 * Serial Peripheral Interface
 *
 * Registers defined in this header file:
 * - SPI_MCR - Module Configuration Register
 * - SPI_TCR - Transfer Count Register
 * - SPI_CTAR - Clock and Transfer Attributes Register (In Master Mode)
 * - SPI_CTAR_SLAVE - Clock and Transfer Attributes Register (In Slave Mode)
 * - SPI_SR - Status Register
 * - SPI_RSER - DMA/Interrupt Request Select and Enable Register
 * - SPI_PUSHR - PUSH TX FIFO Register In Master Mode
 * - SPI_PUSHR_SLAVE - PUSH TX FIFO Register In Slave Mode
 * - SPI_POPR - POP RX FIFO Register
 * - SPI_TXFR0 - Transmit FIFO Registers
 * - SPI_TXFR1 - Transmit FIFO Registers
 * - SPI_TXFR2 - Transmit FIFO Registers
 * - SPI_TXFR3 - Transmit FIFO Registers
 * - SPI_RXFR0 - Receive FIFO Registers
 * - SPI_RXFR1 - Receive FIFO Registers
 * - SPI_RXFR2 - Receive FIFO Registers
 * - SPI_RXFR3 - Receive FIFO Registers
 */

#define SPI_INSTANCE_COUNT (3U) /*!< Number of instances of the SPI module. */
#define SPI0_IDX (0U) /*!< Instance number for SPI0. */
#define SPI1_IDX (1U) /*!< Instance number for SPI1. */
#define SPI2_IDX (2U) /*!< Instance number for SPI2. */

/*******************************************************************************
 * SPI_MCR - Module Configuration Register
 ******************************************************************************/

/*!
 * @brief SPI_MCR - Module Configuration Register (RW)
 *
 * Reset value: 0x00004001U
 *
 * Contains bits to configure various attributes associated with the module
 * operations. The HALT and MDIS bits can be changed at any time, but the effect
 * takes place only on the next frame boundary. Only the HALT and MDIS bits in the
 * MCR can be changed, while the module is in the Running state.
 */
/*!
 * @name Constants and macros for entire SPI_MCR register
 */
/*@{*/
#define SPI_RD_MCR(base)         (SPI_MCR_REG(base))
#define SPI_WR_MCR(base, value)  (SPI_MCR_REG(base) = (value))
#define SPI_RMW_MCR(base, mask, value) (SPI_WR_MCR(base, (SPI_RD_MCR(base) & ~(mask)) | (value)))
#define SPI_SET_MCR(base, value) (BME_OR32(&SPI_MCR_REG(base), (uint32_t)(value)))
#define SPI_CLR_MCR(base, value) (BME_AND32(&SPI_MCR_REG(base), (uint32_t)(~(value))))
#define SPI_TOG_MCR(base, value) (BME_XOR32(&SPI_MCR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SPI_MCR bitfields
 */

/*!
 * @name Register SPI_MCR, field HALT[0] (RW)
 *
 * The HALT bit starts and stops frame transfers. See Start and Stop of Module
 * transfers
 *
 * Values:
 * - 0b0 - Start transfers.
 * - 0b1 - Stop transfers.
 */
/*@{*/
/*! @brief Read current value of the SPI_MCR_HALT field. */
#define SPI_RD_MCR_HALT(base) ((SPI_MCR_REG(base) & SPI_MCR_HALT_MASK) >> SPI_MCR_HALT_SHIFT)
#define SPI_BRD_MCR_HALT(base) (BME_UBFX32(&SPI_MCR_REG(base), SPI_MCR_HALT_SHIFT, SPI_MCR_HALT_WIDTH))

/*! @brief Set the HALT field to a new value. */
#define SPI_WR_MCR_HALT(base, value) (SPI_RMW_MCR(base, SPI_MCR_HALT_MASK, SPI_MCR_HALT(value)))
#define SPI_BWR_MCR_HALT(base, value) (BME_BFI32(&SPI_MCR_REG(base), ((uint32_t)(value) << SPI_MCR_HALT_SHIFT), SPI_MCR_HALT_SHIFT, SPI_MCR_HALT_WIDTH))
/*@}*/

/*!
 * @name Register SPI_MCR, field SMPL_PT[9:8] (RW)
 *
 * Controls when the module master samples SIN in Modified Transfer Format. This
 * field is valid only when CPHA bit in CTARn[CPHA] is 0.
 *
 * Values:
 * - 0b00 - 0 protocol clock cycles between SCK edge and SIN sample
 * - 0b01 - 1 protocol clock cycle between SCK edge and SIN sample
 * - 0b10 - 2 protocol clock cycles between SCK edge and SIN sample
 * - 0b11 - Reserved
 */
/*@{*/
/*! @brief Read current value of the SPI_MCR_SMPL_PT field. */
#define SPI_RD_MCR_SMPL_PT(base) ((SPI_MCR_REG(base) & SPI_MCR_SMPL_PT_MASK) >> SPI_MCR_SMPL_PT_SHIFT)
#define SPI_BRD_MCR_SMPL_PT(base) (BME_UBFX32(&SPI_MCR_REG(base), SPI_MCR_SMPL_PT_SHIFT, SPI_MCR_SMPL_PT_WIDTH))

/*! @brief Set the SMPL_PT field to a new value. */
#define SPI_WR_MCR_SMPL_PT(base, value) (SPI_RMW_MCR(base, SPI_MCR_SMPL_PT_MASK, SPI_MCR_SMPL_PT(value)))
#define SPI_BWR_MCR_SMPL_PT(base, value) (BME_BFI32(&SPI_MCR_REG(base), ((uint32_t)(value) << SPI_MCR_SMPL_PT_SHIFT), SPI_MCR_SMPL_PT_SHIFT, SPI_MCR_SMPL_PT_WIDTH))
/*@}*/

/*!
 * @name Register SPI_MCR, field CLR_RXF[10] (WORZ)
 *
 * Flushes the RX FIFO. Writing a 1 to CLR_RXF clears the RX Counter. The
 * CLR_RXF bit is always read as zero.
 *
 * Values:
 * - 0b0 - Do not clear the RX FIFO counter.
 * - 0b1 - Clear the RX FIFO counter.
 */
/*@{*/
/*! @brief Set the CLR_RXF field to a new value. */
#define SPI_WR_MCR_CLR_RXF(base, value) (SPI_RMW_MCR(base, SPI_MCR_CLR_RXF_MASK, SPI_MCR_CLR_RXF(value)))
#define SPI_BWR_MCR_CLR_RXF(base, value) (BME_BFI32(&SPI_MCR_REG(base), ((uint32_t)(value) << SPI_MCR_CLR_RXF_SHIFT), SPI_MCR_CLR_RXF_SHIFT, SPI_MCR_CLR_RXF_WIDTH))
/*@}*/

/*!
 * @name Register SPI_MCR, field CLR_TXF[11] (WORZ)
 *
 * Flushes the TX FIFO. Writing a 1 to CLR_TXF clears the TX FIFO Counter. The
 * CLR_TXF bit is always read as zero.
 *
 * Values:
 * - 0b0 - Do not clear the TX FIFO counter.
 * - 0b1 - Clear the TX FIFO counter.
 */
/*@{*/
/*! @brief Set the CLR_TXF field to a new value. */
#define SPI_WR_MCR_CLR_TXF(base, value) (SPI_RMW_MCR(base, SPI_MCR_CLR_TXF_MASK, SPI_MCR_CLR_TXF(value)))
#define SPI_BWR_MCR_CLR_TXF(base, value) (BME_BFI32(&SPI_MCR_REG(base), ((uint32_t)(value) << SPI_MCR_CLR_TXF_SHIFT), SPI_MCR_CLR_TXF_SHIFT, SPI_MCR_CLR_TXF_WIDTH))
/*@}*/

/*!
 * @name Register SPI_MCR, field DIS_RXF[12] (RW)
 *
 * When the RX FIFO is disabled, the receive part of the module operates as a
 * simplified double-buffered SPI. This bit can only be written when the MDIS bit
 * is cleared.
 *
 * Values:
 * - 0b0 - RX FIFO is enabled.
 * - 0b1 - RX FIFO is disabled.
 */
/*@{*/
/*! @brief Read current value of the SPI_MCR_DIS_RXF field. */
#define SPI_RD_MCR_DIS_RXF(base) ((SPI_MCR_REG(base) & SPI_MCR_DIS_RXF_MASK) >> SPI_MCR_DIS_RXF_SHIFT)
#define SPI_BRD_MCR_DIS_RXF(base) (BME_UBFX32(&SPI_MCR_REG(base), SPI_MCR_DIS_RXF_SHIFT, SPI_MCR_DIS_RXF_WIDTH))

/*! @brief Set the DIS_RXF field to a new value. */
#define SPI_WR_MCR_DIS_RXF(base, value) (SPI_RMW_MCR(base, SPI_MCR_DIS_RXF_MASK, SPI_MCR_DIS_RXF(value)))
#define SPI_BWR_MCR_DIS_RXF(base, value) (BME_BFI32(&SPI_MCR_REG(base), ((uint32_t)(value) << SPI_MCR_DIS_RXF_SHIFT), SPI_MCR_DIS_RXF_SHIFT, SPI_MCR_DIS_RXF_WIDTH))
/*@}*/

/*!
 * @name Register SPI_MCR, field DIS_TXF[13] (RW)
 *
 * When the TX FIFO is disabled, the transmit part of the module operates as a
 * simplified double-buffered SPI. This bit can be written only when the MDIS bit
 * is cleared.
 *
 * Values:
 * - 0b0 - TX FIFO is enabled.
 * - 0b1 - TX FIFO is disabled.
 */
/*@{*/
/*! @brief Read current value of the SPI_MCR_DIS_TXF field. */
#define SPI_RD_MCR_DIS_TXF(base) ((SPI_MCR_REG(base) & SPI_MCR_DIS_TXF_MASK) >> SPI_MCR_DIS_TXF_SHIFT)
#define SPI_BRD_MCR_DIS_TXF(base) (BME_UBFX32(&SPI_MCR_REG(base), SPI_MCR_DIS_TXF_SHIFT, SPI_MCR_DIS_TXF_WIDTH))

/*! @brief Set the DIS_TXF field to a new value. */
#define SPI_WR_MCR_DIS_TXF(base, value) (SPI_RMW_MCR(base, SPI_MCR_DIS_TXF_MASK, SPI_MCR_DIS_TXF(value)))
#define SPI_BWR_MCR_DIS_TXF(base, value) (BME_BFI32(&SPI_MCR_REG(base), ((uint32_t)(value) << SPI_MCR_DIS_TXF_SHIFT), SPI_MCR_DIS_TXF_SHIFT, SPI_MCR_DIS_TXF_WIDTH))
/*@}*/

/*!
 * @name Register SPI_MCR, field MDIS[14] (RW)
 *
 * Allows the clock to be stopped to the non-memory mapped logic in the module
 * effectively putting it in a software-controlled power-saving state. The reset
 * value of the MDIS bit is parameterized, with a default reset value of 1. When
 * the module is used in Slave Mode, it is recommended to leave this bit 0,
 * because a slave doesn't have control over master transactions.
 *
 * Values:
 * - 0b0 - Enables the module clocks.
 * - 0b1 - Allows external logic to disable the module clocks.
 */
/*@{*/
/*! @brief Read current value of the SPI_MCR_MDIS field. */
#define SPI_RD_MCR_MDIS(base) ((SPI_MCR_REG(base) & SPI_MCR_MDIS_MASK) >> SPI_MCR_MDIS_SHIFT)
#define SPI_BRD_MCR_MDIS(base) (BME_UBFX32(&SPI_MCR_REG(base), SPI_MCR_MDIS_SHIFT, SPI_MCR_MDIS_WIDTH))

/*! @brief Set the MDIS field to a new value. */
#define SPI_WR_MCR_MDIS(base, value) (SPI_RMW_MCR(base, SPI_MCR_MDIS_MASK, SPI_MCR_MDIS(value)))
#define SPI_BWR_MCR_MDIS(base, value) (BME_BFI32(&SPI_MCR_REG(base), ((uint32_t)(value) << SPI_MCR_MDIS_SHIFT), SPI_MCR_MDIS_SHIFT, SPI_MCR_MDIS_WIDTH))
/*@}*/

/*!
 * @name Register SPI_MCR, field DOZE[15] (RW)
 *
 * Provides support for an externally controlled Doze mode power-saving
 * mechanism.
 *
 * Values:
 * - 0b0 - Doze mode has no effect on the module.
 * - 0b1 - Doze mode disables the module.
 */
/*@{*/
/*! @brief Read current value of the SPI_MCR_DOZE field. */
#define SPI_RD_MCR_DOZE(base) ((SPI_MCR_REG(base) & SPI_MCR_DOZE_MASK) >> SPI_MCR_DOZE_SHIFT)
#define SPI_BRD_MCR_DOZE(base) (BME_UBFX32(&SPI_MCR_REG(base), SPI_MCR_DOZE_SHIFT, SPI_MCR_DOZE_WIDTH))

/*! @brief Set the DOZE field to a new value. */
#define SPI_WR_MCR_DOZE(base, value) (SPI_RMW_MCR(base, SPI_MCR_DOZE_MASK, SPI_MCR_DOZE(value)))
#define SPI_BWR_MCR_DOZE(base, value) (BME_BFI32(&SPI_MCR_REG(base), ((uint32_t)(value) << SPI_MCR_DOZE_SHIFT), SPI_MCR_DOZE_SHIFT, SPI_MCR_DOZE_WIDTH))
/*@}*/

/*!
 * @name Register SPI_MCR, field PCSIS[21:16] (RW)
 *
 * Determines the inactive state of PCSx. Refer to the chip-specific SPI
 * information for the number of PCS signals used in this MCU. The effect of this bit
 * only takes place when module is enabled. Ensure that this bit is configured
 * correctly before enabling the DSPI interface.
 *
 * Values:
 * - 0b000000 - The inactive state of PCSx is low.
 * - 0b000001 - The inactive state of PCSx is high.
 */
/*@{*/
/*! @brief Read current value of the SPI_MCR_PCSIS field. */
#define SPI_RD_MCR_PCSIS(base) ((SPI_MCR_REG(base) & SPI_MCR_PCSIS_MASK) >> SPI_MCR_PCSIS_SHIFT)
#define SPI_BRD_MCR_PCSIS(base) (BME_UBFX32(&SPI_MCR_REG(base), SPI_MCR_PCSIS_SHIFT, SPI_MCR_PCSIS_WIDTH))

/*! @brief Set the PCSIS field to a new value. */
#define SPI_WR_MCR_PCSIS(base, value) (SPI_RMW_MCR(base, SPI_MCR_PCSIS_MASK, SPI_MCR_PCSIS(value)))
#define SPI_BWR_MCR_PCSIS(base, value) (BME_BFI32(&SPI_MCR_REG(base), ((uint32_t)(value) << SPI_MCR_PCSIS_SHIFT), SPI_MCR_PCSIS_SHIFT, SPI_MCR_PCSIS_WIDTH))
/*@}*/

/*!
 * @name Register SPI_MCR, field ROOE[24] (RW)
 *
 * In the RX FIFO overflow condition, configures the module to ignore the
 * incoming serial data or overwrite existing data. If the RX FIFO is full and new data
 * is received, the data from the transfer, generating the overflow, is ignored
 * or shifted into the shift register.
 *
 * Values:
 * - 0b0 - Incoming data is ignored.
 * - 0b1 - Incoming data is shifted into the shift register.
 */
/*@{*/
/*! @brief Read current value of the SPI_MCR_ROOE field. */
#define SPI_RD_MCR_ROOE(base) ((SPI_MCR_REG(base) & SPI_MCR_ROOE_MASK) >> SPI_MCR_ROOE_SHIFT)
#define SPI_BRD_MCR_ROOE(base) (BME_UBFX32(&SPI_MCR_REG(base), SPI_MCR_ROOE_SHIFT, SPI_MCR_ROOE_WIDTH))

/*! @brief Set the ROOE field to a new value. */
#define SPI_WR_MCR_ROOE(base, value) (SPI_RMW_MCR(base, SPI_MCR_ROOE_MASK, SPI_MCR_ROOE(value)))
#define SPI_BWR_MCR_ROOE(base, value) (BME_BFI32(&SPI_MCR_REG(base), ((uint32_t)(value) << SPI_MCR_ROOE_SHIFT), SPI_MCR_ROOE_SHIFT, SPI_MCR_ROOE_WIDTH))
/*@}*/

/*!
 * @name Register SPI_MCR, field PCSSE[25] (RW)
 *
 * Enables the PCS5/ PCSS to operate as a PCS Strobe output signal.
 *
 * Values:
 * - 0b0 - PCS5/ PCSS is used as the Peripheral Chip Select[5] signal.
 * - 0b1 - PCS5/ PCSS is used as an active-low PCS Strobe signal.
 */
/*@{*/
/*! @brief Read current value of the SPI_MCR_PCSSE field. */
#define SPI_RD_MCR_PCSSE(base) ((SPI_MCR_REG(base) & SPI_MCR_PCSSE_MASK) >> SPI_MCR_PCSSE_SHIFT)
#define SPI_BRD_MCR_PCSSE(base) (BME_UBFX32(&SPI_MCR_REG(base), SPI_MCR_PCSSE_SHIFT, SPI_MCR_PCSSE_WIDTH))

/*! @brief Set the PCSSE field to a new value. */
#define SPI_WR_MCR_PCSSE(base, value) (SPI_RMW_MCR(base, SPI_MCR_PCSSE_MASK, SPI_MCR_PCSSE(value)))
#define SPI_BWR_MCR_PCSSE(base, value) (BME_BFI32(&SPI_MCR_REG(base), ((uint32_t)(value) << SPI_MCR_PCSSE_SHIFT), SPI_MCR_PCSSE_SHIFT, SPI_MCR_PCSSE_WIDTH))
/*@}*/

/*!
 * @name Register SPI_MCR, field MTFE[26] (RW)
 *
 * Enables a modified transfer format to be used.
 *
 * Values:
 * - 0b0 - Modified SPI transfer format disabled.
 * - 0b1 - Modified SPI transfer format enabled.
 */
/*@{*/
/*! @brief Read current value of the SPI_MCR_MTFE field. */
#define SPI_RD_MCR_MTFE(base) ((SPI_MCR_REG(base) & SPI_MCR_MTFE_MASK) >> SPI_MCR_MTFE_SHIFT)
#define SPI_BRD_MCR_MTFE(base) (BME_UBFX32(&SPI_MCR_REG(base), SPI_MCR_MTFE_SHIFT, SPI_MCR_MTFE_WIDTH))

/*! @brief Set the MTFE field to a new value. */
#define SPI_WR_MCR_MTFE(base, value) (SPI_RMW_MCR(base, SPI_MCR_MTFE_MASK, SPI_MCR_MTFE(value)))
#define SPI_BWR_MCR_MTFE(base, value) (BME_BFI32(&SPI_MCR_REG(base), ((uint32_t)(value) << SPI_MCR_MTFE_SHIFT), SPI_MCR_MTFE_SHIFT, SPI_MCR_MTFE_WIDTH))
/*@}*/

/*!
 * @name Register SPI_MCR, field FRZ[27] (RW)
 *
 * Enables transfers to be stopped on the next frame boundary when the device
 * enters Debug mode.
 *
 * Values:
 * - 0b0 - Do not halt serial transfers in Debug mode.
 * - 0b1 - Halt serial transfers in Debug mode.
 */
/*@{*/
/*! @brief Read current value of the SPI_MCR_FRZ field. */
#define SPI_RD_MCR_FRZ(base) ((SPI_MCR_REG(base) & SPI_MCR_FRZ_MASK) >> SPI_MCR_FRZ_SHIFT)
#define SPI_BRD_MCR_FRZ(base) (BME_UBFX32(&SPI_MCR_REG(base), SPI_MCR_FRZ_SHIFT, SPI_MCR_FRZ_WIDTH))

/*! @brief Set the FRZ field to a new value. */
#define SPI_WR_MCR_FRZ(base, value) (SPI_RMW_MCR(base, SPI_MCR_FRZ_MASK, SPI_MCR_FRZ(value)))
#define SPI_BWR_MCR_FRZ(base, value) (BME_BFI32(&SPI_MCR_REG(base), ((uint32_t)(value) << SPI_MCR_FRZ_SHIFT), SPI_MCR_FRZ_SHIFT, SPI_MCR_FRZ_WIDTH))
/*@}*/

/*!
 * @name Register SPI_MCR, field DCONF[29:28] (RO)
 *
 * Selects among the different configurations of the module.
 *
 * Values:
 * - 0b00 - SPI
 * - 0b01 - Reserved
 * - 0b10 - Reserved
 * - 0b11 - Reserved
 */
/*@{*/
/*! @brief Read current value of the SPI_MCR_DCONF field. */
#define SPI_RD_MCR_DCONF(base) ((SPI_MCR_REG(base) & SPI_MCR_DCONF_MASK) >> SPI_MCR_DCONF_SHIFT)
#define SPI_BRD_MCR_DCONF(base) (BME_UBFX32(&SPI_MCR_REG(base), SPI_MCR_DCONF_SHIFT, SPI_MCR_DCONF_WIDTH))
/*@}*/

/*!
 * @name Register SPI_MCR, field CONT_SCKE[30] (RW)
 *
 * Enables the Serial Communication Clock (SCK) to run continuously.
 *
 * Values:
 * - 0b0 - Continuous SCK disabled.
 * - 0b1 - Continuous SCK enabled.
 */
/*@{*/
/*! @brief Read current value of the SPI_MCR_CONT_SCKE field. */
#define SPI_RD_MCR_CONT_SCKE(base) ((SPI_MCR_REG(base) & SPI_MCR_CONT_SCKE_MASK) >> SPI_MCR_CONT_SCKE_SHIFT)
#define SPI_BRD_MCR_CONT_SCKE(base) (BME_UBFX32(&SPI_MCR_REG(base), SPI_MCR_CONT_SCKE_SHIFT, SPI_MCR_CONT_SCKE_WIDTH))

/*! @brief Set the CONT_SCKE field to a new value. */
#define SPI_WR_MCR_CONT_SCKE(base, value) (SPI_RMW_MCR(base, SPI_MCR_CONT_SCKE_MASK, SPI_MCR_CONT_SCKE(value)))
#define SPI_BWR_MCR_CONT_SCKE(base, value) (BME_BFI32(&SPI_MCR_REG(base), ((uint32_t)(value) << SPI_MCR_CONT_SCKE_SHIFT), SPI_MCR_CONT_SCKE_SHIFT, SPI_MCR_CONT_SCKE_WIDTH))
/*@}*/

/*!
 * @name Register SPI_MCR, field MSTR[31] (RW)
 *
 * Enables either Master mode (if supported) or Slave mode (if supported)
 * operation.
 *
 * Values:
 * - 0b0 - Enables Slave mode
 * - 0b1 - Enables Master mode
 */
/*@{*/
/*! @brief Read current value of the SPI_MCR_MSTR field. */
#define SPI_RD_MCR_MSTR(base) ((SPI_MCR_REG(base) & SPI_MCR_MSTR_MASK) >> SPI_MCR_MSTR_SHIFT)
#define SPI_BRD_MCR_MSTR(base) (BME_UBFX32(&SPI_MCR_REG(base), SPI_MCR_MSTR_SHIFT, SPI_MCR_MSTR_WIDTH))

/*! @brief Set the MSTR field to a new value. */
#define SPI_WR_MCR_MSTR(base, value) (SPI_RMW_MCR(base, SPI_MCR_MSTR_MASK, SPI_MCR_MSTR(value)))
#define SPI_BWR_MCR_MSTR(base, value) (BME_BFI32(&SPI_MCR_REG(base), ((uint32_t)(value) << SPI_MCR_MSTR_SHIFT), SPI_MCR_MSTR_SHIFT, SPI_MCR_MSTR_WIDTH))
/*@}*/

/*******************************************************************************
 * SPI_TCR - Transfer Count Register
 ******************************************************************************/

/*!
 * @brief SPI_TCR - Transfer Count Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * TCR contains a counter that indicates the number of SPI transfers made. The
 * transfer counter is intended to assist in queue management. Do not write the
 * TCR when the module is in the Running state.
 */
/*!
 * @name Constants and macros for entire SPI_TCR register
 */
/*@{*/
#define SPI_RD_TCR(base)         (SPI_TCR_REG(base))
#define SPI_WR_TCR(base, value)  (SPI_TCR_REG(base) = (value))
#define SPI_RMW_TCR(base, mask, value) (SPI_WR_TCR(base, (SPI_RD_TCR(base) & ~(mask)) | (value)))
#define SPI_SET_TCR(base, value) (BME_OR32(&SPI_TCR_REG(base), (uint32_t)(value)))
#define SPI_CLR_TCR(base, value) (BME_AND32(&SPI_TCR_REG(base), (uint32_t)(~(value))))
#define SPI_TOG_TCR(base, value) (BME_XOR32(&SPI_TCR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SPI_TCR bitfields
 */

/*!
 * @name Register SPI_TCR, field SPI_TCNT[31:16] (RW)
 *
 * Counts the number of SPI transfers the module makes. The SPI_TCNT field
 * increments every time the last bit of an SPI frame is transmitted. A value written
 * to SPI_TCNT presets the counter to that value. SPI_TCNT is reset to zero at
 * the beginning of the frame when the CTCNT field is set in the executing SPI
 * command. The Transfer Counter wraps around; incrementing the counter past 65535
 * resets the counter to zero.
 */
/*@{*/
/*! @brief Read current value of the SPI_TCR_SPI_TCNT field. */
#define SPI_RD_TCR_SPI_TCNT(base) ((SPI_TCR_REG(base) & SPI_TCR_SPI_TCNT_MASK) >> SPI_TCR_SPI_TCNT_SHIFT)
#define SPI_BRD_TCR_SPI_TCNT(base) (SPI_RD_TCR_SPI_TCNT(base))

/*! @brief Set the SPI_TCNT field to a new value. */
#define SPI_WR_TCR_SPI_TCNT(base, value) (SPI_RMW_TCR(base, SPI_TCR_SPI_TCNT_MASK, SPI_TCR_SPI_TCNT(value)))
#define SPI_BWR_TCR_SPI_TCNT(base, value) (SPI_WR_TCR_SPI_TCNT(base, value))
/*@}*/

/*******************************************************************************
 * SPI_CTAR_SLAVE - Clock and Transfer Attributes Register (In Slave Mode)
 ******************************************************************************/

/*!
 * @brief SPI_CTAR_SLAVE - Clock and Transfer Attributes Register (In Slave Mode) (RW)
 *
 * Reset value: 0x78000000U
 *
 * When the module is configured as an SPI bus slave, the CTAR0 register is used.
 */
/*!
 * @name Constants and macros for entire SPI_CTAR_SLAVE register
 */
/*@{*/
#define SPI_RD_CTAR_SLAVE(base, index) (SPI_CTAR_SLAVE_REG(base, index))
#define SPI_WR_CTAR_SLAVE(base, index, value) (SPI_CTAR_SLAVE_REG(base, index) = (value))
#define SPI_RMW_CTAR_SLAVE(base, index, mask, value) (SPI_WR_CTAR_SLAVE(base, index, (SPI_RD_CTAR_SLAVE(base, index) & ~(mask)) | (value)))
#define SPI_SET_CTAR_SLAVE(base, index, value) (BME_OR32(&SPI_CTAR_SLAVE_REG(base, index), (uint32_t)(value)))
#define SPI_CLR_CTAR_SLAVE(base, index, value) (BME_AND32(&SPI_CTAR_SLAVE_REG(base, index), (uint32_t)(~(value))))
#define SPI_TOG_CTAR_SLAVE(base, index, value) (BME_XOR32(&SPI_CTAR_SLAVE_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SPI_CTAR_SLAVE bitfields
 */

/*!
 * @name Register SPI_CTAR_SLAVE, field CPHA[25] (RW)
 *
 * Selects which edge of SCK causes data to change and which edge causes data to
 * be captured. This bit is used in both master and slave mode. For successful
 * communication between serial devices, the devices must have identical clock
 * phase settings. In Continuous SCK mode, the bit value is ignored and the
 * transfers are done as if the CPHA bit is set to 1.
 *
 * Values:
 * - 0b0 - Data is captured on the leading edge of SCK and changed on the
 *     following edge.
 * - 0b1 - Data is changed on the leading edge of SCK and captured on the
 *     following edge.
 */
/*@{*/
/*! @brief Read current value of the SPI_CTAR_SLAVE_CPHA field. */
#define SPI_RD_CTAR_SLAVE_CPHA(base, index) ((SPI_CTAR_SLAVE_REG(base, index) & SPI_CTAR_SLAVE_CPHA_MASK) >> SPI_CTAR_SLAVE_CPHA_SHIFT)
#define SPI_BRD_CTAR_SLAVE_CPHA(base, index) (BME_UBFX32(&SPI_CTAR_SLAVE_REG(base, index), SPI_CTAR_SLAVE_CPHA_SHIFT, SPI_CTAR_SLAVE_CPHA_WIDTH))

/*! @brief Set the CPHA field to a new value. */
#define SPI_WR_CTAR_SLAVE_CPHA(base, index, value) (SPI_RMW_CTAR_SLAVE(base, index, SPI_CTAR_SLAVE_CPHA_MASK, SPI_CTAR_SLAVE_CPHA(value)))
#define SPI_BWR_CTAR_SLAVE_CPHA(base, index, value) (BME_BFI32(&SPI_CTAR_SLAVE_REG(base, index), ((uint32_t)(value) << SPI_CTAR_SLAVE_CPHA_SHIFT), SPI_CTAR_SLAVE_CPHA_SHIFT, SPI_CTAR_SLAVE_CPHA_WIDTH))
/*@}*/

/*!
 * @name Register SPI_CTAR_SLAVE, field CPOL[26] (RW)
 *
 * Selects the inactive state of the Serial Communications Clock (SCK). In case
 * of Continuous SCK mode, when the module goes in low power mode(disabled),
 * inactive state of SCK is not guaranted.
 *
 * Values:
 * - 0b0 - The inactive state value of SCK is low.
 * - 0b1 - The inactive state value of SCK is high.
 */
/*@{*/
/*! @brief Read current value of the SPI_CTAR_SLAVE_CPOL field. */
#define SPI_RD_CTAR_SLAVE_CPOL(base, index) ((SPI_CTAR_SLAVE_REG(base, index) & SPI_CTAR_SLAVE_CPOL_MASK) >> SPI_CTAR_SLAVE_CPOL_SHIFT)
#define SPI_BRD_CTAR_SLAVE_CPOL(base, index) (BME_UBFX32(&SPI_CTAR_SLAVE_REG(base, index), SPI_CTAR_SLAVE_CPOL_SHIFT, SPI_CTAR_SLAVE_CPOL_WIDTH))

/*! @brief Set the CPOL field to a new value. */
#define SPI_WR_CTAR_SLAVE_CPOL(base, index, value) (SPI_RMW_CTAR_SLAVE(base, index, SPI_CTAR_SLAVE_CPOL_MASK, SPI_CTAR_SLAVE_CPOL(value)))
#define SPI_BWR_CTAR_SLAVE_CPOL(base, index, value) (BME_BFI32(&SPI_CTAR_SLAVE_REG(base, index), ((uint32_t)(value) << SPI_CTAR_SLAVE_CPOL_SHIFT), SPI_CTAR_SLAVE_CPOL_SHIFT, SPI_CTAR_SLAVE_CPOL_WIDTH))
/*@}*/

/*!
 * @name Register SPI_CTAR_SLAVE, field FMSZ[30:27] (RW)
 *
 * The number of bits transfered per frame is equal to the FMSZ field value plus
 * 1. Note that the minimum valid value of frame size is 4.
 */
/*@{*/
/*! @brief Read current value of the SPI_CTAR_SLAVE_FMSZ field. */
#define SPI_RD_CTAR_SLAVE_FMSZ(base, index) ((SPI_CTAR_SLAVE_REG(base, index) & SPI_CTAR_SLAVE_FMSZ_MASK) >> SPI_CTAR_SLAVE_FMSZ_SHIFT)
#define SPI_BRD_CTAR_SLAVE_FMSZ(base, index) (BME_UBFX32(&SPI_CTAR_SLAVE_REG(base, index), SPI_CTAR_SLAVE_FMSZ_SHIFT, SPI_CTAR_SLAVE_FMSZ_WIDTH))

/*! @brief Set the FMSZ field to a new value. */
#define SPI_WR_CTAR_SLAVE_FMSZ(base, index, value) (SPI_RMW_CTAR_SLAVE(base, index, SPI_CTAR_SLAVE_FMSZ_MASK, SPI_CTAR_SLAVE_FMSZ(value)))
#define SPI_BWR_CTAR_SLAVE_FMSZ(base, index, value) (BME_BFI32(&SPI_CTAR_SLAVE_REG(base, index), ((uint32_t)(value) << SPI_CTAR_SLAVE_FMSZ_SHIFT), SPI_CTAR_SLAVE_FMSZ_SHIFT, SPI_CTAR_SLAVE_FMSZ_WIDTH))
/*@}*/

/*******************************************************************************
 * SPI_CTAR - Clock and Transfer Attributes Register (In Master Mode)
 ******************************************************************************/

/*!
 * @brief SPI_CTAR - Clock and Transfer Attributes Register (In Master Mode) (RW)
 *
 * Reset value: 0x78000000U
 *
 * CTAR registers are used to define different transfer attributes. Do not write
 * to the CTAR registers while the module is in the Running state. In Master
 * mode, the CTAR registers define combinations of transfer attributes such as frame
 * size, clock phase and polarity, data bit ordering, baud rate, and various
 * delays. In slave mode, a subset of the bitfields in CTAR0 are used to set the
 * slave transfer attributes. When the module is configured as an SPI master, the
 * CTAS field in the command portion of the TX FIFO entry selects which of the CTAR
 * registers is used. When the module is configured as an SPI bus slave, it uses
 * the CTAR0 register.
 */
/*!
 * @name Constants and macros for entire SPI_CTAR register
 */
/*@{*/
#define SPI_RD_CTAR(base, index) (SPI_CTAR_REG(base, index))
#define SPI_WR_CTAR(base, index, value) (SPI_CTAR_REG(base, index) = (value))
#define SPI_RMW_CTAR(base, index, mask, value) (SPI_WR_CTAR(base, index, (SPI_RD_CTAR(base, index) & ~(mask)) | (value)))
#define SPI_SET_CTAR(base, index, value) (BME_OR32(&SPI_CTAR_REG(base, index), (uint32_t)(value)))
#define SPI_CLR_CTAR(base, index, value) (BME_AND32(&SPI_CTAR_REG(base, index), (uint32_t)(~(value))))
#define SPI_TOG_CTAR(base, index, value) (BME_XOR32(&SPI_CTAR_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SPI_CTAR bitfields
 */

/*!
 * @name Register SPI_CTAR, field BR[3:0] (RW)
 *
 * Selects the scaler value for the baud rate. This field is used only in master
 * mode. The prescaled protocol clock is divided by the Baud Rate Scaler to
 * generate the frequency of the SCK. The baud rate is computed according to the
 * following equation: SCK baud rate = (fP /PBR) x [(1+DBR)/BR] The following table
 * lists the baud rate scaler values. Baud Rate Scaler CTARn[BR] Baud Rate Scaler
 * Value 0000 2 0001 4 0010 6 0011 8 0100 16 0101 32 0110 64 0111 128 1000 256
 * 1001 512 1010 1024 1011 2048 1100 4096 1101 8192 1110 16384 1111 32768
 */
/*@{*/
/*! @brief Read current value of the SPI_CTAR_BR field. */
#define SPI_RD_CTAR_BR(base, index) ((SPI_CTAR_REG(base, index) & SPI_CTAR_BR_MASK) >> SPI_CTAR_BR_SHIFT)
#define SPI_BRD_CTAR_BR(base, index) (BME_UBFX32(&SPI_CTAR_REG(base, index), SPI_CTAR_BR_SHIFT, SPI_CTAR_BR_WIDTH))

/*! @brief Set the BR field to a new value. */
#define SPI_WR_CTAR_BR(base, index, value) (SPI_RMW_CTAR(base, index, SPI_CTAR_BR_MASK, SPI_CTAR_BR(value)))
#define SPI_BWR_CTAR_BR(base, index, value) (BME_BFI32(&SPI_CTAR_REG(base, index), ((uint32_t)(value) << SPI_CTAR_BR_SHIFT), SPI_CTAR_BR_SHIFT, SPI_CTAR_BR_WIDTH))
/*@}*/

/*!
 * @name Register SPI_CTAR, field DT[7:4] (RW)
 *
 * Selects the Delay after Transfer Scaler. This field is used only in master
 * mode. The Delay after Transfer is the time between the negation of the PCS
 * signal at the end of a frame and the assertion of PCS at the beginning of the next
 * frame. In the Continuous Serial Communications Clock operation, the DT value
 * is fixed to one SCK clock period, The Delay after Transfer is a multiple of the
 * protocol clock period, and it is computed according to the following
 * equation: tDT = (1/fP ) x PDT x DT See Delay Scaler Encoding table in CTARn[CSSCK] bit
 * field description for scaler values.
 */
/*@{*/
/*! @brief Read current value of the SPI_CTAR_DT field. */
#define SPI_RD_CTAR_DT(base, index) ((SPI_CTAR_REG(base, index) & SPI_CTAR_DT_MASK) >> SPI_CTAR_DT_SHIFT)
#define SPI_BRD_CTAR_DT(base, index) (BME_UBFX32(&SPI_CTAR_REG(base, index), SPI_CTAR_DT_SHIFT, SPI_CTAR_DT_WIDTH))

/*! @brief Set the DT field to a new value. */
#define SPI_WR_CTAR_DT(base, index, value) (SPI_RMW_CTAR(base, index, SPI_CTAR_DT_MASK, SPI_CTAR_DT(value)))
#define SPI_BWR_CTAR_DT(base, index, value) (BME_BFI32(&SPI_CTAR_REG(base, index), ((uint32_t)(value) << SPI_CTAR_DT_SHIFT), SPI_CTAR_DT_SHIFT, SPI_CTAR_DT_WIDTH))
/*@}*/

/*!
 * @name Register SPI_CTAR, field ASC[11:8] (RW)
 *
 * Selects the scaler value for the After SCK Delay. This field is used only in
 * master mode. The After SCK Delay is the delay between the last edge of SCK and
 * the negation of PCS. The delay is a multiple of the protocol clock period,
 * and it is computed according to the following equation: t ASC = (1/fP) x PASC x
 * ASC See Delay Scaler Encoding table in CTARn[CSSCK] bit field description for
 * scaler values. Refer After SCK Delay (tASC ) for more details.
 */
/*@{*/
/*! @brief Read current value of the SPI_CTAR_ASC field. */
#define SPI_RD_CTAR_ASC(base, index) ((SPI_CTAR_REG(base, index) & SPI_CTAR_ASC_MASK) >> SPI_CTAR_ASC_SHIFT)
#define SPI_BRD_CTAR_ASC(base, index) (BME_UBFX32(&SPI_CTAR_REG(base, index), SPI_CTAR_ASC_SHIFT, SPI_CTAR_ASC_WIDTH))

/*! @brief Set the ASC field to a new value. */
#define SPI_WR_CTAR_ASC(base, index, value) (SPI_RMW_CTAR(base, index, SPI_CTAR_ASC_MASK, SPI_CTAR_ASC(value)))
#define SPI_BWR_CTAR_ASC(base, index, value) (BME_BFI32(&SPI_CTAR_REG(base, index), ((uint32_t)(value) << SPI_CTAR_ASC_SHIFT), SPI_CTAR_ASC_SHIFT, SPI_CTAR_ASC_WIDTH))
/*@}*/

/*!
 * @name Register SPI_CTAR, field CSSCK[15:12] (RW)
 *
 * Selects the scaler value for the PCS to SCK delay. This field is used only in
 * master mode. The PCS to SCK Delay is the delay between the assertion of PCS
 * and the first edge of the SCK. The delay is a multiple of the protocol clock
 * period, and it is computed according to the following equation: t CSC = (1/fP )
 * x PCSSCK x CSSCK. The following table lists the delay scaler values. Delay
 * Scaler Encoding Field Value Delay Scaler Value 0000 2 0001 4 0010 8 0011 16 0100
 * 32 0101 64 0110 128 0111 256 1000 512 1001 1024 1010 2048 1011 4096 1100 8192
 * 1101 16384 1110 32768 1111 65536 Refer PCS to SCK Delay (tCSC ) for more
 * details.
 */
/*@{*/
/*! @brief Read current value of the SPI_CTAR_CSSCK field. */
#define SPI_RD_CTAR_CSSCK(base, index) ((SPI_CTAR_REG(base, index) & SPI_CTAR_CSSCK_MASK) >> SPI_CTAR_CSSCK_SHIFT)
#define SPI_BRD_CTAR_CSSCK(base, index) (BME_UBFX32(&SPI_CTAR_REG(base, index), SPI_CTAR_CSSCK_SHIFT, SPI_CTAR_CSSCK_WIDTH))

/*! @brief Set the CSSCK field to a new value. */
#define SPI_WR_CTAR_CSSCK(base, index, value) (SPI_RMW_CTAR(base, index, SPI_CTAR_CSSCK_MASK, SPI_CTAR_CSSCK(value)))
#define SPI_BWR_CTAR_CSSCK(base, index, value) (BME_BFI32(&SPI_CTAR_REG(base, index), ((uint32_t)(value) << SPI_CTAR_CSSCK_SHIFT), SPI_CTAR_CSSCK_SHIFT, SPI_CTAR_CSSCK_WIDTH))
/*@}*/

/*!
 * @name Register SPI_CTAR, field PBR[17:16] (RW)
 *
 * Selects the prescaler value for the baud rate. This field is used only in
 * master mode. The baud rate is the frequency of the SCK. The protocol clock is
 * divided by the prescaler value before the baud rate selection takes place. See
 * the BR field description for details on how to compute the baud rate.
 *
 * Values:
 * - 0b00 - Baud Rate Prescaler value is 2.
 * - 0b01 - Baud Rate Prescaler value is 3.
 * - 0b10 - Baud Rate Prescaler value is 5.
 * - 0b11 - Baud Rate Prescaler value is 7.
 */
/*@{*/
/*! @brief Read current value of the SPI_CTAR_PBR field. */
#define SPI_RD_CTAR_PBR(base, index) ((SPI_CTAR_REG(base, index) & SPI_CTAR_PBR_MASK) >> SPI_CTAR_PBR_SHIFT)
#define SPI_BRD_CTAR_PBR(base, index) (BME_UBFX32(&SPI_CTAR_REG(base, index), SPI_CTAR_PBR_SHIFT, SPI_CTAR_PBR_WIDTH))

/*! @brief Set the PBR field to a new value. */
#define SPI_WR_CTAR_PBR(base, index, value) (SPI_RMW_CTAR(base, index, SPI_CTAR_PBR_MASK, SPI_CTAR_PBR(value)))
#define SPI_BWR_CTAR_PBR(base, index, value) (BME_BFI32(&SPI_CTAR_REG(base, index), ((uint32_t)(value) << SPI_CTAR_PBR_SHIFT), SPI_CTAR_PBR_SHIFT, SPI_CTAR_PBR_WIDTH))
/*@}*/

/*!
 * @name Register SPI_CTAR, field PDT[19:18] (RW)
 *
 * Selects the prescaler value for the delay between the negation of the PCS
 * signal at the end of a frame and the assertion of PCS at the beginning of the
 * next frame. The PDT field is only used in master mode. See the DT field
 * description for details on how to compute the Delay after Transfer. Refer Delay after
 * Transfer (tDT ) for more details.
 *
 * Values:
 * - 0b00 - Delay after Transfer Prescaler value is 1.
 * - 0b01 - Delay after Transfer Prescaler value is 3.
 * - 0b10 - Delay after Transfer Prescaler value is 5.
 * - 0b11 - Delay after Transfer Prescaler value is 7.
 */
/*@{*/
/*! @brief Read current value of the SPI_CTAR_PDT field. */
#define SPI_RD_CTAR_PDT(base, index) ((SPI_CTAR_REG(base, index) & SPI_CTAR_PDT_MASK) >> SPI_CTAR_PDT_SHIFT)
#define SPI_BRD_CTAR_PDT(base, index) (BME_UBFX32(&SPI_CTAR_REG(base, index), SPI_CTAR_PDT_SHIFT, SPI_CTAR_PDT_WIDTH))

/*! @brief Set the PDT field to a new value. */
#define SPI_WR_CTAR_PDT(base, index, value) (SPI_RMW_CTAR(base, index, SPI_CTAR_PDT_MASK, SPI_CTAR_PDT(value)))
#define SPI_BWR_CTAR_PDT(base, index, value) (BME_BFI32(&SPI_CTAR_REG(base, index), ((uint32_t)(value) << SPI_CTAR_PDT_SHIFT), SPI_CTAR_PDT_SHIFT, SPI_CTAR_PDT_WIDTH))
/*@}*/

/*!
 * @name Register SPI_CTAR, field PASC[21:20] (RW)
 *
 * Selects the prescaler value for the delay between the last edge of SCK and
 * the negation of PCS. See the ASC field description for information on how to
 * compute the After SCK Delay. Refer After SCK Delay (tASC ) for more details.
 *
 * Values:
 * - 0b00 - Delay after Transfer Prescaler value is 1.
 * - 0b01 - Delay after Transfer Prescaler value is 3.
 * - 0b10 - Delay after Transfer Prescaler value is 5.
 * - 0b11 - Delay after Transfer Prescaler value is 7.
 */
/*@{*/
/*! @brief Read current value of the SPI_CTAR_PASC field. */
#define SPI_RD_CTAR_PASC(base, index) ((SPI_CTAR_REG(base, index) & SPI_CTAR_PASC_MASK) >> SPI_CTAR_PASC_SHIFT)
#define SPI_BRD_CTAR_PASC(base, index) (BME_UBFX32(&SPI_CTAR_REG(base, index), SPI_CTAR_PASC_SHIFT, SPI_CTAR_PASC_WIDTH))

/*! @brief Set the PASC field to a new value. */
#define SPI_WR_CTAR_PASC(base, index, value) (SPI_RMW_CTAR(base, index, SPI_CTAR_PASC_MASK, SPI_CTAR_PASC(value)))
#define SPI_BWR_CTAR_PASC(base, index, value) (BME_BFI32(&SPI_CTAR_REG(base, index), ((uint32_t)(value) << SPI_CTAR_PASC_SHIFT), SPI_CTAR_PASC_SHIFT, SPI_CTAR_PASC_WIDTH))
/*@}*/

/*!
 * @name Register SPI_CTAR, field PCSSCK[23:22] (RW)
 *
 * Selects the prescaler value for the delay between assertion of PCS and the
 * first edge of the SCK. See the CSSCK field description for information on how to
 * compute the PCS to SCK Delay. Refer PCS to SCK Delay (tCSC ) for more details.
 *
 * Values:
 * - 0b00 - PCS to SCK Prescaler value is 1.
 * - 0b01 - PCS to SCK Prescaler value is 3.
 * - 0b10 - PCS to SCK Prescaler value is 5.
 * - 0b11 - PCS to SCK Prescaler value is 7.
 */
/*@{*/
/*! @brief Read current value of the SPI_CTAR_PCSSCK field. */
#define SPI_RD_CTAR_PCSSCK(base, index) ((SPI_CTAR_REG(base, index) & SPI_CTAR_PCSSCK_MASK) >> SPI_CTAR_PCSSCK_SHIFT)
#define SPI_BRD_CTAR_PCSSCK(base, index) (BME_UBFX32(&SPI_CTAR_REG(base, index), SPI_CTAR_PCSSCK_SHIFT, SPI_CTAR_PCSSCK_WIDTH))

/*! @brief Set the PCSSCK field to a new value. */
#define SPI_WR_CTAR_PCSSCK(base, index, value) (SPI_RMW_CTAR(base, index, SPI_CTAR_PCSSCK_MASK, SPI_CTAR_PCSSCK(value)))
#define SPI_BWR_CTAR_PCSSCK(base, index, value) (BME_BFI32(&SPI_CTAR_REG(base, index), ((uint32_t)(value) << SPI_CTAR_PCSSCK_SHIFT), SPI_CTAR_PCSSCK_SHIFT, SPI_CTAR_PCSSCK_WIDTH))
/*@}*/

/*!
 * @name Register SPI_CTAR, field LSBFE[24] (RW)
 *
 * Specifies whether the LSB or MSB of the frame is transferred first.
 *
 * Values:
 * - 0b0 - Data is transferred MSB first.
 * - 0b1 - Data is transferred LSB first.
 */
/*@{*/
/*! @brief Read current value of the SPI_CTAR_LSBFE field. */
#define SPI_RD_CTAR_LSBFE(base, index) ((SPI_CTAR_REG(base, index) & SPI_CTAR_LSBFE_MASK) >> SPI_CTAR_LSBFE_SHIFT)
#define SPI_BRD_CTAR_LSBFE(base, index) (BME_UBFX32(&SPI_CTAR_REG(base, index), SPI_CTAR_LSBFE_SHIFT, SPI_CTAR_LSBFE_WIDTH))

/*! @brief Set the LSBFE field to a new value. */
#define SPI_WR_CTAR_LSBFE(base, index, value) (SPI_RMW_CTAR(base, index, SPI_CTAR_LSBFE_MASK, SPI_CTAR_LSBFE(value)))
#define SPI_BWR_CTAR_LSBFE(base, index, value) (BME_BFI32(&SPI_CTAR_REG(base, index), ((uint32_t)(value) << SPI_CTAR_LSBFE_SHIFT), SPI_CTAR_LSBFE_SHIFT, SPI_CTAR_LSBFE_WIDTH))
/*@}*/

/*!
 * @name Register SPI_CTAR, field CPHA[25] (RW)
 *
 * Selects which edge of SCK causes data to change and which edge causes data to
 * be captured. This bit is used in both master and slave mode. For successful
 * communication between serial devices, the devices must have identical clock
 * phase settings. In Continuous SCK mode, the bit value is ignored and the
 * transfers are done as if the CPHA bit is set to 1.
 *
 * Values:
 * - 0b0 - Data is captured on the leading edge of SCK and changed on the
 *     following edge.
 * - 0b1 - Data is changed on the leading edge of SCK and captured on the
 *     following edge.
 */
/*@{*/
/*! @brief Read current value of the SPI_CTAR_CPHA field. */
#define SPI_RD_CTAR_CPHA(base, index) ((SPI_CTAR_REG(base, index) & SPI_CTAR_CPHA_MASK) >> SPI_CTAR_CPHA_SHIFT)
#define SPI_BRD_CTAR_CPHA(base, index) (BME_UBFX32(&SPI_CTAR_REG(base, index), SPI_CTAR_CPHA_SHIFT, SPI_CTAR_CPHA_WIDTH))

/*! @brief Set the CPHA field to a new value. */
#define SPI_WR_CTAR_CPHA(base, index, value) (SPI_RMW_CTAR(base, index, SPI_CTAR_CPHA_MASK, SPI_CTAR_CPHA(value)))
#define SPI_BWR_CTAR_CPHA(base, index, value) (BME_BFI32(&SPI_CTAR_REG(base, index), ((uint32_t)(value) << SPI_CTAR_CPHA_SHIFT), SPI_CTAR_CPHA_SHIFT, SPI_CTAR_CPHA_WIDTH))
/*@}*/

/*!
 * @name Register SPI_CTAR, field CPOL[26] (RW)
 *
 * Selects the inactive state of the Serial Communications Clock (SCK). This bit
 * is used in both master and slave mode. For successful communication between
 * serial devices, the devices must have identical clock polarities. When the
 * Continuous Selection Format is selected, switching between clock polarities
 * without stopping the module can cause errors in the transfer due to the peripheral
 * device interpreting the switch of clock polarity as a valid clock edge. In case
 * of Continuous SCK mode, when the module goes in low power mode(disabled),
 * inactive state of SCK is not guaranted.
 *
 * Values:
 * - 0b0 - The inactive state value of SCK is low.
 * - 0b1 - The inactive state value of SCK is high.
 */
/*@{*/
/*! @brief Read current value of the SPI_CTAR_CPOL field. */
#define SPI_RD_CTAR_CPOL(base, index) ((SPI_CTAR_REG(base, index) & SPI_CTAR_CPOL_MASK) >> SPI_CTAR_CPOL_SHIFT)
#define SPI_BRD_CTAR_CPOL(base, index) (BME_UBFX32(&SPI_CTAR_REG(base, index), SPI_CTAR_CPOL_SHIFT, SPI_CTAR_CPOL_WIDTH))

/*! @brief Set the CPOL field to a new value. */
#define SPI_WR_CTAR_CPOL(base, index, value) (SPI_RMW_CTAR(base, index, SPI_CTAR_CPOL_MASK, SPI_CTAR_CPOL(value)))
#define SPI_BWR_CTAR_CPOL(base, index, value) (BME_BFI32(&SPI_CTAR_REG(base, index), ((uint32_t)(value) << SPI_CTAR_CPOL_SHIFT), SPI_CTAR_CPOL_SHIFT, SPI_CTAR_CPOL_WIDTH))
/*@}*/

/*!
 * @name Register SPI_CTAR, field FMSZ[30:27] (RW)
 *
 * The number of bits transferred per frame is equal to the FMSZ value plus 1.
 * Regardless of the transmission mode, the minimum valid frame size value is 4.
 */
/*@{*/
/*! @brief Read current value of the SPI_CTAR_FMSZ field. */
#define SPI_RD_CTAR_FMSZ(base, index) ((SPI_CTAR_REG(base, index) & SPI_CTAR_FMSZ_MASK) >> SPI_CTAR_FMSZ_SHIFT)
#define SPI_BRD_CTAR_FMSZ(base, index) (BME_UBFX32(&SPI_CTAR_REG(base, index), SPI_CTAR_FMSZ_SHIFT, SPI_CTAR_FMSZ_WIDTH))

/*! @brief Set the FMSZ field to a new value. */
#define SPI_WR_CTAR_FMSZ(base, index, value) (SPI_RMW_CTAR(base, index, SPI_CTAR_FMSZ_MASK, SPI_CTAR_FMSZ(value)))
#define SPI_BWR_CTAR_FMSZ(base, index, value) (BME_BFI32(&SPI_CTAR_REG(base, index), ((uint32_t)(value) << SPI_CTAR_FMSZ_SHIFT), SPI_CTAR_FMSZ_SHIFT, SPI_CTAR_FMSZ_WIDTH))
/*@}*/

/*!
 * @name Register SPI_CTAR, field DBR[31] (RW)
 *
 * Doubles the effective baud rate of the Serial Communications Clock (SCK).
 * This field is used only in master mode. It effectively halves the Baud Rate
 * division ratio, supporting faster frequencies, and odd division ratios for the
 * Serial Communications Clock (SCK). When the DBR bit is set, the duty cycle of the
 * Serial Communications Clock (SCK) depends on the value in the Baud Rate
 * Prescaler and the Clock Phase bit as listed in the following table. See the BR field
 * description for details on how to compute the baud rate. SPI SCK Duty Cycle
 * DBR CPHA PBR SCK Duty Cycle 0 any any 50/50 1 0 00 50/50 1 0 01 33/66 1 0 10
 * 40/60 1 0 11 43/57 1 1 00 50/50 1 1 01 66/33 1 1 10 60/40 1 1 11 57/43
 *
 * Values:
 * - 0b0 - The baud rate is computed normally with a 50/50 duty cycle.
 * - 0b1 - The baud rate is doubled with the duty cycle depending on the Baud
 *     Rate Prescaler.
 */
/*@{*/
/*! @brief Read current value of the SPI_CTAR_DBR field. */
#define SPI_RD_CTAR_DBR(base, index) ((SPI_CTAR_REG(base, index) & SPI_CTAR_DBR_MASK) >> SPI_CTAR_DBR_SHIFT)
#define SPI_BRD_CTAR_DBR(base, index) (BME_UBFX32(&SPI_CTAR_REG(base, index), SPI_CTAR_DBR_SHIFT, SPI_CTAR_DBR_WIDTH))

/*! @brief Set the DBR field to a new value. */
#define SPI_WR_CTAR_DBR(base, index, value) (SPI_RMW_CTAR(base, index, SPI_CTAR_DBR_MASK, SPI_CTAR_DBR(value)))
#define SPI_BWR_CTAR_DBR(base, index, value) (BME_BFI32(&SPI_CTAR_REG(base, index), ((uint32_t)(value) << SPI_CTAR_DBR_SHIFT), SPI_CTAR_DBR_SHIFT, SPI_CTAR_DBR_WIDTH))
/*@}*/

/*******************************************************************************
 * SPI_SR - Status Register
 ******************************************************************************/

/*!
 * @brief SPI_SR - Status Register (RW)
 *
 * Reset value: 0x02000000U
 *
 * SR contains status and flag bits. The bits reflect the status of the module
 * and indicate the occurrence of events that can generate interrupt or DMA
 * requests. Software can clear flag bits in the SR by writing a 1 to them. Writing a 0
 * to a flag bit has no effect. This register may not be writable in Module
 * Disable mode due to the use of power saving mechanisms.
 */
/*!
 * @name Constants and macros for entire SPI_SR register
 */
/*@{*/
#define SPI_RD_SR(base)          (SPI_SR_REG(base))
#define SPI_WR_SR(base, value)   (SPI_SR_REG(base) = (value))
#define SPI_RMW_SR(base, mask, value) (SPI_WR_SR(base, (SPI_RD_SR(base) & ~(mask)) | (value)))
#define SPI_SET_SR(base, value)  (BME_OR32(&SPI_SR_REG(base), (uint32_t)(value)))
#define SPI_CLR_SR(base, value)  (BME_AND32(&SPI_SR_REG(base), (uint32_t)(~(value))))
#define SPI_TOG_SR(base, value)  (BME_XOR32(&SPI_SR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SPI_SR bitfields
 */

/*!
 * @name Register SPI_SR, field POPNXTPTR[3:0] (RO)
 *
 * Contains a pointer to the RX FIFO entry to be returned when the POPR is read.
 * The POPNXTPTR is updated when the POPR is read.
 */
/*@{*/
/*! @brief Read current value of the SPI_SR_POPNXTPTR field. */
#define SPI_RD_SR_POPNXTPTR(base) ((SPI_SR_REG(base) & SPI_SR_POPNXTPTR_MASK) >> SPI_SR_POPNXTPTR_SHIFT)
#define SPI_BRD_SR_POPNXTPTR(base) (BME_UBFX32(&SPI_SR_REG(base), SPI_SR_POPNXTPTR_SHIFT, SPI_SR_POPNXTPTR_WIDTH))
/*@}*/

/*!
 * @name Register SPI_SR, field RXCTR[7:4] (RO)
 *
 * Indicates the number of entries in the RX FIFO. The RXCTR is decremented
 * every time the POPR is read. The RXCTR is incremented every time data is
 * transferred from the shift register to the RX FIFO.
 */
/*@{*/
/*! @brief Read current value of the SPI_SR_RXCTR field. */
#define SPI_RD_SR_RXCTR(base) ((SPI_SR_REG(base) & SPI_SR_RXCTR_MASK) >> SPI_SR_RXCTR_SHIFT)
#define SPI_BRD_SR_RXCTR(base) (BME_UBFX32(&SPI_SR_REG(base), SPI_SR_RXCTR_SHIFT, SPI_SR_RXCTR_WIDTH))
/*@}*/

/*!
 * @name Register SPI_SR, field TXNXTPTR[11:8] (RO)
 *
 * Indicates which TX FIFO entry is transmitted during the next transfer. The
 * TXNXTPTR field is updated every time SPI data is transferred from the TX FIFO to
 * the shift register.
 */
/*@{*/
/*! @brief Read current value of the SPI_SR_TXNXTPTR field. */
#define SPI_RD_SR_TXNXTPTR(base) ((SPI_SR_REG(base) & SPI_SR_TXNXTPTR_MASK) >> SPI_SR_TXNXTPTR_SHIFT)
#define SPI_BRD_SR_TXNXTPTR(base) (BME_UBFX32(&SPI_SR_REG(base), SPI_SR_TXNXTPTR_SHIFT, SPI_SR_TXNXTPTR_WIDTH))
/*@}*/

/*!
 * @name Register SPI_SR, field TXCTR[15:12] (RO)
 *
 * Indicates the number of valid entries in the TX FIFO. The TXCTR is
 * incremented every time the PUSHR is written. The TXCTR is decremented every time an SPI
 * command is executed and the SPI data is transferred to the shift register.
 */
/*@{*/
/*! @brief Read current value of the SPI_SR_TXCTR field. */
#define SPI_RD_SR_TXCTR(base) ((SPI_SR_REG(base) & SPI_SR_TXCTR_MASK) >> SPI_SR_TXCTR_SHIFT)
#define SPI_BRD_SR_TXCTR(base) (BME_UBFX32(&SPI_SR_REG(base), SPI_SR_TXCTR_SHIFT, SPI_SR_TXCTR_WIDTH))
/*@}*/

/*!
 * @name Register SPI_SR, field RFDF[17] (W1C)
 *
 * Provides a method for the module to request that entries be removed from the
 * RX FIFO. The bit is set while the RX FIFO is not empty. The RFDF bit can be
 * cleared by writing 1 to it or by acknowledgement from the DMA controller when
 * the RX FIFO is empty.
 *
 * Values:
 * - 0b0 - RX FIFO is empty.
 * - 0b1 - RX FIFO is not empty.
 */
/*@{*/
/*! @brief Read current value of the SPI_SR_RFDF field. */
#define SPI_RD_SR_RFDF(base) ((SPI_SR_REG(base) & SPI_SR_RFDF_MASK) >> SPI_SR_RFDF_SHIFT)
#define SPI_BRD_SR_RFDF(base) (BME_UBFX32(&SPI_SR_REG(base), SPI_SR_RFDF_SHIFT, SPI_SR_RFDF_WIDTH))

/*! @brief Set the RFDF field to a new value. */
#define SPI_WR_SR_RFDF(base, value) (SPI_RMW_SR(base, (SPI_SR_RFDF_MASK | SPI_SR_RFOF_MASK | SPI_SR_TFFF_MASK | SPI_SR_TFUF_MASK | SPI_SR_EOQF_MASK | SPI_SR_TXRXS_MASK | SPI_SR_TCF_MASK), SPI_SR_RFDF(value)))
#define SPI_BWR_SR_RFDF(base, value) (BME_BFI32(&SPI_SR_REG(base), ((uint32_t)(value) << SPI_SR_RFDF_SHIFT), SPI_SR_RFDF_SHIFT, SPI_SR_RFDF_WIDTH))
/*@}*/

/*!
 * @name Register SPI_SR, field RFOF[19] (W1C)
 *
 * Indicates an overflow condition in the RX FIFO. The field is set when the RX
 * FIFO and shift register are full and a transfer is initiated. The bit remains
 * set until it is cleared by writing a 1 to it.
 *
 * Values:
 * - 0b0 - No Rx FIFO overflow.
 * - 0b1 - Rx FIFO overflow has occurred.
 */
/*@{*/
/*! @brief Read current value of the SPI_SR_RFOF field. */
#define SPI_RD_SR_RFOF(base) ((SPI_SR_REG(base) & SPI_SR_RFOF_MASK) >> SPI_SR_RFOF_SHIFT)
#define SPI_BRD_SR_RFOF(base) (BME_UBFX32(&SPI_SR_REG(base), SPI_SR_RFOF_SHIFT, SPI_SR_RFOF_WIDTH))

/*! @brief Set the RFOF field to a new value. */
#define SPI_WR_SR_RFOF(base, value) (SPI_RMW_SR(base, (SPI_SR_RFOF_MASK | SPI_SR_RFDF_MASK | SPI_SR_TFFF_MASK | SPI_SR_TFUF_MASK | SPI_SR_EOQF_MASK | SPI_SR_TXRXS_MASK | SPI_SR_TCF_MASK), SPI_SR_RFOF(value)))
#define SPI_BWR_SR_RFOF(base, value) (BME_BFI32(&SPI_SR_REG(base), ((uint32_t)(value) << SPI_SR_RFOF_SHIFT), SPI_SR_RFOF_SHIFT, SPI_SR_RFOF_WIDTH))
/*@}*/

/*!
 * @name Register SPI_SR, field TFFF[25] (W1C)
 *
 * Provides a method for the module to request more entries to be added to the
 * TX FIFO. The TFFF bit is set while the TX FIFO is not full. The TFFF bit can be
 * cleared by writing 1 to it or by acknowledgement from the DMA controller to
 * the TX FIFO full request.
 *
 * Values:
 * - 0b0 - TX FIFO is full.
 * - 0b1 - TX FIFO is not full.
 */
/*@{*/
/*! @brief Read current value of the SPI_SR_TFFF field. */
#define SPI_RD_SR_TFFF(base) ((SPI_SR_REG(base) & SPI_SR_TFFF_MASK) >> SPI_SR_TFFF_SHIFT)
#define SPI_BRD_SR_TFFF(base) (BME_UBFX32(&SPI_SR_REG(base), SPI_SR_TFFF_SHIFT, SPI_SR_TFFF_WIDTH))

/*! @brief Set the TFFF field to a new value. */
#define SPI_WR_SR_TFFF(base, value) (SPI_RMW_SR(base, (SPI_SR_TFFF_MASK | SPI_SR_RFDF_MASK | SPI_SR_RFOF_MASK | SPI_SR_TFUF_MASK | SPI_SR_EOQF_MASK | SPI_SR_TXRXS_MASK | SPI_SR_TCF_MASK), SPI_SR_TFFF(value)))
#define SPI_BWR_SR_TFFF(base, value) (BME_BFI32(&SPI_SR_REG(base), ((uint32_t)(value) << SPI_SR_TFFF_SHIFT), SPI_SR_TFFF_SHIFT, SPI_SR_TFFF_WIDTH))
/*@}*/

/*!
 * @name Register SPI_SR, field TFUF[27] (W1C)
 *
 * Indicates an underflow condition in the TX FIFO. The transmit underflow
 * condition is detected only for SPI blocks operating in Slave mode and SPI
 * configuration. TFUF is set when the TX FIFO of the module operating in SPI Slave mode
 * is empty and an external SPI master initiates a transfer. The TFUF bit remains
 * set until cleared by writing 1 to it.
 *
 * Values:
 * - 0b0 - No TX FIFO underflow.
 * - 0b1 - TX FIFO underflow has occurred.
 */
/*@{*/
/*! @brief Read current value of the SPI_SR_TFUF field. */
#define SPI_RD_SR_TFUF(base) ((SPI_SR_REG(base) & SPI_SR_TFUF_MASK) >> SPI_SR_TFUF_SHIFT)
#define SPI_BRD_SR_TFUF(base) (BME_UBFX32(&SPI_SR_REG(base), SPI_SR_TFUF_SHIFT, SPI_SR_TFUF_WIDTH))

/*! @brief Set the TFUF field to a new value. */
#define SPI_WR_SR_TFUF(base, value) (SPI_RMW_SR(base, (SPI_SR_TFUF_MASK | SPI_SR_RFDF_MASK | SPI_SR_RFOF_MASK | SPI_SR_TFFF_MASK | SPI_SR_EOQF_MASK | SPI_SR_TXRXS_MASK | SPI_SR_TCF_MASK), SPI_SR_TFUF(value)))
#define SPI_BWR_SR_TFUF(base, value) (BME_BFI32(&SPI_SR_REG(base), ((uint32_t)(value) << SPI_SR_TFUF_SHIFT), SPI_SR_TFUF_SHIFT, SPI_SR_TFUF_WIDTH))
/*@}*/

/*!
 * @name Register SPI_SR, field EOQF[28] (W1C)
 *
 * Indicates that the last entry in a queue has been transmitted when the module
 * is in Master mode. The EOQF bit is set when the TX FIFO entry has the EOQ bit
 * set in the command halfword and the end of the transfer is reached. The EOQF
 * bit remains set until cleared by writing a 1 to it. When the EOQF bit is set,
 * the TXRXS bit is automatically cleared.
 *
 * Values:
 * - 0b0 - EOQ is not set in the executing command.
 * - 0b1 - EOQ is set in the executing SPI command.
 */
/*@{*/
/*! @brief Read current value of the SPI_SR_EOQF field. */
#define SPI_RD_SR_EOQF(base) ((SPI_SR_REG(base) & SPI_SR_EOQF_MASK) >> SPI_SR_EOQF_SHIFT)
#define SPI_BRD_SR_EOQF(base) (BME_UBFX32(&SPI_SR_REG(base), SPI_SR_EOQF_SHIFT, SPI_SR_EOQF_WIDTH))

/*! @brief Set the EOQF field to a new value. */
#define SPI_WR_SR_EOQF(base, value) (SPI_RMW_SR(base, (SPI_SR_EOQF_MASK | SPI_SR_RFDF_MASK | SPI_SR_RFOF_MASK | SPI_SR_TFFF_MASK | SPI_SR_TFUF_MASK | SPI_SR_TXRXS_MASK | SPI_SR_TCF_MASK), SPI_SR_EOQF(value)))
#define SPI_BWR_SR_EOQF(base, value) (BME_BFI32(&SPI_SR_REG(base), ((uint32_t)(value) << SPI_SR_EOQF_SHIFT), SPI_SR_EOQF_SHIFT, SPI_SR_EOQF_WIDTH))
/*@}*/

/*!
 * @name Register SPI_SR, field TXRXS[30] (W1C)
 *
 * Reflects the run status of the module.
 *
 * Values:
 * - 0b0 - Transmit and receive operations are disabled (The module is in
 *     Stopped state).
 * - 0b1 - Transmit and receive operations are enabled (The module is in Running
 *     state).
 */
/*@{*/
/*! @brief Read current value of the SPI_SR_TXRXS field. */
#define SPI_RD_SR_TXRXS(base) ((SPI_SR_REG(base) & SPI_SR_TXRXS_MASK) >> SPI_SR_TXRXS_SHIFT)
#define SPI_BRD_SR_TXRXS(base) (BME_UBFX32(&SPI_SR_REG(base), SPI_SR_TXRXS_SHIFT, SPI_SR_TXRXS_WIDTH))

/*! @brief Set the TXRXS field to a new value. */
#define SPI_WR_SR_TXRXS(base, value) (SPI_RMW_SR(base, (SPI_SR_TXRXS_MASK | SPI_SR_RFDF_MASK | SPI_SR_RFOF_MASK | SPI_SR_TFFF_MASK | SPI_SR_TFUF_MASK | SPI_SR_EOQF_MASK | SPI_SR_TCF_MASK), SPI_SR_TXRXS(value)))
#define SPI_BWR_SR_TXRXS(base, value) (BME_BFI32(&SPI_SR_REG(base), ((uint32_t)(value) << SPI_SR_TXRXS_SHIFT), SPI_SR_TXRXS_SHIFT, SPI_SR_TXRXS_WIDTH))
/*@}*/

/*!
 * @name Register SPI_SR, field TCF[31] (W1C)
 *
 * Indicates that all bits in a frame have been shifted out. TCF remains set
 * until it is cleared by writing a 1 to it.
 *
 * Values:
 * - 0b0 - Transfer not complete.
 * - 0b1 - Transfer complete.
 */
/*@{*/
/*! @brief Read current value of the SPI_SR_TCF field. */
#define SPI_RD_SR_TCF(base)  ((SPI_SR_REG(base) & SPI_SR_TCF_MASK) >> SPI_SR_TCF_SHIFT)
#define SPI_BRD_SR_TCF(base) (BME_UBFX32(&SPI_SR_REG(base), SPI_SR_TCF_SHIFT, SPI_SR_TCF_WIDTH))

/*! @brief Set the TCF field to a new value. */
#define SPI_WR_SR_TCF(base, value) (SPI_RMW_SR(base, (SPI_SR_TCF_MASK | SPI_SR_RFDF_MASK | SPI_SR_RFOF_MASK | SPI_SR_TFFF_MASK | SPI_SR_TFUF_MASK | SPI_SR_EOQF_MASK | SPI_SR_TXRXS_MASK), SPI_SR_TCF(value)))
#define SPI_BWR_SR_TCF(base, value) (BME_BFI32(&SPI_SR_REG(base), ((uint32_t)(value) << SPI_SR_TCF_SHIFT), SPI_SR_TCF_SHIFT, SPI_SR_TCF_WIDTH))
/*@}*/

/*******************************************************************************
 * SPI_RSER - DMA/Interrupt Request Select and Enable Register
 ******************************************************************************/

/*!
 * @brief SPI_RSER - DMA/Interrupt Request Select and Enable Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * RSER controls DMA and interrupt requests. Do not write to the RSER while the
 * module is in the Running state.
 */
/*!
 * @name Constants and macros for entire SPI_RSER register
 */
/*@{*/
#define SPI_RD_RSER(base)        (SPI_RSER_REG(base))
#define SPI_WR_RSER(base, value) (SPI_RSER_REG(base) = (value))
#define SPI_RMW_RSER(base, mask, value) (SPI_WR_RSER(base, (SPI_RD_RSER(base) & ~(mask)) | (value)))
#define SPI_SET_RSER(base, value) (BME_OR32(&SPI_RSER_REG(base), (uint32_t)(value)))
#define SPI_CLR_RSER(base, value) (BME_AND32(&SPI_RSER_REG(base), (uint32_t)(~(value))))
#define SPI_TOG_RSER(base, value) (BME_XOR32(&SPI_RSER_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SPI_RSER bitfields
 */

/*!
 * @name Register SPI_RSER, field RFDF_DIRS[16] (RW)
 *
 * Selects between generating a DMA request or an interrupt request. When the
 * RFDF flag bit in the SR is set, and the RFDF_RE bit in the RSER is set, the
 * RFDF_DIRS bit selects between generating an interrupt request or a DMA request.
 *
 * Values:
 * - 0b0 - Interrupt request.
 * - 0b1 - DMA request.
 */
/*@{*/
/*! @brief Read current value of the SPI_RSER_RFDF_DIRS field. */
#define SPI_RD_RSER_RFDF_DIRS(base) ((SPI_RSER_REG(base) & SPI_RSER_RFDF_DIRS_MASK) >> SPI_RSER_RFDF_DIRS_SHIFT)
#define SPI_BRD_RSER_RFDF_DIRS(base) (BME_UBFX32(&SPI_RSER_REG(base), SPI_RSER_RFDF_DIRS_SHIFT, SPI_RSER_RFDF_DIRS_WIDTH))

/*! @brief Set the RFDF_DIRS field to a new value. */
#define SPI_WR_RSER_RFDF_DIRS(base, value) (SPI_RMW_RSER(base, SPI_RSER_RFDF_DIRS_MASK, SPI_RSER_RFDF_DIRS(value)))
#define SPI_BWR_RSER_RFDF_DIRS(base, value) (BME_BFI32(&SPI_RSER_REG(base), ((uint32_t)(value) << SPI_RSER_RFDF_DIRS_SHIFT), SPI_RSER_RFDF_DIRS_SHIFT, SPI_RSER_RFDF_DIRS_WIDTH))
/*@}*/

/*!
 * @name Register SPI_RSER, field RFDF_RE[17] (RW)
 *
 * Enables the RFDF flag in the SR to generate a request. The RFDF_DIRS bit
 * selects between generating an interrupt request or a DMA request.
 *
 * Values:
 * - 0b0 - RFDF interrupt or DMA requests are disabled.
 * - 0b1 - RFDF interrupt or DMA requests are enabled.
 */
/*@{*/
/*! @brief Read current value of the SPI_RSER_RFDF_RE field. */
#define SPI_RD_RSER_RFDF_RE(base) ((SPI_RSER_REG(base) & SPI_RSER_RFDF_RE_MASK) >> SPI_RSER_RFDF_RE_SHIFT)
#define SPI_BRD_RSER_RFDF_RE(base) (BME_UBFX32(&SPI_RSER_REG(base), SPI_RSER_RFDF_RE_SHIFT, SPI_RSER_RFDF_RE_WIDTH))

/*! @brief Set the RFDF_RE field to a new value. */
#define SPI_WR_RSER_RFDF_RE(base, value) (SPI_RMW_RSER(base, SPI_RSER_RFDF_RE_MASK, SPI_RSER_RFDF_RE(value)))
#define SPI_BWR_RSER_RFDF_RE(base, value) (BME_BFI32(&SPI_RSER_REG(base), ((uint32_t)(value) << SPI_RSER_RFDF_RE_SHIFT), SPI_RSER_RFDF_RE_SHIFT, SPI_RSER_RFDF_RE_WIDTH))
/*@}*/

/*!
 * @name Register SPI_RSER, field RFOF_RE[19] (RW)
 *
 * Enables the RFOF flag in the SR to generate an interrupt request.
 *
 * Values:
 * - 0b0 - RFOF interrupt requests are disabled.
 * - 0b1 - RFOF interrupt requests are enabled.
 */
/*@{*/
/*! @brief Read current value of the SPI_RSER_RFOF_RE field. */
#define SPI_RD_RSER_RFOF_RE(base) ((SPI_RSER_REG(base) & SPI_RSER_RFOF_RE_MASK) >> SPI_RSER_RFOF_RE_SHIFT)
#define SPI_BRD_RSER_RFOF_RE(base) (BME_UBFX32(&SPI_RSER_REG(base), SPI_RSER_RFOF_RE_SHIFT, SPI_RSER_RFOF_RE_WIDTH))

/*! @brief Set the RFOF_RE field to a new value. */
#define SPI_WR_RSER_RFOF_RE(base, value) (SPI_RMW_RSER(base, SPI_RSER_RFOF_RE_MASK, SPI_RSER_RFOF_RE(value)))
#define SPI_BWR_RSER_RFOF_RE(base, value) (BME_BFI32(&SPI_RSER_REG(base), ((uint32_t)(value) << SPI_RSER_RFOF_RE_SHIFT), SPI_RSER_RFOF_RE_SHIFT, SPI_RSER_RFOF_RE_WIDTH))
/*@}*/

/*!
 * @name Register SPI_RSER, field TFFF_DIRS[24] (RW)
 *
 * Selects between generating a DMA request or an interrupt request. When
 * SR[TFFF] and RSER[TFFF_RE] are set, this field selects between generating an
 * interrupt request or a DMA request.
 *
 * Values:
 * - 0b0 - TFFF flag generates interrupt requests.
 * - 0b1 - TFFF flag generates DMA requests.
 */
/*@{*/
/*! @brief Read current value of the SPI_RSER_TFFF_DIRS field. */
#define SPI_RD_RSER_TFFF_DIRS(base) ((SPI_RSER_REG(base) & SPI_RSER_TFFF_DIRS_MASK) >> SPI_RSER_TFFF_DIRS_SHIFT)
#define SPI_BRD_RSER_TFFF_DIRS(base) (BME_UBFX32(&SPI_RSER_REG(base), SPI_RSER_TFFF_DIRS_SHIFT, SPI_RSER_TFFF_DIRS_WIDTH))

/*! @brief Set the TFFF_DIRS field to a new value. */
#define SPI_WR_RSER_TFFF_DIRS(base, value) (SPI_RMW_RSER(base, SPI_RSER_TFFF_DIRS_MASK, SPI_RSER_TFFF_DIRS(value)))
#define SPI_BWR_RSER_TFFF_DIRS(base, value) (BME_BFI32(&SPI_RSER_REG(base), ((uint32_t)(value) << SPI_RSER_TFFF_DIRS_SHIFT), SPI_RSER_TFFF_DIRS_SHIFT, SPI_RSER_TFFF_DIRS_WIDTH))
/*@}*/

/*!
 * @name Register SPI_RSER, field TFFF_RE[25] (RW)
 *
 * Enables the TFFF flag in the SR to generate a request. The TFFF_DIRS bit
 * selects between generating an interrupt request or a DMA request.
 *
 * Values:
 * - 0b0 - TFFF interrupts or DMA requests are disabled.
 * - 0b1 - TFFF interrupts or DMA requests are enabled.
 */
/*@{*/
/*! @brief Read current value of the SPI_RSER_TFFF_RE field. */
#define SPI_RD_RSER_TFFF_RE(base) ((SPI_RSER_REG(base) & SPI_RSER_TFFF_RE_MASK) >> SPI_RSER_TFFF_RE_SHIFT)
#define SPI_BRD_RSER_TFFF_RE(base) (BME_UBFX32(&SPI_RSER_REG(base), SPI_RSER_TFFF_RE_SHIFT, SPI_RSER_TFFF_RE_WIDTH))

/*! @brief Set the TFFF_RE field to a new value. */
#define SPI_WR_RSER_TFFF_RE(base, value) (SPI_RMW_RSER(base, SPI_RSER_TFFF_RE_MASK, SPI_RSER_TFFF_RE(value)))
#define SPI_BWR_RSER_TFFF_RE(base, value) (BME_BFI32(&SPI_RSER_REG(base), ((uint32_t)(value) << SPI_RSER_TFFF_RE_SHIFT), SPI_RSER_TFFF_RE_SHIFT, SPI_RSER_TFFF_RE_WIDTH))
/*@}*/

/*!
 * @name Register SPI_RSER, field TFUF_RE[27] (RW)
 *
 * Enables the TFUF flag in the SR to generate an interrupt request.
 *
 * Values:
 * - 0b0 - TFUF interrupt requests are disabled.
 * - 0b1 - TFUF interrupt requests are enabled.
 */
/*@{*/
/*! @brief Read current value of the SPI_RSER_TFUF_RE field. */
#define SPI_RD_RSER_TFUF_RE(base) ((SPI_RSER_REG(base) & SPI_RSER_TFUF_RE_MASK) >> SPI_RSER_TFUF_RE_SHIFT)
#define SPI_BRD_RSER_TFUF_RE(base) (BME_UBFX32(&SPI_RSER_REG(base), SPI_RSER_TFUF_RE_SHIFT, SPI_RSER_TFUF_RE_WIDTH))

/*! @brief Set the TFUF_RE field to a new value. */
#define SPI_WR_RSER_TFUF_RE(base, value) (SPI_RMW_RSER(base, SPI_RSER_TFUF_RE_MASK, SPI_RSER_TFUF_RE(value)))
#define SPI_BWR_RSER_TFUF_RE(base, value) (BME_BFI32(&SPI_RSER_REG(base), ((uint32_t)(value) << SPI_RSER_TFUF_RE_SHIFT), SPI_RSER_TFUF_RE_SHIFT, SPI_RSER_TFUF_RE_WIDTH))
/*@}*/

/*!
 * @name Register SPI_RSER, field EOQF_RE[28] (RW)
 *
 * Enables the EOQF flag in the SR to generate an interrupt request.
 *
 * Values:
 * - 0b0 - EOQF interrupt requests are disabled.
 * - 0b1 - EOQF interrupt requests are enabled.
 */
/*@{*/
/*! @brief Read current value of the SPI_RSER_EOQF_RE field. */
#define SPI_RD_RSER_EOQF_RE(base) ((SPI_RSER_REG(base) & SPI_RSER_EOQF_RE_MASK) >> SPI_RSER_EOQF_RE_SHIFT)
#define SPI_BRD_RSER_EOQF_RE(base) (BME_UBFX32(&SPI_RSER_REG(base), SPI_RSER_EOQF_RE_SHIFT, SPI_RSER_EOQF_RE_WIDTH))

/*! @brief Set the EOQF_RE field to a new value. */
#define SPI_WR_RSER_EOQF_RE(base, value) (SPI_RMW_RSER(base, SPI_RSER_EOQF_RE_MASK, SPI_RSER_EOQF_RE(value)))
#define SPI_BWR_RSER_EOQF_RE(base, value) (BME_BFI32(&SPI_RSER_REG(base), ((uint32_t)(value) << SPI_RSER_EOQF_RE_SHIFT), SPI_RSER_EOQF_RE_SHIFT, SPI_RSER_EOQF_RE_WIDTH))
/*@}*/

/*!
 * @name Register SPI_RSER, field TCF_RE[31] (RW)
 *
 * Enables TCF flag in the SR to generate an interrupt request.
 *
 * Values:
 * - 0b0 - TCF interrupt requests are disabled.
 * - 0b1 - TCF interrupt requests are enabled.
 */
/*@{*/
/*! @brief Read current value of the SPI_RSER_TCF_RE field. */
#define SPI_RD_RSER_TCF_RE(base) ((SPI_RSER_REG(base) & SPI_RSER_TCF_RE_MASK) >> SPI_RSER_TCF_RE_SHIFT)
#define SPI_BRD_RSER_TCF_RE(base) (BME_UBFX32(&SPI_RSER_REG(base), SPI_RSER_TCF_RE_SHIFT, SPI_RSER_TCF_RE_WIDTH))

/*! @brief Set the TCF_RE field to a new value. */
#define SPI_WR_RSER_TCF_RE(base, value) (SPI_RMW_RSER(base, SPI_RSER_TCF_RE_MASK, SPI_RSER_TCF_RE(value)))
#define SPI_BWR_RSER_TCF_RE(base, value) (BME_BFI32(&SPI_RSER_REG(base), ((uint32_t)(value) << SPI_RSER_TCF_RE_SHIFT), SPI_RSER_TCF_RE_SHIFT, SPI_RSER_TCF_RE_WIDTH))
/*@}*/

/*******************************************************************************
 * SPI_PUSHR - PUSH TX FIFO Register In Master Mode
 ******************************************************************************/

/*!
 * @brief SPI_PUSHR - PUSH TX FIFO Register In Master Mode (RW)
 *
 * Reset value: 0x00000000U
 *
 * Specifies data to be transferred to the TX FIFO. An 8- or 16-bit write access
 * transfers all 32 bits to the TX FIFO. In Master mode, the register transfers
 * 16 bits of data and 16 bits of command information. A read access of PUSHR
 * returns the topmost TX FIFO entry. When the module is disabled, writing to this
 * register does not update the FIFO. Therefore, any reads performed while the
 * module is disabled return the last PUSHR write performed while the module was
 * still enabled. In Slave mode, all 32 bits can be used as data, supporting up to
 * 32-bit frame operation. A read access of PUSHR returns the topmost TX FIFO
 * entry. When the module is disabled, writing to this register does not update the
 * FIFO. Therefore, any reads performed while the module is disabled return the
 * last PUSHR write performed while the module was still enabled.
 */
/*!
 * @name Constants and macros for entire SPI_PUSHR register
 */
/*@{*/
#define SPI_RD_PUSHR(base)       (SPI_PUSHR_REG(base))
#define SPI_WR_PUSHR(base, value) (SPI_PUSHR_REG(base) = (value))
#define SPI_RMW_PUSHR(base, mask, value) (SPI_WR_PUSHR(base, (SPI_RD_PUSHR(base) & ~(mask)) | (value)))
#define SPI_SET_PUSHR(base, value) (BME_OR32(&SPI_PUSHR_REG(base), (uint32_t)(value)))
#define SPI_CLR_PUSHR(base, value) (BME_AND32(&SPI_PUSHR_REG(base), (uint32_t)(~(value))))
#define SPI_TOG_PUSHR(base, value) (BME_XOR32(&SPI_PUSHR_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SPI_PUSHR bitfields
 */

/*!
 * @name Register SPI_PUSHR, field TXDATA[15:0] (RW)
 *
 * Holds SPI data to be transferred according to the associated SPI command.
 */
/*@{*/
/*! @brief Read current value of the SPI_PUSHR_TXDATA field. */
#define SPI_RD_PUSHR_TXDATA(base) ((SPI_PUSHR_REG(base) & SPI_PUSHR_TXDATA_MASK) >> SPI_PUSHR_TXDATA_SHIFT)
#define SPI_BRD_PUSHR_TXDATA(base) (SPI_RD_PUSHR_TXDATA(base))

/*! @brief Set the TXDATA field to a new value. */
#define SPI_WR_PUSHR_TXDATA(base, value) (SPI_RMW_PUSHR(base, SPI_PUSHR_TXDATA_MASK, SPI_PUSHR_TXDATA(value)))
#define SPI_BWR_PUSHR_TXDATA(base, value) (SPI_WR_PUSHR_TXDATA(base, value))
/*@}*/

/*!
 * @name Register SPI_PUSHR, field PCS[21:16] (RW)
 *
 * Select which PCS signals are to be asserted for the transfer. Refer to the
 * chip-specific SPI information for the number of PCS signals used in this MCU.
 *
 * Values:
 * - 0b000000 - Negate the PCS[x] signal.
 * - 0b000001 - Assert the PCS[x] signal.
 */
/*@{*/
/*! @brief Read current value of the SPI_PUSHR_PCS field. */
#define SPI_RD_PUSHR_PCS(base) ((SPI_PUSHR_REG(base) & SPI_PUSHR_PCS_MASK) >> SPI_PUSHR_PCS_SHIFT)
#define SPI_BRD_PUSHR_PCS(base) (BME_UBFX32(&SPI_PUSHR_REG(base), SPI_PUSHR_PCS_SHIFT, SPI_PUSHR_PCS_WIDTH))

/*! @brief Set the PCS field to a new value. */
#define SPI_WR_PUSHR_PCS(base, value) (SPI_RMW_PUSHR(base, SPI_PUSHR_PCS_MASK, SPI_PUSHR_PCS(value)))
#define SPI_BWR_PUSHR_PCS(base, value) (BME_BFI32(&SPI_PUSHR_REG(base), ((uint32_t)(value) << SPI_PUSHR_PCS_SHIFT), SPI_PUSHR_PCS_SHIFT, SPI_PUSHR_PCS_WIDTH))
/*@}*/

/*!
 * @name Register SPI_PUSHR, field CTCNT[26] (RW)
 *
 * Clears the TCNT field in the TCR register. The TCNT field is cleared before
 * the module starts transmitting the current SPI frame.
 *
 * Values:
 * - 0b0 - Do not clear the TCR[TCNT] field.
 * - 0b1 - Clear the TCR[TCNT] field.
 */
/*@{*/
/*! @brief Read current value of the SPI_PUSHR_CTCNT field. */
#define SPI_RD_PUSHR_CTCNT(base) ((SPI_PUSHR_REG(base) & SPI_PUSHR_CTCNT_MASK) >> SPI_PUSHR_CTCNT_SHIFT)
#define SPI_BRD_PUSHR_CTCNT(base) (BME_UBFX32(&SPI_PUSHR_REG(base), SPI_PUSHR_CTCNT_SHIFT, SPI_PUSHR_CTCNT_WIDTH))

/*! @brief Set the CTCNT field to a new value. */
#define SPI_WR_PUSHR_CTCNT(base, value) (SPI_RMW_PUSHR(base, SPI_PUSHR_CTCNT_MASK, SPI_PUSHR_CTCNT(value)))
#define SPI_BWR_PUSHR_CTCNT(base, value) (BME_BFI32(&SPI_PUSHR_REG(base), ((uint32_t)(value) << SPI_PUSHR_CTCNT_SHIFT), SPI_PUSHR_CTCNT_SHIFT, SPI_PUSHR_CTCNT_WIDTH))
/*@}*/

/*!
 * @name Register SPI_PUSHR, field EOQ[27] (RW)
 *
 * Host software uses this bit to signal to the module that the current SPI
 * transfer is the last in a queue. At the end of the transfer, the EOQF bit in the
 * SR is set.
 *
 * Values:
 * - 0b0 - The SPI data is not the last data to transfer.
 * - 0b1 - The SPI data is the last data to transfer.
 */
/*@{*/
/*! @brief Read current value of the SPI_PUSHR_EOQ field. */
#define SPI_RD_PUSHR_EOQ(base) ((SPI_PUSHR_REG(base) & SPI_PUSHR_EOQ_MASK) >> SPI_PUSHR_EOQ_SHIFT)
#define SPI_BRD_PUSHR_EOQ(base) (BME_UBFX32(&SPI_PUSHR_REG(base), SPI_PUSHR_EOQ_SHIFT, SPI_PUSHR_EOQ_WIDTH))

/*! @brief Set the EOQ field to a new value. */
#define SPI_WR_PUSHR_EOQ(base, value) (SPI_RMW_PUSHR(base, SPI_PUSHR_EOQ_MASK, SPI_PUSHR_EOQ(value)))
#define SPI_BWR_PUSHR_EOQ(base, value) (BME_BFI32(&SPI_PUSHR_REG(base), ((uint32_t)(value) << SPI_PUSHR_EOQ_SHIFT), SPI_PUSHR_EOQ_SHIFT, SPI_PUSHR_EOQ_WIDTH))
/*@}*/

/*!
 * @name Register SPI_PUSHR, field CTAS[30:28] (RW)
 *
 * Selects which CTAR to use in master mode to specify the transfer attributes
 * for the associated SPI frame. In SPI Slave mode, CTAR0 is used. See the chip
 * configuration details to determine how many CTARs this device has. You should
 * not program a value in this field for a register that is not present.
 *
 * Values:
 * - 0b000 - CTAR0
 * - 0b001 - CTAR1
 * - 0b010 - Reserved
 * - 0b011 - Reserved
 * - 0b100 - Reserved
 * - 0b101 - Reserved
 * - 0b110 - Reserved
 * - 0b111 - Reserved
 */
/*@{*/
/*! @brief Read current value of the SPI_PUSHR_CTAS field. */
#define SPI_RD_PUSHR_CTAS(base) ((SPI_PUSHR_REG(base) & SPI_PUSHR_CTAS_MASK) >> SPI_PUSHR_CTAS_SHIFT)
#define SPI_BRD_PUSHR_CTAS(base) (BME_UBFX32(&SPI_PUSHR_REG(base), SPI_PUSHR_CTAS_SHIFT, SPI_PUSHR_CTAS_WIDTH))

/*! @brief Set the CTAS field to a new value. */
#define SPI_WR_PUSHR_CTAS(base, value) (SPI_RMW_PUSHR(base, SPI_PUSHR_CTAS_MASK, SPI_PUSHR_CTAS(value)))
#define SPI_BWR_PUSHR_CTAS(base, value) (BME_BFI32(&SPI_PUSHR_REG(base), ((uint32_t)(value) << SPI_PUSHR_CTAS_SHIFT), SPI_PUSHR_CTAS_SHIFT, SPI_PUSHR_CTAS_WIDTH))
/*@}*/

/*!
 * @name Register SPI_PUSHR, field CONT[31] (RW)
 *
 * Selects a continuous selection format. The bit is used in SPI Master mode.
 * The bit enables the selected PCS signals to remain asserted between transfers.
 *
 * Values:
 * - 0b0 - Return PCSn signals to their inactive state between transfers.
 * - 0b1 - Keep PCSn signals asserted between transfers.
 */
/*@{*/
/*! @brief Read current value of the SPI_PUSHR_CONT field. */
#define SPI_RD_PUSHR_CONT(base) ((SPI_PUSHR_REG(base) & SPI_PUSHR_CONT_MASK) >> SPI_PUSHR_CONT_SHIFT)
#define SPI_BRD_PUSHR_CONT(base) (BME_UBFX32(&SPI_PUSHR_REG(base), SPI_PUSHR_CONT_SHIFT, SPI_PUSHR_CONT_WIDTH))

/*! @brief Set the CONT field to a new value. */
#define SPI_WR_PUSHR_CONT(base, value) (SPI_RMW_PUSHR(base, SPI_PUSHR_CONT_MASK, SPI_PUSHR_CONT(value)))
#define SPI_BWR_PUSHR_CONT(base, value) (BME_BFI32(&SPI_PUSHR_REG(base), ((uint32_t)(value) << SPI_PUSHR_CONT_SHIFT), SPI_PUSHR_CONT_SHIFT, SPI_PUSHR_CONT_WIDTH))
/*@}*/

/*******************************************************************************
 * SPI_PUSHR_SLAVE - PUSH TX FIFO Register In Slave Mode
 ******************************************************************************/

/*!
 * @brief SPI_PUSHR_SLAVE - PUSH TX FIFO Register In Slave Mode (RW)
 *
 * Reset value: 0x00000000U
 *
 * Specifies data to be transferred to the TX FIFO in slave mode. The upper
 * 16-bits of the register transfer data to TX FIFO and the lower 16-bits are
 * reserved. In master mode, the register transfers 16 bits of data and 16 bits of
 * command information to the TX FIFO. In slave mode, all 32 register bits can be used
 * as data, supporting up to 32-bit SPI Frame operation.
 */
/*!
 * @name Constants and macros for entire SPI_PUSHR_SLAVE register
 */
/*@{*/
#define SPI_RD_PUSHR_SLAVE(base) (SPI_PUSHR_SLAVE_REG(base))
#define SPI_WR_PUSHR_SLAVE(base, value) (SPI_PUSHR_SLAVE_REG(base) = (value))
#define SPI_RMW_PUSHR_SLAVE(base, mask, value) (SPI_WR_PUSHR_SLAVE(base, (SPI_RD_PUSHR_SLAVE(base) & ~(mask)) | (value)))
#define SPI_SET_PUSHR_SLAVE(base, value) (BME_OR32(&SPI_PUSHR_SLAVE_REG(base), (uint32_t)(value)))
#define SPI_CLR_PUSHR_SLAVE(base, value) (BME_AND32(&SPI_PUSHR_SLAVE_REG(base), (uint32_t)(~(value))))
#define SPI_TOG_PUSHR_SLAVE(base, value) (BME_XOR32(&SPI_PUSHR_SLAVE_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual SPI_PUSHR_SLAVE bitfields
 */

/*!
 * @name Register SPI_PUSHR_SLAVE, field TXDATA[15:0] (RW)
 *
 * Holds SPI data to be transferred according to the associated SPI command.
 */
/*@{*/
/*! @brief Read current value of the SPI_PUSHR_SLAVE_TXDATA field. */
#define SPI_RD_PUSHR_SLAVE_TXDATA(base) ((SPI_PUSHR_SLAVE_REG(base) & SPI_PUSHR_SLAVE_TXDATA_MASK) >> SPI_PUSHR_SLAVE_TXDATA_SHIFT)
#define SPI_BRD_PUSHR_SLAVE_TXDATA(base) (SPI_RD_PUSHR_SLAVE_TXDATA(base))

/*! @brief Set the TXDATA field to a new value. */
#define SPI_WR_PUSHR_SLAVE_TXDATA(base, value) (SPI_RMW_PUSHR_SLAVE(base, SPI_PUSHR_SLAVE_TXDATA_MASK, SPI_PUSHR_SLAVE_TXDATA(value)))
#define SPI_BWR_PUSHR_SLAVE_TXDATA(base, value) (SPI_WR_PUSHR_SLAVE_TXDATA(base, value))
/*@}*/

/*******************************************************************************
 * SPI_POPR - POP RX FIFO Register
 ******************************************************************************/

/*!
 * @brief SPI_POPR - POP RX FIFO Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * POPR is used to read the RX FIFO. Eight- or sixteen-bit read accesses to the
 * POPR have the same effect on the RX FIFO as 32-bit read accesses. A write to
 * this register will generate a Transfer Error.
 */
/*!
 * @name Constants and macros for entire SPI_POPR register
 */
/*@{*/
#define SPI_RD_POPR(base)        (SPI_POPR_REG(base))
/*@}*/

/*******************************************************************************
 * SPI_TXFR0 - Transmit FIFO Registers
 ******************************************************************************/

/*!
 * @brief SPI_TXFR0 - Transmit FIFO Registers (RO)
 *
 * Reset value: 0x00000000U
 *
 * TXFRn registers provide visibility into the TX FIFO for debugging purposes.
 * Each register is an entry in the TX FIFO. The registers are read-only and
 * cannot be modified. Reading the TXFRx registers does not alter the state of the TX
 * FIFO.
 */
/*!
 * @name Constants and macros for entire SPI_TXFR0 register
 */
/*@{*/
#define SPI_RD_TXFR0(base)       (SPI_TXFR0_REG(base))
/*@}*/

/*
 * Constants & macros for individual SPI_TXFR0 bitfields
 */

/*!
 * @name Register SPI_TXFR0, field TXDATA[15:0] (RO)
 *
 * Contains the SPI data to be shifted out.
 */
/*@{*/
/*! @brief Read current value of the SPI_TXFR0_TXDATA field. */
#define SPI_RD_TXFR0_TXDATA(base) ((SPI_TXFR0_REG(base) & SPI_TXFR0_TXDATA_MASK) >> SPI_TXFR0_TXDATA_SHIFT)
#define SPI_BRD_TXFR0_TXDATA(base) (SPI_RD_TXFR0_TXDATA(base))
/*@}*/

/*!
 * @name Register SPI_TXFR0, field TXCMD_TXDATA[31:16] (RO)
 *
 * In Master mode the TXCMD field contains the command that sets the transfer
 * attributes for the SPI data. In Slave mode, the TXDATA contains 16 MSB bits of
 * the SPI data to be shifted out.
 */
/*@{*/
/*! @brief Read current value of the SPI_TXFR0_TXCMD_TXDATA field. */
#define SPI_RD_TXFR0_TXCMD_TXDATA(base) ((SPI_TXFR0_REG(base) & SPI_TXFR0_TXCMD_TXDATA_MASK) >> SPI_TXFR0_TXCMD_TXDATA_SHIFT)
#define SPI_BRD_TXFR0_TXCMD_TXDATA(base) (SPI_RD_TXFR0_TXCMD_TXDATA(base))
/*@}*/

/*******************************************************************************
 * SPI_TXFR1 - Transmit FIFO Registers
 ******************************************************************************/

/*!
 * @brief SPI_TXFR1 - Transmit FIFO Registers (RO)
 *
 * Reset value: 0x00000000U
 *
 * TXFRn registers provide visibility into the TX FIFO for debugging purposes.
 * Each register is an entry in the TX FIFO. The registers are read-only and
 * cannot be modified. Reading the TXFRx registers does not alter the state of the TX
 * FIFO.
 */
/*!
 * @name Constants and macros for entire SPI_TXFR1 register
 */
/*@{*/
#define SPI_RD_TXFR1(base)       (SPI_TXFR1_REG(base))
/*@}*/

/*
 * Constants & macros for individual SPI_TXFR1 bitfields
 */

/*!
 * @name Register SPI_TXFR1, field TXDATA[15:0] (RO)
 *
 * Contains the SPI data to be shifted out.
 */
/*@{*/
/*! @brief Read current value of the SPI_TXFR1_TXDATA field. */
#define SPI_RD_TXFR1_TXDATA(base) ((SPI_TXFR1_REG(base) & SPI_TXFR1_TXDATA_MASK) >> SPI_TXFR1_TXDATA_SHIFT)
#define SPI_BRD_TXFR1_TXDATA(base) (SPI_RD_TXFR1_TXDATA(base))
/*@}*/

/*!
 * @name Register SPI_TXFR1, field TXCMD_TXDATA[31:16] (RO)
 *
 * In Master mode the TXCMD field contains the command that sets the transfer
 * attributes for the SPI data. In Slave mode, the TXDATA contains 16 MSB bits of
 * the SPI data to be shifted out.
 */
/*@{*/
/*! @brief Read current value of the SPI_TXFR1_TXCMD_TXDATA field. */
#define SPI_RD_TXFR1_TXCMD_TXDATA(base) ((SPI_TXFR1_REG(base) & SPI_TXFR1_TXCMD_TXDATA_MASK) >> SPI_TXFR1_TXCMD_TXDATA_SHIFT)
#define SPI_BRD_TXFR1_TXCMD_TXDATA(base) (SPI_RD_TXFR1_TXCMD_TXDATA(base))
/*@}*/

/*******************************************************************************
 * SPI_TXFR2 - Transmit FIFO Registers
 ******************************************************************************/

/*!
 * @brief SPI_TXFR2 - Transmit FIFO Registers (RO)
 *
 * Reset value: 0x00000000U
 *
 * TXFRn registers provide visibility into the TX FIFO for debugging purposes.
 * Each register is an entry in the TX FIFO. The registers are read-only and
 * cannot be modified. Reading the TXFRx registers does not alter the state of the TX
 * FIFO.
 */
/*!
 * @name Constants and macros for entire SPI_TXFR2 register
 */
/*@{*/
#define SPI_RD_TXFR2(base)       (SPI_TXFR2_REG(base))
/*@}*/

/*
 * Constants & macros for individual SPI_TXFR2 bitfields
 */

/*!
 * @name Register SPI_TXFR2, field TXDATA[15:0] (RO)
 *
 * Contains the SPI data to be shifted out.
 */
/*@{*/
/*! @brief Read current value of the SPI_TXFR2_TXDATA field. */
#define SPI_RD_TXFR2_TXDATA(base) ((SPI_TXFR2_REG(base) & SPI_TXFR2_TXDATA_MASK) >> SPI_TXFR2_TXDATA_SHIFT)
#define SPI_BRD_TXFR2_TXDATA(base) (SPI_RD_TXFR2_TXDATA(base))
/*@}*/

/*!
 * @name Register SPI_TXFR2, field TXCMD_TXDATA[31:16] (RO)
 *
 * In Master mode the TXCMD field contains the command that sets the transfer
 * attributes for the SPI data. In Slave mode, the TXDATA contains 16 MSB bits of
 * the SPI data to be shifted out.
 */
/*@{*/
/*! @brief Read current value of the SPI_TXFR2_TXCMD_TXDATA field. */
#define SPI_RD_TXFR2_TXCMD_TXDATA(base) ((SPI_TXFR2_REG(base) & SPI_TXFR2_TXCMD_TXDATA_MASK) >> SPI_TXFR2_TXCMD_TXDATA_SHIFT)
#define SPI_BRD_TXFR2_TXCMD_TXDATA(base) (SPI_RD_TXFR2_TXCMD_TXDATA(base))
/*@}*/

/*******************************************************************************
 * SPI_TXFR3 - Transmit FIFO Registers
 ******************************************************************************/

/*!
 * @brief SPI_TXFR3 - Transmit FIFO Registers (RO)
 *
 * Reset value: 0x00000000U
 *
 * TXFRn registers provide visibility into the TX FIFO for debugging purposes.
 * Each register is an entry in the TX FIFO. The registers are read-only and
 * cannot be modified. Reading the TXFRx registers does not alter the state of the TX
 * FIFO.
 */
/*!
 * @name Constants and macros for entire SPI_TXFR3 register
 */
/*@{*/
#define SPI_RD_TXFR3(base)       (SPI_TXFR3_REG(base))
/*@}*/

/*
 * Constants & macros for individual SPI_TXFR3 bitfields
 */

/*!
 * @name Register SPI_TXFR3, field TXDATA[15:0] (RO)
 *
 * Contains the SPI data to be shifted out.
 */
/*@{*/
/*! @brief Read current value of the SPI_TXFR3_TXDATA field. */
#define SPI_RD_TXFR3_TXDATA(base) ((SPI_TXFR3_REG(base) & SPI_TXFR3_TXDATA_MASK) >> SPI_TXFR3_TXDATA_SHIFT)
#define SPI_BRD_TXFR3_TXDATA(base) (SPI_RD_TXFR3_TXDATA(base))
/*@}*/

/*!
 * @name Register SPI_TXFR3, field TXCMD_TXDATA[31:16] (RO)
 *
 * In Master mode the TXCMD field contains the command that sets the transfer
 * attributes for the SPI data. In Slave mode, the TXDATA contains 16 MSB bits of
 * the SPI data to be shifted out.
 */
/*@{*/
/*! @brief Read current value of the SPI_TXFR3_TXCMD_TXDATA field. */
#define SPI_RD_TXFR3_TXCMD_TXDATA(base) ((SPI_TXFR3_REG(base) & SPI_TXFR3_TXCMD_TXDATA_MASK) >> SPI_TXFR3_TXCMD_TXDATA_SHIFT)
#define SPI_BRD_TXFR3_TXCMD_TXDATA(base) (SPI_RD_TXFR3_TXCMD_TXDATA(base))
/*@}*/

/*******************************************************************************
 * SPI_RXFR0 - Receive FIFO Registers
 ******************************************************************************/

/*!
 * @brief SPI_RXFR0 - Receive FIFO Registers (RO)
 *
 * Reset value: 0x00000000U
 *
 * RXFRn provide visibility into the RX FIFO for debugging purposes. Each
 * register is an entry in the RX FIFO. The RXFR registers are read-only. Reading the
 * RXFRx registers does not alter the state of the RX FIFO.
 */
/*!
 * @name Constants and macros for entire SPI_RXFR0 register
 */
/*@{*/
#define SPI_RD_RXFR0(base)       (SPI_RXFR0_REG(base))
/*@}*/

/*******************************************************************************
 * SPI_RXFR1 - Receive FIFO Registers
 ******************************************************************************/

/*!
 * @brief SPI_RXFR1 - Receive FIFO Registers (RO)
 *
 * Reset value: 0x00000000U
 *
 * RXFRn provide visibility into the RX FIFO for debugging purposes. Each
 * register is an entry in the RX FIFO. The RXFR registers are read-only. Reading the
 * RXFRx registers does not alter the state of the RX FIFO.
 */
/*!
 * @name Constants and macros for entire SPI_RXFR1 register
 */
/*@{*/
#define SPI_RD_RXFR1(base)       (SPI_RXFR1_REG(base))
/*@}*/

/*******************************************************************************
 * SPI_RXFR2 - Receive FIFO Registers
 ******************************************************************************/

/*!
 * @brief SPI_RXFR2 - Receive FIFO Registers (RO)
 *
 * Reset value: 0x00000000U
 *
 * RXFRn provide visibility into the RX FIFO for debugging purposes. Each
 * register is an entry in the RX FIFO. The RXFR registers are read-only. Reading the
 * RXFRx registers does not alter the state of the RX FIFO.
 */
/*!
 * @name Constants and macros for entire SPI_RXFR2 register
 */
/*@{*/
#define SPI_RD_RXFR2(base)       (SPI_RXFR2_REG(base))
/*@}*/

/*******************************************************************************
 * SPI_RXFR3 - Receive FIFO Registers
 ******************************************************************************/

/*!
 * @brief SPI_RXFR3 - Receive FIFO Registers (RO)
 *
 * Reset value: 0x00000000U
 *
 * RXFRn provide visibility into the RX FIFO for debugging purposes. Each
 * register is an entry in the RX FIFO. The RXFR registers are read-only. Reading the
 * RXFRx registers does not alter the state of the RX FIFO.
 */
/*!
 * @name Constants and macros for entire SPI_RXFR3 register
 */
/*@{*/
#define SPI_RD_RXFR3(base)       (SPI_RXFR3_REG(base))
/*@}*/

/*
 * MK82F25615 TPM
 *
 * Timer/PWM Module
 *
 * Registers defined in this header file:
 * - TPM_SC - Status and Control
 * - TPM_CNT - Counter
 * - TPM_MOD - Modulo
 * - TPM_CnSC - Channel (n) Status and Control
 * - TPM_CnV - Channel (n) Value
 * - TPM_STATUS - Capture and Compare Status
 * - TPM_COMBINE - Combine Channel Register
 * - TPM_POL - Channel Polarity
 * - TPM_FILTER - Filter Control
 * - TPM_QDCTRL - Quadrature Decoder Control and Status
 * - TPM_CONF - Configuration
 */

#define TPM_INSTANCE_COUNT (2U) /*!< Number of instances of the TPM module. */
#define TPM1_IDX (0U) /*!< Instance number for TPM1. */
#define TPM2_IDX (1U) /*!< Instance number for TPM2. */

/*******************************************************************************
 * TPM_SC - Status and Control
 ******************************************************************************/

/*!
 * @brief TPM_SC - Status and Control (RW)
 *
 * Reset value: 0x00000000U
 *
 * SC contains the overflow status flag and control bits used to configure the
 * interrupt enable, module configuration and prescaler factor. These controls
 * relate to all channels within this module.
 */
/*!
 * @name Constants and macros for entire TPM_SC register
 */
/*@{*/
#define TPM_RD_SC(base)          (TPM_SC_REG(base))
#define TPM_WR_SC(base, value)   (TPM_SC_REG(base) = (value))
#define TPM_RMW_SC(base, mask, value) (TPM_WR_SC(base, (TPM_RD_SC(base) & ~(mask)) | (value)))
#define TPM_SET_SC(base, value)  (BME_OR32(&TPM_SC_REG(base), (uint32_t)(value)))
#define TPM_CLR_SC(base, value)  (BME_AND32(&TPM_SC_REG(base), (uint32_t)(~(value))))
#define TPM_TOG_SC(base, value)  (BME_XOR32(&TPM_SC_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TPM_SC bitfields
 */

/*!
 * @name Register TPM_SC, field PS[2:0] (RW)
 *
 * Selects one of 8 division factors for the clock mode selected by CMOD. This
 * field is write protected. It can be written only when the counter is disabled.
 *
 * Values:
 * - 0b000 - Divide by 1
 * - 0b001 - Divide by 2
 * - 0b010 - Divide by 4
 * - 0b011 - Divide by 8
 * - 0b100 - Divide by 16
 * - 0b101 - Divide by 32
 * - 0b110 - Divide by 64
 * - 0b111 - Divide by 128
 */
/*@{*/
/*! @brief Read current value of the TPM_SC_PS field. */
#define TPM_RD_SC_PS(base)   ((TPM_SC_REG(base) & TPM_SC_PS_MASK) >> TPM_SC_PS_SHIFT)
#define TPM_BRD_SC_PS(base)  (BME_UBFX32(&TPM_SC_REG(base), TPM_SC_PS_SHIFT, TPM_SC_PS_WIDTH))

/*! @brief Set the PS field to a new value. */
#define TPM_WR_SC_PS(base, value) (TPM_RMW_SC(base, (TPM_SC_PS_MASK | TPM_SC_TOF_MASK), TPM_SC_PS(value)))
#define TPM_BWR_SC_PS(base, value) (BME_BFI32(&TPM_SC_REG(base), ((uint32_t)(value) << TPM_SC_PS_SHIFT), TPM_SC_PS_SHIFT, TPM_SC_PS_WIDTH))
/*@}*/

/*!
 * @name Register TPM_SC, field CMOD[4:3] (RW)
 *
 * Selects the TPM counter clock modes. When disabling the counter, this field
 * remain set until acknolwedged in the TPM clock domain.
 *
 * Values:
 * - 0b00 - TPM counter is disabled
 * - 0b01 - TPM counter increments on every TPM counter clock
 * - 0b10 - TPM counter increments on rising edge of TPM_EXTCLK synchronized to
 *     the TPM counter clock
 * - 0b11 - Reserved.
 */
/*@{*/
/*! @brief Read current value of the TPM_SC_CMOD field. */
#define TPM_RD_SC_CMOD(base) ((TPM_SC_REG(base) & TPM_SC_CMOD_MASK) >> TPM_SC_CMOD_SHIFT)
#define TPM_BRD_SC_CMOD(base) (BME_UBFX32(&TPM_SC_REG(base), TPM_SC_CMOD_SHIFT, TPM_SC_CMOD_WIDTH))

/*! @brief Set the CMOD field to a new value. */
#define TPM_WR_SC_CMOD(base, value) (TPM_RMW_SC(base, (TPM_SC_CMOD_MASK | TPM_SC_TOF_MASK), TPM_SC_CMOD(value)))
#define TPM_BWR_SC_CMOD(base, value) (BME_BFI32(&TPM_SC_REG(base), ((uint32_t)(value) << TPM_SC_CMOD_SHIFT), TPM_SC_CMOD_SHIFT, TPM_SC_CMOD_WIDTH))
/*@}*/

/*!
 * @name Register TPM_SC, field CPWMS[5] (RW)
 *
 * Selects CPWM mode. This mode configures the TPM to operate in up-down
 * counting mode. This field is write protected. It can be written only when the counter
 * is disabled.
 *
 * Values:
 * - 0b0 - TPM counter operates in up counting mode.
 * - 0b1 - TPM counter operates in up-down counting mode.
 */
/*@{*/
/*! @brief Read current value of the TPM_SC_CPWMS field. */
#define TPM_RD_SC_CPWMS(base) ((TPM_SC_REG(base) & TPM_SC_CPWMS_MASK) >> TPM_SC_CPWMS_SHIFT)
#define TPM_BRD_SC_CPWMS(base) (BME_UBFX32(&TPM_SC_REG(base), TPM_SC_CPWMS_SHIFT, TPM_SC_CPWMS_WIDTH))

/*! @brief Set the CPWMS field to a new value. */
#define TPM_WR_SC_CPWMS(base, value) (TPM_RMW_SC(base, (TPM_SC_CPWMS_MASK | TPM_SC_TOF_MASK), TPM_SC_CPWMS(value)))
#define TPM_BWR_SC_CPWMS(base, value) (BME_BFI32(&TPM_SC_REG(base), ((uint32_t)(value) << TPM_SC_CPWMS_SHIFT), TPM_SC_CPWMS_SHIFT, TPM_SC_CPWMS_WIDTH))
/*@}*/

/*!
 * @name Register TPM_SC, field TOIE[6] (RW)
 *
 * Enables TPM overflow interrupts.
 *
 * Values:
 * - 0b0 - Disable TOF interrupts. Use software polling or DMA request.
 * - 0b1 - Enable TOF interrupts. An interrupt is generated when TOF equals one.
 */
/*@{*/
/*! @brief Read current value of the TPM_SC_TOIE field. */
#define TPM_RD_SC_TOIE(base) ((TPM_SC_REG(base) & TPM_SC_TOIE_MASK) >> TPM_SC_TOIE_SHIFT)
#define TPM_BRD_SC_TOIE(base) (BME_UBFX32(&TPM_SC_REG(base), TPM_SC_TOIE_SHIFT, TPM_SC_TOIE_WIDTH))

/*! @brief Set the TOIE field to a new value. */
#define TPM_WR_SC_TOIE(base, value) (TPM_RMW_SC(base, (TPM_SC_TOIE_MASK | TPM_SC_TOF_MASK), TPM_SC_TOIE(value)))
#define TPM_BWR_SC_TOIE(base, value) (BME_BFI32(&TPM_SC_REG(base), ((uint32_t)(value) << TPM_SC_TOIE_SHIFT), TPM_SC_TOIE_SHIFT, TPM_SC_TOIE_WIDTH))
/*@}*/

/*!
 * @name Register TPM_SC, field TOF[7] (W1C)
 *
 * Set by hardware when the TPM counter equals the value in the MOD register and
 * increments. Writing a 1 to TOF clears it. Writing a 0 to TOF has no effect.
 * If another TPM overflow occurs between the flag setting and the flag clearing,
 * the write operation has no effect; therefore, TOF remains set indicating
 * another overflow has occurred. In this case a TOF interrupt request is not lost due
 * to a delay in clearing the previous TOF.
 *
 * Values:
 * - 0b0 - TPM counter has not overflowed.
 * - 0b1 - TPM counter has overflowed.
 */
/*@{*/
/*! @brief Read current value of the TPM_SC_TOF field. */
#define TPM_RD_SC_TOF(base)  ((TPM_SC_REG(base) & TPM_SC_TOF_MASK) >> TPM_SC_TOF_SHIFT)
#define TPM_BRD_SC_TOF(base) (BME_UBFX32(&TPM_SC_REG(base), TPM_SC_TOF_SHIFT, TPM_SC_TOF_WIDTH))

/*! @brief Set the TOF field to a new value. */
#define TPM_WR_SC_TOF(base, value) (TPM_RMW_SC(base, TPM_SC_TOF_MASK, TPM_SC_TOF(value)))
#define TPM_BWR_SC_TOF(base, value) (BME_BFI32(&TPM_SC_REG(base), ((uint32_t)(value) << TPM_SC_TOF_SHIFT), TPM_SC_TOF_SHIFT, TPM_SC_TOF_WIDTH))
/*@}*/

/*!
 * @name Register TPM_SC, field DMA[8] (RW)
 *
 * Enables DMA transfers for the overflow flag.
 *
 * Values:
 * - 0b0 - Disables DMA transfers.
 * - 0b1 - Enables DMA transfers.
 */
/*@{*/
/*! @brief Read current value of the TPM_SC_DMA field. */
#define TPM_RD_SC_DMA(base)  ((TPM_SC_REG(base) & TPM_SC_DMA_MASK) >> TPM_SC_DMA_SHIFT)
#define TPM_BRD_SC_DMA(base) (BME_UBFX32(&TPM_SC_REG(base), TPM_SC_DMA_SHIFT, TPM_SC_DMA_WIDTH))

/*! @brief Set the DMA field to a new value. */
#define TPM_WR_SC_DMA(base, value) (TPM_RMW_SC(base, (TPM_SC_DMA_MASK | TPM_SC_TOF_MASK), TPM_SC_DMA(value)))
#define TPM_BWR_SC_DMA(base, value) (BME_BFI32(&TPM_SC_REG(base), ((uint32_t)(value) << TPM_SC_DMA_SHIFT), TPM_SC_DMA_SHIFT, TPM_SC_DMA_WIDTH))
/*@}*/

/*******************************************************************************
 * TPM_CNT - Counter
 ******************************************************************************/

/*!
 * @brief TPM_CNT - Counter (RW)
 *
 * Reset value: 0x00000000U
 *
 * The CNT register contains the TPM counter value. Reset clears the CNT
 * register. Writing any value to COUNT also clears the counter. When debug is active,
 * the TPM counter does not increment unless configured otherwise. Reading the CNT
 * register adds two wait states to the register access due to synchronization
 * delays.
 */
/*!
 * @name Constants and macros for entire TPM_CNT register
 */
/*@{*/
#define TPM_RD_CNT(base)         (TPM_CNT_REG(base))
#define TPM_WR_CNT(base, value)  (TPM_CNT_REG(base) = (value))
#define TPM_RMW_CNT(base, mask, value) (TPM_WR_CNT(base, (TPM_RD_CNT(base) & ~(mask)) | (value)))
#define TPM_SET_CNT(base, value) (BME_OR32(&TPM_CNT_REG(base), (uint32_t)(value)))
#define TPM_CLR_CNT(base, value) (BME_AND32(&TPM_CNT_REG(base), (uint32_t)(~(value))))
#define TPM_TOG_CNT(base, value) (BME_XOR32(&TPM_CNT_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TPM_CNT bitfields
 */

/*!
 * @name Register TPM_CNT, field COUNT[15:0] (RW)
 */
/*@{*/
/*! @brief Read current value of the TPM_CNT_COUNT field. */
#define TPM_RD_CNT_COUNT(base) ((TPM_CNT_REG(base) & TPM_CNT_COUNT_MASK) >> TPM_CNT_COUNT_SHIFT)
#define TPM_BRD_CNT_COUNT(base) (TPM_RD_CNT_COUNT(base))

/*! @brief Set the COUNT field to a new value. */
#define TPM_WR_CNT_COUNT(base, value) (TPM_RMW_CNT(base, TPM_CNT_COUNT_MASK, TPM_CNT_COUNT(value)))
#define TPM_BWR_CNT_COUNT(base, value) (TPM_WR_CNT_COUNT(base, value))
/*@}*/

/*******************************************************************************
 * TPM_MOD - Modulo
 ******************************************************************************/

/*!
 * @brief TPM_MOD - Modulo (RW)
 *
 * Reset value: 0x0000FFFFU
 *
 * The Modulo register contains the modulo value for the TPM counter. When the
 * TPM counter reaches the modulo value and increments, the overflow flag (TOF) is
 * set and the next value of TPM counter depends on the selected counting method
 * (see CounterThe TPM has a 16-bit counter that is used by the channels either
 * for input or output modes. ). Writing to the MOD register latches the value
 * into a buffer. The MOD register is updated with the value of its write buffer
 * according to MOD Register Update . Additional writes to the MOD write buffer are
 * ignored until the register has been updated. It is recommended to initialize
 * the TPM counter (write to CNT) before writing to the MOD register to avoid
 * confusion about when the first counter overflow will occur.
 */
/*!
 * @name Constants and macros for entire TPM_MOD register
 */
/*@{*/
#define TPM_RD_MOD(base)         (TPM_MOD_REG(base))
#define TPM_WR_MOD(base, value)  (TPM_MOD_REG(base) = (value))
#define TPM_RMW_MOD(base, mask, value) (TPM_WR_MOD(base, (TPM_RD_MOD(base) & ~(mask)) | (value)))
#define TPM_SET_MOD(base, value) (BME_OR32(&TPM_MOD_REG(base), (uint32_t)(value)))
#define TPM_CLR_MOD(base, value) (BME_AND32(&TPM_MOD_REG(base), (uint32_t)(~(value))))
#define TPM_TOG_MOD(base, value) (BME_XOR32(&TPM_MOD_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TPM_MOD bitfields
 */

/*!
 * @name Register TPM_MOD, field MOD[15:0] (RW)
 *
 * This field must be written with single 16-bit or 32-bit access.
 */
/*@{*/
/*! @brief Read current value of the TPM_MOD_MOD field. */
#define TPM_RD_MOD_MOD(base) ((TPM_MOD_REG(base) & TPM_MOD_MOD_MASK) >> TPM_MOD_MOD_SHIFT)
#define TPM_BRD_MOD_MOD(base) (TPM_RD_MOD_MOD(base))

/*! @brief Set the MOD field to a new value. */
#define TPM_WR_MOD_MOD(base, value) (TPM_RMW_MOD(base, TPM_MOD_MOD_MASK, TPM_MOD_MOD(value)))
#define TPM_BWR_MOD_MOD(base, value) (TPM_WR_MOD_MOD(base, value))
/*@}*/

/*******************************************************************************
 * TPM_CnSC - Channel (n) Status and Control
 ******************************************************************************/

/*!
 * @brief TPM_CnSC - Channel (n) Status and Control (RW)
 *
 * Reset value: 0x00000000U
 *
 * CnSC contains the channel-interrupt-status flag and control bits used to
 * configure the interrupt enable, channel configuration, and pin function. When
 * switching from one channel mode to a different channel mode, the channel must
 * first be disabled and this must be acknowledged in the TPM counter clock domain.
 * Mode, Edge, and Level Selection CPWMS MSnB:MSnA ELSnB:ELSnA Mode Configuration
 * X 00 00 None Channel disabled X 01 00 Software compare Pin not used for TPM 0
 * 00 01 Input capture Capture on Rising Edge Only 10 Capture on Falling Edge
 * Only 11 Capture on Rising or Falling Edge 01 01 Output compare Toggle Output on
 * match 10 Clear Output on match 11 Set Output on match 10 10 Edge-aligned PWM
 * High-true pulses (clear Output on match, set Output on reload) X1 Low-true
 * pulses (set Output on match, clear Output on reload) 11 10 Output compare Pulse
 * Output low on match 01 Pulse Output high on match 1 10 10 Center-aligned PWM
 * High-true pulses (clear Output on match-up, set Output on match-down) 01 Low-true
 * pulses (set Output on match-up, clear Output on match-down)
 */
/*!
 * @name Constants and macros for entire TPM_CnSC register
 */
/*@{*/
#define TPM_RD_CnSC(base, index) (TPM_CnSC_REG(base, index))
#define TPM_WR_CnSC(base, index, value) (TPM_CnSC_REG(base, index) = (value))
#define TPM_RMW_CnSC(base, index, mask, value) (TPM_WR_CnSC(base, index, (TPM_RD_CnSC(base, index) & ~(mask)) | (value)))
#define TPM_SET_CnSC(base, index, value) (BME_OR32(&TPM_CnSC_REG(base, index), (uint32_t)(value)))
#define TPM_CLR_CnSC(base, index, value) (BME_AND32(&TPM_CnSC_REG(base, index), (uint32_t)(~(value))))
#define TPM_TOG_CnSC(base, index, value) (BME_XOR32(&TPM_CnSC_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TPM_CnSC bitfields
 */

/*!
 * @name Register TPM_CnSC, field DMA[0] (RW)
 *
 * Enables DMA transfers for the channel.
 *
 * Values:
 * - 0b0 - Disable DMA transfers.
 * - 0b1 - Enable DMA transfers.
 */
/*@{*/
/*! @brief Read current value of the TPM_CnSC_DMA field. */
#define TPM_RD_CnSC_DMA(base, index) ((TPM_CnSC_REG(base, index) & TPM_CnSC_DMA_MASK) >> TPM_CnSC_DMA_SHIFT)
#define TPM_BRD_CnSC_DMA(base, index) (BME_UBFX32(&TPM_CnSC_REG(base, index), TPM_CnSC_DMA_SHIFT, TPM_CnSC_DMA_WIDTH))

/*! @brief Set the DMA field to a new value. */
#define TPM_WR_CnSC_DMA(base, index, value) (TPM_RMW_CnSC(base, index, (TPM_CnSC_DMA_MASK | TPM_CnSC_CHF_MASK), TPM_CnSC_DMA(value)))
#define TPM_BWR_CnSC_DMA(base, index, value) (BME_BFI32(&TPM_CnSC_REG(base, index), ((uint32_t)(value) << TPM_CnSC_DMA_SHIFT), TPM_CnSC_DMA_SHIFT, TPM_CnSC_DMA_WIDTH))
/*@}*/

/*!
 * @name Register TPM_CnSC, field ELSA[2] (RW)
 *
 * The functionality of ELSB and ELSA depends on the channel mode. When a
 * channel is disabled, this field will not change state until acknowledged in the TPM
 * counter clock domain.
 */
/*@{*/
/*! @brief Read current value of the TPM_CnSC_ELSA field. */
#define TPM_RD_CnSC_ELSA(base, index) ((TPM_CnSC_REG(base, index) & TPM_CnSC_ELSA_MASK) >> TPM_CnSC_ELSA_SHIFT)
#define TPM_BRD_CnSC_ELSA(base, index) (BME_UBFX32(&TPM_CnSC_REG(base, index), TPM_CnSC_ELSA_SHIFT, TPM_CnSC_ELSA_WIDTH))

/*! @brief Set the ELSA field to a new value. */
#define TPM_WR_CnSC_ELSA(base, index, value) (TPM_RMW_CnSC(base, index, (TPM_CnSC_ELSA_MASK | TPM_CnSC_CHF_MASK), TPM_CnSC_ELSA(value)))
#define TPM_BWR_CnSC_ELSA(base, index, value) (BME_BFI32(&TPM_CnSC_REG(base, index), ((uint32_t)(value) << TPM_CnSC_ELSA_SHIFT), TPM_CnSC_ELSA_SHIFT, TPM_CnSC_ELSA_WIDTH))
/*@}*/

/*!
 * @name Register TPM_CnSC, field ELSB[3] (RW)
 *
 * The functionality of ELSB and ELSA depends on the channel mode. When a
 * channel is disabled, this field will not change state until acknowledged in the TPM
 * counter clock domain.
 */
/*@{*/
/*! @brief Read current value of the TPM_CnSC_ELSB field. */
#define TPM_RD_CnSC_ELSB(base, index) ((TPM_CnSC_REG(base, index) & TPM_CnSC_ELSB_MASK) >> TPM_CnSC_ELSB_SHIFT)
#define TPM_BRD_CnSC_ELSB(base, index) (BME_UBFX32(&TPM_CnSC_REG(base, index), TPM_CnSC_ELSB_SHIFT, TPM_CnSC_ELSB_WIDTH))

/*! @brief Set the ELSB field to a new value. */
#define TPM_WR_CnSC_ELSB(base, index, value) (TPM_RMW_CnSC(base, index, (TPM_CnSC_ELSB_MASK | TPM_CnSC_CHF_MASK), TPM_CnSC_ELSB(value)))
#define TPM_BWR_CnSC_ELSB(base, index, value) (BME_BFI32(&TPM_CnSC_REG(base, index), ((uint32_t)(value) << TPM_CnSC_ELSB_SHIFT), TPM_CnSC_ELSB_SHIFT, TPM_CnSC_ELSB_WIDTH))
/*@}*/

/*!
 * @name Register TPM_CnSC, field MSA[4] (RW)
 *
 * Used for further selections in the channel logic. Its functionality is
 * dependent on the channel mode. When a channel is disabled, this field will not
 * change state until acknowledged in the TPM counter clock domain.
 */
/*@{*/
/*! @brief Read current value of the TPM_CnSC_MSA field. */
#define TPM_RD_CnSC_MSA(base, index) ((TPM_CnSC_REG(base, index) & TPM_CnSC_MSA_MASK) >> TPM_CnSC_MSA_SHIFT)
#define TPM_BRD_CnSC_MSA(base, index) (BME_UBFX32(&TPM_CnSC_REG(base, index), TPM_CnSC_MSA_SHIFT, TPM_CnSC_MSA_WIDTH))

/*! @brief Set the MSA field to a new value. */
#define TPM_WR_CnSC_MSA(base, index, value) (TPM_RMW_CnSC(base, index, (TPM_CnSC_MSA_MASK | TPM_CnSC_CHF_MASK), TPM_CnSC_MSA(value)))
#define TPM_BWR_CnSC_MSA(base, index, value) (BME_BFI32(&TPM_CnSC_REG(base, index), ((uint32_t)(value) << TPM_CnSC_MSA_SHIFT), TPM_CnSC_MSA_SHIFT, TPM_CnSC_MSA_WIDTH))
/*@}*/

/*!
 * @name Register TPM_CnSC, field MSB[5] (RW)
 *
 * Used for further selections in the channel logic. Its functionality is
 * dependent on the channel mode. When a channel is disabled, this field will not
 * change state until acknowledged in the TPM counter clock domain.
 */
/*@{*/
/*! @brief Read current value of the TPM_CnSC_MSB field. */
#define TPM_RD_CnSC_MSB(base, index) ((TPM_CnSC_REG(base, index) & TPM_CnSC_MSB_MASK) >> TPM_CnSC_MSB_SHIFT)
#define TPM_BRD_CnSC_MSB(base, index) (BME_UBFX32(&TPM_CnSC_REG(base, index), TPM_CnSC_MSB_SHIFT, TPM_CnSC_MSB_WIDTH))

/*! @brief Set the MSB field to a new value. */
#define TPM_WR_CnSC_MSB(base, index, value) (TPM_RMW_CnSC(base, index, (TPM_CnSC_MSB_MASK | TPM_CnSC_CHF_MASK), TPM_CnSC_MSB(value)))
#define TPM_BWR_CnSC_MSB(base, index, value) (BME_BFI32(&TPM_CnSC_REG(base, index), ((uint32_t)(value) << TPM_CnSC_MSB_SHIFT), TPM_CnSC_MSB_SHIFT, TPM_CnSC_MSB_WIDTH))
/*@}*/

/*!
 * @name Register TPM_CnSC, field CHIE[6] (RW)
 *
 * Enables channel interrupts.
 *
 * Values:
 * - 0b0 - Disable channel interrupts.
 * - 0b1 - Enable channel interrupts.
 */
/*@{*/
/*! @brief Read current value of the TPM_CnSC_CHIE field. */
#define TPM_RD_CnSC_CHIE(base, index) ((TPM_CnSC_REG(base, index) & TPM_CnSC_CHIE_MASK) >> TPM_CnSC_CHIE_SHIFT)
#define TPM_BRD_CnSC_CHIE(base, index) (BME_UBFX32(&TPM_CnSC_REG(base, index), TPM_CnSC_CHIE_SHIFT, TPM_CnSC_CHIE_WIDTH))

/*! @brief Set the CHIE field to a new value. */
#define TPM_WR_CnSC_CHIE(base, index, value) (TPM_RMW_CnSC(base, index, (TPM_CnSC_CHIE_MASK | TPM_CnSC_CHF_MASK), TPM_CnSC_CHIE(value)))
#define TPM_BWR_CnSC_CHIE(base, index, value) (BME_BFI32(&TPM_CnSC_REG(base, index), ((uint32_t)(value) << TPM_CnSC_CHIE_SHIFT), TPM_CnSC_CHIE_SHIFT, TPM_CnSC_CHIE_WIDTH))
/*@}*/

/*!
 * @name Register TPM_CnSC, field CHF[7] (W1C)
 *
 * Set by hardware when an event occurs on the channel. CHF is cleared by
 * writing a 1 to the CHF bit. Writing a 0 to CHF has no effect. If another event
 * occurs between the CHF sets and the write operation, the write operation has no
 * effect; therefore, CHF remains set indicating another event has occurred. In this
 * case a CHF interrupt request is not lost due to the delay in clearing the
 * previous CHF.
 *
 * Values:
 * - 0b0 - No channel event has occurred.
 * - 0b1 - A channel event has occurred.
 */
/*@{*/
/*! @brief Read current value of the TPM_CnSC_CHF field. */
#define TPM_RD_CnSC_CHF(base, index) ((TPM_CnSC_REG(base, index) & TPM_CnSC_CHF_MASK) >> TPM_CnSC_CHF_SHIFT)
#define TPM_BRD_CnSC_CHF(base, index) (BME_UBFX32(&TPM_CnSC_REG(base, index), TPM_CnSC_CHF_SHIFT, TPM_CnSC_CHF_WIDTH))

/*! @brief Set the CHF field to a new value. */
#define TPM_WR_CnSC_CHF(base, index, value) (TPM_RMW_CnSC(base, index, TPM_CnSC_CHF_MASK, TPM_CnSC_CHF(value)))
#define TPM_BWR_CnSC_CHF(base, index, value) (BME_BFI32(&TPM_CnSC_REG(base, index), ((uint32_t)(value) << TPM_CnSC_CHF_SHIFT), TPM_CnSC_CHF_SHIFT, TPM_CnSC_CHF_WIDTH))
/*@}*/

/*******************************************************************************
 * TPM_CnV - Channel (n) Value
 ******************************************************************************/

/*!
 * @brief TPM_CnV - Channel (n) Value (RW)
 *
 * Reset value: 0x00000000U
 *
 * These registers contain the captured TPM counter value for the input modes or
 * the match value for the output modes. In input capture mode, any write to a
 * CnV register is ignored. In compare modes, writing to a CnV register latches
 * the value into a buffer. A CnV register is updated with the value of its write
 * buffer according to CnV Register Update . Additional writes to the CnV write
 * buffer are ignored until the register has been updated.
 */
/*!
 * @name Constants and macros for entire TPM_CnV register
 */
/*@{*/
#define TPM_RD_CnV(base, index)  (TPM_CnV_REG(base, index))
#define TPM_WR_CnV(base, index, value) (TPM_CnV_REG(base, index) = (value))
#define TPM_RMW_CnV(base, index, mask, value) (TPM_WR_CnV(base, index, (TPM_RD_CnV(base, index) & ~(mask)) | (value)))
#define TPM_SET_CnV(base, index, value) (BME_OR32(&TPM_CnV_REG(base, index), (uint32_t)(value)))
#define TPM_CLR_CnV(base, index, value) (BME_AND32(&TPM_CnV_REG(base, index), (uint32_t)(~(value))))
#define TPM_TOG_CnV(base, index, value) (BME_XOR32(&TPM_CnV_REG(base, index), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TPM_CnV bitfields
 */

/*!
 * @name Register TPM_CnV, field VAL[15:0] (RW)
 *
 * Captured TPM counter value of the input modes or the match value for the
 * output modes. This field must be written with single 16-bit or 32-bit access.
 */
/*@{*/
/*! @brief Read current value of the TPM_CnV_VAL field. */
#define TPM_RD_CnV_VAL(base, index) ((TPM_CnV_REG(base, index) & TPM_CnV_VAL_MASK) >> TPM_CnV_VAL_SHIFT)
#define TPM_BRD_CnV_VAL(base, index) (TPM_RD_CnV_VAL(base, index))

/*! @brief Set the VAL field to a new value. */
#define TPM_WR_CnV_VAL(base, index, value) (TPM_RMW_CnV(base, index, TPM_CnV_VAL_MASK, TPM_CnV_VAL(value)))
#define TPM_BWR_CnV_VAL(base, index, value) (TPM_WR_CnV_VAL(base, index, value))
/*@}*/

/*******************************************************************************
 * TPM_STATUS - Capture and Compare Status
 ******************************************************************************/

/*!
 * @brief TPM_STATUS - Capture and Compare Status (RW)
 *
 * Reset value: 0x00000000U
 *
 * The STATUS register contains a copy of the status flag, CnSC[CHnF] for each
 * TPM channel, as well as SC[TOF], for software convenience. Each CHnF bit in
 * STATUS is a mirror of CHnF bit in CnSC. All CHnF bits can be checked using only
 * one read of STATUS. All CHnF bits can be cleared by writing all ones to STATUS.
 * Hardware sets the individual channel flags when an event occurs on the
 * channel. Writing a 1 to CHF clears it. Writing a 0 to CHF has no effect. If another
 * event occurs between the flag setting and the write operation, the write
 * operation has no effect; therefore, CHF remains set indicating another event has
 * occurred. In this case a CHF interrupt request is not lost due to the clearing
 * sequence for a previous CHF.
 */
/*!
 * @name Constants and macros for entire TPM_STATUS register
 */
/*@{*/
#define TPM_RD_STATUS(base)      (TPM_STATUS_REG(base))
#define TPM_WR_STATUS(base, value) (TPM_STATUS_REG(base) = (value))
#define TPM_RMW_STATUS(base, mask, value) (TPM_WR_STATUS(base, (TPM_RD_STATUS(base) & ~(mask)) | (value)))
#define TPM_SET_STATUS(base, value) (BME_OR32(&TPM_STATUS_REG(base), (uint32_t)(value)))
#define TPM_CLR_STATUS(base, value) (BME_AND32(&TPM_STATUS_REG(base), (uint32_t)(~(value))))
#define TPM_TOG_STATUS(base, value) (BME_XOR32(&TPM_STATUS_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TPM_STATUS bitfields
 */

/*!
 * @name Register TPM_STATUS, field CH0F[0] (W1C)
 *
 * See the register description.
 *
 * Values:
 * - 0b0 - No channel event has occurred.
 * - 0b1 - A channel event has occurred.
 */
/*@{*/
/*! @brief Read current value of the TPM_STATUS_CH0F field. */
#define TPM_RD_STATUS_CH0F(base) ((TPM_STATUS_REG(base) & TPM_STATUS_CH0F_MASK) >> TPM_STATUS_CH0F_SHIFT)
#define TPM_BRD_STATUS_CH0F(base) (BME_UBFX32(&TPM_STATUS_REG(base), TPM_STATUS_CH0F_SHIFT, TPM_STATUS_CH0F_WIDTH))

/*! @brief Set the CH0F field to a new value. */
#define TPM_WR_STATUS_CH0F(base, value) (TPM_RMW_STATUS(base, (TPM_STATUS_CH0F_MASK | TPM_STATUS_CH1F_MASK | TPM_STATUS_TOF_MASK), TPM_STATUS_CH0F(value)))
#define TPM_BWR_STATUS_CH0F(base, value) (BME_BFI32(&TPM_STATUS_REG(base), ((uint32_t)(value) << TPM_STATUS_CH0F_SHIFT), TPM_STATUS_CH0F_SHIFT, TPM_STATUS_CH0F_WIDTH))
/*@}*/

/*!
 * @name Register TPM_STATUS, field CH1F[1] (W1C)
 *
 * See the register description.
 *
 * Values:
 * - 0b0 - No channel event has occurred.
 * - 0b1 - A channel event has occurred.
 */
/*@{*/
/*! @brief Read current value of the TPM_STATUS_CH1F field. */
#define TPM_RD_STATUS_CH1F(base) ((TPM_STATUS_REG(base) & TPM_STATUS_CH1F_MASK) >> TPM_STATUS_CH1F_SHIFT)
#define TPM_BRD_STATUS_CH1F(base) (BME_UBFX32(&TPM_STATUS_REG(base), TPM_STATUS_CH1F_SHIFT, TPM_STATUS_CH1F_WIDTH))

/*! @brief Set the CH1F field to a new value. */
#define TPM_WR_STATUS_CH1F(base, value) (TPM_RMW_STATUS(base, (TPM_STATUS_CH1F_MASK | TPM_STATUS_CH0F_MASK | TPM_STATUS_TOF_MASK), TPM_STATUS_CH1F(value)))
#define TPM_BWR_STATUS_CH1F(base, value) (BME_BFI32(&TPM_STATUS_REG(base), ((uint32_t)(value) << TPM_STATUS_CH1F_SHIFT), TPM_STATUS_CH1F_SHIFT, TPM_STATUS_CH1F_WIDTH))
/*@}*/

/*!
 * @name Register TPM_STATUS, field TOF[8] (W1C)
 *
 * See register description
 *
 * Values:
 * - 0b0 - TPM counter has not overflowed.
 * - 0b1 - TPM counter has overflowed.
 */
/*@{*/
/*! @brief Read current value of the TPM_STATUS_TOF field. */
#define TPM_RD_STATUS_TOF(base) ((TPM_STATUS_REG(base) & TPM_STATUS_TOF_MASK) >> TPM_STATUS_TOF_SHIFT)
#define TPM_BRD_STATUS_TOF(base) (BME_UBFX32(&TPM_STATUS_REG(base), TPM_STATUS_TOF_SHIFT, TPM_STATUS_TOF_WIDTH))

/*! @brief Set the TOF field to a new value. */
#define TPM_WR_STATUS_TOF(base, value) (TPM_RMW_STATUS(base, (TPM_STATUS_TOF_MASK | TPM_STATUS_CH0F_MASK | TPM_STATUS_CH1F_MASK), TPM_STATUS_TOF(value)))
#define TPM_BWR_STATUS_TOF(base, value) (BME_BFI32(&TPM_STATUS_REG(base), ((uint32_t)(value) << TPM_STATUS_TOF_SHIFT), TPM_STATUS_TOF_SHIFT, TPM_STATUS_TOF_WIDTH))
/*@}*/

/*******************************************************************************
 * TPM_COMBINE - Combine Channel Register
 ******************************************************************************/

/*!
 * @brief TPM_COMBINE - Combine Channel Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register contains the control bits used to configure the combine channel
 * modes for each pair of channels (n) and (n+1), where n is all the even
 * numbered channels.
 */
/*!
 * @name Constants and macros for entire TPM_COMBINE register
 */
/*@{*/
#define TPM_RD_COMBINE(base)     (TPM_COMBINE_REG(base))
#define TPM_WR_COMBINE(base, value) (TPM_COMBINE_REG(base) = (value))
#define TPM_RMW_COMBINE(base, mask, value) (TPM_WR_COMBINE(base, (TPM_RD_COMBINE(base) & ~(mask)) | (value)))
#define TPM_SET_COMBINE(base, value) (BME_OR32(&TPM_COMBINE_REG(base), (uint32_t)(value)))
#define TPM_CLR_COMBINE(base, value) (BME_AND32(&TPM_COMBINE_REG(base), (uint32_t)(~(value))))
#define TPM_TOG_COMBINE(base, value) (BME_XOR32(&TPM_COMBINE_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TPM_COMBINE bitfields
 */

/*!
 * @name Register TPM_COMBINE, field COMBINE0[0] (RW)
 *
 * Enables the combine feature for channels 0 and 1. In input capture mode, the
 * combined channels use the even channel input. In software compare modes, the
 * even channel match asserts the output trigger and the odd channel match negates
 * the output trigger. In PWM modes, the even channel match is used for the 1st
 * compare and odd channel match for the 2nd compare.
 *
 * Values:
 * - 0b0 - Channels 0 and 1 are independent.
 * - 0b1 - Channels 0 and 1 are combined.
 */
/*@{*/
/*! @brief Read current value of the TPM_COMBINE_COMBINE0 field. */
#define TPM_RD_COMBINE_COMBINE0(base) ((TPM_COMBINE_REG(base) & TPM_COMBINE_COMBINE0_MASK) >> TPM_COMBINE_COMBINE0_SHIFT)
#define TPM_BRD_COMBINE_COMBINE0(base) (BME_UBFX32(&TPM_COMBINE_REG(base), TPM_COMBINE_COMBINE0_SHIFT, TPM_COMBINE_COMBINE0_WIDTH))

/*! @brief Set the COMBINE0 field to a new value. */
#define TPM_WR_COMBINE_COMBINE0(base, value) (TPM_RMW_COMBINE(base, TPM_COMBINE_COMBINE0_MASK, TPM_COMBINE_COMBINE0(value)))
#define TPM_BWR_COMBINE_COMBINE0(base, value) (BME_BFI32(&TPM_COMBINE_REG(base), ((uint32_t)(value) << TPM_COMBINE_COMBINE0_SHIFT), TPM_COMBINE_COMBINE0_SHIFT, TPM_COMBINE_COMBINE0_WIDTH))
/*@}*/

/*!
 * @name Register TPM_COMBINE, field COMSWAP0[1] (RW)
 *
 * When set in combine mode, the even channel is used for the input capture and
 * 1st compare, the odd channel is used for the 2nd compare.
 *
 * Values:
 * - 0b0 - Even channel is used for input capture and 1st compare.
 * - 0b1 - Odd channel is used for input capture and 1st compare.
 */
/*@{*/
/*! @brief Read current value of the TPM_COMBINE_COMSWAP0 field. */
#define TPM_RD_COMBINE_COMSWAP0(base) ((TPM_COMBINE_REG(base) & TPM_COMBINE_COMSWAP0_MASK) >> TPM_COMBINE_COMSWAP0_SHIFT)
#define TPM_BRD_COMBINE_COMSWAP0(base) (BME_UBFX32(&TPM_COMBINE_REG(base), TPM_COMBINE_COMSWAP0_SHIFT, TPM_COMBINE_COMSWAP0_WIDTH))

/*! @brief Set the COMSWAP0 field to a new value. */
#define TPM_WR_COMBINE_COMSWAP0(base, value) (TPM_RMW_COMBINE(base, TPM_COMBINE_COMSWAP0_MASK, TPM_COMBINE_COMSWAP0(value)))
#define TPM_BWR_COMBINE_COMSWAP0(base, value) (BME_BFI32(&TPM_COMBINE_REG(base), ((uint32_t)(value) << TPM_COMBINE_COMSWAP0_SHIFT), TPM_COMBINE_COMSWAP0_SHIFT, TPM_COMBINE_COMSWAP0_WIDTH))
/*@}*/

/*******************************************************************************
 * TPM_POL - Channel Polarity
 ******************************************************************************/

/*!
 * @brief TPM_POL - Channel Polarity (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register defines the input and output polarity of each of the channels.
 */
/*!
 * @name Constants and macros for entire TPM_POL register
 */
/*@{*/
#define TPM_RD_POL(base)         (TPM_POL_REG(base))
#define TPM_WR_POL(base, value)  (TPM_POL_REG(base) = (value))
#define TPM_RMW_POL(base, mask, value) (TPM_WR_POL(base, (TPM_RD_POL(base) & ~(mask)) | (value)))
#define TPM_SET_POL(base, value) (BME_OR32(&TPM_POL_REG(base), (uint32_t)(value)))
#define TPM_CLR_POL(base, value) (BME_AND32(&TPM_POL_REG(base), (uint32_t)(~(value))))
#define TPM_TOG_POL(base, value) (BME_XOR32(&TPM_POL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TPM_POL bitfields
 */

/*!
 * @name Register TPM_POL, field POL0[0] (RW)
 *
 * Values:
 * - 0b0 - The channel polarity is active high.
 * - 0b1 - The channel polarity is active low.
 */
/*@{*/
/*! @brief Read current value of the TPM_POL_POL0 field. */
#define TPM_RD_POL_POL0(base) ((TPM_POL_REG(base) & TPM_POL_POL0_MASK) >> TPM_POL_POL0_SHIFT)
#define TPM_BRD_POL_POL0(base) (BME_UBFX32(&TPM_POL_REG(base), TPM_POL_POL0_SHIFT, TPM_POL_POL0_WIDTH))

/*! @brief Set the POL0 field to a new value. */
#define TPM_WR_POL_POL0(base, value) (TPM_RMW_POL(base, TPM_POL_POL0_MASK, TPM_POL_POL0(value)))
#define TPM_BWR_POL_POL0(base, value) (BME_BFI32(&TPM_POL_REG(base), ((uint32_t)(value) << TPM_POL_POL0_SHIFT), TPM_POL_POL0_SHIFT, TPM_POL_POL0_WIDTH))
/*@}*/

/*!
 * @name Register TPM_POL, field POL1[1] (RW)
 *
 * Values:
 * - 0b0 - The channel polarity is active high.
 * - 0b1 - The channel polarity is active low.
 */
/*@{*/
/*! @brief Read current value of the TPM_POL_POL1 field. */
#define TPM_RD_POL_POL1(base) ((TPM_POL_REG(base) & TPM_POL_POL1_MASK) >> TPM_POL_POL1_SHIFT)
#define TPM_BRD_POL_POL1(base) (BME_UBFX32(&TPM_POL_REG(base), TPM_POL_POL1_SHIFT, TPM_POL_POL1_WIDTH))

/*! @brief Set the POL1 field to a new value. */
#define TPM_WR_POL_POL1(base, value) (TPM_RMW_POL(base, TPM_POL_POL1_MASK, TPM_POL_POL1(value)))
#define TPM_BWR_POL_POL1(base, value) (BME_BFI32(&TPM_POL_REG(base), ((uint32_t)(value) << TPM_POL_POL1_SHIFT), TPM_POL_POL1_SHIFT, TPM_POL_POL1_WIDTH))
/*@}*/

/*******************************************************************************
 * TPM_FILTER - Filter Control
 ******************************************************************************/

/*!
 * @brief TPM_FILTER - Filter Control (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register selects the filter value of the channel inputs, and an
 * additional output delay value for the channel outputs. In PWM combine modes, the
 * filter can effectively implements deadtime insertion.
 */
/*!
 * @name Constants and macros for entire TPM_FILTER register
 */
/*@{*/
#define TPM_RD_FILTER(base)      (TPM_FILTER_REG(base))
#define TPM_WR_FILTER(base, value) (TPM_FILTER_REG(base) = (value))
#define TPM_RMW_FILTER(base, mask, value) (TPM_WR_FILTER(base, (TPM_RD_FILTER(base) & ~(mask)) | (value)))
#define TPM_SET_FILTER(base, value) (BME_OR32(&TPM_FILTER_REG(base), (uint32_t)(value)))
#define TPM_CLR_FILTER(base, value) (BME_AND32(&TPM_FILTER_REG(base), (uint32_t)(~(value))))
#define TPM_TOG_FILTER(base, value) (BME_XOR32(&TPM_FILTER_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TPM_FILTER bitfields
 */

/*!
 * @name Register TPM_FILTER, field CH0FVAL[3:0] (RW)
 *
 * Selects the filter value for the channel input and the delay value for the
 * channel output. The filter/delay is disabled when the value is zero, otherwise
 * the filter/delay is configured as (CH0FVAL * 4) clock cycles.
 */
/*@{*/
/*! @brief Read current value of the TPM_FILTER_CH0FVAL field. */
#define TPM_RD_FILTER_CH0FVAL(base) ((TPM_FILTER_REG(base) & TPM_FILTER_CH0FVAL_MASK) >> TPM_FILTER_CH0FVAL_SHIFT)
#define TPM_BRD_FILTER_CH0FVAL(base) (BME_UBFX32(&TPM_FILTER_REG(base), TPM_FILTER_CH0FVAL_SHIFT, TPM_FILTER_CH0FVAL_WIDTH))

/*! @brief Set the CH0FVAL field to a new value. */
#define TPM_WR_FILTER_CH0FVAL(base, value) (TPM_RMW_FILTER(base, TPM_FILTER_CH0FVAL_MASK, TPM_FILTER_CH0FVAL(value)))
#define TPM_BWR_FILTER_CH0FVAL(base, value) (BME_BFI32(&TPM_FILTER_REG(base), ((uint32_t)(value) << TPM_FILTER_CH0FVAL_SHIFT), TPM_FILTER_CH0FVAL_SHIFT, TPM_FILTER_CH0FVAL_WIDTH))
/*@}*/

/*!
 * @name Register TPM_FILTER, field CH1FVAL[7:4] (RW)
 *
 * Selects the filter value for the channel input and the delay value for the
 * channel output. The filter/delay is disabled when the value is zero, otherwise
 * the filter/delay is configured as (CH1FVAL * 4) clock cycles.
 */
/*@{*/
/*! @brief Read current value of the TPM_FILTER_CH1FVAL field. */
#define TPM_RD_FILTER_CH1FVAL(base) ((TPM_FILTER_REG(base) & TPM_FILTER_CH1FVAL_MASK) >> TPM_FILTER_CH1FVAL_SHIFT)
#define TPM_BRD_FILTER_CH1FVAL(base) (BME_UBFX32(&TPM_FILTER_REG(base), TPM_FILTER_CH1FVAL_SHIFT, TPM_FILTER_CH1FVAL_WIDTH))

/*! @brief Set the CH1FVAL field to a new value. */
#define TPM_WR_FILTER_CH1FVAL(base, value) (TPM_RMW_FILTER(base, TPM_FILTER_CH1FVAL_MASK, TPM_FILTER_CH1FVAL(value)))
#define TPM_BWR_FILTER_CH1FVAL(base, value) (BME_BFI32(&TPM_FILTER_REG(base), ((uint32_t)(value) << TPM_FILTER_CH1FVAL_SHIFT), TPM_FILTER_CH1FVAL_SHIFT, TPM_FILTER_CH1FVAL_WIDTH))
/*@}*/

/*******************************************************************************
 * TPM_QDCTRL - Quadrature Decoder Control and Status
 ******************************************************************************/

/*!
 * @brief TPM_QDCTRL - Quadrature Decoder Control and Status (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register has the control and status bits for the quadrature decoder mode.
 */
/*!
 * @name Constants and macros for entire TPM_QDCTRL register
 */
/*@{*/
#define TPM_RD_QDCTRL(base)      (TPM_QDCTRL_REG(base))
#define TPM_WR_QDCTRL(base, value) (TPM_QDCTRL_REG(base) = (value))
#define TPM_RMW_QDCTRL(base, mask, value) (TPM_WR_QDCTRL(base, (TPM_RD_QDCTRL(base) & ~(mask)) | (value)))
#define TPM_SET_QDCTRL(base, value) (BME_OR32(&TPM_QDCTRL_REG(base), (uint32_t)(value)))
#define TPM_CLR_QDCTRL(base, value) (BME_AND32(&TPM_QDCTRL_REG(base), (uint32_t)(~(value))))
#define TPM_TOG_QDCTRL(base, value) (BME_XOR32(&TPM_QDCTRL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TPM_QDCTRL bitfields
 */

/*!
 * @name Register TPM_QDCTRL, field QUADEN[0] (RW)
 *
 * Enables the quadrature decoder mode. In this mode, the channel 0 and channel
 * 1 inputs control the TPM counter direction and can only be used for software
 * compare. The quadrature decoder mode has precedence over the other modes.
 *
 * Values:
 * - 0b0 - Quadrature decoder mode is disabled.
 * - 0b1 - Quadrature decoder mode is enabled.
 */
/*@{*/
/*! @brief Read current value of the TPM_QDCTRL_QUADEN field. */
#define TPM_RD_QDCTRL_QUADEN(base) ((TPM_QDCTRL_REG(base) & TPM_QDCTRL_QUADEN_MASK) >> TPM_QDCTRL_QUADEN_SHIFT)
#define TPM_BRD_QDCTRL_QUADEN(base) (BME_UBFX32(&TPM_QDCTRL_REG(base), TPM_QDCTRL_QUADEN_SHIFT, TPM_QDCTRL_QUADEN_WIDTH))

/*! @brief Set the QUADEN field to a new value. */
#define TPM_WR_QDCTRL_QUADEN(base, value) (TPM_RMW_QDCTRL(base, TPM_QDCTRL_QUADEN_MASK, TPM_QDCTRL_QUADEN(value)))
#define TPM_BWR_QDCTRL_QUADEN(base, value) (BME_BFI32(&TPM_QDCTRL_REG(base), ((uint32_t)(value) << TPM_QDCTRL_QUADEN_SHIFT), TPM_QDCTRL_QUADEN_SHIFT, TPM_QDCTRL_QUADEN_WIDTH))
/*@}*/

/*!
 * @name Register TPM_QDCTRL, field TOFDIR[1] (RO)
 *
 * Indicates if the TOF bit was set on the top or the bottom of counting.
 *
 * Values:
 * - 0b0 - TOF bit was set on the bottom of counting. There was an FTM counter
 *     decrement and FTM counter changes from its minimum value (zero) to its
 *     maximum value (MOD register).
 * - 0b1 - TOF bit was set on the top of counting. There was an FTM counter
 *     increment and FTM counter changes from its maximum value (MOD register) to its
 *     minimum value (zero).
 */
/*@{*/
/*! @brief Read current value of the TPM_QDCTRL_TOFDIR field. */
#define TPM_RD_QDCTRL_TOFDIR(base) ((TPM_QDCTRL_REG(base) & TPM_QDCTRL_TOFDIR_MASK) >> TPM_QDCTRL_TOFDIR_SHIFT)
#define TPM_BRD_QDCTRL_TOFDIR(base) (BME_UBFX32(&TPM_QDCTRL_REG(base), TPM_QDCTRL_TOFDIR_SHIFT, TPM_QDCTRL_TOFDIR_WIDTH))
/*@}*/

/*!
 * @name Register TPM_QDCTRL, field QUADIR[2] (RO)
 *
 * Indicates the counting direction.
 *
 * Values:
 * - 0b0 - Counter direction is decreasing (counter decrement).
 * - 0b1 - Counter direction is increasing (counter increment).
 */
/*@{*/
/*! @brief Read current value of the TPM_QDCTRL_QUADIR field. */
#define TPM_RD_QDCTRL_QUADIR(base) ((TPM_QDCTRL_REG(base) & TPM_QDCTRL_QUADIR_MASK) >> TPM_QDCTRL_QUADIR_SHIFT)
#define TPM_BRD_QDCTRL_QUADIR(base) (BME_UBFX32(&TPM_QDCTRL_REG(base), TPM_QDCTRL_QUADIR_SHIFT, TPM_QDCTRL_QUADIR_WIDTH))
/*@}*/

/*!
 * @name Register TPM_QDCTRL, field QUADMODE[3] (RW)
 *
 * Selects the encoding mode used in the quadrature decoder mode.
 *
 * Values:
 * - 0b0 - Phase encoding mode.
 * - 0b1 - Count and direction encoding mode.
 */
/*@{*/
/*! @brief Read current value of the TPM_QDCTRL_QUADMODE field. */
#define TPM_RD_QDCTRL_QUADMODE(base) ((TPM_QDCTRL_REG(base) & TPM_QDCTRL_QUADMODE_MASK) >> TPM_QDCTRL_QUADMODE_SHIFT)
#define TPM_BRD_QDCTRL_QUADMODE(base) (BME_UBFX32(&TPM_QDCTRL_REG(base), TPM_QDCTRL_QUADMODE_SHIFT, TPM_QDCTRL_QUADMODE_WIDTH))

/*! @brief Set the QUADMODE field to a new value. */
#define TPM_WR_QDCTRL_QUADMODE(base, value) (TPM_RMW_QDCTRL(base, TPM_QDCTRL_QUADMODE_MASK, TPM_QDCTRL_QUADMODE(value)))
#define TPM_BWR_QDCTRL_QUADMODE(base, value) (BME_BFI32(&TPM_QDCTRL_REG(base), ((uint32_t)(value) << TPM_QDCTRL_QUADMODE_SHIFT), TPM_QDCTRL_QUADMODE_SHIFT, TPM_QDCTRL_QUADMODE_WIDTH))
/*@}*/

/*******************************************************************************
 * TPM_CONF - Configuration
 ******************************************************************************/

/*!
 * @brief TPM_CONF - Configuration (RW)
 *
 * Reset value: 0x00000000U
 *
 * This register selects the behavior in debug and wait modes and the use of an
 * external global time base.
 */
/*!
 * @name Constants and macros for entire TPM_CONF register
 */
/*@{*/
#define TPM_RD_CONF(base)        (TPM_CONF_REG(base))
#define TPM_WR_CONF(base, value) (TPM_CONF_REG(base) = (value))
#define TPM_RMW_CONF(base, mask, value) (TPM_WR_CONF(base, (TPM_RD_CONF(base) & ~(mask)) | (value)))
#define TPM_SET_CONF(base, value) (BME_OR32(&TPM_CONF_REG(base), (uint32_t)(value)))
#define TPM_CLR_CONF(base, value) (BME_AND32(&TPM_CONF_REG(base), (uint32_t)(~(value))))
#define TPM_TOG_CONF(base, value) (BME_XOR32(&TPM_CONF_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TPM_CONF bitfields
 */

/*!
 * @name Register TPM_CONF, field DOZEEN[5] (RW)
 *
 * Configures the TPM behavior in wait mode.
 *
 * Values:
 * - 0b0 - Internal TPM counter continues in Doze mode.
 * - 0b1 - Internal TPM counter is paused and does not increment during Doze
 *     mode. Trigger inputs and input capture events are also ignored.
 */
/*@{*/
/*! @brief Read current value of the TPM_CONF_DOZEEN field. */
#define TPM_RD_CONF_DOZEEN(base) ((TPM_CONF_REG(base) & TPM_CONF_DOZEEN_MASK) >> TPM_CONF_DOZEEN_SHIFT)
#define TPM_BRD_CONF_DOZEEN(base) (BME_UBFX32(&TPM_CONF_REG(base), TPM_CONF_DOZEEN_SHIFT, TPM_CONF_DOZEEN_WIDTH))

/*! @brief Set the DOZEEN field to a new value. */
#define TPM_WR_CONF_DOZEEN(base, value) (TPM_RMW_CONF(base, TPM_CONF_DOZEEN_MASK, TPM_CONF_DOZEEN(value)))
#define TPM_BWR_CONF_DOZEEN(base, value) (BME_BFI32(&TPM_CONF_REG(base), ((uint32_t)(value) << TPM_CONF_DOZEEN_SHIFT), TPM_CONF_DOZEEN_SHIFT, TPM_CONF_DOZEEN_WIDTH))
/*@}*/

/*!
 * @name Register TPM_CONF, field DBGMODE[7:6] (RW)
 *
 * Configures the TPM behavior in debug mode. All other configurations are
 * reserved.
 *
 * Values:
 * - 0b00 - TPM counter is paused and does not increment during debug mode.
 *     Trigger inputs and input capture events are also ignored.
 * - 0b11 - TPM counter continues in debug mode.
 */
/*@{*/
/*! @brief Read current value of the TPM_CONF_DBGMODE field. */
#define TPM_RD_CONF_DBGMODE(base) ((TPM_CONF_REG(base) & TPM_CONF_DBGMODE_MASK) >> TPM_CONF_DBGMODE_SHIFT)
#define TPM_BRD_CONF_DBGMODE(base) (BME_UBFX32(&TPM_CONF_REG(base), TPM_CONF_DBGMODE_SHIFT, TPM_CONF_DBGMODE_WIDTH))

/*! @brief Set the DBGMODE field to a new value. */
#define TPM_WR_CONF_DBGMODE(base, value) (TPM_RMW_CONF(base, TPM_CONF_DBGMODE_MASK, TPM_CONF_DBGMODE(value)))
#define TPM_BWR_CONF_DBGMODE(base, value) (BME_BFI32(&TPM_CONF_REG(base), ((uint32_t)(value) << TPM_CONF_DBGMODE_SHIFT), TPM_CONF_DBGMODE_SHIFT, TPM_CONF_DBGMODE_WIDTH))
/*@}*/

/*!
 * @name Register TPM_CONF, field GTBSYNC[8] (RW)
 *
 * When enabled, the TPM counter is synchronized to the global time base. It
 * uses the global timebase enable, trigger and overflow to ensure the TPM counter
 * starts incrementing at the same time as the global timebase, stops incrementing
 * at the same time as the global timebase and is reset at the same time as the
 * global timebase. This field should only be changed when the TPM counter is
 * disabled.
 *
 * Values:
 * - 0b0 - Global timebase synchronization disabled.
 * - 0b1 - Global timebase synchronization enabled.
 */
/*@{*/
/*! @brief Read current value of the TPM_CONF_GTBSYNC field. */
#define TPM_RD_CONF_GTBSYNC(base) ((TPM_CONF_REG(base) & TPM_CONF_GTBSYNC_MASK) >> TPM_CONF_GTBSYNC_SHIFT)
#define TPM_BRD_CONF_GTBSYNC(base) (BME_UBFX32(&TPM_CONF_REG(base), TPM_CONF_GTBSYNC_SHIFT, TPM_CONF_GTBSYNC_WIDTH))

/*! @brief Set the GTBSYNC field to a new value. */
#define TPM_WR_CONF_GTBSYNC(base, value) (TPM_RMW_CONF(base, TPM_CONF_GTBSYNC_MASK, TPM_CONF_GTBSYNC(value)))
#define TPM_BWR_CONF_GTBSYNC(base, value) (BME_BFI32(&TPM_CONF_REG(base), ((uint32_t)(value) << TPM_CONF_GTBSYNC_SHIFT), TPM_CONF_GTBSYNC_SHIFT, TPM_CONF_GTBSYNC_WIDTH))
/*@}*/

/*!
 * @name Register TPM_CONF, field GTBEEN[9] (RW)
 *
 * Configures the TPM to use an externally generated global time base counter.
 * When an externally generated timebase is used, the internal TPM counter is not
 * used by the channels but can be used to generate a periodic interruptor DMA
 * request using the Modulo register and timer overflow flag.
 *
 * Values:
 * - 0b0 - All channels use the internally generated TPM counter as their
 *     timebase
 * - 0b1 - All channels use an externally generated global timebase as their
 *     timebase
 */
/*@{*/
/*! @brief Read current value of the TPM_CONF_GTBEEN field. */
#define TPM_RD_CONF_GTBEEN(base) ((TPM_CONF_REG(base) & TPM_CONF_GTBEEN_MASK) >> TPM_CONF_GTBEEN_SHIFT)
#define TPM_BRD_CONF_GTBEEN(base) (BME_UBFX32(&TPM_CONF_REG(base), TPM_CONF_GTBEEN_SHIFT, TPM_CONF_GTBEEN_WIDTH))

/*! @brief Set the GTBEEN field to a new value. */
#define TPM_WR_CONF_GTBEEN(base, value) (TPM_RMW_CONF(base, TPM_CONF_GTBEEN_MASK, TPM_CONF_GTBEEN(value)))
#define TPM_BWR_CONF_GTBEEN(base, value) (BME_BFI32(&TPM_CONF_REG(base), ((uint32_t)(value) << TPM_CONF_GTBEEN_SHIFT), TPM_CONF_GTBEEN_SHIFT, TPM_CONF_GTBEEN_WIDTH))
/*@}*/

/*!
 * @name Register TPM_CONF, field CSOT[16] (RW)
 *
 * When set, the TPM counter will not start incrementing after it is enabled
 * until a rising edge on the selected trigger input is detected. If the TPM counter
 * is stopped due to an overflow, a rising edge on the selected trigger input
 * will also cause the TPM counter to start incrementing again. The trigger input
 * is ignored if the TPM counter is paused during debug mode or doze mode. This
 * field should only be changed when the TPM counter is disabled.
 *
 * Values:
 * - 0b0 - TPM counter starts to increment immediately, once it is enabled.
 * - 0b1 - TPM counter only starts to increment when it a rising edge on the
 *     selected input trigger is detected, after it has been enabled or after it has
 *     stopped due to overflow.
 */
/*@{*/
/*! @brief Read current value of the TPM_CONF_CSOT field. */
#define TPM_RD_CONF_CSOT(base) ((TPM_CONF_REG(base) & TPM_CONF_CSOT_MASK) >> TPM_CONF_CSOT_SHIFT)
#define TPM_BRD_CONF_CSOT(base) (BME_UBFX32(&TPM_CONF_REG(base), TPM_CONF_CSOT_SHIFT, TPM_CONF_CSOT_WIDTH))

/*! @brief Set the CSOT field to a new value. */
#define TPM_WR_CONF_CSOT(base, value) (TPM_RMW_CONF(base, TPM_CONF_CSOT_MASK, TPM_CONF_CSOT(value)))
#define TPM_BWR_CONF_CSOT(base, value) (BME_BFI32(&TPM_CONF_REG(base), ((uint32_t)(value) << TPM_CONF_CSOT_SHIFT), TPM_CONF_CSOT_SHIFT, TPM_CONF_CSOT_WIDTH))
/*@}*/

/*!
 * @name Register TPM_CONF, field CSOO[17] (RW)
 *
 * When set, the TPM counter will stop incrementing once the counter equals the
 * MOD value and incremented (this also sets the TOF). Reloading the counter with
 * 0 due to writing to the counter register or due to a trigger input does not
 * cause the counter to stop incrementing. Once the counter has stopped
 * incrementing, the counter will not start incrementing unless it is disabled and then
 * enabled again, or a rising edge on the selected trigger input is detected when
 * CSOT set. This field should only be changed when the TPM counter is disabled.
 *
 * Values:
 * - 0b0 - TPM counter continues incrementing or decrementing after overflow
 * - 0b1 - TPM counter stops incrementing or decrementing after overflow.
 */
/*@{*/
/*! @brief Read current value of the TPM_CONF_CSOO field. */
#define TPM_RD_CONF_CSOO(base) ((TPM_CONF_REG(base) & TPM_CONF_CSOO_MASK) >> TPM_CONF_CSOO_SHIFT)
#define TPM_BRD_CONF_CSOO(base) (BME_UBFX32(&TPM_CONF_REG(base), TPM_CONF_CSOO_SHIFT, TPM_CONF_CSOO_WIDTH))

/*! @brief Set the CSOO field to a new value. */
#define TPM_WR_CONF_CSOO(base, value) (TPM_RMW_CONF(base, TPM_CONF_CSOO_MASK, TPM_CONF_CSOO(value)))
#define TPM_BWR_CONF_CSOO(base, value) (BME_BFI32(&TPM_CONF_REG(base), ((uint32_t)(value) << TPM_CONF_CSOO_SHIFT), TPM_CONF_CSOO_SHIFT, TPM_CONF_CSOO_WIDTH))
/*@}*/

/*!
 * @name Register TPM_CONF, field CROT[18] (RW)
 *
 * When set, the TPM counter will reload with 0 (and initialize PWM outputs to
 * their default value) when a rising edge is detected on the selected trigger
 * input. The trigger input is ignored if the TPM counter is paused during debug
 * mode or doze mode. This field should only be changed when the TPM counter is
 * disabled.
 *
 * Values:
 * - 0b0 - Counter is not reloaded due to a rising edge on the selected input
 *     trigger
 * - 0b1 - Counter is reloaded when a rising edge is detected on the selected
 *     input trigger
 */
/*@{*/
/*! @brief Read current value of the TPM_CONF_CROT field. */
#define TPM_RD_CONF_CROT(base) ((TPM_CONF_REG(base) & TPM_CONF_CROT_MASK) >> TPM_CONF_CROT_SHIFT)
#define TPM_BRD_CONF_CROT(base) (BME_UBFX32(&TPM_CONF_REG(base), TPM_CONF_CROT_SHIFT, TPM_CONF_CROT_WIDTH))

/*! @brief Set the CROT field to a new value. */
#define TPM_WR_CONF_CROT(base, value) (TPM_RMW_CONF(base, TPM_CONF_CROT_MASK, TPM_CONF_CROT(value)))
#define TPM_BWR_CONF_CROT(base, value) (BME_BFI32(&TPM_CONF_REG(base), ((uint32_t)(value) << TPM_CONF_CROT_SHIFT), TPM_CONF_CROT_SHIFT, TPM_CONF_CROT_WIDTH))
/*@}*/

/*!
 * @name Register TPM_CONF, field CPOT[19] (RW)
 *
 * When enabled, the counter will pause incrementing while the trigger remains
 * asserted (level sensitive). This field should only be changed when the TPM
 * counter is disabled.
 */
/*@{*/
/*! @brief Read current value of the TPM_CONF_CPOT field. */
#define TPM_RD_CONF_CPOT(base) ((TPM_CONF_REG(base) & TPM_CONF_CPOT_MASK) >> TPM_CONF_CPOT_SHIFT)
#define TPM_BRD_CONF_CPOT(base) (BME_UBFX32(&TPM_CONF_REG(base), TPM_CONF_CPOT_SHIFT, TPM_CONF_CPOT_WIDTH))

/*! @brief Set the CPOT field to a new value. */
#define TPM_WR_CONF_CPOT(base, value) (TPM_RMW_CONF(base, TPM_CONF_CPOT_MASK, TPM_CONF_CPOT(value)))
#define TPM_BWR_CONF_CPOT(base, value) (BME_BFI32(&TPM_CONF_REG(base), ((uint32_t)(value) << TPM_CONF_CPOT_SHIFT), TPM_CONF_CPOT_SHIFT, TPM_CONF_CPOT_WIDTH))
/*@}*/

/*!
 * @name Register TPM_CONF, field TRGPOL[22] (RW)
 *
 * Selects the polarity of the external trigger source. This field should only
 * be changed when the TPM counter is disabled.
 *
 * Values:
 * - 0b0 - Trigger is active high.
 * - 0b1 - Trigger is active low.
 */
/*@{*/
/*! @brief Read current value of the TPM_CONF_TRGPOL field. */
#define TPM_RD_CONF_TRGPOL(base) ((TPM_CONF_REG(base) & TPM_CONF_TRGPOL_MASK) >> TPM_CONF_TRGPOL_SHIFT)
#define TPM_BRD_CONF_TRGPOL(base) (BME_UBFX32(&TPM_CONF_REG(base), TPM_CONF_TRGPOL_SHIFT, TPM_CONF_TRGPOL_WIDTH))

/*! @brief Set the TRGPOL field to a new value. */
#define TPM_WR_CONF_TRGPOL(base, value) (TPM_RMW_CONF(base, TPM_CONF_TRGPOL_MASK, TPM_CONF_TRGPOL(value)))
#define TPM_BWR_CONF_TRGPOL(base, value) (BME_BFI32(&TPM_CONF_REG(base), ((uint32_t)(value) << TPM_CONF_TRGPOL_SHIFT), TPM_CONF_TRGPOL_SHIFT, TPM_CONF_TRGPOL_WIDTH))
/*@}*/

/*!
 * @name Register TPM_CONF, field TRGSRC[23] (RW)
 *
 * Selects between internal (channel pin input capture) or external trigger
 * sources. When selecting an internal trigger, the channel selected should be
 * configured for input capture. Only a rising edge input capture can be used to
 * initially start the counter using the CSOT configuration; either rising edge or
 * falling edge input capture can be used to reload the counter using the CROT
 * configuration; and the state of the channel input pin is used to pause the counter
 * using the CPOT configuration. The channel polarity register can be used to
 * invert the polarity of the channel input pins. This field should only be changed
 * when the TPM counter is disabled.
 *
 * Values:
 * - 0b0 - Trigger source selected by TRGSEL is external.
 * - 0b1 - Trigger source selected by TRGSEL is internal (channel pin input
 *     capture).
 */
/*@{*/
/*! @brief Read current value of the TPM_CONF_TRGSRC field. */
#define TPM_RD_CONF_TRGSRC(base) ((TPM_CONF_REG(base) & TPM_CONF_TRGSRC_MASK) >> TPM_CONF_TRGSRC_SHIFT)
#define TPM_BRD_CONF_TRGSRC(base) (BME_UBFX32(&TPM_CONF_REG(base), TPM_CONF_TRGSRC_SHIFT, TPM_CONF_TRGSRC_WIDTH))

/*! @brief Set the TRGSRC field to a new value. */
#define TPM_WR_CONF_TRGSRC(base, value) (TPM_RMW_CONF(base, TPM_CONF_TRGSRC_MASK, TPM_CONF_TRGSRC(value)))
#define TPM_BWR_CONF_TRGSRC(base, value) (BME_BFI32(&TPM_CONF_REG(base), ((uint32_t)(value) << TPM_CONF_TRGSRC_SHIFT), TPM_CONF_TRGSRC_SHIFT, TPM_CONF_TRGSRC_WIDTH))
/*@}*/

/*!
 * @name Register TPM_CONF, field TRGSEL[27:24] (RW)
 *
 * Selects the input trigger to use for starting, reloading and/or pausing the
 * counter. The source of the trigger (external or internal to the TPM) is
 * configured by the TRGSRC field. This field should only be changed when the TPM
 * counter is disabled. Refer to the chip configuration section for available external
 * trigger options. The available internal trigger sources are listed below.
 *
 * Values:
 * - 0b0001 - Channel 0 pin input capture
 * - 0b0010 - Channel 1 pin input capture
 * - 0b0011 - Channel 0 or Channel 1 pin input capture
 */
/*@{*/
/*! @brief Read current value of the TPM_CONF_TRGSEL field. */
#define TPM_RD_CONF_TRGSEL(base) ((TPM_CONF_REG(base) & TPM_CONF_TRGSEL_MASK) >> TPM_CONF_TRGSEL_SHIFT)
#define TPM_BRD_CONF_TRGSEL(base) (BME_UBFX32(&TPM_CONF_REG(base), TPM_CONF_TRGSEL_SHIFT, TPM_CONF_TRGSEL_WIDTH))

/*! @brief Set the TRGSEL field to a new value. */
#define TPM_WR_CONF_TRGSEL(base, value) (TPM_RMW_CONF(base, TPM_CONF_TRGSEL_MASK, TPM_CONF_TRGSEL(value)))
#define TPM_BWR_CONF_TRGSEL(base, value) (BME_BFI32(&TPM_CONF_REG(base), ((uint32_t)(value) << TPM_CONF_TRGSEL_SHIFT), TPM_CONF_TRGSEL_SHIFT, TPM_CONF_TRGSEL_WIDTH))
/*@}*/

/*
 * MK82F25615 TRNG
 *
 * RNG
 *
 * Registers defined in this header file:
 * - TRNG_MCTL - RNG Miscellaneous Control Register
 * - TRNG_SCMISC - RNG Statistical Check Miscellaneous Register
 * - TRNG_PKRRNG - RNG Poker Range Register
 * - TRNG_PKRMAX - RNG Poker Maximum Limit Register
 * - TRNG_PKRSQ - RNG Poker Square Calculation Result Register
 * - TRNG_SDCTL - RNG Seed Control Register
 * - TRNG_SBLIM - RNG Sparse Bit Limit Register
 * - TRNG_TOTSAM - RNG Total Samples Register
 * - TRNG_FRQMIN - RNG Frequency Count Minimum Limit Register
 * - TRNG_FRQCNT - RNG Frequency Count Register
 * - TRNG_FRQMAX - RNG Frequency Count Maximum Limit Register
 * - TRNG_SCMC - RNG Statistical Check Monobit Count Register
 * - TRNG_SCML - RNG Statistical Check Monobit Limit Register
 * - TRNG_SCR1C - RNG Statistical Check Run Length 1 Count Register
 * - TRNG_SCR1L - RNG Statistical Check Run Length 1 Limit Register
 * - TRNG_SCR2C - RNG Statistical Check Run Length 2 Count Register
 * - TRNG_SCR2L - RNG Statistical Check Run Length 2 Limit Register
 * - TRNG_SCR3C - RNG Statistical Check Run Length 3 Count Register
 * - TRNG_SCR3L - RNG Statistical Check Run Length 3 Limit Register
 * - TRNG_SCR4C - RNG Statistical Check Run Length 4 Count Register
 * - TRNG_SCR4L - RNG Statistical Check Run Length 4 Limit Register
 * - TRNG_SCR5C - RNG Statistical Check Run Length 5 Count Register
 * - TRNG_SCR5L - RNG Statistical Check Run Length 5 Limit Register
 * - TRNG_SCR6PC - RNG Statistical Check Run Length 6+ Count Register
 * - TRNG_SCR6PL - RNG Statistical Check Run Length 6+ Limit Register
 * - TRNG_STATUS - RNG Status Register
 * - TRNG_ENT - RNG TRNG Entropy Read Register
 * - TRNG_PKRCNT10 - RNG Statistical Check Poker Count 1 and 0 Register
 * - TRNG_PKRCNT32 - RNG Statistical Check Poker Count 3 and 2 Register
 * - TRNG_PKRCNT54 - RNG Statistical Check Poker Count 5 and 4 Register
 * - TRNG_PKRCNT76 - RNG Statistical Check Poker Count 7 and 6 Register
 * - TRNG_PKRCNT98 - RNG Statistical Check Poker Count 9 and 8 Register
 * - TRNG_PKRCNTBA - RNG Statistical Check Poker Count B and A Register
 * - TRNG_PKRCNTDC - RNG Statistical Check Poker Count D and C Register
 * - TRNG_PKRCNTFE - RNG Statistical Check Poker Count F and E Register
 * - TRNG_SEC_CFG - RNG Security Configuration Register
 * - TRNG_INT_CTRL - RNG Interrupt Control Register
 * - TRNG_INT_MASK - RNG Mask Register
 * - TRNG_INT_STATUS - RNG Interrupt Status Register
 * - TRNG_VID1 - RNG Version ID Register (MS)
 * - TRNG_VID2 - RNG Version ID Register (LS)
 */

#define TRNG_INSTANCE_COUNT (1U) /*!< Number of instances of the TRNG module. */
#define TRNG0_IDX (0U) /*!< Instance number for TRNG0. */

/*******************************************************************************
 * TRNG_MCTL - RNG Miscellaneous Control Register
 ******************************************************************************/

/*!
 * @brief TRNG_MCTL - RNG Miscellaneous Control Register (RW)
 *
 * Reset value: 0x00012001U
 *
 * This register is intended to be used for programming, configuring and testing
 * the RNG. It is the main register to read/write, in order to enable Entropy
 * generation, to stop entropy generation and to block access to entropy registers.
 * This is done via the special TRNG_ACC and PRGM bits below. The RNG
 * Miscellaneous Control Register is a read/write register used to control the RNG's True
 * Random Number Generator (TRNG) access, operation and test. Note that in many
 * cases two RNG registers share the same address, and a particular register at the
 * shared address is selected based upon the value in the PRGM field of the MCTL
 * register.
 */
/*!
 * @name Constants and macros for entire TRNG_MCTL register
 */
/*@{*/
#define TRNG_RD_MCTL(base)       (TRNG_MCTL_REG(base))
#define TRNG_WR_MCTL(base, value) (TRNG_MCTL_REG(base) = (value))
#define TRNG_RMW_MCTL(base, mask, value) (TRNG_WR_MCTL(base, (TRNG_RD_MCTL(base) & ~(mask)) | (value)))
#define TRNG_SET_MCTL(base, value) (BME_OR32(&TRNG_MCTL_REG(base), (uint32_t)(value)))
#define TRNG_CLR_MCTL(base, value) (BME_AND32(&TRNG_MCTL_REG(base), (uint32_t)(~(value))))
#define TRNG_TOG_MCTL(base, value) (BME_XOR32(&TRNG_MCTL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TRNG_MCTL bitfields
 */

/*!
 * @name Register TRNG_MCTL, field SAMP_MODE[1:0] (RW)
 *
 * Sample Mode. Determines the method of sampling the ring oscillator while
 * generating the Entropy value:This field is writable only if PRGM bit is 1, or PRGM
 * bit is being written to 1 simultaneously with writing this field. This field
 * is cleared to 01 by writing the RST_DEF bit to 1.
 *
 * Values:
 * - 0b00 - use Von Neumann data into both Entropy shifter and Statistical
 *     Checker
 * - 0b01 - use raw data into both Entropy shifter and Statistical Checker
 * - 0b10 - use Von Neumann data into Entropy shifter. Use raw data into
 *     Statistical Checker
 * - 0b11 - reserved.
 */
/*@{*/
/*! @brief Read current value of the TRNG_MCTL_SAMP_MODE field. */
#define TRNG_RD_MCTL_SAMP_MODE(base) ((TRNG_MCTL_REG(base) & TRNG_MCTL_SAMP_MODE_MASK) >> TRNG_MCTL_SAMP_MODE_SHIFT)
#define TRNG_BRD_MCTL_SAMP_MODE(base) (BME_UBFX32(&TRNG_MCTL_REG(base), TRNG_MCTL_SAMP_MODE_SHIFT, TRNG_MCTL_SAMP_MODE_WIDTH))

/*! @brief Set the SAMP_MODE field to a new value. */
#define TRNG_WR_MCTL_SAMP_MODE(base, value) (TRNG_RMW_MCTL(base, (TRNG_MCTL_SAMP_MODE_MASK | TRNG_MCTL_ERR_MASK), TRNG_MCTL_SAMP_MODE(value)))
#define TRNG_BWR_MCTL_SAMP_MODE(base, value) (BME_BFI32(&TRNG_MCTL_REG(base), ((uint32_t)(value) << TRNG_MCTL_SAMP_MODE_SHIFT), TRNG_MCTL_SAMP_MODE_SHIFT, TRNG_MCTL_SAMP_MODE_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_MCTL, field OSC_DIV[3:2] (RW)
 *
 * Oscillator Divide. Determines the amount of dividing done to the ring
 * oscillator before it is used by the TRNG.This field is writable only if PRGM bit is
 * 1, or PRGM bit is being written to 1 simultaneously to writing this field. This
 * field is cleared to 00 by writing the RST_DEF bit to 1.
 *
 * Values:
 * - 0b00 - use ring oscillator with no divide
 * - 0b01 - use ring oscillator divided-by-2
 * - 0b10 - use ring oscillator divided-by-4
 * - 0b11 - use ring oscillator divided-by-8
 */
/*@{*/
/*! @brief Read current value of the TRNG_MCTL_OSC_DIV field. */
#define TRNG_RD_MCTL_OSC_DIV(base) ((TRNG_MCTL_REG(base) & TRNG_MCTL_OSC_DIV_MASK) >> TRNG_MCTL_OSC_DIV_SHIFT)
#define TRNG_BRD_MCTL_OSC_DIV(base) (BME_UBFX32(&TRNG_MCTL_REG(base), TRNG_MCTL_OSC_DIV_SHIFT, TRNG_MCTL_OSC_DIV_WIDTH))

/*! @brief Set the OSC_DIV field to a new value. */
#define TRNG_WR_MCTL_OSC_DIV(base, value) (TRNG_RMW_MCTL(base, (TRNG_MCTL_OSC_DIV_MASK | TRNG_MCTL_ERR_MASK), TRNG_MCTL_OSC_DIV(value)))
#define TRNG_BWR_MCTL_OSC_DIV(base, value) (BME_BFI32(&TRNG_MCTL_REG(base), ((uint32_t)(value) << TRNG_MCTL_OSC_DIV_SHIFT), TRNG_MCTL_OSC_DIV_SHIFT, TRNG_MCTL_OSC_DIV_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_MCTL, field UNUSED[4] (RW)
 *
 * This bit is unused but write-able. Must be left as zero.
 */
/*@{*/
/*! @brief Read current value of the TRNG_MCTL_UNUSED field. */
#define TRNG_RD_MCTL_UNUSED(base) ((TRNG_MCTL_REG(base) & TRNG_MCTL_UNUSED_MASK) >> TRNG_MCTL_UNUSED_SHIFT)
#define TRNG_BRD_MCTL_UNUSED(base) (BME_UBFX32(&TRNG_MCTL_REG(base), TRNG_MCTL_UNUSED_SHIFT, TRNG_MCTL_UNUSED_WIDTH))

/*! @brief Set the UNUSED field to a new value. */
#define TRNG_WR_MCTL_UNUSED(base, value) (TRNG_RMW_MCTL(base, (TRNG_MCTL_UNUSED_MASK | TRNG_MCTL_ERR_MASK), TRNG_MCTL_UNUSED(value)))
#define TRNG_BWR_MCTL_UNUSED(base, value) (BME_BFI32(&TRNG_MCTL_REG(base), ((uint32_t)(value) << TRNG_MCTL_UNUSED_SHIFT), TRNG_MCTL_UNUSED_SHIFT, TRNG_MCTL_UNUSED_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_MCTL, field TRNG_ACC[5] (RW)
 *
 * TRNG Access Mode. If this bit is set to 1, the TRNG will generate an Entropy
 * value that can be read via the ENT0-ENT15 registers. The Entropy value may be
 * read once the ENT VAL bit is asserted. Also see ENTa register descriptions
 * (For a = 0 to 15).
 */
/*@{*/
/*! @brief Read current value of the TRNG_MCTL_TRNG_ACC field. */
#define TRNG_RD_MCTL_TRNG_ACC(base) ((TRNG_MCTL_REG(base) & TRNG_MCTL_TRNG_ACC_MASK) >> TRNG_MCTL_TRNG_ACC_SHIFT)
#define TRNG_BRD_MCTL_TRNG_ACC(base) (BME_UBFX32(&TRNG_MCTL_REG(base), TRNG_MCTL_TRNG_ACC_SHIFT, TRNG_MCTL_TRNG_ACC_WIDTH))

/*! @brief Set the TRNG_ACC field to a new value. */
#define TRNG_WR_MCTL_TRNG_ACC(base, value) (TRNG_RMW_MCTL(base, (TRNG_MCTL_TRNG_ACC_MASK | TRNG_MCTL_ERR_MASK), TRNG_MCTL_TRNG_ACC(value)))
#define TRNG_BWR_MCTL_TRNG_ACC(base, value) (BME_BFI32(&TRNG_MCTL_REG(base), ((uint32_t)(value) << TRNG_MCTL_TRNG_ACC_SHIFT), TRNG_MCTL_TRNG_ACC_SHIFT, TRNG_MCTL_TRNG_ACC_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_MCTL, field RST_DEF[6] (WO)
 *
 * Reset Defaults. Writing a 1 to this bit clears various TRNG registers, and
 * bits within registers, to their default state. This bit is writable only if PRGM
 * bit is 1, or PRGM bit is being written to 1 simultaneously to writing this
 * bit. Reading this bit always produces a 0.
 */
/*@{*/
/*! @brief Set the RST_DEF field to a new value. */
#define TRNG_WR_MCTL_RST_DEF(base, value) (TRNG_RMW_MCTL(base, (TRNG_MCTL_RST_DEF_MASK | TRNG_MCTL_ERR_MASK), TRNG_MCTL_RST_DEF(value)))
#define TRNG_BWR_MCTL_RST_DEF(base, value) (TRNG_WR_MCTL_RST_DEF(base, value))
/*@}*/

/*!
 * @name Register TRNG_MCTL, field FOR_SCLK[7] (RW)
 *
 * Force System Clock. If set, the system clock is used to operate the TRNG,
 * instead of the ring oscillator. This is for test use only, and indeterminate
 * results may occur. This bit is writable only if PRGM bit is 1, or PRGM bit is
 * being written to 1 simultaneously to writing this bit. This bit is cleared by
 * writing the RST_DEF bit to 1.
 */
/*@{*/
/*! @brief Read current value of the TRNG_MCTL_FOR_SCLK field. */
#define TRNG_RD_MCTL_FOR_SCLK(base) ((TRNG_MCTL_REG(base) & TRNG_MCTL_FOR_SCLK_MASK) >> TRNG_MCTL_FOR_SCLK_SHIFT)
#define TRNG_BRD_MCTL_FOR_SCLK(base) (BME_UBFX32(&TRNG_MCTL_REG(base), TRNG_MCTL_FOR_SCLK_SHIFT, TRNG_MCTL_FOR_SCLK_WIDTH))

/*! @brief Set the FOR_SCLK field to a new value. */
#define TRNG_WR_MCTL_FOR_SCLK(base, value) (TRNG_RMW_MCTL(base, (TRNG_MCTL_FOR_SCLK_MASK | TRNG_MCTL_ERR_MASK), TRNG_MCTL_FOR_SCLK(value)))
#define TRNG_BWR_MCTL_FOR_SCLK(base, value) (BME_BFI32(&TRNG_MCTL_REG(base), ((uint32_t)(value) << TRNG_MCTL_FOR_SCLK_SHIFT), TRNG_MCTL_FOR_SCLK_SHIFT, TRNG_MCTL_FOR_SCLK_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_MCTL, field FCT_FAIL[8] (RO)
 *
 * Read only: Frequency Count Fail. The frequency counter has detected a
 * failure. This may be due to improper programming of the FRQMAX and/or FRQMIN
 * registers, or a hardware failure in the ring oscillator. This error may be cleared by
 * writing a 1 to the ERR bit.
 */
/*@{*/
/*! @brief Read current value of the TRNG_MCTL_FCT_FAIL field. */
#define TRNG_RD_MCTL_FCT_FAIL(base) ((TRNG_MCTL_REG(base) & TRNG_MCTL_FCT_FAIL_MASK) >> TRNG_MCTL_FCT_FAIL_SHIFT)
#define TRNG_BRD_MCTL_FCT_FAIL(base) (BME_UBFX32(&TRNG_MCTL_REG(base), TRNG_MCTL_FCT_FAIL_SHIFT, TRNG_MCTL_FCT_FAIL_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_MCTL, field FCT_VAL[9] (RO)
 *
 * Read only: Frequency Count Valid. Indicates that a valid frequency count may
 * be read from FRQCNT.
 */
/*@{*/
/*! @brief Read current value of the TRNG_MCTL_FCT_VAL field. */
#define TRNG_RD_MCTL_FCT_VAL(base) ((TRNG_MCTL_REG(base) & TRNG_MCTL_FCT_VAL_MASK) >> TRNG_MCTL_FCT_VAL_SHIFT)
#define TRNG_BRD_MCTL_FCT_VAL(base) (BME_UBFX32(&TRNG_MCTL_REG(base), TRNG_MCTL_FCT_VAL_SHIFT, TRNG_MCTL_FCT_VAL_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_MCTL, field ENT_VAL[10] (RO)
 *
 * Read only: Entropy Valid. Will assert only if TRNG ACC bit is set, and then
 * after an entropy value is generated. Will be cleared when ENT15 is read. (ENT0
 * through ENT14 should be read before reading ENT15).
 */
/*@{*/
/*! @brief Read current value of the TRNG_MCTL_ENT_VAL field. */
#define TRNG_RD_MCTL_ENT_VAL(base) ((TRNG_MCTL_REG(base) & TRNG_MCTL_ENT_VAL_MASK) >> TRNG_MCTL_ENT_VAL_SHIFT)
#define TRNG_BRD_MCTL_ENT_VAL(base) (BME_UBFX32(&TRNG_MCTL_REG(base), TRNG_MCTL_ENT_VAL_SHIFT, TRNG_MCTL_ENT_VAL_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_MCTL, field TST_OUT[11] (RO)
 *
 * Read only: Test point inside ring oscillator.
 */
/*@{*/
/*! @brief Read current value of the TRNG_MCTL_TST_OUT field. */
#define TRNG_RD_MCTL_TST_OUT(base) ((TRNG_MCTL_REG(base) & TRNG_MCTL_TST_OUT_MASK) >> TRNG_MCTL_TST_OUT_SHIFT)
#define TRNG_BRD_MCTL_TST_OUT(base) (BME_UBFX32(&TRNG_MCTL_REG(base), TRNG_MCTL_TST_OUT_SHIFT, TRNG_MCTL_TST_OUT_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_MCTL, field ERR[12] (W1C)
 *
 * Read: Error status. 1 = error detected. 0 = no error.Write: Write 1 to clear
 * errors. Writing 0 has no effect.
 */
/*@{*/
/*! @brief Read current value of the TRNG_MCTL_ERR field. */
#define TRNG_RD_MCTL_ERR(base) ((TRNG_MCTL_REG(base) & TRNG_MCTL_ERR_MASK) >> TRNG_MCTL_ERR_SHIFT)
#define TRNG_BRD_MCTL_ERR(base) (BME_UBFX32(&TRNG_MCTL_REG(base), TRNG_MCTL_ERR_SHIFT, TRNG_MCTL_ERR_WIDTH))

/*! @brief Set the ERR field to a new value. */
#define TRNG_WR_MCTL_ERR(base, value) (TRNG_RMW_MCTL(base, TRNG_MCTL_ERR_MASK, TRNG_MCTL_ERR(value)))
#define TRNG_BWR_MCTL_ERR(base, value) (BME_BFI32(&TRNG_MCTL_REG(base), ((uint32_t)(value) << TRNG_MCTL_ERR_SHIFT), TRNG_MCTL_ERR_SHIFT, TRNG_MCTL_ERR_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_MCTL, field TSTOP_OK[13] (RO)
 *
 * TRNG_OK_TO_STOP. Software should check that this bit is a 1 before
 * transitioning RNG to low power mode (RNG clock stopped). RNG turns on the TRNG
 * free-running ring oscillator whenever new entropy is being generated and turns off the
 * ring oscillator when entropy generation is complete. If the RNG clock is
 * stopped while the TRNG ring oscillator is running, the oscillator will continue
 * running even though the RNG clock is stopped. TSTOP_OK is asserted when the TRNG
 * ring oscillator is not running. and therefore it is ok to stop the RNG clock.
 */
/*@{*/
/*! @brief Read current value of the TRNG_MCTL_TSTOP_OK field. */
#define TRNG_RD_MCTL_TSTOP_OK(base) ((TRNG_MCTL_REG(base) & TRNG_MCTL_TSTOP_OK_MASK) >> TRNG_MCTL_TSTOP_OK_SHIFT)
#define TRNG_BRD_MCTL_TSTOP_OK(base) (BME_UBFX32(&TRNG_MCTL_REG(base), TRNG_MCTL_TSTOP_OK_SHIFT, TRNG_MCTL_TSTOP_OK_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_MCTL, field PRGM[16] (RW)
 *
 * Programming Mode Select. When this bit is 1, the TRNG is in Program Mode,
 * otherwise it is in Run Mode. No Entropy value will be generated while the TRNG is
 * in Program Mode. Note that different RNG registers are accessible at the same
 * address depending on whether PRGM is set to 1 or 0. This is noted in the RNG
 * register descriptions.
 */
/*@{*/
/*! @brief Read current value of the TRNG_MCTL_PRGM field. */
#define TRNG_RD_MCTL_PRGM(base) ((TRNG_MCTL_REG(base) & TRNG_MCTL_PRGM_MASK) >> TRNG_MCTL_PRGM_SHIFT)
#define TRNG_BRD_MCTL_PRGM(base) (BME_UBFX32(&TRNG_MCTL_REG(base), TRNG_MCTL_PRGM_SHIFT, TRNG_MCTL_PRGM_WIDTH))

/*! @brief Set the PRGM field to a new value. */
#define TRNG_WR_MCTL_PRGM(base, value) (TRNG_RMW_MCTL(base, (TRNG_MCTL_PRGM_MASK | TRNG_MCTL_ERR_MASK), TRNG_MCTL_PRGM(value)))
#define TRNG_BWR_MCTL_PRGM(base, value) (BME_BFI32(&TRNG_MCTL_REG(base), ((uint32_t)(value) << TRNG_MCTL_PRGM_SHIFT), TRNG_MCTL_PRGM_SHIFT, TRNG_MCTL_PRGM_WIDTH))
/*@}*/

/*******************************************************************************
 * TRNG_SCMISC - RNG Statistical Check Miscellaneous Register
 ******************************************************************************/

/*!
 * @brief TRNG_SCMISC - RNG Statistical Check Miscellaneous Register (RW)
 *
 * Reset value: 0x0001001FU
 *
 * The RNG Statistical Check Miscellaneous Register contains the Long Run
 * Maximum Limit value and the Retry Count value. This register is accessible only when
 * the MCTL[PRGM] bit is 1, otherwise this register will read zeroes, and cannot
 * be written.
 */
/*!
 * @name Constants and macros for entire TRNG_SCMISC register
 */
/*@{*/
#define TRNG_RD_SCMISC(base)     (TRNG_SCMISC_REG(base))
#define TRNG_WR_SCMISC(base, value) (TRNG_SCMISC_REG(base) = (value))
#define TRNG_RMW_SCMISC(base, mask, value) (TRNG_WR_SCMISC(base, (TRNG_RD_SCMISC(base) & ~(mask)) | (value)))
#define TRNG_SET_SCMISC(base, value) (BME_OR32(&TRNG_SCMISC_REG(base), (uint32_t)(value)))
#define TRNG_CLR_SCMISC(base, value) (BME_AND32(&TRNG_SCMISC_REG(base), (uint32_t)(~(value))))
#define TRNG_TOG_SCMISC(base, value) (BME_XOR32(&TRNG_SCMISC_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TRNG_SCMISC bitfields
 */

/*!
 * @name Register TRNG_SCMISC, field LRUN_MAX[7:0] (RW)
 *
 * LONG RUN MAX LIMIT. This value is the largest allowable number of consecutive
 * samples of all 1, or all 0, that is allowed during the Entropy generation.
 * This field is writable only if MCTL[PRGM] bit is 1. This field will read zeroes
 * if MCTL[PRGM] = 0. This field is cleared to 22h by writing the MCTL[RST_DEF]
 * bit to 1.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCMISC_LRUN_MAX field. */
#define TRNG_RD_SCMISC_LRUN_MAX(base) ((TRNG_SCMISC_REG(base) & TRNG_SCMISC_LRUN_MAX_MASK) >> TRNG_SCMISC_LRUN_MAX_SHIFT)
#define TRNG_BRD_SCMISC_LRUN_MAX(base) (BME_UBFX32(&TRNG_SCMISC_REG(base), TRNG_SCMISC_LRUN_MAX_SHIFT, TRNG_SCMISC_LRUN_MAX_WIDTH))

/*! @brief Set the LRUN_MAX field to a new value. */
#define TRNG_WR_SCMISC_LRUN_MAX(base, value) (TRNG_RMW_SCMISC(base, TRNG_SCMISC_LRUN_MAX_MASK, TRNG_SCMISC_LRUN_MAX(value)))
#define TRNG_BWR_SCMISC_LRUN_MAX(base, value) (BME_BFI32(&TRNG_SCMISC_REG(base), ((uint32_t)(value) << TRNG_SCMISC_LRUN_MAX_SHIFT), TRNG_SCMISC_LRUN_MAX_SHIFT, TRNG_SCMISC_LRUN_MAX_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_SCMISC, field RTY_CT[19:16] (RW)
 *
 * RETRY COUNT. If a statistical check fails during the TRNG Entropy Generation,
 * the RTY_CT value indicates the number of times a retry should occur before
 * generating an error. This field is writable only if MCTL[PRGM] bit is 1. This
 * field will read zeroes if MCTL[PRGM] = 0. This field is cleared to 1h by writing
 * the MCTL[RST_DEF] bit to 1.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCMISC_RTY_CT field. */
#define TRNG_RD_SCMISC_RTY_CT(base) ((TRNG_SCMISC_REG(base) & TRNG_SCMISC_RTY_CT_MASK) >> TRNG_SCMISC_RTY_CT_SHIFT)
#define TRNG_BRD_SCMISC_RTY_CT(base) (BME_UBFX32(&TRNG_SCMISC_REG(base), TRNG_SCMISC_RTY_CT_SHIFT, TRNG_SCMISC_RTY_CT_WIDTH))

/*! @brief Set the RTY_CT field to a new value. */
#define TRNG_WR_SCMISC_RTY_CT(base, value) (TRNG_RMW_SCMISC(base, TRNG_SCMISC_RTY_CT_MASK, TRNG_SCMISC_RTY_CT(value)))
#define TRNG_BWR_SCMISC_RTY_CT(base, value) (BME_BFI32(&TRNG_SCMISC_REG(base), ((uint32_t)(value) << TRNG_SCMISC_RTY_CT_SHIFT), TRNG_SCMISC_RTY_CT_SHIFT, TRNG_SCMISC_RTY_CT_WIDTH))
/*@}*/

/*******************************************************************************
 * TRNG_PKRRNG - RNG Poker Range Register
 ******************************************************************************/

/*!
 * @brief TRNG_PKRRNG - RNG Poker Range Register (RW)
 *
 * Reset value: 0x000009A3U
 *
 * The RNG Poker Range Register defines the difference between the TRNG Poker
 * Maximum Limit and the minimum limit. These limits are used during the TRNG
 * Statistical Check Poker Test.
 */
/*!
 * @name Constants and macros for entire TRNG_PKRRNG register
 */
/*@{*/
#define TRNG_RD_PKRRNG(base)     (TRNG_PKRRNG_REG(base))
#define TRNG_WR_PKRRNG(base, value) (TRNG_PKRRNG_REG(base) = (value))
#define TRNG_RMW_PKRRNG(base, mask, value) (TRNG_WR_PKRRNG(base, (TRNG_RD_PKRRNG(base) & ~(mask)) | (value)))
#define TRNG_SET_PKRRNG(base, value) (BME_OR32(&TRNG_PKRRNG_REG(base), (uint32_t)(value)))
#define TRNG_CLR_PKRRNG(base, value) (BME_AND32(&TRNG_PKRRNG_REG(base), (uint32_t)(~(value))))
#define TRNG_TOG_PKRRNG(base, value) (BME_XOR32(&TRNG_PKRRNG_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TRNG_PKRRNG bitfields
 */

/*!
 * @name Register TRNG_PKRRNG, field PKR_RNG[15:0] (RW)
 *
 * Poker Range. During the TRNG Statistical Checks, a "Poker Test" is run which
 * requires a maximum and minimum limit. The maximum is programmed in the
 * RTPKRMAX[PKR_MAX] register, and the minimum is derived by subtracting the PKR_RNG
 * value from the programmed maximum value. This field is writable only if
 * MCTL[PRGM] bit is 1. This field will read zeroes if MCTL[PRGM] = 0. This field is
 * cleared to 09A3h (decimal 2467) by writing the MCTL[RST_DEF] bit to 1. Note that
 * the minimum allowable Poker result is PKR_MAX - PKR_RNG + 1.
 */
/*@{*/
/*! @brief Read current value of the TRNG_PKRRNG_PKR_RNG field. */
#define TRNG_RD_PKRRNG_PKR_RNG(base) ((TRNG_PKRRNG_REG(base) & TRNG_PKRRNG_PKR_RNG_MASK) >> TRNG_PKRRNG_PKR_RNG_SHIFT)
#define TRNG_BRD_PKRRNG_PKR_RNG(base) (TRNG_RD_PKRRNG_PKR_RNG(base))

/*! @brief Set the PKR_RNG field to a new value. */
#define TRNG_WR_PKRRNG_PKR_RNG(base, value) (TRNG_RMW_PKRRNG(base, TRNG_PKRRNG_PKR_RNG_MASK, TRNG_PKRRNG_PKR_RNG(value)))
#define TRNG_BWR_PKRRNG_PKR_RNG(base, value) (TRNG_WR_PKRRNG_PKR_RNG(base, value))
/*@}*/

/*******************************************************************************
 * TRNG_PKRMAX - RNG Poker Maximum Limit Register
 ******************************************************************************/

/*!
 * @brief TRNG_PKRMAX - RNG Poker Maximum Limit Register (RW)
 *
 * Reset value: 0x00006920U
 *
 * The RNG Poker Maximum Limit Register defines Maximum Limit allowable during
 * the TRNG Statistical Check Poker Test. Note that this offset (0xBASE_060C) is
 * used as PKRMAX only if MCTL[PRGM] is 1. If MCTL[PRGM] is 0, this offset is used
 * as the PKRSQ readback register.
 */
/*!
 * @name Constants and macros for entire TRNG_PKRMAX register
 */
/*@{*/
#define TRNG_RD_PKRMAX(base)     (TRNG_PKRMAX_REG(base))
#define TRNG_WR_PKRMAX(base, value) (TRNG_PKRMAX_REG(base) = (value))
#define TRNG_RMW_PKRMAX(base, mask, value) (TRNG_WR_PKRMAX(base, (TRNG_RD_PKRMAX(base) & ~(mask)) | (value)))
#define TRNG_SET_PKRMAX(base, value) (BME_OR32(&TRNG_PKRMAX_REG(base), (uint32_t)(value)))
#define TRNG_CLR_PKRMAX(base, value) (BME_AND32(&TRNG_PKRMAX_REG(base), (uint32_t)(~(value))))
#define TRNG_TOG_PKRMAX(base, value) (BME_XOR32(&TRNG_PKRMAX_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TRNG_PKRMAX bitfields
 */

/*!
 * @name Register TRNG_PKRMAX, field PKR_MAX[23:0] (RW)
 *
 * Poker Maximum Limit. During the TRNG Statistical Checks, a "Poker Test" is
 * run which requires a maximum and minimum limit. The maximum allowable result is
 * programmed in the PKRMAX[PKR_MAX] register. This field is writable only if
 * MCTL[PRGM] bit is 1. This register is cleared to 006920h (decimal 26912) by
 * writing the MCTL[RST_DEF] bit to 1. Note that the PKRMAX and PKRRNG registers
 * combined are used to define the minimum allowable Poker result, which is PKR_MAX -
 * PKR_RNG + 1. Note that if MCTL[PRGM] bit is 0, this register address is used
 * to read the Poker Test Square Calculation result in register PKRSQ, as defined
 * in the following section.
 */
/*@{*/
/*! @brief Read current value of the TRNG_PKRMAX_PKR_MAX field. */
#define TRNG_RD_PKRMAX_PKR_MAX(base) ((TRNG_PKRMAX_REG(base) & TRNG_PKRMAX_PKR_MAX_MASK) >> TRNG_PKRMAX_PKR_MAX_SHIFT)
#define TRNG_BRD_PKRMAX_PKR_MAX(base) (TRNG_RD_PKRMAX_PKR_MAX(base))

/*! @brief Set the PKR_MAX field to a new value. */
#define TRNG_WR_PKRMAX_PKR_MAX(base, value) (TRNG_RMW_PKRMAX(base, TRNG_PKRMAX_PKR_MAX_MASK, TRNG_PKRMAX_PKR_MAX(value)))
#define TRNG_BWR_PKRMAX_PKR_MAX(base, value) (TRNG_WR_PKRMAX_PKR_MAX(base, value))
/*@}*/

/*******************************************************************************
 * TRNG_PKRSQ - RNG Poker Square Calculation Result Register
 ******************************************************************************/

/*!
 * @brief TRNG_PKRSQ - RNG Poker Square Calculation Result Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The RNG Poker Square Calculation Result Register is a read-only register used
 * to read the result of the TRNG Statistical Check Poker Test's Square
 * Calculation. This test starts with the PKRMAX value and decreases towards a final
 * result, which is read here. For the Poker Test to pass, this final result must be
 * less than the programmed PKRRNG value. Note that this offset (0xBASE_060C) is
 * used as PKRMAX if MCTL[PRGM] is 1. If MCTL[PRGM] is 0, this offset is used as
 * PKRSQ readback register, as described here.
 */
/*!
 * @name Constants and macros for entire TRNG_PKRSQ register
 */
/*@{*/
#define TRNG_RD_PKRSQ(base)      (TRNG_PKRSQ_REG(base))
/*@}*/

/*
 * Constants & macros for individual TRNG_PKRSQ bitfields
 */

/*!
 * @name Register TRNG_PKRSQ, field PKR_SQ[23:0] (RO)
 *
 * Poker Square Calculation Result. During the TRNG Statistical Checks, a "Poker
 * Test" is run which starts with the value PKRMAX[PKR_MAX]. This value
 * decreases according to a "sum of squares" algorithm, and must remain greater than
 * zero, but less than the PKRRNG[PKR_RNG] limit. The resulting value may be read
 * through this register, if MCTL[PRGM] bit is 0. Note that if MCTL[PRGM] bit is 1,
 * this register address is used to access the Poker Test Maximum Limit in
 * register PKRMAX, as defined in the previous section.
 */
/*@{*/
/*! @brief Read current value of the TRNG_PKRSQ_PKR_SQ field. */
#define TRNG_RD_PKRSQ_PKR_SQ(base) ((TRNG_PKRSQ_REG(base) & TRNG_PKRSQ_PKR_SQ_MASK) >> TRNG_PKRSQ_PKR_SQ_SHIFT)
#define TRNG_BRD_PKRSQ_PKR_SQ(base) (TRNG_RD_PKRSQ_PKR_SQ(base))
/*@}*/

/*******************************************************************************
 * TRNG_SDCTL - RNG Seed Control Register
 ******************************************************************************/

/*!
 * @brief TRNG_SDCTL - RNG Seed Control Register (RW)
 *
 * Reset value: 0x0C8009C4U
 *
 * The RNG Seed Control Register contains two fields. One field defines the
 * length (in system clocks) of each Entropy sample (ENT_DLY), and the other field
 * indicates the number of samples that will taken during each TRNG Entropy
 * generation (SAMP_SIZE).
 */
/*!
 * @name Constants and macros for entire TRNG_SDCTL register
 */
/*@{*/
#define TRNG_RD_SDCTL(base)      (TRNG_SDCTL_REG(base))
#define TRNG_WR_SDCTL(base, value) (TRNG_SDCTL_REG(base) = (value))
#define TRNG_RMW_SDCTL(base, mask, value) (TRNG_WR_SDCTL(base, (TRNG_RD_SDCTL(base) & ~(mask)) | (value)))
#define TRNG_SET_SDCTL(base, value) (BME_OR32(&TRNG_SDCTL_REG(base), (uint32_t)(value)))
#define TRNG_CLR_SDCTL(base, value) (BME_AND32(&TRNG_SDCTL_REG(base), (uint32_t)(~(value))))
#define TRNG_TOG_SDCTL(base, value) (BME_XOR32(&TRNG_SDCTL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TRNG_SDCTL bitfields
 */

/*!
 * @name Register TRNG_SDCTL, field SAMP_SIZE[15:0] (RW)
 *
 * Sample Size. Defines the total number of Entropy samples that will be taken
 * during Entropy generation. This field is writable only if MCTL[PRGM] bit is 1.
 * This field will read zeroes if MCTL[PRGM] = 0. This field is cleared to 09C4h
 * (decimal 2500) by writing the MCTL[RST_DEF] bit to 1.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SDCTL_SAMP_SIZE field. */
#define TRNG_RD_SDCTL_SAMP_SIZE(base) ((TRNG_SDCTL_REG(base) & TRNG_SDCTL_SAMP_SIZE_MASK) >> TRNG_SDCTL_SAMP_SIZE_SHIFT)
#define TRNG_BRD_SDCTL_SAMP_SIZE(base) (TRNG_RD_SDCTL_SAMP_SIZE(base))

/*! @brief Set the SAMP_SIZE field to a new value. */
#define TRNG_WR_SDCTL_SAMP_SIZE(base, value) (TRNG_RMW_SDCTL(base, TRNG_SDCTL_SAMP_SIZE_MASK, TRNG_SDCTL_SAMP_SIZE(value)))
#define TRNG_BWR_SDCTL_SAMP_SIZE(base, value) (TRNG_WR_SDCTL_SAMP_SIZE(base, value))
/*@}*/

/*!
 * @name Register TRNG_SDCTL, field ENT_DLY[31:16] (RW)
 *
 * Entropy Delay. Defines the length (in system clocks) of each Entropy sample
 * taken. This field is writable only if MCTL[PRGM] bit is 1. This field will read
 * zeroes if MCTL[PRGM] = 0. This field is cleared to 0C80h (decimal 3200) by
 * writing the MCTL[RST_DEF] bit to 1.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SDCTL_ENT_DLY field. */
#define TRNG_RD_SDCTL_ENT_DLY(base) ((TRNG_SDCTL_REG(base) & TRNG_SDCTL_ENT_DLY_MASK) >> TRNG_SDCTL_ENT_DLY_SHIFT)
#define TRNG_BRD_SDCTL_ENT_DLY(base) (TRNG_RD_SDCTL_ENT_DLY(base))

/*! @brief Set the ENT_DLY field to a new value. */
#define TRNG_WR_SDCTL_ENT_DLY(base, value) (TRNG_RMW_SDCTL(base, TRNG_SDCTL_ENT_DLY_MASK, TRNG_SDCTL_ENT_DLY(value)))
#define TRNG_BWR_SDCTL_ENT_DLY(base, value) (TRNG_WR_SDCTL_ENT_DLY(base, value))
/*@}*/

/*******************************************************************************
 * TRNG_SBLIM - RNG Sparse Bit Limit Register
 ******************************************************************************/

/*!
 * @brief TRNG_SBLIM - RNG Sparse Bit Limit Register (RW)
 *
 * Reset value: 0x0000003FU
 *
 * The RNG Sparse Bit Limit Register is used when Von Neumann sampling is
 * selected during Entropy Generation. It defines the maximum number of consecutive Von
 * Neumann samples which may be discarded before an error is generated. Note
 * that this address (0xBASE_0614) is used as SBLIM only if MCTL[PRGM] is 1. If
 * MCTL[PRGM] is 0, this address is used as TOTSAM readback register.
 */
/*!
 * @name Constants and macros for entire TRNG_SBLIM register
 */
/*@{*/
#define TRNG_RD_SBLIM(base)      (TRNG_SBLIM_REG(base))
#define TRNG_WR_SBLIM(base, value) (TRNG_SBLIM_REG(base) = (value))
#define TRNG_RMW_SBLIM(base, mask, value) (TRNG_WR_SBLIM(base, (TRNG_RD_SBLIM(base) & ~(mask)) | (value)))
#define TRNG_SET_SBLIM(base, value) (BME_OR32(&TRNG_SBLIM_REG(base), (uint32_t)(value)))
#define TRNG_CLR_SBLIM(base, value) (BME_AND32(&TRNG_SBLIM_REG(base), (uint32_t)(~(value))))
#define TRNG_TOG_SBLIM(base, value) (BME_XOR32(&TRNG_SBLIM_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TRNG_SBLIM bitfields
 */

/*!
 * @name Register TRNG_SBLIM, field SB_LIM[9:0] (RW)
 *
 * Sparse Bit Limit. During Von Neumann sampling (if enabled by MCTL[SAMP_MODE],
 * samples are discarded if two consecutive raw samples are both 0 or both 1. If
 * this discarding occurs for a long period of time, it indicates that there is
 * insufficient Entropy. The Sparse Bit Limit defines the maximum number of
 * consecutive samples that may be discarded before an error is generated. This field
 * is writable only if MCTL[PRGM] bit is 1. This register is cleared to 03hF by
 * writing the MCTL[RST_DEF] bit to 1. Note that if MCTL[PRGM] bit is 0, this
 * register address is used to read the Total Samples count in register TOTSAM, as
 * defined in the following section.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SBLIM_SB_LIM field. */
#define TRNG_RD_SBLIM_SB_LIM(base) ((TRNG_SBLIM_REG(base) & TRNG_SBLIM_SB_LIM_MASK) >> TRNG_SBLIM_SB_LIM_SHIFT)
#define TRNG_BRD_SBLIM_SB_LIM(base) (TRNG_RD_SBLIM_SB_LIM(base))

/*! @brief Set the SB_LIM field to a new value. */
#define TRNG_WR_SBLIM_SB_LIM(base, value) (TRNG_RMW_SBLIM(base, TRNG_SBLIM_SB_LIM_MASK, TRNG_SBLIM_SB_LIM(value)))
#define TRNG_BWR_SBLIM_SB_LIM(base, value) (TRNG_WR_SBLIM_SB_LIM(base, value))
/*@}*/

/*******************************************************************************
 * TRNG_TOTSAM - RNG Total Samples Register
 ******************************************************************************/

/*!
 * @brief TRNG_TOTSAM - RNG Total Samples Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The RNG Total Samples Register is a read-only register used to read the total
 * number of samples taken during Entropy generation. It is used to give an
 * indication of how often a sample is actually used during Von Neumann sampling.
 * Note that this offset (0xBASE_0614) is used as SBLIM if MCTL[PRGM] is 1. If
 * MCTL[PRGM] is 0, this offset is used as TOTSAM readback register, as described here.
 */
/*!
 * @name Constants and macros for entire TRNG_TOTSAM register
 */
/*@{*/
#define TRNG_RD_TOTSAM(base)     (TRNG_TOTSAM_REG(base))
/*@}*/

/*
 * Constants & macros for individual TRNG_TOTSAM bitfields
 */

/*!
 * @name Register TRNG_TOTSAM, field TOT_SAM[19:0] (RO)
 *
 * Total Samples. During Entropy generation, the total number of raw samples is
 * counted. This count is useful in determining how often a sample is used during
 * Von Neumann sampling. The count may be read through this register, if
 * MCTL[PRGM] bit is 0. Note that if MCTL[PRGM] bit is 1, this register address is used
 * to access the Sparse Bit Limit in register SBLIM, as defined in the previous
 * section.
 */
/*@{*/
/*! @brief Read current value of the TRNG_TOTSAM_TOT_SAM field. */
#define TRNG_RD_TOTSAM_TOT_SAM(base) ((TRNG_TOTSAM_REG(base) & TRNG_TOTSAM_TOT_SAM_MASK) >> TRNG_TOTSAM_TOT_SAM_SHIFT)
#define TRNG_BRD_TOTSAM_TOT_SAM(base) (TRNG_RD_TOTSAM_TOT_SAM(base))
/*@}*/

/*******************************************************************************
 * TRNG_FRQMIN - RNG Frequency Count Minimum Limit Register
 ******************************************************************************/

/*!
 * @brief TRNG_FRQMIN - RNG Frequency Count Minimum Limit Register (RW)
 *
 * Reset value: 0x00000640U
 *
 * The RNG Frequency Count Minimum Limit Register defines the minimum allowable
 * count taken by the Entropy sample counter during each Entropy sample. During
 * any sample period, if the count is less than this programmed minimum, a
 * Frequency Count Fail is flagged in MCTL[FCT_FAIL] and an error is generated.
 */
/*!
 * @name Constants and macros for entire TRNG_FRQMIN register
 */
/*@{*/
#define TRNG_RD_FRQMIN(base)     (TRNG_FRQMIN_REG(base))
#define TRNG_WR_FRQMIN(base, value) (TRNG_FRQMIN_REG(base) = (value))
#define TRNG_RMW_FRQMIN(base, mask, value) (TRNG_WR_FRQMIN(base, (TRNG_RD_FRQMIN(base) & ~(mask)) | (value)))
#define TRNG_SET_FRQMIN(base, value) (BME_OR32(&TRNG_FRQMIN_REG(base), (uint32_t)(value)))
#define TRNG_CLR_FRQMIN(base, value) (BME_AND32(&TRNG_FRQMIN_REG(base), (uint32_t)(~(value))))
#define TRNG_TOG_FRQMIN(base, value) (BME_XOR32(&TRNG_FRQMIN_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TRNG_FRQMIN bitfields
 */

/*!
 * @name Register TRNG_FRQMIN, field FRQ_MIN[21:0] (RW)
 *
 * Frequency Count Minimum Limit. Defines the minimum allowable count taken
 * during each entropy sample. This field is writable only if MCTL[PRGM] bit is 1.
 * This field will read zeroes if MCTL[PRGM] = 0. This field is cleared to 0000h64
 * by writing the MCTL[RST_DEF] bit to 1.
 */
/*@{*/
/*! @brief Read current value of the TRNG_FRQMIN_FRQ_MIN field. */
#define TRNG_RD_FRQMIN_FRQ_MIN(base) ((TRNG_FRQMIN_REG(base) & TRNG_FRQMIN_FRQ_MIN_MASK) >> TRNG_FRQMIN_FRQ_MIN_SHIFT)
#define TRNG_BRD_FRQMIN_FRQ_MIN(base) (TRNG_RD_FRQMIN_FRQ_MIN(base))

/*! @brief Set the FRQ_MIN field to a new value. */
#define TRNG_WR_FRQMIN_FRQ_MIN(base, value) (TRNG_RMW_FRQMIN(base, TRNG_FRQMIN_FRQ_MIN_MASK, TRNG_FRQMIN_FRQ_MIN(value)))
#define TRNG_BWR_FRQMIN_FRQ_MIN(base, value) (TRNG_WR_FRQMIN_FRQ_MIN(base, value))
/*@}*/

/*******************************************************************************
 * TRNG_FRQMAX - RNG Frequency Count Maximum Limit Register
 ******************************************************************************/

/*!
 * @brief TRNG_FRQMAX - RNG Frequency Count Maximum Limit Register (RW)
 *
 * Reset value: 0x00006400U
 *
 * The RNG Frequency Count Maximum Limit Register defines the maximum allowable
 * count taken by the Entropy sample counter during each Entropy sample. During
 * any sample period, if the count is greater than this programmed maximum, a
 * Frequency Count Fail is flagged in MCTL[FCT_FAIL] and an error is generated. Note
 * that this address (061C) is used as FRQMAX only if MCTL[PRGM] is 1. If
 * MCTL[PRGM] is 0, this address is used as FRQCNT readback register.
 */
/*!
 * @name Constants and macros for entire TRNG_FRQMAX register
 */
/*@{*/
#define TRNG_RD_FRQMAX(base)     (TRNG_FRQMAX_REG(base))
#define TRNG_WR_FRQMAX(base, value) (TRNG_FRQMAX_REG(base) = (value))
#define TRNG_RMW_FRQMAX(base, mask, value) (TRNG_WR_FRQMAX(base, (TRNG_RD_FRQMAX(base) & ~(mask)) | (value)))
#define TRNG_SET_FRQMAX(base, value) (BME_OR32(&TRNG_FRQMAX_REG(base), (uint32_t)(value)))
#define TRNG_CLR_FRQMAX(base, value) (BME_AND32(&TRNG_FRQMAX_REG(base), (uint32_t)(~(value))))
#define TRNG_TOG_FRQMAX(base, value) (BME_XOR32(&TRNG_FRQMAX_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TRNG_FRQMAX bitfields
 */

/*!
 * @name Register TRNG_FRQMAX, field FRQ_MAX[21:0] (RW)
 *
 * Frequency Counter Maximum Limit. Defines the maximum allowable count taken
 * during each entropy sample. This field is writable only if MCTL[PRGM] bit is 1.
 * This register is cleared to 000640h by writing the MCTL[RST_DEF] bit to 1.
 * Note that if MCTL[PRGM] bit is 0, this register address is used to read the
 * Frequency Count result in register FRQCNT, as defined in the following section.
 */
/*@{*/
/*! @brief Read current value of the TRNG_FRQMAX_FRQ_MAX field. */
#define TRNG_RD_FRQMAX_FRQ_MAX(base) ((TRNG_FRQMAX_REG(base) & TRNG_FRQMAX_FRQ_MAX_MASK) >> TRNG_FRQMAX_FRQ_MAX_SHIFT)
#define TRNG_BRD_FRQMAX_FRQ_MAX(base) (TRNG_RD_FRQMAX_FRQ_MAX(base))

/*! @brief Set the FRQ_MAX field to a new value. */
#define TRNG_WR_FRQMAX_FRQ_MAX(base, value) (TRNG_RMW_FRQMAX(base, TRNG_FRQMAX_FRQ_MAX_MASK, TRNG_FRQMAX_FRQ_MAX(value)))
#define TRNG_BWR_FRQMAX_FRQ_MAX(base, value) (TRNG_WR_FRQMAX_FRQ_MAX(base, value))
/*@}*/

/*******************************************************************************
 * TRNG_FRQCNT - RNG Frequency Count Register
 ******************************************************************************/

/*!
 * @brief TRNG_FRQCNT - RNG Frequency Count Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The RNG Frequency Count Register is a read-only register used to read the
 * frequency counter within the TRNG entropy generator. It will read all zeroes
 * unless MCTL[TRNG_ACC] = 1. Note that this offset (0xBASE_061C) is used as FRQMAX
 * if MCTL[PRGM] is 1. If MCTL[PRGM] is 0, this offset is used as FRQCNT readback
 * register, as described here.
 */
/*!
 * @name Constants and macros for entire TRNG_FRQCNT register
 */
/*@{*/
#define TRNG_RD_FRQCNT(base)     (TRNG_FRQCNT_REG(base))
/*@}*/

/*
 * Constants & macros for individual TRNG_FRQCNT bitfields
 */

/*!
 * @name Register TRNG_FRQCNT, field FRQ_CT[21:0] (RO)
 *
 * Frequency Count. If MCTL[TRNG_ACC] = 1, reads a sample frequency count taken
 * during entropy generation. Requires MCTL[PRGM] = 0. Note that if MCTL[PRGM]
 * bit is 1, this register address is used to access the Poker Test Maximum Limit
 * in register PKRMAX, as defined in the previous section.
 */
/*@{*/
/*! @brief Read current value of the TRNG_FRQCNT_FRQ_CT field. */
#define TRNG_RD_FRQCNT_FRQ_CT(base) ((TRNG_FRQCNT_REG(base) & TRNG_FRQCNT_FRQ_CT_MASK) >> TRNG_FRQCNT_FRQ_CT_SHIFT)
#define TRNG_BRD_FRQCNT_FRQ_CT(base) (TRNG_RD_FRQCNT_FRQ_CT(base))
/*@}*/

/*******************************************************************************
 * TRNG_SCMC - RNG Statistical Check Monobit Count Register
 ******************************************************************************/

/*!
 * @brief TRNG_SCMC - RNG Statistical Check Monobit Count Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The RNG Statistical Check Monobit Count Register is a read-only register used
 * to read the final monobit count after entropy generation. This counter starts
 * with the value in SCML[MONO_MAX], and is decremented each time a one is
 * sampled. Note that this offset (0xBASE_0620) is used as SCML if MCTL[PRGM] is 1. If
 * MCTL[PRGM] is 0, this offset is used as SCMC readback register, as described
 * here.
 */
/*!
 * @name Constants and macros for entire TRNG_SCMC register
 */
/*@{*/
#define TRNG_RD_SCMC(base)       (TRNG_SCMC_REG(base))
/*@}*/

/*
 * Constants & macros for individual TRNG_SCMC bitfields
 */

/*!
 * @name Register TRNG_SCMC, field MONO_CT[15:0] (RO)
 *
 * Monobit Count. Reads the final Monobit count after entropy generation.
 * Requires MCTL[PRGM] = 0. Note that if MCTL[PRGM] bit is 1, this register address is
 * used to access the Statistical Check Monobit Limit in register SCML, as
 * defined in the previous section.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCMC_MONO_CT field. */
#define TRNG_RD_SCMC_MONO_CT(base) ((TRNG_SCMC_REG(base) & TRNG_SCMC_MONO_CT_MASK) >> TRNG_SCMC_MONO_CT_SHIFT)
#define TRNG_BRD_SCMC_MONO_CT(base) (TRNG_RD_SCMC_MONO_CT(base))
/*@}*/

/*******************************************************************************
 * TRNG_SCML - RNG Statistical Check Monobit Limit Register
 ******************************************************************************/

/*!
 * @brief TRNG_SCML - RNG Statistical Check Monobit Limit Register (RW)
 *
 * Reset value: 0x010C0568U
 *
 * The RNG Statistical Check Monobit Limit Register defines the allowable
 * maximum and minimum number of ones/zero detected during entropy generation. To pass
 * the test, the number of ones/zeroes generated must be less than the programmed
 * maximum value, and the number of ones/zeroes generated must be greater than
 * (maximum - range). If this test fails, the Retry Counter in SCMISC will be
 * decremented, and a retry will occur if the Retry Count has not reached zero. If
 * the Retry Count has reached zero, an error will be generated. Note that this
 * offset (0xBASE_0620) is used as SCML only if MCTL[PRGM] is 1. If MCTL[PRGM] is 0,
 * this offset is used as SCMC readback register.
 */
/*!
 * @name Constants and macros for entire TRNG_SCML register
 */
/*@{*/
#define TRNG_RD_SCML(base)       (TRNG_SCML_REG(base))
#define TRNG_WR_SCML(base, value) (TRNG_SCML_REG(base) = (value))
#define TRNG_RMW_SCML(base, mask, value) (TRNG_WR_SCML(base, (TRNG_RD_SCML(base) & ~(mask)) | (value)))
#define TRNG_SET_SCML(base, value) (BME_OR32(&TRNG_SCML_REG(base), (uint32_t)(value)))
#define TRNG_CLR_SCML(base, value) (BME_AND32(&TRNG_SCML_REG(base), (uint32_t)(~(value))))
#define TRNG_TOG_SCML(base, value) (BME_XOR32(&TRNG_SCML_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TRNG_SCML bitfields
 */

/*!
 * @name Register TRNG_SCML, field MONO_MAX[15:0] (RW)
 *
 * Monobit Maximum Limit. Defines the maximum allowable count taken during
 * entropy generation. The number of ones/zeroes detected during entropy generation
 * must be less than MONO_MAX, else a retry or error will occur. This register is
 * cleared to 00056Bh (decimal 1387) by writing the MCTL[RST_DEF] bit to 1.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCML_MONO_MAX field. */
#define TRNG_RD_SCML_MONO_MAX(base) ((TRNG_SCML_REG(base) & TRNG_SCML_MONO_MAX_MASK) >> TRNG_SCML_MONO_MAX_SHIFT)
#define TRNG_BRD_SCML_MONO_MAX(base) (TRNG_RD_SCML_MONO_MAX(base))

/*! @brief Set the MONO_MAX field to a new value. */
#define TRNG_WR_SCML_MONO_MAX(base, value) (TRNG_RMW_SCML(base, TRNG_SCML_MONO_MAX_MASK, TRNG_SCML_MONO_MAX(value)))
#define TRNG_BWR_SCML_MONO_MAX(base, value) (TRNG_WR_SCML_MONO_MAX(base, value))
/*@}*/

/*!
 * @name Register TRNG_SCML, field MONO_RNG[31:16] (RW)
 *
 * Monobit Range. The number of ones/zeroes detected during entropy generation
 * must be greater than MONO_MAX - MONO_RNG, else a retry or error will occur.
 * This register is cleared to 000112h (decimal 274) by writing the MCTL[RST_DEF]
 * bit to 1.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCML_MONO_RNG field. */
#define TRNG_RD_SCML_MONO_RNG(base) ((TRNG_SCML_REG(base) & TRNG_SCML_MONO_RNG_MASK) >> TRNG_SCML_MONO_RNG_SHIFT)
#define TRNG_BRD_SCML_MONO_RNG(base) (TRNG_RD_SCML_MONO_RNG(base))

/*! @brief Set the MONO_RNG field to a new value. */
#define TRNG_WR_SCML_MONO_RNG(base, value) (TRNG_RMW_SCML(base, TRNG_SCML_MONO_RNG_MASK, TRNG_SCML_MONO_RNG(value)))
#define TRNG_BWR_SCML_MONO_RNG(base, value) (TRNG_WR_SCML_MONO_RNG(base, value))
/*@}*/

/*******************************************************************************
 * TRNG_SCR1L - RNG Statistical Check Run Length 1 Limit Register
 ******************************************************************************/

/*!
 * @brief TRNG_SCR1L - RNG Statistical Check Run Length 1 Limit Register (RW)
 *
 * Reset value: 0x00B20195U
 *
 * The RNG Statistical Check Run Length 1 Limit Register defines the allowable
 * maximum and minimum number of runs of length 1 detected during entropy
 * generation. To pass the test, the number of runs of length 1 (for samples of both 0
 * and 1) must be less than the programmed maximum value, and the number of runs of
 * length 1 must be greater than (maximum - range). If this test fails, the
 * Retry Counter in SCMISC will be decremented, and a retry will occur if the Retry
 * Count has not reached zero. If the Retry Count has reached zero, an error will
 * be generated. Note that this address (0xBASE_0624) is used as SCR1L only if
 * MCTL[PRGM] is 1. If MCTL[PRGM] is 0, this address is used as SCR1C readback
 * register.
 */
/*!
 * @name Constants and macros for entire TRNG_SCR1L register
 */
/*@{*/
#define TRNG_RD_SCR1L(base)      (TRNG_SCR1L_REG(base))
#define TRNG_WR_SCR1L(base, value) (TRNG_SCR1L_REG(base) = (value))
#define TRNG_RMW_SCR1L(base, mask, value) (TRNG_WR_SCR1L(base, (TRNG_RD_SCR1L(base) & ~(mask)) | (value)))
#define TRNG_SET_SCR1L(base, value) (BME_OR32(&TRNG_SCR1L_REG(base), (uint32_t)(value)))
#define TRNG_CLR_SCR1L(base, value) (BME_AND32(&TRNG_SCR1L_REG(base), (uint32_t)(~(value))))
#define TRNG_TOG_SCR1L(base, value) (BME_XOR32(&TRNG_SCR1L_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TRNG_SCR1L bitfields
 */

/*!
 * @name Register TRNG_SCR1L, field RUN1_MAX[14:0] (RW)
 *
 * Run Length 1 Maximum Limit. Defines the maximum allowable runs of length 1
 * (for both 0 and 1) detected during entropy generation. The number of runs of
 * length 1 detected during entropy generation must be less than RUN1_MAX, else a
 * retry or error will occur. This register is cleared to 01E5h (decimal 485) by
 * writing the MCTL[RST_DEF] bit to 1.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCR1L_RUN1_MAX field. */
#define TRNG_RD_SCR1L_RUN1_MAX(base) ((TRNG_SCR1L_REG(base) & TRNG_SCR1L_RUN1_MAX_MASK) >> TRNG_SCR1L_RUN1_MAX_SHIFT)
#define TRNG_BRD_SCR1L_RUN1_MAX(base) (TRNG_RD_SCR1L_RUN1_MAX(base))

/*! @brief Set the RUN1_MAX field to a new value. */
#define TRNG_WR_SCR1L_RUN1_MAX(base, value) (TRNG_RMW_SCR1L(base, TRNG_SCR1L_RUN1_MAX_MASK, TRNG_SCR1L_RUN1_MAX(value)))
#define TRNG_BWR_SCR1L_RUN1_MAX(base, value) (TRNG_WR_SCR1L_RUN1_MAX(base, value))
/*@}*/

/*!
 * @name Register TRNG_SCR1L, field RUN1_RNG[30:16] (RW)
 *
 * Run Length 1 Range. The number of runs of length 1 (for both 0 and 1)
 * detected during entropy generation must be greater than RUN1_MAX - RUN1_RNG, else a
 * retry or error will occur. This register is cleared to 0102h (decimal 258) by
 * writing the MCTL[RST_DEF] bit to 1.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCR1L_RUN1_RNG field. */
#define TRNG_RD_SCR1L_RUN1_RNG(base) ((TRNG_SCR1L_REG(base) & TRNG_SCR1L_RUN1_RNG_MASK) >> TRNG_SCR1L_RUN1_RNG_SHIFT)
#define TRNG_BRD_SCR1L_RUN1_RNG(base) (TRNG_RD_SCR1L_RUN1_RNG(base))

/*! @brief Set the RUN1_RNG field to a new value. */
#define TRNG_WR_SCR1L_RUN1_RNG(base, value) (TRNG_RMW_SCR1L(base, TRNG_SCR1L_RUN1_RNG_MASK, TRNG_SCR1L_RUN1_RNG(value)))
#define TRNG_BWR_SCR1L_RUN1_RNG(base, value) (TRNG_WR_SCR1L_RUN1_RNG(base, value))
/*@}*/

/*******************************************************************************
 * TRNG_SCR1C - RNG Statistical Check Run Length 1 Count Register
 ******************************************************************************/

/*!
 * @brief TRNG_SCR1C - RNG Statistical Check Run Length 1 Count Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The RNG Statistical Check Run Length 1 Counters Register is a read-only
 * register used to read the final Run Length 1 counts after entropy generation. These
 * counters start with the value in SCR1L[RUN1_MAX]. The R1_1_CT decrements each
 * time a single one is sampled (preceded by a zero and followed by a zero). The
 * R1_0_CT decrements each time a single zero is sampled (preceded by a one and
 * followed by a one). Note that this offset (0xBASE_0624) is used as SCR1L if
 * MCTL[PRGM] is 1. If MCTL[PRGM] is 0, this offset is used as SCR1C readback
 * register, as described here.
 */
/*!
 * @name Constants and macros for entire TRNG_SCR1C register
 */
/*@{*/
#define TRNG_RD_SCR1C(base)      (TRNG_SCR1C_REG(base))
/*@}*/

/*
 * Constants & macros for individual TRNG_SCR1C bitfields
 */

/*!
 * @name Register TRNG_SCR1C, field R1_0_CT[14:0] (RO)
 *
 * Runs of Zero, Length 1 Count. Reads the final Runs of Zeroes, length 1 count
 * after entropy generation. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCR1C_R1_0_CT field. */
#define TRNG_RD_SCR1C_R1_0_CT(base) ((TRNG_SCR1C_REG(base) & TRNG_SCR1C_R1_0_CT_MASK) >> TRNG_SCR1C_R1_0_CT_SHIFT)
#define TRNG_BRD_SCR1C_R1_0_CT(base) (TRNG_RD_SCR1C_R1_0_CT(base))
/*@}*/

/*!
 * @name Register TRNG_SCR1C, field R1_1_CT[30:16] (RO)
 *
 * Runs of One, Length 1 Count. Reads the final Runs of Ones, length 1 count
 * after entropy generation. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCR1C_R1_1_CT field. */
#define TRNG_RD_SCR1C_R1_1_CT(base) ((TRNG_SCR1C_REG(base) & TRNG_SCR1C_R1_1_CT_MASK) >> TRNG_SCR1C_R1_1_CT_SHIFT)
#define TRNG_BRD_SCR1C_R1_1_CT(base) (TRNG_RD_SCR1C_R1_1_CT(base))
/*@}*/

/*******************************************************************************
 * TRNG_SCR2L - RNG Statistical Check Run Length 2 Limit Register
 ******************************************************************************/

/*!
 * @brief TRNG_SCR2L - RNG Statistical Check Run Length 2 Limit Register (RW)
 *
 * Reset value: 0x007A00DCU
 *
 * The RNG Statistical Check Run Length 2 Limit Register defines the allowable
 * maximum and minimum number of runs of length 2 detected during entropy
 * generation. To pass the test, the number of runs of length 2 (for samples of both 0
 * and 1) must be less than the programmed maximum value, and the number of runs of
 * length 2 must be greater than (maximum - range). If this test fails, the
 * Retry Counter in SCMISC will be decremented, and a retry will occur if the Retry
 * Count has not reached zero. If the Retry Count has reached zero, an error will
 * be generated. Note that this address (0xBASE_0628) is used as SCR2L only if
 * MCTL[PRGM] is 1. If MCTL[PRGM] is 0, this address is used as SCR2C readback
 * register.
 */
/*!
 * @name Constants and macros for entire TRNG_SCR2L register
 */
/*@{*/
#define TRNG_RD_SCR2L(base)      (TRNG_SCR2L_REG(base))
#define TRNG_WR_SCR2L(base, value) (TRNG_SCR2L_REG(base) = (value))
#define TRNG_RMW_SCR2L(base, mask, value) (TRNG_WR_SCR2L(base, (TRNG_RD_SCR2L(base) & ~(mask)) | (value)))
#define TRNG_SET_SCR2L(base, value) (BME_OR32(&TRNG_SCR2L_REG(base), (uint32_t)(value)))
#define TRNG_CLR_SCR2L(base, value) (BME_AND32(&TRNG_SCR2L_REG(base), (uint32_t)(~(value))))
#define TRNG_TOG_SCR2L(base, value) (BME_XOR32(&TRNG_SCR2L_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TRNG_SCR2L bitfields
 */

/*!
 * @name Register TRNG_SCR2L, field RUN2_MAX[13:0] (RW)
 *
 * Run Length 2 Maximum Limit. Defines the maximum allowable runs of length 2
 * (for both 0 and 1) detected during entropy generation. The number of runs of
 * length 2 detected during entropy generation must be less than RUN2_MAX, else a
 * retry or error will occur. This register is cleared to 00DCh (decimal 220) by
 * writing the MCTL[RST_DEF] bit to 1.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCR2L_RUN2_MAX field. */
#define TRNG_RD_SCR2L_RUN2_MAX(base) ((TRNG_SCR2L_REG(base) & TRNG_SCR2L_RUN2_MAX_MASK) >> TRNG_SCR2L_RUN2_MAX_SHIFT)
#define TRNG_BRD_SCR2L_RUN2_MAX(base) (TRNG_RD_SCR2L_RUN2_MAX(base))

/*! @brief Set the RUN2_MAX field to a new value. */
#define TRNG_WR_SCR2L_RUN2_MAX(base, value) (TRNG_RMW_SCR2L(base, TRNG_SCR2L_RUN2_MAX_MASK, TRNG_SCR2L_RUN2_MAX(value)))
#define TRNG_BWR_SCR2L_RUN2_MAX(base, value) (TRNG_WR_SCR2L_RUN2_MAX(base, value))
/*@}*/

/*!
 * @name Register TRNG_SCR2L, field RUN2_RNG[29:16] (RW)
 *
 * Run Length 2 Range. The number of runs of length 2 (for both 0 and 1)
 * detected during entropy generation must be greater than RUN2_MAX - RUN2_RNG, else a
 * retry or error will occur. This register is cleared to 007Ah (decimal 122) by
 * writing the MCTL[RST_DEF] bit to 1.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCR2L_RUN2_RNG field. */
#define TRNG_RD_SCR2L_RUN2_RNG(base) ((TRNG_SCR2L_REG(base) & TRNG_SCR2L_RUN2_RNG_MASK) >> TRNG_SCR2L_RUN2_RNG_SHIFT)
#define TRNG_BRD_SCR2L_RUN2_RNG(base) (TRNG_RD_SCR2L_RUN2_RNG(base))

/*! @brief Set the RUN2_RNG field to a new value. */
#define TRNG_WR_SCR2L_RUN2_RNG(base, value) (TRNG_RMW_SCR2L(base, TRNG_SCR2L_RUN2_RNG_MASK, TRNG_SCR2L_RUN2_RNG(value)))
#define TRNG_BWR_SCR2L_RUN2_RNG(base, value) (TRNG_WR_SCR2L_RUN2_RNG(base, value))
/*@}*/

/*******************************************************************************
 * TRNG_SCR2C - RNG Statistical Check Run Length 2 Count Register
 ******************************************************************************/

/*!
 * @brief TRNG_SCR2C - RNG Statistical Check Run Length 2 Count Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The RNG Statistical Check Run Length 2 Counters Register is a read-only
 * register used to read the final Run Length 2 counts after entropy generation. These
 * counters start with the value in SCR2L[RUN2_MAX]. The R2_1_CT decrements each
 * time two consecutive ones are sampled (preceded by a zero and followed by a
 * zero). The R2_0_CT decrements each time two consecutive zeroes are sampled
 * (preceded by a one and followed by a one). Note that this offset (0xBASE_0628) is
 * used as SCR2L if MCTL[PRGM] is 1. If MCTL[PRGM] is 0, this offset is used as
 * SCR2C readback register, as described here.
 */
/*!
 * @name Constants and macros for entire TRNG_SCR2C register
 */
/*@{*/
#define TRNG_RD_SCR2C(base)      (TRNG_SCR2C_REG(base))
/*@}*/

/*
 * Constants & macros for individual TRNG_SCR2C bitfields
 */

/*!
 * @name Register TRNG_SCR2C, field R2_0_CT[13:0] (RO)
 *
 * Runs of Zero, Length 2 Count. Reads the final Runs of Zeroes, length 2 count
 * after entropy generation. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCR2C_R2_0_CT field. */
#define TRNG_RD_SCR2C_R2_0_CT(base) ((TRNG_SCR2C_REG(base) & TRNG_SCR2C_R2_0_CT_MASK) >> TRNG_SCR2C_R2_0_CT_SHIFT)
#define TRNG_BRD_SCR2C_R2_0_CT(base) (TRNG_RD_SCR2C_R2_0_CT(base))
/*@}*/

/*!
 * @name Register TRNG_SCR2C, field R2_1_CT[29:16] (RO)
 *
 * Runs of One, Length 2 Count. Reads the final Runs of Ones, length 2 count
 * after entropy generation. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCR2C_R2_1_CT field. */
#define TRNG_RD_SCR2C_R2_1_CT(base) ((TRNG_SCR2C_REG(base) & TRNG_SCR2C_R2_1_CT_MASK) >> TRNG_SCR2C_R2_1_CT_SHIFT)
#define TRNG_BRD_SCR2C_R2_1_CT(base) (TRNG_RD_SCR2C_R2_1_CT(base))
/*@}*/

/*******************************************************************************
 * TRNG_SCR3C - RNG Statistical Check Run Length 3 Count Register
 ******************************************************************************/

/*!
 * @brief TRNG_SCR3C - RNG Statistical Check Run Length 3 Count Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The RNG Statistical Check Run Length 3 Counters Register is a read-only
 * register used to read the final Run Length 3 counts after entropy generation. These
 * counters start with the value in SCR3L[RUN3_MAX]. The R3_1_CT decrements each
 * time three consecutive ones are sampled (preceded by a zero and followed by a
 * zero). The R3_0_CT decrements each time three consecutive zeroes are sampled
 * (preceded by a one and followed by a one). Note that this offset (0xBASE_062C)
 * is used as SCR3L if MCTL[PRGM] is 1. If MCTL[PRGM] is 0, this offset is used
 * as SCR3C readback register, as described here.
 */
/*!
 * @name Constants and macros for entire TRNG_SCR3C register
 */
/*@{*/
#define TRNG_RD_SCR3C(base)      (TRNG_SCR3C_REG(base))
/*@}*/

/*
 * Constants & macros for individual TRNG_SCR3C bitfields
 */

/*!
 * @name Register TRNG_SCR3C, field R3_0_CT[12:0] (RO)
 *
 * Runs of Zeroes, Length 3 Count. Reads the final Runs of Zeroes, length 3
 * count after entropy generation. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCR3C_R3_0_CT field. */
#define TRNG_RD_SCR3C_R3_0_CT(base) ((TRNG_SCR3C_REG(base) & TRNG_SCR3C_R3_0_CT_MASK) >> TRNG_SCR3C_R3_0_CT_SHIFT)
#define TRNG_BRD_SCR3C_R3_0_CT(base) (TRNG_RD_SCR3C_R3_0_CT(base))
/*@}*/

/*!
 * @name Register TRNG_SCR3C, field R3_1_CT[28:16] (RO)
 *
 * Runs of Ones, Length 3 Count. Reads the final Runs of Ones, length 3 count
 * after entropy generation. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCR3C_R3_1_CT field. */
#define TRNG_RD_SCR3C_R3_1_CT(base) ((TRNG_SCR3C_REG(base) & TRNG_SCR3C_R3_1_CT_MASK) >> TRNG_SCR3C_R3_1_CT_SHIFT)
#define TRNG_BRD_SCR3C_R3_1_CT(base) (TRNG_RD_SCR3C_R3_1_CT(base))
/*@}*/

/*******************************************************************************
 * TRNG_SCR3L - RNG Statistical Check Run Length 3 Limit Register
 ******************************************************************************/

/*!
 * @brief TRNG_SCR3L - RNG Statistical Check Run Length 3 Limit Register (RW)
 *
 * Reset value: 0x0058007DU
 *
 * The RNG Statistical Check Run Length 3 Limit Register defines the allowable
 * maximum and minimum number of runs of length 3 detected during entropy
 * generation. To pass the test, the number of runs of length 3 (for samples of both 0
 * and 1) must be less than the programmed maximum value, and the number of runs of
 * length 3 must be greater than (maximum - range). If this test fails, the
 * Retry Counter in SCMISC will be decremented, and a retry will occur if the Retry
 * Count has not reached zero. If the Retry Count has reached zero, an error will
 * be generated. Note that this address (0xBASE_062C) is used as SCR3L only if
 * MCTL[PRGM] is 1. If MCTL[PRGM] is 0, this address is used as SCR3C readback
 * register.
 */
/*!
 * @name Constants and macros for entire TRNG_SCR3L register
 */
/*@{*/
#define TRNG_RD_SCR3L(base)      (TRNG_SCR3L_REG(base))
#define TRNG_WR_SCR3L(base, value) (TRNG_SCR3L_REG(base) = (value))
#define TRNG_RMW_SCR3L(base, mask, value) (TRNG_WR_SCR3L(base, (TRNG_RD_SCR3L(base) & ~(mask)) | (value)))
#define TRNG_SET_SCR3L(base, value) (BME_OR32(&TRNG_SCR3L_REG(base), (uint32_t)(value)))
#define TRNG_CLR_SCR3L(base, value) (BME_AND32(&TRNG_SCR3L_REG(base), (uint32_t)(~(value))))
#define TRNG_TOG_SCR3L(base, value) (BME_XOR32(&TRNG_SCR3L_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TRNG_SCR3L bitfields
 */

/*!
 * @name Register TRNG_SCR3L, field RUN3_MAX[12:0] (RW)
 *
 * Run Length 3 Maximum Limit. Defines the maximum allowable runs of length 3
 * (for both 0 and 1) detected during entropy generation. The number of runs of
 * length 3 detected during entropy generation must be less than RUN3_MAX, else a
 * retry or error will occur. This register is cleared to 007Dh (decimal 125) by
 * writing the MCTL[RST_DEF] bit to 1.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCR3L_RUN3_MAX field. */
#define TRNG_RD_SCR3L_RUN3_MAX(base) ((TRNG_SCR3L_REG(base) & TRNG_SCR3L_RUN3_MAX_MASK) >> TRNG_SCR3L_RUN3_MAX_SHIFT)
#define TRNG_BRD_SCR3L_RUN3_MAX(base) (TRNG_RD_SCR3L_RUN3_MAX(base))

/*! @brief Set the RUN3_MAX field to a new value. */
#define TRNG_WR_SCR3L_RUN3_MAX(base, value) (TRNG_RMW_SCR3L(base, TRNG_SCR3L_RUN3_MAX_MASK, TRNG_SCR3L_RUN3_MAX(value)))
#define TRNG_BWR_SCR3L_RUN3_MAX(base, value) (TRNG_WR_SCR3L_RUN3_MAX(base, value))
/*@}*/

/*!
 * @name Register TRNG_SCR3L, field RUN3_RNG[28:16] (RW)
 *
 * Run Length 3 Range. The number of runs of length 3 (for both 0 and 1)
 * detected during entropy generation must be greater than RUN3_MAX - RUN3_RNG, else a
 * retry or error will occur. This register is cleared to 0058h (decimal 88) by
 * writing the MCTL[RST_DEF] bit to 1.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCR3L_RUN3_RNG field. */
#define TRNG_RD_SCR3L_RUN3_RNG(base) ((TRNG_SCR3L_REG(base) & TRNG_SCR3L_RUN3_RNG_MASK) >> TRNG_SCR3L_RUN3_RNG_SHIFT)
#define TRNG_BRD_SCR3L_RUN3_RNG(base) (TRNG_RD_SCR3L_RUN3_RNG(base))

/*! @brief Set the RUN3_RNG field to a new value. */
#define TRNG_WR_SCR3L_RUN3_RNG(base, value) (TRNG_RMW_SCR3L(base, TRNG_SCR3L_RUN3_RNG_MASK, TRNG_SCR3L_RUN3_RNG(value)))
#define TRNG_BWR_SCR3L_RUN3_RNG(base, value) (TRNG_WR_SCR3L_RUN3_RNG(base, value))
/*@}*/

/*******************************************************************************
 * TRNG_SCR4C - RNG Statistical Check Run Length 4 Count Register
 ******************************************************************************/

/*!
 * @brief TRNG_SCR4C - RNG Statistical Check Run Length 4 Count Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The RNG Statistical Check Run Length 4 Counters Register is a read-only
 * register used to read the final Run Length 4 counts after entropy generation. These
 * counters start with the value in SCR4L[RUN4_MAX]. The R4_1_CT decrements each
 * time four consecutive ones are sampled (preceded by a zero and followed by a
 * zero). The R4_0_CT decrements each time four consecutive zeroes are sampled
 * (preceded by a one and followed by a one). Note that this offset (0xBASE_0630)
 * is used as SCR4L if MCTL[PRGM] is 1. If MCTL[PRGM] is 0, this offset is used as
 * SCR4C readback register, as described here.
 */
/*!
 * @name Constants and macros for entire TRNG_SCR4C register
 */
/*@{*/
#define TRNG_RD_SCR4C(base)      (TRNG_SCR4C_REG(base))
/*@}*/

/*
 * Constants & macros for individual TRNG_SCR4C bitfields
 */

/*!
 * @name Register TRNG_SCR4C, field R4_0_CT[11:0] (RO)
 *
 * Runs of Zero, Length 4 Count. Reads the final Runs of Ones, length 4 count
 * after entropy generation. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCR4C_R4_0_CT field. */
#define TRNG_RD_SCR4C_R4_0_CT(base) ((TRNG_SCR4C_REG(base) & TRNG_SCR4C_R4_0_CT_MASK) >> TRNG_SCR4C_R4_0_CT_SHIFT)
#define TRNG_BRD_SCR4C_R4_0_CT(base) (TRNG_RD_SCR4C_R4_0_CT(base))
/*@}*/

/*!
 * @name Register TRNG_SCR4C, field R4_1_CT[27:16] (RO)
 *
 * Runs of One, Length 4 Count. Reads the final Runs of Ones, length 4 count
 * after entropy generation. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCR4C_R4_1_CT field. */
#define TRNG_RD_SCR4C_R4_1_CT(base) ((TRNG_SCR4C_REG(base) & TRNG_SCR4C_R4_1_CT_MASK) >> TRNG_SCR4C_R4_1_CT_SHIFT)
#define TRNG_BRD_SCR4C_R4_1_CT(base) (TRNG_RD_SCR4C_R4_1_CT(base))
/*@}*/

/*******************************************************************************
 * TRNG_SCR4L - RNG Statistical Check Run Length 4 Limit Register
 ******************************************************************************/

/*!
 * @brief TRNG_SCR4L - RNG Statistical Check Run Length 4 Limit Register (RW)
 *
 * Reset value: 0x0040004BU
 *
 * The RNG Statistical Check Run Length 4 Limit Register defines the allowable
 * maximum and minimum number of runs of length 4 detected during entropy
 * generation. To pass the test, the number of runs of length 4 (for samples of both 0
 * and 1) must be less than the programmed maximum value, and the number of runs of
 * length 4 must be greater than (maximum - range). If this test fails, the
 * Retry Counter in SCMISC will be decremented, and a retry will occur if the Retry
 * Count has not reached zero. If the Retry Count has reached zero, an error will
 * be generated. Note that this address (0xBASE_0630) is used as SCR4L only if
 * MCTL[PRGM] is 1. If MCTL[PRGM] is 0, this address is used as SCR4C readback
 * register.
 */
/*!
 * @name Constants and macros for entire TRNG_SCR4L register
 */
/*@{*/
#define TRNG_RD_SCR4L(base)      (TRNG_SCR4L_REG(base))
#define TRNG_WR_SCR4L(base, value) (TRNG_SCR4L_REG(base) = (value))
#define TRNG_RMW_SCR4L(base, mask, value) (TRNG_WR_SCR4L(base, (TRNG_RD_SCR4L(base) & ~(mask)) | (value)))
#define TRNG_SET_SCR4L(base, value) (BME_OR32(&TRNG_SCR4L_REG(base), (uint32_t)(value)))
#define TRNG_CLR_SCR4L(base, value) (BME_AND32(&TRNG_SCR4L_REG(base), (uint32_t)(~(value))))
#define TRNG_TOG_SCR4L(base, value) (BME_XOR32(&TRNG_SCR4L_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TRNG_SCR4L bitfields
 */

/*!
 * @name Register TRNG_SCR4L, field RUN4_MAX[11:0] (RW)
 *
 * Run Length 4 Maximum Limit. Defines the maximum allowable runs of length 4
 * (for both 0 and 1) detected during entropy generation. The number of runs of
 * length 4 detected during entropy generation must be less than RUN4_MAX, else a
 * retry or error will occur. This register is cleared to 004Bh (decimal 75) by
 * writing the MCTL[RST_DEF] bit to 1.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCR4L_RUN4_MAX field. */
#define TRNG_RD_SCR4L_RUN4_MAX(base) ((TRNG_SCR4L_REG(base) & TRNG_SCR4L_RUN4_MAX_MASK) >> TRNG_SCR4L_RUN4_MAX_SHIFT)
#define TRNG_BRD_SCR4L_RUN4_MAX(base) (TRNG_RD_SCR4L_RUN4_MAX(base))

/*! @brief Set the RUN4_MAX field to a new value. */
#define TRNG_WR_SCR4L_RUN4_MAX(base, value) (TRNG_RMW_SCR4L(base, TRNG_SCR4L_RUN4_MAX_MASK, TRNG_SCR4L_RUN4_MAX(value)))
#define TRNG_BWR_SCR4L_RUN4_MAX(base, value) (TRNG_WR_SCR4L_RUN4_MAX(base, value))
/*@}*/

/*!
 * @name Register TRNG_SCR4L, field RUN4_RNG[27:16] (RW)
 *
 * Run Length 4 Range. The number of runs of length 4 (for both 0 and 1)
 * detected during entropy generation must be greater than RUN4_MAX - RUN4_RNG, else a
 * retry or error will occur. This register is cleared to 0040h (decimal 64) by
 * writing the MCTL[RST_DEF] bit to 1.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCR4L_RUN4_RNG field. */
#define TRNG_RD_SCR4L_RUN4_RNG(base) ((TRNG_SCR4L_REG(base) & TRNG_SCR4L_RUN4_RNG_MASK) >> TRNG_SCR4L_RUN4_RNG_SHIFT)
#define TRNG_BRD_SCR4L_RUN4_RNG(base) (TRNG_RD_SCR4L_RUN4_RNG(base))

/*! @brief Set the RUN4_RNG field to a new value. */
#define TRNG_WR_SCR4L_RUN4_RNG(base, value) (TRNG_RMW_SCR4L(base, TRNG_SCR4L_RUN4_RNG_MASK, TRNG_SCR4L_RUN4_RNG(value)))
#define TRNG_BWR_SCR4L_RUN4_RNG(base, value) (TRNG_WR_SCR4L_RUN4_RNG(base, value))
/*@}*/

/*******************************************************************************
 * TRNG_SCR5L - RNG Statistical Check Run Length 5 Limit Register
 ******************************************************************************/

/*!
 * @brief TRNG_SCR5L - RNG Statistical Check Run Length 5 Limit Register (RW)
 *
 * Reset value: 0x002E002FU
 *
 * The RNG Statistical Check Run Length 5 Limit Register defines the allowable
 * maximum and minimum number of runs of length 5 detected during entropy
 * generation. To pass the test, the number of runs of length 5 (for samples of both 0
 * and 1) must be less than the programmed maximum value, and the number of runs of
 * length 5 must be greater than (maximum - range). If this test fails, the
 * Retry Counter in SCMISC will be decremented, and a retry will occur if the Retry
 * Count has not reached zero. If the Retry Count has reached zero, an error will
 * be generated. Note that this address (0xBASE_0634) is used as SCR5L only if
 * MCTL[PRGM] is 1. If MCTL[PRGM] is 0, this address is used as SCR5C readback
 * register.
 */
/*!
 * @name Constants and macros for entire TRNG_SCR5L register
 */
/*@{*/
#define TRNG_RD_SCR5L(base)      (TRNG_SCR5L_REG(base))
#define TRNG_WR_SCR5L(base, value) (TRNG_SCR5L_REG(base) = (value))
#define TRNG_RMW_SCR5L(base, mask, value) (TRNG_WR_SCR5L(base, (TRNG_RD_SCR5L(base) & ~(mask)) | (value)))
#define TRNG_SET_SCR5L(base, value) (BME_OR32(&TRNG_SCR5L_REG(base), (uint32_t)(value)))
#define TRNG_CLR_SCR5L(base, value) (BME_AND32(&TRNG_SCR5L_REG(base), (uint32_t)(~(value))))
#define TRNG_TOG_SCR5L(base, value) (BME_XOR32(&TRNG_SCR5L_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TRNG_SCR5L bitfields
 */

/*!
 * @name Register TRNG_SCR5L, field RUN5_MAX[10:0] (RW)
 *
 * Run Length 5 Maximum Limit. Defines the maximum allowable runs of length 5
 * (for both 0 and 1) detected during entropy generation. The number of runs of
 * length 5 detected during entropy generation must be less than RUN5_MAX, else a
 * retry or error will occur. This register is cleared to 002Fh (decimal 47) by
 * writing the MCTL[RST_DEF] bit to 1.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCR5L_RUN5_MAX field. */
#define TRNG_RD_SCR5L_RUN5_MAX(base) ((TRNG_SCR5L_REG(base) & TRNG_SCR5L_RUN5_MAX_MASK) >> TRNG_SCR5L_RUN5_MAX_SHIFT)
#define TRNG_BRD_SCR5L_RUN5_MAX(base) (TRNG_RD_SCR5L_RUN5_MAX(base))

/*! @brief Set the RUN5_MAX field to a new value. */
#define TRNG_WR_SCR5L_RUN5_MAX(base, value) (TRNG_RMW_SCR5L(base, TRNG_SCR5L_RUN5_MAX_MASK, TRNG_SCR5L_RUN5_MAX(value)))
#define TRNG_BWR_SCR5L_RUN5_MAX(base, value) (TRNG_WR_SCR5L_RUN5_MAX(base, value))
/*@}*/

/*!
 * @name Register TRNG_SCR5L, field RUN5_RNG[26:16] (RW)
 *
 * Run Length 5 Range. The number of runs of length 5 (for both 0 and 1)
 * detected during entropy generation must be greater than RUN5_MAX - RUN5_RNG, else a
 * retry or error will occur. This register is cleared to 002Eh (decimal 46) by
 * writing the MCTL[RST_DEF] bit to 1.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCR5L_RUN5_RNG field. */
#define TRNG_RD_SCR5L_RUN5_RNG(base) ((TRNG_SCR5L_REG(base) & TRNG_SCR5L_RUN5_RNG_MASK) >> TRNG_SCR5L_RUN5_RNG_SHIFT)
#define TRNG_BRD_SCR5L_RUN5_RNG(base) (TRNG_RD_SCR5L_RUN5_RNG(base))

/*! @brief Set the RUN5_RNG field to a new value. */
#define TRNG_WR_SCR5L_RUN5_RNG(base, value) (TRNG_RMW_SCR5L(base, TRNG_SCR5L_RUN5_RNG_MASK, TRNG_SCR5L_RUN5_RNG(value)))
#define TRNG_BWR_SCR5L_RUN5_RNG(base, value) (TRNG_WR_SCR5L_RUN5_RNG(base, value))
/*@}*/

/*******************************************************************************
 * TRNG_SCR5C - RNG Statistical Check Run Length 5 Count Register
 ******************************************************************************/

/*!
 * @brief TRNG_SCR5C - RNG Statistical Check Run Length 5 Count Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The RNG Statistical Check Run Length 5 Counters Register is a read-only
 * register used to read the final Run Length 5 counts after entropy generation. These
 * counters start with the value in SCR5L[RUN5_MAX]. The R5_1_CT decrements each
 * time five consecutive ones are sampled (preceded by a zero and followed by a
 * zero). The R5_0_CT decrements each time five consecutive zeroes are sampled
 * (preceded by a one and followed by a one). Note that this offset (0xBASE_0634)
 * is used as SCR5L if MCTL[PRGM] is 1. If MCTL[PRGM] is 0, this offset is used as
 * SCR5C readback register, as described here.
 */
/*!
 * @name Constants and macros for entire TRNG_SCR5C register
 */
/*@{*/
#define TRNG_RD_SCR5C(base)      (TRNG_SCR5C_REG(base))
/*@}*/

/*
 * Constants & macros for individual TRNG_SCR5C bitfields
 */

/*!
 * @name Register TRNG_SCR5C, field R5_0_CT[10:0] (RO)
 *
 * Runs of Zero, Length 5 Count. Reads the final Runs of Ones, length 5 count
 * after entropy generation. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCR5C_R5_0_CT field. */
#define TRNG_RD_SCR5C_R5_0_CT(base) ((TRNG_SCR5C_REG(base) & TRNG_SCR5C_R5_0_CT_MASK) >> TRNG_SCR5C_R5_0_CT_SHIFT)
#define TRNG_BRD_SCR5C_R5_0_CT(base) (TRNG_RD_SCR5C_R5_0_CT(base))
/*@}*/

/*!
 * @name Register TRNG_SCR5C, field R5_1_CT[26:16] (RO)
 *
 * Runs of One, Length 5 Count. Reads the final Runs of Ones, length 5 count
 * after entropy generation. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCR5C_R5_1_CT field. */
#define TRNG_RD_SCR5C_R5_1_CT(base) ((TRNG_SCR5C_REG(base) & TRNG_SCR5C_R5_1_CT_MASK) >> TRNG_SCR5C_R5_1_CT_SHIFT)
#define TRNG_BRD_SCR5C_R5_1_CT(base) (TRNG_RD_SCR5C_R5_1_CT(base))
/*@}*/

/*******************************************************************************
 * TRNG_SCR6PL - RNG Statistical Check Run Length 6+ Limit Register
 ******************************************************************************/

/*!
 * @brief TRNG_SCR6PL - RNG Statistical Check Run Length 6+ Limit Register (RW)
 *
 * Reset value: 0x002E002FU
 *
 * The RNG Statistical Check Run Length 6+ Limit Register defines the allowable
 * maximum and minimum number of runs of length 6 or more detected during entropy
 * generation. To pass the test, the number of runs of length 6 or more (for
 * samples of both 0 and 1) must be less than the programmed maximum value, and the
 * number of runs of length 6 or more must be greater than (maximum - range). If
 * this test fails, the Retry Counter in SCMISC will be decremented, and a retry
 * will occur if the Retry Count has not reached zero. If the Retry Count has
 * reached zero, an error will be generated. Note that this offset (0xBASE_0638) is
 * used as SCR6PL only if MCTL[PRGM] is 1. If MCTL[PRGM] is 0, this offset is
 * used as SCR6PC readback register.
 */
/*!
 * @name Constants and macros for entire TRNG_SCR6PL register
 */
/*@{*/
#define TRNG_RD_SCR6PL(base)     (TRNG_SCR6PL_REG(base))
#define TRNG_WR_SCR6PL(base, value) (TRNG_SCR6PL_REG(base) = (value))
#define TRNG_RMW_SCR6PL(base, mask, value) (TRNG_WR_SCR6PL(base, (TRNG_RD_SCR6PL(base) & ~(mask)) | (value)))
#define TRNG_SET_SCR6PL(base, value) (BME_OR32(&TRNG_SCR6PL_REG(base), (uint32_t)(value)))
#define TRNG_CLR_SCR6PL(base, value) (BME_AND32(&TRNG_SCR6PL_REG(base), (uint32_t)(~(value))))
#define TRNG_TOG_SCR6PL(base, value) (BME_XOR32(&TRNG_SCR6PL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TRNG_SCR6PL bitfields
 */

/*!
 * @name Register TRNG_SCR6PL, field RUN6P_MAX[10:0] (RW)
 *
 * Run Length 6+ Maximum Limit. Defines the maximum allowable runs of length 6
 * or more (for both 0 and 1) detected during entropy generation. The number of
 * runs of length 6 or more detected during entropy generation must be less than
 * RUN6P_MAX, else a retry or error will occur. This register is cleared to 002Fh
 * (decimal 47) by writing the MCTL[RST_DEF] bit to 1.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCR6PL_RUN6P_MAX field. */
#define TRNG_RD_SCR6PL_RUN6P_MAX(base) ((TRNG_SCR6PL_REG(base) & TRNG_SCR6PL_RUN6P_MAX_MASK) >> TRNG_SCR6PL_RUN6P_MAX_SHIFT)
#define TRNG_BRD_SCR6PL_RUN6P_MAX(base) (TRNG_RD_SCR6PL_RUN6P_MAX(base))

/*! @brief Set the RUN6P_MAX field to a new value. */
#define TRNG_WR_SCR6PL_RUN6P_MAX(base, value) (TRNG_RMW_SCR6PL(base, TRNG_SCR6PL_RUN6P_MAX_MASK, TRNG_SCR6PL_RUN6P_MAX(value)))
#define TRNG_BWR_SCR6PL_RUN6P_MAX(base, value) (TRNG_WR_SCR6PL_RUN6P_MAX(base, value))
/*@}*/

/*!
 * @name Register TRNG_SCR6PL, field RUN6P_RNG[26:16] (RW)
 *
 * Run Length 6+ Range. The number of runs of length 6 or more (for both 0 and
 * 1) detected during entropy generation must be greater than RUN6P_MAX -
 * RUN6P_RNG, else a retry or error will occur. This register is cleared to 002Eh
 * (decimal 46) by writing the MCTL[RST_DEF] bit to 1.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCR6PL_RUN6P_RNG field. */
#define TRNG_RD_SCR6PL_RUN6P_RNG(base) ((TRNG_SCR6PL_REG(base) & TRNG_SCR6PL_RUN6P_RNG_MASK) >> TRNG_SCR6PL_RUN6P_RNG_SHIFT)
#define TRNG_BRD_SCR6PL_RUN6P_RNG(base) (TRNG_RD_SCR6PL_RUN6P_RNG(base))

/*! @brief Set the RUN6P_RNG field to a new value. */
#define TRNG_WR_SCR6PL_RUN6P_RNG(base, value) (TRNG_RMW_SCR6PL(base, TRNG_SCR6PL_RUN6P_RNG_MASK, TRNG_SCR6PL_RUN6P_RNG(value)))
#define TRNG_BWR_SCR6PL_RUN6P_RNG(base, value) (TRNG_WR_SCR6PL_RUN6P_RNG(base, value))
/*@}*/

/*******************************************************************************
 * TRNG_SCR6PC - RNG Statistical Check Run Length 6+ Count Register
 ******************************************************************************/

/*!
 * @brief TRNG_SCR6PC - RNG Statistical Check Run Length 6+ Count Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The RNG Statistical Check Run Length 6+ Counters Register is a read-only
 * register used to read the final Run Length 6+ counts after entropy generation.
 * These counters start with the value in SCR6PL[RUN6P_MAX]. The R6P_1_CT decrements
 * each time six or more consecutive ones are sampled (preceded by a zero and
 * followed by a zero). The R6P_0_CT decrements each time six or more consecutive
 * zeroes are sampled (preceded by a one and followed by a one). Note that this
 * offset (0xBASE_0638) is used as SCR6PL if MCTL[PRGM] is 1. If MCTL[PRGM] is 0,
 * this offset is used as SCR6PC readback register, as described here.
 */
/*!
 * @name Constants and macros for entire TRNG_SCR6PC register
 */
/*@{*/
#define TRNG_RD_SCR6PC(base)     (TRNG_SCR6PC_REG(base))
/*@}*/

/*
 * Constants & macros for individual TRNG_SCR6PC bitfields
 */

/*!
 * @name Register TRNG_SCR6PC, field R6P_0_CT[10:0] (RO)
 *
 * Runs of Zero, Length 6+ Count. Reads the final Runs of Ones, length 6+ count
 * after entropy generation. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCR6PC_R6P_0_CT field. */
#define TRNG_RD_SCR6PC_R6P_0_CT(base) ((TRNG_SCR6PC_REG(base) & TRNG_SCR6PC_R6P_0_CT_MASK) >> TRNG_SCR6PC_R6P_0_CT_SHIFT)
#define TRNG_BRD_SCR6PC_R6P_0_CT(base) (TRNG_RD_SCR6PC_R6P_0_CT(base))
/*@}*/

/*!
 * @name Register TRNG_SCR6PC, field R6P_1_CT[26:16] (RO)
 *
 * Runs of One, Length 6+ Count. Reads the final Runs of Ones, length 6+ count
 * after entropy generation. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SCR6PC_R6P_1_CT field. */
#define TRNG_RD_SCR6PC_R6P_1_CT(base) ((TRNG_SCR6PC_REG(base) & TRNG_SCR6PC_R6P_1_CT_MASK) >> TRNG_SCR6PC_R6P_1_CT_SHIFT)
#define TRNG_BRD_SCR6PC_R6P_1_CT(base) (TRNG_RD_SCR6PC_R6P_1_CT(base))
/*@}*/

/*******************************************************************************
 * TRNG_STATUS - RNG Status Register
 ******************************************************************************/

/*!
 * @brief TRNG_STATUS - RNG Status Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * Various statistical tests are run as a normal part of the TRNG's entropy
 * generation process. The least-significant 16 bits of the STATUS register reflect
 * the result of each of these tests. The status of these bits will be valid when
 * the TRNG has finished its entropy generation process. Software can determine
 * when this occurs by polling the ENT_VAL bit in the RNG Miscellaneous Control
 * Register. Note that there is a very small probability that a statistical test
 * will fail even though the TRNG is operating properly. If this happens the TRNG
 * will automatically retry the entire entropy generation process, including
 * running all the statistical tests. The value in RETRY_CT is decremented each time
 * an entropy generation retry occurs. If a statistical check fails when the retry
 * count is nonzero, a retry is initiated. But if a statistical check fails when
 * the retry count is zero, an error is generated by the RNG. By default
 * RETRY_CT is initialized to 1, but software can increase the retry count by writing to
 * the RTY_CT field in the SCMISC register. All 0s will be returned if this
 * register address is read while the RNG is in Program Mode (see PRGM field in MCTL
 * register. If this register is read while the RNG is in Run Mode the value
 * returned will be formatted as follows.
 */
/*!
 * @name Constants and macros for entire TRNG_STATUS register
 */
/*@{*/
#define TRNG_RD_STATUS(base)     (TRNG_STATUS_REG(base))
/*@}*/

/*
 * Constants & macros for individual TRNG_STATUS bitfields
 */

/*!
 * @name Register TRNG_STATUS, field TF1BR0[0] (RO)
 *
 * Test Fail, 1-Bit Run, Sampling 0s. If TF1BR0=1, the 1-Bit Run, Sampling 0s
 * Test has failed.
 */
/*@{*/
/*! @brief Read current value of the TRNG_STATUS_TF1BR0 field. */
#define TRNG_RD_STATUS_TF1BR0(base) ((TRNG_STATUS_REG(base) & TRNG_STATUS_TF1BR0_MASK) >> TRNG_STATUS_TF1BR0_SHIFT)
#define TRNG_BRD_STATUS_TF1BR0(base) (BME_UBFX32(&TRNG_STATUS_REG(base), TRNG_STATUS_TF1BR0_SHIFT, TRNG_STATUS_TF1BR0_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_STATUS, field TF1BR1[1] (RO)
 *
 * Test Fail, 1-Bit Run, Sampling 1s. If TF1BR1=1, the 1-Bit Run, Sampling 1s
 * Test has failed.
 */
/*@{*/
/*! @brief Read current value of the TRNG_STATUS_TF1BR1 field. */
#define TRNG_RD_STATUS_TF1BR1(base) ((TRNG_STATUS_REG(base) & TRNG_STATUS_TF1BR1_MASK) >> TRNG_STATUS_TF1BR1_SHIFT)
#define TRNG_BRD_STATUS_TF1BR1(base) (BME_UBFX32(&TRNG_STATUS_REG(base), TRNG_STATUS_TF1BR1_SHIFT, TRNG_STATUS_TF1BR1_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_STATUS, field TF2BR0[2] (RO)
 *
 * Test Fail, 2-Bit Run, Sampling 0s. If TF2BR0=1, the 2-Bit Run, Sampling 0s
 * Test has failed.
 */
/*@{*/
/*! @brief Read current value of the TRNG_STATUS_TF2BR0 field. */
#define TRNG_RD_STATUS_TF2BR0(base) ((TRNG_STATUS_REG(base) & TRNG_STATUS_TF2BR0_MASK) >> TRNG_STATUS_TF2BR0_SHIFT)
#define TRNG_BRD_STATUS_TF2BR0(base) (BME_UBFX32(&TRNG_STATUS_REG(base), TRNG_STATUS_TF2BR0_SHIFT, TRNG_STATUS_TF2BR0_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_STATUS, field TF2BR1[3] (RO)
 *
 * Test Fail, 2-Bit Run, Sampling 1s. If TF2BR1=1, the 2-Bit Run, Sampling 1s
 * Test has failed.
 */
/*@{*/
/*! @brief Read current value of the TRNG_STATUS_TF2BR1 field. */
#define TRNG_RD_STATUS_TF2BR1(base) ((TRNG_STATUS_REG(base) & TRNG_STATUS_TF2BR1_MASK) >> TRNG_STATUS_TF2BR1_SHIFT)
#define TRNG_BRD_STATUS_TF2BR1(base) (BME_UBFX32(&TRNG_STATUS_REG(base), TRNG_STATUS_TF2BR1_SHIFT, TRNG_STATUS_TF2BR1_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_STATUS, field TF3BR0[4] (RO)
 *
 * Test Fail, 3-Bit Run, Sampling 0s. If TF3BR0=1, the 3-Bit Run, Sampling 0s
 * Test has failed.
 */
/*@{*/
/*! @brief Read current value of the TRNG_STATUS_TF3BR0 field. */
#define TRNG_RD_STATUS_TF3BR0(base) ((TRNG_STATUS_REG(base) & TRNG_STATUS_TF3BR0_MASK) >> TRNG_STATUS_TF3BR0_SHIFT)
#define TRNG_BRD_STATUS_TF3BR0(base) (BME_UBFX32(&TRNG_STATUS_REG(base), TRNG_STATUS_TF3BR0_SHIFT, TRNG_STATUS_TF3BR0_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_STATUS, field TF3BR1[5] (RO)
 *
 * Test Fail, 3-Bit Run, Sampling 1s. If TF3BR1=1, the 3-Bit Run, Sampling 1s
 * Test has failed.
 */
/*@{*/
/*! @brief Read current value of the TRNG_STATUS_TF3BR1 field. */
#define TRNG_RD_STATUS_TF3BR1(base) ((TRNG_STATUS_REG(base) & TRNG_STATUS_TF3BR1_MASK) >> TRNG_STATUS_TF3BR1_SHIFT)
#define TRNG_BRD_STATUS_TF3BR1(base) (BME_UBFX32(&TRNG_STATUS_REG(base), TRNG_STATUS_TF3BR1_SHIFT, TRNG_STATUS_TF3BR1_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_STATUS, field TF4BR0[6] (RO)
 *
 * Test Fail, 4-Bit Run, Sampling 0s. If TF4BR0=1, the 4-Bit Run, Sampling 0s
 * Test has failed.
 */
/*@{*/
/*! @brief Read current value of the TRNG_STATUS_TF4BR0 field. */
#define TRNG_RD_STATUS_TF4BR0(base) ((TRNG_STATUS_REG(base) & TRNG_STATUS_TF4BR0_MASK) >> TRNG_STATUS_TF4BR0_SHIFT)
#define TRNG_BRD_STATUS_TF4BR0(base) (BME_UBFX32(&TRNG_STATUS_REG(base), TRNG_STATUS_TF4BR0_SHIFT, TRNG_STATUS_TF4BR0_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_STATUS, field TF4BR1[7] (RO)
 *
 * Test Fail, 4-Bit Run, Sampling 1s. If TF4BR1=1, the 4-Bit Run, Sampling 1s
 * Test has failed.
 */
/*@{*/
/*! @brief Read current value of the TRNG_STATUS_TF4BR1 field. */
#define TRNG_RD_STATUS_TF4BR1(base) ((TRNG_STATUS_REG(base) & TRNG_STATUS_TF4BR1_MASK) >> TRNG_STATUS_TF4BR1_SHIFT)
#define TRNG_BRD_STATUS_TF4BR1(base) (BME_UBFX32(&TRNG_STATUS_REG(base), TRNG_STATUS_TF4BR1_SHIFT, TRNG_STATUS_TF4BR1_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_STATUS, field TF5BR0[8] (RO)
 *
 * Test Fail, 5-Bit Run, Sampling 0s. If TF5BR0=1, the 5-Bit Run, Sampling 0s
 * Test has failed.
 */
/*@{*/
/*! @brief Read current value of the TRNG_STATUS_TF5BR0 field. */
#define TRNG_RD_STATUS_TF5BR0(base) ((TRNG_STATUS_REG(base) & TRNG_STATUS_TF5BR0_MASK) >> TRNG_STATUS_TF5BR0_SHIFT)
#define TRNG_BRD_STATUS_TF5BR0(base) (BME_UBFX32(&TRNG_STATUS_REG(base), TRNG_STATUS_TF5BR0_SHIFT, TRNG_STATUS_TF5BR0_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_STATUS, field TF5BR1[9] (RO)
 *
 * Test Fail, 5-Bit Run, Sampling 1s. If TF5BR1=1, the 5-Bit Run, Sampling 1s
 * Test has failed.
 */
/*@{*/
/*! @brief Read current value of the TRNG_STATUS_TF5BR1 field. */
#define TRNG_RD_STATUS_TF5BR1(base) ((TRNG_STATUS_REG(base) & TRNG_STATUS_TF5BR1_MASK) >> TRNG_STATUS_TF5BR1_SHIFT)
#define TRNG_BRD_STATUS_TF5BR1(base) (BME_UBFX32(&TRNG_STATUS_REG(base), TRNG_STATUS_TF5BR1_SHIFT, TRNG_STATUS_TF5BR1_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_STATUS, field TF6PBR0[10] (RO)
 *
 * Test Fail, 6 Plus Bit Run, Sampling 0s. If TF6PBR0=1, the 6 Plus Bit Run,
 * Sampling 0s Test has failed.
 */
/*@{*/
/*! @brief Read current value of the TRNG_STATUS_TF6PBR0 field. */
#define TRNG_RD_STATUS_TF6PBR0(base) ((TRNG_STATUS_REG(base) & TRNG_STATUS_TF6PBR0_MASK) >> TRNG_STATUS_TF6PBR0_SHIFT)
#define TRNG_BRD_STATUS_TF6PBR0(base) (BME_UBFX32(&TRNG_STATUS_REG(base), TRNG_STATUS_TF6PBR0_SHIFT, TRNG_STATUS_TF6PBR0_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_STATUS, field TF6PBR1[11] (RO)
 *
 * Test Fail, 6 Plus Bit Run, Sampling 1s. If TF6PBR1=1, the 6 Plus Bit Run,
 * Sampling 1s Test has failed.
 */
/*@{*/
/*! @brief Read current value of the TRNG_STATUS_TF6PBR1 field. */
#define TRNG_RD_STATUS_TF6PBR1(base) ((TRNG_STATUS_REG(base) & TRNG_STATUS_TF6PBR1_MASK) >> TRNG_STATUS_TF6PBR1_SHIFT)
#define TRNG_BRD_STATUS_TF6PBR1(base) (BME_UBFX32(&TRNG_STATUS_REG(base), TRNG_STATUS_TF6PBR1_SHIFT, TRNG_STATUS_TF6PBR1_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_STATUS, field TFSB[12] (RO)
 *
 * Test Fail, Sparse Bit. If TFSB=1, the Sparse Bit Test has failed.
 */
/*@{*/
/*! @brief Read current value of the TRNG_STATUS_TFSB field. */
#define TRNG_RD_STATUS_TFSB(base) ((TRNG_STATUS_REG(base) & TRNG_STATUS_TFSB_MASK) >> TRNG_STATUS_TFSB_SHIFT)
#define TRNG_BRD_STATUS_TFSB(base) (BME_UBFX32(&TRNG_STATUS_REG(base), TRNG_STATUS_TFSB_SHIFT, TRNG_STATUS_TFSB_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_STATUS, field TFLR[13] (RO)
 *
 * Test Fail, Long Run. If TFLR=1, the Long Run Test has failed.
 */
/*@{*/
/*! @brief Read current value of the TRNG_STATUS_TFLR field. */
#define TRNG_RD_STATUS_TFLR(base) ((TRNG_STATUS_REG(base) & TRNG_STATUS_TFLR_MASK) >> TRNG_STATUS_TFLR_SHIFT)
#define TRNG_BRD_STATUS_TFLR(base) (BME_UBFX32(&TRNG_STATUS_REG(base), TRNG_STATUS_TFLR_SHIFT, TRNG_STATUS_TFLR_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_STATUS, field TFP[14] (RO)
 *
 * Test Fail, Poker. If TFP=1, the Poker Test has failed.
 */
/*@{*/
/*! @brief Read current value of the TRNG_STATUS_TFP field. */
#define TRNG_RD_STATUS_TFP(base) ((TRNG_STATUS_REG(base) & TRNG_STATUS_TFP_MASK) >> TRNG_STATUS_TFP_SHIFT)
#define TRNG_BRD_STATUS_TFP(base) (BME_UBFX32(&TRNG_STATUS_REG(base), TRNG_STATUS_TFP_SHIFT, TRNG_STATUS_TFP_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_STATUS, field TFMB[15] (RO)
 *
 * Test Fail, Mono Bit. If TFMB=1, the Mono Bit Test has failed.
 */
/*@{*/
/*! @brief Read current value of the TRNG_STATUS_TFMB field. */
#define TRNG_RD_STATUS_TFMB(base) ((TRNG_STATUS_REG(base) & TRNG_STATUS_TFMB_MASK) >> TRNG_STATUS_TFMB_SHIFT)
#define TRNG_BRD_STATUS_TFMB(base) (BME_UBFX32(&TRNG_STATUS_REG(base), TRNG_STATUS_TFMB_SHIFT, TRNG_STATUS_TFMB_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_STATUS, field RETRY_CT[19:16] (RO)
 *
 * RETRY COUNT. This represents the current number of entropy generation retries
 * left before a statistical text failure will cause the RNG to generate an
 * error condition.
 */
/*@{*/
/*! @brief Read current value of the TRNG_STATUS_RETRY_CT field. */
#define TRNG_RD_STATUS_RETRY_CT(base) ((TRNG_STATUS_REG(base) & TRNG_STATUS_RETRY_CT_MASK) >> TRNG_STATUS_RETRY_CT_SHIFT)
#define TRNG_BRD_STATUS_RETRY_CT(base) (BME_UBFX32(&TRNG_STATUS_REG(base), TRNG_STATUS_RETRY_CT_SHIFT, TRNG_STATUS_RETRY_CT_WIDTH))
/*@}*/

/*******************************************************************************
 * TRNG_ENT - RNG TRNG Entropy Read Register
 ******************************************************************************/

/*!
 * @brief TRNG_ENT - RNG TRNG Entropy Read Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The RNG TRNG can be programmed to generate an entropy value that is readable
 * via the SkyBlue bus. To do this, set the MCTL[TRNG_ACC] bit to 1. Once the
 * entropy value has been generated, the MCTL[ENT_VAL] bit will be set to 1. At this
 * point, ENT0 through ENT15 may be read to retrieve the 512-bit entropy value.
 * Note that once ENT15 is read, the entropy value will be cleared and a new
 * value will begin generation, so it is important that ENT15 be read last. These
 * registers are readable only when MCTL[PRGM] = 0 (Run Mode), MCTL[TRNG_ACC] = 1
 * (TRNG access mode) and MCTL[ENT_VAL] = 1, otherwise zeroes will be read.
 */
/*!
 * @name Constants and macros for entire TRNG_ENT register
 */
/*@{*/
#define TRNG_RD_ENT(base, index) (TRNG_ENT_REG(base, index))
/*@}*/

/*******************************************************************************
 * TRNG_PKRCNT10 - RNG Statistical Check Poker Count 1 and 0 Register
 ******************************************************************************/

/*!
 * @brief TRNG_PKRCNT10 - RNG Statistical Check Poker Count 1 and 0 Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The RNG Statistical Check Poker Count 1 and 0 Register is a read-only
 * register used to read the final Poker test counts of 1h and 0h patterns. The Poker 0h
 * Count increments each time a nibble of sample data is found to be 0h. The
 * Poker 1h Count increments each time a nibble of sample data is found to be 1h.
 * Note that this register is readable only if MCTL[PRGM] is 0, otherwise zeroes
 * will be read.
 */
/*!
 * @name Constants and macros for entire TRNG_PKRCNT10 register
 */
/*@{*/
#define TRNG_RD_PKRCNT10(base)   (TRNG_PKRCNT10_REG(base))
/*@}*/

/*
 * Constants & macros for individual TRNG_PKRCNT10 bitfields
 */

/*!
 * @name Register TRNG_PKRCNT10, field PKR_0_CT[15:0] (RO)
 *
 * Poker 0h Count. Total number of nibbles of sample data which were found to be
 * 0h. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_PKRCNT10_PKR_0_CT field. */
#define TRNG_RD_PKRCNT10_PKR_0_CT(base) ((TRNG_PKRCNT10_REG(base) & TRNG_PKRCNT10_PKR_0_CT_MASK) >> TRNG_PKRCNT10_PKR_0_CT_SHIFT)
#define TRNG_BRD_PKRCNT10_PKR_0_CT(base) (TRNG_RD_PKRCNT10_PKR_0_CT(base))
/*@}*/

/*!
 * @name Register TRNG_PKRCNT10, field PKR_1_CT[31:16] (RO)
 *
 * Poker 1h Count. Total number of nibbles of sample data which were found to be
 * 1h. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_PKRCNT10_PKR_1_CT field. */
#define TRNG_RD_PKRCNT10_PKR_1_CT(base) ((TRNG_PKRCNT10_REG(base) & TRNG_PKRCNT10_PKR_1_CT_MASK) >> TRNG_PKRCNT10_PKR_1_CT_SHIFT)
#define TRNG_BRD_PKRCNT10_PKR_1_CT(base) (TRNG_RD_PKRCNT10_PKR_1_CT(base))
/*@}*/

/*******************************************************************************
 * TRNG_PKRCNT32 - RNG Statistical Check Poker Count 3 and 2 Register
 ******************************************************************************/

/*!
 * @brief TRNG_PKRCNT32 - RNG Statistical Check Poker Count 3 and 2 Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The RNG Statistical Check Poker Count 3 and 2 Register is a read-only
 * register used to read the final Poker test counts of 3h and 2h patterns. The Poker 2h
 * Count increments each time a nibble of sample data is found to be 2h. The
 * Poker 3h Count increments each time a nibble of sample data is found to be 3h.
 * Note that this register is readable only if MCTL[PRGM] is 0, otherwise zeroes
 * will be read.
 */
/*!
 * @name Constants and macros for entire TRNG_PKRCNT32 register
 */
/*@{*/
#define TRNG_RD_PKRCNT32(base)   (TRNG_PKRCNT32_REG(base))
/*@}*/

/*
 * Constants & macros for individual TRNG_PKRCNT32 bitfields
 */

/*!
 * @name Register TRNG_PKRCNT32, field PKR_2_CT[15:0] (RO)
 *
 * Poker 2h Count. Total number of nibbles of sample data which were found to be
 * 2h. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_PKRCNT32_PKR_2_CT field. */
#define TRNG_RD_PKRCNT32_PKR_2_CT(base) ((TRNG_PKRCNT32_REG(base) & TRNG_PKRCNT32_PKR_2_CT_MASK) >> TRNG_PKRCNT32_PKR_2_CT_SHIFT)
#define TRNG_BRD_PKRCNT32_PKR_2_CT(base) (TRNG_RD_PKRCNT32_PKR_2_CT(base))
/*@}*/

/*!
 * @name Register TRNG_PKRCNT32, field PKR_3_CT[31:16] (RO)
 *
 * Poker 3h Count. Total number of nibbles of sample data which were found to be
 * 3h. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_PKRCNT32_PKR_3_CT field. */
#define TRNG_RD_PKRCNT32_PKR_3_CT(base) ((TRNG_PKRCNT32_REG(base) & TRNG_PKRCNT32_PKR_3_CT_MASK) >> TRNG_PKRCNT32_PKR_3_CT_SHIFT)
#define TRNG_BRD_PKRCNT32_PKR_3_CT(base) (TRNG_RD_PKRCNT32_PKR_3_CT(base))
/*@}*/

/*******************************************************************************
 * TRNG_PKRCNT54 - RNG Statistical Check Poker Count 5 and 4 Register
 ******************************************************************************/

/*!
 * @brief TRNG_PKRCNT54 - RNG Statistical Check Poker Count 5 and 4 Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The RNG Statistical Check Poker Count 5 and 4 Register is a read-only
 * register used to read the final Poker test counts of 5h and 4h patterns. The Poker 4h
 * Count increments each time a nibble of sample data is found to be 4h. The
 * Poker 5h Count increments each time a nibble of sample data is found to be 5h.
 * Note that this register is readable only if MCTL[PRGM] is 0, otherwise zeroes
 * will be read.
 */
/*!
 * @name Constants and macros for entire TRNG_PKRCNT54 register
 */
/*@{*/
#define TRNG_RD_PKRCNT54(base)   (TRNG_PKRCNT54_REG(base))
/*@}*/

/*
 * Constants & macros for individual TRNG_PKRCNT54 bitfields
 */

/*!
 * @name Register TRNG_PKRCNT54, field PKR_4_CT[15:0] (RO)
 *
 * Poker 4h Count. Total number of nibbles of sample data which were found to be
 * 4h. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_PKRCNT54_PKR_4_CT field. */
#define TRNG_RD_PKRCNT54_PKR_4_CT(base) ((TRNG_PKRCNT54_REG(base) & TRNG_PKRCNT54_PKR_4_CT_MASK) >> TRNG_PKRCNT54_PKR_4_CT_SHIFT)
#define TRNG_BRD_PKRCNT54_PKR_4_CT(base) (TRNG_RD_PKRCNT54_PKR_4_CT(base))
/*@}*/

/*!
 * @name Register TRNG_PKRCNT54, field PKR_5_CT[31:16] (RO)
 *
 * Poker 5h Count. Total number of nibbles of sample data which were found to be
 * 5h. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_PKRCNT54_PKR_5_CT field. */
#define TRNG_RD_PKRCNT54_PKR_5_CT(base) ((TRNG_PKRCNT54_REG(base) & TRNG_PKRCNT54_PKR_5_CT_MASK) >> TRNG_PKRCNT54_PKR_5_CT_SHIFT)
#define TRNG_BRD_PKRCNT54_PKR_5_CT(base) (TRNG_RD_PKRCNT54_PKR_5_CT(base))
/*@}*/

/*******************************************************************************
 * TRNG_PKRCNT76 - RNG Statistical Check Poker Count 7 and 6 Register
 ******************************************************************************/

/*!
 * @brief TRNG_PKRCNT76 - RNG Statistical Check Poker Count 7 and 6 Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The RNG Statistical Check Poker Count 7 and 6 Register is a read-only
 * register used to read the final Poker test counts of 7h and 6h patterns. The Poker 6h
 * Count increments each time a nibble of sample data is found to be 6h. The
 * Poker 7h Count increments each time a nibble of sample data is found to be 7h.
 * Note that this register is readable only if MCTL[PRGM] is 0, otherwise zeroes
 * will be read.
 */
/*!
 * @name Constants and macros for entire TRNG_PKRCNT76 register
 */
/*@{*/
#define TRNG_RD_PKRCNT76(base)   (TRNG_PKRCNT76_REG(base))
/*@}*/

/*
 * Constants & macros for individual TRNG_PKRCNT76 bitfields
 */

/*!
 * @name Register TRNG_PKRCNT76, field PKR_6_CT[15:0] (RO)
 *
 * Poker 6h Count. Total number of nibbles of sample data which were found to be
 * 6h. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_PKRCNT76_PKR_6_CT field. */
#define TRNG_RD_PKRCNT76_PKR_6_CT(base) ((TRNG_PKRCNT76_REG(base) & TRNG_PKRCNT76_PKR_6_CT_MASK) >> TRNG_PKRCNT76_PKR_6_CT_SHIFT)
#define TRNG_BRD_PKRCNT76_PKR_6_CT(base) (TRNG_RD_PKRCNT76_PKR_6_CT(base))
/*@}*/

/*!
 * @name Register TRNG_PKRCNT76, field PKR_7_CT[31:16] (RO)
 *
 * Poker 7h Count. Total number of nibbles of sample data which were found to be
 * 7h. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_PKRCNT76_PKR_7_CT field. */
#define TRNG_RD_PKRCNT76_PKR_7_CT(base) ((TRNG_PKRCNT76_REG(base) & TRNG_PKRCNT76_PKR_7_CT_MASK) >> TRNG_PKRCNT76_PKR_7_CT_SHIFT)
#define TRNG_BRD_PKRCNT76_PKR_7_CT(base) (TRNG_RD_PKRCNT76_PKR_7_CT(base))
/*@}*/

/*******************************************************************************
 * TRNG_PKRCNT98 - RNG Statistical Check Poker Count 9 and 8 Register
 ******************************************************************************/

/*!
 * @brief TRNG_PKRCNT98 - RNG Statistical Check Poker Count 9 and 8 Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The RNG Statistical Check Poker Count 9 and 8 Register is a read-only
 * register used to read the final Poker test counts of 9h and 8h patterns. The Poker 8h
 * Count increments each time a nibble of sample data is found to be 8h. The
 * Poker 9h Count increments each time a nibble of sample data is found to be 9h.
 * Note that this register is readable only if MCTL[PRGM] is 0, otherwise zeroes
 * will be read.
 */
/*!
 * @name Constants and macros for entire TRNG_PKRCNT98 register
 */
/*@{*/
#define TRNG_RD_PKRCNT98(base)   (TRNG_PKRCNT98_REG(base))
/*@}*/

/*
 * Constants & macros for individual TRNG_PKRCNT98 bitfields
 */

/*!
 * @name Register TRNG_PKRCNT98, field PKR_8_CT[15:0] (RO)
 *
 * Poker 8h Count. Total number of nibbles of sample data which were found to be
 * 8h. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_PKRCNT98_PKR_8_CT field. */
#define TRNG_RD_PKRCNT98_PKR_8_CT(base) ((TRNG_PKRCNT98_REG(base) & TRNG_PKRCNT98_PKR_8_CT_MASK) >> TRNG_PKRCNT98_PKR_8_CT_SHIFT)
#define TRNG_BRD_PKRCNT98_PKR_8_CT(base) (TRNG_RD_PKRCNT98_PKR_8_CT(base))
/*@}*/

/*!
 * @name Register TRNG_PKRCNT98, field PKR_9_CT[31:16] (RO)
 *
 * Poker 9h Count. Total number of nibbles of sample data which were found to be
 * 9h. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_PKRCNT98_PKR_9_CT field. */
#define TRNG_RD_PKRCNT98_PKR_9_CT(base) ((TRNG_PKRCNT98_REG(base) & TRNG_PKRCNT98_PKR_9_CT_MASK) >> TRNG_PKRCNT98_PKR_9_CT_SHIFT)
#define TRNG_BRD_PKRCNT98_PKR_9_CT(base) (TRNG_RD_PKRCNT98_PKR_9_CT(base))
/*@}*/

/*******************************************************************************
 * TRNG_PKRCNTBA - RNG Statistical Check Poker Count B and A Register
 ******************************************************************************/

/*!
 * @brief TRNG_PKRCNTBA - RNG Statistical Check Poker Count B and A Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The RNG Statistical Check Poker Count B and A Register is a read-only
 * register used to read the final Poker test counts of Bh and Ah patterns. The Poker Ah
 * Count increments each time a nibble of sample data is found to be Ah. The
 * Poker Bh Count increments each time a nibble of sample data is found to be Bh.
 * Note that this register is readable only if MCTL[PRGM] is 0, otherwise zeroes
 * will be read.
 */
/*!
 * @name Constants and macros for entire TRNG_PKRCNTBA register
 */
/*@{*/
#define TRNG_RD_PKRCNTBA(base)   (TRNG_PKRCNTBA_REG(base))
/*@}*/

/*
 * Constants & macros for individual TRNG_PKRCNTBA bitfields
 */

/*!
 * @name Register TRNG_PKRCNTBA, field PKR_A_CT[15:0] (RO)
 *
 * Poker Ah Count. Total number of nibbles of sample data which were found to be
 * Ah. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_PKRCNTBA_PKR_A_CT field. */
#define TRNG_RD_PKRCNTBA_PKR_A_CT(base) ((TRNG_PKRCNTBA_REG(base) & TRNG_PKRCNTBA_PKR_A_CT_MASK) >> TRNG_PKRCNTBA_PKR_A_CT_SHIFT)
#define TRNG_BRD_PKRCNTBA_PKR_A_CT(base) (TRNG_RD_PKRCNTBA_PKR_A_CT(base))
/*@}*/

/*!
 * @name Register TRNG_PKRCNTBA, field PKR_B_CT[31:16] (RO)
 *
 * Poker Bh Count. Total number of nibbles of sample data which were found to be
 * Bh. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_PKRCNTBA_PKR_B_CT field. */
#define TRNG_RD_PKRCNTBA_PKR_B_CT(base) ((TRNG_PKRCNTBA_REG(base) & TRNG_PKRCNTBA_PKR_B_CT_MASK) >> TRNG_PKRCNTBA_PKR_B_CT_SHIFT)
#define TRNG_BRD_PKRCNTBA_PKR_B_CT(base) (TRNG_RD_PKRCNTBA_PKR_B_CT(base))
/*@}*/

/*******************************************************************************
 * TRNG_PKRCNTDC - RNG Statistical Check Poker Count D and C Register
 ******************************************************************************/

/*!
 * @brief TRNG_PKRCNTDC - RNG Statistical Check Poker Count D and C Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The RNG Statistical Check Poker Count D and C Register is a read-only
 * register used to read the final Poker test counts of Dh and Ch patterns. The Poker Ch
 * Count increments each time a nibble of sample data is found to be Ch. The
 * Poker Dh Count increments each time a nibble of sample data is found to be Dh.
 * Note that this register is readable only if MCTL[PRGM] is 0, otherwise zeroes
 * will be read.
 */
/*!
 * @name Constants and macros for entire TRNG_PKRCNTDC register
 */
/*@{*/
#define TRNG_RD_PKRCNTDC(base)   (TRNG_PKRCNTDC_REG(base))
/*@}*/

/*
 * Constants & macros for individual TRNG_PKRCNTDC bitfields
 */

/*!
 * @name Register TRNG_PKRCNTDC, field PKR_C_CT[15:0] (RO)
 *
 * Poker Ch Count. Total number of nibbles of sample data which were found to be
 * Ch. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_PKRCNTDC_PKR_C_CT field. */
#define TRNG_RD_PKRCNTDC_PKR_C_CT(base) ((TRNG_PKRCNTDC_REG(base) & TRNG_PKRCNTDC_PKR_C_CT_MASK) >> TRNG_PKRCNTDC_PKR_C_CT_SHIFT)
#define TRNG_BRD_PKRCNTDC_PKR_C_CT(base) (TRNG_RD_PKRCNTDC_PKR_C_CT(base))
/*@}*/

/*!
 * @name Register TRNG_PKRCNTDC, field PKR_D_CT[31:16] (RO)
 *
 * Poker Dh Count. Total number of nibbles of sample data which were found to be
 * Dh. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_PKRCNTDC_PKR_D_CT field. */
#define TRNG_RD_PKRCNTDC_PKR_D_CT(base) ((TRNG_PKRCNTDC_REG(base) & TRNG_PKRCNTDC_PKR_D_CT_MASK) >> TRNG_PKRCNTDC_PKR_D_CT_SHIFT)
#define TRNG_BRD_PKRCNTDC_PKR_D_CT(base) (TRNG_RD_PKRCNTDC_PKR_D_CT(base))
/*@}*/

/*******************************************************************************
 * TRNG_PKRCNTFE - RNG Statistical Check Poker Count F and E Register
 ******************************************************************************/

/*!
 * @brief TRNG_PKRCNTFE - RNG Statistical Check Poker Count F and E Register (RO)
 *
 * Reset value: 0x00000000U
 *
 * The RNG Statistical Check Poker Count F and E Register is a read-only
 * register used to read the final Poker test counts of Fh and Eh patterns. The Poker Eh
 * Count increments each time a nibble of sample data is found to be Eh. The
 * Poker Fh Count increments each time a nibble of sample data is found to be Fh.
 * Note that this register is readable only if MCTL[PRGM] is 0, otherwise zeroes
 * will be read.
 */
/*!
 * @name Constants and macros for entire TRNG_PKRCNTFE register
 */
/*@{*/
#define TRNG_RD_PKRCNTFE(base)   (TRNG_PKRCNTFE_REG(base))
/*@}*/

/*
 * Constants & macros for individual TRNG_PKRCNTFE bitfields
 */

/*!
 * @name Register TRNG_PKRCNTFE, field PKR_E_CT[15:0] (RO)
 *
 * Poker Eh Count. Total number of nibbles of sample data which were found to be
 * Eh. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_PKRCNTFE_PKR_E_CT field. */
#define TRNG_RD_PKRCNTFE_PKR_E_CT(base) ((TRNG_PKRCNTFE_REG(base) & TRNG_PKRCNTFE_PKR_E_CT_MASK) >> TRNG_PKRCNTFE_PKR_E_CT_SHIFT)
#define TRNG_BRD_PKRCNTFE_PKR_E_CT(base) (TRNG_RD_PKRCNTFE_PKR_E_CT(base))
/*@}*/

/*!
 * @name Register TRNG_PKRCNTFE, field PKR_F_CT[31:16] (RO)
 *
 * Poker Fh Count. Total number of nibbles of sample data which were found to be
 * Fh. Requires MCTL[PRGM] = 0.
 */
/*@{*/
/*! @brief Read current value of the TRNG_PKRCNTFE_PKR_F_CT field. */
#define TRNG_RD_PKRCNTFE_PKR_F_CT(base) ((TRNG_PKRCNTFE_REG(base) & TRNG_PKRCNTFE_PKR_F_CT_MASK) >> TRNG_PKRCNTFE_PKR_F_CT_SHIFT)
#define TRNG_BRD_PKRCNTFE_PKR_F_CT(base) (TRNG_RD_PKRCNTFE_PKR_F_CT(base))
/*@}*/

/*******************************************************************************
 * TRNG_SEC_CFG - RNG Security Configuration Register
 ******************************************************************************/

/*!
 * @brief TRNG_SEC_CFG - RNG Security Configuration Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The RNG Security Configuration Register is a read/write register used to
 * control the test mode, programmability and state modes of the RNG. Many bits are
 * place holders for this version. More configurability will be added here. Clears
 * on asynchronous reset. For SA-TRNG releases before 2014/July/01, offsets 0xA0
 * to 0xAC used to be 0xB0 to 0xBC respectively. So, update newer tests that use
 * these registers, if hard coded.
 */
/*!
 * @name Constants and macros for entire TRNG_SEC_CFG register
 */
/*@{*/
#define TRNG_RD_SEC_CFG(base)    (TRNG_SEC_CFG_REG(base))
#define TRNG_WR_SEC_CFG(base, value) (TRNG_SEC_CFG_REG(base) = (value))
#define TRNG_RMW_SEC_CFG(base, mask, value) (TRNG_WR_SEC_CFG(base, (TRNG_RD_SEC_CFG(base) & ~(mask)) | (value)))
#define TRNG_SET_SEC_CFG(base, value) (BME_OR32(&TRNG_SEC_CFG_REG(base), (uint32_t)(value)))
#define TRNG_CLR_SEC_CFG(base, value) (BME_AND32(&TRNG_SEC_CFG_REG(base), (uint32_t)(~(value))))
#define TRNG_TOG_SEC_CFG(base, value) (BME_XOR32(&TRNG_SEC_CFG_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TRNG_SEC_CFG bitfields
 */

/*!
 * @name Register TRNG_SEC_CFG, field SH0[0] (RW)
 *
 * Reserved. DRNG specific, not applicable to this version.
 *
 * Values:
 * - 0b0 - See DRNG version.
 * - 0b1 - See DRNG version.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SEC_CFG_SH0 field. */
#define TRNG_RD_SEC_CFG_SH0(base) ((TRNG_SEC_CFG_REG(base) & TRNG_SEC_CFG_SH0_MASK) >> TRNG_SEC_CFG_SH0_SHIFT)
#define TRNG_BRD_SEC_CFG_SH0(base) (BME_UBFX32(&TRNG_SEC_CFG_REG(base), TRNG_SEC_CFG_SH0_SHIFT, TRNG_SEC_CFG_SH0_WIDTH))

/*! @brief Set the SH0 field to a new value. */
#define TRNG_WR_SEC_CFG_SH0(base, value) (TRNG_RMW_SEC_CFG(base, TRNG_SEC_CFG_SH0_MASK, TRNG_SEC_CFG_SH0(value)))
#define TRNG_BWR_SEC_CFG_SH0(base, value) (BME_BFI32(&TRNG_SEC_CFG_REG(base), ((uint32_t)(value) << TRNG_SEC_CFG_SH0_SHIFT), TRNG_SEC_CFG_SH0_SHIFT, TRNG_SEC_CFG_SH0_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_SEC_CFG, field NO_PRGM[1] (RW)
 *
 * If set the TRNG registers cannot be programmed. That is, regardless of the
 * TRNG access mode in the SA-TRNG Miscellaneous Control Register.
 *
 * Values:
 * - 0b0 - Programability of registers controlled only by the RNG Miscellaneous
 *     Control Register's access mode bit.
 * - 0b1 - Overides RNG Miscellaneous Control Register access mode and prevents
 *     TRNG register programming.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SEC_CFG_NO_PRGM field. */
#define TRNG_RD_SEC_CFG_NO_PRGM(base) ((TRNG_SEC_CFG_REG(base) & TRNG_SEC_CFG_NO_PRGM_MASK) >> TRNG_SEC_CFG_NO_PRGM_SHIFT)
#define TRNG_BRD_SEC_CFG_NO_PRGM(base) (BME_UBFX32(&TRNG_SEC_CFG_REG(base), TRNG_SEC_CFG_NO_PRGM_SHIFT, TRNG_SEC_CFG_NO_PRGM_WIDTH))

/*! @brief Set the NO_PRGM field to a new value. */
#define TRNG_WR_SEC_CFG_NO_PRGM(base, value) (TRNG_RMW_SEC_CFG(base, TRNG_SEC_CFG_NO_PRGM_MASK, TRNG_SEC_CFG_NO_PRGM(value)))
#define TRNG_BWR_SEC_CFG_NO_PRGM(base, value) (BME_BFI32(&TRNG_SEC_CFG_REG(base), ((uint32_t)(value) << TRNG_SEC_CFG_NO_PRGM_SHIFT), TRNG_SEC_CFG_NO_PRGM_SHIFT, TRNG_SEC_CFG_NO_PRGM_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_SEC_CFG, field SK_VAL[2] (RW)
 *
 * Reserved. DRNG-specific, not applicable to this version.
 *
 * Values:
 * - 0b0 - See DRNG version.
 * - 0b1 - See DRNG version.
 */
/*@{*/
/*! @brief Read current value of the TRNG_SEC_CFG_SK_VAL field. */
#define TRNG_RD_SEC_CFG_SK_VAL(base) ((TRNG_SEC_CFG_REG(base) & TRNG_SEC_CFG_SK_VAL_MASK) >> TRNG_SEC_CFG_SK_VAL_SHIFT)
#define TRNG_BRD_SEC_CFG_SK_VAL(base) (BME_UBFX32(&TRNG_SEC_CFG_REG(base), TRNG_SEC_CFG_SK_VAL_SHIFT, TRNG_SEC_CFG_SK_VAL_WIDTH))

/*! @brief Set the SK_VAL field to a new value. */
#define TRNG_WR_SEC_CFG_SK_VAL(base, value) (TRNG_RMW_SEC_CFG(base, TRNG_SEC_CFG_SK_VAL_MASK, TRNG_SEC_CFG_SK_VAL(value)))
#define TRNG_BWR_SEC_CFG_SK_VAL(base, value) (BME_BFI32(&TRNG_SEC_CFG_REG(base), ((uint32_t)(value) << TRNG_SEC_CFG_SK_VAL_SHIFT), TRNG_SEC_CFG_SK_VAL_SHIFT, TRNG_SEC_CFG_SK_VAL_WIDTH))
/*@}*/

/*******************************************************************************
 * TRNG_INT_CTRL - RNG Interrupt Control Register
 ******************************************************************************/

/*!
 * @brief TRNG_INT_CTRL - RNG Interrupt Control Register (RW)
 *
 * Reset value: 0xFFFFFFFFU
 *
 * The RNG Interrupt Control Register is a read/write register used to control
 * the status for the (currently) three important interrupts that are generated by
 * the TRNG. See INT_STATUS register description above. Each interrupt can be
 * cleared by de-asserting the corresponding bit in the INT_CTRL register. Only a
 * new interrupt will reassert the corresponding bit in the status register. Even
 * if the interrupt is cleared or masked, interrupt status information can be
 * read from the MCTL register.
 */
/*!
 * @name Constants and macros for entire TRNG_INT_CTRL register
 */
/*@{*/
#define TRNG_RD_INT_CTRL(base)   (TRNG_INT_CTRL_REG(base))
#define TRNG_WR_INT_CTRL(base, value) (TRNG_INT_CTRL_REG(base) = (value))
#define TRNG_RMW_INT_CTRL(base, mask, value) (TRNG_WR_INT_CTRL(base, (TRNG_RD_INT_CTRL(base) & ~(mask)) | (value)))
#define TRNG_SET_INT_CTRL(base, value) (BME_OR32(&TRNG_INT_CTRL_REG(base), (uint32_t)(value)))
#define TRNG_CLR_INT_CTRL(base, value) (BME_AND32(&TRNG_INT_CTRL_REG(base), (uint32_t)(~(value))))
#define TRNG_TOG_INT_CTRL(base, value) (BME_XOR32(&TRNG_INT_CTRL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TRNG_INT_CTRL bitfields
 */

/*!
 * @name Register TRNG_INT_CTRL, field HW_ERR[0] (RW)
 *
 * Bit position that can be cleared if corresponding bit of INT_STATUS has been
 * asserted.
 *
 * Values:
 * - 0b0 - Corresponding bit of INT_STATUS cleared.
 * - 0b1 - Corresponding bit of INT_STATUS active.
 */
/*@{*/
/*! @brief Read current value of the TRNG_INT_CTRL_HW_ERR field. */
#define TRNG_RD_INT_CTRL_HW_ERR(base) ((TRNG_INT_CTRL_REG(base) & TRNG_INT_CTRL_HW_ERR_MASK) >> TRNG_INT_CTRL_HW_ERR_SHIFT)
#define TRNG_BRD_INT_CTRL_HW_ERR(base) (BME_UBFX32(&TRNG_INT_CTRL_REG(base), TRNG_INT_CTRL_HW_ERR_SHIFT, TRNG_INT_CTRL_HW_ERR_WIDTH))

/*! @brief Set the HW_ERR field to a new value. */
#define TRNG_WR_INT_CTRL_HW_ERR(base, value) (TRNG_RMW_INT_CTRL(base, TRNG_INT_CTRL_HW_ERR_MASK, TRNG_INT_CTRL_HW_ERR(value)))
#define TRNG_BWR_INT_CTRL_HW_ERR(base, value) (BME_BFI32(&TRNG_INT_CTRL_REG(base), ((uint32_t)(value) << TRNG_INT_CTRL_HW_ERR_SHIFT), TRNG_INT_CTRL_HW_ERR_SHIFT, TRNG_INT_CTRL_HW_ERR_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_INT_CTRL, field ENT_VAL[1] (RW)
 *
 * Same behavior as bit 0 above.
 *
 * Values:
 * - 0b0 - Same behavior as bit 0 above.
 * - 0b1 - Same behavior as bit 0 above.
 */
/*@{*/
/*! @brief Read current value of the TRNG_INT_CTRL_ENT_VAL field. */
#define TRNG_RD_INT_CTRL_ENT_VAL(base) ((TRNG_INT_CTRL_REG(base) & TRNG_INT_CTRL_ENT_VAL_MASK) >> TRNG_INT_CTRL_ENT_VAL_SHIFT)
#define TRNG_BRD_INT_CTRL_ENT_VAL(base) (BME_UBFX32(&TRNG_INT_CTRL_REG(base), TRNG_INT_CTRL_ENT_VAL_SHIFT, TRNG_INT_CTRL_ENT_VAL_WIDTH))

/*! @brief Set the ENT_VAL field to a new value. */
#define TRNG_WR_INT_CTRL_ENT_VAL(base, value) (TRNG_RMW_INT_CTRL(base, TRNG_INT_CTRL_ENT_VAL_MASK, TRNG_INT_CTRL_ENT_VAL(value)))
#define TRNG_BWR_INT_CTRL_ENT_VAL(base, value) (BME_BFI32(&TRNG_INT_CTRL_REG(base), ((uint32_t)(value) << TRNG_INT_CTRL_ENT_VAL_SHIFT), TRNG_INT_CTRL_ENT_VAL_SHIFT, TRNG_INT_CTRL_ENT_VAL_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_INT_CTRL, field FRQ_CT_FAIL[2] (RW)
 *
 * Same behavior as bit 0 above.
 *
 * Values:
 * - 0b0 - Same behavior as bit 0 above.
 * - 0b1 - Same behavior as bit 0 above.
 */
/*@{*/
/*! @brief Read current value of the TRNG_INT_CTRL_FRQ_CT_FAIL field. */
#define TRNG_RD_INT_CTRL_FRQ_CT_FAIL(base) ((TRNG_INT_CTRL_REG(base) & TRNG_INT_CTRL_FRQ_CT_FAIL_MASK) >> TRNG_INT_CTRL_FRQ_CT_FAIL_SHIFT)
#define TRNG_BRD_INT_CTRL_FRQ_CT_FAIL(base) (BME_UBFX32(&TRNG_INT_CTRL_REG(base), TRNG_INT_CTRL_FRQ_CT_FAIL_SHIFT, TRNG_INT_CTRL_FRQ_CT_FAIL_WIDTH))

/*! @brief Set the FRQ_CT_FAIL field to a new value. */
#define TRNG_WR_INT_CTRL_FRQ_CT_FAIL(base, value) (TRNG_RMW_INT_CTRL(base, TRNG_INT_CTRL_FRQ_CT_FAIL_MASK, TRNG_INT_CTRL_FRQ_CT_FAIL(value)))
#define TRNG_BWR_INT_CTRL_FRQ_CT_FAIL(base, value) (BME_BFI32(&TRNG_INT_CTRL_REG(base), ((uint32_t)(value) << TRNG_INT_CTRL_FRQ_CT_FAIL_SHIFT), TRNG_INT_CTRL_FRQ_CT_FAIL_SHIFT, TRNG_INT_CTRL_FRQ_CT_FAIL_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_INT_CTRL, field UNUSED[31:3] (RW)
 *
 * Reserved but writeable.
 */
/*@{*/
/*! @brief Read current value of the TRNG_INT_CTRL_UNUSED field. */
#define TRNG_RD_INT_CTRL_UNUSED(base) ((TRNG_INT_CTRL_REG(base) & TRNG_INT_CTRL_UNUSED_MASK) >> TRNG_INT_CTRL_UNUSED_SHIFT)
#define TRNG_BRD_INT_CTRL_UNUSED(base) (TRNG_RD_INT_CTRL_UNUSED(base))

/*! @brief Set the UNUSED field to a new value. */
#define TRNG_WR_INT_CTRL_UNUSED(base, value) (TRNG_RMW_INT_CTRL(base, TRNG_INT_CTRL_UNUSED_MASK, TRNG_INT_CTRL_UNUSED(value)))
#define TRNG_BWR_INT_CTRL_UNUSED(base, value) (TRNG_WR_INT_CTRL_UNUSED(base, value))
/*@}*/

/*******************************************************************************
 * TRNG_INT_MASK - RNG Mask Register
 ******************************************************************************/

/*!
 * @brief TRNG_INT_MASK - RNG Mask Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The RNG Interrupt Mask Register is a read/write register used to disable/mask
 * the status reporting of the (currently) three important interrupts that are
 * generated by the TRNG. See INT_STATUS register description above. Each
 * interrupt can be masked/disabled by de-asserting the corresponding bit in the INT_MASK
 * register. Only setting this bit high will re-enable the interrupt in the
 * status register. Even if the interrupt is cleared or masked, interrupt status
 * information can be read from the MCTL register.
 */
/*!
 * @name Constants and macros for entire TRNG_INT_MASK register
 */
/*@{*/
#define TRNG_RD_INT_MASK(base)   (TRNG_INT_MASK_REG(base))
#define TRNG_WR_INT_MASK(base, value) (TRNG_INT_MASK_REG(base) = (value))
#define TRNG_RMW_INT_MASK(base, mask, value) (TRNG_WR_INT_MASK(base, (TRNG_RD_INT_MASK(base) & ~(mask)) | (value)))
#define TRNG_SET_INT_MASK(base, value) (BME_OR32(&TRNG_INT_MASK_REG(base), (uint32_t)(value)))
#define TRNG_CLR_INT_MASK(base, value) (BME_AND32(&TRNG_INT_MASK_REG(base), (uint32_t)(~(value))))
#define TRNG_TOG_INT_MASK(base, value) (BME_XOR32(&TRNG_INT_MASK_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TRNG_INT_MASK bitfields
 */

/*!
 * @name Register TRNG_INT_MASK, field HW_ERR[0] (RW)
 *
 * Bit position that can be cleared if corresponding bit of INT_STATUS has been
 * asserted.
 *
 * Values:
 * - 0b0 - Corresponding interrupt of INT_STATUS is masked.
 * - 0b1 - Corresponding bit of INT_STATUS is active.
 */
/*@{*/
/*! @brief Read current value of the TRNG_INT_MASK_HW_ERR field. */
#define TRNG_RD_INT_MASK_HW_ERR(base) ((TRNG_INT_MASK_REG(base) & TRNG_INT_MASK_HW_ERR_MASK) >> TRNG_INT_MASK_HW_ERR_SHIFT)
#define TRNG_BRD_INT_MASK_HW_ERR(base) (BME_UBFX32(&TRNG_INT_MASK_REG(base), TRNG_INT_MASK_HW_ERR_SHIFT, TRNG_INT_MASK_HW_ERR_WIDTH))

/*! @brief Set the HW_ERR field to a new value. */
#define TRNG_WR_INT_MASK_HW_ERR(base, value) (TRNG_RMW_INT_MASK(base, TRNG_INT_MASK_HW_ERR_MASK, TRNG_INT_MASK_HW_ERR(value)))
#define TRNG_BWR_INT_MASK_HW_ERR(base, value) (BME_BFI32(&TRNG_INT_MASK_REG(base), ((uint32_t)(value) << TRNG_INT_MASK_HW_ERR_SHIFT), TRNG_INT_MASK_HW_ERR_SHIFT, TRNG_INT_MASK_HW_ERR_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_INT_MASK, field ENT_VAL[1] (RW)
 *
 * Same behavior as bit 0 above.
 *
 * Values:
 * - 0b0 - Same behavior as bit 0 above.
 * - 0b1 - Same behavior as bit 0 above.
 */
/*@{*/
/*! @brief Read current value of the TRNG_INT_MASK_ENT_VAL field. */
#define TRNG_RD_INT_MASK_ENT_VAL(base) ((TRNG_INT_MASK_REG(base) & TRNG_INT_MASK_ENT_VAL_MASK) >> TRNG_INT_MASK_ENT_VAL_SHIFT)
#define TRNG_BRD_INT_MASK_ENT_VAL(base) (BME_UBFX32(&TRNG_INT_MASK_REG(base), TRNG_INT_MASK_ENT_VAL_SHIFT, TRNG_INT_MASK_ENT_VAL_WIDTH))

/*! @brief Set the ENT_VAL field to a new value. */
#define TRNG_WR_INT_MASK_ENT_VAL(base, value) (TRNG_RMW_INT_MASK(base, TRNG_INT_MASK_ENT_VAL_MASK, TRNG_INT_MASK_ENT_VAL(value)))
#define TRNG_BWR_INT_MASK_ENT_VAL(base, value) (BME_BFI32(&TRNG_INT_MASK_REG(base), ((uint32_t)(value) << TRNG_INT_MASK_ENT_VAL_SHIFT), TRNG_INT_MASK_ENT_VAL_SHIFT, TRNG_INT_MASK_ENT_VAL_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_INT_MASK, field FRQ_CT_FAIL[2] (RW)
 *
 * Same behavior as bit 0 above.
 *
 * Values:
 * - 0b0 - Same behavior as bit 0 above.
 * - 0b1 - Same behavior as bit 0 above.
 */
/*@{*/
/*! @brief Read current value of the TRNG_INT_MASK_FRQ_CT_FAIL field. */
#define TRNG_RD_INT_MASK_FRQ_CT_FAIL(base) ((TRNG_INT_MASK_REG(base) & TRNG_INT_MASK_FRQ_CT_FAIL_MASK) >> TRNG_INT_MASK_FRQ_CT_FAIL_SHIFT)
#define TRNG_BRD_INT_MASK_FRQ_CT_FAIL(base) (BME_UBFX32(&TRNG_INT_MASK_REG(base), TRNG_INT_MASK_FRQ_CT_FAIL_SHIFT, TRNG_INT_MASK_FRQ_CT_FAIL_WIDTH))

/*! @brief Set the FRQ_CT_FAIL field to a new value. */
#define TRNG_WR_INT_MASK_FRQ_CT_FAIL(base, value) (TRNG_RMW_INT_MASK(base, TRNG_INT_MASK_FRQ_CT_FAIL_MASK, TRNG_INT_MASK_FRQ_CT_FAIL(value)))
#define TRNG_BWR_INT_MASK_FRQ_CT_FAIL(base, value) (BME_BFI32(&TRNG_INT_MASK_REG(base), ((uint32_t)(value) << TRNG_INT_MASK_FRQ_CT_FAIL_SHIFT), TRNG_INT_MASK_FRQ_CT_FAIL_SHIFT, TRNG_INT_MASK_FRQ_CT_FAIL_WIDTH))
/*@}*/

/*******************************************************************************
 * TRNG_INT_STATUS - RNG Interrupt Status Register
 ******************************************************************************/

/*!
 * @brief TRNG_INT_STATUS - RNG Interrupt Status Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The RNG Interrupt Status Register is a read register used to control and
 * provide status for the (currently) three important interrupts that are generated
 * by the TRNG. The ipi_rng_int_b interrupt signals that RNG has either generated
 * a Frequency Count Fail, Entropy Valid or Error Interrupt. The cause of the
 * interrupt can be decoded by checking the least significant bits of the INT_STATUS
 * register. Each interrupt can be temporarily cleared by de-asserting the
 * corresponding bit in the INT_CTRL register. To mask the interrupts, clear the
 * corresponding bits in the INT_MASK register. The description of each of the 3
 * interrupts is defined in the Block Guide under the MCTL register description. Even
 * if the interrupt is cleared or masked, interrupt status information can be
 * read from the MCTL register.
 */
/*!
 * @name Constants and macros for entire TRNG_INT_STATUS register
 */
/*@{*/
#define TRNG_RD_INT_STATUS(base) (TRNG_INT_STATUS_REG(base))
#define TRNG_WR_INT_STATUS(base, value) (TRNG_INT_STATUS_REG(base) = (value))
#define TRNG_RMW_INT_STATUS(base, mask, value) (TRNG_WR_INT_STATUS(base, (TRNG_RD_INT_STATUS(base) & ~(mask)) | (value)))
#define TRNG_SET_INT_STATUS(base, value) (BME_OR32(&TRNG_INT_STATUS_REG(base), (uint32_t)(value)))
#define TRNG_CLR_INT_STATUS(base, value) (BME_AND32(&TRNG_INT_STATUS_REG(base), (uint32_t)(~(value))))
#define TRNG_TOG_INT_STATUS(base, value) (BME_XOR32(&TRNG_INT_STATUS_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TRNG_INT_STATUS bitfields
 */

/*!
 * @name Register TRNG_INT_STATUS, field HW_ERR[0] (RO)
 *
 * Read: Error status. 1 = error detected. 0 = no error. Any HW error in the
 * TRNG will trigger this interrupt.
 *
 * Values:
 * - 0b0 - no error
 * - 0b1 - error detected.
 */
/*@{*/
/*! @brief Read current value of the TRNG_INT_STATUS_HW_ERR field. */
#define TRNG_RD_INT_STATUS_HW_ERR(base) ((TRNG_INT_STATUS_REG(base) & TRNG_INT_STATUS_HW_ERR_MASK) >> TRNG_INT_STATUS_HW_ERR_SHIFT)
#define TRNG_BRD_INT_STATUS_HW_ERR(base) (BME_UBFX32(&TRNG_INT_STATUS_REG(base), TRNG_INT_STATUS_HW_ERR_SHIFT, TRNG_INT_STATUS_HW_ERR_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_INT_STATUS, field ENT_VAL[1] (RO)
 *
 * Read only: Entropy Valid. Will assert only if TRNG ACC bit is set, and then
 * after an entropy value is generated. Will be cleared when ENT15 is read. (ENT0
 * through ENT14 should be read before reading ENT15).
 *
 * Values:
 * - 0b0 - Busy generation entropy. Any value read is invalid.
 * - 0b1 - TRNG can be stopped and entropy is valid if read.
 */
/*@{*/
/*! @brief Read current value of the TRNG_INT_STATUS_ENT_VAL field. */
#define TRNG_RD_INT_STATUS_ENT_VAL(base) ((TRNG_INT_STATUS_REG(base) & TRNG_INT_STATUS_ENT_VAL_MASK) >> TRNG_INT_STATUS_ENT_VAL_SHIFT)
#define TRNG_BRD_INT_STATUS_ENT_VAL(base) (BME_UBFX32(&TRNG_INT_STATUS_REG(base), TRNG_INT_STATUS_ENT_VAL_SHIFT, TRNG_INT_STATUS_ENT_VAL_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_INT_STATUS, field FRQ_CT_FAIL[2] (RW)
 *
 * Read only: Frequency Count Fail. The frequency counter has detected a
 * failure. This may be due to improper programming of the FRQMAX and/or FRQMIN
 * registers, or a hardware failure in the ring oscillator.
 *
 * Values:
 * - 0b0 - No hardware nor self test frequency errors.
 * - 0b1 - The frequency counter has detected a failure.
 */
/*@{*/
/*! @brief Read current value of the TRNG_INT_STATUS_FRQ_CT_FAIL field. */
#define TRNG_RD_INT_STATUS_FRQ_CT_FAIL(base) ((TRNG_INT_STATUS_REG(base) & TRNG_INT_STATUS_FRQ_CT_FAIL_MASK) >> TRNG_INT_STATUS_FRQ_CT_FAIL_SHIFT)
#define TRNG_BRD_INT_STATUS_FRQ_CT_FAIL(base) (BME_UBFX32(&TRNG_INT_STATUS_REG(base), TRNG_INT_STATUS_FRQ_CT_FAIL_SHIFT, TRNG_INT_STATUS_FRQ_CT_FAIL_WIDTH))

/*! @brief Set the FRQ_CT_FAIL field to a new value. */
#define TRNG_WR_INT_STATUS_FRQ_CT_FAIL(base, value) (TRNG_RMW_INT_STATUS(base, TRNG_INT_STATUS_FRQ_CT_FAIL_MASK, TRNG_INT_STATUS_FRQ_CT_FAIL(value)))
#define TRNG_BWR_INT_STATUS_FRQ_CT_FAIL(base, value) (BME_BFI32(&TRNG_INT_STATUS_REG(base), ((uint32_t)(value) << TRNG_INT_STATUS_FRQ_CT_FAIL_SHIFT), TRNG_INT_STATUS_FRQ_CT_FAIL_SHIFT, TRNG_INT_STATUS_FRQ_CT_FAIL_WIDTH))
/*@}*/

/*******************************************************************************
 * TRNG_VID1 - RNG Version ID Register (MS)
 ******************************************************************************/

/*!
 * @brief TRNG_VID1 - RNG Version ID Register (MS) (RO)
 *
 * Reset value: 0x00300100U
 *
 * The RNG Version ID Register is a read only register used to identify the
 * version of the TRNG in use. This register as well as VID2 should both be read to
 * verify the expected version.
 */
/*!
 * @name Constants and macros for entire TRNG_VID1 register
 */
/*@{*/
#define TRNG_RD_VID1(base)       (TRNG_VID1_REG(base))
/*@}*/

/*
 * Constants & macros for individual TRNG_VID1 bitfields
 */

/*!
 * @name Register TRNG_VID1, field RNG_MIN_REV[7:0] (RO)
 *
 * Shows the Freescale IP's Minor revision of the TRNG.
 *
 * Values:
 * - 0b00000000 - Minor revision number for TRNG.
 */
/*@{*/
/*! @brief Read current value of the TRNG_VID1_RNG_MIN_REV field. */
#define TRNG_RD_VID1_RNG_MIN_REV(base) ((TRNG_VID1_REG(base) & TRNG_VID1_RNG_MIN_REV_MASK) >> TRNG_VID1_RNG_MIN_REV_SHIFT)
#define TRNG_BRD_VID1_RNG_MIN_REV(base) (BME_UBFX32(&TRNG_VID1_REG(base), TRNG_VID1_RNG_MIN_REV_SHIFT, TRNG_VID1_RNG_MIN_REV_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_VID1, field RNG_MAJ_REV[15:8] (RO)
 *
 * Shows the Freescale IP's Major revision of the TRNG.
 *
 * Values:
 * - 0b00000001 - Major revision number for TRNG.
 */
/*@{*/
/*! @brief Read current value of the TRNG_VID1_RNG_MAJ_REV field. */
#define TRNG_RD_VID1_RNG_MAJ_REV(base) ((TRNG_VID1_REG(base) & TRNG_VID1_RNG_MAJ_REV_MASK) >> TRNG_VID1_RNG_MAJ_REV_SHIFT)
#define TRNG_BRD_VID1_RNG_MAJ_REV(base) (BME_UBFX32(&TRNG_VID1_REG(base), TRNG_VID1_RNG_MAJ_REV_SHIFT, TRNG_VID1_RNG_MAJ_REV_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_VID1, field RNG_IP_ID[31:16] (RO)
 *
 * Shows the Freescale IP ID.
 */
/*@{*/
/*! @brief Read current value of the TRNG_VID1_RNG_IP_ID field. */
#define TRNG_RD_VID1_RNG_IP_ID(base) ((TRNG_VID1_REG(base) & TRNG_VID1_RNG_IP_ID_MASK) >> TRNG_VID1_RNG_IP_ID_SHIFT)
#define TRNG_BRD_VID1_RNG_IP_ID(base) (TRNG_RD_VID1_RNG_IP_ID(base))
/*@}*/

/*******************************************************************************
 * TRNG_VID2 - RNG Version ID Register (LS)
 ******************************************************************************/

/*!
 * @brief TRNG_VID2 - RNG Version ID Register (LS) (RO)
 *
 * Reset value: 0x00000000U
 *
 * The RNG Version ID Register LSB is a read only register used to identify the
 * architecture of the TRNG in use. This register as well as VID1 should both be
 * read to verify the expected version.
 */
/*!
 * @name Constants and macros for entire TRNG_VID2 register
 */
/*@{*/
#define TRNG_RD_VID2(base)       (TRNG_VID2_REG(base))
/*@}*/

/*
 * Constants & macros for individual TRNG_VID2 bitfields
 */

/*!
 * @name Register TRNG_VID2, field RNG_CONFIG_OPT[7:0] (RO)
 *
 * Shows the Freescale IP's Configuaration options for the TRNG.
 *
 * Values:
 * - 0b00000000 - TRNG_CONFIG_OPT for TRNG.
 */
/*@{*/
/*! @brief Read current value of the TRNG_VID2_RNG_CONFIG_OPT field. */
#define TRNG_RD_VID2_RNG_CONFIG_OPT(base) ((TRNG_VID2_REG(base) & TRNG_VID2_RNG_CONFIG_OPT_MASK) >> TRNG_VID2_RNG_CONFIG_OPT_SHIFT)
#define TRNG_BRD_VID2_RNG_CONFIG_OPT(base) (BME_UBFX32(&TRNG_VID2_REG(base), TRNG_VID2_RNG_CONFIG_OPT_SHIFT, TRNG_VID2_RNG_CONFIG_OPT_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_VID2, field RNG_ECO_REV[15:8] (RO)
 *
 * Shows the Freescale IP's ECO revision of the TRNG.
 *
 * Values:
 * - 0b00000000 - TRNG_ECO_REV for TRNG.
 */
/*@{*/
/*! @brief Read current value of the TRNG_VID2_RNG_ECO_REV field. */
#define TRNG_RD_VID2_RNG_ECO_REV(base) ((TRNG_VID2_REG(base) & TRNG_VID2_RNG_ECO_REV_MASK) >> TRNG_VID2_RNG_ECO_REV_SHIFT)
#define TRNG_BRD_VID2_RNG_ECO_REV(base) (BME_UBFX32(&TRNG_VID2_REG(base), TRNG_VID2_RNG_ECO_REV_SHIFT, TRNG_VID2_RNG_ECO_REV_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_VID2, field RNG_INTG_OPT[23:16] (RO)
 *
 * Shows the Freescale integration options for the TRNG.
 *
 * Values:
 * - 0b00000000 - INTG_OPT for TRNG.
 */
/*@{*/
/*! @brief Read current value of the TRNG_VID2_RNG_INTG_OPT field. */
#define TRNG_RD_VID2_RNG_INTG_OPT(base) ((TRNG_VID2_REG(base) & TRNG_VID2_RNG_INTG_OPT_MASK) >> TRNG_VID2_RNG_INTG_OPT_SHIFT)
#define TRNG_BRD_VID2_RNG_INTG_OPT(base) (BME_UBFX32(&TRNG_VID2_REG(base), TRNG_VID2_RNG_INTG_OPT_SHIFT, TRNG_VID2_RNG_INTG_OPT_WIDTH))
/*@}*/

/*!
 * @name Register TRNG_VID2, field RNG_ERA[31:24] (RO)
 *
 * Shows the Freescale compile options for the TRNG.
 *
 * Values:
 * - 0b00000000 - COMPILE_OPT for TRNG.
 */
/*@{*/
/*! @brief Read current value of the TRNG_VID2_RNG_ERA field. */
#define TRNG_RD_VID2_RNG_ERA(base) ((TRNG_VID2_REG(base) & TRNG_VID2_RNG_ERA_MASK) >> TRNG_VID2_RNG_ERA_SHIFT)
#define TRNG_BRD_VID2_RNG_ERA(base) (BME_UBFX32(&TRNG_VID2_REG(base), TRNG_VID2_RNG_ERA_SHIFT, TRNG_VID2_RNG_ERA_WIDTH))
/*@}*/

/*
 * MK82F25615 TSI
 *
 * Touch sense input
 *
 * Registers defined in this header file:
 * - TSI_GENCS - TSI General Control and Status Register
 * - TSI_DATA - TSI DATA Register
 * - TSI_TSHD - TSI Threshold Register
 */

#define TSI_INSTANCE_COUNT (1U) /*!< Number of instances of the TSI module. */
#define TSI0_IDX (0U) /*!< Instance number for TSI0. */

/*******************************************************************************
 * TSI_GENCS - TSI General Control and Status Register
 ******************************************************************************/

/*!
 * @brief TSI_GENCS - TSI General Control and Status Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * This control register provides various control and configuration information
 * for the TSI module. When TSI is working, the configuration bits (GENCS[TSIEN],
 * GENCS[TSIIEN], and GENCS[STM]) must not be changed. The EOSF flag is kept
 * until the software acknowledge it.
 */
/*!
 * @name Constants and macros for entire TSI_GENCS register
 */
/*@{*/
#define TSI_RD_GENCS(base)       (TSI_GENCS_REG(base))
#define TSI_WR_GENCS(base, value) (TSI_GENCS_REG(base) = (value))
#define TSI_RMW_GENCS(base, mask, value) (TSI_WR_GENCS(base, (TSI_RD_GENCS(base) & ~(mask)) | (value)))
#define TSI_SET_GENCS(base, value) (BME_OR32(&TSI_GENCS_REG(base), (uint32_t)(value)))
#define TSI_CLR_GENCS(base, value) (BME_AND32(&TSI_GENCS_REG(base), (uint32_t)(~(value))))
#define TSI_TOG_GENCS(base, value) (BME_XOR32(&TSI_GENCS_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TSI_GENCS bitfields
 */

/*!
 * @name Register TSI_GENCS, field EOSDMEO[0] (RW)
 *
 * This bit makes simultaneous DMA request at End-of-Scan and Interrupt at
 * Out-of-Range possible. EOSDMEO has precedence to ESOR when trying to set this bit
 * and ESOR bit. When EOSDMEO = 1, End-of-Scan will generate DMA request and
 * Out-of-Range will generate interrupt.
 *
 * Values:
 * - 0b0 - Do not enable the End-of-Scan DMA transfer request only. Depending on
 *     ESOR state, either Out-of-Range or End-of-Scan can trigger a DMA transfer
 *     request and interrupt.
 * - 0b1 - Only the End-of-Scan event can trigger a DMA transfer request. The
 *     Out-of-Range event only and always triggers an interrupt if TSIIE is set.
 */
/*@{*/
/*! @brief Read current value of the TSI_GENCS_EOSDMEO field. */
#define TSI_RD_GENCS_EOSDMEO(base) ((TSI_GENCS_REG(base) & TSI_GENCS_EOSDMEO_MASK) >> TSI_GENCS_EOSDMEO_SHIFT)
#define TSI_BRD_GENCS_EOSDMEO(base) (BME_UBFX32(&TSI_GENCS_REG(base), TSI_GENCS_EOSDMEO_SHIFT, TSI_GENCS_EOSDMEO_WIDTH))

/*! @brief Set the EOSDMEO field to a new value. */
#define TSI_WR_GENCS_EOSDMEO(base, value) (TSI_RMW_GENCS(base, (TSI_GENCS_EOSDMEO_MASK | TSI_GENCS_EOSF_MASK | TSI_GENCS_OUTRGF_MASK), TSI_GENCS_EOSDMEO(value)))
#define TSI_BWR_GENCS_EOSDMEO(base, value) (BME_BFI32(&TSI_GENCS_REG(base), ((uint32_t)(value) << TSI_GENCS_EOSDMEO_SHIFT), TSI_GENCS_EOSDMEO_SHIFT, TSI_GENCS_EOSDMEO_WIDTH))
/*@}*/

/*!
 * @name Register TSI_GENCS, field CURSW[1] (RW)
 *
 * This bit specifies if the current sources of electrode oscillator and
 * reference oscillator are swapped.
 *
 * Values:
 * - 0b0 - The current source pair are not swapped.
 * - 0b1 - The current source pair are swapped.
 */
/*@{*/
/*! @brief Read current value of the TSI_GENCS_CURSW field. */
#define TSI_RD_GENCS_CURSW(base) ((TSI_GENCS_REG(base) & TSI_GENCS_CURSW_MASK) >> TSI_GENCS_CURSW_SHIFT)
#define TSI_BRD_GENCS_CURSW(base) (BME_UBFX32(&TSI_GENCS_REG(base), TSI_GENCS_CURSW_SHIFT, TSI_GENCS_CURSW_WIDTH))

/*! @brief Set the CURSW field to a new value. */
#define TSI_WR_GENCS_CURSW(base, value) (TSI_RMW_GENCS(base, (TSI_GENCS_CURSW_MASK | TSI_GENCS_EOSF_MASK | TSI_GENCS_OUTRGF_MASK), TSI_GENCS_CURSW(value)))
#define TSI_BWR_GENCS_CURSW(base, value) (BME_BFI32(&TSI_GENCS_REG(base), ((uint32_t)(value) << TSI_GENCS_CURSW_SHIFT), TSI_GENCS_CURSW_SHIFT, TSI_GENCS_CURSW_WIDTH))
/*@}*/

/*!
 * @name Register TSI_GENCS, field EOSF[2] (W1C)
 *
 * This flag is set when all active electrodes are finished scanning after a
 * scan trigger. Write "1" , when this flag is set, to clear it.
 *
 * Values:
 * - 0b0 - Scan not complete.
 * - 0b1 - Scan complete.
 */
/*@{*/
/*! @brief Read current value of the TSI_GENCS_EOSF field. */
#define TSI_RD_GENCS_EOSF(base) ((TSI_GENCS_REG(base) & TSI_GENCS_EOSF_MASK) >> TSI_GENCS_EOSF_SHIFT)
#define TSI_BRD_GENCS_EOSF(base) (BME_UBFX32(&TSI_GENCS_REG(base), TSI_GENCS_EOSF_SHIFT, TSI_GENCS_EOSF_WIDTH))

/*! @brief Set the EOSF field to a new value. */
#define TSI_WR_GENCS_EOSF(base, value) (TSI_RMW_GENCS(base, (TSI_GENCS_EOSF_MASK | TSI_GENCS_OUTRGF_MASK), TSI_GENCS_EOSF(value)))
#define TSI_BWR_GENCS_EOSF(base, value) (BME_BFI32(&TSI_GENCS_REG(base), ((uint32_t)(value) << TSI_GENCS_EOSF_SHIFT), TSI_GENCS_EOSF_SHIFT, TSI_GENCS_EOSF_WIDTH))
/*@}*/

/*!
 * @name Register TSI_GENCS, field SCNIP[3] (RO)
 *
 * This read-only bit indicates if scan is in progress. This bit will get
 * asserted after the analog bias circuit is stable after a trigger and it changes
 * automatically by the TSI.
 *
 * Values:
 * - 0b0 - No scan in progress.
 * - 0b1 - Scan in progress.
 */
/*@{*/
/*! @brief Read current value of the TSI_GENCS_SCNIP field. */
#define TSI_RD_GENCS_SCNIP(base) ((TSI_GENCS_REG(base) & TSI_GENCS_SCNIP_MASK) >> TSI_GENCS_SCNIP_SHIFT)
#define TSI_BRD_GENCS_SCNIP(base) (BME_UBFX32(&TSI_GENCS_REG(base), TSI_GENCS_SCNIP_SHIFT, TSI_GENCS_SCNIP_WIDTH))
/*@}*/

/*!
 * @name Register TSI_GENCS, field STM[4] (RW)
 *
 * This bit specifies the trigger mode. User is allowed to change this bit when
 * TSI is not working in progress.
 *
 * Values:
 * - 0b0 - Software trigger scan.
 * - 0b1 - Hardware trigger scan.
 */
/*@{*/
/*! @brief Read current value of the TSI_GENCS_STM field. */
#define TSI_RD_GENCS_STM(base) ((TSI_GENCS_REG(base) & TSI_GENCS_STM_MASK) >> TSI_GENCS_STM_SHIFT)
#define TSI_BRD_GENCS_STM(base) (BME_UBFX32(&TSI_GENCS_REG(base), TSI_GENCS_STM_SHIFT, TSI_GENCS_STM_WIDTH))

/*! @brief Set the STM field to a new value. */
#define TSI_WR_GENCS_STM(base, value) (TSI_RMW_GENCS(base, (TSI_GENCS_STM_MASK | TSI_GENCS_EOSF_MASK | TSI_GENCS_OUTRGF_MASK), TSI_GENCS_STM(value)))
#define TSI_BWR_GENCS_STM(base, value) (BME_BFI32(&TSI_GENCS_REG(base), ((uint32_t)(value) << TSI_GENCS_STM_SHIFT), TSI_GENCS_STM_SHIFT, TSI_GENCS_STM_WIDTH))
/*@}*/

/*!
 * @name Register TSI_GENCS, field STPE[5] (RW)
 *
 * This bit enables TSI module function in low power modes (stop, VLPS, LLS and
 * VLLS{3,2,1}).
 *
 * Values:
 * - 0b0 - TSI is disabled when MCU goes into low power mode.
 * - 0b1 - Allows TSI to continue running in all low power modes.
 */
/*@{*/
/*! @brief Read current value of the TSI_GENCS_STPE field. */
#define TSI_RD_GENCS_STPE(base) ((TSI_GENCS_REG(base) & TSI_GENCS_STPE_MASK) >> TSI_GENCS_STPE_SHIFT)
#define TSI_BRD_GENCS_STPE(base) (BME_UBFX32(&TSI_GENCS_REG(base), TSI_GENCS_STPE_SHIFT, TSI_GENCS_STPE_WIDTH))

/*! @brief Set the STPE field to a new value. */
#define TSI_WR_GENCS_STPE(base, value) (TSI_RMW_GENCS(base, (TSI_GENCS_STPE_MASK | TSI_GENCS_EOSF_MASK | TSI_GENCS_OUTRGF_MASK), TSI_GENCS_STPE(value)))
#define TSI_BWR_GENCS_STPE(base, value) (BME_BFI32(&TSI_GENCS_REG(base), ((uint32_t)(value) << TSI_GENCS_STPE_SHIFT), TSI_GENCS_STPE_SHIFT, TSI_GENCS_STPE_WIDTH))
/*@}*/

/*!
 * @name Register TSI_GENCS, field TSIIEN[6] (RW)
 *
 * This bit enables TSI module interrupt request to CPU when the scan completes.
 * The interrupt will wake MCU from low power mode if this interrupt is enabled.
 *
 * Values:
 * - 0b0 - TSI interrupt is disabled.
 * - 0b1 - TSI interrupt is enabled.
 */
/*@{*/
/*! @brief Read current value of the TSI_GENCS_TSIIEN field. */
#define TSI_RD_GENCS_TSIIEN(base) ((TSI_GENCS_REG(base) & TSI_GENCS_TSIIEN_MASK) >> TSI_GENCS_TSIIEN_SHIFT)
#define TSI_BRD_GENCS_TSIIEN(base) (BME_UBFX32(&TSI_GENCS_REG(base), TSI_GENCS_TSIIEN_SHIFT, TSI_GENCS_TSIIEN_WIDTH))

/*! @brief Set the TSIIEN field to a new value. */
#define TSI_WR_GENCS_TSIIEN(base, value) (TSI_RMW_GENCS(base, (TSI_GENCS_TSIIEN_MASK | TSI_GENCS_EOSF_MASK | TSI_GENCS_OUTRGF_MASK), TSI_GENCS_TSIIEN(value)))
#define TSI_BWR_GENCS_TSIIEN(base, value) (BME_BFI32(&TSI_GENCS_REG(base), ((uint32_t)(value) << TSI_GENCS_TSIIEN_SHIFT), TSI_GENCS_TSIIEN_SHIFT, TSI_GENCS_TSIIEN_WIDTH))
/*@}*/

/*!
 * @name Register TSI_GENCS, field TSIEN[7] (RW)
 *
 * This bit enables TSI module.
 *
 * Values:
 * - 0b0 - TSI module disabled.
 * - 0b1 - TSI module enabled.
 */
/*@{*/
/*! @brief Read current value of the TSI_GENCS_TSIEN field. */
#define TSI_RD_GENCS_TSIEN(base) ((TSI_GENCS_REG(base) & TSI_GENCS_TSIEN_MASK) >> TSI_GENCS_TSIEN_SHIFT)
#define TSI_BRD_GENCS_TSIEN(base) (BME_UBFX32(&TSI_GENCS_REG(base), TSI_GENCS_TSIEN_SHIFT, TSI_GENCS_TSIEN_WIDTH))

/*! @brief Set the TSIEN field to a new value. */
#define TSI_WR_GENCS_TSIEN(base, value) (TSI_RMW_GENCS(base, (TSI_GENCS_TSIEN_MASK | TSI_GENCS_EOSF_MASK | TSI_GENCS_OUTRGF_MASK), TSI_GENCS_TSIEN(value)))
#define TSI_BWR_GENCS_TSIEN(base, value) (BME_BFI32(&TSI_GENCS_REG(base), ((uint32_t)(value) << TSI_GENCS_TSIEN_SHIFT), TSI_GENCS_TSIEN_SHIFT, TSI_GENCS_TSIEN_WIDTH))
/*@}*/

/*!
 * @name Register TSI_GENCS, field NSCN[12:8] (RW)
 *
 * These bits indicate the scan number for each electrode. The scan number is
 * equal to NSCN + 1, which allows the scan time ranges from 1 to 32. By default,
 * NSCN is configured as 0, which asserts the TSI scans once on the selected
 * eletrode channel.
 *
 * Values:
 * - 0b00000 - Once per electrode
 * - 0b00001 - Twice per electrode
 * - 0b00010 - 3 times per electrode
 * - 0b00011 - 4 times per electrode
 * - 0b00100 - 5 times per electrode
 * - 0b00101 - 6 times per electrode
 * - 0b00110 - 7 times per electrode
 * - 0b00111 - 8 times per electrode
 * - 0b01000 - 9 times per electrode
 * - 0b01001 - 10 times per electrode
 * - 0b01010 - 11 times per electrode
 * - 0b01011 - 12 times per electrode
 * - 0b01100 - 13 times per electrode
 * - 0b01101 - 14 times per electrode
 * - 0b01110 - 15 times per electrode
 * - 0b01111 - 16 times per electrode
 * - 0b10000 - 17 times per electrode
 * - 0b10001 - 18 times per electrode
 * - 0b10010 - 19 times per electrode
 * - 0b10011 - 20 times per electrode
 * - 0b10100 - 21 times per electrode
 * - 0b10101 - 22 times per electrode
 * - 0b10110 - 23 times per electrode
 * - 0b10111 - 24 times per electrode
 * - 0b11000 - 25 times per electrode
 * - 0b11001 - 26 times per electrode
 * - 0b11010 - 27 times per electrode
 * - 0b11011 - 28 times per electrode
 * - 0b11100 - 29 times per electrode
 * - 0b11101 - 30 times per electrode
 * - 0b11110 - 31 times per electrode
 * - 0b11111 - 32 times per electrode
 */
/*@{*/
/*! @brief Read current value of the TSI_GENCS_NSCN field. */
#define TSI_RD_GENCS_NSCN(base) ((TSI_GENCS_REG(base) & TSI_GENCS_NSCN_MASK) >> TSI_GENCS_NSCN_SHIFT)
#define TSI_BRD_GENCS_NSCN(base) (BME_UBFX32(&TSI_GENCS_REG(base), TSI_GENCS_NSCN_SHIFT, TSI_GENCS_NSCN_WIDTH))

/*! @brief Set the NSCN field to a new value. */
#define TSI_WR_GENCS_NSCN(base, value) (TSI_RMW_GENCS(base, (TSI_GENCS_NSCN_MASK | TSI_GENCS_EOSF_MASK | TSI_GENCS_OUTRGF_MASK), TSI_GENCS_NSCN(value)))
#define TSI_BWR_GENCS_NSCN(base, value) (BME_BFI32(&TSI_GENCS_REG(base), ((uint32_t)(value) << TSI_GENCS_NSCN_SHIFT), TSI_GENCS_NSCN_SHIFT, TSI_GENCS_NSCN_WIDTH))
/*@}*/

/*!
 * @name Register TSI_GENCS, field PS[15:13] (RW)
 *
 * These bits indicate the prescaler of the output of electrode oscillator.
 *
 * Values:
 * - 0b000 - Electrode Oscillator Frequency divided by 1
 * - 0b001 - Electrode Oscillator Frequency divided by 2
 * - 0b010 - Electrode Oscillator Frequency divided by 4
 * - 0b011 - Electrode Oscillator Frequency divided by 8
 * - 0b100 - Electrode Oscillator Frequency divided by 16
 * - 0b101 - Electrode Oscillator Frequency divided by 32
 * - 0b110 - Electrode Oscillator Frequency divided by 64
 * - 0b111 - Electrode Oscillator Frequency divided by 128
 */
/*@{*/
/*! @brief Read current value of the TSI_GENCS_PS field. */
#define TSI_RD_GENCS_PS(base) ((TSI_GENCS_REG(base) & TSI_GENCS_PS_MASK) >> TSI_GENCS_PS_SHIFT)
#define TSI_BRD_GENCS_PS(base) (BME_UBFX32(&TSI_GENCS_REG(base), TSI_GENCS_PS_SHIFT, TSI_GENCS_PS_WIDTH))

/*! @brief Set the PS field to a new value. */
#define TSI_WR_GENCS_PS(base, value) (TSI_RMW_GENCS(base, (TSI_GENCS_PS_MASK | TSI_GENCS_EOSF_MASK | TSI_GENCS_OUTRGF_MASK), TSI_GENCS_PS(value)))
#define TSI_BWR_GENCS_PS(base, value) (BME_BFI32(&TSI_GENCS_REG(base), ((uint32_t)(value) << TSI_GENCS_PS_SHIFT), TSI_GENCS_PS_SHIFT, TSI_GENCS_PS_WIDTH))
/*@}*/

/*!
 * @name Register TSI_GENCS, field EXTCHRG[18:16] (RW)
 *
 * These bits indicate the electrode oscillator charge and discharge current
 * value.
 *
 * Values:
 * - 0b000 - 500 nA.
 * - 0b001 - 1 uA.
 * - 0b010 - 2 uA.
 * - 0b011 - 4 uA.
 * - 0b100 - 8 uA.
 * - 0b101 - 16 uA.
 * - 0b110 - 32 uA.
 * - 0b111 - 64 uA.
 */
/*@{*/
/*! @brief Read current value of the TSI_GENCS_EXTCHRG field. */
#define TSI_RD_GENCS_EXTCHRG(base) ((TSI_GENCS_REG(base) & TSI_GENCS_EXTCHRG_MASK) >> TSI_GENCS_EXTCHRG_SHIFT)
#define TSI_BRD_GENCS_EXTCHRG(base) (BME_UBFX32(&TSI_GENCS_REG(base), TSI_GENCS_EXTCHRG_SHIFT, TSI_GENCS_EXTCHRG_WIDTH))

/*! @brief Set the EXTCHRG field to a new value. */
#define TSI_WR_GENCS_EXTCHRG(base, value) (TSI_RMW_GENCS(base, (TSI_GENCS_EXTCHRG_MASK | TSI_GENCS_EOSF_MASK | TSI_GENCS_OUTRGF_MASK), TSI_GENCS_EXTCHRG(value)))
#define TSI_BWR_GENCS_EXTCHRG(base, value) (BME_BFI32(&TSI_GENCS_REG(base), ((uint32_t)(value) << TSI_GENCS_EXTCHRG_SHIFT), TSI_GENCS_EXTCHRG_SHIFT, TSI_GENCS_EXTCHRG_WIDTH))
/*@}*/

/*!
 * @name Register TSI_GENCS, field DVOLT[20:19] (RW)
 *
 * These bits indicate the oscillator's voltage rails as below.
 *
 * Values:
 * - 0b00 - DV = 1.026 V; VP = 1.328 V; Vm = 0.302 V.
 * - 0b01 - DV = 0.592 V; VP = 1.111 V; Vm = 0.519 V.
 * - 0b10 - DV = 0.342 V; VP = 0.986 V; Vm = 0.644 V.
 * - 0b11 - DV = 0.197 V; VP = 0.914 V; Vm = 0.716 V.
 */
/*@{*/
/*! @brief Read current value of the TSI_GENCS_DVOLT field. */
#define TSI_RD_GENCS_DVOLT(base) ((TSI_GENCS_REG(base) & TSI_GENCS_DVOLT_MASK) >> TSI_GENCS_DVOLT_SHIFT)
#define TSI_BRD_GENCS_DVOLT(base) (BME_UBFX32(&TSI_GENCS_REG(base), TSI_GENCS_DVOLT_SHIFT, TSI_GENCS_DVOLT_WIDTH))

/*! @brief Set the DVOLT field to a new value. */
#define TSI_WR_GENCS_DVOLT(base, value) (TSI_RMW_GENCS(base, (TSI_GENCS_DVOLT_MASK | TSI_GENCS_EOSF_MASK | TSI_GENCS_OUTRGF_MASK), TSI_GENCS_DVOLT(value)))
#define TSI_BWR_GENCS_DVOLT(base, value) (BME_BFI32(&TSI_GENCS_REG(base), ((uint32_t)(value) << TSI_GENCS_DVOLT_SHIFT), TSI_GENCS_DVOLT_SHIFT, TSI_GENCS_DVOLT_WIDTH))
/*@}*/

/*!
 * @name Register TSI_GENCS, field REFCHRG[23:21] (RW)
 *
 * These bits indicate the reference oscillator charge and discharge current
 * value.
 *
 * Values:
 * - 0b000 - 500 nA.
 * - 0b001 - 1 uA.
 * - 0b010 - 2 uA.
 * - 0b011 - 4 uA.
 * - 0b100 - 8 uA.
 * - 0b101 - 16 uA.
 * - 0b110 - 32 uA.
 * - 0b111 - 64 uA.
 */
/*@{*/
/*! @brief Read current value of the TSI_GENCS_REFCHRG field. */
#define TSI_RD_GENCS_REFCHRG(base) ((TSI_GENCS_REG(base) & TSI_GENCS_REFCHRG_MASK) >> TSI_GENCS_REFCHRG_SHIFT)
#define TSI_BRD_GENCS_REFCHRG(base) (BME_UBFX32(&TSI_GENCS_REG(base), TSI_GENCS_REFCHRG_SHIFT, TSI_GENCS_REFCHRG_WIDTH))

/*! @brief Set the REFCHRG field to a new value. */
#define TSI_WR_GENCS_REFCHRG(base, value) (TSI_RMW_GENCS(base, (TSI_GENCS_REFCHRG_MASK | TSI_GENCS_EOSF_MASK | TSI_GENCS_OUTRGF_MASK), TSI_GENCS_REFCHRG(value)))
#define TSI_BWR_GENCS_REFCHRG(base, value) (BME_BFI32(&TSI_GENCS_REG(base), ((uint32_t)(value) << TSI_GENCS_REFCHRG_SHIFT), TSI_GENCS_REFCHRG_SHIFT, TSI_GENCS_REFCHRG_WIDTH))
/*@}*/

/*!
 * @name Register TSI_GENCS, field MODE[27:24] (RW)
 *
 * Set up TSI analog modes, especially, setting MODE[3:2] to not 2'b00 will
 * configure TSI to noise detection modes. MODE[1:0] take no effect on TSI operation
 * mode and should always write to 2'b00 for setting up. When reading this field
 * will return the analog status. Refer to chapter "Noise detection mode" for
 * details.
 *
 * Values:
 * - 0b0000 - Set TSI in capacitive sensing(non-noise detection) mode.
 * - 0b0100 - Set TSI analog to work in single threshold noise detection mode
 *     and the frequency limitation circuit is disabled.
 * - 0b1000 - Set TSI analog to work in single threshold noise detection mode
 *     and the frequency limitation circuit is enabled to work in higher
 *     frequencies operations.
 * - 0b1100 - Set TSI analog to work in automatic noise detection mode.
 */
/*@{*/
/*! @brief Read current value of the TSI_GENCS_MODE field. */
#define TSI_RD_GENCS_MODE(base) ((TSI_GENCS_REG(base) & TSI_GENCS_MODE_MASK) >> TSI_GENCS_MODE_SHIFT)
#define TSI_BRD_GENCS_MODE(base) (BME_UBFX32(&TSI_GENCS_REG(base), TSI_GENCS_MODE_SHIFT, TSI_GENCS_MODE_WIDTH))

/*! @brief Set the MODE field to a new value. */
#define TSI_WR_GENCS_MODE(base, value) (TSI_RMW_GENCS(base, (TSI_GENCS_MODE_MASK | TSI_GENCS_EOSF_MASK | TSI_GENCS_OUTRGF_MASK), TSI_GENCS_MODE(value)))
#define TSI_BWR_GENCS_MODE(base, value) (BME_BFI32(&TSI_GENCS_REG(base), ((uint32_t)(value) << TSI_GENCS_MODE_SHIFT), TSI_GENCS_MODE_SHIFT, TSI_GENCS_MODE_WIDTH))
/*@}*/

/*!
 * @name Register TSI_GENCS, field ESOR[28] (RW)
 *
 * This bit is used to select out-of-range or end-of-scan event to generate an
 * interrupt.
 *
 * Values:
 * - 0b0 - Out-of-range interrupt is allowed.
 * - 0b1 - End-of-scan interrupt is allowed.
 */
/*@{*/
/*! @brief Read current value of the TSI_GENCS_ESOR field. */
#define TSI_RD_GENCS_ESOR(base) ((TSI_GENCS_REG(base) & TSI_GENCS_ESOR_MASK) >> TSI_GENCS_ESOR_SHIFT)
#define TSI_BRD_GENCS_ESOR(base) (BME_UBFX32(&TSI_GENCS_REG(base), TSI_GENCS_ESOR_SHIFT, TSI_GENCS_ESOR_WIDTH))

/*! @brief Set the ESOR field to a new value. */
#define TSI_WR_GENCS_ESOR(base, value) (TSI_RMW_GENCS(base, (TSI_GENCS_ESOR_MASK | TSI_GENCS_EOSF_MASK | TSI_GENCS_OUTRGF_MASK), TSI_GENCS_ESOR(value)))
#define TSI_BWR_GENCS_ESOR(base, value) (BME_BFI32(&TSI_GENCS_REG(base), ((uint32_t)(value) << TSI_GENCS_ESOR_SHIFT), TSI_GENCS_ESOR_SHIFT, TSI_GENCS_ESOR_WIDTH))
/*@}*/

/*!
 * @name Register TSI_GENCS, field OUTRGF[31] (W1C)
 *
 * This flag is set if the result register of the enabled electrode is out of
 * the range defined by the TSI_THRESHOLD register. This flag is set only when TSI
 * is configured in non-noise detection mode. It can be read once the CPU wakes.
 * Write "1" , when this flag is set, to clear it.
 */
/*@{*/
/*! @brief Read current value of the TSI_GENCS_OUTRGF field. */
#define TSI_RD_GENCS_OUTRGF(base) ((TSI_GENCS_REG(base) & TSI_GENCS_OUTRGF_MASK) >> TSI_GENCS_OUTRGF_SHIFT)
#define TSI_BRD_GENCS_OUTRGF(base) (BME_UBFX32(&TSI_GENCS_REG(base), TSI_GENCS_OUTRGF_SHIFT, TSI_GENCS_OUTRGF_WIDTH))

/*! @brief Set the OUTRGF field to a new value. */
#define TSI_WR_GENCS_OUTRGF(base, value) (TSI_RMW_GENCS(base, (TSI_GENCS_OUTRGF_MASK | TSI_GENCS_EOSF_MASK), TSI_GENCS_OUTRGF(value)))
#define TSI_BWR_GENCS_OUTRGF(base, value) (BME_BFI32(&TSI_GENCS_REG(base), ((uint32_t)(value) << TSI_GENCS_OUTRGF_SHIFT), TSI_GENCS_OUTRGF_SHIFT, TSI_GENCS_OUTRGF_WIDTH))
/*@}*/

/*******************************************************************************
 * TSI_DATA - TSI DATA Register
 ******************************************************************************/

/*!
 * @brief TSI_DATA - TSI DATA Register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire TSI_DATA register
 */
/*@{*/
#define TSI_RD_DATA(base)        (TSI_DATA_REG(base))
#define TSI_WR_DATA(base, value) (TSI_DATA_REG(base) = (value))
#define TSI_RMW_DATA(base, mask, value) (TSI_WR_DATA(base, (TSI_RD_DATA(base) & ~(mask)) | (value)))
#define TSI_SET_DATA(base, value) (BME_OR32(&TSI_DATA_REG(base), (uint32_t)(value)))
#define TSI_CLR_DATA(base, value) (BME_AND32(&TSI_DATA_REG(base), (uint32_t)(~(value))))
#define TSI_TOG_DATA(base, value) (BME_XOR32(&TSI_DATA_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TSI_DATA bitfields
 */

/*!
 * @name Register TSI_DATA, field TSICNT[15:0] (RO)
 *
 * These read-only bits record the accumulated scan counter value ticked by the
 * reference oscillator.
 */
/*@{*/
/*! @brief Read current value of the TSI_DATA_TSICNT field. */
#define TSI_RD_DATA_TSICNT(base) ((TSI_DATA_REG(base) & TSI_DATA_TSICNT_MASK) >> TSI_DATA_TSICNT_SHIFT)
#define TSI_BRD_DATA_TSICNT(base) (TSI_RD_DATA_TSICNT(base))
/*@}*/

/*!
 * @name Register TSI_DATA, field SWTS[22] (WORZ)
 *
 * This write-only bit is a software start trigger. When STM bit is clear, write
 * "1" to this bit will start a scan. The electrode channel to be scanned is
 * determinated by TSI_DATA[TSICH] bits.
 *
 * Values:
 * - 0b0 - No effect.
 * - 0b1 - Start a scan to determine which channel is specified by
 *     TSI_DATA[TSICH].
 */
/*@{*/
/*! @brief Set the SWTS field to a new value. */
#define TSI_WR_DATA_SWTS(base, value) (TSI_RMW_DATA(base, TSI_DATA_SWTS_MASK, TSI_DATA_SWTS(value)))
#define TSI_BWR_DATA_SWTS(base, value) (BME_BFI32(&TSI_DATA_REG(base), ((uint32_t)(value) << TSI_DATA_SWTS_SHIFT), TSI_DATA_SWTS_SHIFT, TSI_DATA_SWTS_WIDTH))
/*@}*/

/*!
 * @name Register TSI_DATA, field DMAEN[23] (RW)
 *
 * This bit is used together with the TSI interrupt enable bits(TSIIE, ESOR) to
 * generate a DMA transfer request instead of an interrupt.
 *
 * Values:
 * - 0b0 - Interrupt is selected when the interrupt enable bit is set and the
 *     corresponding TSI events assert.
 * - 0b1 - DMA transfer request is selected when the interrupt enable bit is set
 *     and the corresponding TSI events assert.
 */
/*@{*/
/*! @brief Read current value of the TSI_DATA_DMAEN field. */
#define TSI_RD_DATA_DMAEN(base) ((TSI_DATA_REG(base) & TSI_DATA_DMAEN_MASK) >> TSI_DATA_DMAEN_SHIFT)
#define TSI_BRD_DATA_DMAEN(base) (BME_UBFX32(&TSI_DATA_REG(base), TSI_DATA_DMAEN_SHIFT, TSI_DATA_DMAEN_WIDTH))

/*! @brief Set the DMAEN field to a new value. */
#define TSI_WR_DATA_DMAEN(base, value) (TSI_RMW_DATA(base, TSI_DATA_DMAEN_MASK, TSI_DATA_DMAEN(value)))
#define TSI_BWR_DATA_DMAEN(base, value) (BME_BFI32(&TSI_DATA_REG(base), ((uint32_t)(value) << TSI_DATA_DMAEN_SHIFT), TSI_DATA_DMAEN_SHIFT, TSI_DATA_DMAEN_WIDTH))
/*@}*/

/*!
 * @name Register TSI_DATA, field TSICH[31:28] (RW)
 *
 * These bits specify current channel to be measured. In hardware trigger mode
 * (TSI_GENCS[STM] = 1), the scan will not start until the hardware trigger
 * occurs. In software trigger mode (TSI_GENCS[STM] = 0), the scan starts immediately
 * when TSI_DATA[SWTS] bit is written by 1.
 *
 * Values:
 * - 0b0000 - Channel 0.
 * - 0b0001 - Channel 1.
 * - 0b0010 - Channel 2.
 * - 0b0011 - Channel 3.
 * - 0b0100 - Channel 4.
 * - 0b0101 - Channel 5.
 * - 0b0110 - Channel 6.
 * - 0b0111 - Channel 7.
 * - 0b1000 - Channel 8.
 * - 0b1001 - Channel 9.
 * - 0b1010 - Channel 10.
 * - 0b1011 - Channel 11.
 * - 0b1100 - Channel 12.
 * - 0b1101 - Channel 13.
 * - 0b1110 - Channel 14.
 * - 0b1111 - Channel 15.
 */
/*@{*/
/*! @brief Read current value of the TSI_DATA_TSICH field. */
#define TSI_RD_DATA_TSICH(base) ((TSI_DATA_REG(base) & TSI_DATA_TSICH_MASK) >> TSI_DATA_TSICH_SHIFT)
#define TSI_BRD_DATA_TSICH(base) (BME_UBFX32(&TSI_DATA_REG(base), TSI_DATA_TSICH_SHIFT, TSI_DATA_TSICH_WIDTH))

/*! @brief Set the TSICH field to a new value. */
#define TSI_WR_DATA_TSICH(base, value) (TSI_RMW_DATA(base, TSI_DATA_TSICH_MASK, TSI_DATA_TSICH(value)))
#define TSI_BWR_DATA_TSICH(base, value) (BME_BFI32(&TSI_DATA_REG(base), ((uint32_t)(value) << TSI_DATA_TSICH_SHIFT), TSI_DATA_TSICH_SHIFT, TSI_DATA_TSICH_WIDTH))
/*@}*/

/*******************************************************************************
 * TSI_TSHD - TSI Threshold Register
 ******************************************************************************/

/*!
 * @brief TSI_TSHD - TSI Threshold Register (RW)
 *
 * Reset value: 0x00000000U
 */
/*!
 * @name Constants and macros for entire TSI_TSHD register
 */
/*@{*/
#define TSI_RD_TSHD(base)        (TSI_TSHD_REG(base))
#define TSI_WR_TSHD(base, value) (TSI_TSHD_REG(base) = (value))
#define TSI_RMW_TSHD(base, mask, value) (TSI_WR_TSHD(base, (TSI_RD_TSHD(base) & ~(mask)) | (value)))
#define TSI_SET_TSHD(base, value) (BME_OR32(&TSI_TSHD_REG(base), (uint32_t)(value)))
#define TSI_CLR_TSHD(base, value) (BME_AND32(&TSI_TSHD_REG(base), (uint32_t)(~(value))))
#define TSI_TOG_TSHD(base, value) (BME_XOR32(&TSI_TSHD_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual TSI_TSHD bitfields
 */

/*!
 * @name Register TSI_TSHD, field THRESL[15:0] (RW)
 *
 * This half-word specifies the low threshold of the wakeup channel.
 */
/*@{*/
/*! @brief Read current value of the TSI_TSHD_THRESL field. */
#define TSI_RD_TSHD_THRESL(base) ((TSI_TSHD_REG(base) & TSI_TSHD_THRESL_MASK) >> TSI_TSHD_THRESL_SHIFT)
#define TSI_BRD_TSHD_THRESL(base) (TSI_RD_TSHD_THRESL(base))

/*! @brief Set the THRESL field to a new value. */
#define TSI_WR_TSHD_THRESL(base, value) (TSI_RMW_TSHD(base, TSI_TSHD_THRESL_MASK, TSI_TSHD_THRESL(value)))
#define TSI_BWR_TSHD_THRESL(base, value) (TSI_WR_TSHD_THRESL(base, value))
/*@}*/

/*!
 * @name Register TSI_TSHD, field THRESH[31:16] (RW)
 *
 * This half-word specifies the high threshold of the wakeup channel.
 */
/*@{*/
/*! @brief Read current value of the TSI_TSHD_THRESH field. */
#define TSI_RD_TSHD_THRESH(base) ((TSI_TSHD_REG(base) & TSI_TSHD_THRESH_MASK) >> TSI_TSHD_THRESH_SHIFT)
#define TSI_BRD_TSHD_THRESH(base) (TSI_RD_TSHD_THRESH(base))

/*! @brief Set the THRESH field to a new value. */
#define TSI_WR_TSHD_THRESH(base, value) (TSI_RMW_TSHD(base, TSI_TSHD_THRESH_MASK, TSI_TSHD_THRESH(value)))
#define TSI_BWR_TSHD_THRESH(base, value) (TSI_WR_TSHD_THRESH(base, value))
/*@}*/

/*
 * MK82F25615 USB
 *
 * Universal Serial Bus, OTG Capable Controller
 *
 * Registers defined in this header file:
 * - USB_PERID - Peripheral ID register
 * - USB_IDCOMP - Peripheral ID Complement register
 * - USB_REV - Peripheral Revision register
 * - USB_ADDINFO - Peripheral Additional Info register
 * - USB_OTGISTAT - OTG Interrupt Status register
 * - USB_OTGICR - OTG Interrupt Control register
 * - USB_OTGSTAT - OTG Status register
 * - USB_OTGCTL - OTG Control register
 * - USB_ISTAT - Interrupt Status register
 * - USB_INTEN - Interrupt Enable register
 * - USB_ERRSTAT - Error Interrupt Status register
 * - USB_ERREN - Error Interrupt Enable register
 * - USB_STAT - Status register
 * - USB_CTL - Control register
 * - USB_ADDR - Address register
 * - USB_BDTPAGE1 - BDT Page register 1
 * - USB_FRMNUML - Frame Number register Low
 * - USB_FRMNUMH - Frame Number register High
 * - USB_TOKEN - Token register
 * - USB_SOFTHLD - SOF Threshold register
 * - USB_BDTPAGE2 - BDT Page Register 2
 * - USB_BDTPAGE3 - BDT Page Register 3
 * - USB_ENDPT - Endpoint Control register
 * - USB_USBCTRL - USB Control register
 * - USB_OBSERVE - USB OTG Observe register
 * - USB_CONTROL - USB OTG Control register
 * - USB_USBTRC0 - USB Transceiver Control register 0
 * - USB_USBFRMADJUST - Frame Adjust Register
 * - USB_MISCCTRL - Miscellaneous Control register
 * - USB_CLK_RECOVER_CTRL - USB Clock recovery control
 * - USB_CLK_RECOVER_IRC_EN - IRC48M oscillator enable register
 * - USB_CLK_RECOVER_INT_EN - Clock recovery combined interrupt enable
 * - USB_CLK_RECOVER_INT_STATUS - Clock recovery separated interrupt status
 */

#define USB_INSTANCE_COUNT (1U) /*!< Number of instances of the USB module. */
#define USB0_IDX (0U) /*!< Instance number for USB0. */

/*******************************************************************************
 * USB_PERID - Peripheral ID register
 ******************************************************************************/

/*!
 * @brief USB_PERID - Peripheral ID register (RO)
 *
 * Reset value: 0x04U
 *
 * Reads back the value of 0x04. This value is defined for the USB peripheral.
 */
/*!
 * @name Constants and macros for entire USB_PERID register
 */
/*@{*/
#define USB_RD_PERID(base)       (USB_PERID_REG(base))
/*@}*/

/*
 * Constants & macros for individual USB_PERID bitfields
 */

/*!
 * @name Register USB_PERID, field ID[5:0] (RO)
 *
 * This field always reads 0x4h.
 */
/*@{*/
/*! @brief Read current value of the USB_PERID_ID field. */
#define USB_RD_PERID_ID(base) ((USB_PERID_REG(base) & USB_PERID_ID_MASK) >> USB_PERID_ID_SHIFT)
#define USB_BRD_PERID_ID(base) (BME_UBFX8(&USB_PERID_REG(base), USB_PERID_ID_SHIFT, USB_PERID_ID_WIDTH))
/*@}*/

/*******************************************************************************
 * USB_IDCOMP - Peripheral ID Complement register
 ******************************************************************************/

/*!
 * @brief USB_IDCOMP - Peripheral ID Complement register (RO)
 *
 * Reset value: 0xFBU
 *
 * Reads back the complement of the Peripheral ID register. For the USB
 * peripheral, the value is 0xFB.
 */
/*!
 * @name Constants and macros for entire USB_IDCOMP register
 */
/*@{*/
#define USB_RD_IDCOMP(base)      (USB_IDCOMP_REG(base))
/*@}*/

/*
 * Constants & macros for individual USB_IDCOMP bitfields
 */

/*!
 * @name Register USB_IDCOMP, field NID[5:0] (RO)
 *
 * Ones' complement of PERID[ID] bits.
 */
/*@{*/
/*! @brief Read current value of the USB_IDCOMP_NID field. */
#define USB_RD_IDCOMP_NID(base) ((USB_IDCOMP_REG(base) & USB_IDCOMP_NID_MASK) >> USB_IDCOMP_NID_SHIFT)
#define USB_BRD_IDCOMP_NID(base) (BME_UBFX8(&USB_IDCOMP_REG(base), USB_IDCOMP_NID_SHIFT, USB_IDCOMP_NID_WIDTH))
/*@}*/

/*******************************************************************************
 * USB_REV - Peripheral Revision register
 ******************************************************************************/

/*!
 * @brief USB_REV - Peripheral Revision register (RO)
 *
 * Reset value: 0x33U
 *
 * Contains the revision number of the USB module.
 */
/*!
 * @name Constants and macros for entire USB_REV register
 */
/*@{*/
#define USB_RD_REV(base)         (USB_REV_REG(base))
/*@}*/

/*******************************************************************************
 * USB_ADDINFO - Peripheral Additional Info register
 ******************************************************************************/

/*!
 * @brief USB_ADDINFO - Peripheral Additional Info register (RO)
 *
 * Reset value: 0x01U
 *
 * Reads back the value of the Host Enable bit.
 */
/*!
 * @name Constants and macros for entire USB_ADDINFO register
 */
/*@{*/
#define USB_RD_ADDINFO(base)     (USB_ADDINFO_REG(base))
/*@}*/

/*
 * Constants & macros for individual USB_ADDINFO bitfields
 */

/*!
 * @name Register USB_ADDINFO, field IEHOST[0] (RO)
 *
 * This bit is set if host mode is enabled.
 */
/*@{*/
/*! @brief Read current value of the USB_ADDINFO_IEHOST field. */
#define USB_RD_ADDINFO_IEHOST(base) ((USB_ADDINFO_REG(base) & USB_ADDINFO_IEHOST_MASK) >> USB_ADDINFO_IEHOST_SHIFT)
#define USB_BRD_ADDINFO_IEHOST(base) (BME_UBFX8(&USB_ADDINFO_REG(base), USB_ADDINFO_IEHOST_SHIFT, USB_ADDINFO_IEHOST_WIDTH))
/*@}*/

/*******************************************************************************
 * USB_OTGISTAT - OTG Interrupt Status register
 ******************************************************************************/

/*!
 * @brief USB_OTGISTAT - OTG Interrupt Status register (RW)
 *
 * Reset value: 0x00U
 *
 * Records changes of the ID sense and VBUS signals. Software can read this
 * register to determine the event that triggers an interrupt. Only bits that have
 * changed since the last software read are set. Writing a one to a bit clears the
 * associated interrupt.
 */
/*!
 * @name Constants and macros for entire USB_OTGISTAT register
 */
/*@{*/
#define USB_RD_OTGISTAT(base)    (USB_OTGISTAT_REG(base))
#define USB_WR_OTGISTAT(base, value) (USB_OTGISTAT_REG(base) = (value))
#define USB_RMW_OTGISTAT(base, mask, value) (USB_WR_OTGISTAT(base, (USB_RD_OTGISTAT(base) & ~(mask)) | (value)))
#define USB_SET_OTGISTAT(base, value) (BME_OR8(&USB_OTGISTAT_REG(base), (uint8_t)(value)))
#define USB_CLR_OTGISTAT(base, value) (BME_AND8(&USB_OTGISTAT_REG(base), (uint8_t)(~(value))))
#define USB_TOG_OTGISTAT(base, value) (BME_XOR8(&USB_OTGISTAT_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USB_OTGISTAT bitfields
 */

/*!
 * @name Register USB_OTGISTAT, field AVBUSCHG[0] (RW)
 *
 * This bit is set when a change in VBUS is detected on an A device.
 */
/*@{*/
/*! @brief Read current value of the USB_OTGISTAT_AVBUSCHG field. */
#define USB_RD_OTGISTAT_AVBUSCHG(base) ((USB_OTGISTAT_REG(base) & USB_OTGISTAT_AVBUSCHG_MASK) >> USB_OTGISTAT_AVBUSCHG_SHIFT)
#define USB_BRD_OTGISTAT_AVBUSCHG(base) (BME_UBFX8(&USB_OTGISTAT_REG(base), USB_OTGISTAT_AVBUSCHG_SHIFT, USB_OTGISTAT_AVBUSCHG_WIDTH))

/*! @brief Set the AVBUSCHG field to a new value. */
#define USB_WR_OTGISTAT_AVBUSCHG(base, value) (USB_RMW_OTGISTAT(base, USB_OTGISTAT_AVBUSCHG_MASK, USB_OTGISTAT_AVBUSCHG(value)))
#define USB_BWR_OTGISTAT_AVBUSCHG(base, value) (BME_BFI8(&USB_OTGISTAT_REG(base), ((uint8_t)(value) << USB_OTGISTAT_AVBUSCHG_SHIFT), USB_OTGISTAT_AVBUSCHG_SHIFT, USB_OTGISTAT_AVBUSCHG_WIDTH))
/*@}*/

/*!
 * @name Register USB_OTGISTAT, field B_SESS_CHG[2] (RW)
 *
 * This bit is set when a change in VBUS is detected on a B device.
 */
/*@{*/
/*! @brief Read current value of the USB_OTGISTAT_B_SESS_CHG field. */
#define USB_RD_OTGISTAT_B_SESS_CHG(base) ((USB_OTGISTAT_REG(base) & USB_OTGISTAT_B_SESS_CHG_MASK) >> USB_OTGISTAT_B_SESS_CHG_SHIFT)
#define USB_BRD_OTGISTAT_B_SESS_CHG(base) (BME_UBFX8(&USB_OTGISTAT_REG(base), USB_OTGISTAT_B_SESS_CHG_SHIFT, USB_OTGISTAT_B_SESS_CHG_WIDTH))

/*! @brief Set the B_SESS_CHG field to a new value. */
#define USB_WR_OTGISTAT_B_SESS_CHG(base, value) (USB_RMW_OTGISTAT(base, USB_OTGISTAT_B_SESS_CHG_MASK, USB_OTGISTAT_B_SESS_CHG(value)))
#define USB_BWR_OTGISTAT_B_SESS_CHG(base, value) (BME_BFI8(&USB_OTGISTAT_REG(base), ((uint8_t)(value) << USB_OTGISTAT_B_SESS_CHG_SHIFT), USB_OTGISTAT_B_SESS_CHG_SHIFT, USB_OTGISTAT_B_SESS_CHG_WIDTH))
/*@}*/

/*!
 * @name Register USB_OTGISTAT, field SESSVLDCHG[3] (RW)
 *
 * This bit is set when a change in VBUS is detected indicating a session valid
 * or a session no longer valid.
 */
/*@{*/
/*! @brief Read current value of the USB_OTGISTAT_SESSVLDCHG field. */
#define USB_RD_OTGISTAT_SESSVLDCHG(base) ((USB_OTGISTAT_REG(base) & USB_OTGISTAT_SESSVLDCHG_MASK) >> USB_OTGISTAT_SESSVLDCHG_SHIFT)
#define USB_BRD_OTGISTAT_SESSVLDCHG(base) (BME_UBFX8(&USB_OTGISTAT_REG(base), USB_OTGISTAT_SESSVLDCHG_SHIFT, USB_OTGISTAT_SESSVLDCHG_WIDTH))

/*! @brief Set the SESSVLDCHG field to a new value. */
#define USB_WR_OTGISTAT_SESSVLDCHG(base, value) (USB_RMW_OTGISTAT(base, USB_OTGISTAT_SESSVLDCHG_MASK, USB_OTGISTAT_SESSVLDCHG(value)))
#define USB_BWR_OTGISTAT_SESSVLDCHG(base, value) (BME_BFI8(&USB_OTGISTAT_REG(base), ((uint8_t)(value) << USB_OTGISTAT_SESSVLDCHG_SHIFT), USB_OTGISTAT_SESSVLDCHG_SHIFT, USB_OTGISTAT_SESSVLDCHG_WIDTH))
/*@}*/

/*!
 * @name Register USB_OTGISTAT, field LINE_STATE_CHG[5] (RW)
 *
 * This interrupt is set when the USB line state (CTL[SE0] and CTL[JSTATE] bits)
 * are stable without change for 1 millisecond, and the value of the line state
 * is different from the last time when the line state was stable. It is set on
 * transitions between SE0 and J-state, SE0 and K-state, and J-state and K-state.
 * Changes in J-state while SE0 is true do not cause an interrupt. This interrupt
 * can be used in detecting Reset, Resume, Connect, and Data Line Pulse
 * signaling.
 */
/*@{*/
/*! @brief Read current value of the USB_OTGISTAT_LINE_STATE_CHG field. */
#define USB_RD_OTGISTAT_LINE_STATE_CHG(base) ((USB_OTGISTAT_REG(base) & USB_OTGISTAT_LINE_STATE_CHG_MASK) >> USB_OTGISTAT_LINE_STATE_CHG_SHIFT)
#define USB_BRD_OTGISTAT_LINE_STATE_CHG(base) (BME_UBFX8(&USB_OTGISTAT_REG(base), USB_OTGISTAT_LINE_STATE_CHG_SHIFT, USB_OTGISTAT_LINE_STATE_CHG_WIDTH))

/*! @brief Set the LINE_STATE_CHG field to a new value. */
#define USB_WR_OTGISTAT_LINE_STATE_CHG(base, value) (USB_RMW_OTGISTAT(base, USB_OTGISTAT_LINE_STATE_CHG_MASK, USB_OTGISTAT_LINE_STATE_CHG(value)))
#define USB_BWR_OTGISTAT_LINE_STATE_CHG(base, value) (BME_BFI8(&USB_OTGISTAT_REG(base), ((uint8_t)(value) << USB_OTGISTAT_LINE_STATE_CHG_SHIFT), USB_OTGISTAT_LINE_STATE_CHG_SHIFT, USB_OTGISTAT_LINE_STATE_CHG_WIDTH))
/*@}*/

/*!
 * @name Register USB_OTGISTAT, field ONEMSEC[6] (RW)
 *
 * This bit is set when the 1 millisecond timer expires. This bit stays asserted
 * until cleared by software. The interrupt must be serviced every millisecond
 * to avoid losing 1msec counts.
 */
/*@{*/
/*! @brief Read current value of the USB_OTGISTAT_ONEMSEC field. */
#define USB_RD_OTGISTAT_ONEMSEC(base) ((USB_OTGISTAT_REG(base) & USB_OTGISTAT_ONEMSEC_MASK) >> USB_OTGISTAT_ONEMSEC_SHIFT)
#define USB_BRD_OTGISTAT_ONEMSEC(base) (BME_UBFX8(&USB_OTGISTAT_REG(base), USB_OTGISTAT_ONEMSEC_SHIFT, USB_OTGISTAT_ONEMSEC_WIDTH))

/*! @brief Set the ONEMSEC field to a new value. */
#define USB_WR_OTGISTAT_ONEMSEC(base, value) (USB_RMW_OTGISTAT(base, USB_OTGISTAT_ONEMSEC_MASK, USB_OTGISTAT_ONEMSEC(value)))
#define USB_BWR_OTGISTAT_ONEMSEC(base, value) (BME_BFI8(&USB_OTGISTAT_REG(base), ((uint8_t)(value) << USB_OTGISTAT_ONEMSEC_SHIFT), USB_OTGISTAT_ONEMSEC_SHIFT, USB_OTGISTAT_ONEMSEC_WIDTH))
/*@}*/

/*!
 * @name Register USB_OTGISTAT, field IDCHG[7] (RW)
 *
 * This bit is set when a change in the ID Signal from the USB connector is
 * sensed.
 */
/*@{*/
/*! @brief Read current value of the USB_OTGISTAT_IDCHG field. */
#define USB_RD_OTGISTAT_IDCHG(base) ((USB_OTGISTAT_REG(base) & USB_OTGISTAT_IDCHG_MASK) >> USB_OTGISTAT_IDCHG_SHIFT)
#define USB_BRD_OTGISTAT_IDCHG(base) (BME_UBFX8(&USB_OTGISTAT_REG(base), USB_OTGISTAT_IDCHG_SHIFT, USB_OTGISTAT_IDCHG_WIDTH))

/*! @brief Set the IDCHG field to a new value. */
#define USB_WR_OTGISTAT_IDCHG(base, value) (USB_RMW_OTGISTAT(base, USB_OTGISTAT_IDCHG_MASK, USB_OTGISTAT_IDCHG(value)))
#define USB_BWR_OTGISTAT_IDCHG(base, value) (BME_BFI8(&USB_OTGISTAT_REG(base), ((uint8_t)(value) << USB_OTGISTAT_IDCHG_SHIFT), USB_OTGISTAT_IDCHG_SHIFT, USB_OTGISTAT_IDCHG_WIDTH))
/*@}*/

/*******************************************************************************
 * USB_OTGICR - OTG Interrupt Control register
 ******************************************************************************/

/*!
 * @brief USB_OTGICR - OTG Interrupt Control register (RW)
 *
 * Reset value: 0x00U
 *
 * Enables the corresponding interrupt status bits defined in the OTG Interrupt
 * Status Register.
 */
/*!
 * @name Constants and macros for entire USB_OTGICR register
 */
/*@{*/
#define USB_RD_OTGICR(base)      (USB_OTGICR_REG(base))
#define USB_WR_OTGICR(base, value) (USB_OTGICR_REG(base) = (value))
#define USB_RMW_OTGICR(base, mask, value) (USB_WR_OTGICR(base, (USB_RD_OTGICR(base) & ~(mask)) | (value)))
#define USB_SET_OTGICR(base, value) (BME_OR8(&USB_OTGICR_REG(base), (uint8_t)(value)))
#define USB_CLR_OTGICR(base, value) (BME_AND8(&USB_OTGICR_REG(base), (uint8_t)(~(value))))
#define USB_TOG_OTGICR(base, value) (BME_XOR8(&USB_OTGICR_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USB_OTGICR bitfields
 */

/*!
 * @name Register USB_OTGICR, field AVBUSEN[0] (RW)
 *
 * Values:
 * - 0b0 - Disables the AVBUSCHG interrupt.
 * - 0b1 - Enables the AVBUSCHG interrupt.
 */
/*@{*/
/*! @brief Read current value of the USB_OTGICR_AVBUSEN field. */
#define USB_RD_OTGICR_AVBUSEN(base) ((USB_OTGICR_REG(base) & USB_OTGICR_AVBUSEN_MASK) >> USB_OTGICR_AVBUSEN_SHIFT)
#define USB_BRD_OTGICR_AVBUSEN(base) (BME_UBFX8(&USB_OTGICR_REG(base), USB_OTGICR_AVBUSEN_SHIFT, USB_OTGICR_AVBUSEN_WIDTH))

/*! @brief Set the AVBUSEN field to a new value. */
#define USB_WR_OTGICR_AVBUSEN(base, value) (USB_RMW_OTGICR(base, USB_OTGICR_AVBUSEN_MASK, USB_OTGICR_AVBUSEN(value)))
#define USB_BWR_OTGICR_AVBUSEN(base, value) (BME_BFI8(&USB_OTGICR_REG(base), ((uint8_t)(value) << USB_OTGICR_AVBUSEN_SHIFT), USB_OTGICR_AVBUSEN_SHIFT, USB_OTGICR_AVBUSEN_WIDTH))
/*@}*/

/*!
 * @name Register USB_OTGICR, field BSESSEN[2] (RW)
 *
 * Values:
 * - 0b0 - Disables the B_SESS_CHG interrupt.
 * - 0b1 - Enables the B_SESS_CHG interrupt.
 */
/*@{*/
/*! @brief Read current value of the USB_OTGICR_BSESSEN field. */
#define USB_RD_OTGICR_BSESSEN(base) ((USB_OTGICR_REG(base) & USB_OTGICR_BSESSEN_MASK) >> USB_OTGICR_BSESSEN_SHIFT)
#define USB_BRD_OTGICR_BSESSEN(base) (BME_UBFX8(&USB_OTGICR_REG(base), USB_OTGICR_BSESSEN_SHIFT, USB_OTGICR_BSESSEN_WIDTH))

/*! @brief Set the BSESSEN field to a new value. */
#define USB_WR_OTGICR_BSESSEN(base, value) (USB_RMW_OTGICR(base, USB_OTGICR_BSESSEN_MASK, USB_OTGICR_BSESSEN(value)))
#define USB_BWR_OTGICR_BSESSEN(base, value) (BME_BFI8(&USB_OTGICR_REG(base), ((uint8_t)(value) << USB_OTGICR_BSESSEN_SHIFT), USB_OTGICR_BSESSEN_SHIFT, USB_OTGICR_BSESSEN_WIDTH))
/*@}*/

/*!
 * @name Register USB_OTGICR, field SESSVLDEN[3] (RW)
 *
 * Values:
 * - 0b0 - Disables the SESSVLDCHG interrupt.
 * - 0b1 - Enables the SESSVLDCHG interrupt.
 */
/*@{*/
/*! @brief Read current value of the USB_OTGICR_SESSVLDEN field. */
#define USB_RD_OTGICR_SESSVLDEN(base) ((USB_OTGICR_REG(base) & USB_OTGICR_SESSVLDEN_MASK) >> USB_OTGICR_SESSVLDEN_SHIFT)
#define USB_BRD_OTGICR_SESSVLDEN(base) (BME_UBFX8(&USB_OTGICR_REG(base), USB_OTGICR_SESSVLDEN_SHIFT, USB_OTGICR_SESSVLDEN_WIDTH))

/*! @brief Set the SESSVLDEN field to a new value. */
#define USB_WR_OTGICR_SESSVLDEN(base, value) (USB_RMW_OTGICR(base, USB_OTGICR_SESSVLDEN_MASK, USB_OTGICR_SESSVLDEN(value)))
#define USB_BWR_OTGICR_SESSVLDEN(base, value) (BME_BFI8(&USB_OTGICR_REG(base), ((uint8_t)(value) << USB_OTGICR_SESSVLDEN_SHIFT), USB_OTGICR_SESSVLDEN_SHIFT, USB_OTGICR_SESSVLDEN_WIDTH))
/*@}*/

/*!
 * @name Register USB_OTGICR, field LINESTATEEN[5] (RW)
 *
 * Values:
 * - 0b0 - Disables the LINE_STAT_CHG interrupt.
 * - 0b1 - Enables the LINE_STAT_CHG interrupt.
 */
/*@{*/
/*! @brief Read current value of the USB_OTGICR_LINESTATEEN field. */
#define USB_RD_OTGICR_LINESTATEEN(base) ((USB_OTGICR_REG(base) & USB_OTGICR_LINESTATEEN_MASK) >> USB_OTGICR_LINESTATEEN_SHIFT)
#define USB_BRD_OTGICR_LINESTATEEN(base) (BME_UBFX8(&USB_OTGICR_REG(base), USB_OTGICR_LINESTATEEN_SHIFT, USB_OTGICR_LINESTATEEN_WIDTH))

/*! @brief Set the LINESTATEEN field to a new value. */
#define USB_WR_OTGICR_LINESTATEEN(base, value) (USB_RMW_OTGICR(base, USB_OTGICR_LINESTATEEN_MASK, USB_OTGICR_LINESTATEEN(value)))
#define USB_BWR_OTGICR_LINESTATEEN(base, value) (BME_BFI8(&USB_OTGICR_REG(base), ((uint8_t)(value) << USB_OTGICR_LINESTATEEN_SHIFT), USB_OTGICR_LINESTATEEN_SHIFT, USB_OTGICR_LINESTATEEN_WIDTH))
/*@}*/

/*!
 * @name Register USB_OTGICR, field ONEMSECEN[6] (RW)
 *
 * Values:
 * - 0b0 - Diables the 1ms timer interrupt.
 * - 0b1 - Enables the 1ms timer interrupt.
 */
/*@{*/
/*! @brief Read current value of the USB_OTGICR_ONEMSECEN field. */
#define USB_RD_OTGICR_ONEMSECEN(base) ((USB_OTGICR_REG(base) & USB_OTGICR_ONEMSECEN_MASK) >> USB_OTGICR_ONEMSECEN_SHIFT)
#define USB_BRD_OTGICR_ONEMSECEN(base) (BME_UBFX8(&USB_OTGICR_REG(base), USB_OTGICR_ONEMSECEN_SHIFT, USB_OTGICR_ONEMSECEN_WIDTH))

/*! @brief Set the ONEMSECEN field to a new value. */
#define USB_WR_OTGICR_ONEMSECEN(base, value) (USB_RMW_OTGICR(base, USB_OTGICR_ONEMSECEN_MASK, USB_OTGICR_ONEMSECEN(value)))
#define USB_BWR_OTGICR_ONEMSECEN(base, value) (BME_BFI8(&USB_OTGICR_REG(base), ((uint8_t)(value) << USB_OTGICR_ONEMSECEN_SHIFT), USB_OTGICR_ONEMSECEN_SHIFT, USB_OTGICR_ONEMSECEN_WIDTH))
/*@}*/

/*!
 * @name Register USB_OTGICR, field IDEN[7] (RW)
 *
 * Values:
 * - 0b0 - The ID interrupt is disabled
 * - 0b1 - The ID interrupt is enabled
 */
/*@{*/
/*! @brief Read current value of the USB_OTGICR_IDEN field. */
#define USB_RD_OTGICR_IDEN(base) ((USB_OTGICR_REG(base) & USB_OTGICR_IDEN_MASK) >> USB_OTGICR_IDEN_SHIFT)
#define USB_BRD_OTGICR_IDEN(base) (BME_UBFX8(&USB_OTGICR_REG(base), USB_OTGICR_IDEN_SHIFT, USB_OTGICR_IDEN_WIDTH))

/*! @brief Set the IDEN field to a new value. */
#define USB_WR_OTGICR_IDEN(base, value) (USB_RMW_OTGICR(base, USB_OTGICR_IDEN_MASK, USB_OTGICR_IDEN(value)))
#define USB_BWR_OTGICR_IDEN(base, value) (BME_BFI8(&USB_OTGICR_REG(base), ((uint8_t)(value) << USB_OTGICR_IDEN_SHIFT), USB_OTGICR_IDEN_SHIFT, USB_OTGICR_IDEN_WIDTH))
/*@}*/

/*******************************************************************************
 * USB_OTGSTAT - OTG Status register
 ******************************************************************************/

/*!
 * @brief USB_OTGSTAT - OTG Status register (RW)
 *
 * Reset value: 0x00U
 *
 * Displays the actual value from the external comparator outputs of the ID pin
 * and VBUS.
 */
/*!
 * @name Constants and macros for entire USB_OTGSTAT register
 */
/*@{*/
#define USB_RD_OTGSTAT(base)     (USB_OTGSTAT_REG(base))
#define USB_WR_OTGSTAT(base, value) (USB_OTGSTAT_REG(base) = (value))
#define USB_RMW_OTGSTAT(base, mask, value) (USB_WR_OTGSTAT(base, (USB_RD_OTGSTAT(base) & ~(mask)) | (value)))
#define USB_SET_OTGSTAT(base, value) (BME_OR8(&USB_OTGSTAT_REG(base), (uint8_t)(value)))
#define USB_CLR_OTGSTAT(base, value) (BME_AND8(&USB_OTGSTAT_REG(base), (uint8_t)(~(value))))
#define USB_TOG_OTGSTAT(base, value) (BME_XOR8(&USB_OTGSTAT_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USB_OTGSTAT bitfields
 */

/*!
 * @name Register USB_OTGSTAT, field AVBUSVLD[0] (RW)
 *
 * Values:
 * - 0b0 - The VBUS voltage is below the A VBUS Valid threshold.
 * - 0b1 - The VBUS voltage is above the A VBUS Valid threshold.
 */
/*@{*/
/*! @brief Read current value of the USB_OTGSTAT_AVBUSVLD field. */
#define USB_RD_OTGSTAT_AVBUSVLD(base) ((USB_OTGSTAT_REG(base) & USB_OTGSTAT_AVBUSVLD_MASK) >> USB_OTGSTAT_AVBUSVLD_SHIFT)
#define USB_BRD_OTGSTAT_AVBUSVLD(base) (BME_UBFX8(&USB_OTGSTAT_REG(base), USB_OTGSTAT_AVBUSVLD_SHIFT, USB_OTGSTAT_AVBUSVLD_WIDTH))

/*! @brief Set the AVBUSVLD field to a new value. */
#define USB_WR_OTGSTAT_AVBUSVLD(base, value) (USB_RMW_OTGSTAT(base, USB_OTGSTAT_AVBUSVLD_MASK, USB_OTGSTAT_AVBUSVLD(value)))
#define USB_BWR_OTGSTAT_AVBUSVLD(base, value) (BME_BFI8(&USB_OTGSTAT_REG(base), ((uint8_t)(value) << USB_OTGSTAT_AVBUSVLD_SHIFT), USB_OTGSTAT_AVBUSVLD_SHIFT, USB_OTGSTAT_AVBUSVLD_WIDTH))
/*@}*/

/*!
 * @name Register USB_OTGSTAT, field BSESSEND[2] (RW)
 *
 * Values:
 * - 0b0 - The VBUS voltage is above the B session end threshold.
 * - 0b1 - The VBUS voltage is below the B session end threshold.
 */
/*@{*/
/*! @brief Read current value of the USB_OTGSTAT_BSESSEND field. */
#define USB_RD_OTGSTAT_BSESSEND(base) ((USB_OTGSTAT_REG(base) & USB_OTGSTAT_BSESSEND_MASK) >> USB_OTGSTAT_BSESSEND_SHIFT)
#define USB_BRD_OTGSTAT_BSESSEND(base) (BME_UBFX8(&USB_OTGSTAT_REG(base), USB_OTGSTAT_BSESSEND_SHIFT, USB_OTGSTAT_BSESSEND_WIDTH))

/*! @brief Set the BSESSEND field to a new value. */
#define USB_WR_OTGSTAT_BSESSEND(base, value) (USB_RMW_OTGSTAT(base, USB_OTGSTAT_BSESSEND_MASK, USB_OTGSTAT_BSESSEND(value)))
#define USB_BWR_OTGSTAT_BSESSEND(base, value) (BME_BFI8(&USB_OTGSTAT_REG(base), ((uint8_t)(value) << USB_OTGSTAT_BSESSEND_SHIFT), USB_OTGSTAT_BSESSEND_SHIFT, USB_OTGSTAT_BSESSEND_WIDTH))
/*@}*/

/*!
 * @name Register USB_OTGSTAT, field SESS_VLD[3] (RW)
 *
 * Values:
 * - 0b0 - The VBUS voltage is below the B session valid threshold
 * - 0b1 - The VBUS voltage is above the B session valid threshold.
 */
/*@{*/
/*! @brief Read current value of the USB_OTGSTAT_SESS_VLD field. */
#define USB_RD_OTGSTAT_SESS_VLD(base) ((USB_OTGSTAT_REG(base) & USB_OTGSTAT_SESS_VLD_MASK) >> USB_OTGSTAT_SESS_VLD_SHIFT)
#define USB_BRD_OTGSTAT_SESS_VLD(base) (BME_UBFX8(&USB_OTGSTAT_REG(base), USB_OTGSTAT_SESS_VLD_SHIFT, USB_OTGSTAT_SESS_VLD_WIDTH))

/*! @brief Set the SESS_VLD field to a new value. */
#define USB_WR_OTGSTAT_SESS_VLD(base, value) (USB_RMW_OTGSTAT(base, USB_OTGSTAT_SESS_VLD_MASK, USB_OTGSTAT_SESS_VLD(value)))
#define USB_BWR_OTGSTAT_SESS_VLD(base, value) (BME_BFI8(&USB_OTGSTAT_REG(base), ((uint8_t)(value) << USB_OTGSTAT_SESS_VLD_SHIFT), USB_OTGSTAT_SESS_VLD_SHIFT, USB_OTGSTAT_SESS_VLD_WIDTH))
/*@}*/

/*!
 * @name Register USB_OTGSTAT, field LINESTATESTABLE[5] (RW)
 *
 * Indicates that the internal signals that control the LINE_STATE_CHG field of
 * OTGISTAT are stable for at least 1 ms. This bit is used to provide a hardware
 * debounce of the linestate in detection of Connect, Disconnect and Resume
 * signaling. First read LINE_STATE_CHG field and then read this field. If this field
 * reads as 1, then the value of LINE_STATE_CHG can be considered stable.
 *
 * Values:
 * - 0b0 - The LINE_STAT_CHG bit is not yet stable.
 * - 0b1 - The LINE_STAT_CHG bit has been debounced and is stable.
 */
/*@{*/
/*! @brief Read current value of the USB_OTGSTAT_LINESTATESTABLE field. */
#define USB_RD_OTGSTAT_LINESTATESTABLE(base) ((USB_OTGSTAT_REG(base) & USB_OTGSTAT_LINESTATESTABLE_MASK) >> USB_OTGSTAT_LINESTATESTABLE_SHIFT)
#define USB_BRD_OTGSTAT_LINESTATESTABLE(base) (BME_UBFX8(&USB_OTGSTAT_REG(base), USB_OTGSTAT_LINESTATESTABLE_SHIFT, USB_OTGSTAT_LINESTATESTABLE_WIDTH))

/*! @brief Set the LINESTATESTABLE field to a new value. */
#define USB_WR_OTGSTAT_LINESTATESTABLE(base, value) (USB_RMW_OTGSTAT(base, USB_OTGSTAT_LINESTATESTABLE_MASK, USB_OTGSTAT_LINESTATESTABLE(value)))
#define USB_BWR_OTGSTAT_LINESTATESTABLE(base, value) (BME_BFI8(&USB_OTGSTAT_REG(base), ((uint8_t)(value) << USB_OTGSTAT_LINESTATESTABLE_SHIFT), USB_OTGSTAT_LINESTATESTABLE_SHIFT, USB_OTGSTAT_LINESTATESTABLE_WIDTH))
/*@}*/

/*!
 * @name Register USB_OTGSTAT, field ONEMSECEN[6] (RW)
 *
 * This bit is reserved for the 1ms count, but it is not useful to software.
 */
/*@{*/
/*! @brief Read current value of the USB_OTGSTAT_ONEMSECEN field. */
#define USB_RD_OTGSTAT_ONEMSECEN(base) ((USB_OTGSTAT_REG(base) & USB_OTGSTAT_ONEMSECEN_MASK) >> USB_OTGSTAT_ONEMSECEN_SHIFT)
#define USB_BRD_OTGSTAT_ONEMSECEN(base) (BME_UBFX8(&USB_OTGSTAT_REG(base), USB_OTGSTAT_ONEMSECEN_SHIFT, USB_OTGSTAT_ONEMSECEN_WIDTH))

/*! @brief Set the ONEMSECEN field to a new value. */
#define USB_WR_OTGSTAT_ONEMSECEN(base, value) (USB_RMW_OTGSTAT(base, USB_OTGSTAT_ONEMSECEN_MASK, USB_OTGSTAT_ONEMSECEN(value)))
#define USB_BWR_OTGSTAT_ONEMSECEN(base, value) (BME_BFI8(&USB_OTGSTAT_REG(base), ((uint8_t)(value) << USB_OTGSTAT_ONEMSECEN_SHIFT), USB_OTGSTAT_ONEMSECEN_SHIFT, USB_OTGSTAT_ONEMSECEN_WIDTH))
/*@}*/

/*!
 * @name Register USB_OTGSTAT, field ID[7] (RW)
 *
 * Indicates the current state of the ID pin on the USB connector
 *
 * Values:
 * - 0b0 - Indicates a Type A cable is plugged into the USB connector.
 * - 0b1 - Indicates no cable is attached or a Type B cable is plugged into the
 *     USB connector.
 */
/*@{*/
/*! @brief Read current value of the USB_OTGSTAT_ID field. */
#define USB_RD_OTGSTAT_ID(base) ((USB_OTGSTAT_REG(base) & USB_OTGSTAT_ID_MASK) >> USB_OTGSTAT_ID_SHIFT)
#define USB_BRD_OTGSTAT_ID(base) (BME_UBFX8(&USB_OTGSTAT_REG(base), USB_OTGSTAT_ID_SHIFT, USB_OTGSTAT_ID_WIDTH))

/*! @brief Set the ID field to a new value. */
#define USB_WR_OTGSTAT_ID(base, value) (USB_RMW_OTGSTAT(base, USB_OTGSTAT_ID_MASK, USB_OTGSTAT_ID(value)))
#define USB_BWR_OTGSTAT_ID(base, value) (BME_BFI8(&USB_OTGSTAT_REG(base), ((uint8_t)(value) << USB_OTGSTAT_ID_SHIFT), USB_OTGSTAT_ID_SHIFT, USB_OTGSTAT_ID_WIDTH))
/*@}*/

/*******************************************************************************
 * USB_OTGCTL - OTG Control register
 ******************************************************************************/

/*!
 * @brief USB_OTGCTL - OTG Control register (RW)
 *
 * Reset value: 0x00U
 *
 * Controls the operation of VBUS and Data Line termination resistors.
 */
/*!
 * @name Constants and macros for entire USB_OTGCTL register
 */
/*@{*/
#define USB_RD_OTGCTL(base)      (USB_OTGCTL_REG(base))
#define USB_WR_OTGCTL(base, value) (USB_OTGCTL_REG(base) = (value))
#define USB_RMW_OTGCTL(base, mask, value) (USB_WR_OTGCTL(base, (USB_RD_OTGCTL(base) & ~(mask)) | (value)))
#define USB_SET_OTGCTL(base, value) (BME_OR8(&USB_OTGCTL_REG(base), (uint8_t)(value)))
#define USB_CLR_OTGCTL(base, value) (BME_AND8(&USB_OTGCTL_REG(base), (uint8_t)(~(value))))
#define USB_TOG_OTGCTL(base, value) (BME_XOR8(&USB_OTGCTL_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USB_OTGCTL bitfields
 */

/*!
 * @name Register USB_OTGCTL, field OTGEN[2] (RW)
 *
 * Values:
 * - 0b0 - If USB_EN is 1 and HOST_MODE is 0 in the Control Register (CTL), then
 *     the D+ Data Line pull-up resistors are enabled. If HOST_MODE is 1 the D+
 *     and D- Data Line pull-down resistors are engaged.
 * - 0b1 - The pull-up and pull-down controls in this register are used.
 */
/*@{*/
/*! @brief Read current value of the USB_OTGCTL_OTGEN field. */
#define USB_RD_OTGCTL_OTGEN(base) ((USB_OTGCTL_REG(base) & USB_OTGCTL_OTGEN_MASK) >> USB_OTGCTL_OTGEN_SHIFT)
#define USB_BRD_OTGCTL_OTGEN(base) (BME_UBFX8(&USB_OTGCTL_REG(base), USB_OTGCTL_OTGEN_SHIFT, USB_OTGCTL_OTGEN_WIDTH))

/*! @brief Set the OTGEN field to a new value. */
#define USB_WR_OTGCTL_OTGEN(base, value) (USB_RMW_OTGCTL(base, USB_OTGCTL_OTGEN_MASK, USB_OTGCTL_OTGEN(value)))
#define USB_BWR_OTGCTL_OTGEN(base, value) (BME_BFI8(&USB_OTGCTL_REG(base), ((uint8_t)(value) << USB_OTGCTL_OTGEN_SHIFT), USB_OTGCTL_OTGEN_SHIFT, USB_OTGCTL_OTGEN_WIDTH))
/*@}*/

/*!
 * @name Register USB_OTGCTL, field DMLOW[4] (RW)
 *
 * Values:
 * - 0b0 - D- pulldown resistor is not enabled.
 * - 0b1 - D- pulldown resistor is enabled.
 */
/*@{*/
/*! @brief Read current value of the USB_OTGCTL_DMLOW field. */
#define USB_RD_OTGCTL_DMLOW(base) ((USB_OTGCTL_REG(base) & USB_OTGCTL_DMLOW_MASK) >> USB_OTGCTL_DMLOW_SHIFT)
#define USB_BRD_OTGCTL_DMLOW(base) (BME_UBFX8(&USB_OTGCTL_REG(base), USB_OTGCTL_DMLOW_SHIFT, USB_OTGCTL_DMLOW_WIDTH))

/*! @brief Set the DMLOW field to a new value. */
#define USB_WR_OTGCTL_DMLOW(base, value) (USB_RMW_OTGCTL(base, USB_OTGCTL_DMLOW_MASK, USB_OTGCTL_DMLOW(value)))
#define USB_BWR_OTGCTL_DMLOW(base, value) (BME_BFI8(&USB_OTGCTL_REG(base), ((uint8_t)(value) << USB_OTGCTL_DMLOW_SHIFT), USB_OTGCTL_DMLOW_SHIFT, USB_OTGCTL_DMLOW_WIDTH))
/*@}*/

/*!
 * @name Register USB_OTGCTL, field DPLOW[5] (RW)
 *
 * This bit should always be enabled together with bit 4 (DMLOW)
 *
 * Values:
 * - 0b0 - D+ pulldown resistor is not enabled.
 * - 0b1 - D+ pulldown resistor is enabled.
 */
/*@{*/
/*! @brief Read current value of the USB_OTGCTL_DPLOW field. */
#define USB_RD_OTGCTL_DPLOW(base) ((USB_OTGCTL_REG(base) & USB_OTGCTL_DPLOW_MASK) >> USB_OTGCTL_DPLOW_SHIFT)
#define USB_BRD_OTGCTL_DPLOW(base) (BME_UBFX8(&USB_OTGCTL_REG(base), USB_OTGCTL_DPLOW_SHIFT, USB_OTGCTL_DPLOW_WIDTH))

/*! @brief Set the DPLOW field to a new value. */
#define USB_WR_OTGCTL_DPLOW(base, value) (USB_RMW_OTGCTL(base, USB_OTGCTL_DPLOW_MASK, USB_OTGCTL_DPLOW(value)))
#define USB_BWR_OTGCTL_DPLOW(base, value) (BME_BFI8(&USB_OTGCTL_REG(base), ((uint8_t)(value) << USB_OTGCTL_DPLOW_SHIFT), USB_OTGCTL_DPLOW_SHIFT, USB_OTGCTL_DPLOW_WIDTH))
/*@}*/

/*!
 * @name Register USB_OTGCTL, field DPHIGH[7] (RW)
 *
 * Values:
 * - 0b0 - D+ pullup resistor is not enabled
 * - 0b1 - D+ pullup resistor is enabled
 */
/*@{*/
/*! @brief Read current value of the USB_OTGCTL_DPHIGH field. */
#define USB_RD_OTGCTL_DPHIGH(base) ((USB_OTGCTL_REG(base) & USB_OTGCTL_DPHIGH_MASK) >> USB_OTGCTL_DPHIGH_SHIFT)
#define USB_BRD_OTGCTL_DPHIGH(base) (BME_UBFX8(&USB_OTGCTL_REG(base), USB_OTGCTL_DPHIGH_SHIFT, USB_OTGCTL_DPHIGH_WIDTH))

/*! @brief Set the DPHIGH field to a new value. */
#define USB_WR_OTGCTL_DPHIGH(base, value) (USB_RMW_OTGCTL(base, USB_OTGCTL_DPHIGH_MASK, USB_OTGCTL_DPHIGH(value)))
#define USB_BWR_OTGCTL_DPHIGH(base, value) (BME_BFI8(&USB_OTGCTL_REG(base), ((uint8_t)(value) << USB_OTGCTL_DPHIGH_SHIFT), USB_OTGCTL_DPHIGH_SHIFT, USB_OTGCTL_DPHIGH_WIDTH))
/*@}*/

/*******************************************************************************
 * USB_ISTAT - Interrupt Status register
 ******************************************************************************/

/*!
 * @brief USB_ISTAT - Interrupt Status register (W1C)
 *
 * Reset value: 0x00U
 *
 * Contains fields for each of the interrupt sources within the USB Module. Each
 * of these fields are qualified with their respective interrupt enable bits.
 * All fields of this register are logically OR'd together along with the OTG
 * Interrupt Status Register (OTGSTAT) to form a single interrupt source for the
 * processor's interrupt controller. After an interrupt bit has been set it may only
 * be cleared by writing a one to the respective interrupt bit. This register
 * contains the value of 0x00 after a reset.
 */
/*!
 * @name Constants and macros for entire USB_ISTAT register
 */
/*@{*/
#define USB_RD_ISTAT(base)       (USB_ISTAT_REG(base))
#define USB_WR_ISTAT(base, value) (USB_ISTAT_REG(base) = (value))
#define USB_RMW_ISTAT(base, mask, value) (USB_WR_ISTAT(base, (USB_RD_ISTAT(base) & ~(mask)) | (value)))
#define USB_SET_ISTAT(base, value) (BME_OR8(&USB_ISTAT_REG(base), (uint8_t)(value)))
#define USB_CLR_ISTAT(base, value) (BME_AND8(&USB_ISTAT_REG(base), (uint8_t)(~(value))))
#define USB_TOG_ISTAT(base, value) (BME_XOR8(&USB_ISTAT_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USB_ISTAT bitfields
 */

/*!
 * @name Register USB_ISTAT, field USBRST[0] (W1C)
 *
 * This bit is set when the USB Module has decoded a valid USB reset. This
 * informs the processor that it should write 0x00 into the address register and
 * enable endpoint 0. USBRST is set after a USB reset has been detected for 2.5
 * microseconds. It is not asserted again until the USB reset condition has been
 * removed and then reasserted.
 */
/*@{*/
/*! @brief Read current value of the USB_ISTAT_USBRST field. */
#define USB_RD_ISTAT_USBRST(base) ((USB_ISTAT_REG(base) & USB_ISTAT_USBRST_MASK) >> USB_ISTAT_USBRST_SHIFT)
#define USB_BRD_ISTAT_USBRST(base) (BME_UBFX8(&USB_ISTAT_REG(base), USB_ISTAT_USBRST_SHIFT, USB_ISTAT_USBRST_WIDTH))

/*! @brief Set the USBRST field to a new value. */
#define USB_WR_ISTAT_USBRST(base, value) (USB_RMW_ISTAT(base, (USB_ISTAT_USBRST_MASK | USB_ISTAT_ERROR_MASK | USB_ISTAT_SOFTOK_MASK | USB_ISTAT_TOKDNE_MASK | USB_ISTAT_SLEEP_MASK | USB_ISTAT_RESUME_MASK | USB_ISTAT_ATTACH_MASK | USB_ISTAT_STALL_MASK), USB_ISTAT_USBRST(value)))
#define USB_BWR_ISTAT_USBRST(base, value) (BME_BFI8(&USB_ISTAT_REG(base), ((uint8_t)(value) << USB_ISTAT_USBRST_SHIFT), USB_ISTAT_USBRST_SHIFT, USB_ISTAT_USBRST_WIDTH))
/*@}*/

/*!
 * @name Register USB_ISTAT, field ERROR[1] (W1C)
 *
 * This bit is set when any of the error conditions within Error Interrupt
 * Status (ERRSTAT) register occur. The processor must then read the ERRSTAT register
 * to determine the source of the error.
 */
/*@{*/
/*! @brief Read current value of the USB_ISTAT_ERROR field. */
#define USB_RD_ISTAT_ERROR(base) ((USB_ISTAT_REG(base) & USB_ISTAT_ERROR_MASK) >> USB_ISTAT_ERROR_SHIFT)
#define USB_BRD_ISTAT_ERROR(base) (BME_UBFX8(&USB_ISTAT_REG(base), USB_ISTAT_ERROR_SHIFT, USB_ISTAT_ERROR_WIDTH))

/*! @brief Set the ERROR field to a new value. */
#define USB_WR_ISTAT_ERROR(base, value) (USB_RMW_ISTAT(base, (USB_ISTAT_ERROR_MASK | USB_ISTAT_USBRST_MASK | USB_ISTAT_SOFTOK_MASK | USB_ISTAT_TOKDNE_MASK | USB_ISTAT_SLEEP_MASK | USB_ISTAT_RESUME_MASK | USB_ISTAT_ATTACH_MASK | USB_ISTAT_STALL_MASK), USB_ISTAT_ERROR(value)))
#define USB_BWR_ISTAT_ERROR(base, value) (BME_BFI8(&USB_ISTAT_REG(base), ((uint8_t)(value) << USB_ISTAT_ERROR_SHIFT), USB_ISTAT_ERROR_SHIFT, USB_ISTAT_ERROR_WIDTH))
/*@}*/

/*!
 * @name Register USB_ISTAT, field SOFTOK[2] (W1C)
 *
 * This bit is set when the USB Module receives a Start Of Frame (SOF) token. In
 * Host mode this field is set when the SOF threshold is reached
 * (MISCCTRL[SOFBUSSET]=0), or when the SOF counter reaches 0 (MISCCTRL[SOFBUSSET]=1), so that
 * software can prepare for the next SOF.
 */
/*@{*/
/*! @brief Read current value of the USB_ISTAT_SOFTOK field. */
#define USB_RD_ISTAT_SOFTOK(base) ((USB_ISTAT_REG(base) & USB_ISTAT_SOFTOK_MASK) >> USB_ISTAT_SOFTOK_SHIFT)
#define USB_BRD_ISTAT_SOFTOK(base) (BME_UBFX8(&USB_ISTAT_REG(base), USB_ISTAT_SOFTOK_SHIFT, USB_ISTAT_SOFTOK_WIDTH))

/*! @brief Set the SOFTOK field to a new value. */
#define USB_WR_ISTAT_SOFTOK(base, value) (USB_RMW_ISTAT(base, (USB_ISTAT_SOFTOK_MASK | USB_ISTAT_USBRST_MASK | USB_ISTAT_ERROR_MASK | USB_ISTAT_TOKDNE_MASK | USB_ISTAT_SLEEP_MASK | USB_ISTAT_RESUME_MASK | USB_ISTAT_ATTACH_MASK | USB_ISTAT_STALL_MASK), USB_ISTAT_SOFTOK(value)))
#define USB_BWR_ISTAT_SOFTOK(base, value) (BME_BFI8(&USB_ISTAT_REG(base), ((uint8_t)(value) << USB_ISTAT_SOFTOK_SHIFT), USB_ISTAT_SOFTOK_SHIFT, USB_ISTAT_SOFTOK_WIDTH))
/*@}*/

/*!
 * @name Register USB_ISTAT, field TOKDNE[3] (W1C)
 *
 * This bit is set when the current token being processed has completed. The
 * processor must immediately read the STATUS (STAT) register to determine the
 * EndPoint and BD used for this token. Clearing this bit (by writing a one) causes
 * STAT to be cleared or the STAT holding register to be loaded into the STAT
 * register.
 */
/*@{*/
/*! @brief Read current value of the USB_ISTAT_TOKDNE field. */
#define USB_RD_ISTAT_TOKDNE(base) ((USB_ISTAT_REG(base) & USB_ISTAT_TOKDNE_MASK) >> USB_ISTAT_TOKDNE_SHIFT)
#define USB_BRD_ISTAT_TOKDNE(base) (BME_UBFX8(&USB_ISTAT_REG(base), USB_ISTAT_TOKDNE_SHIFT, USB_ISTAT_TOKDNE_WIDTH))

/*! @brief Set the TOKDNE field to a new value. */
#define USB_WR_ISTAT_TOKDNE(base, value) (USB_RMW_ISTAT(base, (USB_ISTAT_TOKDNE_MASK | USB_ISTAT_USBRST_MASK | USB_ISTAT_ERROR_MASK | USB_ISTAT_SOFTOK_MASK | USB_ISTAT_SLEEP_MASK | USB_ISTAT_RESUME_MASK | USB_ISTAT_ATTACH_MASK | USB_ISTAT_STALL_MASK), USB_ISTAT_TOKDNE(value)))
#define USB_BWR_ISTAT_TOKDNE(base, value) (BME_BFI8(&USB_ISTAT_REG(base), ((uint8_t)(value) << USB_ISTAT_TOKDNE_SHIFT), USB_ISTAT_TOKDNE_SHIFT, USB_ISTAT_TOKDNE_WIDTH))
/*@}*/

/*!
 * @name Register USB_ISTAT, field SLEEP[4] (W1C)
 *
 * This bit is set when the USB Module detects a constant idle on the USB bus
 * for 3 ms. The sleep timer is reset by activity on the USB bus.
 */
/*@{*/
/*! @brief Read current value of the USB_ISTAT_SLEEP field. */
#define USB_RD_ISTAT_SLEEP(base) ((USB_ISTAT_REG(base) & USB_ISTAT_SLEEP_MASK) >> USB_ISTAT_SLEEP_SHIFT)
#define USB_BRD_ISTAT_SLEEP(base) (BME_UBFX8(&USB_ISTAT_REG(base), USB_ISTAT_SLEEP_SHIFT, USB_ISTAT_SLEEP_WIDTH))

/*! @brief Set the SLEEP field to a new value. */
#define USB_WR_ISTAT_SLEEP(base, value) (USB_RMW_ISTAT(base, (USB_ISTAT_SLEEP_MASK | USB_ISTAT_USBRST_MASK | USB_ISTAT_ERROR_MASK | USB_ISTAT_SOFTOK_MASK | USB_ISTAT_TOKDNE_MASK | USB_ISTAT_RESUME_MASK | USB_ISTAT_ATTACH_MASK | USB_ISTAT_STALL_MASK), USB_ISTAT_SLEEP(value)))
#define USB_BWR_ISTAT_SLEEP(base, value) (BME_BFI8(&USB_ISTAT_REG(base), ((uint8_t)(value) << USB_ISTAT_SLEEP_SHIFT), USB_ISTAT_SLEEP_SHIFT, USB_ISTAT_SLEEP_WIDTH))
/*@}*/

/*!
 * @name Register USB_ISTAT, field RESUME[5] (W1C)
 *
 * This bit is set when a K-state is observed on the DP/DM signals for 2.5 us.
 * When not in suspend mode this interrupt must be disabled.
 */
/*@{*/
/*! @brief Read current value of the USB_ISTAT_RESUME field. */
#define USB_RD_ISTAT_RESUME(base) ((USB_ISTAT_REG(base) & USB_ISTAT_RESUME_MASK) >> USB_ISTAT_RESUME_SHIFT)
#define USB_BRD_ISTAT_RESUME(base) (BME_UBFX8(&USB_ISTAT_REG(base), USB_ISTAT_RESUME_SHIFT, USB_ISTAT_RESUME_WIDTH))

/*! @brief Set the RESUME field to a new value. */
#define USB_WR_ISTAT_RESUME(base, value) (USB_RMW_ISTAT(base, (USB_ISTAT_RESUME_MASK | USB_ISTAT_USBRST_MASK | USB_ISTAT_ERROR_MASK | USB_ISTAT_SOFTOK_MASK | USB_ISTAT_TOKDNE_MASK | USB_ISTAT_SLEEP_MASK | USB_ISTAT_ATTACH_MASK | USB_ISTAT_STALL_MASK), USB_ISTAT_RESUME(value)))
#define USB_BWR_ISTAT_RESUME(base, value) (BME_BFI8(&USB_ISTAT_REG(base), ((uint8_t)(value) << USB_ISTAT_RESUME_SHIFT), USB_ISTAT_RESUME_SHIFT, USB_ISTAT_RESUME_WIDTH))
/*@}*/

/*!
 * @name Register USB_ISTAT, field ATTACH[6] (W1C)
 *
 * This field is set when the USB Module detects an attach of a USB device. This
 * field is only valid if CTL[HOSTMODEEN]=1. This interrupt signifies that a
 * peripheral is now present and must be configured; it is asserted if there have
 * been no transitions on the USB for 2.5 us and the current bus state is not SE0."
 *
 * Values:
 * - 0b0 - No Attach is detected since the last time the ATTACH bit was cleared.
 * - 0b1 - A peripheral is now present and must be configured (a stable non-SE0
 *     state is detected for more than 2.5 us).
 */
/*@{*/
/*! @brief Read current value of the USB_ISTAT_ATTACH field. */
#define USB_RD_ISTAT_ATTACH(base) ((USB_ISTAT_REG(base) & USB_ISTAT_ATTACH_MASK) >> USB_ISTAT_ATTACH_SHIFT)
#define USB_BRD_ISTAT_ATTACH(base) (BME_UBFX8(&USB_ISTAT_REG(base), USB_ISTAT_ATTACH_SHIFT, USB_ISTAT_ATTACH_WIDTH))

/*! @brief Set the ATTACH field to a new value. */
#define USB_WR_ISTAT_ATTACH(base, value) (USB_RMW_ISTAT(base, (USB_ISTAT_ATTACH_MASK | USB_ISTAT_USBRST_MASK | USB_ISTAT_ERROR_MASK | USB_ISTAT_SOFTOK_MASK | USB_ISTAT_TOKDNE_MASK | USB_ISTAT_SLEEP_MASK | USB_ISTAT_RESUME_MASK | USB_ISTAT_STALL_MASK), USB_ISTAT_ATTACH(value)))
#define USB_BWR_ISTAT_ATTACH(base, value) (BME_BFI8(&USB_ISTAT_REG(base), ((uint8_t)(value) << USB_ISTAT_ATTACH_SHIFT), USB_ISTAT_ATTACH_SHIFT, USB_ISTAT_ATTACH_WIDTH))
/*@}*/

/*!
 * @name Register USB_ISTAT, field STALL[7] (W1C)
 *
 * In Target mode this bit is asserted when a STALL handshake is sent by the
 * SIE. In Host mode this bit is set when the USB Module detects a STALL acknowledge
 * during the handshake phase of a USB transaction.This interrupt can be used to
 * determine whether the last USB transaction was completed successfully or
 * stalled.
 */
/*@{*/
/*! @brief Read current value of the USB_ISTAT_STALL field. */
#define USB_RD_ISTAT_STALL(base) ((USB_ISTAT_REG(base) & USB_ISTAT_STALL_MASK) >> USB_ISTAT_STALL_SHIFT)
#define USB_BRD_ISTAT_STALL(base) (BME_UBFX8(&USB_ISTAT_REG(base), USB_ISTAT_STALL_SHIFT, USB_ISTAT_STALL_WIDTH))

/*! @brief Set the STALL field to a new value. */
#define USB_WR_ISTAT_STALL(base, value) (USB_RMW_ISTAT(base, (USB_ISTAT_STALL_MASK | USB_ISTAT_USBRST_MASK | USB_ISTAT_ERROR_MASK | USB_ISTAT_SOFTOK_MASK | USB_ISTAT_TOKDNE_MASK | USB_ISTAT_SLEEP_MASK | USB_ISTAT_RESUME_MASK | USB_ISTAT_ATTACH_MASK), USB_ISTAT_STALL(value)))
#define USB_BWR_ISTAT_STALL(base, value) (BME_BFI8(&USB_ISTAT_REG(base), ((uint8_t)(value) << USB_ISTAT_STALL_SHIFT), USB_ISTAT_STALL_SHIFT, USB_ISTAT_STALL_WIDTH))
/*@}*/

/*******************************************************************************
 * USB_INTEN - Interrupt Enable register
 ******************************************************************************/

/*!
 * @brief USB_INTEN - Interrupt Enable register (RW)
 *
 * Reset value: 0x00U
 *
 * Contains enable fields for each of the interrupt sources within the USB
 * Module. Setting any of these bits enables the respective interrupt source in the
 * ISTAT register. This register contains the value of 0x00 after a reset.
 */
/*!
 * @name Constants and macros for entire USB_INTEN register
 */
/*@{*/
#define USB_RD_INTEN(base)       (USB_INTEN_REG(base))
#define USB_WR_INTEN(base, value) (USB_INTEN_REG(base) = (value))
#define USB_RMW_INTEN(base, mask, value) (USB_WR_INTEN(base, (USB_RD_INTEN(base) & ~(mask)) | (value)))
#define USB_SET_INTEN(base, value) (BME_OR8(&USB_INTEN_REG(base), (uint8_t)(value)))
#define USB_CLR_INTEN(base, value) (BME_AND8(&USB_INTEN_REG(base), (uint8_t)(~(value))))
#define USB_TOG_INTEN(base, value) (BME_XOR8(&USB_INTEN_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USB_INTEN bitfields
 */

/*!
 * @name Register USB_INTEN, field USBRSTEN[0] (RW)
 *
 * Values:
 * - 0b0 - Disables the USBRST interrupt.
 * - 0b1 - Enables the USBRST interrupt.
 */
/*@{*/
/*! @brief Read current value of the USB_INTEN_USBRSTEN field. */
#define USB_RD_INTEN_USBRSTEN(base) ((USB_INTEN_REG(base) & USB_INTEN_USBRSTEN_MASK) >> USB_INTEN_USBRSTEN_SHIFT)
#define USB_BRD_INTEN_USBRSTEN(base) (BME_UBFX8(&USB_INTEN_REG(base), USB_INTEN_USBRSTEN_SHIFT, USB_INTEN_USBRSTEN_WIDTH))

/*! @brief Set the USBRSTEN field to a new value. */
#define USB_WR_INTEN_USBRSTEN(base, value) (USB_RMW_INTEN(base, USB_INTEN_USBRSTEN_MASK, USB_INTEN_USBRSTEN(value)))
#define USB_BWR_INTEN_USBRSTEN(base, value) (BME_BFI8(&USB_INTEN_REG(base), ((uint8_t)(value) << USB_INTEN_USBRSTEN_SHIFT), USB_INTEN_USBRSTEN_SHIFT, USB_INTEN_USBRSTEN_WIDTH))
/*@}*/

/*!
 * @name Register USB_INTEN, field ERROREN[1] (RW)
 *
 * Values:
 * - 0b0 - Disables the ERROR interrupt.
 * - 0b1 - Enables the ERROR interrupt.
 */
/*@{*/
/*! @brief Read current value of the USB_INTEN_ERROREN field. */
#define USB_RD_INTEN_ERROREN(base) ((USB_INTEN_REG(base) & USB_INTEN_ERROREN_MASK) >> USB_INTEN_ERROREN_SHIFT)
#define USB_BRD_INTEN_ERROREN(base) (BME_UBFX8(&USB_INTEN_REG(base), USB_INTEN_ERROREN_SHIFT, USB_INTEN_ERROREN_WIDTH))

/*! @brief Set the ERROREN field to a new value. */
#define USB_WR_INTEN_ERROREN(base, value) (USB_RMW_INTEN(base, USB_INTEN_ERROREN_MASK, USB_INTEN_ERROREN(value)))
#define USB_BWR_INTEN_ERROREN(base, value) (BME_BFI8(&USB_INTEN_REG(base), ((uint8_t)(value) << USB_INTEN_ERROREN_SHIFT), USB_INTEN_ERROREN_SHIFT, USB_INTEN_ERROREN_WIDTH))
/*@}*/

/*!
 * @name Register USB_INTEN, field SOFTOKEN[2] (RW)
 *
 * Values:
 * - 0b0 - Disbles the SOFTOK interrupt.
 * - 0b1 - Enables the SOFTOK interrupt.
 */
/*@{*/
/*! @brief Read current value of the USB_INTEN_SOFTOKEN field. */
#define USB_RD_INTEN_SOFTOKEN(base) ((USB_INTEN_REG(base) & USB_INTEN_SOFTOKEN_MASK) >> USB_INTEN_SOFTOKEN_SHIFT)
#define USB_BRD_INTEN_SOFTOKEN(base) (BME_UBFX8(&USB_INTEN_REG(base), USB_INTEN_SOFTOKEN_SHIFT, USB_INTEN_SOFTOKEN_WIDTH))

/*! @brief Set the SOFTOKEN field to a new value. */
#define USB_WR_INTEN_SOFTOKEN(base, value) (USB_RMW_INTEN(base, USB_INTEN_SOFTOKEN_MASK, USB_INTEN_SOFTOKEN(value)))
#define USB_BWR_INTEN_SOFTOKEN(base, value) (BME_BFI8(&USB_INTEN_REG(base), ((uint8_t)(value) << USB_INTEN_SOFTOKEN_SHIFT), USB_INTEN_SOFTOKEN_SHIFT, USB_INTEN_SOFTOKEN_WIDTH))
/*@}*/

/*!
 * @name Register USB_INTEN, field TOKDNEEN[3] (RW)
 *
 * Values:
 * - 0b0 - Disables the TOKDNE interrupt.
 * - 0b1 - Enables the TOKDNE interrupt.
 */
/*@{*/
/*! @brief Read current value of the USB_INTEN_TOKDNEEN field. */
#define USB_RD_INTEN_TOKDNEEN(base) ((USB_INTEN_REG(base) & USB_INTEN_TOKDNEEN_MASK) >> USB_INTEN_TOKDNEEN_SHIFT)
#define USB_BRD_INTEN_TOKDNEEN(base) (BME_UBFX8(&USB_INTEN_REG(base), USB_INTEN_TOKDNEEN_SHIFT, USB_INTEN_TOKDNEEN_WIDTH))

/*! @brief Set the TOKDNEEN field to a new value. */
#define USB_WR_INTEN_TOKDNEEN(base, value) (USB_RMW_INTEN(base, USB_INTEN_TOKDNEEN_MASK, USB_INTEN_TOKDNEEN(value)))
#define USB_BWR_INTEN_TOKDNEEN(base, value) (BME_BFI8(&USB_INTEN_REG(base), ((uint8_t)(value) << USB_INTEN_TOKDNEEN_SHIFT), USB_INTEN_TOKDNEEN_SHIFT, USB_INTEN_TOKDNEEN_WIDTH))
/*@}*/

/*!
 * @name Register USB_INTEN, field SLEEPEN[4] (RW)
 *
 * Values:
 * - 0b0 - Disables the SLEEP interrupt.
 * - 0b1 - Enables the SLEEP interrupt.
 */
/*@{*/
/*! @brief Read current value of the USB_INTEN_SLEEPEN field. */
#define USB_RD_INTEN_SLEEPEN(base) ((USB_INTEN_REG(base) & USB_INTEN_SLEEPEN_MASK) >> USB_INTEN_SLEEPEN_SHIFT)
#define USB_BRD_INTEN_SLEEPEN(base) (BME_UBFX8(&USB_INTEN_REG(base), USB_INTEN_SLEEPEN_SHIFT, USB_INTEN_SLEEPEN_WIDTH))

/*! @brief Set the SLEEPEN field to a new value. */
#define USB_WR_INTEN_SLEEPEN(base, value) (USB_RMW_INTEN(base, USB_INTEN_SLEEPEN_MASK, USB_INTEN_SLEEPEN(value)))
#define USB_BWR_INTEN_SLEEPEN(base, value) (BME_BFI8(&USB_INTEN_REG(base), ((uint8_t)(value) << USB_INTEN_SLEEPEN_SHIFT), USB_INTEN_SLEEPEN_SHIFT, USB_INTEN_SLEEPEN_WIDTH))
/*@}*/

/*!
 * @name Register USB_INTEN, field RESUMEEN[5] (RW)
 *
 * Values:
 * - 0b0 - Disables the RESUME interrupt.
 * - 0b1 - Enables the RESUME interrupt.
 */
/*@{*/
/*! @brief Read current value of the USB_INTEN_RESUMEEN field. */
#define USB_RD_INTEN_RESUMEEN(base) ((USB_INTEN_REG(base) & USB_INTEN_RESUMEEN_MASK) >> USB_INTEN_RESUMEEN_SHIFT)
#define USB_BRD_INTEN_RESUMEEN(base) (BME_UBFX8(&USB_INTEN_REG(base), USB_INTEN_RESUMEEN_SHIFT, USB_INTEN_RESUMEEN_WIDTH))

/*! @brief Set the RESUMEEN field to a new value. */
#define USB_WR_INTEN_RESUMEEN(base, value) (USB_RMW_INTEN(base, USB_INTEN_RESUMEEN_MASK, USB_INTEN_RESUMEEN(value)))
#define USB_BWR_INTEN_RESUMEEN(base, value) (BME_BFI8(&USB_INTEN_REG(base), ((uint8_t)(value) << USB_INTEN_RESUMEEN_SHIFT), USB_INTEN_RESUMEEN_SHIFT, USB_INTEN_RESUMEEN_WIDTH))
/*@}*/

/*!
 * @name Register USB_INTEN, field ATTACHEN[6] (RW)
 *
 * Values:
 * - 0b0 - Disables the ATTACH interrupt.
 * - 0b1 - Enables the ATTACH interrupt.
 */
/*@{*/
/*! @brief Read current value of the USB_INTEN_ATTACHEN field. */
#define USB_RD_INTEN_ATTACHEN(base) ((USB_INTEN_REG(base) & USB_INTEN_ATTACHEN_MASK) >> USB_INTEN_ATTACHEN_SHIFT)
#define USB_BRD_INTEN_ATTACHEN(base) (BME_UBFX8(&USB_INTEN_REG(base), USB_INTEN_ATTACHEN_SHIFT, USB_INTEN_ATTACHEN_WIDTH))

/*! @brief Set the ATTACHEN field to a new value. */
#define USB_WR_INTEN_ATTACHEN(base, value) (USB_RMW_INTEN(base, USB_INTEN_ATTACHEN_MASK, USB_INTEN_ATTACHEN(value)))
#define USB_BWR_INTEN_ATTACHEN(base, value) (BME_BFI8(&USB_INTEN_REG(base), ((uint8_t)(value) << USB_INTEN_ATTACHEN_SHIFT), USB_INTEN_ATTACHEN_SHIFT, USB_INTEN_ATTACHEN_WIDTH))
/*@}*/

/*!
 * @name Register USB_INTEN, field STALLEN[7] (RW)
 *
 * Values:
 * - 0b0 - Diasbles the STALL interrupt.
 * - 0b1 - Enables the STALL interrupt.
 */
/*@{*/
/*! @brief Read current value of the USB_INTEN_STALLEN field. */
#define USB_RD_INTEN_STALLEN(base) ((USB_INTEN_REG(base) & USB_INTEN_STALLEN_MASK) >> USB_INTEN_STALLEN_SHIFT)
#define USB_BRD_INTEN_STALLEN(base) (BME_UBFX8(&USB_INTEN_REG(base), USB_INTEN_STALLEN_SHIFT, USB_INTEN_STALLEN_WIDTH))

/*! @brief Set the STALLEN field to a new value. */
#define USB_WR_INTEN_STALLEN(base, value) (USB_RMW_INTEN(base, USB_INTEN_STALLEN_MASK, USB_INTEN_STALLEN(value)))
#define USB_BWR_INTEN_STALLEN(base, value) (BME_BFI8(&USB_INTEN_REG(base), ((uint8_t)(value) << USB_INTEN_STALLEN_SHIFT), USB_INTEN_STALLEN_SHIFT, USB_INTEN_STALLEN_WIDTH))
/*@}*/

/*******************************************************************************
 * USB_ERRSTAT - Error Interrupt Status register
 ******************************************************************************/

/*!
 * @brief USB_ERRSTAT - Error Interrupt Status register (W1C)
 *
 * Reset value: 0x00U
 *
 * Contains enable bits for each of the error sources within the USB Module.
 * Each of these bits are qualified with their respective error enable bits. All
 * bits of this register are logically OR'd together and the result placed in the
 * ERROR bit of the ISTAT register. After an interrupt bit has been set it may only
 * be cleared by writing a one to the respective interrupt bit. Each bit is set
 * as soon as the error condition is detected. Therefore, the interrupt does not
 * typically correspond with the end of a token being processed. This register
 * contains the value of 0x00 after a reset.
 */
/*!
 * @name Constants and macros for entire USB_ERRSTAT register
 */
/*@{*/
#define USB_RD_ERRSTAT(base)     (USB_ERRSTAT_REG(base))
#define USB_WR_ERRSTAT(base, value) (USB_ERRSTAT_REG(base) = (value))
#define USB_RMW_ERRSTAT(base, mask, value) (USB_WR_ERRSTAT(base, (USB_RD_ERRSTAT(base) & ~(mask)) | (value)))
#define USB_SET_ERRSTAT(base, value) (BME_OR8(&USB_ERRSTAT_REG(base), (uint8_t)(value)))
#define USB_CLR_ERRSTAT(base, value) (BME_AND8(&USB_ERRSTAT_REG(base), (uint8_t)(~(value))))
#define USB_TOG_ERRSTAT(base, value) (BME_XOR8(&USB_ERRSTAT_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USB_ERRSTAT bitfields
 */

/*!
 * @name Register USB_ERRSTAT, field PIDERR[0] (W1C)
 *
 * This bit is set when the PID check field fails.
 */
/*@{*/
/*! @brief Read current value of the USB_ERRSTAT_PIDERR field. */
#define USB_RD_ERRSTAT_PIDERR(base) ((USB_ERRSTAT_REG(base) & USB_ERRSTAT_PIDERR_MASK) >> USB_ERRSTAT_PIDERR_SHIFT)
#define USB_BRD_ERRSTAT_PIDERR(base) (BME_UBFX8(&USB_ERRSTAT_REG(base), USB_ERRSTAT_PIDERR_SHIFT, USB_ERRSTAT_PIDERR_WIDTH))

/*! @brief Set the PIDERR field to a new value. */
#define USB_WR_ERRSTAT_PIDERR(base, value) (USB_RMW_ERRSTAT(base, (USB_ERRSTAT_PIDERR_MASK | USB_ERRSTAT_CRC5EOF_MASK | USB_ERRSTAT_CRC16_MASK | USB_ERRSTAT_DFN8_MASK | USB_ERRSTAT_BTOERR_MASK | USB_ERRSTAT_DMAERR_MASK | USB_ERRSTAT_OWNERR_MASK | USB_ERRSTAT_BTSERR_MASK), USB_ERRSTAT_PIDERR(value)))
#define USB_BWR_ERRSTAT_PIDERR(base, value) (BME_BFI8(&USB_ERRSTAT_REG(base), ((uint8_t)(value) << USB_ERRSTAT_PIDERR_SHIFT), USB_ERRSTAT_PIDERR_SHIFT, USB_ERRSTAT_PIDERR_WIDTH))
/*@}*/

/*!
 * @name Register USB_ERRSTAT, field CRC5EOF[1] (W1C)
 *
 * This error interrupt has two functions. When the USB Module is operating in
 * peripheral mode (CTL[HOSTMODEEN]=0), this interrupt detects CRC5 errors in the
 * token packets generated by the host. If set the token packet was rejected due
 * to a CRC5 error. When the USB Module is operating in host mode
 * (CTL[HOSTMODEEN]=1), this interrupt detects End Of Frame (EOF) error conditions. This occurs
 * when the USB Module is transmitting or receiving data and the SOF counter
 * reaches zero. This interrupt is useful when developing USB packet scheduling
 * software to ensure that no USB transactions cross the start of the next frame.
 */
/*@{*/
/*! @brief Read current value of the USB_ERRSTAT_CRC5EOF field. */
#define USB_RD_ERRSTAT_CRC5EOF(base) ((USB_ERRSTAT_REG(base) & USB_ERRSTAT_CRC5EOF_MASK) >> USB_ERRSTAT_CRC5EOF_SHIFT)
#define USB_BRD_ERRSTAT_CRC5EOF(base) (BME_UBFX8(&USB_ERRSTAT_REG(base), USB_ERRSTAT_CRC5EOF_SHIFT, USB_ERRSTAT_CRC5EOF_WIDTH))

/*! @brief Set the CRC5EOF field to a new value. */
#define USB_WR_ERRSTAT_CRC5EOF(base, value) (USB_RMW_ERRSTAT(base, (USB_ERRSTAT_CRC5EOF_MASK | USB_ERRSTAT_PIDERR_MASK | USB_ERRSTAT_CRC16_MASK | USB_ERRSTAT_DFN8_MASK | USB_ERRSTAT_BTOERR_MASK | USB_ERRSTAT_DMAERR_MASK | USB_ERRSTAT_OWNERR_MASK | USB_ERRSTAT_BTSERR_MASK), USB_ERRSTAT_CRC5EOF(value)))
#define USB_BWR_ERRSTAT_CRC5EOF(base, value) (BME_BFI8(&USB_ERRSTAT_REG(base), ((uint8_t)(value) << USB_ERRSTAT_CRC5EOF_SHIFT), USB_ERRSTAT_CRC5EOF_SHIFT, USB_ERRSTAT_CRC5EOF_WIDTH))
/*@}*/

/*!
 * @name Register USB_ERRSTAT, field CRC16[2] (W1C)
 *
 * This bit is set when a data packet is rejected due to a CRC16 error.
 */
/*@{*/
/*! @brief Read current value of the USB_ERRSTAT_CRC16 field. */
#define USB_RD_ERRSTAT_CRC16(base) ((USB_ERRSTAT_REG(base) & USB_ERRSTAT_CRC16_MASK) >> USB_ERRSTAT_CRC16_SHIFT)
#define USB_BRD_ERRSTAT_CRC16(base) (BME_UBFX8(&USB_ERRSTAT_REG(base), USB_ERRSTAT_CRC16_SHIFT, USB_ERRSTAT_CRC16_WIDTH))

/*! @brief Set the CRC16 field to a new value. */
#define USB_WR_ERRSTAT_CRC16(base, value) (USB_RMW_ERRSTAT(base, (USB_ERRSTAT_CRC16_MASK | USB_ERRSTAT_PIDERR_MASK | USB_ERRSTAT_CRC5EOF_MASK | USB_ERRSTAT_DFN8_MASK | USB_ERRSTAT_BTOERR_MASK | USB_ERRSTAT_DMAERR_MASK | USB_ERRSTAT_OWNERR_MASK | USB_ERRSTAT_BTSERR_MASK), USB_ERRSTAT_CRC16(value)))
#define USB_BWR_ERRSTAT_CRC16(base, value) (BME_BFI8(&USB_ERRSTAT_REG(base), ((uint8_t)(value) << USB_ERRSTAT_CRC16_SHIFT), USB_ERRSTAT_CRC16_SHIFT, USB_ERRSTAT_CRC16_WIDTH))
/*@}*/

/*!
 * @name Register USB_ERRSTAT, field DFN8[3] (W1C)
 *
 * This bit is set if the data field received was not 8 bits in length. USB
 * Specification 1.0 requires that data fields be an integral number of bytes. If the
 * data field was not an integral number of bytes, this bit is set.
 */
/*@{*/
/*! @brief Read current value of the USB_ERRSTAT_DFN8 field. */
#define USB_RD_ERRSTAT_DFN8(base) ((USB_ERRSTAT_REG(base) & USB_ERRSTAT_DFN8_MASK) >> USB_ERRSTAT_DFN8_SHIFT)
#define USB_BRD_ERRSTAT_DFN8(base) (BME_UBFX8(&USB_ERRSTAT_REG(base), USB_ERRSTAT_DFN8_SHIFT, USB_ERRSTAT_DFN8_WIDTH))

/*! @brief Set the DFN8 field to a new value. */
#define USB_WR_ERRSTAT_DFN8(base, value) (USB_RMW_ERRSTAT(base, (USB_ERRSTAT_DFN8_MASK | USB_ERRSTAT_PIDERR_MASK | USB_ERRSTAT_CRC5EOF_MASK | USB_ERRSTAT_CRC16_MASK | USB_ERRSTAT_BTOERR_MASK | USB_ERRSTAT_DMAERR_MASK | USB_ERRSTAT_OWNERR_MASK | USB_ERRSTAT_BTSERR_MASK), USB_ERRSTAT_DFN8(value)))
#define USB_BWR_ERRSTAT_DFN8(base, value) (BME_BFI8(&USB_ERRSTAT_REG(base), ((uint8_t)(value) << USB_ERRSTAT_DFN8_SHIFT), USB_ERRSTAT_DFN8_SHIFT, USB_ERRSTAT_DFN8_WIDTH))
/*@}*/

/*!
 * @name Register USB_ERRSTAT, field BTOERR[4] (W1C)
 *
 * This bit is set when a bus turnaround timeout error occurs. The USB module
 * contains a bus turnaround timer that keeps track of the amount of time elapsed
 * between the token and data phases of a SETUP or OUT TOKEN or the data and
 * handshake phases of a IN TOKEN. If more than 16 bit times are counted from the
 * previous EOP before a transition from IDLE, a bus turnaround timeout error occurs.
 */
/*@{*/
/*! @brief Read current value of the USB_ERRSTAT_BTOERR field. */
#define USB_RD_ERRSTAT_BTOERR(base) ((USB_ERRSTAT_REG(base) & USB_ERRSTAT_BTOERR_MASK) >> USB_ERRSTAT_BTOERR_SHIFT)
#define USB_BRD_ERRSTAT_BTOERR(base) (BME_UBFX8(&USB_ERRSTAT_REG(base), USB_ERRSTAT_BTOERR_SHIFT, USB_ERRSTAT_BTOERR_WIDTH))

/*! @brief Set the BTOERR field to a new value. */
#define USB_WR_ERRSTAT_BTOERR(base, value) (USB_RMW_ERRSTAT(base, (USB_ERRSTAT_BTOERR_MASK | USB_ERRSTAT_PIDERR_MASK | USB_ERRSTAT_CRC5EOF_MASK | USB_ERRSTAT_CRC16_MASK | USB_ERRSTAT_DFN8_MASK | USB_ERRSTAT_DMAERR_MASK | USB_ERRSTAT_OWNERR_MASK | USB_ERRSTAT_BTSERR_MASK), USB_ERRSTAT_BTOERR(value)))
#define USB_BWR_ERRSTAT_BTOERR(base, value) (BME_BFI8(&USB_ERRSTAT_REG(base), ((uint8_t)(value) << USB_ERRSTAT_BTOERR_SHIFT), USB_ERRSTAT_BTOERR_SHIFT, USB_ERRSTAT_BTOERR_WIDTH))
/*@}*/

/*!
 * @name Register USB_ERRSTAT, field DMAERR[5] (W1C)
 *
 * This bit is set if the USB Module has requested a DMA access to read a new
 * BDT but has not been given the bus before it needs to receive or transmit data.
 * If processing a TX transfer this would cause a transmit data underflow
 * condition. If processing a RX transfer this would cause a receive data overflow
 * condition. This interrupt is useful when developing device arbitration hardware for
 * the microprocessor and the USB module to minimize bus request and bus grant
 * latency. This bit is also set if a data packet to or from the host is larger
 * than the buffer size allocated in the BDT. In this case the data packet is
 * truncated as it is put in buffer memory.
 */
/*@{*/
/*! @brief Read current value of the USB_ERRSTAT_DMAERR field. */
#define USB_RD_ERRSTAT_DMAERR(base) ((USB_ERRSTAT_REG(base) & USB_ERRSTAT_DMAERR_MASK) >> USB_ERRSTAT_DMAERR_SHIFT)
#define USB_BRD_ERRSTAT_DMAERR(base) (BME_UBFX8(&USB_ERRSTAT_REG(base), USB_ERRSTAT_DMAERR_SHIFT, USB_ERRSTAT_DMAERR_WIDTH))

/*! @brief Set the DMAERR field to a new value. */
#define USB_WR_ERRSTAT_DMAERR(base, value) (USB_RMW_ERRSTAT(base, (USB_ERRSTAT_DMAERR_MASK | USB_ERRSTAT_PIDERR_MASK | USB_ERRSTAT_CRC5EOF_MASK | USB_ERRSTAT_CRC16_MASK | USB_ERRSTAT_DFN8_MASK | USB_ERRSTAT_BTOERR_MASK | USB_ERRSTAT_OWNERR_MASK | USB_ERRSTAT_BTSERR_MASK), USB_ERRSTAT_DMAERR(value)))
#define USB_BWR_ERRSTAT_DMAERR(base, value) (BME_BFI8(&USB_ERRSTAT_REG(base), ((uint8_t)(value) << USB_ERRSTAT_DMAERR_SHIFT), USB_ERRSTAT_DMAERR_SHIFT, USB_ERRSTAT_DMAERR_WIDTH))
/*@}*/

/*!
 * @name Register USB_ERRSTAT, field OWNERR[6] (W1C)
 *
 * This field is valid when the USB Module is operating in peripheral mode
 * (CTL[HOSTMODEEN]=0). It is set if the USB Module requires a new BD for SETUP, ISO
 * IN, or ISO OUT transfer while a new BD is not available.
 */
/*@{*/
/*! @brief Read current value of the USB_ERRSTAT_OWNERR field. */
#define USB_RD_ERRSTAT_OWNERR(base) ((USB_ERRSTAT_REG(base) & USB_ERRSTAT_OWNERR_MASK) >> USB_ERRSTAT_OWNERR_SHIFT)
#define USB_BRD_ERRSTAT_OWNERR(base) (BME_UBFX8(&USB_ERRSTAT_REG(base), USB_ERRSTAT_OWNERR_SHIFT, USB_ERRSTAT_OWNERR_WIDTH))

/*! @brief Set the OWNERR field to a new value. */
#define USB_WR_ERRSTAT_OWNERR(base, value) (USB_RMW_ERRSTAT(base, (USB_ERRSTAT_OWNERR_MASK | USB_ERRSTAT_PIDERR_MASK | USB_ERRSTAT_CRC5EOF_MASK | USB_ERRSTAT_CRC16_MASK | USB_ERRSTAT_DFN8_MASK | USB_ERRSTAT_BTOERR_MASK | USB_ERRSTAT_DMAERR_MASK | USB_ERRSTAT_BTSERR_MASK), USB_ERRSTAT_OWNERR(value)))
#define USB_BWR_ERRSTAT_OWNERR(base, value) (BME_BFI8(&USB_ERRSTAT_REG(base), ((uint8_t)(value) << USB_ERRSTAT_OWNERR_SHIFT), USB_ERRSTAT_OWNERR_SHIFT, USB_ERRSTAT_OWNERR_WIDTH))
/*@}*/

/*!
 * @name Register USB_ERRSTAT, field BTSERR[7] (W1C)
 *
 * This bit is set when a bit stuff error is detected. If set, the corresponding
 * packet is rejected due to the error.
 */
/*@{*/
/*! @brief Read current value of the USB_ERRSTAT_BTSERR field. */
#define USB_RD_ERRSTAT_BTSERR(base) ((USB_ERRSTAT_REG(base) & USB_ERRSTAT_BTSERR_MASK) >> USB_ERRSTAT_BTSERR_SHIFT)
#define USB_BRD_ERRSTAT_BTSERR(base) (BME_UBFX8(&USB_ERRSTAT_REG(base), USB_ERRSTAT_BTSERR_SHIFT, USB_ERRSTAT_BTSERR_WIDTH))

/*! @brief Set the BTSERR field to a new value. */
#define USB_WR_ERRSTAT_BTSERR(base, value) (USB_RMW_ERRSTAT(base, (USB_ERRSTAT_BTSERR_MASK | USB_ERRSTAT_PIDERR_MASK | USB_ERRSTAT_CRC5EOF_MASK | USB_ERRSTAT_CRC16_MASK | USB_ERRSTAT_DFN8_MASK | USB_ERRSTAT_BTOERR_MASK | USB_ERRSTAT_DMAERR_MASK | USB_ERRSTAT_OWNERR_MASK), USB_ERRSTAT_BTSERR(value)))
#define USB_BWR_ERRSTAT_BTSERR(base, value) (BME_BFI8(&USB_ERRSTAT_REG(base), ((uint8_t)(value) << USB_ERRSTAT_BTSERR_SHIFT), USB_ERRSTAT_BTSERR_SHIFT, USB_ERRSTAT_BTSERR_WIDTH))
/*@}*/

/*******************************************************************************
 * USB_ERREN - Error Interrupt Enable register
 ******************************************************************************/

/*!
 * @brief USB_ERREN - Error Interrupt Enable register (RW)
 *
 * Reset value: 0x00U
 *
 * Contains enable bits for each of the error interrupt sources within the USB
 * module. Setting any of these bits enables the respective interrupt source in
 * ERRSTAT. Each bit is set as soon as the error condition is detected. Therefore,
 * the interrupt does not typically correspond with the end of a token being
 * processed. This register contains the value of 0x00 after a reset.
 */
/*!
 * @name Constants and macros for entire USB_ERREN register
 */
/*@{*/
#define USB_RD_ERREN(base)       (USB_ERREN_REG(base))
#define USB_WR_ERREN(base, value) (USB_ERREN_REG(base) = (value))
#define USB_RMW_ERREN(base, mask, value) (USB_WR_ERREN(base, (USB_RD_ERREN(base) & ~(mask)) | (value)))
#define USB_SET_ERREN(base, value) (BME_OR8(&USB_ERREN_REG(base), (uint8_t)(value)))
#define USB_CLR_ERREN(base, value) (BME_AND8(&USB_ERREN_REG(base), (uint8_t)(~(value))))
#define USB_TOG_ERREN(base, value) (BME_XOR8(&USB_ERREN_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USB_ERREN bitfields
 */

/*!
 * @name Register USB_ERREN, field PIDERREN[0] (RW)
 *
 * Values:
 * - 0b0 - Disables the PIDERR interrupt.
 * - 0b1 - Enters the PIDERR interrupt.
 */
/*@{*/
/*! @brief Read current value of the USB_ERREN_PIDERREN field. */
#define USB_RD_ERREN_PIDERREN(base) ((USB_ERREN_REG(base) & USB_ERREN_PIDERREN_MASK) >> USB_ERREN_PIDERREN_SHIFT)
#define USB_BRD_ERREN_PIDERREN(base) (BME_UBFX8(&USB_ERREN_REG(base), USB_ERREN_PIDERREN_SHIFT, USB_ERREN_PIDERREN_WIDTH))

/*! @brief Set the PIDERREN field to a new value. */
#define USB_WR_ERREN_PIDERREN(base, value) (USB_RMW_ERREN(base, USB_ERREN_PIDERREN_MASK, USB_ERREN_PIDERREN(value)))
#define USB_BWR_ERREN_PIDERREN(base, value) (BME_BFI8(&USB_ERREN_REG(base), ((uint8_t)(value) << USB_ERREN_PIDERREN_SHIFT), USB_ERREN_PIDERREN_SHIFT, USB_ERREN_PIDERREN_WIDTH))
/*@}*/

/*!
 * @name Register USB_ERREN, field CRC5EOFEN[1] (RW)
 *
 * Values:
 * - 0b0 - Disables the CRC5/EOF interrupt.
 * - 0b1 - Enables the CRC5/EOF interrupt.
 */
/*@{*/
/*! @brief Read current value of the USB_ERREN_CRC5EOFEN field. */
#define USB_RD_ERREN_CRC5EOFEN(base) ((USB_ERREN_REG(base) & USB_ERREN_CRC5EOFEN_MASK) >> USB_ERREN_CRC5EOFEN_SHIFT)
#define USB_BRD_ERREN_CRC5EOFEN(base) (BME_UBFX8(&USB_ERREN_REG(base), USB_ERREN_CRC5EOFEN_SHIFT, USB_ERREN_CRC5EOFEN_WIDTH))

/*! @brief Set the CRC5EOFEN field to a new value. */
#define USB_WR_ERREN_CRC5EOFEN(base, value) (USB_RMW_ERREN(base, USB_ERREN_CRC5EOFEN_MASK, USB_ERREN_CRC5EOFEN(value)))
#define USB_BWR_ERREN_CRC5EOFEN(base, value) (BME_BFI8(&USB_ERREN_REG(base), ((uint8_t)(value) << USB_ERREN_CRC5EOFEN_SHIFT), USB_ERREN_CRC5EOFEN_SHIFT, USB_ERREN_CRC5EOFEN_WIDTH))
/*@}*/

/*!
 * @name Register USB_ERREN, field CRC16EN[2] (RW)
 *
 * Values:
 * - 0b0 - Disables the CRC16 interrupt.
 * - 0b1 - Enables the CRC16 interrupt.
 */
/*@{*/
/*! @brief Read current value of the USB_ERREN_CRC16EN field. */
#define USB_RD_ERREN_CRC16EN(base) ((USB_ERREN_REG(base) & USB_ERREN_CRC16EN_MASK) >> USB_ERREN_CRC16EN_SHIFT)
#define USB_BRD_ERREN_CRC16EN(base) (BME_UBFX8(&USB_ERREN_REG(base), USB_ERREN_CRC16EN_SHIFT, USB_ERREN_CRC16EN_WIDTH))

/*! @brief Set the CRC16EN field to a new value. */
#define USB_WR_ERREN_CRC16EN(base, value) (USB_RMW_ERREN(base, USB_ERREN_CRC16EN_MASK, USB_ERREN_CRC16EN(value)))
#define USB_BWR_ERREN_CRC16EN(base, value) (BME_BFI8(&USB_ERREN_REG(base), ((uint8_t)(value) << USB_ERREN_CRC16EN_SHIFT), USB_ERREN_CRC16EN_SHIFT, USB_ERREN_CRC16EN_WIDTH))
/*@}*/

/*!
 * @name Register USB_ERREN, field DFN8EN[3] (RW)
 *
 * Values:
 * - 0b0 - Disables the DFN8 interrupt.
 * - 0b1 - Enables the DFN8 interrupt.
 */
/*@{*/
/*! @brief Read current value of the USB_ERREN_DFN8EN field. */
#define USB_RD_ERREN_DFN8EN(base) ((USB_ERREN_REG(base) & USB_ERREN_DFN8EN_MASK) >> USB_ERREN_DFN8EN_SHIFT)
#define USB_BRD_ERREN_DFN8EN(base) (BME_UBFX8(&USB_ERREN_REG(base), USB_ERREN_DFN8EN_SHIFT, USB_ERREN_DFN8EN_WIDTH))

/*! @brief Set the DFN8EN field to a new value. */
#define USB_WR_ERREN_DFN8EN(base, value) (USB_RMW_ERREN(base, USB_ERREN_DFN8EN_MASK, USB_ERREN_DFN8EN(value)))
#define USB_BWR_ERREN_DFN8EN(base, value) (BME_BFI8(&USB_ERREN_REG(base), ((uint8_t)(value) << USB_ERREN_DFN8EN_SHIFT), USB_ERREN_DFN8EN_SHIFT, USB_ERREN_DFN8EN_WIDTH))
/*@}*/

/*!
 * @name Register USB_ERREN, field BTOERREN[4] (RW)
 *
 * Values:
 * - 0b0 - Disables the BTOERR interrupt.
 * - 0b1 - Enables the BTOERR interrupt.
 */
/*@{*/
/*! @brief Read current value of the USB_ERREN_BTOERREN field. */
#define USB_RD_ERREN_BTOERREN(base) ((USB_ERREN_REG(base) & USB_ERREN_BTOERREN_MASK) >> USB_ERREN_BTOERREN_SHIFT)
#define USB_BRD_ERREN_BTOERREN(base) (BME_UBFX8(&USB_ERREN_REG(base), USB_ERREN_BTOERREN_SHIFT, USB_ERREN_BTOERREN_WIDTH))

/*! @brief Set the BTOERREN field to a new value. */
#define USB_WR_ERREN_BTOERREN(base, value) (USB_RMW_ERREN(base, USB_ERREN_BTOERREN_MASK, USB_ERREN_BTOERREN(value)))
#define USB_BWR_ERREN_BTOERREN(base, value) (BME_BFI8(&USB_ERREN_REG(base), ((uint8_t)(value) << USB_ERREN_BTOERREN_SHIFT), USB_ERREN_BTOERREN_SHIFT, USB_ERREN_BTOERREN_WIDTH))
/*@}*/

/*!
 * @name Register USB_ERREN, field DMAERREN[5] (RW)
 *
 * Values:
 * - 0b0 - Disables the DMAERR interrupt.
 * - 0b1 - Enables the DMAERR interrupt.
 */
/*@{*/
/*! @brief Read current value of the USB_ERREN_DMAERREN field. */
#define USB_RD_ERREN_DMAERREN(base) ((USB_ERREN_REG(base) & USB_ERREN_DMAERREN_MASK) >> USB_ERREN_DMAERREN_SHIFT)
#define USB_BRD_ERREN_DMAERREN(base) (BME_UBFX8(&USB_ERREN_REG(base), USB_ERREN_DMAERREN_SHIFT, USB_ERREN_DMAERREN_WIDTH))

/*! @brief Set the DMAERREN field to a new value. */
#define USB_WR_ERREN_DMAERREN(base, value) (USB_RMW_ERREN(base, USB_ERREN_DMAERREN_MASK, USB_ERREN_DMAERREN(value)))
#define USB_BWR_ERREN_DMAERREN(base, value) (BME_BFI8(&USB_ERREN_REG(base), ((uint8_t)(value) << USB_ERREN_DMAERREN_SHIFT), USB_ERREN_DMAERREN_SHIFT, USB_ERREN_DMAERREN_WIDTH))
/*@}*/

/*!
 * @name Register USB_ERREN, field OWNERREN[6] (RW)
 *
 * This field is valid when the USB module is operating in peripheral mode
 * (CTL[HOSTMODEEN]=0).
 *
 * Values:
 * - 0b0 - Disables the OWNERR interrupt.
 * - 0b1 - Enables the OWNERR interrupt.
 */
/*@{*/
/*! @brief Read current value of the USB_ERREN_OWNERREN field. */
#define USB_RD_ERREN_OWNERREN(base) ((USB_ERREN_REG(base) & USB_ERREN_OWNERREN_MASK) >> USB_ERREN_OWNERREN_SHIFT)
#define USB_BRD_ERREN_OWNERREN(base) (BME_UBFX8(&USB_ERREN_REG(base), USB_ERREN_OWNERREN_SHIFT, USB_ERREN_OWNERREN_WIDTH))

/*! @brief Set the OWNERREN field to a new value. */
#define USB_WR_ERREN_OWNERREN(base, value) (USB_RMW_ERREN(base, USB_ERREN_OWNERREN_MASK, USB_ERREN_OWNERREN(value)))
#define USB_BWR_ERREN_OWNERREN(base, value) (BME_BFI8(&USB_ERREN_REG(base), ((uint8_t)(value) << USB_ERREN_OWNERREN_SHIFT), USB_ERREN_OWNERREN_SHIFT, USB_ERREN_OWNERREN_WIDTH))
/*@}*/

/*!
 * @name Register USB_ERREN, field BTSERREN[7] (RW)
 *
 * Values:
 * - 0b0 - Disables the BTSERR interrupt.
 * - 0b1 - Enables the BTSERR interrupt.
 */
/*@{*/
/*! @brief Read current value of the USB_ERREN_BTSERREN field. */
#define USB_RD_ERREN_BTSERREN(base) ((USB_ERREN_REG(base) & USB_ERREN_BTSERREN_MASK) >> USB_ERREN_BTSERREN_SHIFT)
#define USB_BRD_ERREN_BTSERREN(base) (BME_UBFX8(&USB_ERREN_REG(base), USB_ERREN_BTSERREN_SHIFT, USB_ERREN_BTSERREN_WIDTH))

/*! @brief Set the BTSERREN field to a new value. */
#define USB_WR_ERREN_BTSERREN(base, value) (USB_RMW_ERREN(base, USB_ERREN_BTSERREN_MASK, USB_ERREN_BTSERREN(value)))
#define USB_BWR_ERREN_BTSERREN(base, value) (BME_BFI8(&USB_ERREN_REG(base), ((uint8_t)(value) << USB_ERREN_BTSERREN_SHIFT), USB_ERREN_BTSERREN_SHIFT, USB_ERREN_BTSERREN_WIDTH))
/*@}*/

/*******************************************************************************
 * USB_STAT - Status register
 ******************************************************************************/

/*!
 * @brief USB_STAT - Status register (RO)
 *
 * Reset value: 0x00U
 *
 * Reports the transaction status within the USB module. When the processor's
 * interrupt controller has received a TOKDNE, interrupt the Status Register must
 * be read to determine the status of the previous endpoint communication. The
 * data in the status register is valid when TOKDNE interrupt is asserted. The
 * Status register is actually a read window into a status FIFO maintained by the USB
 * module. When the USB module uses a BD, it updates the Status register. If
 * another USB transaction is performed before the TOKDNE interrupt is serviced, the
 * USB module stores the status of the next transaction in the STAT FIFO. Thus
 * STAT is actually a four byte FIFO that allows the processor core to process one
 * transaction while the SIE is processing the next transaction. Clearing the
 * TOKDNE bit in the ISTAT register causes the SIE to update STAT with the contents
 * of the next STAT value. If the data in the STAT holding register is valid, the
 * SIE immediately reasserts to TOKDNE interrupt.
 */
/*!
 * @name Constants and macros for entire USB_STAT register
 */
/*@{*/
#define USB_RD_STAT(base)        (USB_STAT_REG(base))
/*@}*/

/*
 * Constants & macros for individual USB_STAT bitfields
 */

/*!
 * @name Register USB_STAT, field ODD[2] (RO)
 *
 * This bit is set if the last buffer descriptor updated was in the odd bank of
 * the BDT.
 */
/*@{*/
/*! @brief Read current value of the USB_STAT_ODD field. */
#define USB_RD_STAT_ODD(base) ((USB_STAT_REG(base) & USB_STAT_ODD_MASK) >> USB_STAT_ODD_SHIFT)
#define USB_BRD_STAT_ODD(base) (BME_UBFX8(&USB_STAT_REG(base), USB_STAT_ODD_SHIFT, USB_STAT_ODD_WIDTH))
/*@}*/

/*!
 * @name Register USB_STAT, field TX[3] (RO)
 *
 * Values:
 * - 0b0 - The most recent transaction was a receive operation.
 * - 0b1 - The most recent transaction was a transmit operation.
 */
/*@{*/
/*! @brief Read current value of the USB_STAT_TX field. */
#define USB_RD_STAT_TX(base) ((USB_STAT_REG(base) & USB_STAT_TX_MASK) >> USB_STAT_TX_SHIFT)
#define USB_BRD_STAT_TX(base) (BME_UBFX8(&USB_STAT_REG(base), USB_STAT_TX_SHIFT, USB_STAT_TX_WIDTH))
/*@}*/

/*!
 * @name Register USB_STAT, field ENDP[7:4] (RO)
 *
 * This four-bit field encodes the endpoint address that received or transmitted
 * the previous token. This allows the processor core to determine the BDT entry
 * that was updated by the last USB transaction.
 */
/*@{*/
/*! @brief Read current value of the USB_STAT_ENDP field. */
#define USB_RD_STAT_ENDP(base) ((USB_STAT_REG(base) & USB_STAT_ENDP_MASK) >> USB_STAT_ENDP_SHIFT)
#define USB_BRD_STAT_ENDP(base) (BME_UBFX8(&USB_STAT_REG(base), USB_STAT_ENDP_SHIFT, USB_STAT_ENDP_WIDTH))
/*@}*/

/*******************************************************************************
 * USB_CTL - Control register
 ******************************************************************************/

/*!
 * @brief USB_CTL - Control register (RW)
 *
 * Reset value: 0x00U
 *
 * Provides various control and configuration information for the USB module.
 */
/*!
 * @name Constants and macros for entire USB_CTL register
 */
/*@{*/
#define USB_RD_CTL(base)         (USB_CTL_REG(base))
#define USB_WR_CTL(base, value)  (USB_CTL_REG(base) = (value))
#define USB_RMW_CTL(base, mask, value) (USB_WR_CTL(base, (USB_RD_CTL(base) & ~(mask)) | (value)))
#define USB_SET_CTL(base, value) (BME_OR8(&USB_CTL_REG(base), (uint8_t)(value)))
#define USB_CLR_CTL(base, value) (BME_AND8(&USB_CTL_REG(base), (uint8_t)(~(value))))
#define USB_TOG_CTL(base, value) (BME_XOR8(&USB_CTL_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USB_CTL bitfields
 */

/*!
 * @name Register USB_CTL, field USBENSOFEN[0] (RW)
 *
 * Setting this bit enables the USB-FS to operate; clearing it disables the
 * USB-FS. Setting the bit causes the SIE to reset all of its ODD bits to the BDTs.
 * Therefore, setting this bit resets much of the logic in the SIE. When host mode
 * is enabled, clearing this bit causes the SIE to stop sending SOF tokens.
 *
 * Values:
 * - 0b0 - Disables the USB Module.
 * - 0b1 - Enables the USB Module.
 */
/*@{*/
/*! @brief Read current value of the USB_CTL_USBENSOFEN field. */
#define USB_RD_CTL_USBENSOFEN(base) ((USB_CTL_REG(base) & USB_CTL_USBENSOFEN_MASK) >> USB_CTL_USBENSOFEN_SHIFT)
#define USB_BRD_CTL_USBENSOFEN(base) (BME_UBFX8(&USB_CTL_REG(base), USB_CTL_USBENSOFEN_SHIFT, USB_CTL_USBENSOFEN_WIDTH))

/*! @brief Set the USBENSOFEN field to a new value. */
#define USB_WR_CTL_USBENSOFEN(base, value) (USB_RMW_CTL(base, USB_CTL_USBENSOFEN_MASK, USB_CTL_USBENSOFEN(value)))
#define USB_BWR_CTL_USBENSOFEN(base, value) (BME_BFI8(&USB_CTL_REG(base), ((uint8_t)(value) << USB_CTL_USBENSOFEN_SHIFT), USB_CTL_USBENSOFEN_SHIFT, USB_CTL_USBENSOFEN_WIDTH))
/*@}*/

/*!
 * @name Register USB_CTL, field ODDRST[1] (RW)
 *
 * Setting this bit to 1 resets all the BDT ODD ping/pong fields to 0, which
 * then specifies the EVEN BDT bank.
 */
/*@{*/
/*! @brief Read current value of the USB_CTL_ODDRST field. */
#define USB_RD_CTL_ODDRST(base) ((USB_CTL_REG(base) & USB_CTL_ODDRST_MASK) >> USB_CTL_ODDRST_SHIFT)
#define USB_BRD_CTL_ODDRST(base) (BME_UBFX8(&USB_CTL_REG(base), USB_CTL_ODDRST_SHIFT, USB_CTL_ODDRST_WIDTH))

/*! @brief Set the ODDRST field to a new value. */
#define USB_WR_CTL_ODDRST(base, value) (USB_RMW_CTL(base, USB_CTL_ODDRST_MASK, USB_CTL_ODDRST(value)))
#define USB_BWR_CTL_ODDRST(base, value) (BME_BFI8(&USB_CTL_REG(base), ((uint8_t)(value) << USB_CTL_ODDRST_SHIFT), USB_CTL_ODDRST_SHIFT, USB_CTL_ODDRST_WIDTH))
/*@}*/

/*!
 * @name Register USB_CTL, field RESUME[2] (RW)
 *
 * When set to 1 this bit enables the USB Module to execute resume signaling.
 * This allows the USB Module to perform remote wake-up. Software must set RESUME
 * to 1 for the required amount of time and then clear it to 0. If HOSTMODEENis
 * set, the USB module appends a Low Speed End of Packet to the Resume signaling
 * when the RESUME bit is cleared. For more information on RESUME signaling see
 * Section 7.1.4.5 of the USB specification version 1.0.
 */
/*@{*/
/*! @brief Read current value of the USB_CTL_RESUME field. */
#define USB_RD_CTL_RESUME(base) ((USB_CTL_REG(base) & USB_CTL_RESUME_MASK) >> USB_CTL_RESUME_SHIFT)
#define USB_BRD_CTL_RESUME(base) (BME_UBFX8(&USB_CTL_REG(base), USB_CTL_RESUME_SHIFT, USB_CTL_RESUME_WIDTH))

/*! @brief Set the RESUME field to a new value. */
#define USB_WR_CTL_RESUME(base, value) (USB_RMW_CTL(base, USB_CTL_RESUME_MASK, USB_CTL_RESUME(value)))
#define USB_BWR_CTL_RESUME(base, value) (BME_BFI8(&USB_CTL_REG(base), ((uint8_t)(value) << USB_CTL_RESUME_SHIFT), USB_CTL_RESUME_SHIFT, USB_CTL_RESUME_WIDTH))
/*@}*/

/*!
 * @name Register USB_CTL, field HOSTMODEEN[3] (RW)
 *
 * When set to 1, this bit enables the USB Module to operate in Host mode. In
 * host mode, the USB module performs USB transactions under the programmed control
 * of the host processor.
 */
/*@{*/
/*! @brief Read current value of the USB_CTL_HOSTMODEEN field. */
#define USB_RD_CTL_HOSTMODEEN(base) ((USB_CTL_REG(base) & USB_CTL_HOSTMODEEN_MASK) >> USB_CTL_HOSTMODEEN_SHIFT)
#define USB_BRD_CTL_HOSTMODEEN(base) (BME_UBFX8(&USB_CTL_REG(base), USB_CTL_HOSTMODEEN_SHIFT, USB_CTL_HOSTMODEEN_WIDTH))

/*! @brief Set the HOSTMODEEN field to a new value. */
#define USB_WR_CTL_HOSTMODEEN(base, value) (USB_RMW_CTL(base, USB_CTL_HOSTMODEEN_MASK, USB_CTL_HOSTMODEEN(value)))
#define USB_BWR_CTL_HOSTMODEEN(base, value) (BME_BFI8(&USB_CTL_REG(base), ((uint8_t)(value) << USB_CTL_HOSTMODEEN_SHIFT), USB_CTL_HOSTMODEEN_SHIFT, USB_CTL_HOSTMODEEN_WIDTH))
/*@}*/

/*!
 * @name Register USB_CTL, field RESET[4] (RW)
 *
 * Setting this bit enables the USB Module to generate USB reset signaling. This
 * allows the USB Module to reset USB peripherals. This control signal is only
 * valid in Host mode (CTL[HOSTMODEEN]=1). Software must set RESET to 1 for the
 * required amount of time and then clear it to 0 to end reset signaling. For more
 * information on reset signaling see Section 7.1.4.3 of the USB specification
 * version 1.0.
 */
/*@{*/
/*! @brief Read current value of the USB_CTL_RESET field. */
#define USB_RD_CTL_RESET(base) ((USB_CTL_REG(base) & USB_CTL_RESET_MASK) >> USB_CTL_RESET_SHIFT)
#define USB_BRD_CTL_RESET(base) (BME_UBFX8(&USB_CTL_REG(base), USB_CTL_RESET_SHIFT, USB_CTL_RESET_WIDTH))

/*! @brief Set the RESET field to a new value. */
#define USB_WR_CTL_RESET(base, value) (USB_RMW_CTL(base, USB_CTL_RESET_MASK, USB_CTL_RESET(value)))
#define USB_BWR_CTL_RESET(base, value) (BME_BFI8(&USB_CTL_REG(base), ((uint8_t)(value) << USB_CTL_RESET_SHIFT), USB_CTL_RESET_SHIFT, USB_CTL_RESET_WIDTH))
/*@}*/

/*!
 * @name Register USB_CTL, field TXSUSPENDTOKENBUSY[5] (RW)
 *
 * In Host mode, TOKEN_BUSY is set when the USB module is busy executing a USB
 * token. Software must not write more token commands to the Token Register when
 * TOKEN_BUSY is set. Software should check this field before writing any tokens
 * to the Token Register to ensure that token commands are not lost. In Target
 * mode, TXD_SUSPEND is set when the SIE has disabled packet transmission and
 * reception. Clearing this bit allows the SIE to continue token processing. This bit
 * is set by the SIE when a SETUP Token is received allowing software to dequeue
 * any pending packet transactions in the BDT before resuming token processing.
 */
/*@{*/
/*! @brief Read current value of the USB_CTL_TXSUSPENDTOKENBUSY field. */
#define USB_RD_CTL_TXSUSPENDTOKENBUSY(base) ((USB_CTL_REG(base) & USB_CTL_TXSUSPENDTOKENBUSY_MASK) >> USB_CTL_TXSUSPENDTOKENBUSY_SHIFT)
#define USB_BRD_CTL_TXSUSPENDTOKENBUSY(base) (BME_UBFX8(&USB_CTL_REG(base), USB_CTL_TXSUSPENDTOKENBUSY_SHIFT, USB_CTL_TXSUSPENDTOKENBUSY_WIDTH))

/*! @brief Set the TXSUSPENDTOKENBUSY field to a new value. */
#define USB_WR_CTL_TXSUSPENDTOKENBUSY(base, value) (USB_RMW_CTL(base, USB_CTL_TXSUSPENDTOKENBUSY_MASK, USB_CTL_TXSUSPENDTOKENBUSY(value)))
#define USB_BWR_CTL_TXSUSPENDTOKENBUSY(base, value) (BME_BFI8(&USB_CTL_REG(base), ((uint8_t)(value) << USB_CTL_TXSUSPENDTOKENBUSY_SHIFT), USB_CTL_TXSUSPENDTOKENBUSY_SHIFT, USB_CTL_TXSUSPENDTOKENBUSY_WIDTH))
/*@}*/

/*!
 * @name Register USB_CTL, field SE0[6] (RW)
 */
/*@{*/
/*! @brief Read current value of the USB_CTL_SE0 field. */
#define USB_RD_CTL_SE0(base) ((USB_CTL_REG(base) & USB_CTL_SE0_MASK) >> USB_CTL_SE0_SHIFT)
#define USB_BRD_CTL_SE0(base) (BME_UBFX8(&USB_CTL_REG(base), USB_CTL_SE0_SHIFT, USB_CTL_SE0_WIDTH))

/*! @brief Set the SE0 field to a new value. */
#define USB_WR_CTL_SE0(base, value) (USB_RMW_CTL(base, USB_CTL_SE0_MASK, USB_CTL_SE0(value)))
#define USB_BWR_CTL_SE0(base, value) (BME_BFI8(&USB_CTL_REG(base), ((uint8_t)(value) << USB_CTL_SE0_SHIFT), USB_CTL_SE0_SHIFT, USB_CTL_SE0_WIDTH))
/*@}*/

/*!
 * @name Register USB_CTL, field JSTATE[7] (RW)
 *
 * The polarity of this signal is affected by the current state of LSEN .
 */
/*@{*/
/*! @brief Read current value of the USB_CTL_JSTATE field. */
#define USB_RD_CTL_JSTATE(base) ((USB_CTL_REG(base) & USB_CTL_JSTATE_MASK) >> USB_CTL_JSTATE_SHIFT)
#define USB_BRD_CTL_JSTATE(base) (BME_UBFX8(&USB_CTL_REG(base), USB_CTL_JSTATE_SHIFT, USB_CTL_JSTATE_WIDTH))

/*! @brief Set the JSTATE field to a new value. */
#define USB_WR_CTL_JSTATE(base, value) (USB_RMW_CTL(base, USB_CTL_JSTATE_MASK, USB_CTL_JSTATE(value)))
#define USB_BWR_CTL_JSTATE(base, value) (BME_BFI8(&USB_CTL_REG(base), ((uint8_t)(value) << USB_CTL_JSTATE_SHIFT), USB_CTL_JSTATE_SHIFT, USB_CTL_JSTATE_WIDTH))
/*@}*/

/*******************************************************************************
 * USB_ADDR - Address register
 ******************************************************************************/

/*!
 * @brief USB_ADDR - Address register (RW)
 *
 * Reset value: 0x00U
 *
 * Holds the unique USB address that the USB module decodes when in Peripheral
 * mode (CTL[HOSTMODEEN]=0). When operating in Host mode (CTL[HOSTMODEEN]=1) the
 * USB module transmits this address with a TOKEN packet. This enables the USB
 * module to uniquely address any USB peripheral. In either mode, CTL[USBENSOFEN]
 * must be 1. The Address register is reset to 0x00 after the reset input becomes
 * active or the USB module decodes a USB reset signal. This action initializes
 * the Address register to decode address 0x00 as required by the USB specification.
 */
/*!
 * @name Constants and macros for entire USB_ADDR register
 */
/*@{*/
#define USB_RD_ADDR(base)        (USB_ADDR_REG(base))
#define USB_WR_ADDR(base, value) (USB_ADDR_REG(base) = (value))
#define USB_RMW_ADDR(base, mask, value) (USB_WR_ADDR(base, (USB_RD_ADDR(base) & ~(mask)) | (value)))
#define USB_SET_ADDR(base, value) (BME_OR8(&USB_ADDR_REG(base), (uint8_t)(value)))
#define USB_CLR_ADDR(base, value) (BME_AND8(&USB_ADDR_REG(base), (uint8_t)(~(value))))
#define USB_TOG_ADDR(base, value) (BME_XOR8(&USB_ADDR_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USB_ADDR bitfields
 */

/*!
 * @name Register USB_ADDR, field ADDR[6:0] (RW)
 *
 * Defines the USB address that the USB module decodes in peripheral mode, or
 * transmits when in host mode.
 */
/*@{*/
/*! @brief Read current value of the USB_ADDR_ADDR field. */
#define USB_RD_ADDR_ADDR(base) ((USB_ADDR_REG(base) & USB_ADDR_ADDR_MASK) >> USB_ADDR_ADDR_SHIFT)
#define USB_BRD_ADDR_ADDR(base) (BME_UBFX8(&USB_ADDR_REG(base), USB_ADDR_ADDR_SHIFT, USB_ADDR_ADDR_WIDTH))

/*! @brief Set the ADDR field to a new value. */
#define USB_WR_ADDR_ADDR(base, value) (USB_RMW_ADDR(base, USB_ADDR_ADDR_MASK, USB_ADDR_ADDR(value)))
#define USB_BWR_ADDR_ADDR(base, value) (BME_BFI8(&USB_ADDR_REG(base), ((uint8_t)(value) << USB_ADDR_ADDR_SHIFT), USB_ADDR_ADDR_SHIFT, USB_ADDR_ADDR_WIDTH))
/*@}*/

/*!
 * @name Register USB_ADDR, field LSEN[7] (RW)
 *
 * Informs the USB module that the next token command written to the token
 * register must be performed at low speed. This enables the USB module to perform the
 * necessary preamble required for low-speed data transmissions.
 */
/*@{*/
/*! @brief Read current value of the USB_ADDR_LSEN field. */
#define USB_RD_ADDR_LSEN(base) ((USB_ADDR_REG(base) & USB_ADDR_LSEN_MASK) >> USB_ADDR_LSEN_SHIFT)
#define USB_BRD_ADDR_LSEN(base) (BME_UBFX8(&USB_ADDR_REG(base), USB_ADDR_LSEN_SHIFT, USB_ADDR_LSEN_WIDTH))

/*! @brief Set the LSEN field to a new value. */
#define USB_WR_ADDR_LSEN(base, value) (USB_RMW_ADDR(base, USB_ADDR_LSEN_MASK, USB_ADDR_LSEN(value)))
#define USB_BWR_ADDR_LSEN(base, value) (BME_BFI8(&USB_ADDR_REG(base), ((uint8_t)(value) << USB_ADDR_LSEN_SHIFT), USB_ADDR_LSEN_SHIFT, USB_ADDR_LSEN_WIDTH))
/*@}*/

/*******************************************************************************
 * USB_BDTPAGE1 - BDT Page register 1
 ******************************************************************************/

/*!
 * @brief USB_BDTPAGE1 - BDT Page register 1 (RW)
 *
 * Reset value: 0x00U
 *
 * Provides address bits 15 through 9 of the base address where the current
 * Buffer Descriptor Table (BDT) resides in system memory. See Buffer Descriptor
 * Table. The 32-bit BDT Base Address is always aligned on 512-byte boundaries, so
 * bits 8 through 0 of the base address are always zero.
 */
/*!
 * @name Constants and macros for entire USB_BDTPAGE1 register
 */
/*@{*/
#define USB_RD_BDTPAGE1(base)    (USB_BDTPAGE1_REG(base))
#define USB_WR_BDTPAGE1(base, value) (USB_BDTPAGE1_REG(base) = (value))
#define USB_RMW_BDTPAGE1(base, mask, value) (USB_WR_BDTPAGE1(base, (USB_RD_BDTPAGE1(base) & ~(mask)) | (value)))
#define USB_SET_BDTPAGE1(base, value) (BME_OR8(&USB_BDTPAGE1_REG(base), (uint8_t)(value)))
#define USB_CLR_BDTPAGE1(base, value) (BME_AND8(&USB_BDTPAGE1_REG(base), (uint8_t)(~(value))))
#define USB_TOG_BDTPAGE1(base, value) (BME_XOR8(&USB_BDTPAGE1_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USB_BDTPAGE1 bitfields
 */

/*!
 * @name Register USB_BDTPAGE1, field BDTBA[7:1] (RW)
 *
 * Provides address bits 15 through 9 of the BDT base address.
 */
/*@{*/
/*! @brief Read current value of the USB_BDTPAGE1_BDTBA field. */
#define USB_RD_BDTPAGE1_BDTBA(base) ((USB_BDTPAGE1_REG(base) & USB_BDTPAGE1_BDTBA_MASK) >> USB_BDTPAGE1_BDTBA_SHIFT)
#define USB_BRD_BDTPAGE1_BDTBA(base) (BME_UBFX8(&USB_BDTPAGE1_REG(base), USB_BDTPAGE1_BDTBA_SHIFT, USB_BDTPAGE1_BDTBA_WIDTH))

/*! @brief Set the BDTBA field to a new value. */
#define USB_WR_BDTPAGE1_BDTBA(base, value) (USB_RMW_BDTPAGE1(base, USB_BDTPAGE1_BDTBA_MASK, USB_BDTPAGE1_BDTBA(value)))
#define USB_BWR_BDTPAGE1_BDTBA(base, value) (BME_BFI8(&USB_BDTPAGE1_REG(base), ((uint8_t)(value) << USB_BDTPAGE1_BDTBA_SHIFT), USB_BDTPAGE1_BDTBA_SHIFT, USB_BDTPAGE1_BDTBA_WIDTH))
/*@}*/

/*******************************************************************************
 * USB_FRMNUML - Frame Number register Low
 ******************************************************************************/

/*!
 * @brief USB_FRMNUML - Frame Number register Low (RW)
 *
 * Reset value: 0x00U
 *
 * The Frame Number registers (low and high) contain the 11-bit frame number.
 * These registers are updated with the current frame number whenever a SOF TOKEN
 * is received.
 */
/*!
 * @name Constants and macros for entire USB_FRMNUML register
 */
/*@{*/
#define USB_RD_FRMNUML(base)     (USB_FRMNUML_REG(base))
#define USB_WR_FRMNUML(base, value) (USB_FRMNUML_REG(base) = (value))
#define USB_RMW_FRMNUML(base, mask, value) (USB_WR_FRMNUML(base, (USB_RD_FRMNUML(base) & ~(mask)) | (value)))
#define USB_SET_FRMNUML(base, value) (BME_OR8(&USB_FRMNUML_REG(base), (uint8_t)(value)))
#define USB_CLR_FRMNUML(base, value) (BME_AND8(&USB_FRMNUML_REG(base), (uint8_t)(~(value))))
#define USB_TOG_FRMNUML(base, value) (BME_XOR8(&USB_FRMNUML_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * USB_FRMNUMH - Frame Number register High
 ******************************************************************************/

/*!
 * @brief USB_FRMNUMH - Frame Number register High (RW)
 *
 * Reset value: 0x00U
 *
 * The Frame Number registers (low and high) contain the 11-bit frame number.
 * These registers are updated with the current frame number whenever a SOF TOKEN
 * is received.
 */
/*!
 * @name Constants and macros for entire USB_FRMNUMH register
 */
/*@{*/
#define USB_RD_FRMNUMH(base)     (USB_FRMNUMH_REG(base))
#define USB_WR_FRMNUMH(base, value) (USB_FRMNUMH_REG(base) = (value))
#define USB_RMW_FRMNUMH(base, mask, value) (USB_WR_FRMNUMH(base, (USB_RD_FRMNUMH(base) & ~(mask)) | (value)))
#define USB_SET_FRMNUMH(base, value) (BME_OR8(&USB_FRMNUMH_REG(base), (uint8_t)(value)))
#define USB_CLR_FRMNUMH(base, value) (BME_AND8(&USB_FRMNUMH_REG(base), (uint8_t)(~(value))))
#define USB_TOG_FRMNUMH(base, value) (BME_XOR8(&USB_FRMNUMH_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USB_FRMNUMH bitfields
 */

/*!
 * @name Register USB_FRMNUMH, field FRM[2:0] (RW)
 *
 * This 3-bit field and the 8-bit field in the Frame Number Register Low are
 * used to compute the address where the current Buffer Descriptor Table (BDT)
 * resides in system memory.
 */
/*@{*/
/*! @brief Read current value of the USB_FRMNUMH_FRM field. */
#define USB_RD_FRMNUMH_FRM(base) ((USB_FRMNUMH_REG(base) & USB_FRMNUMH_FRM_MASK) >> USB_FRMNUMH_FRM_SHIFT)
#define USB_BRD_FRMNUMH_FRM(base) (BME_UBFX8(&USB_FRMNUMH_REG(base), USB_FRMNUMH_FRM_SHIFT, USB_FRMNUMH_FRM_WIDTH))

/*! @brief Set the FRM field to a new value. */
#define USB_WR_FRMNUMH_FRM(base, value) (USB_RMW_FRMNUMH(base, USB_FRMNUMH_FRM_MASK, USB_FRMNUMH_FRM(value)))
#define USB_BWR_FRMNUMH_FRM(base, value) (BME_BFI8(&USB_FRMNUMH_REG(base), ((uint8_t)(value) << USB_FRMNUMH_FRM_SHIFT), USB_FRMNUMH_FRM_SHIFT, USB_FRMNUMH_FRM_WIDTH))
/*@}*/

/*******************************************************************************
 * USB_TOKEN - Token register
 ******************************************************************************/

/*!
 * @brief USB_TOKEN - Token register (RW)
 *
 * Reset value: 0x00U
 *
 * Used to initiate USB transactions when in host mode (CTL[HOSTMODEEN]=1). When
 * the software needs to execute a USB transaction to a peripheral, it writes
 * the TOKEN type and endpoint to this register. After this register has been
 * written, the USB module begins the specified USB transaction to the address
 * contained in the address register. The processor core must always check that the
 * TOKEN_BUSY bit in the control register is not 1 before writing to the Token
 * Register. This ensures that the token commands are not overwritten before they can
 * be executed. The address register and endpoint control register 0 are also used
 * when performing a token command and therefore must also be written before the
 * Token Register. The address register is used to select the USB peripheral
 * address transmitted by the token command. The endpoint control register
 * determines the handshake and retry policies used during the transfer.
 */
/*!
 * @name Constants and macros for entire USB_TOKEN register
 */
/*@{*/
#define USB_RD_TOKEN(base)       (USB_TOKEN_REG(base))
#define USB_WR_TOKEN(base, value) (USB_TOKEN_REG(base) = (value))
#define USB_RMW_TOKEN(base, mask, value) (USB_WR_TOKEN(base, (USB_RD_TOKEN(base) & ~(mask)) | (value)))
#define USB_SET_TOKEN(base, value) (BME_OR8(&USB_TOKEN_REG(base), (uint8_t)(value)))
#define USB_CLR_TOKEN(base, value) (BME_AND8(&USB_TOKEN_REG(base), (uint8_t)(~(value))))
#define USB_TOG_TOKEN(base, value) (BME_XOR8(&USB_TOKEN_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USB_TOKEN bitfields
 */

/*!
 * @name Register USB_TOKEN, field TOKENENDPT[3:0] (RW)
 *
 * Holds the Endpoint address for the token command. The four bit value written
 * must be a valid endpoint.
 */
/*@{*/
/*! @brief Read current value of the USB_TOKEN_TOKENENDPT field. */
#define USB_RD_TOKEN_TOKENENDPT(base) ((USB_TOKEN_REG(base) & USB_TOKEN_TOKENENDPT_MASK) >> USB_TOKEN_TOKENENDPT_SHIFT)
#define USB_BRD_TOKEN_TOKENENDPT(base) (BME_UBFX8(&USB_TOKEN_REG(base), USB_TOKEN_TOKENENDPT_SHIFT, USB_TOKEN_TOKENENDPT_WIDTH))

/*! @brief Set the TOKENENDPT field to a new value. */
#define USB_WR_TOKEN_TOKENENDPT(base, value) (USB_RMW_TOKEN(base, USB_TOKEN_TOKENENDPT_MASK, USB_TOKEN_TOKENENDPT(value)))
#define USB_BWR_TOKEN_TOKENENDPT(base, value) (BME_BFI8(&USB_TOKEN_REG(base), ((uint8_t)(value) << USB_TOKEN_TOKENENDPT_SHIFT), USB_TOKEN_TOKENENDPT_SHIFT, USB_TOKEN_TOKENENDPT_WIDTH))
/*@}*/

/*!
 * @name Register USB_TOKEN, field TOKENPID[7:4] (RW)
 *
 * Contains the token type executed by the USB module.
 *
 * Values:
 * - 0b0001 - OUT Token. USB Module performs an OUT (TX) transaction.
 * - 0b1001 - IN Token. USB Module performs an In (RX) transaction.
 * - 0b1101 - SETUP Token. USB Module performs a SETUP (TX) transaction
 */
/*@{*/
/*! @brief Read current value of the USB_TOKEN_TOKENPID field. */
#define USB_RD_TOKEN_TOKENPID(base) ((USB_TOKEN_REG(base) & USB_TOKEN_TOKENPID_MASK) >> USB_TOKEN_TOKENPID_SHIFT)
#define USB_BRD_TOKEN_TOKENPID(base) (BME_UBFX8(&USB_TOKEN_REG(base), USB_TOKEN_TOKENPID_SHIFT, USB_TOKEN_TOKENPID_WIDTH))

/*! @brief Set the TOKENPID field to a new value. */
#define USB_WR_TOKEN_TOKENPID(base, value) (USB_RMW_TOKEN(base, USB_TOKEN_TOKENPID_MASK, USB_TOKEN_TOKENPID(value)))
#define USB_BWR_TOKEN_TOKENPID(base, value) (BME_BFI8(&USB_TOKEN_REG(base), ((uint8_t)(value) << USB_TOKEN_TOKENPID_SHIFT), USB_TOKEN_TOKENPID_SHIFT, USB_TOKEN_TOKENPID_WIDTH))
/*@}*/

/*******************************************************************************
 * USB_SOFTHLD - SOF Threshold register
 ******************************************************************************/

/*!
 * @brief USB_SOFTHLD - SOF Threshold register (RW)
 *
 * Reset value: 0x00U
 *
 * The SOF Threshold Register is used only in Host mode (CTL[HOSTMODEEN]=1).
 * When in Host mode, the 14-bit SOF counter counts the interval between SOF frames.
 * The SOF must be transmitted every 1ms so therefore the SOF counter is loaded
 * with a value of 12000. When the SOF counter reaches zero, a Start Of Frame
 * (SOF) token is transmitted. The SOF threshold register is used to program the
 * number of USB byte times when SOFDYNTHLD=0, or 8 byte times when SOFDYNTHLD=1,
 * before the SOF stops initiating token packet transactions. This register must be
 * set to a value that ensures that other packets are not actively being
 * transmitted when the SOF time counts to zero. When the SOF counter reaches the
 * threshold value, no more tokens are transmitted until after the SOF has been
 * transmitted. The value programmed into the threshold register must reserve enough
 * time to ensure the worst case transaction completes. In general the worst case
 * transaction is an IN token followed by a data packet from the target followed by
 * the response from the host. The actual time required is a function of the
 * maximum packet size on the bus. Typical values for the SOF threshold are: 64-byte
 * packets=74; 32-byte packets=42; 16-byte packets=26; 8-byte packets=18.
 */
/*!
 * @name Constants and macros for entire USB_SOFTHLD register
 */
/*@{*/
#define USB_RD_SOFTHLD(base)     (USB_SOFTHLD_REG(base))
#define USB_WR_SOFTHLD(base, value) (USB_SOFTHLD_REG(base) = (value))
#define USB_RMW_SOFTHLD(base, mask, value) (USB_WR_SOFTHLD(base, (USB_RD_SOFTHLD(base) & ~(mask)) | (value)))
#define USB_SET_SOFTHLD(base, value) (BME_OR8(&USB_SOFTHLD_REG(base), (uint8_t)(value)))
#define USB_CLR_SOFTHLD(base, value) (BME_AND8(&USB_SOFTHLD_REG(base), (uint8_t)(~(value))))
#define USB_TOG_SOFTHLD(base, value) (BME_XOR8(&USB_SOFTHLD_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * USB_BDTPAGE2 - BDT Page Register 2
 ******************************************************************************/

/*!
 * @brief USB_BDTPAGE2 - BDT Page Register 2 (RW)
 *
 * Reset value: 0x00U
 *
 * Contains an 8-bit value used to compute the address where the current Buffer
 * Descriptor Table (BDT) resides in system memory. See Buffer Descriptor Table.
 */
/*!
 * @name Constants and macros for entire USB_BDTPAGE2 register
 */
/*@{*/
#define USB_RD_BDTPAGE2(base)    (USB_BDTPAGE2_REG(base))
#define USB_WR_BDTPAGE2(base, value) (USB_BDTPAGE2_REG(base) = (value))
#define USB_RMW_BDTPAGE2(base, mask, value) (USB_WR_BDTPAGE2(base, (USB_RD_BDTPAGE2(base) & ~(mask)) | (value)))
#define USB_SET_BDTPAGE2(base, value) (BME_OR8(&USB_BDTPAGE2_REG(base), (uint8_t)(value)))
#define USB_CLR_BDTPAGE2(base, value) (BME_AND8(&USB_BDTPAGE2_REG(base), (uint8_t)(~(value))))
#define USB_TOG_BDTPAGE2(base, value) (BME_XOR8(&USB_BDTPAGE2_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * USB_BDTPAGE3 - BDT Page Register 3
 ******************************************************************************/

/*!
 * @brief USB_BDTPAGE3 - BDT Page Register 3 (RW)
 *
 * Reset value: 0x00U
 *
 * Contains an 8-bit value used to compute the address where the current Buffer
 * Descriptor Table (BDT) resides in system memory. See Buffer Descriptor Table.
 */
/*!
 * @name Constants and macros for entire USB_BDTPAGE3 register
 */
/*@{*/
#define USB_RD_BDTPAGE3(base)    (USB_BDTPAGE3_REG(base))
#define USB_WR_BDTPAGE3(base, value) (USB_BDTPAGE3_REG(base) = (value))
#define USB_RMW_BDTPAGE3(base, mask, value) (USB_WR_BDTPAGE3(base, (USB_RD_BDTPAGE3(base) & ~(mask)) | (value)))
#define USB_SET_BDTPAGE3(base, value) (BME_OR8(&USB_BDTPAGE3_REG(base), (uint8_t)(value)))
#define USB_CLR_BDTPAGE3(base, value) (BME_AND8(&USB_BDTPAGE3_REG(base), (uint8_t)(~(value))))
#define USB_TOG_BDTPAGE3(base, value) (BME_XOR8(&USB_BDTPAGE3_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * USB_ENDPT - Endpoint Control register
 ******************************************************************************/

/*!
 * @brief USB_ENDPT - Endpoint Control register (RW)
 *
 * Reset value: 0x00U
 *
 * Contains the endpoint control bits for each of the 16 endpoints available
 * within the USB module for a decoded address. The format for these registers is
 * shown in the following figure. Endpoint 0 (ENDPT0) is associated with control
 * pipe 0, which is required for all USB functions. Therefore, after a USBRST
 * interrupt occurs the processor core should set ENDPT0 to contain 0x0D. In Host mode
 * ENDPT0 is used to determine the handshake, retry and low speed
 * characteristics of the host transfer. For Control, Bulk and Interrupt transfers, the EPHSHK
 * bit should be 1. For Isochronous transfers it should be 0. Common values to
 * use for ENDPT0 in host mode are 0x4D for Control, Bulk, and Interrupt transfers,
 * and 0x4C for Isochronous transfers. The three bits EPCTLDIS, EPRXEN, and
 * EPTXEN define if an endpoint is enabled and define the direction of the endpoint.
 * The endpoint enable/direction control is defined in the following table.
 * Endpoint enable and direction control EPCTLDIS EPRXEN EPTXEN Endpoint
 * enable/direction control X 0 0 Disable endpoint X 0 1 Enable endpoint for Tx transfers only
 * X 1 0 Enable endpoint for Rx transfers only 1 1 1 Enable endpoint for Rx and
 * Tx transfers 0 1 1 Enable Endpoint for RX and TX as well as control (SETUP)
 * transfers.
 */
/*!
 * @name Constants and macros for entire USB_ENDPT register
 */
/*@{*/
#define USB_RD_ENDPT(base, index) (USB_ENDPT_REG(base, index))
#define USB_WR_ENDPT(base, index, value) (USB_ENDPT_REG(base, index) = (value))
#define USB_RMW_ENDPT(base, index, mask, value) (USB_WR_ENDPT(base, index, (USB_RD_ENDPT(base, index) & ~(mask)) | (value)))
#define USB_SET_ENDPT(base, index, value) (BME_OR8(&USB_ENDPT_REG(base, index), (uint8_t)(value)))
#define USB_CLR_ENDPT(base, index, value) (BME_AND8(&USB_ENDPT_REG(base, index), (uint8_t)(~(value))))
#define USB_TOG_ENDPT(base, index, value) (BME_XOR8(&USB_ENDPT_REG(base, index), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USB_ENDPT bitfields
 */

/*!
 * @name Register USB_ENDPT, field EPHSHK[0] (RW)
 *
 * When set this bit enables an endpoint to perform handshaking during a
 * transaction to this endpoint. This bit is generally 1 unless the endpoint is
 * Isochronous.
 */
/*@{*/
/*! @brief Read current value of the USB_ENDPT_EPHSHK field. */
#define USB_RD_ENDPT_EPHSHK(base, index) ((USB_ENDPT_REG(base, index) & USB_ENDPT_EPHSHK_MASK) >> USB_ENDPT_EPHSHK_SHIFT)
#define USB_BRD_ENDPT_EPHSHK(base, index) (BME_UBFX8(&USB_ENDPT_REG(base, index), USB_ENDPT_EPHSHK_SHIFT, USB_ENDPT_EPHSHK_WIDTH))

/*! @brief Set the EPHSHK field to a new value. */
#define USB_WR_ENDPT_EPHSHK(base, index, value) (USB_RMW_ENDPT(base, index, USB_ENDPT_EPHSHK_MASK, USB_ENDPT_EPHSHK(value)))
#define USB_BWR_ENDPT_EPHSHK(base, index, value) (BME_BFI8(&USB_ENDPT_REG(base, index), ((uint8_t)(value) << USB_ENDPT_EPHSHK_SHIFT), USB_ENDPT_EPHSHK_SHIFT, USB_ENDPT_EPHSHK_WIDTH))
/*@}*/

/*!
 * @name Register USB_ENDPT, field EPSTALL[1] (RW)
 *
 * When set this bit indicates that the endpoint is called. This bit has
 * priority over all other control bits in the EndPoint Enable Register, but it is only
 * valid if EPTXEN=1 or EPRXEN=1. Any access to this endpoint causes the USB
 * Module to return a STALL handshake. After an endpoint is stalled it requires
 * intervention from the Host Controller.
 */
/*@{*/
/*! @brief Read current value of the USB_ENDPT_EPSTALL field. */
#define USB_RD_ENDPT_EPSTALL(base, index) ((USB_ENDPT_REG(base, index) & USB_ENDPT_EPSTALL_MASK) >> USB_ENDPT_EPSTALL_SHIFT)
#define USB_BRD_ENDPT_EPSTALL(base, index) (BME_UBFX8(&USB_ENDPT_REG(base, index), USB_ENDPT_EPSTALL_SHIFT, USB_ENDPT_EPSTALL_WIDTH))

/*! @brief Set the EPSTALL field to a new value. */
#define USB_WR_ENDPT_EPSTALL(base, index, value) (USB_RMW_ENDPT(base, index, USB_ENDPT_EPSTALL_MASK, USB_ENDPT_EPSTALL(value)))
#define USB_BWR_ENDPT_EPSTALL(base, index, value) (BME_BFI8(&USB_ENDPT_REG(base, index), ((uint8_t)(value) << USB_ENDPT_EPSTALL_SHIFT), USB_ENDPT_EPSTALL_SHIFT, USB_ENDPT_EPSTALL_WIDTH))
/*@}*/

/*!
 * @name Register USB_ENDPT, field EPTXEN[2] (RW)
 *
 * This bit, when set, enables the endpoint for TX transfers. See
 */
/*@{*/
/*! @brief Read current value of the USB_ENDPT_EPTXEN field. */
#define USB_RD_ENDPT_EPTXEN(base, index) ((USB_ENDPT_REG(base, index) & USB_ENDPT_EPTXEN_MASK) >> USB_ENDPT_EPTXEN_SHIFT)
#define USB_BRD_ENDPT_EPTXEN(base, index) (BME_UBFX8(&USB_ENDPT_REG(base, index), USB_ENDPT_EPTXEN_SHIFT, USB_ENDPT_EPTXEN_WIDTH))

/*! @brief Set the EPTXEN field to a new value. */
#define USB_WR_ENDPT_EPTXEN(base, index, value) (USB_RMW_ENDPT(base, index, USB_ENDPT_EPTXEN_MASK, USB_ENDPT_EPTXEN(value)))
#define USB_BWR_ENDPT_EPTXEN(base, index, value) (BME_BFI8(&USB_ENDPT_REG(base, index), ((uint8_t)(value) << USB_ENDPT_EPTXEN_SHIFT), USB_ENDPT_EPTXEN_SHIFT, USB_ENDPT_EPTXEN_WIDTH))
/*@}*/

/*!
 * @name Register USB_ENDPT, field EPRXEN[3] (RW)
 *
 * This bit, when set, enables the endpoint for RX transfers. See
 */
/*@{*/
/*! @brief Read current value of the USB_ENDPT_EPRXEN field. */
#define USB_RD_ENDPT_EPRXEN(base, index) ((USB_ENDPT_REG(base, index) & USB_ENDPT_EPRXEN_MASK) >> USB_ENDPT_EPRXEN_SHIFT)
#define USB_BRD_ENDPT_EPRXEN(base, index) (BME_UBFX8(&USB_ENDPT_REG(base, index), USB_ENDPT_EPRXEN_SHIFT, USB_ENDPT_EPRXEN_WIDTH))

/*! @brief Set the EPRXEN field to a new value. */
#define USB_WR_ENDPT_EPRXEN(base, index, value) (USB_RMW_ENDPT(base, index, USB_ENDPT_EPRXEN_MASK, USB_ENDPT_EPRXEN(value)))
#define USB_BWR_ENDPT_EPRXEN(base, index, value) (BME_BFI8(&USB_ENDPT_REG(base, index), ((uint8_t)(value) << USB_ENDPT_EPRXEN_SHIFT), USB_ENDPT_EPRXEN_SHIFT, USB_ENDPT_EPRXEN_WIDTH))
/*@}*/

/*!
 * @name Register USB_ENDPT, field EPCTLDIS[4] (RW)
 *
 * This bit, when set, disables control (SETUP) transfers. When cleared, control
 * transfers are enabled. This applies if and only if the EPRXEN and EPTXEN bits
 * are also set. See
 */
/*@{*/
/*! @brief Read current value of the USB_ENDPT_EPCTLDIS field. */
#define USB_RD_ENDPT_EPCTLDIS(base, index) ((USB_ENDPT_REG(base, index) & USB_ENDPT_EPCTLDIS_MASK) >> USB_ENDPT_EPCTLDIS_SHIFT)
#define USB_BRD_ENDPT_EPCTLDIS(base, index) (BME_UBFX8(&USB_ENDPT_REG(base, index), USB_ENDPT_EPCTLDIS_SHIFT, USB_ENDPT_EPCTLDIS_WIDTH))

/*! @brief Set the EPCTLDIS field to a new value. */
#define USB_WR_ENDPT_EPCTLDIS(base, index, value) (USB_RMW_ENDPT(base, index, USB_ENDPT_EPCTLDIS_MASK, USB_ENDPT_EPCTLDIS(value)))
#define USB_BWR_ENDPT_EPCTLDIS(base, index, value) (BME_BFI8(&USB_ENDPT_REG(base, index), ((uint8_t)(value) << USB_ENDPT_EPCTLDIS_SHIFT), USB_ENDPT_EPCTLDIS_SHIFT, USB_ENDPT_EPCTLDIS_WIDTH))
/*@}*/

/*!
 * @name Register USB_ENDPT, field RETRYDIS[6] (RW)
 *
 * This is a Host mode only bit and is present in the control register for
 * endpoint 0 (ENDPT0) only. When set this bit causes the host to not retry NAK'ed
 * (Negative Acknowledgement) transactions. When a transaction is NAKed, the BDT PID
 * field is updated with the NAK PID, and the TOKEN_DNE interrupt is set. When
 * this bit is cleared, NAKed transactions are retried in hardware. This bit must
 * be set when the host is attempting to poll an interrupt endpoint.
 */
/*@{*/
/*! @brief Read current value of the USB_ENDPT_RETRYDIS field. */
#define USB_RD_ENDPT_RETRYDIS(base, index) ((USB_ENDPT_REG(base, index) & USB_ENDPT_RETRYDIS_MASK) >> USB_ENDPT_RETRYDIS_SHIFT)
#define USB_BRD_ENDPT_RETRYDIS(base, index) (BME_UBFX8(&USB_ENDPT_REG(base, index), USB_ENDPT_RETRYDIS_SHIFT, USB_ENDPT_RETRYDIS_WIDTH))

/*! @brief Set the RETRYDIS field to a new value. */
#define USB_WR_ENDPT_RETRYDIS(base, index, value) (USB_RMW_ENDPT(base, index, USB_ENDPT_RETRYDIS_MASK, USB_ENDPT_RETRYDIS(value)))
#define USB_BWR_ENDPT_RETRYDIS(base, index, value) (BME_BFI8(&USB_ENDPT_REG(base, index), ((uint8_t)(value) << USB_ENDPT_RETRYDIS_SHIFT), USB_ENDPT_RETRYDIS_SHIFT, USB_ENDPT_RETRYDIS_WIDTH))
/*@}*/

/*!
 * @name Register USB_ENDPT, field HOSTWOHUB[7] (RW)
 *
 * Host without a hub This is a Host mode only field and is present in the
 * control register for endpoint 0 (ENDPT0) only.
 *
 * Values:
 * - 0b0 - Low-speed device connected to Host through a hub. PRE_PID will be
 *     generated as required.
 * - 0b1 - Low-speed device directly connected. No hub, or no low-speed device
 *     attached.
 */
/*@{*/
/*! @brief Read current value of the USB_ENDPT_HOSTWOHUB field. */
#define USB_RD_ENDPT_HOSTWOHUB(base, index) ((USB_ENDPT_REG(base, index) & USB_ENDPT_HOSTWOHUB_MASK) >> USB_ENDPT_HOSTWOHUB_SHIFT)
#define USB_BRD_ENDPT_HOSTWOHUB(base, index) (BME_UBFX8(&USB_ENDPT_REG(base, index), USB_ENDPT_HOSTWOHUB_SHIFT, USB_ENDPT_HOSTWOHUB_WIDTH))

/*! @brief Set the HOSTWOHUB field to a new value. */
#define USB_WR_ENDPT_HOSTWOHUB(base, index, value) (USB_RMW_ENDPT(base, index, USB_ENDPT_HOSTWOHUB_MASK, USB_ENDPT_HOSTWOHUB(value)))
#define USB_BWR_ENDPT_HOSTWOHUB(base, index, value) (BME_BFI8(&USB_ENDPT_REG(base, index), ((uint8_t)(value) << USB_ENDPT_HOSTWOHUB_SHIFT), USB_ENDPT_HOSTWOHUB_SHIFT, USB_ENDPT_HOSTWOHUB_WIDTH))
/*@}*/

/*******************************************************************************
 * USB_USBCTRL - USB Control register
 ******************************************************************************/

/*!
 * @brief USB_USBCTRL - USB Control register (RW)
 *
 * Reset value: 0xC0U
 */
/*!
 * @name Constants and macros for entire USB_USBCTRL register
 */
/*@{*/
#define USB_RD_USBCTRL(base)     (USB_USBCTRL_REG(base))
#define USB_WR_USBCTRL(base, value) (USB_USBCTRL_REG(base) = (value))
#define USB_RMW_USBCTRL(base, mask, value) (USB_WR_USBCTRL(base, (USB_RD_USBCTRL(base) & ~(mask)) | (value)))
#define USB_SET_USBCTRL(base, value) (BME_OR8(&USB_USBCTRL_REG(base), (uint8_t)(value)))
#define USB_CLR_USBCTRL(base, value) (BME_AND8(&USB_USBCTRL_REG(base), (uint8_t)(~(value))))
#define USB_TOG_USBCTRL(base, value) (BME_XOR8(&USB_USBCTRL_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USB_USBCTRL bitfields
 */

/*!
 * @name Register USB_USBCTRL, field UARTSEL[4] (RW)
 *
 * Selects USB signals to be used as UART signals.
 *
 * Values:
 * - 0b0 - USB signals not used as UART signals.
 * - 0b1 - USB signals used as UART signals.
 */
/*@{*/
/*! @brief Read current value of the USB_USBCTRL_UARTSEL field. */
#define USB_RD_USBCTRL_UARTSEL(base) ((USB_USBCTRL_REG(base) & USB_USBCTRL_UARTSEL_MASK) >> USB_USBCTRL_UARTSEL_SHIFT)
#define USB_BRD_USBCTRL_UARTSEL(base) (BME_UBFX8(&USB_USBCTRL_REG(base), USB_USBCTRL_UARTSEL_SHIFT, USB_USBCTRL_UARTSEL_WIDTH))

/*! @brief Set the UARTSEL field to a new value. */
#define USB_WR_USBCTRL_UARTSEL(base, value) (USB_RMW_USBCTRL(base, USB_USBCTRL_UARTSEL_MASK, USB_USBCTRL_UARTSEL(value)))
#define USB_BWR_USBCTRL_UARTSEL(base, value) (BME_BFI8(&USB_USBCTRL_REG(base), ((uint8_t)(value) << USB_USBCTRL_UARTSEL_SHIFT), USB_USBCTRL_UARTSEL_SHIFT, USB_USBCTRL_UARTSEL_WIDTH))
/*@}*/

/*!
 * @name Register USB_USBCTRL, field UARTCHLS[5] (RW)
 *
 * This field is valid only when USB signals are selected to be used as UART
 * signals.
 *
 * Values:
 * - 0b0 - USB DP/DM signals used as UART TX/RX.
 * - 0b1 - USB DP/DM signals used as UART RX/TX.
 */
/*@{*/
/*! @brief Read current value of the USB_USBCTRL_UARTCHLS field. */
#define USB_RD_USBCTRL_UARTCHLS(base) ((USB_USBCTRL_REG(base) & USB_USBCTRL_UARTCHLS_MASK) >> USB_USBCTRL_UARTCHLS_SHIFT)
#define USB_BRD_USBCTRL_UARTCHLS(base) (BME_UBFX8(&USB_USBCTRL_REG(base), USB_USBCTRL_UARTCHLS_SHIFT, USB_USBCTRL_UARTCHLS_WIDTH))

/*! @brief Set the UARTCHLS field to a new value. */
#define USB_WR_USBCTRL_UARTCHLS(base, value) (USB_RMW_USBCTRL(base, USB_USBCTRL_UARTCHLS_MASK, USB_USBCTRL_UARTCHLS(value)))
#define USB_BWR_USBCTRL_UARTCHLS(base, value) (BME_BFI8(&USB_USBCTRL_REG(base), ((uint8_t)(value) << USB_USBCTRL_UARTCHLS_SHIFT), USB_USBCTRL_UARTCHLS_SHIFT, USB_USBCTRL_UARTCHLS_WIDTH))
/*@}*/

/*!
 * @name Register USB_USBCTRL, field PDE[6] (RW)
 *
 * Enables the weak pulldowns on the USB transceiver.
 *
 * Values:
 * - 0b0 - Weak pulldowns are disabled on D+ and D-.
 * - 0b1 - Weak pulldowns are enabled on D+ and D-.
 */
/*@{*/
/*! @brief Read current value of the USB_USBCTRL_PDE field. */
#define USB_RD_USBCTRL_PDE(base) ((USB_USBCTRL_REG(base) & USB_USBCTRL_PDE_MASK) >> USB_USBCTRL_PDE_SHIFT)
#define USB_BRD_USBCTRL_PDE(base) (BME_UBFX8(&USB_USBCTRL_REG(base), USB_USBCTRL_PDE_SHIFT, USB_USBCTRL_PDE_WIDTH))

/*! @brief Set the PDE field to a new value. */
#define USB_WR_USBCTRL_PDE(base, value) (USB_RMW_USBCTRL(base, USB_USBCTRL_PDE_MASK, USB_USBCTRL_PDE(value)))
#define USB_BWR_USBCTRL_PDE(base, value) (BME_BFI8(&USB_USBCTRL_REG(base), ((uint8_t)(value) << USB_USBCTRL_PDE_SHIFT), USB_USBCTRL_PDE_SHIFT, USB_USBCTRL_PDE_WIDTH))
/*@}*/

/*!
 * @name Register USB_USBCTRL, field SUSP[7] (RW)
 *
 * Places the USB transceiver into the suspend state.
 *
 * Values:
 * - 0b0 - USB transceiver is not in suspend state.
 * - 0b1 - USB transceiver is in suspend state.
 */
/*@{*/
/*! @brief Read current value of the USB_USBCTRL_SUSP field. */
#define USB_RD_USBCTRL_SUSP(base) ((USB_USBCTRL_REG(base) & USB_USBCTRL_SUSP_MASK) >> USB_USBCTRL_SUSP_SHIFT)
#define USB_BRD_USBCTRL_SUSP(base) (BME_UBFX8(&USB_USBCTRL_REG(base), USB_USBCTRL_SUSP_SHIFT, USB_USBCTRL_SUSP_WIDTH))

/*! @brief Set the SUSP field to a new value. */
#define USB_WR_USBCTRL_SUSP(base, value) (USB_RMW_USBCTRL(base, USB_USBCTRL_SUSP_MASK, USB_USBCTRL_SUSP(value)))
#define USB_BWR_USBCTRL_SUSP(base, value) (BME_BFI8(&USB_USBCTRL_REG(base), ((uint8_t)(value) << USB_USBCTRL_SUSP_SHIFT), USB_USBCTRL_SUSP_SHIFT, USB_USBCTRL_SUSP_WIDTH))
/*@}*/

/*******************************************************************************
 * USB_OBSERVE - USB OTG Observe register
 ******************************************************************************/

/*!
 * @brief USB_OBSERVE - USB OTG Observe register (RO)
 *
 * Reset value: 0x50U
 *
 * Provides visibility on the state of the pull-ups and pull-downs at the
 * transceiver. Useful when interfacing to an external OTG control module via a serial
 * interface.
 */
/*!
 * @name Constants and macros for entire USB_OBSERVE register
 */
/*@{*/
#define USB_RD_OBSERVE(base)     (USB_OBSERVE_REG(base))
/*@}*/

/*
 * Constants & macros for individual USB_OBSERVE bitfields
 */

/*!
 * @name Register USB_OBSERVE, field DMPD[4] (RO)
 *
 * Provides observability of the D- Pulldown enable at the USB transceiver.
 *
 * Values:
 * - 0b0 - D- pulldown disabled.
 * - 0b1 - D- pulldown enabled.
 */
/*@{*/
/*! @brief Read current value of the USB_OBSERVE_DMPD field. */
#define USB_RD_OBSERVE_DMPD(base) ((USB_OBSERVE_REG(base) & USB_OBSERVE_DMPD_MASK) >> USB_OBSERVE_DMPD_SHIFT)
#define USB_BRD_OBSERVE_DMPD(base) (BME_UBFX8(&USB_OBSERVE_REG(base), USB_OBSERVE_DMPD_SHIFT, USB_OBSERVE_DMPD_WIDTH))
/*@}*/

/*!
 * @name Register USB_OBSERVE, field DPPD[6] (RO)
 *
 * Provides observability of the D+ Pulldown enable at the USB transceiver.
 *
 * Values:
 * - 0b0 - D+ pulldown disabled.
 * - 0b1 - D+ pulldown enabled.
 */
/*@{*/
/*! @brief Read current value of the USB_OBSERVE_DPPD field. */
#define USB_RD_OBSERVE_DPPD(base) ((USB_OBSERVE_REG(base) & USB_OBSERVE_DPPD_MASK) >> USB_OBSERVE_DPPD_SHIFT)
#define USB_BRD_OBSERVE_DPPD(base) (BME_UBFX8(&USB_OBSERVE_REG(base), USB_OBSERVE_DPPD_SHIFT, USB_OBSERVE_DPPD_WIDTH))
/*@}*/

/*!
 * @name Register USB_OBSERVE, field DPPU[7] (RO)
 *
 * Provides observability of the D+ Pullup enable at the USB transceiver.
 *
 * Values:
 * - 0b0 - D+ pullup disabled.
 * - 0b1 - D+ pullup enabled.
 */
/*@{*/
/*! @brief Read current value of the USB_OBSERVE_DPPU field. */
#define USB_RD_OBSERVE_DPPU(base) ((USB_OBSERVE_REG(base) & USB_OBSERVE_DPPU_MASK) >> USB_OBSERVE_DPPU_SHIFT)
#define USB_BRD_OBSERVE_DPPU(base) (BME_UBFX8(&USB_OBSERVE_REG(base), USB_OBSERVE_DPPU_SHIFT, USB_OBSERVE_DPPU_WIDTH))
/*@}*/

/*******************************************************************************
 * USB_CONTROL - USB OTG Control register
 ******************************************************************************/

/*!
 * @brief USB_CONTROL - USB OTG Control register (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire USB_CONTROL register
 */
/*@{*/
#define USB_RD_CONTROL(base)     (USB_CONTROL_REG(base))
#define USB_WR_CONTROL(base, value) (USB_CONTROL_REG(base) = (value))
#define USB_RMW_CONTROL(base, mask, value) (USB_WR_CONTROL(base, (USB_RD_CONTROL(base) & ~(mask)) | (value)))
#define USB_SET_CONTROL(base, value) (BME_OR8(&USB_CONTROL_REG(base), (uint8_t)(value)))
#define USB_CLR_CONTROL(base, value) (BME_AND8(&USB_CONTROL_REG(base), (uint8_t)(~(value))))
#define USB_TOG_CONTROL(base, value) (BME_XOR8(&USB_CONTROL_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USB_CONTROL bitfields
 */

/*!
 * @name Register USB_CONTROL, field DPPULLUPNONOTG[4] (RW)
 *
 * Provides control of the DP Pullup in USBOTG, if USB is configured in non-OTG
 * device mode.
 *
 * Values:
 * - 0b0 - DP Pullup in non-OTG device mode is not enabled.
 * - 0b1 - DP Pullup in non-OTG device mode is enabled.
 */
/*@{*/
/*! @brief Read current value of the USB_CONTROL_DPPULLUPNONOTG field. */
#define USB_RD_CONTROL_DPPULLUPNONOTG(base) ((USB_CONTROL_REG(base) & USB_CONTROL_DPPULLUPNONOTG_MASK) >> USB_CONTROL_DPPULLUPNONOTG_SHIFT)
#define USB_BRD_CONTROL_DPPULLUPNONOTG(base) (BME_UBFX8(&USB_CONTROL_REG(base), USB_CONTROL_DPPULLUPNONOTG_SHIFT, USB_CONTROL_DPPULLUPNONOTG_WIDTH))

/*! @brief Set the DPPULLUPNONOTG field to a new value. */
#define USB_WR_CONTROL_DPPULLUPNONOTG(base, value) (USB_RMW_CONTROL(base, USB_CONTROL_DPPULLUPNONOTG_MASK, USB_CONTROL_DPPULLUPNONOTG(value)))
#define USB_BWR_CONTROL_DPPULLUPNONOTG(base, value) (BME_BFI8(&USB_CONTROL_REG(base), ((uint8_t)(value) << USB_CONTROL_DPPULLUPNONOTG_SHIFT), USB_CONTROL_DPPULLUPNONOTG_SHIFT, USB_CONTROL_DPPULLUPNONOTG_WIDTH))
/*@}*/

/*******************************************************************************
 * USB_USBTRC0 - USB Transceiver Control register 0
 ******************************************************************************/

/*!
 * @brief USB_USBTRC0 - USB Transceiver Control register 0 (RW)
 *
 * Reset value: 0x00U
 *
 * Includes signals for basic operation of the on-chip USB Full Speed
 * transceiver and configuration of the USB data connection that are not otherwise included
 * in the USB Full Speed controller registers.
 */
/*!
 * @name Constants and macros for entire USB_USBTRC0 register
 */
/*@{*/
#define USB_RD_USBTRC0(base)     (USB_USBTRC0_REG(base))
#define USB_WR_USBTRC0(base, value) (USB_USBTRC0_REG(base) = (value))
#define USB_RMW_USBTRC0(base, mask, value) (USB_WR_USBTRC0(base, (USB_RD_USBTRC0(base) & ~(mask)) | (value)))
#define USB_SET_USBTRC0(base, value) (BME_OR8(&USB_USBTRC0_REG(base), (uint8_t)(value)))
#define USB_CLR_USBTRC0(base, value) (BME_AND8(&USB_USBTRC0_REG(base), (uint8_t)(~(value))))
#define USB_TOG_USBTRC0(base, value) (BME_XOR8(&USB_USBTRC0_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USB_USBTRC0 bitfields
 */

/*!
 * @name Register USB_USBTRC0, field USB_RESUME_INT[0] (RO)
 *
 * Values:
 * - 0b0 - No interrupt was generated.
 * - 0b1 - Interrupt was generated because of the USB asynchronous interrupt.
 */
/*@{*/
/*! @brief Read current value of the USB_USBTRC0_USB_RESUME_INT field. */
#define USB_RD_USBTRC0_USB_RESUME_INT(base) ((USB_USBTRC0_REG(base) & USB_USBTRC0_USB_RESUME_INT_MASK) >> USB_USBTRC0_USB_RESUME_INT_SHIFT)
#define USB_BRD_USBTRC0_USB_RESUME_INT(base) (BME_UBFX8(&USB_USBTRC0_REG(base), USB_USBTRC0_USB_RESUME_INT_SHIFT, USB_USBTRC0_USB_RESUME_INT_WIDTH))
/*@}*/

/*!
 * @name Register USB_USBTRC0, field SYNC_DET[1] (RO)
 *
 * Values:
 * - 0b0 - Synchronous interrupt has not been detected.
 * - 0b1 - Synchronous interrupt has been detected.
 */
/*@{*/
/*! @brief Read current value of the USB_USBTRC0_SYNC_DET field. */
#define USB_RD_USBTRC0_SYNC_DET(base) ((USB_USBTRC0_REG(base) & USB_USBTRC0_SYNC_DET_MASK) >> USB_USBTRC0_SYNC_DET_SHIFT)
#define USB_BRD_USBTRC0_SYNC_DET(base) (BME_UBFX8(&USB_USBTRC0_REG(base), USB_USBTRC0_SYNC_DET_SHIFT, USB_USBTRC0_SYNC_DET_WIDTH))
/*@}*/

/*!
 * @name Register USB_USBTRC0, field USB_CLK_RECOVERY_INT[2] (RO)
 *
 * This read-only field will be set to value high at 1'b1 when any of USB clock
 * recovery interrupt conditions are detected and those interrupts are unmasked.
 * For customer use the only unmasked USB clock recovery interrupt condition
 * results from an overflow of the frequency trim setting values indicating that the
 * frequency trim calculated is out of the adjustment range of the IRC48M output
 * clock. To clear this bit after it has been set, Write 0xFF to register
 * USB_CLK_RECOVER_INT_STATUS.
 */
/*@{*/
/*! @brief Read current value of the USB_USBTRC0_USB_CLK_RECOVERY_INT field. */
#define USB_RD_USBTRC0_USB_CLK_RECOVERY_INT(base) ((USB_USBTRC0_REG(base) & USB_USBTRC0_USB_CLK_RECOVERY_INT_MASK) >> USB_USBTRC0_USB_CLK_RECOVERY_INT_SHIFT)
#define USB_BRD_USBTRC0_USB_CLK_RECOVERY_INT(base) (BME_UBFX8(&USB_USBTRC0_REG(base), USB_USBTRC0_USB_CLK_RECOVERY_INT_SHIFT, USB_USBTRC0_USB_CLK_RECOVERY_INT_WIDTH))
/*@}*/

/*!
 * @name Register USB_USBTRC0, field VREDG_DET[3] (RW)
 *
 * Values:
 * - 0b0 - VBUS rising edge interrupt has not been detected.
 * - 0b1 - VBUS rising edge interrupt has been detected.
 */
/*@{*/
/*! @brief Read current value of the USB_USBTRC0_VREDG_DET field. */
#define USB_RD_USBTRC0_VREDG_DET(base) ((USB_USBTRC0_REG(base) & USB_USBTRC0_VREDG_DET_MASK) >> USB_USBTRC0_VREDG_DET_SHIFT)
#define USB_BRD_USBTRC0_VREDG_DET(base) (BME_UBFX8(&USB_USBTRC0_REG(base), USB_USBTRC0_VREDG_DET_SHIFT, USB_USBTRC0_VREDG_DET_WIDTH))

/*! @brief Set the VREDG_DET field to a new value. */
#define USB_WR_USBTRC0_VREDG_DET(base, value) (USB_RMW_USBTRC0(base, USB_USBTRC0_VREDG_DET_MASK, USB_USBTRC0_VREDG_DET(value)))
#define USB_BWR_USBTRC0_VREDG_DET(base, value) (BME_BFI8(&USB_USBTRC0_REG(base), ((uint8_t)(value) << USB_USBTRC0_VREDG_DET_SHIFT), USB_USBTRC0_VREDG_DET_SHIFT, USB_USBTRC0_VREDG_DET_WIDTH))
/*@}*/

/*!
 * @name Register USB_USBTRC0, field VFEDG_DET[4] (RW)
 *
 * Values:
 * - 0b0 - VBUS falling edge interrupt has not been detected.
 * - 0b1 - VBUS falling edge interrupt has been detected.
 */
/*@{*/
/*! @brief Read current value of the USB_USBTRC0_VFEDG_DET field. */
#define USB_RD_USBTRC0_VFEDG_DET(base) ((USB_USBTRC0_REG(base) & USB_USBTRC0_VFEDG_DET_MASK) >> USB_USBTRC0_VFEDG_DET_SHIFT)
#define USB_BRD_USBTRC0_VFEDG_DET(base) (BME_UBFX8(&USB_USBTRC0_REG(base), USB_USBTRC0_VFEDG_DET_SHIFT, USB_USBTRC0_VFEDG_DET_WIDTH))

/*! @brief Set the VFEDG_DET field to a new value. */
#define USB_WR_USBTRC0_VFEDG_DET(base, value) (USB_RMW_USBTRC0(base, USB_USBTRC0_VFEDG_DET_MASK, USB_USBTRC0_VFEDG_DET(value)))
#define USB_BWR_USBTRC0_VFEDG_DET(base, value) (BME_BFI8(&USB_USBTRC0_REG(base), ((uint8_t)(value) << USB_USBTRC0_VFEDG_DET_SHIFT), USB_USBTRC0_VFEDG_DET_SHIFT, USB_USBTRC0_VFEDG_DET_WIDTH))
/*@}*/

/*!
 * @name Register USB_USBTRC0, field USBRESMEN[5] (RW)
 *
 * This bit, when set, allows the USB module to send an asynchronous wakeup
 * event to the MCU upon detection of resume signaling on the USB bus. The MCU then
 * re-enables clocks to the USB module. It is used for low-power suspend mode when
 * USB module clocks are stopped or the USB transceiver is in Suspend mode.
 * Async wakeup only works in device mode.
 *
 * Values:
 * - 0b0 - USB asynchronous wakeup from suspend mode disabled.
 * - 0b1 - USB asynchronous wakeup from suspend mode enabled. The asynchronous
 *     resume interrupt differs from the synchronous resume interrupt in that it
 *     asynchronously detects K-state using the unfiltered state of the D+ and D-
 *     pins. This interrupt should only be enabled when the Transceiver is
 *     suspended.
 */
/*@{*/
/*! @brief Read current value of the USB_USBTRC0_USBRESMEN field. */
#define USB_RD_USBTRC0_USBRESMEN(base) ((USB_USBTRC0_REG(base) & USB_USBTRC0_USBRESMEN_MASK) >> USB_USBTRC0_USBRESMEN_SHIFT)
#define USB_BRD_USBTRC0_USBRESMEN(base) (BME_UBFX8(&USB_USBTRC0_REG(base), USB_USBTRC0_USBRESMEN_SHIFT, USB_USBTRC0_USBRESMEN_WIDTH))

/*! @brief Set the USBRESMEN field to a new value. */
#define USB_WR_USBTRC0_USBRESMEN(base, value) (USB_RMW_USBTRC0(base, USB_USBTRC0_USBRESMEN_MASK, USB_USBTRC0_USBRESMEN(value)))
#define USB_BWR_USBTRC0_USBRESMEN(base, value) (BME_BFI8(&USB_USBTRC0_REG(base), ((uint8_t)(value) << USB_USBTRC0_USBRESMEN_SHIFT), USB_USBTRC0_USBRESMEN_SHIFT, USB_USBTRC0_USBRESMEN_WIDTH))
/*@}*/

/*!
 * @name Register USB_USBTRC0, field USBRESET[7] (WO)
 *
 * Generates a hard reset to USBOTG. After this bit is set and the reset occurs,
 * this bit is automatically cleared. This bit is always read as zero. Wait two
 * USB clock cycles after setting this bit.
 *
 * Values:
 * - 0b0 - Normal USB module operation.
 * - 0b1 - Returns the USB module to its reset state.
 */
/*@{*/
/*! @brief Set the USBRESET field to a new value. */
#define USB_WR_USBTRC0_USBRESET(base, value) (USB_RMW_USBTRC0(base, USB_USBTRC0_USBRESET_MASK, USB_USBTRC0_USBRESET(value)))
#define USB_BWR_USBTRC0_USBRESET(base, value) (USB_WR_USBTRC0_USBRESET(base, value))
/*@}*/

/*******************************************************************************
 * USB_USBFRMADJUST - Frame Adjust Register
 ******************************************************************************/

/*!
 * @brief USB_USBFRMADJUST - Frame Adjust Register (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire USB_USBFRMADJUST register
 */
/*@{*/
#define USB_RD_USBFRMADJUST(base) (USB_USBFRMADJUST_REG(base))
#define USB_WR_USBFRMADJUST(base, value) (USB_USBFRMADJUST_REG(base) = (value))
#define USB_RMW_USBFRMADJUST(base, mask, value) (USB_WR_USBFRMADJUST(base, (USB_RD_USBFRMADJUST(base) & ~(mask)) | (value)))
#define USB_SET_USBFRMADJUST(base, value) (BME_OR8(&USB_USBFRMADJUST_REG(base), (uint8_t)(value)))
#define USB_CLR_USBFRMADJUST(base, value) (BME_AND8(&USB_USBFRMADJUST_REG(base), (uint8_t)(~(value))))
#define USB_TOG_USBFRMADJUST(base, value) (BME_XOR8(&USB_USBFRMADJUST_REG(base), (uint8_t)(value)))
/*@}*/

/*******************************************************************************
 * USB_MISCCTRL - Miscellaneous Control register
 ******************************************************************************/

/*!
 * @brief USB_MISCCTRL - Miscellaneous Control register (RW)
 *
 * Reset value: 0x00U
 */
/*!
 * @name Constants and macros for entire USB_MISCCTRL register
 */
/*@{*/
#define USB_RD_MISCCTRL(base)    (USB_MISCCTRL_REG(base))
#define USB_WR_MISCCTRL(base, value) (USB_MISCCTRL_REG(base) = (value))
#define USB_RMW_MISCCTRL(base, mask, value) (USB_WR_MISCCTRL(base, (USB_RD_MISCCTRL(base) & ~(mask)) | (value)))
#define USB_SET_MISCCTRL(base, value) (BME_OR8(&USB_MISCCTRL_REG(base), (uint8_t)(value)))
#define USB_CLR_MISCCTRL(base, value) (BME_AND8(&USB_MISCCTRL_REG(base), (uint8_t)(~(value))))
#define USB_TOG_MISCCTRL(base, value) (BME_XOR8(&USB_MISCCTRL_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USB_MISCCTRL bitfields
 */

/*!
 * @name Register USB_MISCCTRL, field SOFDYNTHLD[0] (RW)
 *
 * This field is only valid for Host mode, that is, CTL[HOSTMODEEN]=1.
 *
 * Values:
 * - 0b0 - SOF_TOK interrupt is set when byte times SOF threshold is reached.
 * - 0b1 - SOF_TOK interrupt is set when 8 byte times SOF threshold is reached
 *     or overstepped.
 */
/*@{*/
/*! @brief Read current value of the USB_MISCCTRL_SOFDYNTHLD field. */
#define USB_RD_MISCCTRL_SOFDYNTHLD(base) ((USB_MISCCTRL_REG(base) & USB_MISCCTRL_SOFDYNTHLD_MASK) >> USB_MISCCTRL_SOFDYNTHLD_SHIFT)
#define USB_BRD_MISCCTRL_SOFDYNTHLD(base) (BME_UBFX8(&USB_MISCCTRL_REG(base), USB_MISCCTRL_SOFDYNTHLD_SHIFT, USB_MISCCTRL_SOFDYNTHLD_WIDTH))

/*! @brief Set the SOFDYNTHLD field to a new value. */
#define USB_WR_MISCCTRL_SOFDYNTHLD(base, value) (USB_RMW_MISCCTRL(base, USB_MISCCTRL_SOFDYNTHLD_MASK, USB_MISCCTRL_SOFDYNTHLD(value)))
#define USB_BWR_MISCCTRL_SOFDYNTHLD(base, value) (BME_BFI8(&USB_MISCCTRL_REG(base), ((uint8_t)(value) << USB_MISCCTRL_SOFDYNTHLD_SHIFT), USB_MISCCTRL_SOFDYNTHLD_SHIFT, USB_MISCCTRL_SOFDYNTHLD_WIDTH))
/*@}*/

/*!
 * @name Register USB_MISCCTRL, field SOFBUSSET[1] (RW)
 *
 * This field is only valid for Host mode, that is, CTL[HOSTMODEEN]=1.
 *
 * Values:
 * - 0b0 - SOF_TOK interrupt is set according to SOF threshold value.
 * - 0b1 - SOF_TOK interrupt is set when SOF counter reaches 0.
 */
/*@{*/
/*! @brief Read current value of the USB_MISCCTRL_SOFBUSSET field. */
#define USB_RD_MISCCTRL_SOFBUSSET(base) ((USB_MISCCTRL_REG(base) & USB_MISCCTRL_SOFBUSSET_MASK) >> USB_MISCCTRL_SOFBUSSET_SHIFT)
#define USB_BRD_MISCCTRL_SOFBUSSET(base) (BME_UBFX8(&USB_MISCCTRL_REG(base), USB_MISCCTRL_SOFBUSSET_SHIFT, USB_MISCCTRL_SOFBUSSET_WIDTH))

/*! @brief Set the SOFBUSSET field to a new value. */
#define USB_WR_MISCCTRL_SOFBUSSET(base, value) (USB_RMW_MISCCTRL(base, USB_MISCCTRL_SOFBUSSET_MASK, USB_MISCCTRL_SOFBUSSET(value)))
#define USB_BWR_MISCCTRL_SOFBUSSET(base, value) (BME_BFI8(&USB_MISCCTRL_REG(base), ((uint8_t)(value) << USB_MISCCTRL_SOFBUSSET_SHIFT), USB_MISCCTRL_SOFBUSSET_SHIFT, USB_MISCCTRL_SOFBUSSET_WIDTH))
/*@}*/

/*!
 * @name Register USB_MISCCTRL, field OWNERRISODIS[2] (RW)
 *
 * This field is only valid for Peripheral mode, that is, CTL[HOSTMODEEN]=0.
 *
 * Values:
 * - 0b0 - OWN error detect for ISO IN / ISO OUT is not disabled.
 * - 0b1 - OWN error detect for ISO IN / ISO OUT is disabled.
 */
/*@{*/
/*! @brief Read current value of the USB_MISCCTRL_OWNERRISODIS field. */
#define USB_RD_MISCCTRL_OWNERRISODIS(base) ((USB_MISCCTRL_REG(base) & USB_MISCCTRL_OWNERRISODIS_MASK) >> USB_MISCCTRL_OWNERRISODIS_SHIFT)
#define USB_BRD_MISCCTRL_OWNERRISODIS(base) (BME_UBFX8(&USB_MISCCTRL_REG(base), USB_MISCCTRL_OWNERRISODIS_SHIFT, USB_MISCCTRL_OWNERRISODIS_WIDTH))

/*! @brief Set the OWNERRISODIS field to a new value. */
#define USB_WR_MISCCTRL_OWNERRISODIS(base, value) (USB_RMW_MISCCTRL(base, USB_MISCCTRL_OWNERRISODIS_MASK, USB_MISCCTRL_OWNERRISODIS(value)))
#define USB_BWR_MISCCTRL_OWNERRISODIS(base, value) (BME_BFI8(&USB_MISCCTRL_REG(base), ((uint8_t)(value) << USB_MISCCTRL_OWNERRISODIS_SHIFT), USB_MISCCTRL_OWNERRISODIS_SHIFT, USB_MISCCTRL_OWNERRISODIS_WIDTH))
/*@}*/

/*!
 * @name Register USB_MISCCTRL, field VREDG_EN[3] (RW)
 *
 * Values:
 * - 0b0 - VBUS rising edge interrupt disabled.
 * - 0b1 - VBUS rising edge interrupt enabled.
 */
/*@{*/
/*! @brief Read current value of the USB_MISCCTRL_VREDG_EN field. */
#define USB_RD_MISCCTRL_VREDG_EN(base) ((USB_MISCCTRL_REG(base) & USB_MISCCTRL_VREDG_EN_MASK) >> USB_MISCCTRL_VREDG_EN_SHIFT)
#define USB_BRD_MISCCTRL_VREDG_EN(base) (BME_UBFX8(&USB_MISCCTRL_REG(base), USB_MISCCTRL_VREDG_EN_SHIFT, USB_MISCCTRL_VREDG_EN_WIDTH))

/*! @brief Set the VREDG_EN field to a new value. */
#define USB_WR_MISCCTRL_VREDG_EN(base, value) (USB_RMW_MISCCTRL(base, USB_MISCCTRL_VREDG_EN_MASK, USB_MISCCTRL_VREDG_EN(value)))
#define USB_BWR_MISCCTRL_VREDG_EN(base, value) (BME_BFI8(&USB_MISCCTRL_REG(base), ((uint8_t)(value) << USB_MISCCTRL_VREDG_EN_SHIFT), USB_MISCCTRL_VREDG_EN_SHIFT, USB_MISCCTRL_VREDG_EN_WIDTH))
/*@}*/

/*!
 * @name Register USB_MISCCTRL, field VFEDG_EN[4] (RW)
 *
 * Values:
 * - 0b0 - VBUS falling edge interrupt disabled.
 * - 0b1 - VBUS falling edge interrupt enabled.
 */
/*@{*/
/*! @brief Read current value of the USB_MISCCTRL_VFEDG_EN field. */
#define USB_RD_MISCCTRL_VFEDG_EN(base) ((USB_MISCCTRL_REG(base) & USB_MISCCTRL_VFEDG_EN_MASK) >> USB_MISCCTRL_VFEDG_EN_SHIFT)
#define USB_BRD_MISCCTRL_VFEDG_EN(base) (BME_UBFX8(&USB_MISCCTRL_REG(base), USB_MISCCTRL_VFEDG_EN_SHIFT, USB_MISCCTRL_VFEDG_EN_WIDTH))

/*! @brief Set the VFEDG_EN field to a new value. */
#define USB_WR_MISCCTRL_VFEDG_EN(base, value) (USB_RMW_MISCCTRL(base, USB_MISCCTRL_VFEDG_EN_MASK, USB_MISCCTRL_VFEDG_EN(value)))
#define USB_BWR_MISCCTRL_VFEDG_EN(base, value) (BME_BFI8(&USB_MISCCTRL_REG(base), ((uint8_t)(value) << USB_MISCCTRL_VFEDG_EN_SHIFT), USB_MISCCTRL_VFEDG_EN_SHIFT, USB_MISCCTRL_VFEDG_EN_WIDTH))
/*@}*/

/*******************************************************************************
 * USB_CLK_RECOVER_CTRL - USB Clock recovery control
 ******************************************************************************/

/*!
 * @brief USB_CLK_RECOVER_CTRL - USB Clock recovery control (RW)
 *
 * Reset value: 0x00U
 *
 * Signals in this register control the crystal-less USB clock mode in which the
 * internal IRC48M oscillator is tuned to match the clock extracted from the
 * incoming USB data stream. The IRC48M internal oscillator module must be enabled
 * in register USB_CLK_RECOVER_IRC_EN for this mode.
 */
/*!
 * @name Constants and macros for entire USB_CLK_RECOVER_CTRL register
 */
/*@{*/
#define USB_RD_CLK_RECOVER_CTRL(base) (USB_CLK_RECOVER_CTRL_REG(base))
#define USB_WR_CLK_RECOVER_CTRL(base, value) (USB_CLK_RECOVER_CTRL_REG(base) = (value))
#define USB_RMW_CLK_RECOVER_CTRL(base, mask, value) (USB_WR_CLK_RECOVER_CTRL(base, (USB_RD_CLK_RECOVER_CTRL(base) & ~(mask)) | (value)))
#define USB_SET_CLK_RECOVER_CTRL(base, value) (BME_OR8(&USB_CLK_RECOVER_CTRL_REG(base), (uint8_t)(value)))
#define USB_CLR_CLK_RECOVER_CTRL(base, value) (BME_AND8(&USB_CLK_RECOVER_CTRL_REG(base), (uint8_t)(~(value))))
#define USB_TOG_CLK_RECOVER_CTRL(base, value) (BME_XOR8(&USB_CLK_RECOVER_CTRL_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USB_CLK_RECOVER_CTRL bitfields
 */

/*!
 * @name Register USB_CLK_RECOVER_CTRL, field RESTART_IFRTRIM_EN[5] (RW)
 *
 * IRC48 has a default trim fine value whose default value is factory trimmed
 * (the IFR trim value). Clock recover block tracks the accuracy of the clock 48Mhz
 * and keeps updating the trim fine value accordingly
 *
 * Values:
 * - 0b0 - Trim fine adjustment always works based on the previous updated trim
 *     fine value (default)
 * - 0b1 - Trim fine restarts from the IFR trim value whenever
 *     bus_reset/bus_resume is detected or module enable is desasserted
 */
/*@{*/
/*! @brief Read current value of the USB_CLK_RECOVER_CTRL_RESTART_IFRTRIM_EN field. */
#define USB_RD_CLK_RECOVER_CTRL_RESTART_IFRTRIM_EN(base) ((USB_CLK_RECOVER_CTRL_REG(base) & USB_CLK_RECOVER_CTRL_RESTART_IFRTRIM_EN_MASK) >> USB_CLK_RECOVER_CTRL_RESTART_IFRTRIM_EN_SHIFT)
#define USB_BRD_CLK_RECOVER_CTRL_RESTART_IFRTRIM_EN(base) (BME_UBFX8(&USB_CLK_RECOVER_CTRL_REG(base), USB_CLK_RECOVER_CTRL_RESTART_IFRTRIM_EN_SHIFT, USB_CLK_RECOVER_CTRL_RESTART_IFRTRIM_EN_WIDTH))

/*! @brief Set the RESTART_IFRTRIM_EN field to a new value. */
#define USB_WR_CLK_RECOVER_CTRL_RESTART_IFRTRIM_EN(base, value) (USB_RMW_CLK_RECOVER_CTRL(base, USB_CLK_RECOVER_CTRL_RESTART_IFRTRIM_EN_MASK, USB_CLK_RECOVER_CTRL_RESTART_IFRTRIM_EN(value)))
#define USB_BWR_CLK_RECOVER_CTRL_RESTART_IFRTRIM_EN(base, value) (BME_BFI8(&USB_CLK_RECOVER_CTRL_REG(base), ((uint8_t)(value) << USB_CLK_RECOVER_CTRL_RESTART_IFRTRIM_EN_SHIFT), USB_CLK_RECOVER_CTRL_RESTART_IFRTRIM_EN_SHIFT, USB_CLK_RECOVER_CTRL_RESTART_IFRTRIM_EN_WIDTH))
/*@}*/

/*!
 * @name Register USB_CLK_RECOVER_CTRL, field RESET_RESUME_ROUGH_EN[6] (RW)
 *
 * The clock recovery block tracks the IRC48Mhz to get an accurate 48Mhz clock.
 * It has two phases after user enables clock_recover_en bit, rough phase and
 * tracking phase. The step to fine tune the IRC 48Mhz by adjusting the trim fine
 * value is different during these two phases. The step in rough phase is larger
 * than that in tracking phase. Switch back to rough stage whenever USB bus reset
 * or bus resume occurs.
 *
 * Values:
 * - 0b0 - Always works in tracking phase after the 1st time rough to track
 *     transition (default)
 * - 0b1 - Go back to rough stage whenever bus reset or bus resume occurs
 */
/*@{*/
/*! @brief Read current value of the USB_CLK_RECOVER_CTRL_RESET_RESUME_ROUGH_EN field. */
#define USB_RD_CLK_RECOVER_CTRL_RESET_RESUME_ROUGH_EN(base) ((USB_CLK_RECOVER_CTRL_REG(base) & USB_CLK_RECOVER_CTRL_RESET_RESUME_ROUGH_EN_MASK) >> USB_CLK_RECOVER_CTRL_RESET_RESUME_ROUGH_EN_SHIFT)
#define USB_BRD_CLK_RECOVER_CTRL_RESET_RESUME_ROUGH_EN(base) (BME_UBFX8(&USB_CLK_RECOVER_CTRL_REG(base), USB_CLK_RECOVER_CTRL_RESET_RESUME_ROUGH_EN_SHIFT, USB_CLK_RECOVER_CTRL_RESET_RESUME_ROUGH_EN_WIDTH))

/*! @brief Set the RESET_RESUME_ROUGH_EN field to a new value. */
#define USB_WR_CLK_RECOVER_CTRL_RESET_RESUME_ROUGH_EN(base, value) (USB_RMW_CLK_RECOVER_CTRL(base, USB_CLK_RECOVER_CTRL_RESET_RESUME_ROUGH_EN_MASK, USB_CLK_RECOVER_CTRL_RESET_RESUME_ROUGH_EN(value)))
#define USB_BWR_CLK_RECOVER_CTRL_RESET_RESUME_ROUGH_EN(base, value) (BME_BFI8(&USB_CLK_RECOVER_CTRL_REG(base), ((uint8_t)(value) << USB_CLK_RECOVER_CTRL_RESET_RESUME_ROUGH_EN_SHIFT), USB_CLK_RECOVER_CTRL_RESET_RESUME_ROUGH_EN_SHIFT, USB_CLK_RECOVER_CTRL_RESET_RESUME_ROUGH_EN_WIDTH))
/*@}*/

/*!
 * @name Register USB_CLK_RECOVER_CTRL, field CLOCK_RECOVER_EN[7] (RW)
 *
 * This bit must be enabled if user wants to use the crystal-less USB mode for
 * the Full Speed USB controller and transceiver. This bit should not be set for
 * USB host mode or OTG.
 *
 * Values:
 * - 0b0 - Disable clock recovery block (default)
 * - 0b1 - Enable clock recovery block
 */
/*@{*/
/*! @brief Read current value of the USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN field. */
#define USB_RD_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN(base) ((USB_CLK_RECOVER_CTRL_REG(base) & USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN_MASK) >> USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN_SHIFT)
#define USB_BRD_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN(base) (BME_UBFX8(&USB_CLK_RECOVER_CTRL_REG(base), USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN_SHIFT, USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN_WIDTH))

/*! @brief Set the CLOCK_RECOVER_EN field to a new value. */
#define USB_WR_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN(base, value) (USB_RMW_CLK_RECOVER_CTRL(base, USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN_MASK, USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN(value)))
#define USB_BWR_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN(base, value) (BME_BFI8(&USB_CLK_RECOVER_CTRL_REG(base), ((uint8_t)(value) << USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN_SHIFT), USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN_SHIFT, USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN_WIDTH))
/*@}*/

/*******************************************************************************
 * USB_CLK_RECOVER_IRC_EN - IRC48M oscillator enable register
 ******************************************************************************/

/*!
 * @brief USB_CLK_RECOVER_IRC_EN - IRC48M oscillator enable register (RW)
 *
 * Reset value: 0x01U
 *
 * Controls basic operation of the on-chip IRC48M module used to produce nominal
 * 48MHz clocks for USB crystal-less operation and other functions. See
 * additional information about the IRC48M operation in the Clock Distribution chapter.
 */
/*!
 * @name Constants and macros for entire USB_CLK_RECOVER_IRC_EN register
 */
/*@{*/
#define USB_RD_CLK_RECOVER_IRC_EN(base) (USB_CLK_RECOVER_IRC_EN_REG(base))
#define USB_WR_CLK_RECOVER_IRC_EN(base, value) (USB_CLK_RECOVER_IRC_EN_REG(base) = (value))
#define USB_RMW_CLK_RECOVER_IRC_EN(base, mask, value) (USB_WR_CLK_RECOVER_IRC_EN(base, (USB_RD_CLK_RECOVER_IRC_EN(base) & ~(mask)) | (value)))
#define USB_SET_CLK_RECOVER_IRC_EN(base, value) (BME_OR8(&USB_CLK_RECOVER_IRC_EN_REG(base), (uint8_t)(value)))
#define USB_CLR_CLK_RECOVER_IRC_EN(base, value) (BME_AND8(&USB_CLK_RECOVER_IRC_EN_REG(base), (uint8_t)(~(value))))
#define USB_TOG_CLK_RECOVER_IRC_EN(base, value) (BME_XOR8(&USB_CLK_RECOVER_IRC_EN_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USB_CLK_RECOVER_IRC_EN bitfields
 */

/*!
 * @name Register USB_CLK_RECOVER_IRC_EN, field REG_EN[0] (RW)
 *
 * This bit is used to enable the local analog regulator for IRC48Mhz module.
 * This bit must be set if user wants to use the crystal-less USB clock
 * configuration.
 *
 * Values:
 * - 0b0 - IRC48M local regulator is disabled
 * - 0b1 - IRC48M local regulator is enabled (default)
 */
/*@{*/
/*! @brief Read current value of the USB_CLK_RECOVER_IRC_EN_REG_EN field. */
#define USB_RD_CLK_RECOVER_IRC_EN_REG_EN(base) ((USB_CLK_RECOVER_IRC_EN_REG(base) & USB_CLK_RECOVER_IRC_EN_REG_EN_MASK) >> USB_CLK_RECOVER_IRC_EN_REG_EN_SHIFT)
#define USB_BRD_CLK_RECOVER_IRC_EN_REG_EN(base) (BME_UBFX8(&USB_CLK_RECOVER_IRC_EN_REG(base), USB_CLK_RECOVER_IRC_EN_REG_EN_SHIFT, USB_CLK_RECOVER_IRC_EN_REG_EN_WIDTH))

/*! @brief Set the REG_EN field to a new value. */
#define USB_WR_CLK_RECOVER_IRC_EN_REG_EN(base, value) (USB_RMW_CLK_RECOVER_IRC_EN(base, USB_CLK_RECOVER_IRC_EN_REG_EN_MASK, USB_CLK_RECOVER_IRC_EN_REG_EN(value)))
#define USB_BWR_CLK_RECOVER_IRC_EN_REG_EN(base, value) (BME_BFI8(&USB_CLK_RECOVER_IRC_EN_REG(base), ((uint8_t)(value) << USB_CLK_RECOVER_IRC_EN_REG_EN_SHIFT), USB_CLK_RECOVER_IRC_EN_REG_EN_SHIFT, USB_CLK_RECOVER_IRC_EN_REG_EN_WIDTH))
/*@}*/

/*!
 * @name Register USB_CLK_RECOVER_IRC_EN, field IRC_EN[1] (RW)
 *
 * This bit is used to enable the on-chip IRC48Mhz module to generate clocks for
 * crystal-less USB. It can be used for FS USB device mode operation. This bit
 * must be set before using the crystal-less USB clock configuration.
 *
 * Values:
 * - 0b0 - Disable the IRC48M module (default)
 * - 0b1 - Enable the IRC48M module
 */
/*@{*/
/*! @brief Read current value of the USB_CLK_RECOVER_IRC_EN_IRC_EN field. */
#define USB_RD_CLK_RECOVER_IRC_EN_IRC_EN(base) ((USB_CLK_RECOVER_IRC_EN_REG(base) & USB_CLK_RECOVER_IRC_EN_IRC_EN_MASK) >> USB_CLK_RECOVER_IRC_EN_IRC_EN_SHIFT)
#define USB_BRD_CLK_RECOVER_IRC_EN_IRC_EN(base) (BME_UBFX8(&USB_CLK_RECOVER_IRC_EN_REG(base), USB_CLK_RECOVER_IRC_EN_IRC_EN_SHIFT, USB_CLK_RECOVER_IRC_EN_IRC_EN_WIDTH))

/*! @brief Set the IRC_EN field to a new value. */
#define USB_WR_CLK_RECOVER_IRC_EN_IRC_EN(base, value) (USB_RMW_CLK_RECOVER_IRC_EN(base, USB_CLK_RECOVER_IRC_EN_IRC_EN_MASK, USB_CLK_RECOVER_IRC_EN_IRC_EN(value)))
#define USB_BWR_CLK_RECOVER_IRC_EN_IRC_EN(base, value) (BME_BFI8(&USB_CLK_RECOVER_IRC_EN_REG(base), ((uint8_t)(value) << USB_CLK_RECOVER_IRC_EN_IRC_EN_SHIFT), USB_CLK_RECOVER_IRC_EN_IRC_EN_SHIFT, USB_CLK_RECOVER_IRC_EN_IRC_EN_WIDTH))
/*@}*/

/*******************************************************************************
 * USB_CLK_RECOVER_INT_EN - Clock recovery combined interrupt enable
 ******************************************************************************/

/*!
 * @brief USB_CLK_RECOVER_INT_EN - Clock recovery combined interrupt enable (RW)
 *
 * Reset value: 0x10U
 *
 * Enables or masks the individual interrupt flags which are logically OR'ed
 * together to produce the combined interrupt indication on the USB_CLK_RECOVERY_INT
 * bit in the USB_USBTRC0 register if the indicated conditions have been
 * detected in the USB clock recovery algorithm operation.
 */
/*!
 * @name Constants and macros for entire USB_CLK_RECOVER_INT_EN register
 */
/*@{*/
#define USB_RD_CLK_RECOVER_INT_EN(base) (USB_CLK_RECOVER_INT_EN_REG(base))
#define USB_WR_CLK_RECOVER_INT_EN(base, value) (USB_CLK_RECOVER_INT_EN_REG(base) = (value))
#define USB_RMW_CLK_RECOVER_INT_EN(base, mask, value) (USB_WR_CLK_RECOVER_INT_EN(base, (USB_RD_CLK_RECOVER_INT_EN(base) & ~(mask)) | (value)))
#define USB_SET_CLK_RECOVER_INT_EN(base, value) (BME_OR8(&USB_CLK_RECOVER_INT_EN_REG(base), (uint8_t)(value)))
#define USB_CLR_CLK_RECOVER_INT_EN(base, value) (BME_AND8(&USB_CLK_RECOVER_INT_EN_REG(base), (uint8_t)(~(value))))
#define USB_TOG_CLK_RECOVER_INT_EN(base, value) (BME_XOR8(&USB_CLK_RECOVER_INT_EN_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USB_CLK_RECOVER_INT_EN bitfields
 */

/*!
 * @name Register USB_CLK_RECOVER_INT_EN, field OVF_ERROR_EN[4] (RW)
 *
 * Determines whether OVF_ERROR condition signal is used in generation of
 * USB_CLK_RECOVERY_INT.
 *
 * Values:
 * - 0b0 - The interrupt will be masked
 * - 0b1 - The interrupt will be enabled (default)
 */
/*@{*/
/*! @brief Read current value of the USB_CLK_RECOVER_INT_EN_OVF_ERROR_EN field. */
#define USB_RD_CLK_RECOVER_INT_EN_OVF_ERROR_EN(base) ((USB_CLK_RECOVER_INT_EN_REG(base) & USB_CLK_RECOVER_INT_EN_OVF_ERROR_EN_MASK) >> USB_CLK_RECOVER_INT_EN_OVF_ERROR_EN_SHIFT)
#define USB_BRD_CLK_RECOVER_INT_EN_OVF_ERROR_EN(base) (BME_UBFX8(&USB_CLK_RECOVER_INT_EN_REG(base), USB_CLK_RECOVER_INT_EN_OVF_ERROR_EN_SHIFT, USB_CLK_RECOVER_INT_EN_OVF_ERROR_EN_WIDTH))

/*! @brief Set the OVF_ERROR_EN field to a new value. */
#define USB_WR_CLK_RECOVER_INT_EN_OVF_ERROR_EN(base, value) (USB_RMW_CLK_RECOVER_INT_EN(base, USB_CLK_RECOVER_INT_EN_OVF_ERROR_EN_MASK, USB_CLK_RECOVER_INT_EN_OVF_ERROR_EN(value)))
#define USB_BWR_CLK_RECOVER_INT_EN_OVF_ERROR_EN(base, value) (BME_BFI8(&USB_CLK_RECOVER_INT_EN_REG(base), ((uint8_t)(value) << USB_CLK_RECOVER_INT_EN_OVF_ERROR_EN_SHIFT), USB_CLK_RECOVER_INT_EN_OVF_ERROR_EN_SHIFT, USB_CLK_RECOVER_INT_EN_OVF_ERROR_EN_WIDTH))
/*@}*/

/*******************************************************************************
 * USB_CLK_RECOVER_INT_STATUS - Clock recovery separated interrupt status
 ******************************************************************************/

/*!
 * @brief USB_CLK_RECOVER_INT_STATUS - Clock recovery separated interrupt status (W1C)
 *
 * Reset value: 0x00U
 *
 * A Write operation with value high at 1'b1 on any combination of individual
 * bits will clear those bits.
 */
/*!
 * @name Constants and macros for entire USB_CLK_RECOVER_INT_STATUS register
 */
/*@{*/
#define USB_RD_CLK_RECOVER_INT_STATUS(base) (USB_CLK_RECOVER_INT_STATUS_REG(base))
#define USB_WR_CLK_RECOVER_INT_STATUS(base, value) (USB_CLK_RECOVER_INT_STATUS_REG(base) = (value))
#define USB_RMW_CLK_RECOVER_INT_STATUS(base, mask, value) (USB_WR_CLK_RECOVER_INT_STATUS(base, (USB_RD_CLK_RECOVER_INT_STATUS(base) & ~(mask)) | (value)))
#define USB_SET_CLK_RECOVER_INT_STATUS(base, value) (BME_OR8(&USB_CLK_RECOVER_INT_STATUS_REG(base), (uint8_t)(value)))
#define USB_CLR_CLK_RECOVER_INT_STATUS(base, value) (BME_AND8(&USB_CLK_RECOVER_INT_STATUS_REG(base), (uint8_t)(~(value))))
#define USB_TOG_CLK_RECOVER_INT_STATUS(base, value) (BME_XOR8(&USB_CLK_RECOVER_INT_STATUS_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USB_CLK_RECOVER_INT_STATUS bitfields
 */

/*!
 * @name Register USB_CLK_RECOVER_INT_STATUS, field OVF_ERROR[4] (W1C)
 *
 * Indicates that the USB clock recovery algorithm has detected that the
 * frequency trim adjustment needed for the IRC48M output clock is outside the available
 * TRIM_FINE adjustment range for the IRC48M module.
 *
 * Values:
 * - 0b0 - No interrupt is reported
 * - 0b1 - Unmasked interrupt has been generated
 */
/*@{*/
/*! @brief Read current value of the USB_CLK_RECOVER_INT_STATUS_OVF_ERROR field. */
#define USB_RD_CLK_RECOVER_INT_STATUS_OVF_ERROR(base) ((USB_CLK_RECOVER_INT_STATUS_REG(base) & USB_CLK_RECOVER_INT_STATUS_OVF_ERROR_MASK) >> USB_CLK_RECOVER_INT_STATUS_OVF_ERROR_SHIFT)
#define USB_BRD_CLK_RECOVER_INT_STATUS_OVF_ERROR(base) (BME_UBFX8(&USB_CLK_RECOVER_INT_STATUS_REG(base), USB_CLK_RECOVER_INT_STATUS_OVF_ERROR_SHIFT, USB_CLK_RECOVER_INT_STATUS_OVF_ERROR_WIDTH))

/*! @brief Set the OVF_ERROR field to a new value. */
#define USB_WR_CLK_RECOVER_INT_STATUS_OVF_ERROR(base, value) (USB_RMW_CLK_RECOVER_INT_STATUS(base, USB_CLK_RECOVER_INT_STATUS_OVF_ERROR_MASK, USB_CLK_RECOVER_INT_STATUS_OVF_ERROR(value)))
#define USB_BWR_CLK_RECOVER_INT_STATUS_OVF_ERROR(base, value) (BME_BFI8(&USB_CLK_RECOVER_INT_STATUS_REG(base), ((uint8_t)(value) << USB_CLK_RECOVER_INT_STATUS_OVF_ERROR_SHIFT), USB_CLK_RECOVER_INT_STATUS_OVF_ERROR_SHIFT, USB_CLK_RECOVER_INT_STATUS_OVF_ERROR_WIDTH))
/*@}*/

/*
 * MK82F25615 USBDCD
 *
 * USB Device Charger Detection module
 *
 * Registers defined in this header file:
 * - USBDCD_CONTROL - Control register
 * - USBDCD_CLOCK - Clock register
 * - USBDCD_STATUS - Status register
 * - USBDCD_SIGNAL_OVERRIDE - Signal Override Register
 * - USBDCD_TIMER0 - TIMER0 register
 * - USBDCD_TIMER1 - TIMER1 register
 * - USBDCD_TIMER2_BC11 - TIMER2_BC11 register
 * - USBDCD_TIMER2_BC12 - TIMER2_BC12 register
 */

#define USBDCD_INSTANCE_COUNT (1U) /*!< Number of instances of the USBDCD module. */
#define USBDCD_IDX (0U) /*!< Instance number for USBDCD. */

/*******************************************************************************
 * USBDCD_CONTROL - Control register
 ******************************************************************************/

/*!
 * @brief USBDCD_CONTROL - Control register (RW)
 *
 * Reset value: 0x00010000U
 *
 * Contains the control and interrupt bit fields.
 */
/*!
 * @name Constants and macros for entire USBDCD_CONTROL register
 */
/*@{*/
#define USBDCD_RD_CONTROL(base)  (USBDCD_CONTROL_REG(base))
#define USBDCD_WR_CONTROL(base, value) (USBDCD_CONTROL_REG(base) = (value))
#define USBDCD_RMW_CONTROL(base, mask, value) (USBDCD_WR_CONTROL(base, (USBDCD_RD_CONTROL(base) & ~(mask)) | (value)))
#define USBDCD_SET_CONTROL(base, value) (BME_OR32(&USBDCD_CONTROL_REG(base), (uint32_t)(value)))
#define USBDCD_CLR_CONTROL(base, value) (BME_AND32(&USBDCD_CONTROL_REG(base), (uint32_t)(~(value))))
#define USBDCD_TOG_CONTROL(base, value) (BME_XOR32(&USBDCD_CONTROL_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USBDCD_CONTROL bitfields
 */

/*!
 * @name Register USBDCD_CONTROL, field IACK[0] (WORZ)
 *
 * Determines whether the interrupt is cleared.
 *
 * Values:
 * - 0b0 - Do not clear the interrupt.
 * - 0b1 - Clear the IF bit (interrupt flag).
 */
/*@{*/
/*! @brief Set the IACK field to a new value. */
#define USBDCD_WR_CONTROL_IACK(base, value) (USBDCD_RMW_CONTROL(base, USBDCD_CONTROL_IACK_MASK, USBDCD_CONTROL_IACK(value)))
#define USBDCD_BWR_CONTROL_IACK(base, value) (BME_BFI32(&USBDCD_CONTROL_REG(base), ((uint32_t)(value) << USBDCD_CONTROL_IACK_SHIFT), USBDCD_CONTROL_IACK_SHIFT, USBDCD_CONTROL_IACK_WIDTH))
/*@}*/

/*!
 * @name Register USBDCD_CONTROL, field IF[8] (RO)
 *
 * Determines whether an interrupt is pending.
 *
 * Values:
 * - 0b0 - No interrupt is pending.
 * - 0b1 - An interrupt is pending.
 */
/*@{*/
/*! @brief Read current value of the USBDCD_CONTROL_IF field. */
#define USBDCD_RD_CONTROL_IF(base) ((USBDCD_CONTROL_REG(base) & USBDCD_CONTROL_IF_MASK) >> USBDCD_CONTROL_IF_SHIFT)
#define USBDCD_BRD_CONTROL_IF(base) (BME_UBFX32(&USBDCD_CONTROL_REG(base), USBDCD_CONTROL_IF_SHIFT, USBDCD_CONTROL_IF_WIDTH))
/*@}*/

/*!
 * @name Register USBDCD_CONTROL, field IE[16] (RW)
 *
 * Enables/disables interrupts to the system.
 *
 * Values:
 * - 0b0 - Disable interrupts to the system.
 * - 0b1 - Enable interrupts to the system.
 */
/*@{*/
/*! @brief Read current value of the USBDCD_CONTROL_IE field. */
#define USBDCD_RD_CONTROL_IE(base) ((USBDCD_CONTROL_REG(base) & USBDCD_CONTROL_IE_MASK) >> USBDCD_CONTROL_IE_SHIFT)
#define USBDCD_BRD_CONTROL_IE(base) (BME_UBFX32(&USBDCD_CONTROL_REG(base), USBDCD_CONTROL_IE_SHIFT, USBDCD_CONTROL_IE_WIDTH))

/*! @brief Set the IE field to a new value. */
#define USBDCD_WR_CONTROL_IE(base, value) (USBDCD_RMW_CONTROL(base, USBDCD_CONTROL_IE_MASK, USBDCD_CONTROL_IE(value)))
#define USBDCD_BWR_CONTROL_IE(base, value) (BME_BFI32(&USBDCD_CONTROL_REG(base), ((uint32_t)(value) << USBDCD_CONTROL_IE_SHIFT), USBDCD_CONTROL_IE_SHIFT, USBDCD_CONTROL_IE_WIDTH))
/*@}*/

/*!
 * @name Register USBDCD_CONTROL, field BC12[17] (RW)
 *
 * BC1.2 compatibility. This bit cannot be changed after start detection.
 *
 * Values:
 * - 0b0 - Compatible with BC1.1 (default)
 * - 0b1 - Compatible with BC1.2
 */
/*@{*/
/*! @brief Read current value of the USBDCD_CONTROL_BC12 field. */
#define USBDCD_RD_CONTROL_BC12(base) ((USBDCD_CONTROL_REG(base) & USBDCD_CONTROL_BC12_MASK) >> USBDCD_CONTROL_BC12_SHIFT)
#define USBDCD_BRD_CONTROL_BC12(base) (BME_UBFX32(&USBDCD_CONTROL_REG(base), USBDCD_CONTROL_BC12_SHIFT, USBDCD_CONTROL_BC12_WIDTH))

/*! @brief Set the BC12 field to a new value. */
#define USBDCD_WR_CONTROL_BC12(base, value) (USBDCD_RMW_CONTROL(base, USBDCD_CONTROL_BC12_MASK, USBDCD_CONTROL_BC12(value)))
#define USBDCD_BWR_CONTROL_BC12(base, value) (BME_BFI32(&USBDCD_CONTROL_REG(base), ((uint32_t)(value) << USBDCD_CONTROL_BC12_SHIFT), USBDCD_CONTROL_BC12_SHIFT, USBDCD_CONTROL_BC12_WIDTH))
/*@}*/

/*!
 * @name Register USBDCD_CONTROL, field START[24] (WORZ)
 *
 * Determines whether the charger detection sequence is initiated.
 *
 * Values:
 * - 0b0 - Do not start the sequence. Writes of this value have no effect.
 * - 0b1 - Initiate the charger detection sequence. If the sequence is already
 *     running, writes of this value have no effect.
 */
/*@{*/
/*! @brief Set the START field to a new value. */
#define USBDCD_WR_CONTROL_START(base, value) (USBDCD_RMW_CONTROL(base, USBDCD_CONTROL_START_MASK, USBDCD_CONTROL_START(value)))
#define USBDCD_BWR_CONTROL_START(base, value) (BME_BFI32(&USBDCD_CONTROL_REG(base), ((uint32_t)(value) << USBDCD_CONTROL_START_SHIFT), USBDCD_CONTROL_START_SHIFT, USBDCD_CONTROL_START_WIDTH))
/*@}*/

/*!
 * @name Register USBDCD_CONTROL, field SR[25] (WORZ)
 *
 * Determines whether a software reset is performed.
 *
 * Values:
 * - 0b0 - Do not perform a software reset.
 * - 0b1 - Perform a software reset.
 */
/*@{*/
/*! @brief Set the SR field to a new value. */
#define USBDCD_WR_CONTROL_SR(base, value) (USBDCD_RMW_CONTROL(base, USBDCD_CONTROL_SR_MASK, USBDCD_CONTROL_SR(value)))
#define USBDCD_BWR_CONTROL_SR(base, value) (BME_BFI32(&USBDCD_CONTROL_REG(base), ((uint32_t)(value) << USBDCD_CONTROL_SR_SHIFT), USBDCD_CONTROL_SR_SHIFT, USBDCD_CONTROL_SR_WIDTH))
/*@}*/

/*******************************************************************************
 * USBDCD_CLOCK - Clock register
 ******************************************************************************/

/*!
 * @brief USBDCD_CLOCK - Clock register (RW)
 *
 * Reset value: 0x000000C1U
 */
/*!
 * @name Constants and macros for entire USBDCD_CLOCK register
 */
/*@{*/
#define USBDCD_RD_CLOCK(base)    (USBDCD_CLOCK_REG(base))
#define USBDCD_WR_CLOCK(base, value) (USBDCD_CLOCK_REG(base) = (value))
#define USBDCD_RMW_CLOCK(base, mask, value) (USBDCD_WR_CLOCK(base, (USBDCD_RD_CLOCK(base) & ~(mask)) | (value)))
#define USBDCD_SET_CLOCK(base, value) (BME_OR32(&USBDCD_CLOCK_REG(base), (uint32_t)(value)))
#define USBDCD_CLR_CLOCK(base, value) (BME_AND32(&USBDCD_CLOCK_REG(base), (uint32_t)(~(value))))
#define USBDCD_TOG_CLOCK(base, value) (BME_XOR32(&USBDCD_CLOCK_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USBDCD_CLOCK bitfields
 */

/*!
 * @name Register USBDCD_CLOCK, field CLOCK_UNIT[0] (RW)
 *
 * Specifies the unit of measure for the clock speed.
 *
 * Values:
 * - 0b0 - kHz Speed (between 1 kHz and 1023 kHz)
 * - 0b1 - MHz Speed (between 1 MHz and 1023 MHz)
 */
/*@{*/
/*! @brief Read current value of the USBDCD_CLOCK_CLOCK_UNIT field. */
#define USBDCD_RD_CLOCK_CLOCK_UNIT(base) ((USBDCD_CLOCK_REG(base) & USBDCD_CLOCK_CLOCK_UNIT_MASK) >> USBDCD_CLOCK_CLOCK_UNIT_SHIFT)
#define USBDCD_BRD_CLOCK_CLOCK_UNIT(base) (BME_UBFX32(&USBDCD_CLOCK_REG(base), USBDCD_CLOCK_CLOCK_UNIT_SHIFT, USBDCD_CLOCK_CLOCK_UNIT_WIDTH))

/*! @brief Set the CLOCK_UNIT field to a new value. */
#define USBDCD_WR_CLOCK_CLOCK_UNIT(base, value) (USBDCD_RMW_CLOCK(base, USBDCD_CLOCK_CLOCK_UNIT_MASK, USBDCD_CLOCK_CLOCK_UNIT(value)))
#define USBDCD_BWR_CLOCK_CLOCK_UNIT(base, value) (BME_BFI32(&USBDCD_CLOCK_REG(base), ((uint32_t)(value) << USBDCD_CLOCK_CLOCK_UNIT_SHIFT), USBDCD_CLOCK_CLOCK_UNIT_SHIFT, USBDCD_CLOCK_CLOCK_UNIT_WIDTH))
/*@}*/

/*!
 * @name Register USBDCD_CLOCK, field CLOCK_SPEED[11:2] (RW)
 *
 * The unit of measure is programmed in CLOCK_UNIT. The valid range is from 1 to
 * 1023 when clock unit is MHz and 4 to 1023 when clock unit is kHz. Examples
 * with CLOCK_UNIT = 1: For 48 MHz: 0b00_0011_0000 (48) (Default) For 24 MHz:
 * 0b00_0001_1000 (24) Examples with CLOCK_UNIT = 0: For 100 kHz: 0b00_0110_0100 (100)
 * For 500 kHz: 0b01_1111_0100 (500)
 */
/*@{*/
/*! @brief Read current value of the USBDCD_CLOCK_CLOCK_SPEED field. */
#define USBDCD_RD_CLOCK_CLOCK_SPEED(base) ((USBDCD_CLOCK_REG(base) & USBDCD_CLOCK_CLOCK_SPEED_MASK) >> USBDCD_CLOCK_CLOCK_SPEED_SHIFT)
#define USBDCD_BRD_CLOCK_CLOCK_SPEED(base) (USBDCD_RD_CLOCK_CLOCK_SPEED(base))

/*! @brief Set the CLOCK_SPEED field to a new value. */
#define USBDCD_WR_CLOCK_CLOCK_SPEED(base, value) (USBDCD_RMW_CLOCK(base, USBDCD_CLOCK_CLOCK_SPEED_MASK, USBDCD_CLOCK_CLOCK_SPEED(value)))
#define USBDCD_BWR_CLOCK_CLOCK_SPEED(base, value) (USBDCD_WR_CLOCK_CLOCK_SPEED(base, value))
/*@}*/

/*******************************************************************************
 * USBDCD_STATUS - Status register
 ******************************************************************************/

/*!
 * @brief USBDCD_STATUS - Status register (RO)
 *
 * Reset value: 0x00000000U
 *
 * Provides the current state of the module for system software monitoring.
 */
/*!
 * @name Constants and macros for entire USBDCD_STATUS register
 */
/*@{*/
#define USBDCD_RD_STATUS(base)   (USBDCD_STATUS_REG(base))
/*@}*/

/*
 * Constants & macros for individual USBDCD_STATUS bitfields
 */

/*!
 * @name Register USBDCD_STATUS, field SEQ_RES[17:16] (RO)
 *
 * Reports how the charger detection is attached.
 *
 * Values:
 * - 0b00 - No results to report.
 * - 0b01 - Attached to an SDP. Must comply with USB 2.0 by drawing only 2.5 mA
 *     (max) until connected.
 * - 0b10 - Attached to a charging port. The exact meaning depends on bit 18: 0:
 *     Attached to either a CDP or a DCP. The charger type detection has not
 *     completed. 1: Attached to a CDP. The charger type detection has completed.
 * - 0b11 - Attached to a DCP.
 */
/*@{*/
/*! @brief Read current value of the USBDCD_STATUS_SEQ_RES field. */
#define USBDCD_RD_STATUS_SEQ_RES(base) ((USBDCD_STATUS_REG(base) & USBDCD_STATUS_SEQ_RES_MASK) >> USBDCD_STATUS_SEQ_RES_SHIFT)
#define USBDCD_BRD_STATUS_SEQ_RES(base) (BME_UBFX32(&USBDCD_STATUS_REG(base), USBDCD_STATUS_SEQ_RES_SHIFT, USBDCD_STATUS_SEQ_RES_WIDTH))
/*@}*/

/*!
 * @name Register USBDCD_STATUS, field SEQ_STAT[19:18] (RO)
 *
 * Indicates the status of the charger detection sequence.
 *
 * Values:
 * - 0b00 - The module is either not enabled, or the module is enabled but the
 *     data pins have not yet been detected.
 * - 0b01 - Data pin contact detection is complete.
 * - 0b10 - Charging port detection is complete.
 * - 0b11 - Charger type detection is complete.
 */
/*@{*/
/*! @brief Read current value of the USBDCD_STATUS_SEQ_STAT field. */
#define USBDCD_RD_STATUS_SEQ_STAT(base) ((USBDCD_STATUS_REG(base) & USBDCD_STATUS_SEQ_STAT_MASK) >> USBDCD_STATUS_SEQ_STAT_SHIFT)
#define USBDCD_BRD_STATUS_SEQ_STAT(base) (BME_UBFX32(&USBDCD_STATUS_REG(base), USBDCD_STATUS_SEQ_STAT_SHIFT, USBDCD_STATUS_SEQ_STAT_WIDTH))
/*@}*/

/*!
 * @name Register USBDCD_STATUS, field ERR[20] (RO)
 *
 * Indicates whether there is an error in the detection sequence.
 *
 * Values:
 * - 0b0 - No sequence errors.
 * - 0b1 - Error in the detection sequence. See the SEQ_STAT field to determine
 *     the phase in which the error occurred.
 */
/*@{*/
/*! @brief Read current value of the USBDCD_STATUS_ERR field. */
#define USBDCD_RD_STATUS_ERR(base) ((USBDCD_STATUS_REG(base) & USBDCD_STATUS_ERR_MASK) >> USBDCD_STATUS_ERR_SHIFT)
#define USBDCD_BRD_STATUS_ERR(base) (BME_UBFX32(&USBDCD_STATUS_REG(base), USBDCD_STATUS_ERR_SHIFT, USBDCD_STATUS_ERR_WIDTH))
/*@}*/

/*!
 * @name Register USBDCD_STATUS, field TO[21] (RO)
 *
 * Indicates whether the detection sequence has passed the timeout threshhold.
 *
 * Values:
 * - 0b0 - The detection sequence has not been running for over 1 s.
 * - 0b1 - It has been over 1 s since the data pin contact was detected and
 *     debounced.
 */
/*@{*/
/*! @brief Read current value of the USBDCD_STATUS_TO field. */
#define USBDCD_RD_STATUS_TO(base) ((USBDCD_STATUS_REG(base) & USBDCD_STATUS_TO_MASK) >> USBDCD_STATUS_TO_SHIFT)
#define USBDCD_BRD_STATUS_TO(base) (BME_UBFX32(&USBDCD_STATUS_REG(base), USBDCD_STATUS_TO_SHIFT, USBDCD_STATUS_TO_WIDTH))
/*@}*/

/*!
 * @name Register USBDCD_STATUS, field ACTIVE[22] (RO)
 *
 * Indicates whether the sequence is running.
 *
 * Values:
 * - 0b0 - The sequence is not running.
 * - 0b1 - The sequence is running.
 */
/*@{*/
/*! @brief Read current value of the USBDCD_STATUS_ACTIVE field. */
#define USBDCD_RD_STATUS_ACTIVE(base) ((USBDCD_STATUS_REG(base) & USBDCD_STATUS_ACTIVE_MASK) >> USBDCD_STATUS_ACTIVE_SHIFT)
#define USBDCD_BRD_STATUS_ACTIVE(base) (BME_UBFX32(&USBDCD_STATUS_REG(base), USBDCD_STATUS_ACTIVE_SHIFT, USBDCD_STATUS_ACTIVE_WIDTH))
/*@}*/

/*******************************************************************************
 * USBDCD_SIGNAL_OVERRIDE - Signal Override Register
 ******************************************************************************/

/*!
 * @brief USBDCD_SIGNAL_OVERRIDE - Signal Override Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The Signal Override register provides a way for the customer to enable
 * signaling required by the USB BC v1.2 specification after the battery charger
 * detection sequences have completed.
 */
/*!
 * @name Constants and macros for entire USBDCD_SIGNAL_OVERRIDE register
 */
/*@{*/
#define USBDCD_RD_SIGNAL_OVERRIDE(base) (USBDCD_SIGNAL_OVERRIDE_REG(base))
#define USBDCD_WR_SIGNAL_OVERRIDE(base, value) (USBDCD_SIGNAL_OVERRIDE_REG(base) = (value))
#define USBDCD_RMW_SIGNAL_OVERRIDE(base, mask, value) (USBDCD_WR_SIGNAL_OVERRIDE(base, (USBDCD_RD_SIGNAL_OVERRIDE(base) & ~(mask)) | (value)))
#define USBDCD_SET_SIGNAL_OVERRIDE(base, value) (BME_OR32(&USBDCD_SIGNAL_OVERRIDE_REG(base), (uint32_t)(value)))
#define USBDCD_CLR_SIGNAL_OVERRIDE(base, value) (BME_AND32(&USBDCD_SIGNAL_OVERRIDE_REG(base), (uint32_t)(~(value))))
#define USBDCD_TOG_SIGNAL_OVERRIDE(base, value) (BME_XOR32(&USBDCD_SIGNAL_OVERRIDE_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USBDCD_SIGNAL_OVERRIDE bitfields
 */

/*!
 * @name Register USBDCD_SIGNAL_OVERRIDE, field PS[1:0] (RW)
 *
 * Used to enable specified voltage and current source circuits on the USB_DP
 * and USB_DM pins. Customers may set this bit field to 2'b10 for required
 * signaling if attached to a Dedicated Charging Port, or during operation under the Dead
 * Battery Provision.
 *
 * Values:
 * - 0b00 - No overrides. Bit field must remain at this value during normal USB
 *     data communication to prevent unexpected conditions on USB_DP and USB_DM
 *     pins. (Default)
 * - 0b01 - Reserved, not for customer use.
 * - 0b10 - Enables VDP_SRC voltage source for the USB_DP pin and IDM_SINK
 *     current source for the USB_DM pin.
 * - 0b11 - Reserved, not for customer use.
 */
/*@{*/
/*! @brief Read current value of the USBDCD_SIGNAL_OVERRIDE_PS field. */
#define USBDCD_RD_SIGNAL_OVERRIDE_PS(base) ((USBDCD_SIGNAL_OVERRIDE_REG(base) & USBDCD_SIGNAL_OVERRIDE_PS_MASK) >> USBDCD_SIGNAL_OVERRIDE_PS_SHIFT)
#define USBDCD_BRD_SIGNAL_OVERRIDE_PS(base) (BME_UBFX32(&USBDCD_SIGNAL_OVERRIDE_REG(base), USBDCD_SIGNAL_OVERRIDE_PS_SHIFT, USBDCD_SIGNAL_OVERRIDE_PS_WIDTH))

/*! @brief Set the PS field to a new value. */
#define USBDCD_WR_SIGNAL_OVERRIDE_PS(base, value) (USBDCD_RMW_SIGNAL_OVERRIDE(base, USBDCD_SIGNAL_OVERRIDE_PS_MASK, USBDCD_SIGNAL_OVERRIDE_PS(value)))
#define USBDCD_BWR_SIGNAL_OVERRIDE_PS(base, value) (BME_BFI32(&USBDCD_SIGNAL_OVERRIDE_REG(base), ((uint32_t)(value) << USBDCD_SIGNAL_OVERRIDE_PS_SHIFT), USBDCD_SIGNAL_OVERRIDE_PS_SHIFT, USBDCD_SIGNAL_OVERRIDE_PS_WIDTH))
/*@}*/

/*******************************************************************************
 * USBDCD_TIMER0 - TIMER0 register
 ******************************************************************************/

/*!
 * @brief USBDCD_TIMER0 - TIMER0 register (RW)
 *
 * Reset value: 0x00100000U
 *
 * TIMER0 has an TSEQ_INIT field that represents the system latency in ms.
 * Latency is measured from the time when VBUS goes active until the time system
 * software initiates charger detection sequence in USBDCD module. When software sets
 * the CONTROL[START] bit, the Unit Connection Timer (TUNITCON) is initialized
 * with the value of TSEQ_INIT. Valid values are 0-1023, however the USB Battery
 * Charging Specification requires the entire sequence, including TSEQ_INIT, to be
 * completed in 1s or less.
 */
/*!
 * @name Constants and macros for entire USBDCD_TIMER0 register
 */
/*@{*/
#define USBDCD_RD_TIMER0(base)   (USBDCD_TIMER0_REG(base))
#define USBDCD_WR_TIMER0(base, value) (USBDCD_TIMER0_REG(base) = (value))
#define USBDCD_RMW_TIMER0(base, mask, value) (USBDCD_WR_TIMER0(base, (USBDCD_RD_TIMER0(base) & ~(mask)) | (value)))
#define USBDCD_SET_TIMER0(base, value) (BME_OR32(&USBDCD_TIMER0_REG(base), (uint32_t)(value)))
#define USBDCD_CLR_TIMER0(base, value) (BME_AND32(&USBDCD_TIMER0_REG(base), (uint32_t)(~(value))))
#define USBDCD_TOG_TIMER0(base, value) (BME_XOR32(&USBDCD_TIMER0_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USBDCD_TIMER0 bitfields
 */

/*!
 * @name Register USBDCD_TIMER0, field TUNITCON[11:0] (RO)
 *
 * Displays the amount of elapsed time since the event of setting the START bit
 * plus the value of TSEQ_INIT. The timer is automatically initialized with the
 * value of TSEQ_INIT before starting to count. This timer enables compliance with
 * the maximum time allowed to connect T UNIT_CON under the USB Battery Charging
 * Specification. If the timer reaches the one second limit, the module triggers
 * an interrupt and sets the error flag STATUS[ERR]. The timer continues
 * counting throughout the charger detection sequence, even when control has been passed
 * to software. As long as the module is active, the timer continues to count
 * until it reaches the maximum value of 0xFFF (4095 ms). The timer does not
 * rollover to zero. A software reset clears the timer.
 */
/*@{*/
/*! @brief Read current value of the USBDCD_TIMER0_TUNITCON field. */
#define USBDCD_RD_TIMER0_TUNITCON(base) ((USBDCD_TIMER0_REG(base) & USBDCD_TIMER0_TUNITCON_MASK) >> USBDCD_TIMER0_TUNITCON_SHIFT)
#define USBDCD_BRD_TIMER0_TUNITCON(base) (USBDCD_RD_TIMER0_TUNITCON(base))
/*@}*/

/*!
 * @name Register USBDCD_TIMER0, field TSEQ_INIT[25:16] (RW)
 *
 * TSEQ_INIT represents the system latency (in ms) measured from the time VBUS
 * goes active to the time system software initiates the charger detection
 * sequence in the USBDCD module. When software sets the CONTROL[START] bit, the Unit
 * Connection Timer (TUNITCON) is initialized with the value of TSEQ_INIT. Valid
 * values are 0-1023, but the USB Battery Charging Specification requires the
 * entire sequence, including TSEQ_INIT, to be completed in 1s or less.
 */
/*@{*/
/*! @brief Read current value of the USBDCD_TIMER0_TSEQ_INIT field. */
#define USBDCD_RD_TIMER0_TSEQ_INIT(base) ((USBDCD_TIMER0_REG(base) & USBDCD_TIMER0_TSEQ_INIT_MASK) >> USBDCD_TIMER0_TSEQ_INIT_SHIFT)
#define USBDCD_BRD_TIMER0_TSEQ_INIT(base) (USBDCD_RD_TIMER0_TSEQ_INIT(base))

/*! @brief Set the TSEQ_INIT field to a new value. */
#define USBDCD_WR_TIMER0_TSEQ_INIT(base, value) (USBDCD_RMW_TIMER0(base, USBDCD_TIMER0_TSEQ_INIT_MASK, USBDCD_TIMER0_TSEQ_INIT(value)))
#define USBDCD_BWR_TIMER0_TSEQ_INIT(base, value) (USBDCD_WR_TIMER0_TSEQ_INIT(base, value))
/*@}*/

/*******************************************************************************
 * USBDCD_TIMER1 - TIMER1 register
 ******************************************************************************/

/*!
 * @brief USBDCD_TIMER1 - TIMER1 register (RW)
 *
 * Reset value: 0x000A0028U
 *
 * TIMER1 contains timing parameters. Note that register values can be written
 * that are not compliant with the USB Battery Charging Specification, so care
 * should be taken when overwriting the default values.
 */
/*!
 * @name Constants and macros for entire USBDCD_TIMER1 register
 */
/*@{*/
#define USBDCD_RD_TIMER1(base)   (USBDCD_TIMER1_REG(base))
#define USBDCD_WR_TIMER1(base, value) (USBDCD_TIMER1_REG(base) = (value))
#define USBDCD_RMW_TIMER1(base, mask, value) (USBDCD_WR_TIMER1(base, (USBDCD_RD_TIMER1(base) & ~(mask)) | (value)))
#define USBDCD_SET_TIMER1(base, value) (BME_OR32(&USBDCD_TIMER1_REG(base), (uint32_t)(value)))
#define USBDCD_CLR_TIMER1(base, value) (BME_AND32(&USBDCD_TIMER1_REG(base), (uint32_t)(~(value))))
#define USBDCD_TOG_TIMER1(base, value) (BME_XOR32(&USBDCD_TIMER1_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USBDCD_TIMER1 bitfields
 */

/*!
 * @name Register USBDCD_TIMER1, field TVDPSRC_ON[9:0] (RW)
 *
 * This timing parameter is used after detection of the data pin. See "Charging
 * Port Detection". Valid values are 1-1023, but the USB Battery Charging
 * Specification requires a minimum value of 40 ms.
 */
/*@{*/
/*! @brief Read current value of the USBDCD_TIMER1_TVDPSRC_ON field. */
#define USBDCD_RD_TIMER1_TVDPSRC_ON(base) ((USBDCD_TIMER1_REG(base) & USBDCD_TIMER1_TVDPSRC_ON_MASK) >> USBDCD_TIMER1_TVDPSRC_ON_SHIFT)
#define USBDCD_BRD_TIMER1_TVDPSRC_ON(base) (USBDCD_RD_TIMER1_TVDPSRC_ON(base))

/*! @brief Set the TVDPSRC_ON field to a new value. */
#define USBDCD_WR_TIMER1_TVDPSRC_ON(base, value) (USBDCD_RMW_TIMER1(base, USBDCD_TIMER1_TVDPSRC_ON_MASK, USBDCD_TIMER1_TVDPSRC_ON(value)))
#define USBDCD_BWR_TIMER1_TVDPSRC_ON(base, value) (USBDCD_WR_TIMER1_TVDPSRC_ON(base, value))
/*@}*/

/*!
 * @name Register USBDCD_TIMER1, field TDCD_DBNC[25:16] (RW)
 *
 * Sets the time period (ms) to debounce the D+ signal during the data pin
 * contact detection phase. See "Debouncing the data pin contact" Valid values are
 * 1-1023, but the USB Battery Charging Specification requires a minimum value of 10
 * ms.
 */
/*@{*/
/*! @brief Read current value of the USBDCD_TIMER1_TDCD_DBNC field. */
#define USBDCD_RD_TIMER1_TDCD_DBNC(base) ((USBDCD_TIMER1_REG(base) & USBDCD_TIMER1_TDCD_DBNC_MASK) >> USBDCD_TIMER1_TDCD_DBNC_SHIFT)
#define USBDCD_BRD_TIMER1_TDCD_DBNC(base) (USBDCD_RD_TIMER1_TDCD_DBNC(base))

/*! @brief Set the TDCD_DBNC field to a new value. */
#define USBDCD_WR_TIMER1_TDCD_DBNC(base, value) (USBDCD_RMW_TIMER1(base, USBDCD_TIMER1_TDCD_DBNC_MASK, USBDCD_TIMER1_TDCD_DBNC(value)))
#define USBDCD_BWR_TIMER1_TDCD_DBNC(base, value) (USBDCD_WR_TIMER1_TDCD_DBNC(base, value))
/*@}*/

/*******************************************************************************
 * USBDCD_TIMER2_BC11 - TIMER2_BC11 register
 ******************************************************************************/

/*!
 * @brief USBDCD_TIMER2_BC11 - TIMER2_BC11 register (RW)
 *
 * Reset value: 0x00280001U
 *
 * TIMER2_BC11 contains timing parameters for USB Battery Charging
 * Specification, v1.1. Register values can be written that are not compliant with the USB
 * Battery Charging Specification, so care should be taken when overwriting the
 * default values.
 */
/*!
 * @name Constants and macros for entire USBDCD_TIMER2_BC11 register
 */
/*@{*/
#define USBDCD_RD_TIMER2_BC11(base) (USBDCD_TIMER2_BC11_REG(base))
#define USBDCD_WR_TIMER2_BC11(base, value) (USBDCD_TIMER2_BC11_REG(base) = (value))
#define USBDCD_RMW_TIMER2_BC11(base, mask, value) (USBDCD_WR_TIMER2_BC11(base, (USBDCD_RD_TIMER2_BC11(base) & ~(mask)) | (value)))
#define USBDCD_SET_TIMER2_BC11(base, value) (BME_OR32(&USBDCD_TIMER2_BC11_REG(base), (uint32_t)(value)))
#define USBDCD_CLR_TIMER2_BC11(base, value) (BME_AND32(&USBDCD_TIMER2_BC11_REG(base), (uint32_t)(~(value))))
#define USBDCD_TOG_TIMER2_BC11(base, value) (BME_XOR32(&USBDCD_TIMER2_BC11_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USBDCD_TIMER2_BC11 bitfields
 */

/*!
 * @name Register USBDCD_TIMER2_BC11, field CHECK_DM[3:0] (RW)
 *
 * Sets the amount of time (in ms) that the module waits after the device
 * connects to the USB bus until checking the state of the D- line to determine the
 * type of charging port. See "Charger Type Detection." Valid values are 1-15ms.
 */
/*@{*/
/*! @brief Read current value of the USBDCD_TIMER2_BC11_CHECK_DM field. */
#define USBDCD_RD_TIMER2_BC11_CHECK_DM(base) ((USBDCD_TIMER2_BC11_REG(base) & USBDCD_TIMER2_BC11_CHECK_DM_MASK) >> USBDCD_TIMER2_BC11_CHECK_DM_SHIFT)
#define USBDCD_BRD_TIMER2_BC11_CHECK_DM(base) (BME_UBFX32(&USBDCD_TIMER2_BC11_REG(base), USBDCD_TIMER2_BC11_CHECK_DM_SHIFT, USBDCD_TIMER2_BC11_CHECK_DM_WIDTH))

/*! @brief Set the CHECK_DM field to a new value. */
#define USBDCD_WR_TIMER2_BC11_CHECK_DM(base, value) (USBDCD_RMW_TIMER2_BC11(base, USBDCD_TIMER2_BC11_CHECK_DM_MASK, USBDCD_TIMER2_BC11_CHECK_DM(value)))
#define USBDCD_BWR_TIMER2_BC11_CHECK_DM(base, value) (BME_BFI32(&USBDCD_TIMER2_BC11_REG(base), ((uint32_t)(value) << USBDCD_TIMER2_BC11_CHECK_DM_SHIFT), USBDCD_TIMER2_BC11_CHECK_DM_SHIFT, USBDCD_TIMER2_BC11_CHECK_DM_WIDTH))
/*@}*/

/*!
 * @name Register USBDCD_TIMER2_BC11, field TVDPSRC_CON[25:16] (RW)
 *
 * Sets the time period (ms) that the module waits after charging port detection
 * before system software must enable the D+ pullup to connect to the USB host.
 * Valid values are 1-1023, but the USB Battery Charging Specification requires a
 * minimum value of 40 ms.
 */
/*@{*/
/*! @brief Read current value of the USBDCD_TIMER2_BC11_TVDPSRC_CON field. */
#define USBDCD_RD_TIMER2_BC11_TVDPSRC_CON(base) ((USBDCD_TIMER2_BC11_REG(base) & USBDCD_TIMER2_BC11_TVDPSRC_CON_MASK) >> USBDCD_TIMER2_BC11_TVDPSRC_CON_SHIFT)
#define USBDCD_BRD_TIMER2_BC11_TVDPSRC_CON(base) (USBDCD_RD_TIMER2_BC11_TVDPSRC_CON(base))

/*! @brief Set the TVDPSRC_CON field to a new value. */
#define USBDCD_WR_TIMER2_BC11_TVDPSRC_CON(base, value) (USBDCD_RMW_TIMER2_BC11(base, USBDCD_TIMER2_BC11_TVDPSRC_CON_MASK, USBDCD_TIMER2_BC11_TVDPSRC_CON(value)))
#define USBDCD_BWR_TIMER2_BC11_TVDPSRC_CON(base, value) (USBDCD_WR_TIMER2_BC11_TVDPSRC_CON(base, value))
/*@}*/

/*******************************************************************************
 * USBDCD_TIMER2_BC12 - TIMER2_BC12 register
 ******************************************************************************/

/*!
 * @brief USBDCD_TIMER2_BC12 - TIMER2_BC12 register (RW)
 *
 * Reset value: 0x00010028U
 *
 * TIMER2_BC12 contains timing parameters for USB Battery Charging
 * Specification, v1.2. Register values can be written that are not compliant with the USB
 * Battery Charging Specification, so care should be taken when overwriting the
 * default values.
 */
/*!
 * @name Constants and macros for entire USBDCD_TIMER2_BC12 register
 */
/*@{*/
#define USBDCD_RD_TIMER2_BC12(base) (USBDCD_TIMER2_BC12_REG(base))
#define USBDCD_WR_TIMER2_BC12(base, value) (USBDCD_TIMER2_BC12_REG(base) = (value))
#define USBDCD_RMW_TIMER2_BC12(base, mask, value) (USBDCD_WR_TIMER2_BC12(base, (USBDCD_RD_TIMER2_BC12(base) & ~(mask)) | (value)))
#define USBDCD_SET_TIMER2_BC12(base, value) (BME_OR32(&USBDCD_TIMER2_BC12_REG(base), (uint32_t)(value)))
#define USBDCD_CLR_TIMER2_BC12(base, value) (BME_AND32(&USBDCD_TIMER2_BC12_REG(base), (uint32_t)(~(value))))
#define USBDCD_TOG_TIMER2_BC12(base, value) (BME_XOR32(&USBDCD_TIMER2_BC12_REG(base), (uint32_t)(value)))
/*@}*/

/*
 * Constants & macros for individual USBDCD_TIMER2_BC12 bitfields
 */

/*!
 * @name Register USBDCD_TIMER2_BC12, field TVDMSRC_ON[9:0] (RW)
 *
 * Sets the amount of time (in ms) that the module enables the VDM_SRC. Valid
 * values are 0-40ms.
 */
/*@{*/
/*! @brief Read current value of the USBDCD_TIMER2_BC12_TVDMSRC_ON field. */
#define USBDCD_RD_TIMER2_BC12_TVDMSRC_ON(base) ((USBDCD_TIMER2_BC12_REG(base) & USBDCD_TIMER2_BC12_TVDMSRC_ON_MASK) >> USBDCD_TIMER2_BC12_TVDMSRC_ON_SHIFT)
#define USBDCD_BRD_TIMER2_BC12_TVDMSRC_ON(base) (USBDCD_RD_TIMER2_BC12_TVDMSRC_ON(base))

/*! @brief Set the TVDMSRC_ON field to a new value. */
#define USBDCD_WR_TIMER2_BC12_TVDMSRC_ON(base, value) (USBDCD_RMW_TIMER2_BC12(base, USBDCD_TIMER2_BC12_TVDMSRC_ON_MASK, USBDCD_TIMER2_BC12_TVDMSRC_ON(value)))
#define USBDCD_BWR_TIMER2_BC12_TVDMSRC_ON(base, value) (USBDCD_WR_TIMER2_BC12_TVDMSRC_ON(base, value))
/*@}*/

/*!
 * @name Register USBDCD_TIMER2_BC12, field TWAIT_AFTER_PRD[25:16] (RW)
 *
 * Sets the amount of time (in ms) that the module waits after primary detection
 * before start to secondary detection. Valid values are 1-1023ms. Default is
 * 1ms.
 */
/*@{*/
/*! @brief Read current value of the USBDCD_TIMER2_BC12_TWAIT_AFTER_PRD field. */
#define USBDCD_RD_TIMER2_BC12_TWAIT_AFTER_PRD(base) ((USBDCD_TIMER2_BC12_REG(base) & USBDCD_TIMER2_BC12_TWAIT_AFTER_PRD_MASK) >> USBDCD_TIMER2_BC12_TWAIT_AFTER_PRD_SHIFT)
#define USBDCD_BRD_TIMER2_BC12_TWAIT_AFTER_PRD(base) (USBDCD_RD_TIMER2_BC12_TWAIT_AFTER_PRD(base))

/*! @brief Set the TWAIT_AFTER_PRD field to a new value. */
#define USBDCD_WR_TIMER2_BC12_TWAIT_AFTER_PRD(base, value) (USBDCD_RMW_TIMER2_BC12(base, USBDCD_TIMER2_BC12_TWAIT_AFTER_PRD_MASK, USBDCD_TIMER2_BC12_TWAIT_AFTER_PRD(value)))
#define USBDCD_BWR_TIMER2_BC12_TWAIT_AFTER_PRD(base, value) (USBDCD_WR_TIMER2_BC12_TWAIT_AFTER_PRD(base, value))
/*@}*/

/*
 * MK82F25615 VREF
 *
 * Voltage Reference
 *
 * Registers defined in this header file:
 * - VREF_TRM - VREF Trim Register
 * - VREF_SC - VREF Status and Control Register
 */

#define VREF_INSTANCE_COUNT (1U) /*!< Number of instances of the VREF module. */
#define VREF_IDX (0U) /*!< Instance number for VREF. */

/*******************************************************************************
 * VREF_TRM - VREF Trim Register
 ******************************************************************************/

/*!
 * @brief VREF_TRM - VREF Trim Register (RW)
 *
 * Reset value: 0x00U
 *
 * This register contains bits that contain the trim data for the Voltage
 * Reference.
 */
/*!
 * @name Constants and macros for entire VREF_TRM register
 */
/*@{*/
#define VREF_RD_TRM(base)        (VREF_TRM_REG(base))
#define VREF_WR_TRM(base, value) (VREF_TRM_REG(base) = (value))
#define VREF_RMW_TRM(base, mask, value) (VREF_WR_TRM(base, (VREF_RD_TRM(base) & ~(mask)) | (value)))
#define VREF_SET_TRM(base, value) (BME_OR8(&VREF_TRM_REG(base), (uint8_t)(value)))
#define VREF_CLR_TRM(base, value) (BME_AND8(&VREF_TRM_REG(base), (uint8_t)(~(value))))
#define VREF_TOG_TRM(base, value) (BME_XOR8(&VREF_TRM_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual VREF_TRM bitfields
 */

/*!
 * @name Register VREF_TRM, field TRIM[5:0] (RW)
 *
 * These bits change the resulting VREF by approximately +/- 0.5 mV for each
 * step. Min = minimum and max = maximum voltage reference output. For minimum and
 * maximum voltage reference output values, refer to the Data Sheet for this chip.
 *
 * Values:
 * - 0b000000 - Min
 * - 0b111111 - Max
 */
/*@{*/
/*! @brief Read current value of the VREF_TRM_TRIM field. */
#define VREF_RD_TRM_TRIM(base) ((VREF_TRM_REG(base) & VREF_TRM_TRIM_MASK) >> VREF_TRM_TRIM_SHIFT)
#define VREF_BRD_TRM_TRIM(base) (BME_UBFX8(&VREF_TRM_REG(base), VREF_TRM_TRIM_SHIFT, VREF_TRM_TRIM_WIDTH))

/*! @brief Set the TRIM field to a new value. */
#define VREF_WR_TRM_TRIM(base, value) (VREF_RMW_TRM(base, VREF_TRM_TRIM_MASK, VREF_TRM_TRIM(value)))
#define VREF_BWR_TRM_TRIM(base, value) (BME_BFI8(&VREF_TRM_REG(base), ((uint8_t)(value) << VREF_TRM_TRIM_SHIFT), VREF_TRM_TRIM_SHIFT, VREF_TRM_TRIM_WIDTH))
/*@}*/

/*!
 * @name Register VREF_TRM, field CHOPEN[6] (RW)
 *
 * This bit is set during factory trimming of the VREF voltage. This bit should
 * be written to 1 to achieve the performance stated in the data sheet. If the
 * internal voltage regulator is being used (REGEN bit is set to 1), the chop
 * oscillator must also be enabled. If the chop oscillator is to be used in very low
 * power modes, the system (bandgap) voltage reference must also be enabled. See
 * the chip-specific VREF information (also known as "chip configuration" details)
 * for a description of how this can be achieved.
 *
 * Values:
 * - 0b0 - Chop oscillator is disabled.
 * - 0b1 - Chop oscillator is enabled.
 */
/*@{*/
/*! @brief Read current value of the VREF_TRM_CHOPEN field. */
#define VREF_RD_TRM_CHOPEN(base) ((VREF_TRM_REG(base) & VREF_TRM_CHOPEN_MASK) >> VREF_TRM_CHOPEN_SHIFT)
#define VREF_BRD_TRM_CHOPEN(base) (BME_UBFX8(&VREF_TRM_REG(base), VREF_TRM_CHOPEN_SHIFT, VREF_TRM_CHOPEN_WIDTH))

/*! @brief Set the CHOPEN field to a new value. */
#define VREF_WR_TRM_CHOPEN(base, value) (VREF_RMW_TRM(base, VREF_TRM_CHOPEN_MASK, VREF_TRM_CHOPEN(value)))
#define VREF_BWR_TRM_CHOPEN(base, value) (BME_BFI8(&VREF_TRM_REG(base), ((uint8_t)(value) << VREF_TRM_CHOPEN_SHIFT), VREF_TRM_CHOPEN_SHIFT, VREF_TRM_CHOPEN_WIDTH))
/*@}*/

/*******************************************************************************
 * VREF_SC - VREF Status and Control Register
 ******************************************************************************/

/*!
 * @brief VREF_SC - VREF Status and Control Register (RW)
 *
 * Reset value: 0x00U
 *
 * This register contains the control bits used to enable the internal voltage
 * reference and to select the buffer mode to be used.
 */
/*!
 * @name Constants and macros for entire VREF_SC register
 */
/*@{*/
#define VREF_RD_SC(base)         (VREF_SC_REG(base))
#define VREF_WR_SC(base, value)  (VREF_SC_REG(base) = (value))
#define VREF_RMW_SC(base, mask, value) (VREF_WR_SC(base, (VREF_RD_SC(base) & ~(mask)) | (value)))
#define VREF_SET_SC(base, value) (BME_OR8(&VREF_SC_REG(base), (uint8_t)(value)))
#define VREF_CLR_SC(base, value) (BME_AND8(&VREF_SC_REG(base), (uint8_t)(~(value))))
#define VREF_TOG_SC(base, value) (BME_XOR8(&VREF_SC_REG(base), (uint8_t)(value)))
/*@}*/

/*
 * Constants & macros for individual VREF_SC bitfields
 */

/*!
 * @name Register VREF_SC, field MODE_LV[1:0] (RW)
 *
 * These bits select the buffer modes for the Voltage Reference module.
 *
 * Values:
 * - 0b00 - Bandgap on only, for stabilization and startup
 * - 0b01 - High power buffer mode enabled
 * - 0b10 - Low-power buffer mode enabled
 * - 0b11 - Reserved
 */
/*@{*/
/*! @brief Read current value of the VREF_SC_MODE_LV field. */
#define VREF_RD_SC_MODE_LV(base) ((VREF_SC_REG(base) & VREF_SC_MODE_LV_MASK) >> VREF_SC_MODE_LV_SHIFT)
#define VREF_BRD_SC_MODE_LV(base) (BME_UBFX8(&VREF_SC_REG(base), VREF_SC_MODE_LV_SHIFT, VREF_SC_MODE_LV_WIDTH))

/*! @brief Set the MODE_LV field to a new value. */
#define VREF_WR_SC_MODE_LV(base, value) (VREF_RMW_SC(base, VREF_SC_MODE_LV_MASK, VREF_SC_MODE_LV(value)))
#define VREF_BWR_SC_MODE_LV(base, value) (BME_BFI8(&VREF_SC_REG(base), ((uint8_t)(value) << VREF_SC_MODE_LV_SHIFT), VREF_SC_MODE_LV_SHIFT, VREF_SC_MODE_LV_WIDTH))
/*@}*/

/*!
 * @name Register VREF_SC, field VREFST[2] (RO)
 *
 * This bit indicates that the bandgap reference within the Voltage Reference
 * module has completed its startup and stabilization. This bit is valid only when
 * the chop oscillator is not being used.
 *
 * Values:
 * - 0b0 - The module is disabled or not stable.
 * - 0b1 - The module is stable.
 */
/*@{*/
/*! @brief Read current value of the VREF_SC_VREFST field. */
#define VREF_RD_SC_VREFST(base) ((VREF_SC_REG(base) & VREF_SC_VREFST_MASK) >> VREF_SC_VREFST_SHIFT)
#define VREF_BRD_SC_VREFST(base) (BME_UBFX8(&VREF_SC_REG(base), VREF_SC_VREFST_SHIFT, VREF_SC_VREFST_WIDTH))
/*@}*/

/*!
 * @name Register VREF_SC, field ICOMPEN[5] (RW)
 *
 * This bit should be written to 1 to achieve the performance stated in the data
 * sheet.
 *
 * Values:
 * - 0b0 - Disabled
 * - 0b1 - Enabled
 */
/*@{*/
/*! @brief Read current value of the VREF_SC_ICOMPEN field. */
#define VREF_RD_SC_ICOMPEN(base) ((VREF_SC_REG(base) & VREF_SC_ICOMPEN_MASK) >> VREF_SC_ICOMPEN_SHIFT)
#define VREF_BRD_SC_ICOMPEN(base) (BME_UBFX8(&VREF_SC_REG(base), VREF_SC_ICOMPEN_SHIFT, VREF_SC_ICOMPEN_WIDTH))

/*! @brief Set the ICOMPEN field to a new value. */
#define VREF_WR_SC_ICOMPEN(base, value) (VREF_RMW_SC(base, VREF_SC_ICOMPEN_MASK, VREF_SC_ICOMPEN(value)))
#define VREF_BWR_SC_ICOMPEN(base, value) (BME_BFI8(&VREF_SC_REG(base), ((uint8_t)(value) << VREF_SC_ICOMPEN_SHIFT), VREF_SC_ICOMPEN_SHIFT, VREF_SC_ICOMPEN_WIDTH))
/*@}*/

/*!
 * @name Register VREF_SC, field REGEN[6] (RW)
 *
 * This bit is used to enable the internal 1.75 V regulator to produce a
 * constant internal voltage supply in order to reduce the sensitivity to external
 * supply noise and variation. If it is desired to keep the regulator enabled in very
 * low power modes, refer to the Chip Configuration details for a description on
 * how this can be achieved. This bit should be written to 1 to achieve the
 * performance stated in the data sheet. See section "Internal voltage regulator" for
 * details on the required sequence to enable the internal regulator.
 *
 * Values:
 * - 0b0 - Internal 1.75 V regulator is disabled.
 * - 0b1 - Internal 1.75 V regulator is enabled.
 */
/*@{*/
/*! @brief Read current value of the VREF_SC_REGEN field. */
#define VREF_RD_SC_REGEN(base) ((VREF_SC_REG(base) & VREF_SC_REGEN_MASK) >> VREF_SC_REGEN_SHIFT)
#define VREF_BRD_SC_REGEN(base) (BME_UBFX8(&VREF_SC_REG(base), VREF_SC_REGEN_SHIFT, VREF_SC_REGEN_WIDTH))

/*! @brief Set the REGEN field to a new value. */
#define VREF_WR_SC_REGEN(base, value) (VREF_RMW_SC(base, VREF_SC_REGEN_MASK, VREF_SC_REGEN(value)))
#define VREF_BWR_SC_REGEN(base, value) (BME_BFI8(&VREF_SC_REG(base), ((uint8_t)(value) << VREF_SC_REGEN_SHIFT), VREF_SC_REGEN_SHIFT, VREF_SC_REGEN_WIDTH))
/*@}*/

/*!
 * @name Register VREF_SC, field VREFEN[7] (RW)
 *
 * This bit is used to enable the bandgap reference within the Voltage Reference
 * module. After the VREF is enabled, turning off the clock to the VREF module
 * via the corresponding clock gate register will not disable the VREF. VREF must
 * be disabled via this VREFEN bit.
 *
 * Values:
 * - 0b0 - The module is disabled.
 * - 0b1 - The module is enabled.
 */
/*@{*/
/*! @brief Read current value of the VREF_SC_VREFEN field. */
#define VREF_RD_SC_VREFEN(base) ((VREF_SC_REG(base) & VREF_SC_VREFEN_MASK) >> VREF_SC_VREFEN_SHIFT)
#define VREF_BRD_SC_VREFEN(base) (BME_UBFX8(&VREF_SC_REG(base), VREF_SC_VREFEN_SHIFT, VREF_SC_VREFEN_WIDTH))

/*! @brief Set the VREFEN field to a new value. */
#define VREF_WR_SC_VREFEN(base, value) (VREF_RMW_SC(base, VREF_SC_VREFEN_MASK, VREF_SC_VREFEN(value)))
#define VREF_BWR_SC_VREFEN(base, value) (BME_BFI8(&VREF_SC_REG(base), ((uint8_t)(value) << VREF_SC_VREFEN_SHIFT), VREF_SC_VREFEN_SHIFT, VREF_SC_VREFEN_WIDTH))
/*@}*/

/*
 * MK82F25615 WDOG
 *
 * Generation 2008 Watchdog Timer
 *
 * Registers defined in this header file:
 * - WDOG_STCTRLH - Watchdog Status and Control Register High
 * - WDOG_STCTRLL - Watchdog Status and Control Register Low
 * - WDOG_TOVALH - Watchdog Time-out Value Register High
 * - WDOG_TOVALL - Watchdog Time-out Value Register Low
 * - WDOG_WINH - Watchdog Window Register High
 * - WDOG_WINL - Watchdog Window Register Low
 * - WDOG_REFRESH - Watchdog Refresh register
 * - WDOG_UNLOCK - Watchdog Unlock register
 * - WDOG_TMROUTH - Watchdog Timer Output Register High
 * - WDOG_TMROUTL - Watchdog Timer Output Register Low
 * - WDOG_RSTCNT - Watchdog Reset Count register
 * - WDOG_PRESC - Watchdog Prescaler register
 */

#define WDOG_INSTANCE_COUNT (1U) /*!< Number of instances of the WDOG module. */
#define WDOG_IDX (0U) /*!< Instance number for WDOG. */

/*******************************************************************************
 * WDOG_STCTRLH - Watchdog Status and Control Register High
 ******************************************************************************/

/*!
 * @brief WDOG_STCTRLH - Watchdog Status and Control Register High (RW)
 *
 * Reset value: 0x01D3U
 */
/*!
 * @name Constants and macros for entire WDOG_STCTRLH register
 */
/*@{*/
#define WDOG_RD_STCTRLH(base)    (WDOG_STCTRLH_REG(base))
#define WDOG_WR_STCTRLH(base, value) (WDOG_STCTRLH_REG(base) = (value))
#define WDOG_RMW_STCTRLH(base, mask, value) (WDOG_WR_STCTRLH(base, (WDOG_RD_STCTRLH(base) & ~(mask)) | (value)))
#define WDOG_SET_STCTRLH(base, value) (BME_OR16(&WDOG_STCTRLH_REG(base), (uint16_t)(value)))
#define WDOG_CLR_STCTRLH(base, value) (BME_AND16(&WDOG_STCTRLH_REG(base), (uint16_t)(~(value))))
#define WDOG_TOG_STCTRLH(base, value) (BME_XOR16(&WDOG_STCTRLH_REG(base), (uint16_t)(value)))
/*@}*/

/*
 * Constants & macros for individual WDOG_STCTRLH bitfields
 */

/*!
 * @name Register WDOG_STCTRLH, field WDOGEN[0] (RW)
 *
 * Enables or disables the WDOG's operation. In the disabled state, the watchdog
 * timer is kept in the reset state, but the other exception conditions can
 * still trigger a reset/interrupt. A change in the value of this bit must be held
 * for more than one WDOG_CLK cycle for the WDOG to be enabled or disabled.
 *
 * Values:
 * - 0b0 - WDOG is disabled.
 * - 0b1 - WDOG is enabled.
 */
/*@{*/
/*! @brief Read current value of the WDOG_STCTRLH_WDOGEN field. */
#define WDOG_RD_STCTRLH_WDOGEN(base) ((WDOG_STCTRLH_REG(base) & WDOG_STCTRLH_WDOGEN_MASK) >> WDOG_STCTRLH_WDOGEN_SHIFT)
#define WDOG_BRD_STCTRLH_WDOGEN(base) (BME_UBFX16(&WDOG_STCTRLH_REG(base), WDOG_STCTRLH_WDOGEN_SHIFT, WDOG_STCTRLH_WDOGEN_WIDTH))

/*! @brief Set the WDOGEN field to a new value. */
#define WDOG_WR_STCTRLH_WDOGEN(base, value) (WDOG_RMW_STCTRLH(base, WDOG_STCTRLH_WDOGEN_MASK, WDOG_STCTRLH_WDOGEN(value)))
#define WDOG_BWR_STCTRLH_WDOGEN(base, value) (BME_BFI16(&WDOG_STCTRLH_REG(base), ((uint16_t)(value) << WDOG_STCTRLH_WDOGEN_SHIFT), WDOG_STCTRLH_WDOGEN_SHIFT, WDOG_STCTRLH_WDOGEN_WIDTH))
/*@}*/

/*!
 * @name Register WDOG_STCTRLH, field CLKSRC[1] (RW)
 *
 * Selects clock source for the WDOG timer and other internal timing operations.
 *
 * Values:
 * - 0b0 - WDOG clock sourced from LPO .
 * - 0b1 - WDOG clock sourced from alternate clock source.
 */
/*@{*/
/*! @brief Read current value of the WDOG_STCTRLH_CLKSRC field. */
#define WDOG_RD_STCTRLH_CLKSRC(base) ((WDOG_STCTRLH_REG(base) & WDOG_STCTRLH_CLKSRC_MASK) >> WDOG_STCTRLH_CLKSRC_SHIFT)
#define WDOG_BRD_STCTRLH_CLKSRC(base) (BME_UBFX16(&WDOG_STCTRLH_REG(base), WDOG_STCTRLH_CLKSRC_SHIFT, WDOG_STCTRLH_CLKSRC_WIDTH))

/*! @brief Set the CLKSRC field to a new value. */
#define WDOG_WR_STCTRLH_CLKSRC(base, value) (WDOG_RMW_STCTRLH(base, WDOG_STCTRLH_CLKSRC_MASK, WDOG_STCTRLH_CLKSRC(value)))
#define WDOG_BWR_STCTRLH_CLKSRC(base, value) (BME_BFI16(&WDOG_STCTRLH_REG(base), ((uint16_t)(value) << WDOG_STCTRLH_CLKSRC_SHIFT), WDOG_STCTRLH_CLKSRC_SHIFT, WDOG_STCTRLH_CLKSRC_WIDTH))
/*@}*/

/*!
 * @name Register WDOG_STCTRLH, field IRQRSTEN[2] (RW)
 *
 * Used to enable the debug breadcrumbs feature. A change in this bit is updated
 * immediately, as opposed to updating after WCT.
 *
 * Values:
 * - 0b0 - WDOG time-out generates reset only.
 * - 0b1 - WDOG time-out initially generates an interrupt. After WCT, it
 *     generates a reset.
 */
/*@{*/
/*! @brief Read current value of the WDOG_STCTRLH_IRQRSTEN field. */
#define WDOG_RD_STCTRLH_IRQRSTEN(base) ((WDOG_STCTRLH_REG(base) & WDOG_STCTRLH_IRQRSTEN_MASK) >> WDOG_STCTRLH_IRQRSTEN_SHIFT)
#define WDOG_BRD_STCTRLH_IRQRSTEN(base) (BME_UBFX16(&WDOG_STCTRLH_REG(base), WDOG_STCTRLH_IRQRSTEN_SHIFT, WDOG_STCTRLH_IRQRSTEN_WIDTH))

/*! @brief Set the IRQRSTEN field to a new value. */
#define WDOG_WR_STCTRLH_IRQRSTEN(base, value) (WDOG_RMW_STCTRLH(base, WDOG_STCTRLH_IRQRSTEN_MASK, WDOG_STCTRLH_IRQRSTEN(value)))
#define WDOG_BWR_STCTRLH_IRQRSTEN(base, value) (BME_BFI16(&WDOG_STCTRLH_REG(base), ((uint16_t)(value) << WDOG_STCTRLH_IRQRSTEN_SHIFT), WDOG_STCTRLH_IRQRSTEN_SHIFT, WDOG_STCTRLH_IRQRSTEN_WIDTH))
/*@}*/

/*!
 * @name Register WDOG_STCTRLH, field WINEN[3] (RW)
 *
 * Enables Windowing mode.
 *
 * Values:
 * - 0b0 - Windowing mode is disabled.
 * - 0b1 - Windowing mode is enabled.
 */
/*@{*/
/*! @brief Read current value of the WDOG_STCTRLH_WINEN field. */
#define WDOG_RD_STCTRLH_WINEN(base) ((WDOG_STCTRLH_REG(base) & WDOG_STCTRLH_WINEN_MASK) >> WDOG_STCTRLH_WINEN_SHIFT)
#define WDOG_BRD_STCTRLH_WINEN(base) (BME_UBFX16(&WDOG_STCTRLH_REG(base), WDOG_STCTRLH_WINEN_SHIFT, WDOG_STCTRLH_WINEN_WIDTH))

/*! @brief Set the WINEN field to a new value. */
#define WDOG_WR_STCTRLH_WINEN(base, value) (WDOG_RMW_STCTRLH(base, WDOG_STCTRLH_WINEN_MASK, WDOG_STCTRLH_WINEN(value)))
#define WDOG_BWR_STCTRLH_WINEN(base, value) (BME_BFI16(&WDOG_STCTRLH_REG(base), ((uint16_t)(value) << WDOG_STCTRLH_WINEN_SHIFT), WDOG_STCTRLH_WINEN_SHIFT, WDOG_STCTRLH_WINEN_WIDTH))
/*@}*/

/*!
 * @name Register WDOG_STCTRLH, field ALLOWUPDATE[4] (RW)
 *
 * Enables updates to watchdog write-once registers, after the reset-triggered
 * initial configuration window (WCT) closes, through unlock sequence.
 *
 * Values:
 * - 0b0 - No further updates allowed to WDOG write-once registers.
 * - 0b1 - WDOG write-once registers can be unlocked for updating.
 */
/*@{*/
/*! @brief Read current value of the WDOG_STCTRLH_ALLOWUPDATE field. */
#define WDOG_RD_STCTRLH_ALLOWUPDATE(base) ((WDOG_STCTRLH_REG(base) & WDOG_STCTRLH_ALLOWUPDATE_MASK) >> WDOG_STCTRLH_ALLOWUPDATE_SHIFT)
#define WDOG_BRD_STCTRLH_ALLOWUPDATE(base) (BME_UBFX16(&WDOG_STCTRLH_REG(base), WDOG_STCTRLH_ALLOWUPDATE_SHIFT, WDOG_STCTRLH_ALLOWUPDATE_WIDTH))

/*! @brief Set the ALLOWUPDATE field to a new value. */
#define WDOG_WR_STCTRLH_ALLOWUPDATE(base, value) (WDOG_RMW_STCTRLH(base, WDOG_STCTRLH_ALLOWUPDATE_MASK, WDOG_STCTRLH_ALLOWUPDATE(value)))
#define WDOG_BWR_STCTRLH_ALLOWUPDATE(base, value) (BME_BFI16(&WDOG_STCTRLH_REG(base), ((uint16_t)(value) << WDOG_STCTRLH_ALLOWUPDATE_SHIFT), WDOG_STCTRLH_ALLOWUPDATE_SHIFT, WDOG_STCTRLH_ALLOWUPDATE_WIDTH))
/*@}*/

/*!
 * @name Register WDOG_STCTRLH, field DBGEN[5] (RW)
 *
 * Enables or disables WDOG in Debug mode.
 *
 * Values:
 * - 0b0 - WDOG is disabled in CPU Debug mode.
 * - 0b1 - WDOG is enabled in CPU Debug mode.
 */
/*@{*/
/*! @brief Read current value of the WDOG_STCTRLH_DBGEN field. */
#define WDOG_RD_STCTRLH_DBGEN(base) ((WDOG_STCTRLH_REG(base) & WDOG_STCTRLH_DBGEN_MASK) >> WDOG_STCTRLH_DBGEN_SHIFT)
#define WDOG_BRD_STCTRLH_DBGEN(base) (BME_UBFX16(&WDOG_STCTRLH_REG(base), WDOG_STCTRLH_DBGEN_SHIFT, WDOG_STCTRLH_DBGEN_WIDTH))

/*! @brief Set the DBGEN field to a new value. */
#define WDOG_WR_STCTRLH_DBGEN(base, value) (WDOG_RMW_STCTRLH(base, WDOG_STCTRLH_DBGEN_MASK, WDOG_STCTRLH_DBGEN(value)))
#define WDOG_BWR_STCTRLH_DBGEN(base, value) (BME_BFI16(&WDOG_STCTRLH_REG(base), ((uint16_t)(value) << WDOG_STCTRLH_DBGEN_SHIFT), WDOG_STCTRLH_DBGEN_SHIFT, WDOG_STCTRLH_DBGEN_WIDTH))
/*@}*/

/*!
 * @name Register WDOG_STCTRLH, field STOPEN[6] (RW)
 *
 * Enables or disables WDOG in Stop mode.
 *
 * Values:
 * - 0b0 - WDOG is disabled in CPU Stop mode.
 * - 0b1 - WDOG is enabled in CPU Stop mode.
 */
/*@{*/
/*! @brief Read current value of the WDOG_STCTRLH_STOPEN field. */
#define WDOG_RD_STCTRLH_STOPEN(base) ((WDOG_STCTRLH_REG(base) & WDOG_STCTRLH_STOPEN_MASK) >> WDOG_STCTRLH_STOPEN_SHIFT)
#define WDOG_BRD_STCTRLH_STOPEN(base) (BME_UBFX16(&WDOG_STCTRLH_REG(base), WDOG_STCTRLH_STOPEN_SHIFT, WDOG_STCTRLH_STOPEN_WIDTH))

/*! @brief Set the STOPEN field to a new value. */
#define WDOG_WR_STCTRLH_STOPEN(base, value) (WDOG_RMW_STCTRLH(base, WDOG_STCTRLH_STOPEN_MASK, WDOG_STCTRLH_STOPEN(value)))
#define WDOG_BWR_STCTRLH_STOPEN(base, value) (BME_BFI16(&WDOG_STCTRLH_REG(base), ((uint16_t)(value) << WDOG_STCTRLH_STOPEN_SHIFT), WDOG_STCTRLH_STOPEN_SHIFT, WDOG_STCTRLH_STOPEN_WIDTH))
/*@}*/

/*!
 * @name Register WDOG_STCTRLH, field WAITEN[7] (RW)
 *
 * Enables or disables WDOG in Wait mode.
 *
 * Values:
 * - 0b0 - WDOG is disabled in CPU Wait mode.
 * - 0b1 - WDOG is enabled in CPU Wait mode.
 */
/*@{*/
/*! @brief Read current value of the WDOG_STCTRLH_WAITEN field. */
#define WDOG_RD_STCTRLH_WAITEN(base) ((WDOG_STCTRLH_REG(base) & WDOG_STCTRLH_WAITEN_MASK) >> WDOG_STCTRLH_WAITEN_SHIFT)
#define WDOG_BRD_STCTRLH_WAITEN(base) (BME_UBFX16(&WDOG_STCTRLH_REG(base), WDOG_STCTRLH_WAITEN_SHIFT, WDOG_STCTRLH_WAITEN_WIDTH))

/*! @brief Set the WAITEN field to a new value. */
#define WDOG_WR_STCTRLH_WAITEN(base, value) (WDOG_RMW_STCTRLH(base, WDOG_STCTRLH_WAITEN_MASK, WDOG_STCTRLH_WAITEN(value)))
#define WDOG_BWR_STCTRLH_WAITEN(base, value) (BME_BFI16(&WDOG_STCTRLH_REG(base), ((uint16_t)(value) << WDOG_STCTRLH_WAITEN_SHIFT), WDOG_STCTRLH_WAITEN_SHIFT, WDOG_STCTRLH_WAITEN_WIDTH))
/*@}*/

/*!
 * @name Register WDOG_STCTRLH, field TESTWDOG[10] (RW)
 *
 * Puts the watchdog in the functional test mode. In this mode, the watchdog
 * timer and the associated compare and reset generation logic is tested for correct
 * operation. The clock for the timer is switched from the main watchdog clock
 * to the fast clock input for watchdog functional test. The TESTSEL bit selects
 * the test to be run.
 */
/*@{*/
/*! @brief Read current value of the WDOG_STCTRLH_TESTWDOG field. */
#define WDOG_RD_STCTRLH_TESTWDOG(base) ((WDOG_STCTRLH_REG(base) & WDOG_STCTRLH_TESTWDOG_MASK) >> WDOG_STCTRLH_TESTWDOG_SHIFT)
#define WDOG_BRD_STCTRLH_TESTWDOG(base) (BME_UBFX16(&WDOG_STCTRLH_REG(base), WDOG_STCTRLH_TESTWDOG_SHIFT, WDOG_STCTRLH_TESTWDOG_WIDTH))

/*! @brief Set the TESTWDOG field to a new value. */
#define WDOG_WR_STCTRLH_TESTWDOG(base, value) (WDOG_RMW_STCTRLH(base, WDOG_STCTRLH_TESTWDOG_MASK, WDOG_STCTRLH_TESTWDOG(value)))
#define WDOG_BWR_STCTRLH_TESTWDOG(base, value) (BME_BFI16(&WDOG_STCTRLH_REG(base), ((uint16_t)(value) << WDOG_STCTRLH_TESTWDOG_SHIFT), WDOG_STCTRLH_TESTWDOG_SHIFT, WDOG_STCTRLH_TESTWDOG_WIDTH))
/*@}*/

/*!
 * @name Register WDOG_STCTRLH, field TESTSEL[11] (RW)
 *
 * Effective only if TESTWDOG is set. Selects the test to be run on the watchdog
 * timer.
 *
 * Values:
 * - 0b0 - Quick test. The timer runs in normal operation. You can load a small
 *     time-out value to do a quick test.
 * - 0b1 - Byte test. Puts the timer in the byte test mode where individual
 *     bytes of the timer are enabled for operation and are compared for time-out
 *     against the corresponding byte of the programmed time-out value. Select the
 *     byte through BYTESEL[1:0] for testing.
 */
/*@{*/
/*! @brief Read current value of the WDOG_STCTRLH_TESTSEL field. */
#define WDOG_RD_STCTRLH_TESTSEL(base) ((WDOG_STCTRLH_REG(base) & WDOG_STCTRLH_TESTSEL_MASK) >> WDOG_STCTRLH_TESTSEL_SHIFT)
#define WDOG_BRD_STCTRLH_TESTSEL(base) (BME_UBFX16(&WDOG_STCTRLH_REG(base), WDOG_STCTRLH_TESTSEL_SHIFT, WDOG_STCTRLH_TESTSEL_WIDTH))

/*! @brief Set the TESTSEL field to a new value. */
#define WDOG_WR_STCTRLH_TESTSEL(base, value) (WDOG_RMW_STCTRLH(base, WDOG_STCTRLH_TESTSEL_MASK, WDOG_STCTRLH_TESTSEL(value)))
#define WDOG_BWR_STCTRLH_TESTSEL(base, value) (BME_BFI16(&WDOG_STCTRLH_REG(base), ((uint16_t)(value) << WDOG_STCTRLH_TESTSEL_SHIFT), WDOG_STCTRLH_TESTSEL_SHIFT, WDOG_STCTRLH_TESTSEL_WIDTH))
/*@}*/

/*!
 * @name Register WDOG_STCTRLH, field BYTESEL[13:12] (RW)
 *
 * This 2-bit field selects the byte to be tested when the watchdog is in the
 * byte test mode.
 *
 * Values:
 * - 0b00 - Byte 0 selected
 * - 0b01 - Byte 1 selected
 * - 0b10 - Byte 2 selected
 * - 0b11 - Byte 3 selected
 */
/*@{*/
/*! @brief Read current value of the WDOG_STCTRLH_BYTESEL field. */
#define WDOG_RD_STCTRLH_BYTESEL(base) ((WDOG_STCTRLH_REG(base) & WDOG_STCTRLH_BYTESEL_MASK) >> WDOG_STCTRLH_BYTESEL_SHIFT)
#define WDOG_BRD_STCTRLH_BYTESEL(base) (BME_UBFX16(&WDOG_STCTRLH_REG(base), WDOG_STCTRLH_BYTESEL_SHIFT, WDOG_STCTRLH_BYTESEL_WIDTH))

/*! @brief Set the BYTESEL field to a new value. */
#define WDOG_WR_STCTRLH_BYTESEL(base, value) (WDOG_RMW_STCTRLH(base, WDOG_STCTRLH_BYTESEL_MASK, WDOG_STCTRLH_BYTESEL(value)))
#define WDOG_BWR_STCTRLH_BYTESEL(base, value) (BME_BFI16(&WDOG_STCTRLH_REG(base), ((uint16_t)(value) << WDOG_STCTRLH_BYTESEL_SHIFT), WDOG_STCTRLH_BYTESEL_SHIFT, WDOG_STCTRLH_BYTESEL_WIDTH))
/*@}*/

/*!
 * @name Register WDOG_STCTRLH, field DISTESTWDOG[14] (RW)
 *
 * Allows the WDOG's functional test mode to be disabled permanently. After it
 * is set, it can only be cleared by a reset. It cannot be unlocked for editing
 * after it is set.
 *
 * Values:
 * - 0b0 - WDOG functional test mode is not disabled.
 * - 0b1 - WDOG functional test mode is disabled permanently until reset.
 */
/*@{*/
/*! @brief Read current value of the WDOG_STCTRLH_DISTESTWDOG field. */
#define WDOG_RD_STCTRLH_DISTESTWDOG(base) ((WDOG_STCTRLH_REG(base) & WDOG_STCTRLH_DISTESTWDOG_MASK) >> WDOG_STCTRLH_DISTESTWDOG_SHIFT)
#define WDOG_BRD_STCTRLH_DISTESTWDOG(base) (BME_UBFX16(&WDOG_STCTRLH_REG(base), WDOG_STCTRLH_DISTESTWDOG_SHIFT, WDOG_STCTRLH_DISTESTWDOG_WIDTH))

/*! @brief Set the DISTESTWDOG field to a new value. */
#define WDOG_WR_STCTRLH_DISTESTWDOG(base, value) (WDOG_RMW_STCTRLH(base, WDOG_STCTRLH_DISTESTWDOG_MASK, WDOG_STCTRLH_DISTESTWDOG(value)))
#define WDOG_BWR_STCTRLH_DISTESTWDOG(base, value) (BME_BFI16(&WDOG_STCTRLH_REG(base), ((uint16_t)(value) << WDOG_STCTRLH_DISTESTWDOG_SHIFT), WDOG_STCTRLH_DISTESTWDOG_SHIFT, WDOG_STCTRLH_DISTESTWDOG_WIDTH))
/*@}*/

/*******************************************************************************
 * WDOG_STCTRLL - Watchdog Status and Control Register Low
 ******************************************************************************/

/*!
 * @brief WDOG_STCTRLL - Watchdog Status and Control Register Low (RW)
 *
 * Reset value: 0x0001U
 */
/*!
 * @name Constants and macros for entire WDOG_STCTRLL register
 */
/*@{*/
#define WDOG_RD_STCTRLL(base)    (WDOG_STCTRLL_REG(base))
#define WDOG_WR_STCTRLL(base, value) (WDOG_STCTRLL_REG(base) = (value))
#define WDOG_RMW_STCTRLL(base, mask, value) (WDOG_WR_STCTRLL(base, (WDOG_RD_STCTRLL(base) & ~(mask)) | (value)))
#define WDOG_SET_STCTRLL(base, value) (BME_OR16(&WDOG_STCTRLL_REG(base), (uint16_t)(value)))
#define WDOG_CLR_STCTRLL(base, value) (BME_AND16(&WDOG_STCTRLL_REG(base), (uint16_t)(~(value))))
#define WDOG_TOG_STCTRLL(base, value) (BME_XOR16(&WDOG_STCTRLL_REG(base), (uint16_t)(value)))
/*@}*/

/*
 * Constants & macros for individual WDOG_STCTRLL bitfields
 */

/*!
 * @name Register WDOG_STCTRLL, field INTFLG[15] (RW)
 *
 * Interrupt flag. It is set when an exception occurs. IRQRSTEN = 1 is a
 * precondition to set this flag. INTFLG = 1 results in an interrupt being issued
 * followed by a reset, WCT later. The interrupt can be cleared by writing 1 to this
 * bit. It also gets cleared on a system reset.
 */
/*@{*/
/*! @brief Read current value of the WDOG_STCTRLL_INTFLG field. */
#define WDOG_RD_STCTRLL_INTFLG(base) ((WDOG_STCTRLL_REG(base) & WDOG_STCTRLL_INTFLG_MASK) >> WDOG_STCTRLL_INTFLG_SHIFT)
#define WDOG_BRD_STCTRLL_INTFLG(base) (BME_UBFX16(&WDOG_STCTRLL_REG(base), WDOG_STCTRLL_INTFLG_SHIFT, WDOG_STCTRLL_INTFLG_WIDTH))

/*! @brief Set the INTFLG field to a new value. */
#define WDOG_WR_STCTRLL_INTFLG(base, value) (WDOG_RMW_STCTRLL(base, WDOG_STCTRLL_INTFLG_MASK, WDOG_STCTRLL_INTFLG(value)))
#define WDOG_BWR_STCTRLL_INTFLG(base, value) (BME_BFI16(&WDOG_STCTRLL_REG(base), ((uint16_t)(value) << WDOG_STCTRLL_INTFLG_SHIFT), WDOG_STCTRLL_INTFLG_SHIFT, WDOG_STCTRLL_INTFLG_WIDTH))
/*@}*/

/*******************************************************************************
 * WDOG_TOVALH - Watchdog Time-out Value Register High
 ******************************************************************************/

/*!
 * @brief WDOG_TOVALH - Watchdog Time-out Value Register High (RW)
 *
 * Reset value: 0x004CU
 */
/*!
 * @name Constants and macros for entire WDOG_TOVALH register
 */
/*@{*/
#define WDOG_RD_TOVALH(base)     (WDOG_TOVALH_REG(base))
#define WDOG_WR_TOVALH(base, value) (WDOG_TOVALH_REG(base) = (value))
#define WDOG_RMW_TOVALH(base, mask, value) (WDOG_WR_TOVALH(base, (WDOG_RD_TOVALH(base) & ~(mask)) | (value)))
#define WDOG_SET_TOVALH(base, value) (BME_OR16(&WDOG_TOVALH_REG(base), (uint16_t)(value)))
#define WDOG_CLR_TOVALH(base, value) (BME_AND16(&WDOG_TOVALH_REG(base), (uint16_t)(~(value))))
#define WDOG_TOG_TOVALH(base, value) (BME_XOR16(&WDOG_TOVALH_REG(base), (uint16_t)(value)))
/*@}*/

/*******************************************************************************
 * WDOG_TOVALL - Watchdog Time-out Value Register Low
 ******************************************************************************/

/*!
 * @brief WDOG_TOVALL - Watchdog Time-out Value Register Low (RW)
 *
 * Reset value: 0x4B4CU
 *
 * The time-out value of the watchdog must be set to a minimum of four watchdog
 * clock cycles. This is to take into account the delay in new settings taking
 * effect in the watchdog clock domain.
 */
/*!
 * @name Constants and macros for entire WDOG_TOVALL register
 */
/*@{*/
#define WDOG_RD_TOVALL(base)     (WDOG_TOVALL_REG(base))
#define WDOG_WR_TOVALL(base, value) (WDOG_TOVALL_REG(base) = (value))
#define WDOG_RMW_TOVALL(base, mask, value) (WDOG_WR_TOVALL(base, (WDOG_RD_TOVALL(base) & ~(mask)) | (value)))
#define WDOG_SET_TOVALL(base, value) (BME_OR16(&WDOG_TOVALL_REG(base), (uint16_t)(value)))
#define WDOG_CLR_TOVALL(base, value) (BME_AND16(&WDOG_TOVALL_REG(base), (uint16_t)(~(value))))
#define WDOG_TOG_TOVALL(base, value) (BME_XOR16(&WDOG_TOVALL_REG(base), (uint16_t)(value)))
/*@}*/

/*******************************************************************************
 * WDOG_WINH - Watchdog Window Register High
 ******************************************************************************/

/*!
 * @brief WDOG_WINH - Watchdog Window Register High (RW)
 *
 * Reset value: 0x0000U
 *
 * You must set the Window Register value lower than the Time-out Value Register.
 */
/*!
 * @name Constants and macros for entire WDOG_WINH register
 */
/*@{*/
#define WDOG_RD_WINH(base)       (WDOG_WINH_REG(base))
#define WDOG_WR_WINH(base, value) (WDOG_WINH_REG(base) = (value))
#define WDOG_RMW_WINH(base, mask, value) (WDOG_WR_WINH(base, (WDOG_RD_WINH(base) & ~(mask)) | (value)))
#define WDOG_SET_WINH(base, value) (BME_OR16(&WDOG_WINH_REG(base), (uint16_t)(value)))
#define WDOG_CLR_WINH(base, value) (BME_AND16(&WDOG_WINH_REG(base), (uint16_t)(~(value))))
#define WDOG_TOG_WINH(base, value) (BME_XOR16(&WDOG_WINH_REG(base), (uint16_t)(value)))
/*@}*/

/*******************************************************************************
 * WDOG_WINL - Watchdog Window Register Low
 ******************************************************************************/

/*!
 * @brief WDOG_WINL - Watchdog Window Register Low (RW)
 *
 * Reset value: 0x0010U
 *
 * You must set the Window Register value lower than the Time-out Value Register.
 */
/*!
 * @name Constants and macros for entire WDOG_WINL register
 */
/*@{*/
#define WDOG_RD_WINL(base)       (WDOG_WINL_REG(base))
#define WDOG_WR_WINL(base, value) (WDOG_WINL_REG(base) = (value))
#define WDOG_RMW_WINL(base, mask, value) (WDOG_WR_WINL(base, (WDOG_RD_WINL(base) & ~(mask)) | (value)))
#define WDOG_SET_WINL(base, value) (BME_OR16(&WDOG_WINL_REG(base), (uint16_t)(value)))
#define WDOG_CLR_WINL(base, value) (BME_AND16(&WDOG_WINL_REG(base), (uint16_t)(~(value))))
#define WDOG_TOG_WINL(base, value) (BME_XOR16(&WDOG_WINL_REG(base), (uint16_t)(value)))
/*@}*/

/*******************************************************************************
 * WDOG_REFRESH - Watchdog Refresh register
 ******************************************************************************/

/*!
 * @brief WDOG_REFRESH - Watchdog Refresh register (RW)
 *
 * Reset value: 0xB480U
 */
/*!
 * @name Constants and macros for entire WDOG_REFRESH register
 */
/*@{*/
#define WDOG_RD_REFRESH(base)    (WDOG_REFRESH_REG(base))
#define WDOG_WR_REFRESH(base, value) (WDOG_REFRESH_REG(base) = (value))
#define WDOG_RMW_REFRESH(base, mask, value) (WDOG_WR_REFRESH(base, (WDOG_RD_REFRESH(base) & ~(mask)) | (value)))
#define WDOG_SET_REFRESH(base, value) (BME_OR16(&WDOG_REFRESH_REG(base), (uint16_t)(value)))
#define WDOG_CLR_REFRESH(base, value) (BME_AND16(&WDOG_REFRESH_REG(base), (uint16_t)(~(value))))
#define WDOG_TOG_REFRESH(base, value) (BME_XOR16(&WDOG_REFRESH_REG(base), (uint16_t)(value)))
/*@}*/

/*******************************************************************************
 * WDOG_UNLOCK - Watchdog Unlock register
 ******************************************************************************/

/*!
 * @brief WDOG_UNLOCK - Watchdog Unlock register (RW)
 *
 * Reset value: 0xD928U
 */
/*!
 * @name Constants and macros for entire WDOG_UNLOCK register
 */
/*@{*/
#define WDOG_RD_UNLOCK(base)     (WDOG_UNLOCK_REG(base))
#define WDOG_WR_UNLOCK(base, value) (WDOG_UNLOCK_REG(base) = (value))
#define WDOG_RMW_UNLOCK(base, mask, value) (WDOG_WR_UNLOCK(base, (WDOG_RD_UNLOCK(base) & ~(mask)) | (value)))
#define WDOG_SET_UNLOCK(base, value) (BME_OR16(&WDOG_UNLOCK_REG(base), (uint16_t)(value)))
#define WDOG_CLR_UNLOCK(base, value) (BME_AND16(&WDOG_UNLOCK_REG(base), (uint16_t)(~(value))))
#define WDOG_TOG_UNLOCK(base, value) (BME_XOR16(&WDOG_UNLOCK_REG(base), (uint16_t)(value)))
/*@}*/

/*******************************************************************************
 * WDOG_TMROUTH - Watchdog Timer Output Register High
 ******************************************************************************/

/*!
 * @brief WDOG_TMROUTH - Watchdog Timer Output Register High (RW)
 *
 * Reset value: 0x0000U
 */
/*!
 * @name Constants and macros for entire WDOG_TMROUTH register
 */
/*@{*/
#define WDOG_RD_TMROUTH(base)    (WDOG_TMROUTH_REG(base))
#define WDOG_WR_TMROUTH(base, value) (WDOG_TMROUTH_REG(base) = (value))
#define WDOG_RMW_TMROUTH(base, mask, value) (WDOG_WR_TMROUTH(base, (WDOG_RD_TMROUTH(base) & ~(mask)) | (value)))
#define WDOG_SET_TMROUTH(base, value) (BME_OR16(&WDOG_TMROUTH_REG(base), (uint16_t)(value)))
#define WDOG_CLR_TMROUTH(base, value) (BME_AND16(&WDOG_TMROUTH_REG(base), (uint16_t)(~(value))))
#define WDOG_TOG_TMROUTH(base, value) (BME_XOR16(&WDOG_TMROUTH_REG(base), (uint16_t)(value)))
/*@}*/

/*******************************************************************************
 * WDOG_TMROUTL - Watchdog Timer Output Register Low
 ******************************************************************************/

/*!
 * @brief WDOG_TMROUTL - Watchdog Timer Output Register Low (RW)
 *
 * Reset value: 0x0000U
 *
 * During Stop mode, the WDOG_TIMER_OUT will be caught at the pre-stop value of
 * the watchdog timer. After exiting Stop mode, a maximum delay of 1 WDOG_CLK
 * cycle + 3 bus clock cycles will occur before the WDOG_TIMER_OUT starts following
 * the watchdog timer.
 */
/*!
 * @name Constants and macros for entire WDOG_TMROUTL register
 */
/*@{*/
#define WDOG_RD_TMROUTL(base)    (WDOG_TMROUTL_REG(base))
#define WDOG_WR_TMROUTL(base, value) (WDOG_TMROUTL_REG(base) = (value))
#define WDOG_RMW_TMROUTL(base, mask, value) (WDOG_WR_TMROUTL(base, (WDOG_RD_TMROUTL(base) & ~(mask)) | (value)))
#define WDOG_SET_TMROUTL(base, value) (BME_OR16(&WDOG_TMROUTL_REG(base), (uint16_t)(value)))
#define WDOG_CLR_TMROUTL(base, value) (BME_AND16(&WDOG_TMROUTL_REG(base), (uint16_t)(~(value))))
#define WDOG_TOG_TMROUTL(base, value) (BME_XOR16(&WDOG_TMROUTL_REG(base), (uint16_t)(value)))
/*@}*/

/*******************************************************************************
 * WDOG_RSTCNT - Watchdog Reset Count register
 ******************************************************************************/

/*!
 * @brief WDOG_RSTCNT - Watchdog Reset Count register (RW)
 *
 * Reset value: 0x0000U
 */
/*!
 * @name Constants and macros for entire WDOG_RSTCNT register
 */
/*@{*/
#define WDOG_RD_RSTCNT(base)     (WDOG_RSTCNT_REG(base))
#define WDOG_WR_RSTCNT(base, value) (WDOG_RSTCNT_REG(base) = (value))
#define WDOG_RMW_RSTCNT(base, mask, value) (WDOG_WR_RSTCNT(base, (WDOG_RD_RSTCNT(base) & ~(mask)) | (value)))
#define WDOG_SET_RSTCNT(base, value) (BME_OR16(&WDOG_RSTCNT_REG(base), (uint16_t)(value)))
#define WDOG_CLR_RSTCNT(base, value) (BME_AND16(&WDOG_RSTCNT_REG(base), (uint16_t)(~(value))))
#define WDOG_TOG_RSTCNT(base, value) (BME_XOR16(&WDOG_RSTCNT_REG(base), (uint16_t)(value)))
/*@}*/

/*******************************************************************************
 * WDOG_PRESC - Watchdog Prescaler register
 ******************************************************************************/

/*!
 * @brief WDOG_PRESC - Watchdog Prescaler register (RW)
 *
 * Reset value: 0x0400U
 */
/*!
 * @name Constants and macros for entire WDOG_PRESC register
 */
/*@{*/
#define WDOG_RD_PRESC(base)      (WDOG_PRESC_REG(base))
#define WDOG_WR_PRESC(base, value) (WDOG_PRESC_REG(base) = (value))
#define WDOG_RMW_PRESC(base, mask, value) (WDOG_WR_PRESC(base, (WDOG_RD_PRESC(base) & ~(mask)) | (value)))
#define WDOG_SET_PRESC(base, value) (BME_OR16(&WDOG_PRESC_REG(base), (uint16_t)(value)))
#define WDOG_CLR_PRESC(base, value) (BME_AND16(&WDOG_PRESC_REG(base), (uint16_t)(~(value))))
#define WDOG_TOG_PRESC(base, value) (BME_XOR16(&WDOG_PRESC_REG(base), (uint16_t)(value)))
/*@}*/

/*
 * Constants & macros for individual WDOG_PRESC bitfields
 */

/*!
 * @name Register WDOG_PRESC, field PRESCVAL[10:8] (RW)
 *
 * 3-bit prescaler for the watchdog clock source. A value of zero indicates no
 * division of the input WDOG clock. The watchdog clock is divided by (PRESCVAL +
 * 1) to provide the prescaled WDOG_CLK.
 */
/*@{*/
/*! @brief Read current value of the WDOG_PRESC_PRESCVAL field. */
#define WDOG_RD_PRESC_PRESCVAL(base) ((WDOG_PRESC_REG(base) & WDOG_PRESC_PRESCVAL_MASK) >> WDOG_PRESC_PRESCVAL_SHIFT)
#define WDOG_BRD_PRESC_PRESCVAL(base) (BME_UBFX16(&WDOG_PRESC_REG(base), WDOG_PRESC_PRESCVAL_SHIFT, WDOG_PRESC_PRESCVAL_WIDTH))

/*! @brief Set the PRESCVAL field to a new value. */
#define WDOG_WR_PRESC_PRESCVAL(base, value) (WDOG_RMW_PRESC(base, WDOG_PRESC_PRESCVAL_MASK, WDOG_PRESC_PRESCVAL(value)))
#define WDOG_BWR_PRESC_PRESCVAL(base, value) (BME_BFI16(&WDOG_PRESC_REG(base), ((uint16_t)(value) << WDOG_PRESC_PRESCVAL_SHIFT), WDOG_PRESC_PRESCVAL_SHIFT, WDOG_PRESC_PRESCVAL_WIDTH))
/*@}*/

/* Instance numbers for core modules */
#define JTAG_IDX (0) /*!< Instance number for JTAG. */
#define TPIU_IDX (0) /*!< Instance number for TPIU. */
#define SCB_IDX (0) /*!< Instance number for SCB. */
#define CoreDebug_IDX (0) /*!< Instance number for CoreDebug. */

#if defined(__IAR_SYSTEMS_ICC__)
  /* Restore checking of "Error[Pm008]: sections of code should not be 'commented out' (MISRA C 2004 rule 2.4)" */
  #pragma diag_default=pm008
#endif

#endif /* __MK82F25615_EXTENSION_H__ */
/* EOF */
